mber>
    <member name="P:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.UnhandledException">
      <summary>Gets the <see cref="T:System.Exception" /> that was unhandled by the workflow instance.</summary>
      <returns>The <see cref="T:System.Exception" /> that was unhandled by the workflow instance.</returns>
    </member>
    <member name="T:System.Activities.WorkflowApplicationUnloadedException">
      <summary>An exception that is thrown when an operation on a workflow instance is invalid because the instance has been unloaded.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationUnloadedException.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationUnloadedException" /> class.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationUnloadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationUnloadedException" /> class with the context and serialization information required to retrieve data about this exception from a serialized stream.</summary>
      <param name="info">All the information required to serialize or deserialize the application unloaded exception object.</param>
      <param name="context">The source and destination of a given serialized stream and an additional caller-defined context.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationUnloadedException.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationUnloadedException" /> class with the specified text string description of the exception.</summary>
      <param name="message">The description of the application unloaded exception.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationUnloadedException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationUnloadedException" /> class with the specified text string description of the exception and with a specified exception that has a causal relationship to the <see cref="T:System.Activities.WorkflowApplicationUnloadedException" />.</summary>
      <param name="message">A description of the application unloaded exception.</param>
      <param name="innerException">An exception that has a causal relationship to the application unloaded exception. The application unloaded exception is thrown in response to the inner exception and can use information from the inner exception to handle the error more appropriately.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationUnloadedException.#ctor(System.String,System.Guid)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationUnloadedException" /> class with the specified text string description of the exception and the specified unique identifier for it.</summary>
      <param name="message">A description of the application unloaded exception.</param>
      <param name="instanceId">A globally unique identifier.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationUnloadedException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationUnloadedException" /> class with the specified text string description of the exception, unique identifier for it, and the exception that is the cause of the <see cref="T:System.Activities.WorkflowApplicationUnloadedException" />.</summary>
      <param name="message">A description of the application unloaded exception.</param>
      <param name="instanceId">A globally unique identifier.</param>
      <param name="innerException">An exception that has a causal relationship to the application unloaded exception. The application unloaded exception is thrown in response to the inner exception and can use information from the exception to handle the error more appropriately.</param>
    </member>
    <member name="T:System.Activities.WorkflowDataContext">
      <summary>Represents the data context of the current workflow environment and provides a bridge to bring workflow arguments and variables into the scope of  data binding.</summary>
    </member>
    <member name="M:System.Activities.WorkflowDataContext.Dispose">
      <summary>Releases the resources used by the <see cref="T:System.Activities.WorkflowDataContext" />.</summary>
    </member>
    <member name="M:System.Activities.WorkflowDataContext.GetProperties">
      <summary>Returns the collection of properties managed by this <see cref="T:System.Activities.WorkflowDataContext" />.</summary>
      <returns>The collection of properties managed by this <see cref="T:System.Activities.WorkflowDataContext" />.</returns>
    </member>
    <member name="E:System.Activities.WorkflowDataContext.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="T:System.Activities.WorkflowInspectionServices">
      <summary>Provides methods for working with the runtime metadata for an activity tree.</summary>
    </member>
    <member name="M:System.Activities.WorkflowInspectionServices.CacheMetadata(System.Activities.Activity)">
      <summary>Caches the runtime metadata for the specified activity tree.</summary>
      <param name="rootActivity">The root activity of the activity tree.</param>
    </member>
    <member name="M:System.Activities.WorkflowInspectionServices.CacheMetadata(System.Activities.Activity,System.Activities.LocationReferenceEnvironment)">
      <summary>Caches the runtime metadata for the specified activity tree using the specified environment.</summary>
      <param name="rootActivity">The root activity of the activity tree.</param>
      <param name="hostEnvironment">The environment associated with the activity tree.</param>
    </member>
    <member name="M:System.Activities.WorkflowInspectionServices.GetActivities(System.Activities.Activity)">
      <summary>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> that represents all activities associated with the input activity.</summary>
      <returns>An enumeration that represents all activities associated with the input activity.</returns>
      <param name="activity">The root activity.</param>
    </member>
    <member name="M:System.Activities.WorkflowInspectionServices.Resolve(System.Activities.Activity,System.String)">
      <summary>Returns the activity with the specified <paramref name="id" /> from the specified activity tree.</summary>
      <returns>The specified activity if found; otherwise, an <see cref="T:System.ArgumentException" /> is thrown.</returns>
      <param name="root">The activity tree to search.</param>
      <param name="id">The identifier of the activity to find.</param>
    </member>
    <member name="T:System.Activities.WorkflowInvoker">
      <summary>Provides a means for invoking a workflow as if it were a method call.</summary>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</summary>
      <param name="workflow">The workflow definition of the workflow to be invoked by this instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
      <summary>Invokes a workflow asynchronously using the specified <see cref="T:System.AsyncCallback" /> and user-provided state.</summary>
      <returns>A reference to the asynchronous invoke operation.</returns>
      <param name="callback">The method to be called when the workflow has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
      <summary>Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.AsyncCallback" />, and user-provided state.</summary>
      <returns>A reference to the asynchronous invoke operation.</returns>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="callback">The method to be called when the workflow has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</summary>
      <returns>A reference to the asynchronous invoke operation.</returns>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the workflow has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Invokes a workflow asynchronously using the specified time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</summary>
      <returns>A reference to the asynchronous invoke operation.</returns>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the workflow has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)">
      <summary>Attempts to cancel the workflow that was invoked with the specified <paramref name="userState" />.</summary>
      <param name="userState">The token for the workflow to cancel.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)">
      <summary>Returns the results of a workflow that was invoked using one of the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> overloads.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that references the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> operation that started the workflow.</param>
    </member>
    <member name="P:System.Activities.WorkflowInvoker.Extensions">
      <summary>Gets the <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</summary>
      <returns>The <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</returns>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke">
      <summary>Invokes the activity that is passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)">
      <summary>Invokes a workflow synchronously using the specified workflow definition.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
      <param name="workflow">The workflow definition of the workflow to invoke.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
      <param name="workflow">The workflow definition of the workflow to invoke.</param>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
      <summary>Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
      <param name="workflow">The workflow definition of the workflow to invoke.</param>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
      <summary>Invokes a workflow synchronously using the specified workflow definition and time-out interval.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
      <param name="workflow">The workflow definition of the workflow to invoke.</param>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
      <summary>Invokes a workflow synchronously using the specified workflow definition.</summary>
      <returns>A value of type TResult with the result of the execution of the activity.</returns>
      <param name="workflow">The workflow definition of the workflow to invoke. The workflow definition needs to derive from <see cref="T:System.Activities.ActivityWithResult" />.</param>
      <typeparam name="TResult">The type of the workflow.</typeparam>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</summary>
      <returns>A value of type TResult with the result of the execution of the activity.</returns>
      <param name="workflow">The workflow definition of the workflow to invoke.</param>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <typeparam name="TResult">The type of the workflow.</typeparam>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
      <summary>Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.Collections.Generic.IDictionary`2" /> of additional output parameters, and time-out interval.</summary>
      <returns>A value of type TResult with the result of the execution of the activity.</returns>
      <param name="workflow">The workflow definition of the workflow to invoke.</param>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="additionalOutputs">The dictionary of additional output parameters of the workflow, keyed by argument name.</param>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <typeparam name="TResult">The type of the workflow.</typeparam>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
      <summary>Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</summary>
      <returns>A value of type TResult with the result of the execution of the activity.</returns>
      <param name="workflow">The workflow definition of the workflow to invoke.</param>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <typeparam name="TResult">The type of the workflow.</typeparam>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
      <summary>Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
      <summary>Invokes a workflow synchronously with the specified time-out interval.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync">
      <summary>Invokes a workflow asynchronously.</summary>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</summary>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and a unique identifier.</summary>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="userState">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
      <summary>Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</summary>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
      <summary>Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, the specified time-out interval, and a unique identifier.</summary>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="userState">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
      <summary>Invokes a workflow asynchronously using the specified unique identifier.</summary>
      <param name="userState">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)">
      <summary>Invokes a workflow asynchronously with the specified time-out interval.</summary>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
      <summary>Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.</summary>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="userState">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</param>
    </member>
    <member name="E:System.Activities.WorkflowInvoker.InvokeCompleted">
      <summary>Occurs when the workflow invoked by one of the <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> overloads is completed or canceled.</summary>
    </member>
    <member name="T:System.Activities.Debugger.IDebuggableWorkflowTree">
      <summary>Provides an interface whose implementation enables the Workflow debugger to debug a serialized Workflow object.</summary>
    </member>
    <member name="M:System.Activities.Debugger.IDebuggableWorkflowTree.GetWorkflowRoot">
      <summary>Returns the root of the Workflow tree.</summary>
      <returns>A workflow element.</returns>
    </member>
    <member name="T:System.Activities.Debugger.LocalsItemDescription">
      <summary>Represents the name and type of an early bound item that displays in the workflow debugger Locals window.</summary>
    </member>
    <member name="M:System.Activities.Debugger.LocalsItemDescription.#ctor(System.String,System.Type)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Debugger.LocalsItemDescription" /> class with the name and type of the local item defined.</summary>
      <param name="name">The name of the specified early bound local item.</param>
      <param name="type">The type of the specified early bound local item.</param>
    </member>
    <member name="P:System.Activities.Debugger.LocalsItemDescription.Name">
      <summary>Returns the name of a local item accessed while debugging a workflow.</summary>
      <returns>A string representing the name of a local item.</returns>
    </member>
    <member name="M:System.Activities.Debugger.LocalsItemDescription.ToString">
      <summary>Returns a string that represents the name and type of an early bound local item that displays in the workflow debugger Locals window.</summary>
      <returns>A string representing the name and type of a local item.</returns>
    </member>
    <member name="P:System.Activities.Debugger.LocalsItemDescription.Type">
      <summary>Returns the type of a local item accessed while debugging a workflow.</summary>
      <returns>A string representing the type of a local item.</returns>
    </member>
    <member name="T:System.Activities.Debugger.SourceLocation">
      <summary>Identifies a specific location in a target source code file.</summary>
    </member>
    <member name="M:System.Activities.Debugger.SourceLocation.#ctor(System.String,System.Int32)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Debugger.SourceLocation" /> class that specifies a source code file name and the number of a line in that file.</summary>
      <param name="fileName">A source code file.</param>
      <param name="line">The number of a line in the source code file.</param>
    </member>
    <member name="M:System.Activities.Debugger.SourceLocation.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Debugger.SourceLocation" /> class that specifies a source code file name and parameters for a range of data within that file.</summary>
      <param name="fileName">The name of a source code file.</param>
      <param name="startLine">A number that designates the line in the source code file where reading begins.</param>
      <param name="startColumn">A number that designates the column in the source code file where reading begins.</param>
      <param name="endLine">A number that designates the line in the source code file where reading ends.</param>
      <param name="endColumn">A number that designates the column in the source code file where reading ends.</param>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocation.EndColumn">
      <summary>Gets the final column in a range of one or more columns in the source code file.</summary>
      <returns>An integer representing the final column in a range of columns.</returns>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocation.EndLine">
      <summary>Gets the final line in a range of one or more lines in the source code file.</summary>
      <returns>An integer representing the final line in a range of lines.</returns>
    </member>
    <member name="M:System.Activities.Debugger.SourceLocation.Equals(System.Object)">
      <summary>Returns a value that indicates whether the source code file line and column settings referenced by the <see cref="T:System.Activities.Debugger.SourceLocation" /> object are an exact match for the line and column settings in another, specified <see cref="T:System.Activities.Debugger.SourceLocation" /> object.</summary>
      <returns>A boolean that indicates the presence or absence of a match.</returns>
      <param name="obj">A specified <see cref="T:System.Activities.Debugger.SourceLocation" /> object.</param>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocation.FileName">
      <summary>Gets the name of the target source code file.</summary>
      <returns>A string instance of the name of the target source code file.</returns>
    </member>
    <member name="M:System.Activities.Debugger.SourceLocation.GetHashCode">
      <summary>Returns a unique value to represent the <see cref="T:System.Activities.Debugger.SourceLocation" /> object.</summary>
      <returns>An integer representing a hash code.</returns>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocation.IsSingleWholeLine">
      <summary>Gets a value that indicates whether the line and column settings define a single, complete line, and not multiple lines, in the source code file.</summary>
      <returns>A boolean representing what the column settings define.</returns>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocation.StartColumn">
      <summary>Gets the first column in a range of one or more columns in the source code file.</summary>
      <returns>An integer representing a column in a range of columns.</returns>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocation.StartLine">
      <summary>Gets the first line in a range of one or more lines in the source code file.</summary>
      <returns>An integer representing a line a range of lines.</returns>
    </member>
    <member name="T:System.Activities.Debugger.SourceLocationProvider">
      <summary>Provides <see cref="T:System.Activities.Debugger.SourceLocation" /> information for the mapping of a root activity and its descendants to their corresponding source locations.</summary>
    </member>
    <member name="M:System.Activities.Debugger.SourceLocationProvider.CollectMapping(System.Activities.Activity,System.Activities.Activity,System.Collections.Generic.Dictionary{System.Object,System.Activities.Debugger.SourceLocation},System.String)">
      <summary>Creates to a dictionary type collection of mappings of the root activity and its descendants to their corresponding source locations.</summary>
      <param name="rootActivity1">A workflow element that represents an activity that is not mapped to a source location.</param>
      <param name="rootActivity2">A workflow element that shadows <paramref name="rootActivity1" /> but has specific source locations to which its members are mapped.</param>
      <param name="mapping">A dictionary object that contains a root activity and its descendants, each mapped to a source location.</param>
      <param name="path">The path of the source file to use.</param>
    </member>
    <member name="T:System.Activities.Debugger.State">
      <summary>Maintains property information that pinpoints source code locations that can serve as breakpoints or be stepped to by the interpreter.</summary>
    </member>
    <member name="T:System.Activities.Debugger.StateManager">
      <summary>Manages the debugging of each activity that is mapped to a state by the debugging infrastructure.</summary>
    </member>
    <member name="M:System.Activities.Debugger.StateManager.Dispose">
      <summary>Exits each thread in the logical thread list and then clears the list.</summary>
    </member>
    <member name="M:System.Activities.Debugger.StateManager.Exit(System.Int32)">
      <summary>Exits the specified thread and sets its location in the logical thread list to null.</summary>
      <param name="threadIndex">A number that represents an index into a list of logical threads.</param>
    </member>
    <member name="T:System.Activities.Debugger.ThreadWorkerController">
      <summary>Supports the creation and execution of an auxiliary debugging thread, or island, on a dedicated worker thread. This type is a utility class used by the framework and is not intended for public use.</summary>
    </member>
    <member name="M:System.Activities.Debugger.ThreadWorkerController.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Debugger.ThreadWorkerController" /> class.</summary>
    </member>
    <member name="M:System.Activities.Debugger.ThreadWorkerController.IslandWorker(System.Activities.Debugger.ThreadWorkerController)">
      <summary>Directs execution to a particular auxiliary debugger thread.</summary>
      <param name="controller">The auxiliary debugger thread to execute.</param>
    </member>
    <member name="T:System.Activities.Debugger.VirtualStackFrame">
      <summary>Provides a virtual call stack frame for the interpreter.</summary>
    </member>
    <member name="M:System.Activities.Debugger.VirtualStackFrame.#ctor(System.Activities.Debugger.State)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Debugger.VirtualStackFrame" /> class with the state specified.</summary>
      <param name="state">For this implementation, an object that contains the set of properties that define a virtual environment for a frame on a call stack. </param>
    </member>
    <member name="M:System.Activities.Debugger.VirtualStackFrame.#ctor(System.Activities.Debugger.State,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Debugger.VirtualStackFrame" /> class with the state and local variables specified.</summary>
      <param name="state">For this implementation, an object that contains the set of properties that define a virtual environment for a frame on a call stack.</param>
      <param name="locals">Early and late bound variables associated with the state.</param>
    </member>
    <member name="P:System.Activities.Debugger.VirtualStackFrame.Locals">
      <summary>Gets local variables for a frame on a call stack.</summary>
      <returns>A collection of key/value pairs that define early and late bound variables associated with the specified state.</returns>
    </member>
    <member name="P:System.Activities.Debugger.VirtualStackFrame.State">
      <summary>Gets the properties that define a virtual environment for a frame on a call stack.</summary>
      <returns>A State object that contains the properties that define a specified virtual environment.</returns>
    </member>
    <member name="M:System.Activities.Debugger.VirtualStackFrame.ToString">
      <summary>A string instance of the state information.</summary>
      <returns>The state information for a virtual environment.</returns>
    </member>
    <member name="T:System.Activities.Debugger.XamlDebuggerXmlReader">
      <summary>Provides the functionality to parse XAML markup code into an object or tree of objects.</summary>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.#ctor(System.Xaml.XamlReader,System.IO.TextReader)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Debugger.XamlDebuggerXmlReader" /> class with the specified XAML reader and text reader.</summary>
      <param name="underlyingReader">A specified XAML reader object.</param>
      <param name="textReader">A specified text reader object.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.#ctor(System.Xaml.XamlReader,System.Xaml.IXamlLineInfo,System.IO.TextReader)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Debugger.XamlDebuggerXmlReader" /> class with the specified XAML reader, reader position in a document, and text reader.</summary>
      <param name="underlyingReader">A specified XAML reader object.</param>
      <param name="xamlLineInfo">Text line information based on the position of the reader.</param>
      <param name="textReader">A specified text reader object.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.CopyAttachedSourceLocation(System.Object,System.Object)">
      <summary>Retrieves row and column values from the specified activity object and assigns them to the current instance of the XAML reader.</summary>
      <param name="source">The XAML activity instance from which to read source location values.</param>
      <param name="destination">An activity instance.</param>
    </member>
    <member name="F:System.Activities.Debugger.XamlDebuggerXmlReader.EndColumnName">
      <summary>The name of an attached property that represents the ending column of an activity element in its XAML form.</summary>
    </member>
    <member name="F:System.Activities.Debugger.XamlDebuggerXmlReader.EndLineName">
      <summary>The name of an attached property that represents the ending line of an activity element in its XAML form.</summary>
    </member>
    <member name="F:System.Activities.Debugger.XamlDebuggerXmlReader.FileNameName">
      <summary>The name of an attached property that represents the name of the file to be parsed.</summary>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.GetEndColumn(System.Object)">
      <summary>Gets the value of the attached property named in the <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.EndColumnName" /> dependency property field of the specified instance of a XAML reader.</summary>
      <returns>An attached property object.</returns>
      <param name="instance">An activity instance.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.GetEndLine(System.Object)">
      <summary>Gets the value of the attached property named in the <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.EndLineName" /> dependency property field of the specified instance of a XAML reader.</summary>
      <returns>An attached property object.</returns>
      <param name="instance">An activity instance.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.GetFileName(System.Object)">
      <summary>Gets the value of the attached property named in the <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.FileNameName" /> dependency property field of the specified instance of a XAML reader.</summary>
      <returns>An attached property object.</returns>
      <param name="instance">An activity instance.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.GetStartColumn(System.Object)">
      <summary>Gets the value of the attached property named in the <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.StartColumnName" /> dependency property field of the specified instance of a XAML reader.</summary>
      <returns>An attached property object.</returns>
      <param name="instance">An activity instance.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.GetStartLine(System.Object)">
      <summary>Gets the value of the attached property named in the <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.StartLineName" /> dependency property field of the specified instance of a XAML reader.</summary>
      <returns>An attached property object.</returns>
      <param name="instance">An activity instance.</param>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.HasLineInfo">
      <summary>Gets a value that indicates that line information is available.</summary>
      <returns>true.</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.IsEof">
      <summary>Gets a value that indicates whether the underlying reader has reached the end of the XAML file that is being parsed.</summary>
      <returns>true if the reader has reached the end of the file it is parsing; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.LineNumber">
      <summary>Gets the line in a XAML file that is currently being examined by the reader.</summary>
      <returns>A file line number.</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.LinePosition">
      <summary>Gets the position of the line in a XAML file that is currently being examined by the XML reader.</summary>
      <returns>The position of a line in a file.</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.Member">
      <summary>Adds the starting member of the document being parsed to the XAML member base.</summary>
      <returns>The starting member of the XAML document.</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.Namespace">
      <summary>Gets the path that is used in the root element of the XAML document to establish a relationship between the XAML code and its schema.</summary>
      <returns>A namespace declaration for use in the root element of the XAML document.</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.NodeType">
      <summary>Gets the type of the node currently being read in a XAML file.</summary>
      <returns>A XAML node type.</returns>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.Read">
      <summary>Gets a value that indicates whether the end of the XAML file has been reached during the reading operation.</summary>
      <returns>true if the end of the XAML file has been reached; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.SchemaContext">
      <summary>Gets the schema context for the underlying XAML reader.</summary>
      <returns>The schema context information.</returns>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.SetEndColumn(System.Object,System.Object)">
      <summary>Sets the value of the attached property named in the <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.EndColumnName" /> dependency property field of the specified instance of a XAML reader.</summary>
      <param name="instance">The current instance of the XAML reader.</param>
      <param name="value">The <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.EndColumnName" /> property identifier or name.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.SetEndLine(System.Object,System.Object)">
      <summary>Sets the value of the attached property named in the <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.EndLineName" /> dependency property field of the specified instance of a XAML reader.</summary>
      <param name="instance">The current instance of the XAML reader.</param>
      <param name="value">The <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.EndLineName" /> identifier or name.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.SetFileName(System.Object,System.Object)">
      <summary>Sets the value of the attached property named in the <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.FileNameName" /> dependency property field of the specified instance of a XAML reader.</summary>
      <param name="instance">The current instance of the XAML reader.</param>
      <param name="value">The <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.FileNameName" /> property identifier or name.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.SetStartColumn(System.Object,System.Object)">
      <summary>Sets the value of the attached property named in the <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.StartColumnName" /> dependency property field of the specified instance of a XAML reader.</summary>
      <param name="instance">The current instance of the XAML reader.</param>
      <param name="value">The <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.StartColumnName" /> property identifier or name.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.SetStartLine(System.Object,System.Object)">
      <summary>Sets the value of the attached property named in the <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.StartLineName" /> dependency property field of the specified instance of a XAML reader.</summary>
      <param name="instance">The current instance of the XAML reader.</param>
      <param name="value">The <see cref="F:System.Activities.Debugger.XamlDebuggerXmlReader.StartLineName" /> property identifier or name.</param>
    </member>
    <member name="F:System.Activities.Debugger.XamlDebuggerXmlReader.StartColumnName">
      <summary>The name of an attached property that represents the starting column of the activity in its XAML form.</summary>
    </member>
    <member name="F:System.Activities.Debugger.XamlDebuggerXmlReader.StartLineName">
      <summary>The name of an attached property that represents the starting line of the activity in its XAML form.</summary>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.Type">
      <summary>Gets the record type at the XAML start node.</summary>
      <returns>A XAML record type.</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.Value">
      <summary>Gets the element at the node currently being read.</summary>
      <returns>An element in an XAML file.</returns>
    </member>
    <member name="T:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult">
      <summary>Contains the results from executing the <see cref="T:System.Activities.DurableInstancing.QueryActivatableWorkflowsCommand" /> against an instance store.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult" /> class.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult.#ctor(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})">
      <summary>Creates an instance of the <see cref="T:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult" /> class and initializes the <see cref="P:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult.ActivationParameters" /> property with the data in the dictionary object passed in as a parameter.</summary>
      <param name="parameters">A dictionary object containing activation parameters.</param>
    </member>
    <member name="M:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}})">
      <summary>Creates an instance of the <see cref="T:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult" /> class and initializes the <see cref="P:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult.ActivationParameters" /> property with the data in the enumerable dictionary object passed in as a parameter.</summary>
      <param name="parameters">An enumerable dictionary object containing activation parameters.</param>
    </member>
    <member name="P:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult.ActivationParameters">
      <summary>A list of activation parameters that a generic host uses to create a workflow host.</summary>
      <returns>A List object containing activation parameters.</returns>
    </member>
    <member name="T:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand">
      <summary>Use this persistence command to register a workflow service host as a lock owner in the persistence database.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand" /> class.</summary>
    </member>
    <member name="P:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand.InstanceOwnerMetadata">
      <summary>Gets the metadata about the instance owner (currently has a one-to-one mapping to a service host) in a dictionary with an XName object as the key and an <see cref="T:System.Runtime.Persistence.InstanceValue" /> object as a value.</summary>
      <returns>The metadata about the instance owner.</returns>
    </member>
    <member name="T:System.Activities.DurableInstancing.DeleteWorkflowOwnerCommand">
      <summary>Deletes lock owner information from the persistence database. </summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.DeleteWorkflowOwnerCommand.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.DeleteWorkflowOwnerCommand" /> class. </summary>
    </member>
    <member name="T:System.Activities.DurableInstancing.HasActivatableWorkflowEvent">
      <summary>Represents an event that an instance store raises to notify generic hosts about the existence of activatable instances in the persistence database. </summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.HasActivatableWorkflowEvent.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.DurableInstancing.HasActivatableWorkflowEvent" /> class.</summary>
    </member>
    <member name="T:System.Activities.DurableInstancing.HasRunnableWorkflowEvent">
      <summary>Represents an event that the SQL Workflow Instance Store raises to notify workflow hosts about the existence of runnable instances in the persistence database. </summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.HasRunnableWorkflowEvent.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.HasRunnableWorkflowEvent" /> class.</summary>
    </member>
    <member name="T:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand">
      <summary>A persistence command that loads a workflow instance by using the instance key associated with the instance.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand" /> class.</summary>
    </member>
    <member name="P:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand.AcceptUninitializedInstance">
      <summary>Gets a value that indicates whether to allow loading a workflow instance that is in an uninitialized state.</summary>
      <returns>true if the workflow instance is allowed to be loaded when in an uninitialized state; otherwise false.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand.AssociateInstanceKeyToInstanceId">
      <summary>Gets or sets the instance identifier associated with an instance key.</summary>
      <returns>The instance identifier.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand.InstanceKeysToAssociate">
      <summary>Gets the instance keys to be associated with an instance in the persistence store.</summary>
      <returns>The instance keys.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand.LookupInstanceKey">
      <summary>Gets the instance key used to identify the instance to be loaded.</summary>
      <returns>The instance key.</returns>
    </member>
    <member name="T:System.Activities.DurableInstancing.LoadWorkflowCommand">
      <summary>A persistence command that loads a workflow instance based on state information of the instance in the persistence store.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.LoadWorkflowCommand.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.LoadWorkflowCommand" /> class.</summary>
    </member>
    <member name="P:System.Activities.DurableInstancing.LoadWorkflowCommand.AcceptUninitializedInstance">
      <summary>Gets a value that indicates whether to allow loading an uninitialized instance.</summary>
      <returns>true if loading an uninitialized instance is allowed; otherwise false.</returns>
    </member>
    <member name="T:System.Activities.DurableInstancing.QueryActivatableWorkflowsCommand">
      <summary>Represents the command that a generic host executes against an instance store to retrieve activation parameters. The generic host uses these activation parameters to create a workflow host, which in turn loads a runnable service instance.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.QueryActivatableWorkflowsCommand.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.QueryActivatableWorkflowsCommand" /> class.</summary>
    </member>
    <member name="T:System.Activities.DurableInstancing.SaveWorkflowCommand">
      <summary>A persistence command that lets you save instance state information into the persistence store.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.SaveWorkflowCommand.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.SaveWorkflowCommand" /> class. </summary>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.CompleteInstance">
      <summary>Sets the status of the instance in the persistence database to “Completed” and deletes the state information from the database unless the <see cref="P:System.Activities.DurableInstancing.SqlWorkflowInstanceStore.InstanceCompletionAction" /> property is set to “Delete Nothing”.</summary>
      <returns>true if the status of the instance is “Completed” and the state information is deleted; otherwise false. </returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceData">
      <summary>Gets the instance data to be saved into the persistence store. A dictionary that contains names of properties and their values.</summary>
      <returns>The dictionary that contains names of properties and their values.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceKeyMetadataChanges">
      <summary>Gets a dictionary with an instance key as the key and a dictionary of XName and <see cref="T:System.Runtime.Persistence.InstanceValue" /> pairs as the value.</summary>
      <returns>The dictionaries with key/value pairs.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceKeysToAssociate">
      <summary>Contains instance keys that must be associated with an instance. A dictionary that contains a GUID associated with an instance key and metadata associated with the instance key.</summary>
      <returns>The instance keys that must be associated with an instance.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceKeysToComplete">
      <summary>Gets a collection of instance keys that must be disassociated with an instance.</summary>
      <returns>A collection of instance keys that must be disassociated with an instance.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceKeysToFree">
      <summary>Gets a collection of instance keys to be deleted from the persistence store.</summary>
      <returns>A collection of instance keys to be deleted from the persistence store.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceMetadataChanges">
      <summary>Gets a dictionary that contains changes to instance metadata.</summary>
      <returns>The changes to instance metadata.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.UnlockInstance">
      <summary>Removes the lock on an instance. Sets the lock owner to null for an instance.</summary>
      <returns>true if the lock is removed on an instance; otherwise false.</returns>
    </member>
    <member name="T:System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand">
      <summary>Represents the command that a workflow host executes against an instance store to load runnable instances in the persistence store into the memory.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand" /> class.</summary>
    </member>
    <member name="T:System.Activities.ExpressionParser.SourceExpressionException">
      <summary>Represents the exception that is thrown when a text-based expression cannot be converted into an executable form.</summary>
    </member>
    <member name="M:System.Activities.ExpressionParser.SourceExpressionException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.ExpressionParser.SourceExpressionException" /> class.</summary>
    </member>
    <member name="M:System.Activities.ExpressionParser.SourceExpressionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.ExpressionParser.SourceExpressionException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Activities.ExpressionParser.SourceExpressionException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.ExpressionParser.SourceExpressionException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Activities.ExpressionParser.SourceExpressionException.#ctor(System.String,System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.ExpressionParser.SourceExpressionException" /> class with a specified error message and a collection of compiler errors.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="errors">A collection of compiler error data.</param>
    </member>
    <member name="M:System.Activities.ExpressionParser.SourceExpressionException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.ExpressionParser.SourceExpressionException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="P:System.Activities.ExpressionParser.SourceExpressionException.Errors">
      <summary>Gets an enumerable type collection of compiler errors.</summary>
      <returns>An enumerable collection of compiler errors.</returns>
    </member>
    <member name="M:System.Activities.ExpressionParser.SourceExpressionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
      <param name="info">The object that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The object that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Activities.Expressions.Add`3">
      <summary>Computes the sum of two values.</summary>
      <typeparam name="TLeft">The type of the left operand.</typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Add`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Add`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.Add`3.Checked">
      <summary>Gets or sets a value that indicates whether the addition executes in a checked context.</summary>
      <returns>true if the addition executes in a checked context; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Add`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Add`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.And`3">
      <summary>Computes the bitwise logical AND of two values. </summary>
      <typeparam name="TLeft">The type of the left operand.</typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.And`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.And`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.And`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The <see cref="F:System.Activities.Design.View.PropertyKind.InArgument" /> that represents the left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.And`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The <see cref="F:System.Activities.Design.View.PropertyKind.InArgument" /> that represents the right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.AndAlso">
      <summary>Computes the logical AND of two values. Both values are converted into Boolean, and if both are true then this expression returns true. If one or both values evaluate to false, this expression returns false. <see cref="T:System.Activities.Expressions.AndAlso" /> is the “short circuit” version of the logical AND operator, returning false as soon as one of operands is evaluated to be false.</summary>
    </member>
    <member name="M:System.Activities.Expressions.AndAlso.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.AndAlso" /> class. </summary>
    </member>
    <member name="P:System.Activities.Expressions.AndAlso.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.AndAlso.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.ArgumentReference`1">
      <summary> Represents an <see cref="T:System.Activities.Argument" /> used as an l-value in an expression.</summary>
      <typeparam name="T">The type of the argument returned by the <see cref="T:System.Activities.Expressions.ArgumentReference`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ArgumentReference`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ArgumentReference`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Expressions.ArgumentReference`1.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ArgumentReference`1" /> class with the argument name.</summary>
      <param name="argumentName">The argument name.</param>
    </member>
    <member name="P:System.Activities.Expressions.ArgumentReference`1.ArgumentName">
      <summary>Gets or sets the name of the argument to which a reference is to be returned.</summary>
      <returns>The argument name.</returns>
    </member>
    <member name="M:System.Activities.Expressions.ArgumentReference`1.ToString">
      <summary>Returns a <see cref="T:System.String" /> representation of the <see cref="T:System.Activities.Expressions.ArgumentReference`1" />.</summary>
      <returns>The argument name, if the <see cref="P:System.Activities.Expressions.ArgumentReference`1.ArgumentName" /> has been set, otherwise the activity ID and name.</returns>
    </member>
    <member name="T:System.Activities.Expressions.ArgumentValue`1">
      <summary>Represents an <see cref="T:System.Activities.Argument" /> used as an r-value in an expression.</summary>
      <typeparam name="T">The type of the value returned by the <see cref="T:System.Activities.Expressions.ArgumentValue`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ArgumentValue`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ArgumentValue`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Expressions.ArgumentValue`1.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ArgumentValue`1" /> class with the specified argument name.</summary>
      <param name="argumentName">The argument name.</param>
    </member>
    <member name="P:System.Activities.Expressions.ArgumentValue`1.ArgumentName">
      <summary>Gets or sets the name of the argument whose value is to be returned.</summary>
      <returns>The argument name.</returns>
    </member>
    <member name="M:System.Activities.Expressions.ArgumentValue`1.ToString">
      <summary>A <see cref="T:System.String" /> representation of the <see cref="T:System.Activities.Expressions.ArgumentValue`1" />.</summary>
      <returns>The argument name, if the <see cref="P:System.Activities.Expressions.ArgumentValue`1.ArgumentName" /> has been set; otherwise the activity ID and name.</returns>
    </member>
    <member name="T:System.Activities.Expressions.ArrayItemReference`1">
      <summary>A reference to an item within an array.</summary>
      <typeparam name="TItem">The type of the items within the array.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ArrayItemReference`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ArrayItemReference`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.ArrayItemReference`1.Array">
      <summary>Gets or sets the array whose item is being referenced.</summary>
      <returns>The array whose item is being referenced.</returns>
    </member>
    <member name="P:System.Activities.Expressions.ArrayItemReference`1.Index">
      <summary>Gets or sets the array index number of the item being referenced.</summary>
      <returns>The array index number of the item being referenced. </returns>
    </member>
    <member name="T:System.Activities.Expressions.ArrayItemValue`1">
      <summary>An item within an array.</summary>
      <typeparam name="TItem">The type of the items within the array. </typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ArrayItemValue`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ArrayItemValue`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.ArrayItemValue`1.Array">
      <summary>Gets or sets the array to which the item belongs to.</summary>
      <returns>The array to which the item belongs to.</returns>
    </member>
    <member name="P:System.Activities.Expressions.ArrayItemValue`1.Index">
      <summary>Gets or sets the array index number of the array item.</summary>
      <returns>The array item index.</returns>
    </member>
    <member name="T:System.Activities.Expressions.As`2">
      <summary>Attempts to converts an operand to a given type. If the conversion is not possible the result is set to null.</summary>
      <typeparam name="TOperand">The type of the operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.As`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.As`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.As`2.Operand">
      <summary>Gets or sets the operand.</summary>
      <returns>The operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.Cast`2">
      <summary>Attempts to convert an operand to a given type. If the conversion is not possible a run-time error is generated.</summary>
      <typeparam name="TOperand">The type of the operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Cast`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Cast`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.Cast`2.Checked">
      <summary>Gets or sets a value that indicates whether the cast operation executes in a checked context.</summary>
      <returns>true if the cast operation executes in a checked context; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Cast`2.Operand">
      <summary>Gets or sets the operand.</summary>
      <returns>The operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.DelegateArgumentReference`1">
      <summary>Represents a <see cref="T:System.Activities.DelegateArgument" /> used as an l-value in an expression.</summary>
      <typeparam name="T">The data type of the <see cref="T:System.Activities.DelegateArgument" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.DelegateArgumentReference`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.DelegateArgumentReference`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Expressions.DelegateArgumentReference`1.#ctor(System.Activities.DelegateArgument)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.DelegateArgumentReference`1" /> class using the specified <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <param name="delegateArgument">The value of the expression.</param>
    </member>
    <member name="P:System.Activities.Expressions.DelegateArgumentReference`1.DelegateArgument">
      <summary>Gets or sets the <see cref="T:System.Activities.DelegateArgument" /> represented by the <see cref="T:System.Activities.Expressions.DelegateArgumentReference`1" />.</summary>
      <returns>The <see cref="T:System.Activities.DelegateArgument" /> represented by the <see cref="T:System.Activities.Expressions.DelegateArgumentReference`1" />.</returns>
    </member>
    <member name="T:System.Activities.Expressions.DelegateArgumentValue`1">
      <summary>Represents a <see cref="T:System.Activities.DelegateArgument" /> used as an r-value in an expression.</summary>
      <typeparam name="T">The data type of the <see cref="T:System.Activities.DelegateArgument" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.DelegateArgumentValue`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.DelegateArgumentValue`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Expressions.DelegateArgumentValue`1.#ctor(System.Activities.DelegateArgument)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.DelegateArgumentValue`1" /> class using the specified <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <param name="delegateArgument">The value of the expression.</param>
    </member>
    <member name="P:System.Activities.Expressions.DelegateArgumentValue`1.DelegateArgument">
      <summary>Gets or sets the <see cref="T:System.Activities.DelegateArgument" /> represented by the <see cref="T:System.Activities.Expressions.DelegateArgumentValue`1" />.</summary>
      <returns>The <see cref="T:System.Activities.DelegateArgument" /> represented by the <see cref="T:System.Activities.Expressions.DelegateArgumentValue`1" />.</returns>
    </member>
    <member name="T:System.Activities.Expressions.Divide`3">
      <summary>Computes the quotient of a division operation.</summary>
      <typeparam name="TLeft">The type of the left operand.</typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Divide`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Divide`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.Divide`3.Left">
      <summary>Gets or sets the left operand. The left operand is the divisor. </summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Divide`3.Right">
      <summary>Gets or sets the right operand. The right operand is the dividend.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.Equal`3">
      <summary>Performs an equality test between two values. If the two values are equal the expression returns true; otherwise, it returns false.</summary>
      <typeparam name="TLeft">The type of the left operand.</typeparam>
      <typeparam name="TRight">The type of the right operand. </typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Equal`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Equal`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.Equal`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Equal`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.ExpressionServices">
      <summary>A transformation API used to convert environment aware expressions to an activity tree.</summary>
    </member>
    <member name="M:System.Activities.Expressions.ExpressionServices.Convert``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}})">
      <summary>Converts a workflow environment-aware expression to an activity tree.</summary>
      <returns>The converted expression.</returns>
      <param name="expression">The expression being converted.</param>
      <typeparam name="TResult">The type the expression is being converted to.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ExpressionServices.ConvertReference``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}})">
      <summary>Converts a reference to a workflow environment-aware expression to an activity tree.</summary>
      <returns>The converted expression.</returns>
      <param name="expression">The expression being converted.</param>
      <typeparam name="TResult">The type the expression is being converted to.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ExpressionServices.TryConvert``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}},System.Activities.Activity{``0}@)">
      <summary>Converts a workflow environment-aware expression to an activity tree.</summary>
      <returns>true if the expression can be converted, otherwise false.</returns>
      <param name="expression">The expression being converted.</param>
      <param name="result">The converted expression.</param>
      <typeparam name="TResult">The type the expression is being converted to.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ExpressionServices.TryConvertReference``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}},System.Activities.Activity{System.Activities.Location{``0}}@)">
      <summary>Converts a reference to a workflow environment-aware expression to an activity tree.</summary>
      <returns>true if the expression can be converted, otherwise false.</returns>
      <param name="expression">The expression being converted.</param>
      <param name="result">The converted expression.</param>
      <typeparam name="TResult">The type the expression is being converted to.</typeparam>
    </member>
    <member name="T:System.Activities.Expressions.FieldReference`2">
      <summary>A reference to a field.</summary>
      <typeparam name="TOperand">The type of the operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.FieldReference`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.FieldReference`2" /> class. </summary>
    </member>
    <member name="P:System.Activities.Expressions.FieldReference`2.FieldName">
      <summary>Gets or sets the name of the field being referenced.</summary>
      <returns>The name of the field being referenced.</returns>
    </member>
    <member name="P:System.Activities.Expressions.FieldReference`2.Operand">
      <summary>Gets or sets the field reference. </summary>
      <returns>The field reference.</returns>
    </member>
    <member name="T:System.Activities.Expressions.FieldValue`2">
      <summary>A field value.</summary>
      <typeparam name="TOperand">The type of the operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.FieldValue`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.FieldValue`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.FieldValue`2.FieldName">
      <summary>Gets or sets the field name.</summary>
      <returns>The field name.</returns>
    </member>
    <member name="P:System.Activities.Expressions.FieldValue`2.Operand">
      <summary>Gets or sets the value of the field.</summary>
      <returns>The field value.</returns>
    </member>
    <member name="T:System.Activities.Expressions.GreaterThan`3">
      <summary>Performs a relational test between two values. If the left operand is greater than the right operand, the expression returns true. Otherwise, it returns false.</summary>
      <typeparam name="TLeft">The type of the left operand. </typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result. </typeparam>
    </member>
    <member name="M:System.Activities.Expressions.GreaterThan`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.GreaterThan`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.GreaterThan`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The <see cref="F:System.Activities.Design.View.PropertyKind.InArgument" /> that represents the left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.GreaterThan`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The <see cref="F:System.Activities.Design.View.PropertyKind.InArgument" /> that represents the right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.GreaterThanOrEqual`3">
      <summary>Performs a relational test between two values. If the left operand is greater than or equal to the right operand, the expression returns true; otherwise, it returns false.</summary>
      <typeparam name="TLeft">The type of the left operand. </typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result. </typeparam>
    </member>
    <member name="M:System.Activities.Expressions.GreaterThanOrEqual`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.GreaterThanOrEqual`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.GreaterThanOrEqual`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.GreaterThanOrEqual`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.IndexerReference`2">
      <summary>Represents an element referenced by an object indexer that can be used as an l-value in an expression.</summary>
      <typeparam name="TOperand">The type with the indexer.</typeparam>
      <typeparam name="TItem">The type of the indexer array. </typeparam>
    </member>
    <member name="M:System.Activities.Expressions.IndexerReference`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.IndexerReference`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.IndexerReference`2.Indices">
      <summary>Gets a collection of arguments that represent the indices of the element in the indexer array.</summary>
      <returns>The indices of the element in the indexer array.</returns>
    </member>
    <member name="P:System.Activities.Expressions.IndexerReference`2.Operand">
      <summary>Gets or sets the object that contains the indexer.</summary>
      <returns>The object that contains the indexer.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`1">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`1" />.</summary>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`1.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`1" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`10">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="T9">The type of the ninth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`10.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`10" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.Returns <see cref="T:System.Activities.InArgument`1" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument9">
      <summary>Gets or sets the ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`10" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`11">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T9">The type of the ninth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T10">The type of the tenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`11.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`11" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument10">
      <summary>Gets or sets the tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument9">
      <summary>Gets or sets the ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`11" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`12">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T9">The type of the ninth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T10">The type of the tenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T11">The type of the eleventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`12.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`12" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument10">
      <summary>Gets or sets the tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument11">
      <summary>Gets or sets the eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument9">
      <summary>Gets or sets the ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`12" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`13">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T9">The type of the ninth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T10">The type of the tenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T11">The type of the eleventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T12">The type of the twelfth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`13.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`13" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument10">
      <summary>Gets or sets the tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument11">
      <summary>Gets or sets the eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument12">
      <summary>Gets or sets the twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument9">
      <summary>Gets or sets the ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`13" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`14">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T9">The type of the ninth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T10">The type of the tenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T11">The type of the eleventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T12">The type of the twelfth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`14.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`14" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument10">
      <summary>Gets or sets the tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument11">
      <summary>Gets or sets the eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument12">
      <summary>Gets or sets the twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument13">
      <summary>Gets or sets the thirteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The thirteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument9">
      <summary>Gets or sets the ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`14" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`15">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T9">The type of the ninth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T10">The type of the tenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T11">The type of the eleventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T12">The type of the twelfth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T14">The type of the fourteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`15.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`15" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument10">
      <summary>Gets or sets the tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument11">
      <summary>Gets or sets the eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument12">
      <summary>Gets or sets the twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument13">
      <summary>Gets or sets the thirteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The thirteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument14">
      <summary>Gets or sets the fourteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The fourteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument9">
      <summary>Gets or sets the ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`15" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`16">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T9">The type of the ninth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T10">The type of the tenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T11">The type of the eleventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T12">The type of the twelfth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T14">The type of the fourteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T15">The type of the fifteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`16.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`16" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument10">
      <summary>Gets or sets the tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument11">
      <summary>Gets or sets the eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument12">
      <summary>Gets or sets the twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument13">
      <summary>Gets or sets the thirteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The thirteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument14">
      <summary>Gets or sets the fourteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The fourteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument15">
      <summary>Gets or sets the fifteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The fifteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.Returns <see cref="T:System.Activities.InArgument`1" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument9">
      <summary>Gets or sets the ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`16" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`17">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T9">The type of the ninth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T10">The type of the tenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T11">The type of the eleventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T12">The type of the twelfth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T14">The type of the fourteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T15">The type of the fifteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T16">The type of the sixteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`17.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`17" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument10">
      <summary>Gets or sets the tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument11">
      <summary>Gets or sets the eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument12">
      <summary>Gets or sets the twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument13">
      <summary>Gets or sets the thirteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The thirteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument14">
      <summary>Gets or sets the fourteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The fourteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument15">
      <summary>Gets or sets the fifteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The fifteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument16">
      <summary>Gets or sets the sixteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The sixteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.Returns <see cref="T:System.Activities.InArgument`1" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument9">
      <summary>Gets or sets the ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`17" /> to be invoked.</summary>
      <returns>The activity functions to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`2">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`2" />.</summary>
      <typeparam name="T">The type of the <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`2" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`2" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`2.Argument">
      <summary>Gets or sets the argument passed to the <see cref="T:System.Activities.ActivityFunc`2" />.</summary>
      <returns>The argument passed to the <see cref="T:System.Activities.ActivityFunc`2" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`2.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`2" /> to be invoked.</summary>
      <returns>The <see cref="T:System.Activities.ActivityFunc`2" /> to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`3">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`3" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`3" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`3" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`3" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`3.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`3" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`3" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`3.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`3" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`3" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`3.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`3" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`4">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`4" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`4" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`4.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`4" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`4.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`4.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`4.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`4.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`4" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`5">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`5" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`5" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`5.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`5" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`5.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`5.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`5.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`5.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`5.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`5" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`6">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`6" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`6" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`6.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`6" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`6.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`6.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`6.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`6.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`6.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`6.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`6" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`7">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`7" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`7" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`7.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`7" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`7" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`8">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`8" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`8" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`8.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`8" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.Returns <see cref="T:System.Activities.InArgument`1" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`8" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`9">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`9.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`9" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`9" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeMethod`1">
      <summary>Calls a public method of a specified object or type.</summary>
      <typeparam name="TResult">The type of value returned by the activity.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeMethod`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeMethod`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeMethod`1.GenericTypeArguments">
      <summary>The generic type arguments of the contained method.</summary>
      <returns>The arguments.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeMethod`1.MethodName">
      <summary>The name of the method to be invoked when the activity executes.</summary>
      <returns>The method name.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeMethod`1.Parameters">
      <summary>The parameter collection of the method to be invoked.</summary>
      <returns>The parameter collection.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeMethod`1.RunAsynchronously">
      <summary>Gets or sets a value that indicates whether the activity’s method is invoked asynchronously.</summary>
      <returns>true if the method executes asynchronously; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeMethod`1.TargetObject">
      <summary>Gets or sets the object that contains the method to invoke.</summary>
      <returns>The method to invoke.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeMethod`1.TargetType">
      <summary>Gets or sets the type of the <see cref="P:System.Activities.Expressions.InvokeMethod`1.TargetObject" />.</summary>
      <returns>The target object type.</returns>
    </member>
    <member name="T:System.Activities.Expressions.LambdaReference`1">
      <summary>Represents a lambda expression used as an l-value, which supports binding of <see cref="F:System.Activities.ArgumentDirection.Out" /> arguments.</summary>
      <typeparam name="T">The type of value returned by the expression.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.LambdaReference`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.LambdaReference`1" /> class.</summary>
      <param name="locationExpression">The value of the expression.</param>
    </member>
    <member name="M:System.Activities.Expressions.LambdaReference`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>This method always returns true and is used in conjunction with <see cref="M:System.Activities.Expressions.LambdaReference`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)" /> to provide descriptive error messages when an attempt is made to serialize this activity to XAML.</summary>
      <returns>This method always returns true.</returns>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Activities.Expressions.LambdaReference`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>Throws a <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> and is used in conjunction with <see cref="M:System.Activities.Expressions.LambdaReference`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)" /> to provide descriptive error messages when an attempt is made to serialize this activity to XAML.</summary>
      <returns>This method throws a <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> when called.</returns>
      <param name="context">The context information that is used for conversion.</param>
    </member>
    <member name="T:System.Activities.Expressions.LambdaSerializationException">
      <summary>The exception that is thrown when a XAML serialization attempt is made on a <see cref="T:System.Activities.Expressions.LambdaValue`1" /> or <see cref="T:System.Activities.Expressions.LambdaReference`1" />.</summary>
    </member>
    <member name="M:System.Activities.Expressions.LambdaSerializationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> class.</summary>
    </member>
    <member name="M:System.Activities.Expressions.LambdaSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> class with serialized data.</summary>
      <param name="info">The serialized object data about the exception being thrown.</param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Activities.Expressions.LambdaSerializationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Activities.Expressions.LambdaSerializationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.Activities.Expressions.LambdaValue`1">
      <summary>Represents a lambda expression used as an r-value, which supports binding of <see cref="F:System.Activities.ArgumentDirection.In" /> arguments.</summary>
      <typeparam name="TResult">The type of value returned by the expression.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.LambdaValue`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.LambdaValue`1" /> class using the specified expression.</summary>
      <param name="lambdaValue">The lambda expression that represents the value of the <see cref="T:System.Activities.Expressions.LambdaValue`1" />.</param>
    </member>
    <member name="M:System.Activities.Expressions.LambdaValue`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>This method always returns true and is used in conjunction with <see cref="M:System.Activities.Expressions.LambdaValue`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)" /> to provide descriptive error messages when an attempt is made to serialize this activity to XAML.</summary>
      <returns>This method always returns true.</returns>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Activities.Expressions.LambdaValue`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>Throws a <see cref="T:System.Activities.Expressions.LambdaSerializationException" />, and is used in conjunction with <see cref="M:System.Activities.Expressions.LambdaValue`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)" /> to provide descriptive error messages when an attempt is made to serialize this activity to XAML.</summary>
      <returns>Throws a <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> when called.</returns>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Activities.Expressions.LessThan`3">
      <summary>Performs a relational test between two values. If the left operand is less than the right operand, the expression returns true. Otherwise, it returns false.</summary>
      <typeparam name="TLeft">The type of the left operand. </typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result. </typeparam>
    </member>
    <member name="M:System.Activities.Expressions.LessThan`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.LessThan`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.LessThan`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.LessThan`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.LessThanOrEqual`3">
      <summary>Performs a relational test between two values. If the left operand is less than or equal to the right operand, the expression returns true. Otherwise, it returns false.</summary>
      <typeparam name="TLeft">The type of the left operand. </typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result. </typeparam>
    </member>
    <member name="M:System.Activities.Expressions.LessThanOrEqual`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.LessThanOrEqual`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.LessThanOrEqual`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The <see cref="F:System.Activities.Design.View.PropertyKind.InArgument" /> that represents the left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.LessThanOrEqual`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The <see cref="F:System.Activities.Design.View.PropertyKind.InArgument" /> that represents the right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.Literal`1">
      <summary>Represents an expression activity that returns a literal value of the specified type.</summary>
      <typeparam name="T">The type of the value.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Literal`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Literal`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Expressions.Literal`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Literal`1" /> class using the specified value.</summary>
      <param name="value">The literal value of the expression.</param>
    </member>
    <member name="M:System.Activities.Expressions.Literal`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>Gets a value that indicates whether the <see cref="T:System.Activities.Expressions.Literal`1" /> can be converted into a <see cref="T:System.String" />.</summary>
      <returns>true if the value can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">The context information that is used for conversion.</param>
    </member>
    <member name="M:System.Activities.Expressions.Literal`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts the <see cref="T:System.Activities.Expressions.Literal`1" /> to a <see cref="T:System.String" />.</summary>
      <returns>The literal expression.</returns>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Activities.Expressions.Literal`1.ShouldSerializeValue">
      <summary>Returns a value that indicates whether the <see cref="P:System.Activities.Expressions.Literal`1.Value" /> property has changed from its default value and should be serialized.</summary>
      <returns>true if the <see cref="P:System.Activities.Expressions.Literal`1.Value" /> property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Expressions.Literal`1.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the literal’s value.</summary>
      <returns>The string representation of the literal’s value.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Literal`1.Value">
      <summary>Gets or sets the value of the literal expression.</summary>
      <returns>The value of the literal expression.</returns>
    </member>
    <member name="T:System.Activities.Expressions.MultidimensionalArrayItemReference`1">
      <summary>Represents an element in a multidimensional array that can be used as an l-value in an expression.</summary>
      <typeparam name="TItem">The type of elements in the array.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.MultidimensionalArrayItemReference`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.MultidimensionalArrayItemReference`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.MultidimensionalArrayItemReference`1.Array">
      <summary>Gets or sets the array referenced by the <see cref="T:System.Activities.Expressions.MultidimensionalArrayItemReference`1" />.</summary>
      <returns>The array referenced by the <see cref="T:System.Activities.Expressions.MultidimensionalArrayItemReference`1" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.MultidimensionalArrayItemReference`1.Indices">
      <summary>Gets a collection of arguments that represent the indices of the element in the array.</summary>
      <returns>The indices of the element in the array.</returns>
    </member>
    <member name="T:System.Activities.Expressions.Multiply`3">
      <summary>Computes the product of two values.</summary>
      <typeparam name="TLeft">The type of the left operand.</typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Multiply`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Multiply`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.Multiply`3.Checked">
      <summary>Gets or sets a value that indicates whether the multiplication executes in a checked context.</summary>
      <returns>true if the multiplication executes in a checked context; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Multiply`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Multiply`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.New`1">
      <summary>Creates a new instance of the type specified by the <paramref name="TResult" /> type.</summary>
      <typeparam name="TResult">The type of the instance being created.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.New`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.New`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.New`1.Arguments">
      <summary>Gets the arguments required by the constructor.</summary>
      <returns>The arguments required by the constructor.</returns>
    </member>
    <member name="T:System.Activities.Expressions.NewArray`1">
      <summary>Creates a new instance of the array type specified by the <paramref name="Tresult" /> type.</summary>
      <typeparam name="TResult">The type of the instance being created.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.NewArray`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.NewArray`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.NewArray`1.Bounds">
      <summary>Gets the bounds on each dimension of the array.</summary>
      <returns>An <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="T:System.Activities.Expressions.Not`2">
      <summary>Computes the logical negation of a value expression.</summary>
      <typeparam name="TOperand">The type of the value expression.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Not`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Not`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.Not`2.Operand">
      <summary>Gets the value expression that is negated.</summary>
      <returns>The value expression that is negated.</returns>
    </member>
    <member name="T:System.Activities.Expressions.NotEqual`3">
      <summary>Performs an inequality test between two values. If the two values are not equal the expression returns true; otherwise, it returns false.</summary>
      <typeparam name="TLeft">The type of the left operand.</typeparam>
      <typeparam name="TRight">The type of the right operand. </typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.NotEqual`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.NotEqual`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.NotEqual`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.NotEqual`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.Or`3">
      <summary>Computes the bitwise logical OR of two values.</summary>
      <typeparam name="TLeft">The type of the left operand.</typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Or`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Or`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.Or`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Or`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.OrElse">
      <summary>Computes the logical OR of two values. To do this, both operands are evaluated to boolean values. If both operands are false then the expression returns false. If one or both operands evaluate to true, the expression returns true.</summary>
    </member>
    <member name="M:System.Activities.Expressions.OrElse.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.OrElse" /> class. </summary>
    </member>
    <member name="P:System.Activities.Expressions.OrElse.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The <see cref="T:System.Activities.Activity" /> that represents the left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.OrElse.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The <see cref="T:System.Activities.Activity" /> that represents the right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.PropertyReference`2">
      <summary>A reference to a property.</summary>
      <typeparam name="TOperand">The type of the operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.PropertyReference`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.PropertyReference`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.PropertyReference`2.Operand">
      <summary>Gets or sets the property reference.</summary>
      <returns>The property reference.</returns>
    </member>
    <member name="P:System.Activities.Expressions.PropertyReference`2.PropertyName">
      <summary>Gets or sets the name of the property being referenced.</summary>
      <returns>The name of the property being referenced.</returns>
    </member>
    <member name="T:System.Activities.Expressions.PropertyValue`2">
      <summary>A property value.</summary>
      <typeparam name="TOperand">The type of the operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.PropertyValue`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.PropertyValue`2" /> class. </summary>
    </member>
    <member name="P:System.Activities.Expressions.PropertyValue`2.Operand">
      <summary>Gets or sets the property value.</summary>
      <returns>The property value.</returns>
    </member>
    <member name="P:System.Activities.Expressions.PropertyValue`2.PropertyName">
      <summary>Gets or sets the property name.</summary>
      <returns>The property name.</returns>
    </member>
    <member name="T:System.Activities.Expressions.Subtract`3">
      <summary>Computes the difference between two values.</summary>
      <typeparam name="TLeft">The type of the left operand.</typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Subtract`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Subtract`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.Subtract`3.Checked">
      <summary>Gets or sets a value that indicates whether the subtraction executes in a checked context.</summary>
      <returns>true if the subtraction executes in a checked context; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Subtract`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Subtract`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.ValueTypeFieldReference`2">
      <summary>Represents a field on a value type that can be used as an l-value in an expression.</summary>
      <typeparam name="TOperand">The value type.</typeparam>
      <typeparam name="TResult">The field type.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ValueTypeFieldReference`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ValueTypeFieldReference`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.ValueTypeFieldReference`2.FieldName">
      <summary>Gets or sets the name of the field.</summary>
      <returns>The name of the field.</returns>
    </member>
    <member name="P:System.Activities.Expressions.ValueTypeFieldReference`2.OperandLocation">
      <summary>Gets or sets the instance of the value type that contains the field.</summary>
      <returns>The instance of the value type that contains the field.</returns>
    </member>
    <member name="T:System.Activities.Expressions.ValueTypeIndexerReference`2">
      <summary>Represents an element referenced by an indexer on a value type that can be used as an l-value in an expression.</summary>
      <typeparam name="TOperand">The value type with the indexer.</typeparam>
      <typeparam name="TItem">The type of indexer array.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ValueTypeIndexerReference`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ValueTypeIndexerReference`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.ValueTypeIndexerReference`2.Indices">
      <summary>Gets a collection of arguments that represent the indices of the element in the indexer array.</summary>
      <returns>The indices of the element in the indexer array.</returns>
    </member>
    <member name="P:System.Activities.Expressions.ValueTypeIndexerReference`2.OperandLocation">
      <summary>Gets or sets the instance of the value type that contains the indexer.</summary>
      <returns>The instance of the value type that contains the indexer.</returns>
    </member>
    <member name="T:System.Activities.Expressions.ValueTypePropertyReference`2">
      <summary>Represents a property on a value type that can be used as an l-value in an expression.</summary>
      <typeparam name="TOperand">The value type.</typeparam>
      <typeparam name="TResult">The property type.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ValueTypePropertyReference`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ValueTypePropertyReference`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.ValueTypePropertyReference`2.OperandLocation">
      <summary>Gets or sets the instance of the value type that contains the property.</summary>
      <returns>The instance of the value type that contains the property.</returns>
    </member>
    <member name="P:System.Activities.Expressions.ValueTypePropertyReference`2.PropertyName">
      <summary>Gets or sets the name of the property.</summary>
      <returns>The name of the property.</returns>
    </member>
    <member name="T:System.Activities.Expressions.VariableReference`1">
      <summary>Represents a <see cref="T:System.Activities.Variable" /> used as an l-value in an expression.</summary>
      <typeparam name="T">The type of the <see cref="T:System.Activities.Expressions.VariableReference`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.VariableReference`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.VariableReference`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Expressions.VariableReference`1.#ctor(System.Activities.Variable)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.VariableReference`1" /> class using the specified variable.</summary>
      <param name="variable">The value of the expression.</param>
    </member>
    <member name="M:System.Activities.Expressions.VariableReference`1.ToString">
      <summary>Returns a <see cref="T:System.String" /> representation of the <see cref="T:System.Activities.Expressions.VariableReference`1" />.</summary>
      <returns>The variable reference.</returns>
    </member>
    <member name="P:System.Activities.Expressions.VariableReference`1.Variable">
      <summary>Gets or sets the <see cref="T:System.Activities.Variable" /> represented by the <see cref="T:System.Activities.Expressions.VariableReference`1" />.</summary>
      <returns>The variable.</returns>
    </member>
    <member name="T:System.Activities.Expressions.VariableValue`1">
      <summary>Represents a <see cref="T:System.Activities.Variable" /> used as an r-value in an expression.</summary>
      <typeparam name="T">The type of the <see cref="T:System.Activities.Expressions.VariableValue`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.VariableValue`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.VariableValue`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Expressions.VariableValue`1.#ctor(System.Activities.Variable)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.VariableValue`1" /> class using the specified variable.</summary>
      <param name="variable">The value of the expression.</param>
    </member>
    <member name="M:System.Activities.Expressions.VariableValue`1.ToString">
      <summary>Returns a <see cref="T:System.String" /> representation of the <see cref="T:System.Activities.Expressions.VariableValue`1" />.</summary>
      <returns>The value of the variable.</returns>
    </member>
    <member name="P:System.Activities.Expressions.VariableValue`1.Variable">
      <summary>Gets or sets the <see cref="T:System.Activities.Variable" /> represented by the <see cref="T:System.Activities.Expressions.VariableValue`1" />.</summary>
      <returns>The variable.</returns>
    </member>
    <member name="T:System.Activities.Hosting.BookmarkInfo">
      <summary>Represents information about a named <see cref="T:System.Activities.Bookmark" />.</summary>
    </member>
    <member name="P:System.Activities.Hosting.BookmarkInfo.BookmarkName">
      <summary>Gets the name associated with the <see cref="T:System.Activities.Bookmark" />.</summary>
      <returns>The name associated with the <see cref="T:System.Activities.Bookmark" />.</returns>
    </member>
    <member name="P:System.Activities.Hosting.BookmarkInfo.OwnerDisplayName">
      <summary>Gets an optional friendly name that is used for debugging, validation, exception handling, and tracking.</summary>
      <returns>A friendly name that is used for debugging, validation, exception handling, and tracking.</returns>
    </member>
    <member name="P:System.Activities.Hosting.BookmarkInfo.ScopeInfo">
      <summary>Gets the <see cref="T:System.Activities.Hosting.BookmarkScopeInfo" /> of the <see cref="T:System.Activities.BookmarkScope" /> associated with the <see cref="T:System.Activities.Bookmark" />.</summary>
      <returns>The bookmark scope information of the <see cref="T:System.Activities.BookmarkScope" /> associated with the <see cref="T:System.Activities.Bookmark" />.</returns>
    </member>
    <member name="T:System.Activities.Hosting.BookmarkScopeInfo">
      <summary>Contains identification and initialization information about a <see cref="T:System.Activities.BookmarkScope" /> object.</summary>
    </member>
    <member name="P:System.Activities.Hosting.BookmarkScopeInfo.Id">
      <summary>Gets the unique identifier for the <see cref="T:System.Activities.BookmarkScope" />.</summary>
      <returns>The unique identifier for the <see cref="T:System.Activities.BookmarkScope" />.</returns>
    </member>
    <member name="P:System.Activities.Hosting.BookmarkScopeInfo.IsInitialized">
      <summary>Gets a value that indicates whether the <see cref="T:System.Activities.BookmarkScope" /> has been initialized.</summary>
      <returns>true if the <see cref="T:System.Activities.BookmarkScope" /> has been initialized; otherwise false.</returns>
    </member>
    <member name="P:System.Activities.Hosting.BookmarkScopeInfo.TemporaryId">
      <summary>Gets a value that uniquely identifies the <see cref="T:System.Activities.BookmarkScope" /> when the <see cref="T:System.Activities.BookmarkScope" /> is in an uninitialized state.</summary>
      <returns>A value that uniquely identifies the <see cref="T:System.Activities.BookmarkScope" /> when the <see cref="T:System.Activities.BookmarkScope" /> is in an uninitialized state.</returns>
    </member>
    <member name="T:System.Activities.Hosting.IWorkflowInstanceExtension">
      <summary>This interface is implemented by composite extensions, or extensions that need access to the workflow instance. Implementers of this interface will be called by the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> prior to execution in order to provide additional extensions, or get access to the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> through the <see cref="T:System.Activities.Hosting.WorkflowInstanceProxy" />.</summary>
    </member>
    <member name="M:System.Activities.Hosting.IWorkflowInstanceExtension.GetAdditionalExtensions">
      <summary>When implemented, returns any additional extensions the implementing class requires.</summary>
      <returns>A collection of additional workflow extensions.</returns>
    </member>
    <member name="M:System.Activities.Hosting.IWorkflowInstanceExtension.SetInstance(System.Activities.Hosting.WorkflowInstanceProxy)">
      <summary>Sets the specified target <see cref="T:System.Activities.Hosting.WorkflowInstanceProxy" />.</summary>
      <param name="instance">The target workflow instance to set.</param>
    </member>
    <member name="T:System.Activities.Hosting.LocationInfo">
      <summary>Provides information about a related <see cref="T:System.Activities.Location" />.</summary>
    </member>
    <member name="P:System.Activities.Hosting.LocationInfo.Name">
      <summary>Gets a <see cref="T:System.String" /> value that identifies the related <see cref="T:System.Activities.Location" />.</summary>
      <returns>The related location.</returns>
    </member>
    <member name="P:System.Activities.Hosting.LocationInfo.OwnerDisplayName">
      <summary>Gets an optional friendly name that is used for debugging, validation, exception handling, and tracking.</summary>
      <returns>An optional friendly name that is used for debugging, validation, exception handling, and tracking.</returns>
    </member>
    <member name="P:System.Activities.Hosting.LocationInfo.Value">
      <summary>Gets the value stored at the related <see cref="T:System.Activities.Location" />.</summary>
      <returns>The value stored at the related <see cref="T:System.Activities.Location" />.</returns>
    </member>
    <member name="T:System.Activities.Hosting.SymbolResolver">
      <summary>
        <see cref="T:System.Activities.Hosting.SymbolResolver" /> is an extension for providing a host <see cref="T:System.Activities.LocationReferenceEnvironment" /> containing objects that can be dereferenced by a string name.  Values provided through a <see cref="T:System.Activities.Hosting.SymbolResolver" /> are not persisted.  Persistence of <see cref="T:System.Activities.Hosting.SymbolResolver" /> values is a host responsibility.</summary>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Hosting.SymbolResolver" /> class.</summary>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Adds a symbol using the specified key/value pair.</summary>
      <param name="item">The symbol to add.</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Add(System.String,System.Object)">
      <summary>Adds a symbol using the specified symbol name and value.</summary>
      <param name="key">The name of the symbol.</param>
      <param name="value">The value of the symbol to reference.</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Add(System.String,System.Object,System.Type)">
      <summary>Adds a symbol using the specified symbol name, value, and type.</summary>
      <param name="key">The name of the symbol.</param>
      <param name="value">The value of the symbol to reference.</param>
      <param name="type">The type of the symbol value.</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Add(System.String,System.Type)">
      <summary>Adds a symbol using the specified symbol name and type.</summary>
      <param name="key">The name of the symbol.</param>
      <param name="type">The type of the symbol value.</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.AsLocationReferenceEnvironment">
      <summary>Returns a <see cref="T:System.Activities.LocationReferenceEnvironment" /> instance that enables access to references of symbol values in <see cref="T:System.Activities.Hosting.SymbolResolver" /> represented as <see cref="T:System.Activities.LocationReference" /> objects.</summary>
      <returns>A location reference that enables access to references to symbol values in <see cref="T:System.Activities.Hosting.SymbolResolver" /> represented as <see cref="T:System.Activities.LocationReference" /> objects.</returns>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Clear">
      <summary>Removes all symbols from the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</summary>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Returns a value that indicates whether the <see cref="T:System.Activities.Hosting.SymbolResolver" /> contains the specified symbol.</summary>
      <returns>true if the <see cref="T:System.Activities.Hosting.SymbolResolver" /> contains the specified symbol; otherwise, false.</returns>
      <param name="item">The symbol as a key/value pair to locate in the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.ContainsKey(System.String)">
      <summary>Returns a value that indicates whether the <see cref="T:System.Activities.Hosting.SymbolResolver" /> contains a symbol with the specified key.</summary>
      <returns>true if the <see cref="T:System.Activities.Hosting.SymbolResolver" /> contains a symbol with the specified key; otherwise, false.</returns>
      <param name="key">The key of the symbol to locate.</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Copies the symbols in the <see cref="T:System.Activities.Hosting.SymbolResolver" /> to an existing one-dimensional array of key/value pairs, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array of key/value pairs to copy the symbols to. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in the destination array at which copying begins.</param>
    </member>
    <member name="P:System.Activities.Hosting.SymbolResolver.Count">
      <summary>Gets the number of symbols contained in the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</summary>
      <returns>The number of symbols contained in the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</returns>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection of key/value pairs where the keys are the symbol names and values the symbol values.</summary>
      <returns>An enumerator that iterates through a collection of key/value pairs.</returns>
    </member>
    <member name="P:System.Activities.Hosting.SymbolResolver.IsReadOnly">
      <summary>Gets a value that indicates whether the dictionary of symbols in the <see cref="T:System.Activities.Hosting.SymbolResolver" /> is read-only.</summary>
      <returns>false.</returns>
    </member>
    <member name="P:System.Activities.Hosting.SymbolResolver.Item(System.String)">
      <summary>Gets or sets the value of the item associated with the specified key.</summary>
      <returns>The value of the item associated with the specified key.</returns>
      <param name="key">The key of the item.</param>
    </member>
    <member name="P:System.Activities.Hosting.SymbolResolver.Keys">
      <summary>Gets a collection of all keys in the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</summary>
      <returns>A collection of all keys in the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</returns>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Removes the specified symbol from the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</summary>
      <returns>true if the symbol is successfully found and removed; otherwise, false. This method returns false if the symbol is not present.</returns>
      <param name="item">The symbol to remove.</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Remove(System.String)">
      <summary>Removes a symbol from the <see cref="T:System.Activities.Hosting.SymbolResolver" /> using a specified key.</summary>
      <returns>true if the symbol is successfully found and removed; otherwise, false. This method returns false if the symbol is not present.</returns>
      <param name="key">The key of the symbol to remove.</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection of key/value pairs where the keys are the symbol names and values the symbol values.</summary>
      <returns>An enumerator that iterates through a collection of key/value pairs.</returns>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.TryGetValue(System.String,System.Object@)">
      <summary>Gets the value associated with the specified key.</summary>
      <returns>true if the <see cref="T:System.Activities.Hosting.SymbolResolver" /> contains an element with the specified key; otherwise, false.</returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
    </member>
    <member name="P:System.Activities.Hosting.SymbolResolver.Values">
      <summary>Gets a collection of all values in the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</summary>
      <returns>A collection of all values in the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</returns>
    </member>
    <member name="T:System.Activities.Hosting.WorkflowInstance">
      <summary>
        <see cref="T:System.Activities.Hosting.WorkflowInstance" /> is a lightweight, per-instance runtime for executing a workflow program. It can be constructed to create a new workflow instance or from existing instance state. The APIs that <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> exposes are the minimal set of runtime controls from which higher level operations can be implemented. This API set represents the entire breadth of functionality of the runtime. <see cref="T:System.Activities.Hosting.WorkflowInstance" /> is an abstract class and relies on a host’s implementation of its abstract methods in order to provide host functionality such as synchronization, persistence, tracking, and extensions.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.#ctor(System.Activities.Activity)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> class with the specified workflow definition.</summary>
      <param name="workflowDefinition">The activity that defines the workflow.</param>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.Controller">
      <summary>Gets the <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> instance for this <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</summary>
      <returns>The controller instance for this workflow instance.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.DisposeExtensions">
      <summary>Calls <see cref="M:System.Disposable.Dispose" /> on all extensions that implement <see cref="T:System.IDisposable" />.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.GetExtension``1">
      <summary>Returns an extension of the specified type.</summary>
      <returns>An extension of the specified type.</returns>
      <typeparam name="T">The type of the extension to find.</typeparam>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.GetExtensions``1">
      <summary>Returns all extensions found for the specified type.</summary>
      <returns>All extensions found for the specified type.</returns>
      <typeparam name="T">The type of the extension to find.</typeparam>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.HostEnvironment">
      <summary>Gets or sets the root environment for the workflow instance’s arguments and variables.</summary>
      <returns>The root environment for the workflow instance’s arguments and variables.</returns>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.Id">
      <summary>Gets the unique identifier for the workflow instance.</summary>
      <returns>The unique identifier for the workflow instance.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.Initialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IList{System.Activities.Handle})">
      <summary>Called by the host to initialize the workflow instance with the argument values and execution properties.</summary>
      <param name="workflowArgumentValues">The input parameters to the workflow, keyed by argument name.</param>
      <param name="workflowExecutionProperties">The list of workflow execution properties.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.Initialize(System.Object)">
      <summary>Called by the host to initialize the workflow instance with the workflow run-time state.</summary>
      <param name="deserializedRuntimeState">The run-time state used to execute the workflow.</param>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.IsReadOnly">
      <summary>Gets a value that indicates whether the workflow instance has been initialized.</summary>
      <returns>true if the workflow instance has been initialized; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnBeginAssociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey},System.AsyncCallback,System.Object)">
      <summary>Called by the workflow runtime to notify the host that new instance keys should be associated with this instance.</summary>
      <returns>A reference to the asynchronous associate keys operation.</returns>
      <param name="keys">The instance keys to associate with this workflow instance.</param>
      <param name="callback">The method to be called when the operation completes.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnBeginFlushTrackingRecords(System.AsyncCallback,System.Object)">
      <summary>Asynchronous call to ask host to flush pending tracking records to tracking participants.</summary>
      <returns>The status of the current track operation.</returns>
      <param name="callback">The method to be called when the track operation has completed.</param>
      <param name="state">The information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnBeginPersist(System.AsyncCallback,System.Object)">
      <summary>Asynchronous call to ask the host to persist the workflow.</summary>
      <returns>A reference to the current persist operation.</returns>
      <param name="callback">The method to be called when the persist operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnBeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Called by the workflow runtime to notify the host that a resume bookmark operation is beginning.</summary>
      <returns>A reference to the asynchronous resume operation.</returns>
      <param name="bookmark">The bookmark to resume.</param>
      <param name="value">The data to be passed to the activity that created the <see cref="T:System.Activities.Bookmark" />.</param>
      <param name="timeout">The interval in which the resume operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the resume operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnDisassociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey})">
      <summary>Called by the workflow runtime to notify the host that a certain set of instance keys should no longer be associated with this instance.</summary>
      <param name="keys">The list of keys to disassociate.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnEndAssociateKeys(System.IAsyncResult)">
      <summary>Called by the workflow runtime to notify the host that an associate keys operation is complete.</summary>
      <param name="result">The reference to the asynchronous associate keys operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnEndFlushTrackingRecords(System.IAsyncResult)">
      <summary>Called by the workflow runtime to notify the host when the flush tracking records operation is complete. </summary>
      <param name="result">The status of the asynchronous flush tracking records operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnEndPersist(System.IAsyncResult)">
      <summary>Called by the workflow runtime to notify the host that a persist operation is complete.</summary>
      <param name="result">The reference to the asynchronous persist operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnEndResumeBookmark(System.IAsyncResult)">
      <summary>Called by the workflow runtime to notify the host that a resume bookmark operation is complete.</summary>
      <returns>One of the enumeration values that indicates the result of a <see cref="T:System.Activities.Bookmark" /> resume operation.</returns>
      <param name="result">The reference to the asynchronous resume bookmark operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnNotifyPaused">
      <summary>Called by the workflow runtime to notify the host that the workflow instance has transitioned from the running state to the paused state.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnNotifyUnhandledException(System.Exception,System.Activities.Activity,System.String)">
      <summary>Called by the workflow runtime to notify the host an unhandled exception has occurred in the workflow instance.</summary>
      <param name="exception">The unhandled exception.</param>
      <param name="source">The activity that threw the exception.</param>
      <param name="sourceInstanceId">The unique identifier of the <see cref="T:System.Activities.ActivityInstance" /> representing the activity that threw the exception.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnRequestAbort(System.Exception)">
      <summary>Called by the workflow runtime to notify the host that an abort operation has been requested for the workflow instance.</summary>
      <param name="reason">The reason for aborting the workflow instance.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.RegisterExtensionManager(System.Activities.Hosting.WorkflowInstanceExtensionManager)">
      <summary>Called by the host to register the specified extension manager, validate that all required extensions are present, and to initialize the collection of extensions to be used.</summary>
      <param name="extensionManager">The extension manager to register.</param>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.SupportsInstanceKeys">
      <summary>Gets a value that indicates whether the host supports the association of <see cref="P:System.Runtime.Persistence.InstanceView.InstanceKeys" /> with a run-time instance.</summary>
      <returns>true if the host supports the association of <see cref="P:System.Runtime.Persistence.InstanceView.InstanceKeys" /> with a workflow instance; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.SynchronizationContext">
      <summary>Gets or sets the <see cref="T:System.Threading.SynchronizationContext" /> used for scheduling the workflow instance.</summary>
      <returns>The synchronization context used for scheduling the workflow instance.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.ThrowIfReadOnly">
      <summary>Throws an <see cref="T:System.InvalidOperationException" /> if the workflow instance has been initialized, as determined by <see cref="P:System.Activities.Hosting.WorkflowInstance.IsReadOnly" />.</summary>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.WorkflowDefinition">
      <summary>Gets the workflow definition of the workflow instance.</summary>
      <returns>The workflow definition of the workflow instance.</returns>
    </member>
    <member name="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl">
      <summary>Provides methods for <see cref="T:System.Activities.Hosting.WorkflowInstance" /> derived classes to access the functionality of the workflow runtime.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Abort">
      <summary>Aborts the <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Abort(System.Exception)">
      <summary>Aborts the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> using the specified exception.</summary>
      <param name="reason">The reason for aborting the <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.BeginFlushTrackingRecords(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Called by the workflow runtime to begin sending pending tracking records to tracking participants asynchronously.</summary>
      <returns>The status of the current track operation.</returns>
      <param name="timeout">The time period after which to abort the attempt.</param>
      <param name="callback">The method to be called when the track operation has completed.</param>
      <param name="state">The information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.EndFlushTrackingRecords(System.IAsyncResult)">
      <summary>Called by the workflow runtime to end the track operation.</summary>
      <param name="result">The status of the asynchronous track operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> is equal to the specified object.</summary>
      <returns>true of the object is equal to the current <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" />; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.FlushTrackingRecords(System.TimeSpan)">
      <summary>Called by the workflow runtime to send pending tracking records to tracking participants.</summary>
      <param name="timeout">The time period after which to abort the attempt.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetAbortReason">
      <summary>Returns the exception that causes the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> to abort.</summary>
      <returns>The exception that caused the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> to abort, or null if the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> did not abort.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetBookmarks">
      <summary>Returns the collection of available bookmarks for the <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</summary>
      <returns>A collection of bookmarks for the <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetBookmarks(System.Activities.BookmarkScope)">
      <summary>Returns the collection of available bookmarks for the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> created in the specified <see cref="T:System.Activities.BookmarkScope" />.</summary>
      <returns>The collection of bookmarks created in the specified <see cref="T:System.Activities.BookmarkScope" />.</returns>
      <param name="scope">The bookmark scope to inspect.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetCompletionState">
      <summary>Returns the final <see cref="T:System.Activities.ActivityInstanceState" /> of the <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</summary>
      <returns>One of the enumeration members that describes the state of an activity instance.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetCompletionState(System.Collections.Generic.IDictionary{System.String,System.Object}@,System.Exception@)">
      <summary>Returns the final <see cref="T:System.Activities.ActivityInstanceState" /> of the <see cref="T:System.Activities.Hosting.WorkflowInstance" />, including workflow outputs and termination exception.</summary>
      <returns>One of the enumeration members that describes the state of an activity instance.</returns>
      <param name="outputs">When this method returns, <paramref name="outputs" /> contains a dictionary of <see cref="F:System.Activities.ArgumentDirection.Out" /> arguments of the workflow, keyed by argument name. This parameter is passed uninitialized.</param>
      <param name="terminationException">When this method returns, <paramref name="terminationException" /> contains the exception that caused the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> to terminate, or null if the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> did not terminate. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetCompletionState(System.Exception@)">
      <summary>Returns the final <see cref="T:System.Activities.ActivityInstanceState" /> of the <see cref="T:System.Activities.Hosting.WorkflowInstance" />, including termination exception.</summary>
      <returns>One of the enumeration members that describes the state of an activity instance.</returns>
      <param name="terminationException">When this method returns, <paramref name="terminationException" /> contains the exception that caused the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> to terminate, or null if the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> did not terminate. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" />.</summary>
      <returns>The hash code for this <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" />.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetMappedVariables">
      <summary>Returns a dictionary of variables in the current scope that have been specified with <see cref="F:System.Activities.VariableModifiers.Mapped" />.</summary>
      <returns>A dictionary of mapped variables currently in scope.</returns>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.HasPendingTrackingRecords">
      <summary>Called by the workflow runtime to determine whether this workflow instance has pending tracking records and a tracking participant.</summary>
      <returns>true if this workflow instance has pending tracking records and a tracking participant; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.IsPersistable">
      <summary>Gets a value that indicates whether the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> is in a state where it can be persisted.</summary>
      <returns>true if the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> can be persisted; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.op_Equality(System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl,System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl)">
      <summary>Returns a value that indicates whether two <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> instances are equal.</summary>
      <returns>true if the two <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> instances are equal; otherwise, false. </returns>
      <param name="left">The first <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> to compare.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.op_Inequality(System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl,System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl)">
      <summary>Returns a value that indicates whether two <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> instances are not equal.</summary>
      <returns>true if the two <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> instances are not equal; otherwise, false.</returns>
      <param name="left">The first <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> to compare.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.PauseWhenPersistable">
      <summary>Requests that the workflow runtime pause the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> at the next point of execution where it is possible to persist. Note that the scheduler queue may not be empty at this point.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.PrepareForSerialization">
      <summary>Prepares the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> state for serialization.</summary>
      <returns>A workflow instance state.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.RequestPause">
      <summary>Requests that the scheduler stops.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run">
      <summary>Instructs the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> to begin execution.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.ScheduleBookmarkResumption(System.Activities.Bookmark,System.Object)">
      <summary>Schedules a bookmark resumption with the specified value.</summary>
      <returns>One of the enumeration values that indicates the result of a <see cref="T:System.Activities.Bookmark" /> scheduling operation.</returns>
      <param name="bookmark">The bookmark to resume.</param>
      <param name="value">The data to be passed to the activity that created the <see cref="T:System.Activities.Bookmark" />.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.ScheduleBookmarkResumption(System.Activities.Bookmark,System.Object,System.Activities.BookmarkScope)">
      <summary>Schedules a <see cref="T:System.Activities.Bookmark" /> resumption from the specified <see cref="T:System.Activities.BookmarkScope" />.</summary>
      <returns>One of the enumeration values that indicates the result of a <see cref="T:System.Activities.Bookmark" /> scheduling operation.</returns>
      <param name="bookmark">The bookmark to resume.</param>
      <param name="value">The data to be passed to the activity that created the <see cref="T:System.Activities.Bookmark" />.</param>
      <param name="scope">The <see cref="T:System.Activities.Bookmark" /> under which the <see cref="T:System.Activities.Bookmark" /> was created.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.ScheduleCancel">
      <summary>Schedules the cancellation of the <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</summary>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.State">
      <summary>Gets the state of the <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</summary>
      <returns>One of the enumeration values that specifies the state of a <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Terminate(System.Exception)">
      <summary>Transitions the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> into the terminal <see cref="F:System.Activities.ActivityInstanceState.Faulted" /> state using the specified exception.</summary>
      <param name="reason">The exception that is the reason for terminating the <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Track(System.Activities.Tracking.WorkflowInstanceRecord)">
      <summary>Called by the workflow runtime to add the specified pending record to the list of pending records.</summary>
      <param name="instanceRecord">The tracking record to add.</param>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.TrackingEnabled">
      <summary>Called by the workflow runtime to determine whether tracking is enabled in this workflow instance.</summary>
      <returns>true if tracking is enabled in this workflow instance; otherwise, false.</returns>
    </member>
    <member name="T:System.Activities.Hosting.WorkflowInstanceExtensionManager">
      <summary>Manages a collection of extensions for a <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceExtensionManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Hosting.WorkflowInstanceExtensionManager" /> class.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add``1(System.Func{``0})">
      <summary>Adds an extension to the collection of extensions using the specified <see cref="T:System.Func`1" />.</summary>
      <param name="extensionCreationFunction">The method that creates the extension.</param>
      <typeparam name="T">The type of extension to add.</typeparam>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add(System.Object)">
      <summary>Adds the specified extension to the collection of extensions.</summary>
      <param name="singletonExtension">The extension to add.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly">
      <summary>Marks the collection of extensions as read-only.</summary>
    </member>
    <member name="T:System.Activities.Hosting.WorkflowInstanceProxy">
      <summary>A class that allows <see cref="T:System.Activities.Hosting.IWorkflowInstanceExtensions" /> extensions access to the workflow service host.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceProxy.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.AsyncCallback,System.Object)">
      <summary>Resumes a workflow from a bookmark asynchronously using the specified bookmark, value, callback method, and user-provided state data.</summary>
      <returns>A reference to the asynchronous operation.</returns>
      <param name="bookmark">The bookmark.</param>
      <param name="value">The data to be passed to the activity that created the bookmark.</param>
      <param name="callback">The method to be called when the asynchronous resume operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceProxy.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Resumes a workflow from a bookmark asynchronously using the specified bookmark, value, time-out interval, callback method, and user-provided state. </summary>
      <returns>A reference to the asynchronous operation.</returns>
      <param name="bookmark">The bookmark.</param>
      <param name="value">The data to be passed to the activity that created the bookmark.</param>
      <param name="timeout">The interval in which the resume operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the resume operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceProxy.EndResumeBookmark(System.IAsyncResult)">
      <summary>Waits for the pending asynchronous <see cref="Overload:System.Activities.Hosting.WorkflowInstanceProxy.BeginResumeBookmark" /> to complete.</summary>
      <returns>Returns <see cref="T:System.Activities.BookmarkResumptionResult" />.</returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that references the resume operation.</param>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstanceProxy.Id">
      <summary>Gets the workflow instance ID.</summary>
      <returns>The workflow instance ID.</returns>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstanceProxy.WorkflowDefinition">
      <summary>Gets the workflow definition.</summary>
      <returns>The workflow definition.</returns>
    </member>
    <member name="T:System.Activities.Hosting.WorkflowInstanceState">
      <summary>Specifies the state of a <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</summary>
    </member>
    <member name="F:System.Activities.Hosting.WorkflowInstanceState.Idle">
      <summary>The <see cref="T:System.Activities.Hosting.WorkflowInstance" /> is idle.</summary>
    </member>
    <member name="F:System.Activities.Hosting.WorkflowInstanceState.Runnable">
      <summary>The <see cref="T:System.Activities.Hosting.WorkflowInstance" /> can be run.</summary>
    </member>
    <member name="F:System.Activities.Hosting.WorkflowInstanceState.Complete">
      <summary>The <see cref="T:System.Activities.Hosting.WorkflowInstance" /> is complete.</summary>
    </member>
    <member name="F:System.Activities.Hosting.WorkflowInstanceState.Aborted">
      <summary>The <see cref="T:System.Activities.Hosting.WorkflowInstance" /> is aborted.</summary>
    </member>
    <member name="T:System.Activities.Persistence.PersistenceIOParticipant">
      <summary>A derived vclass of the <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> class with methods that perform input and output operations in addition to the persisting and loading of workflow instances through the persistence process.</summary>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceIOParticipant.#ctor(System.Boolean,System.Boolean)">
      <summary>Initializes an instance of the <see cref="T:System.Activities.Persistence.PersistenceIOParticipant" /> class.</summary>
      <param name="isSaveTransactionRequired">true if a transaction is required for the Save operation. If the <see cref="T:System.Activities.Persistence.PersistenceIOParticipant" /> object is created with this parameter set to true,  Transaction.Current is guaranteed to be set when BeginOnSave is invoked. The transaction is shared between the persistence provider, all PersistenceIOParticipant extensions, and potentially other transaction participants.</param>
      <param name="isLoadTransactionRequired">true if a transaction is required for the Load operation. If the <see cref="T:System.Activities.Persistence.PersistenceIOParticipant" /> object is created with this parameter set to true,  Transaction.Current is guaranteed to be set  when BeginOnLoad is invoked. The transaction is shared between the persistence provider, all PersistenceIOParticipant extensions, and potentially other transaction participants.</param>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceIOParticipant.Abort">
      <summary>Aborts the pending IO (Load or Save) operation.</summary>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceIOParticipant.BeginOnLoad(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to load additional state in conjunction with an instance being loaded from the instance store.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="readWriteValues">A dictionary of read-write values loaded by the persistence provider. This corresponds to the set of read-write values passed to BeginOnSave in the most recent persistence episode for this instance.</param>
      <param name="timeout">The time span within which the operation should be completed without timing out. </param>
      <param name="callback">The asynchronous callback delegate that receives notification of the completion of the asynchronous Load operation.</param>
      <param name="state">The state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceIOParticipant.BeginOnSave(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to save additional state in conjunction with an instance being persisted to the instance store.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="readWriteValues">A dictionary of read-write values collected in the CollectValues and MapValues stages.</param>
      <param name="writeOnlyValues">A dictionary of write-only values collected in the CollectValues and MapValues stages.</param>
      <param name="timeout">The time span within which the operation should be completed without timing out. </param>
      <param name="callback">The asynchronous callback delegate that receives notification of the completion of the asynchronous operation.</param>
      <param name="state">The state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceIOParticipant.EndOnLoad(System.IAsyncResult)">
      <summary>Completes the asynchronous Load operation.</summary>
      <param name="result">The asynchronous result returned by a call to the <see cref="M:System.Activities.Persistence.PersistenceIOParticipant.BeginOnSave(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceIOParticipant.EndOnSave(System.IAsyncResult)">
      <summary>Completes the asynchronous Save operation.</summary>
      <param name="result">The asynchronous result returned by a call to the <see cref="M:System.Activities.Persistence.PersistenceIOParticipant.BeginOnSave(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="T:System.Activities.Persistence.PersistenceParticipant">
      <summary>This class allows both <see cref="T:System.Activities.WorkflowApplication" /> and <see cref="T:System.ServiceModel.WorkflowServiceHost" /> to participate in persistence process. A persistence participant derives from the <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> class or the <see cref="T:System.Activities.Persistence.PersistenceIOParticipant" /> class (derived class of the <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> class), implements abstract methods, and then add an instance of the class as a workflow instance extension. The <see cref="T:System.Activities.WorkflowApplication" /> and <see cref="T:System.ServiceModel.WorkflowServiceHost" /> look for such extensions when persisting an instance and invoke appropriate methods at appropriate times.</summary>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceParticipant.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> class.</summary>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceParticipant.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)">
      <summary>A host invokes this method on a custom persistence participant to collect read-write values and write-only values, to be persisted. </summary>
      <param name="readWriteValues">The read-write values to be persisted.</param>
      <param name="writeOnlyValues">The write-only values to be persisted.</param>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceParticipant.MapValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})">
      <summary>A host invokes this method after it is done with collecting the values in the first stage. The host forwards two read-only dictionaries of values it collected from all persistence participants during the first stage (CollectValues stage) to this method for mapping. The host adds values in the dictionary returned by this method to the collection of write-only values.</summary>
      <returns>A dictionary containing additional write-only values to be persisted.</returns>
      <param name="readWriteValues">The read-write values to be persisted.</param>
      <param name="writeOnlyValues">The write-only values to be persisted.</param>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceParticipant.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})">
      <summary>The host invokes this method and passes all the loaded values in the <see cref="P:System.Activities.Persistence.SaveWorkflowCommand.InstanceData" /> collection (filled by the <see cref="T:System.Activities.Persistence.LoadWorkflowCommand" /> or <see cref="T:System.Activities.Persistence.LoadWorkflowByInstanceKeyCommand" />) as a dictionary parameter. </summary>
      <param name="readWriteValues">The read-write values that were loaded from the persistence store. This dictionary corresponds to the dictionary of read-write values persisted in the most recent persistence episode.</param>
    </member>
    <member name="T:System.Activities.Statements.AddToCollection`1">
      <summary>Adds an item to a specified collection.</summary>
      <typeparam name="T">The type of elements in the specified collection.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.AddToCollection`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.AddToCollection`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.AddToCollection`1.Collection">
      <summary>The collection that receives the new item.</summary>
      <returns>The collection.</returns>
    </member>
    <member name="P:System.Activities.Statements.AddToCollection`1.Item">
      <summary>The item to add to the specified collection.</summary>
      <returns>The item.</returns>
    </member>
    <member name="T:System.Activities.Statements.Assign">
      <summary>Sets <see cref="T:System.Activities.Argument" /> values from within a workflow.</summary>
    </member>
    <member name="M:System.Activities.Statements.Assign.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Assign" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Assign.To">
      <summary>Specifies the <see cref="T:System.Activities.Argument" /> that the activity assigns its <see cref="P:System.Activities.Statements.Assign.Value" /> to.</summary>
      <returns>The specified <see cref="T:System.Activities.Argument" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.Assign.Value">
      <summary>Specifies the value that is assigned.</summary>
      <returns>The value to be assigned.</returns>
    </member>
    <member name="T:System.Activities.Statements.Assign`1">
      <summary>The <see cref="T:System.Activities.Statements.Assign" /> activity is used to set <see cref="T:System.Activities.Argument" /> values from within a workflow.</summary>
      <typeparam name="T">The type of the assigned value.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.Assign`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Assign`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Assign`1.To">
      <summary>Specifies the <see cref="T:System.Activities.Argument" /> that the activity assigns its <see cref="P:System.Activities.Statements.Assign.Value" /> to.</summary>
      <returns>The specified <see cref="T:System.WorkflowModel.Argument" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.Assign`1.Value">
      <summary>Specifies the value that is assigned.</summary>
      <returns>The value to be assigned.</returns>
    </member>
    <member name="T:System.Activities.Statements.CancellationScope">
      <summary>Associates cancellation logic, in the form of a <see cref="T:System.Activities.Activity" />, with a main path of execution, also expressed as a <see cref="T:System.Activities.Activity" />.</summary>
    </member>
    <member name="M:System.Activities.Statements.CancellationScope.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.CancellationScope" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.CancellationScope.Body">
      <summary>Gets the <see cref="T:System.Activities.Activity" /> contained by the <see cref="T:System.Activities.Statements.CancellationScope" /> that represents the main path of execution.</summary>
      <returns>The main path of execution.</returns>
    </member>
    <member name="P:System.Activities.Statements.CancellationScope.CancellationHandler">
      <summary>The <see cref="T:System.Activities.Activity" /> that is executed in the event of cancellation.</summary>
      <returns>The cancellation handler.</returns>
    </member>
    <member name="P:System.Activities.Statements.CancellationScope.Variables">
      <summary>Gets the collection of <see cref="T:System.Activities.Activity" /> objects associated with the <see cref="T:System.Activities.Statements.CancellationScope" />.</summary>
      <returns>The collection of <see cref="T:System.Activities.Activity" /> objects associated with the <see cref="T:System.Activities.Statements.CancellationScope" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.Catch">
      <summary>Contains the actions to be executed after an exception is thrown in the corresponding Try block of a <see cref="T:System.Activities.Statements.TryCatchFinally" /> activity.</summary>
    </member>
    <member name="P:System.Activities.Statements.Catch.ExceptionType">
      <summary>The type of exception that the <see cref="T:System.Activities.Statements.Catch" /> block is handling.</summary>
      <returns>The exception type.</returns>
    </member>
    <member name="T:System.Activities.Statements.Catch`1">
      <summary>Contains the actions to be executed after an exception is raised in the corresponding Try block of a <see cref="T:System.Activities.Statements.TryCatchFinally" /> activity.</summary>
      <typeparam name="TException">The type of exception that the <see cref="T:System.Activities.Statements.Catch`1" /> block is handling.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.Catch`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Catch`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Catch`1.Action">
      <summary>The handler for the exception being caught. </summary>
      <returns>The activity action.</returns>
    </member>
    <member name="P:System.Activities.Statements.Catch`1.ExceptionType">
      <summary>The type of exception that the <see cref="T:System.Activities.Statements.Catch" /> block is handling.</summary>
      <returns>The exception type.</returns>
    </member>
    <member name="T:System.Activities.Statements.ClearCollection`1">
      <summary>Clears a specified collection of all items.</summary>
      <typeparam name="T">The type of the elements in the <see cref="P:System.Activities.Statements.ClearCollection`1.Collection" /> parameter.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.ClearCollection`1.#ctor">
      <summary>Creates a new instance of the <see cref="M:System.Activities.Statements.ClearCollection`1.#ctor" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.ClearCollection`1.Collection">
      <summary>The collection to be cleared of contents.</summary>
      <returns>The collection.</returns>
    </member>
    <member name="T:System.Activities.Statements.CompensableActivity">
      <summary>An activity that supports compensation of its child activities.</summary>
    </member>
    <member name="M:System.Activities.Statements.CompensableActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.CompensableActivity" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.CompensableActivity.Body">
      <summary>Gets or sets the activity that is scheduled when the <see cref="T:System.Activities.Statements.CompensableActivity" /> executes.</summary>
      <returns>The activity that is scheduled when the <see cref="T:System.Activities.Statements.CompensableActivity" /> executes.</returns>
    </member>
    <member name="P:System.Activities.Statements.CompensableActivity.CancellationHandler">
      <summary>Gets or sets the activity that is scheduled when the activity is canceled.</summary>
      <returns>The activity that is scheduled when the activity is canceled.</returns>
    </member>
    <member name="P:System.Activities.Statements.CompensableActivity.CompensationHandler">
      <summary>Gets or sets the activity that is scheduled when compensation is performed on the <see cref="T:System.Activities.Statements.CompensableActivity" />.</summary>
      <returns>The activity that is scheduled when compensation is performed on the <see cref="T:System.Activities.Statements.CompensableActivity" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.CompensableActivity.ConfirmationHandler">
      <summary>Gets or sets the activity that is scheduled when confirmation is performed for this <see cref="T:System.Activities.Statements.CompensableActivity" />.</summary>
      <returns>The activity that is scheduled when confirmation is performed for this <see cref="T:System.Activities.Statements.CompensableActivity" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.CompensableActivity.Variables">
      <summary>Gets the collection of <see cref="T:System.WorkflowModel.Variable" /> objects for this <see cref="T:System.Activities.Statements.CompensableActivity" />.</summary>
      <returns>The collection of <see cref="T:System.WorkflowModel.Variable" /> objects for this <see cref="T:System.Activities.Statements.CompensableActivity" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.Compensate">
      <summary>An activity used to explicitly invoke the compensation handler of a <see cref="T:System.Activities.Statements.CompensableActivity" />.</summary>
    </member>
    <member name="M:System.Activities.Statements.Compensate.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.Compensate" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Compensate.Target">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the <see cref="T:System.Activities.Statements.CompensationHandle" /> for this <see cref="T:System.Activities.Statements.Compensate" /> activity.</summary>
      <returns>
A <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the <see cref="T:System.Activities.Statements.CompensationHandle" /> for this <see cref="T:System.Activities.Statements.Compensate" />.
</returns>
    </member>
    <member name="T:System.Activities.Statements.CompensationToken">
      <summary>Provides a means to explicitly confirm or compensate a <see cref="T:System.Activities.Statements.CompensableActivity" /> once the <see cref="P:System.Activities.Statements.CompensableActivity.Body" /> of the <see cref="T:System.Activities.Statements.CompensableActivity" /> has successfully completed.</summary>
    </member>
    <member name="T:System.Activities.Statements.Confirm">
      <summary>An activity used to explicitly invoke the confirmation handler of a <see cref="T:System.Activities.Statements.CompensableActivity" />.</summary>
    </member>
    <member name="M:System.Activities.Statements.Confirm.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.Confirm" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Confirm.Target">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the <see cref="T:System.Activities.Statements.CompensationHandle" /> for this <see cref="T:System.Activities.Statements.Confirm" /> activity.</summary>
      <returns>The <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the <see cref="T:System.Activities.Statements.CompensationHandle" /> for this <see cref="T:System.Activities.Statements.Confirm" /> activity.</returns>
    </member>
    <member name="T:System.Activities.Statements.CreateBookmarkScope">
      <summary>Creates a <see cref="T:System.Activities.BookmarkScope" />.</summary>
    </member>
    <member name="M:System.Activities.Statements.CreateBookmarkScope.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.CreateBookmarkScope" /> class.</summary>
    </member>
    <member name="T:System.Activities.Statements.Delay">
      <summary>Creates a timer for a specified duration, using a <see cref="T:System.Activities.Statements.TimerExtension" />.</summary>
    </member>
    <member name="M:System.Activities.Statements.Delay.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Delay" /> activity.</summary>
    </member>
    <member name="P:System.Activities.Statements.Delay.Duration">
      <summary>The duration of the timer that the <see cref="T:System.Activities.Statements.Delay" /> activity creates.</summary>
      <returns>The timer duration.</returns>
    </member>
    <member name="T:System.Activities.Statements.DeleteBookmarkScope">
      <summary>Deletes the <see cref="T:System.Activities.BookmarkScope" /> referenced by <see cref="P:System.Activities.Statements.DeleteBookmarkScope.Scope" />.</summary>
    </member>
    <member name="M:System.Activities.Statements.DeleteBookmarkScope.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.DeleteBookmarkScope" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.DeleteBookmarkScope.Scope">
      <summary>Gets or sets the associated <see cref="T:System.Activities.BookmarkScope" />.</summary>
      <returns>The associated <see cref="T:System.Activities.BookmarkScope" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.DoWhile">
      <summary>A looping activity that executes contained activities at least once, until a condition is no longer true.</summary>
    </member>
    <member name="M:System.Activities.Statements.DoWhile.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.DoWhile" /> class.</summary>
    </member>
    <member name="M:System.Activities.Statements.DoWhile.#ctor(System.Activities.Activity{System.Boolean})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.DoWhile" /> class.</summary>
      <param name="condition">The condition under which the activity continues to iterate.</param>
    </member>
    <member name="M:System.Activities.Statements.DoWhile.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,System.Boolean}})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.DoWhile" /> class.</summary>
      <param name="condition">The condition under which the activity continues to iterate.</param>
    </member>
    <member name="P:System.Activities.Statements.DoWhile.Body">
      <summary>The child activity to be executed with every iteration.</summary>
      <returns>The child activity.</returns>
    </member>
    <member name="P:System.Activities.Statements.DoWhile.Condition">
      <summary>The <see cref="T:System.Activities.Activity’1" /> checked at the end of the loop to determine whether the loop is executed again.</summary>
      <returns>The condition for re-executing the loop.</returns>
    </member>
    <member name="P:System.Activities.Statements.DoWhile.Variables">
      <summary>The collection of <see cref="T:System.Activity.Variable" /> objects associated with the <see cref="T:System.Activities.Statements.DoWhile" /> activity.</summary>
      <returns>The collection of variables.</returns>
    </member>
    <member name="T:System.Activities.Statements.DurableTimerExtension">
      <summary>Represents an activity timer extension that can be persisted. </summary>
    </member>
    <member name="M:System.Activities.Statements.DurableTimerExtension.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.DurableTimerExtension" /> class.</summary>
    </member>
    <member name="M:System.Activities.Statements.DurableTimerExtension.Dispose">
      <summary>Terminates all registered timers.</summary>
    </member>
    <member name="M:System.Activities.Statements.DurableTimerExtension.GetAdditionalExtensions">
      <summary>Returns an enumerator that iterates over the collection of timer extensions.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:System.Activities.Statements.DurableTimerExtension.OnCancelTimer(System.Activities.Bookmark)">
      <summary>Removes a timer object from the table of registered timers for the current workflow operation.</summary>
      <param name="bookmark">A point at which a workflow or activity can passively wait to be resumed following the expiration of the timer object.</param>
    </member>
    <member name="M:System.Activities.Statements.DurableTimerExtension.OnRegisterTimer(System.TimeSpan,System.Activities.Bookmark)">
      <summary>Adds a timer object that contains the specified time span and bookmark information to the table of registered timers for the current workflow operation.</summary>
      <param name="timeout">A time span object that is added to the timer registration table entry in a workflow operation along with callback information.</param>
      <param name="bookmark">A point at which a workflow or activity can passively wait to be resumed following the expiration of a timer object.</param>
    </member>
    <member name="M:System.Activities.Statements.DurableTimerExtension.SetInstance(System.Activities.Hosting.WorkflowInstanceProxy)">
      <summary>Establishes the specified workflow instance as the current instance.</summary>
      <param name="instance">The workflow instance to make current.</param>
    </member>
    <member name="T:System.Activities.Statements.ExistsInCollection`1">
      <summary>Indicates whether a given item is present in a given collection.</summary>
      <typeparam name="T">The type of elements in the specified collection.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.ExistsInCollection`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.ExistsInCollection`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.ExistsInCollection`1.Collection">
      <summary>The collection to be searched for the specified element.</summary>
      <returns>The collection.</returns>
    </member>
    <member name="P:System.Activities.Statements.ExistsInCollection`1.Item">
      <summary>The item to search the specified collection for.</summary>
      <returns>The item.</returns>
    </member>
    <member name="T:System.Activities.Statements.Flowchart">
      <summary>Models workflows using the familiar flowchart paradigm</summary>
    </member>
    <member name="M:System.Activities.Statements.Flowchart.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Flowchart" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Flowchart.Nodes">
      <summary>The collection of <see cref="T:System.Activities.Statements.FlowNode" /> objects contained by the flowchart.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.Flowchart.StartNode">
      <summary>The <see cref="T:System.Activities.Statements.FlowNode" /> to be executed when the flowchart starts.</summary>
      <returns>The starting node.</returns>
    </member>
    <member name="P:System.Activities.Statements.Flowchart.Variables">
      <summary>The collection of <see cref="T:System.WorkflowModel.Variable" /> objects associated with the <see cref="T:System.Activities.Statements.Flowchart" />, which are available to share state across the child activities contained within the Flowchart.</summary>
      <returns>The collection of variables.</returns>
    </member>
    <member name="T:System.Activities.Statements.FlowDecision">
      <summary>A specialized <see cref="T:System.Activities.Statements.FlowNode" /> that provides the ability to model a conditional node with two outcomes. </summary>
    </member>
    <member name="M:System.Activities.Statements.FlowDecision.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.FlowDecision" /> class.</summary>
    </member>
    <member name="M:System.Activities.Statements.FlowDecision.#ctor(System.Activities.Activity{System.Boolean})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.FlowDecision" /> class with the specified condition.</summary>
      <param name="condition">The condition the <see cref="T:System.Activities.Statements.FlowDecision" /> is testing.</param>
    </member>
    <member name="M:System.Activities.Statements.FlowDecision.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,System.Boolean}})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.FlowDecision" /> class with the specified condition.</summary>
      <param name="condition">The condition the <see cref="T:System.Activities.Statements.FlowDecision" /> is testing.</param>
    </member>
    <member name="P:System.Activities.Statements.FlowDecision.Condition">
      <summary>Specifies the condition the <see cref="T:System.Activities.Statements.FlowDecision" /> is testing.</summary>
      <returns>A value expression that represents the condition. </returns>
    </member>
    <member name="P:System.Activities.Statements.FlowDecision.False">
      <summary>Gets or sets the <see cref="T:System.Activities.Statements.FlowNode" /> that is executed when the condition evaluates to false.</summary>
      <returns>The workflow element that is executed when the condition evaluates to false.</returns>
    </member>
    <member name="P:System.Activities.Statements.FlowDecision.True">
      <summary>Gets or sets the <see cref="T:System.Activities.Statements.FlowNode" /> that is executed when the condition evaluates to true.</summary>
      <returns>The workflow element to execute when the condition evaluates to true.</returns>
    </member>
    <member name="T:System.Activities.Statements.FlowNode">
      <summary>The abstract base class for all the different node types that can be contained within a <see cref="T:System.Activities.Statements.Flowchart" /> activity.</summary>
    </member>
    <member name="T:System.Activities.Statements.FlowStep">
      <summary>A <see cref="T:System.Activities.Statements.FlowNode" /> element that executes a specified <see cref="P:System.Activities.Statements.FlowStep.Action" /> and has a <see cref="P:System.Activities.Statements.FlowStep.Next" /> pointer. </summary>
    </member>
    <member name="M:System.Activities.Statements.FlowStep.#ctor">
      <summary>Returns a new instance of the <see cref="T:System.Activities.Statements.FlowStep" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.FlowStep.Action">
      <summary>The <see cref="T:System.Activities.Activity" /> that the <see cref="T:System.Activities.Statements.FlowStep" /> executes.</summary>
      <returns>The activity to be executed as part of this step of the flowchart.</returns>
    </member>
    <member name="P:System.Activities.Statements.FlowStep.Next">
      <summary>The next <see cref="T:System.Activities.Statements.FlowNode" />in the flowchart to execute after executing the current <see cref="T:System.Activities.Statements.FlowStep" />.</summary>
      <returns>The specified element.</returns>
    </member>
    <member name="T:System.Activities.Statements.FlowSwitch`1">
      <summary>A specialized <see cref="T:System.Activities.Statements.FlowNode" /> that allows modeling a switch construct, with one expression and one outcome for each match.</summary>
      <typeparam name="T">The type of the expression to evaluate against cases. </typeparam>
    </member>
    <member name="M:System.Activities.Statements.FlowSwitch`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.FlowSwitch`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.FlowSwitch`1.Cases">
      <summary>Gets a dictionary of cases to be processed by the <see cref="T:System.Activities.Statements.FlowSwitch`1" /> element.</summary>
      <returns>The collection of cases.</returns>
    </member>
    <member name="P:System.Activities.Statements.FlowSwitch`1.Default">
      <summary>The <see cref="T:System.Activities.Statements.FlowNode" /> to be executed if no elements in the <see cref="P:System.Activities.Statements.FlowSwitch`1.Cases" /> collection match the result of the evaluation of the <see cref="P:System.Activities.Statements.FlowSwitch`1.Expression" />.</summary>
      <returns>The default <see cref="T:System.Activities.Statements.FlowNode" /> to execute.</returns>
    </member>
    <member name="P:System.Activities.Statements.FlowSwitch`1.Expression">
      <summary>The expression to evaluate against the collection of <see cref="P:System.Activities.Statements.FlowSwitch`1.Cases" />.</summary>
      <returns>The expression to evaluate.</returns>
    </member>
    <member name="T:System.Activities.Statements.ForEach`1">
      <summary>Executes an activity action once for each value provided in the <see cref="P:System.Activities.Statements.ForEach`1.Values" /> collection.</summary>
      <typeparam name="T">The type of the values provided in the <see cref="P:System.Activities.Statements.ForEach`1.Values" /> collection.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.ForEach`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.ForEach`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.ForEach`1.Body">
      <summary>The <see cref="T:System.Activities.ActivityAction" /> to be executed for each item in the <see cref="P:System.Activities.Statements.ForEach`1.Values" /> collection.</summary>
      <returns>The action to be executed.</returns>
    </member>
    <member name="P:System.Activities.Statements.ForEach`1.Values">
      <summary>The activity’s collection of inputs for the execution of the <see cref="P:System.Activities.Statements.ForEach`1.Body" /> activity action.</summary>
      <returns>The collection of values.</returns>
    </member>
    <member name="T:System.Activities.Statements.HandleScope`1">
      <summary>Provides default scoping behavior for <see cref="T:System.Activities.Handle" /> objects.</summary>
      <typeparam name="THandle">The type of the <see cref="P:System.Activities.Statements.HandleScope`1.Handle" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.HandleScope`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.HandleScope`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.HandleScope`1.Body">
      <summary>The activity to be scoped by this activity.</summary>
      <returns>The scoped activity.</returns>
    </member>
    <member name="P:System.Activities.Statements.HandleScope`1.Handle">
      <summary>The <see cref="T:System.Activities.Handle" /> flowed in from a parent scope.</summary>
      <returns>The handle.</returns>
    </member>
    <member name="T:System.Activities.Statements.If">
      <summary>Models an If-Then-Else condition.</summary>
    </member>
    <member name="M:System.Activities.Statements.If.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.If" /> class.</summary>
    </member>
    <member name="M:System.Activities.Statements.If.#ctor(System.Activities.Activity{System.Boolean})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.If" /> class using the specified condition.</summary>
      <param name="condition">The execution condition.</param>
    </member>
    <member name="M:System.Activities.Statements.If.#ctor(System.Activities.InArgument{System.Boolean})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.If" /> class using the specified condition.</summary>
      <param name="condition">The execution condition.</param>
    </member>
    <member name="M:System.Activities.Statements.If.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,System.Boolean}})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.If" /> class using the specified condition.</summary>
      <param name="condition">The execution condition.</param>
    </member>
    <member name="P:System.Activities.Statements.If.Condition">
      <summary>The condition that determines which child activity to execute. The <see cref="P:System.Activities.Statements.If.Then" /> activity executes if the condition resolves to true. The <see cref="P:System.Activities.Statements.If.Else" /> activity executes if the condition resolves to false.</summary>
      <returns>The execution condition.</returns>
    </member>
    <member name="P:System.Activities.Statements.If.Else">
      <summary>The activity to be executed if the activity’s <see cref="P:System.Activities.Statements.If.Condition" /> resolves to false.</summary>
      <returns>The child activity.</returns>
    </member>
    <member name="P:System.Activities.Statements.If.Then">
      <summary>The activity to be executed if the activity’s <see cref="P:System.Activities.Statements.If.Condition" /> resolves to true.</summary>
      <returns>The child activity.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction" /> handler.</summary>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction" />.</summary>
      <returns>The <see cref="T:System.Activities.ActivityAction" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`1">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`1" /> handler.</summary>
      <typeparam name="T">The data type of the <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`1.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`1" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`1" />.</summary>
      <returns>The <see cref="T:System.Activities.ActivityAction`1" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`1" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`1.Argument">
      <summary>Gets or sets the <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`1" />.</summary>
      <returns>The <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`1" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`10">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`10" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T9">The data type of the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T10">The data type of the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`10.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`10" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`10" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`10" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The first In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument10">
      <summary>Gets or sets the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The tenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The second In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The third In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The fourth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The fifth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The sixth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The seventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The eighth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument9">
      <summary>Gets or sets the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The ninth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`11">
      <summary>Invokes an <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T9">The data type of the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T10">The data type of the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T11">The data type of the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`11.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`11" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`11" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`11" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The first In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument10">
      <summary>Gets or sets the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The tenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument11">
      <summary>Gets or sets the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The eleventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The second In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The third In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The fourth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The fifth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The sixth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The seventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The eighth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument9">
      <summary>Gets or sets the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The ninth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`12">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`12" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T9">The data type of the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T10">The data type of the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T11">The data type of the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T12">The data type of the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`12.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`12" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Action">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`12" /> class.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The first In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument10">
      <summary>Gets or sets the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The tenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument11">
      <summary>Gets or sets the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The eleventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument12">
      <summary>Gets or sets the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The twelfth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The second In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The third In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The fourth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The fifth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The sixth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The seventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The eighth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument9">
      <summary>Gets or sets the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The ninth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`13">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`13" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T9">The data type of the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T10">The data type of the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T11">The data type of the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T12">The data type of the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T13">The data type of the thirteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`13.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`13" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`13" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`13" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The first In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument10">
      <summary>Gets or sets the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The tenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument11">
      <summary>Gets or sets the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The eleventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument12">
      <summary>Gets or sets the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The twelfth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument13">
      <summary>Gets or sets the thirteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The thirteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The second In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The third In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The fourth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The fifth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The sixth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The seventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The eighth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument9">
      <summary>Gets or sets the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The ninth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`14">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`14" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T9">The data type of the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T10">The data type of the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T11">The data type of the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T12">The data type of the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T13">The data type of the thirteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T14">The data type of the fourteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`14.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`14" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`14" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`14" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The first In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument10">
      <summary>Gets or sets the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The tenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument11">
      <summary>Gets or sets the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The eleventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument12">
      <summary>Gets or sets the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The twelfth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument13">
      <summary>Gets or sets the thirteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The thirteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument14">
      <summary>Gets or sets the fourteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The fourteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The second In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The third In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The fourth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The fifth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The sixth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The seventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The eighth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument9">
      <summary>Gets or sets the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The ninth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`15">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`15" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T9">The data type of the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T10">The data type of the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T11">The data type of the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T12">The data type of the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T13">The data type of the thirteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T14">The data type of the fourteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T15">The data type of the fifteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`15.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`15" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`15" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`15" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The first In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument10">
      <summary>Gets or sets the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The tenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument11">
      <summary>Gets or sets the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The eleventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument12">
      <summary>Gets or sets the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The twelfth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument13">
      <summary>Gets or sets the thirteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The thirteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument14">
      <summary>Gets or sets the fourteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The fourteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument15">
      <summary>Gets or sets the fifteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The fifteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The second In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The third In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The fourth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The fifth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The sixth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The seventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The eighth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument9">
      <summary>Gets or sets the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The ninth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`16">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`16" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T9">The data type of the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T10">The data type of the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T11">The data type of the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T12">The data type of the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T13">The data type of the thirteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T14">The data type of the fourteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T15">The data type of the fifteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T16">The data type of the sixteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`16.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`16" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`16" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`16" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The first In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument10">
      <summary>Gets or sets the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The tenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument11">
      <summary>Gets or sets the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The eleventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument12">
      <summary>Gets or sets the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The twelfth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument13">
      <summary>Gets or sets the thirteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The thirteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument14">
      <summary>Gets or sets the fourteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The fourteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument15">
      <summary>Gets or sets the fifteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The fifteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument16">
      <summary>Gets or sets the sixteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The sixteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The second In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The third In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The fourth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The fifth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The sixth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The seventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The eighth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument9">
      <summary>Gets or sets the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The ninth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`2">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`2" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`2" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`2" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`2.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`2" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`2" />.</summary>
      <returns>The <see cref="T:System.Activities.ActivityAction`2" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`2" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`2.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`2" />.</summary>
      <returns>The first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`2" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`2.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`2" />.</summary>
      <returns>The second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`2" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`3">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`3" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`3" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`3" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`3" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`3.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`3" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`3" />.</summary>
      <returns>The <see cref="T:System.Activities.ActivityAction`3" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`3" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`3.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`3" />.</summary>
      <returns>The first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`3" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`3.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`3" />.</summary>
      <returns>The second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`3" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`3.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`3" />.</summary>
      <returns>The third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`3" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`4">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`4" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`4" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`4" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`4" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`4" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`4.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`4" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`4.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`4" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`4" />.</summary>
      <returns>The <see cref="T:System.Activities.ActivityAction`4" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`4" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`4.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`4" />.</summary>
      <returns>The first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`4" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`4.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`4" />.</summary>
      <returns>The second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`4" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`4.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`4" />.</summary>
      <returns>The third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`4" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`4.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`4" />.</summary>
      <returns>The fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`4" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`5">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`5" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`5" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`5" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`5" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`5" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`5" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`5.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`5" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`5.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`5" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`5" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`5" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`5.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</summary>
      <returns>The first argument passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`5.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</summary>
      <returns>The second argument passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`5.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</summary>
      <returns>The third argument passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`5.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</summary>
      <returns>The fourth argument passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`5.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</summary>
      <returns>The fifth argument passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`6">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`6" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`6" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`6" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`6" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`6" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`6" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`6" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`6.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`6" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`6" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`6" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`6" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</summary>
      <returns>The first argument passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</summary>
      <returns>The second argument passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</summary>
      <returns>The third argument passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</summary>
      <returns>The fourth argument passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</summary>
      <returns>The fifth argument passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</summary>
      <returns>The sixth argument passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`7">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`7" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`7" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`7" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`7" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`7" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`7" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`7" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`7" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`7.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`7" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`7" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`7" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`7" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</summary>
      <returns>The first argument passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</summary>
      <returns>The second argument passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</summary>
      <returns>The third argument passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</summary>
      <returns>The fourth argument passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</summary>
      <returns>The fifth argument passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</summary>
      <returns>The sixth argument passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</summary>
      <returns>The seventh argument passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`8">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`8" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`8" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`8" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`8" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`8" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`8" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`8" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`8" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`8" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`8.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`8" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`8" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`8" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`8" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</summary>
      <returns>The first argument passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</summary>
      <returns>The second argument passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</summary>
      <returns>The third argument passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</summary>
      <returns>The fourth argument passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</summary>
      <returns>The fifth argument passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</summary>
      <returns>The sixth argument passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</summary>
      <returns>The seventh argument passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</summary>
      <returns>The eighth argument passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`9">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`9" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
      <typeparam name="T9">The data type of the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`9.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`9" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`9" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`9" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The first argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The second argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The third argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The fourth argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The fifth argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The sixth argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The seventh argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The eighth argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument9">
      <summary>Gets or sets the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The ninth argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeDelegate">
      <summary>Invokes the specified <see cref="T:System.Activities.ActivityDelegate" />.</summary>
    </member>
    <member name="M:System.Activities.Statements.InvokeDelegate.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.InvokeDelegate" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeDelegate.Delegate">
      <summary>Gets the <see cref="T:System.Activities.ActivityDelegate" /> to invoke.</summary>
      <returns>The delegate.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeDelegate.DelegateArguments">
      <summary>The arguments to be passed to the <see cref="P:System.Activities.Statements.InvokeDelegate.ActivityDelegate" />.</summary>
      <returns>The arguments to be passed to the delegate.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeMethod">
      <summary>Calls a public method of a specified object or type.</summary>
    </member>
    <member name="M:System.Activities.Statements.InvokeMethod.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.InvokeMethod" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.GenericTypeArguments">
      <summary>The generic type arguments of the contained method.</summary>
      <returns>The arguments.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.MethodName">
      <summary>The name of the method to be invoked when the activity executes.</summary>
      <returns>The method name.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.Parameters">
      <summary>The parameter collection of the method to be invoked.</summary>
      <returns>The parameter collection.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.Result">
      <summary>The return value of the method operation.</summary>
      <returns>The operation’s return value.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.RunAsynchronously">
      <summary> Gets or sets a value that indicates whether the activity’s method is invoked asynchronously.</summary>
      <returns>true if the method executes asynchronously.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.TargetObject">
      <summary>The object that contains the method to execute.</summary>
      <returns>The object.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.TargetType">
      <summary>The type of the <see cref="P:System.Activities.Statements.InvokeMethod.TargetObject" />.</summary>
      <returns>The target object type.</returns>
    </member>
    <member name="T:System.Activities.Statements.Parallel">
      <summary>An activity that executes all child activities simultaneously and asynchronously.</summary>
    </member>
    <member name="M:System.Activities.Statements.Parallel.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Parallel" /> activity.</summary>
    </member>
    <member name="P:System.Activities.Statements.Parallel.Branches">
      <summary>The child elements to be executed in parallel.</summary>
      <returns>The elements.</returns>
    </member>
    <member name="P:System.Activities.Statements.Parallel.CompletionCondition">
      <summary>Evaluates after any branch completes. </summary>
      <returns>The completion expression.</returns>
    </member>
    <member name="P:System.Activities.Statements.Parallel.Variables">
      <summary>The collection of contained variables.</summary>
      <returns>The contained variables.</returns>
    </member>
    <member name="T:System.Activities.Statements.ParallelForEach`1">
      <summary>Enumerates the elements of a collection and executes an embedded statement for each element of the collection in parallel.</summary>
      <typeparam name="T">The type of the values provided in the <see cref="P:System.Activities.Statements.ParallelForEach`1.Values" /> collection.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.ParallelForEach`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.ParallelForEach`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.ParallelForEach`1.Body">
      <summary>The <see cref="T:System.Activities.ActivityAction" /> that is executed once for every value contained in the <see cref="P:System.Activities.Statements.ParallelForEach`1.Values" /> collection.</summary>
      <returns>The contained activity action.</returns>
    </member>
    <member name="P:System.Activities.Statements.ParallelForEach`1.CompletionCondition">
      <summary>Evaluated after each iteration completes. </summary>
      <returns>The completion expression.</returns>
    </member>
    <member name="P:System.Activities.Statements.ParallelForEach`1.Values">
      <summary>The collection of values used as parameters for each iteration of the activity contained in the <see cref="P:System.Activities.Statements.ParallelForEach`1.Body" />.</summary>
      <returns>The collection of values.</returns>
    </member>
    <member name="T:System.Activities.Statements.Persist">
      <summary>Requests that a workflow instance persist.</summary>
    </member>
    <member name="M:System.Activities.Statements.Persist.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Persist" /> class.</summary>
    </member>
    <member name="T:System.Activities.Statements.Pick">
      <summary>Provides event-based control flow modeling. </summary>
    </member>
    <member name="M:System.Activities.Statements.Pick.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Pick" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Pick.Branches">
      <summary>The collection of <see cref="T:System.Activities.Statements.PickBranch" /> objects that the <see cref="T:System.Activities.Statements.Pick" /> activity potentially executes one of, based on incoming events.</summary>
      <returns>The branch collection.</returns>
    </member>
    <member name="T:System.Activities.Statements.PickBranch">
      <summary>A potential path of execution within a <see cref="T:System.Activities.Statements.Pick" /> activity.</summary>
    </member>
    <member name="M:System.Activities.Statements.PickBranch.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.PickBranch" /> activity.</summary>
    </member>
    <member name="P:System.Activities.Statements.PickBranch.Action">
      <summary>The <see cref="T:System.Activities.Activity" /> to execute if this branch is triggered for execution.</summary>
      <returns>An <see cref="T:System.Activities.Activity" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.PickBranch.DisplayName">
      <summary>The name of this branch to be displayed in the activity designer.</summary>
      <returns>The branch name.</returns>
    </member>
    <member name="P:System.Activities.Statements.PickBranch.Trigger">
      <summary>The activity whose completion activates this pick branch.</summary>
      <returns>The triggering activity.</returns>
    </member>
    <member name="P:System.Activities.Statements.PickBranch.Variables">
      <summary>The collection of user-defined variables associated with this activity.</summary>
      <returns>The variable collection.</returns>
    </member>
    <member name="T:System.Activities.Statements.RemoveFromCollection`1">
      <summary>Removes an item from a specified collection.</summary>
      <typeparam name="T">The type of elements in the specified collection.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.RemoveFromCollection`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.RemoveFromCollection`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.RemoveFromCollection`1.Collection">
      <summary>The collection from which to remove the <see cref="P:System.Activities.Statements.RemoveFromCollection`1.Item" />.</summary>
      <returns>The collection.</returns>
    </member>
    <member name="P:System.Activities.Statements.RemoveFromCollection`1.Item">
      <summary>The item to remove from the specified <see cref="P:System.Activities.Statements.RemoveFromCollection`1.Collection" />.</summary>
      <returns>The item to remove.</returns>
    </member>
    <member name="T:System.Activities.Statements.Rethrow">
      <summary>Throws a previously thrown exception from within a <see cref="T:System.Activities.Statements.Catch" /> activity.</summary>
    </member>
    <member name="M:System.Activities.Statements.Rethrow.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Rethrow" /> activity.</summary>
    </member>
    <member name="T:System.Activities.Statements.Sequence">
      <summary>Executes a set of child activities according to a single, defined ordering.</summary>
    </member>
    <member name="M:System.Activities.Statements.Sequence.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Sequence" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Sequence.Activities">
      <summary>The collection of contained activities to be executed in sequence.</summary>
      <returns>The activities.</returns>
    </member>
    <member name="P:System.Activities.Statements.Sequence.Variables">
      <summary>The collection of contained variables.</summary>
      <returns>The collection of variables.</returns>
    </member>
    <member name="T:System.Activities.Statements.Switch`1">
      <summary>Selects one choice from a number of activities to execute, based on the value of a given expression of the type specified in this object’s type specifier.</summary>
      <typeparam name="T">The type of the values provided in the <see cref="P:System.Activities.Statements.Switch`1.Cases" /> collection.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.Switch`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Switch`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Statements.Switch`1.#ctor(System.Activities.Activity{`0})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Switch`1" /> class with the specified expression.</summary>
      <param name="expression">The expression to evaluate and compare against the values in the <see cref="P:System.Activities.Statements.Switch`1.Cases" /> dictionary.</param>
    </member>
    <member name="M:System.Activities.Statements.Switch`1.#ctor(System.Activities.InArgument{`0})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Switch`1" /> class with the specified expression.</summary>
      <param name="expression">The expression to evaluate and compare against the values in the <see cref="P:System.Activities.Statements.Switch`1.Cases" /> dictionary.</param>
    </member>
    <member name="M:System.Activities.Statements.Switch`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Switch`1" /> class with the specified expression.</summary>
      <param name="expression">The expression to evaluate and compare against the values in the <see cref="P:System.Activities.Statements.Switch`1.Cases" /> dictionary.</param>
    </member>
    <member name="P:System.Activities.Statements.Switch`1.Cases">
      <summary>Represents the dictionary of potential execution paths. Each entry contains a key and an activity that is executed when the result of the expression matches the key.</summary>
      <returns>The execution paths.</returns>
    </member>
    <member name="P:System.Activities.Statements.Switch`1.Default">
      <summary>Represents the activity that is executed if no keys of entries in the <see cref="P:System.Activities.Statements.Switch.Cases" /> collection match the <see cref="P:System.Activities.Statements.Switch.Expression" /> property.</summary>
      <returns>The default activity to execute.</returns>
    </member>
    <member name="P:System.Activities.Statements.Switch`1.Expression">
      <summary>Gets the object to compare to the keys in the <see cref="P:System.Activities.Statements.Switch.Cases" /> collection.</summary>
      <returns>The object to compare to the keys in the <see cref="P:System.Activities.Statements.Switch.Cases" /> collection.</returns>
    </member>
    <member name="T:System.Activities.Statements.TerminateWorkflow">
      <summary>Terminates the running workflow instance, raises the <see cref="P:System.Activities.WorkflowApplication.Completed" /> event in the host, and reports error information. Once the workflow is terminated, it cannot be resumed.</summary>
    </member>
    <member name="M:System.Activities.Statements.TerminateWorkflow.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.TerminateWorkflow" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.TerminateWorkflow.Exception">
      <summary>Gets or sets the exception that provoked the instance termination.</summary>
      <returns>The exception.</returns>
    </member>
    <member name="P:System.Activities.Statements.TerminateWorkflow.Reason">
      <summary>A string input argument with the reason for the workflow instance termination. </summary>
      <returns>The reason for workflow termination.</returns>
    </member>
    <member name="T:System.Activities.Statements.Throw">
      <summary>Throws an exception.</summary>
    </member>
    <member name="M:System.Activities.Statements.Throw.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Throw" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Throw.Exception">
      <summary>The exception thrown by the activity.</summary>
      <returns>The exception.</returns>
    </member>
    <member name="T:System.Activities.Statements.TimerExtension">
      <summary>Abstract base class for timer extensions.</summary>
    </member>
    <member name="M:System.Activities.Statements.TimerExtension.#ctor">
      <summary>When implemented in a derived class, creates a new instance of the derived class.</summary>
    </member>
    <member name="M:System.Activities.Statements.TimerExtension.CancelTimer(System.Activities.Bookmark)">
      <summary>Removes a timer.</summary>
      <param name="bookmark">The bookmark associated with the timer.</param>
    </member>
    <member name="M:System.Activities.Statements.TimerExtension.OnCancelTimer(System.Activities.Bookmark)">
      <summary>Called by the <see cref="M:System.Activities.Statements.TimerExtension.CancelTimer(System.Activities.Bookmark)" /> method.</summary>
      <param name="bookmark">The bookmark associated with the timer.</param>
    </member>
    <member name="M:System.Activities.Statements.TimerExtension.OnRegisterTimer(System.TimeSpan,System.Activities.Bookmark)">
      <summary>Called by the <see cref="M:System.Activities.Statements.TimerExtension.RegisterTimer(System.TimeSpan,System.Activities.Bookmark)" /> method.</summary>
      <param name="timeout">The duration of the timer.</param>
      <param name="bookmark">The bookmark associated with the timer, to be resumed when the timer expires.</param>
    </member>
    <member name="M:System.Activities.Statements.TimerExtension.RegisterTimer(System.TimeSpan,System.Activities.Bookmark)">
      <summary>Creates a timer with the specified duration and associated.</summary>
      <param name="timeout">The duration of the timer.</param>
      <param name="bookmark">The bookmark associated with the timer, to be resumed when the timer expires.</param>
    </member>
    <member name="T:System.Activities.Statements.TransactionScope">
      <summary>An activity that demarcates a transaction boundary. </summary>
    </member>
    <member name="M:System.Activities.Statements.TransactionScope.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.TransactionScope" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.TransactionScope.AbortInstanceOnTransactionFailure">
      <summary>Gets or sets the value that indicates whether the workflow should be aborted if the transaction aborts.</summary>
      <returns>true if the workflow should be aborted.</returns>
    </member>
    <member name="P:System.Activities.Statements.TransactionScope.Body">
      <summary>Gets or sets the activity that is scheduled when the <see cref="T:System.Activities.Statements.TransactionScope" /> executes.</summary>
      <returns>The activity that is scheduled when the <see cref="T:System.Activities.Statements.TransactionScope" /> executes.</returns>
    </member>
    <member name="P:System.Activities.Statements.TransactionScope.IsolationLevel">
      <summary>Gets or sets the <see cref="T:System.Transactions.IsolationLevel" /> for this <see cref="T:System.Activities.Statements.TransactionScope" />.</summary>
      <returns>The <see cref="T:System.Transactions.IsolationLevel" /> for this <see cref="T:System.Activities.Statements.TransactionScope" />.</returns>
    </member>
    <member name="M:System.Activities.Statements.TransactionScope.ShouldSerializeIsolationLevel">
      <summary>Indicates whether the <see cref="P:System.Activities.Statements.TransactionScope.IsolationLevel" /> for this <see cref="T:System.Activities.Statements.TransactionScope" /> should be serialized.</summary>
      <returns>true if the <see cref="P:System.Activities.Statements.TransactionScope.IsolationLevel" /> property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Statements.TransactionScope.ShouldSerializeTimeout">
      <summary>Indicates whether the <see cref="P:System.Activities.Statements.TransactionScope.Timeout" /> for this <see cref="T:System.Activities.Statements.TransactionScope" /> should be serialized.</summary>
      <returns>true if the <see cref="P:System.Activities.Statements.TransactionScope.Timeout" /> property value should be serialized; otherwise, false.
</returns>
    </member>
    <member name="P:System.Activities.Statements.TransactionScope.Timeout">
      <summary>Gets or sets the <see cref="T:System.TimeSpan" /> that indicates the timeout period for the transaction used for this <see cref="T:System.Activities.Statements.TransactionScope" />.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> that indicates the timeout period for the transaction used for this <see cref="T:System.Activities.Statements.TransactionScope" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.TryCatch">
      <summary>Contains workflow elements to be executed by the workflow runtime within an exception handling block.</summary>
    </member>
    <member name="M:System.Activities.Statements.TryCatch.#ctor">
      <summary>Creates a new instance of the <see cref="M:System.Activities.Statements.TryCatch.#ctor" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.TryCatch.Catches">
      <summary>The collection of Catch elements to be checked when the <see cref="P:System.Activities.Statements.TryCatch.Try" /> activity throws an exception.</summary>
      <returns>The catch collection.</returns>
    </member>
    <member name="P:System.Activities.Statements.TryCatch.Finally">
      <summary>The workflow element to be executed when the <see cref="P:System.Activities.Statements.TryCatch.Try" /> and any necessary activities in the <see cref="P:System.Activities.Statements.TryCatch.Catches" /> collection complete execution.</summary>
      <returns>The workflow element.</returns>
    </member>
    <member name="P:System.Activities.Statements.TryCatch.Try">
      <summary>The workflow element first executed when the <see cref="T:System.Activities.Statements.TryCatch" /> executes.</summary>
      <returns>The workflow element.</returns>
    </member>
    <member name="P:System.Activities.Statements.TryCatch.Variables">
      <summary>The collection of contained variables.</summary>
      <returns>The collection of variables.</returns>
    </member>
    <member name="T:System.Activities.Statements.While">
      <summary>Executes a contained workflow element while a condition evaluates to true.</summary>
    </member>
    <member name="M:System.Activities.Statements.While.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.While" /> activity.</summary>
    </member>
    <member name="M:System.Activities.Statements.While.#ctor(System.Activities.Activity{System.Boolean})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.While" /> activity.</summary>
      <param name="condition">The condition under which the activity iterates.</param>
    </member>
    <member name="M:System.Activities.Statements.While.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,System.Boolean}})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.While" /> activity.</summary>
      <param name="condition">The condition under which the activity iterates.</param>
    </member>
    <member name="P:System.Activities.Statements.While.Body">
      <summary>The <see cref="T:System.Activities.Activity" /> to execute in the While loop.</summary>
      <returns>The element.</returns>
    </member>
    <member name="P:System.Activities.Statements.While.Condition">
      <summary>The <see cref="T:System.Activities.Activity`1" /> to be evaluated before each iteration of the While loop.</summary>
      <returns>The condition.</returns>
    </member>
    <member name="P:System.Activities.Statements.While.Variables">
      <summary>The collection of <see cref="T:System.Activities.Variable" /> objects associated with the <see cref="T:System.Activities.Statements.While" /> activity.</summary>
      <returns>The collection of variables.</returns>
    </member>
    <member name="T:System.Activities.Statements.WorkflowTerminatedException">
      <summary>The exception that is thrown when an operation is invoked on a terminated <see cref="T:System.Activities.WorkflowApplication" />.</summary>
    </member>
    <member name="M:System.Activities.Statements.WorkflowTerminatedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.WorkflowTerminatedException" /> class using default values.</summary>
    </member>
    <member name="M:System.Activities.Statements.WorkflowTerminatedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.WorkflowTerminatedException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Activities.Statements.WorkflowTerminatedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.WorkflowTerminatedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Activities.Statements.WorkflowTerminatedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.WorkflowTerminatedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.Activities.Statements.WriteLine">
      <summary>Writes a specified string to a specified <see cref="T:System.IO.TextWriter" /> object.</summary>
    </member>
    <member name="M:System.Activities.Statements.WriteLine.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.WriteLine" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.WriteLine.Text">
      <summary>The text to write.</summary>
      <returns>The text.</returns>
    </member>
    <member name="P:System.Activities.Statements.WriteLine.TextWriter">
      <summary>The <see cref="T:System.IO.TextWriter" /> to write the <see cref="P:System.Activities.Statements.WriteLine.Text" /> to.</summary>
      <returns>The text writer.</returns>
    </member>
    <member name="T:System.Activities.Tracking.ActivityInfo">
      <summary>Contains information on a tracked <see cref="T:System.Activities.Activity" />.</summary>
    </member>
    <member name="M:System.Activities.Tracking.ActivityInfo.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Tracking.ActivityInfo" /> class using the specified name, ID, instance ID and type name.</summary>
      <param name="name">The name of the activity.</param>
      <param name="id">The activity ID.</param>
      <param name="instanceId">The instance ID of the activity.</param>
      <param name="typeName">The type name of the activity.</param>
    </member>
    <member name="P:System.Activities.Tracking.ActivityInfo.Id">
      <summary>Gets the ID for the activity.</summary>
      <returns>The activity ID.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityInfo.InstanceId">
      <summary>Gets the run-time ID of the activity instance.</summary>
      <returns>The instance ID of the activity.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityInfo.Name">
      <summary>Gets the name associated with the activity</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="M:System.Activities.Tracking.ActivityInfo.ToString">
      <summary>Gets a string representation of the <see cref="T:System.Activities.Tracking.ActivityInfo" /> object</summary>
      <returns>The activity name, ID, instance ID and type name.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityInfo.TypeName">
      <summary>Gets the type name of the activity.</summary>
      <returns>The type name of the activity.</returns>
    </member>
    <member name="T:System.Activities.Tracking.ActivityScheduledQuery">
      <summary>When added to the <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" /> collection, subscribes to activity scheduled records when the tracking profile is created to subscribe to tracking records.</summary>
    </member>
    <member name="M:System.Activities.Tracking.ActivityScheduledQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.ActivityScheduledQuery" /> class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.ActivityScheduledQuery.ActivityName">
      <summary>Gets the name of the activity that the tracking query subscribes from.</summary>
      <returns>The name of the activity that schedules this activity.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityScheduledQuery.ChildActivityName">
      <summary>Gets the name of the scheduled activity that the tracking query subscribes to.</summary>
      <returns>The name of the scheduled activity.</returns>
    </member>
    <member name="T:System.Activities.Tracking.ActivityScheduledRecord">
      <summary>Represents a tracking record of an activity being scheduled for execution. </summary>
    </member>
    <member name="M:System.Activities.Tracking.ActivityScheduledRecord.#ctor(System.Guid,System.Int64,System.Activities.Tracking.ActivityInfo,System.Activities.Tracking.ActivityInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Tracking.ActivityScheduledRecord" /> class using the specified instance ID, record number, activity and child activity.</summary>
      <param name="instanceId">The instance ID of the scheduled activity.</param>
      <param name="recordNumber">A sequence that indicates the order in which tracking records are generated.</param>
      <param name="activity">The activity issuing the scheduled execution request.</param>
      <param name="child">The scheduled activity.</param>
    </member>
    <member name="P:System.Activities.Tracking.ActivityScheduledRecord.Activity">
      <summary>Gets the <see cref="T:System.Activities.Tracking.ActivityInfo" /> for the activity.</summary>
      <returns>The activity information.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityScheduledRecord.Child">
      <summary>Gets the <see cref="T:System.Activities.Tracking.ActivityInfo" /> for the child activity</summary>
      <returns>The child activity information.</returns>
    </member>
    <member name="M:System.Activities.Tracking.ActivityScheduledRecord.ToString">
      <summary>Returns a string that contains all of the details of the <see cref="T:System.Activities.Tracking.ActivityScheduledRecord" />.</summary>
      <returns>The tracking record details.</returns>
    </member>
    <member name="T:System.Activities.Tracking.ActivityStateQuery">
      <summary>When added to the <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" />, subscribes to activity state records.</summary>
    </member>
    <member name="M:System.Activities.Tracking.ActivityStateQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.ActivityStateQuery" /> class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateQuery.ActivityName">
      <summary>Gets the name of the activity that the tracking record is subscribed from.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateQuery.Arguments">
      <summary>Gets the collection of arguments associated with this activity query.</summary>
      <returns>A collection of arguments.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateQuery.States">
      <summary>Gets the states of the subscribed activity for which a tracking record should be emitted.</summary>
      <returns>A collection of states.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateQuery.Variables">
      <summary>Gets the collection of variables associated with this activity query.</summary>
      <returns>A collection of variables.</returns>
    </member>
    <member name="T:System.Activities.Tracking.ActivityStateRecord">
      <summary>Represents a tracking record that is created when an activity changes state.</summary>
    </member>
    <member name="M:System.Activities.Tracking.ActivityStateRecord.#ctor(System.Guid,System.Int64,System.Activities.Tracking.ActivityInfo,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Tracking.ActivityStateRecord" /> class using the specified instance ID, record number, activity and activity state.</summary>
      <param name="instanceId">The instance ID of the activity.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking records are generated.</param>
      <param name="activity">The activity.</param>
      <param name="state">The activity state.</param>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateRecord.Activity">
      <summary>Gets an <see cref="T:System.Activities.Tracking.ActivityInfo" /> that contains information on the activity when the record is generated.</summary>
      <returns>The activity information.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateRecord.Arguments">
      <summary>Gets the current values of the tracked arguments associated with the activity when the record is generated.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IDictionary`2" /> containing the arguments.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateRecord.State">
      <summary>Gets the current state of the activity when the record is generated.</summary>
      <returns>The activity state.</returns>
    </member>
    <member name="M:System.Activities.Tracking.ActivityStateRecord.ToString">
      <summary>Returns a string that contains all the details of the tracking record.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateRecord.Variables">
      <summary>Gets the current values of the tracked variables associated with the activity when the record is generated.</summary>
      <returns>The current values.</returns>
    </member>
    <member name="T:System.Activities.Tracking.ActivityStates">
      <summary>Specifies the state of an activity.</summary>
    </member>
    <member name="F:System.Activities.Tracking.ActivityStates.Canceled">
      <summary>The activity state is canceled.</summary>
    </member>
    <member name="F:System.Activities.Tracking.ActivityStates.Closed">
      <summary>The activity state is closed.</summary>
    </member>
    <member name="F:System.Activities.Tracking.ActivityStates.Executing">
      <summary>The activity state is executing.</summary>
    </member>
    <member name="F:System.Activities.Tracking.ActivityStates.Faulted">
      <summary>The activity state is faulted.</summary>
    </member>
    <member name="T:System.Activities.Tracking.BookmarkResumptionQuery">
      <summary>When added to the <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" /> collection, subscribes to bookmark resumption records when the tracking profile is queried for <see cref="T:System.Activities.Tracking.TrackingRecord" /> objects.</summary>
    </member>
    <member name="M:System.Activities.Tracking.BookmarkResumptionQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.BookmarkResumptionQuery" /> class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.BookmarkResumptionQuery.Name">
      <summary>Gets or sets the name of the bookmark record to subscribe to.</summary>
      <returns>The bookmark name.</returns>
    </member>
    <member name="T:System.Activities.Tracking.BookmarkResumptionRecord">
      <summary>Contains the data sent to a tracking participant by the run-time tracking infrastructure when a <see cref="T:System.Activities.Bookmark" /> is resumed.</summary>
    </member>
    <member name="M:System.Activities.Tracking.BookmarkResumptionRecord.#ctor(System.Guid,System.Int64,System.Guid,System.String,System.Activities.Tracking.ActivityInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Tracking.BookmarkResumptionRecord" /> class using the specified instance ID, record number, bookmark scope, bookmark name and owner.</summary>
      <param name="instanceId">The instance ID of the associated activity.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking records are generated.</param>
      <param name="bookmarkScope">The ID of the associated activity’s <see cref="T:System.Activities.BookmarkScope" />.</param>
      <param name="bookmarkName">The bookmark name.</param>
      <param name="owner">The activity that was waiting for the bookmark to be resumed.</param>
    </member>
    <member name="P:System.Activities.Tracking.BookmarkResumptionRecord.BookmarkName">
      <summary>Gets the name of the <see cref="T:System.Activities.Bookmark" /> that is resumed by the workflow execution engine.</summary>
      <returns>The name of the <see cref="T:System.Activities.Bookmark" /> that is referenced by this <see cref="T:System.Activities.Tracking.BookmarkResumptionRecord" />.</returns>
    </member>
    <member name="P:System.Activities.Tracking.BookmarkResumptionRecord.BookmarkScope">
      <summary>Gets the scope ID of the <see cref="T:System.Activities.BookmarkScope" /> that is associated with this bookmark.</summary>
      <returns>The scope ID.</returns>
    </member>
    <member name="P:System.Activities.Tracking.BookmarkResumptionRecord.Owner">
      <summary>Gets information on the <see cref="T:System.Activities.Tracking.ActivityInfo" /> object that was waiting for the bookmark to be resumed.</summary>
      <returns>The activity information.</returns>
    </member>
    <member name="P:System.Activities.Tracking.BookmarkResumptionRecord.Payload">
      <summary>Gets the value that was supplied when the <see cref="T:System.Activities.Bookmark" /> was resumed.</summary>
      <returns>The value that was supplied when the <see cref="T:System.Activities.Bookmark" /> was resumed.</returns>
    </member>
    <member name="M:System.Activities.Tracking.BookmarkResumptionRecord.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Activities.Tracking.BookmarkResumptionRecord" /> object.</summary>
      <returns>The current object.</returns>
    </member>
    <member name="T:System.Activities.Tracking.CancelRequestedQuery">
      <summary>When added to the <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" /> collection, subscribes to cancellation request records when the tracking profile is queried for tracking records.</summary>
    </member>
    <member name="M:System.Activities.Tracking.CancelRequestedQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.CancelRequestedQuery" /> object.</summary>
    </member>
    <member name="P:System.Activities.Tracking.CancelRequestedQuery.ActivityName">
      <summary>The name of the activity that is requesting the cancellation.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="P:System.Activities.Tracking.CancelRequestedQuery.ChildActivityName">
      <summary>The name of the child activity for which cancellation was requested.</summary>
      <returns>The child activity name.</returns>
    </member>
    <member name="T:System.Activities.Tracking.CancelRequestedRecord">
      <summary>Represents the data sent by the workflow runtime to tracking participants when <see cref="M:System.Activities.ActivityExecutionContext.CancelChild" /> or <see cref="M:System.Activities.ActivityExecutionContext.CancelChildren" /> is called.</summary>
    </member>
    <member name="M:System.Activities.Tracking.CancelRequestedRecord.#ctor(System.Guid,System.Int64,System.Activities.Tracking.ActivityInfo,System.Activities.Tracking.ActivityInfo)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.CancelRequestedRecord" /> class using the specified instance ID, record number, activity and child activity.</summary>
      <param name="instanceId">The instance ID of the activity that generated the event.</param>
      <param name="recordNumber">A sequence that defines the order of generated tracking events.</param>
      <param name="activity">The activity issuing the cancellation request.</param>
      <param name="child">The activity to be canceled.</param>
    </member>
    <member name="P:System.Activities.Tracking.CancelRequestedRecord.Activity">
      <summary>Gets the <see cref="T:System.Activities.Tracking.ActivityInfo" /> of the activity requesting the cancellation.</summary>
      <returns>The activity information.</returns>
    </member>
    <member name="P:System.Activities.Tracking.CancelRequestedRecord.Child">
      <summary>Gets the <see cref="T:System.Activities.Tracking.ActivityInfo" /> of the activity to be canceled.</summary>
      <returns>The activity information.</returns>
    </member>
    <member name="M:System.Activities.Tracking.CancelRequestedRecord.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Activities.Tracking.CancelRequestedRecord" /> object.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="T:System.Activities.Tracking.CustomTrackingQuery">
      <summary>When added to the <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" />, subscribes to custom tracking records when the tracking profile is queried for custom records.</summary>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.CustomTrackingQuery" /> class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.CustomTrackingQuery.ActivityName">
      <summary>Gets or sets the name of the activity that generated the tracking record.</summary>
      <returns>The name of the activity that emits the custom tracking record.</returns>
    </member>
    <member name="P:System.Activities.Tracking.CustomTrackingQuery.Name">
      <summary>Gets or sets the name of the custom tracking record that is emitted. </summary>
      <returns>The custom tracking record name.</returns>
    </member>
    <member name="T:System.Activities.Tracking.CustomTrackingRecord">
      <summary>Contains the data sent to a tracking participant by the run-time tracking infrastructure when a custom tracking record is raised.</summary>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingRecord.#ctor(System.Activities.Tracking.CustomTrackingRecord)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.CustomTrackingRecord" /> class based on information from the specified <see cref="T:System.Activities.Tracking.CustomTrackingRecord" /> instance.</summary>
      <param name="record">The custom tracking record instance to use.</param>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingRecord.#ctor(System.Guid,System.String,System.Diagnostics.TraceLevel)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.CustomTrackingRecord" /> class with the specified instance ID, custom tracking record name, and trace level.</summary>
      <param name="instanceId">The ID of the activity.</param>
      <param name="name">The name of the custom tracking record.</param>
      <param name="level">The trace level used by the tracking record.</param>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingRecord.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.CustomTrackingRecord" /> class with the specified custom tracking record name.</summary>
      <param name="name">The name of the custom tracking record.</param>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingRecord.#ctor(System.String,System.Diagnostics.TraceLevel)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.CustomTrackingRecord" /> class with the specified custom tracking record name and trace level.</summary>
      <param name="name">The name of the custom tracking record.</param>
      <param name="level">The trace level used by the tracking record.</param>
    </member>
    <member name="P:System.Activities.Tracking.CustomTrackingRecord.Activity">
      <summary>Returns the <see cref="T:System.Activities.Tracking.ActivityInfo" /> of the activity associated with this record.</summary>
      <returns>The activity information.</returns>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingRecord.Clone">
      <summary>Creates a copy of the <see cref="T:System.Activities.Tracking.CustomTrackingRecord" />.</summary>
      <returns>A copy of the <see cref="T:System.Activities.Tracking.CustomTrackingRecord" /> instance.</returns>
    </member>
    <member name="P:System.Activities.Tracking.CustomTrackingRecord.Data">
      <summary>Gets the user-defined data associated with this tracking record.</summary>
      <returns>The user-defined data.</returns>
    </member>
    <member name="P:System.Activities.Tracking.CustomTrackingRecord.Name">
      <summary>Gets the name that distinguishes this tracking record.</summary>
      <returns>The name that distinguishes this tracking record.</returns>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingRecord.ToString">
      <summary>Returns a string that contains the tracking record data.</summary>
      <returns>The tracking record data.</returns>
    </member>
    <member name="T:System.Activities.Tracking.EtwTrackingParticipant">
      <summary>A consumer of workflow tracking data that emits an Event Tracking for Windows (ETW) event to an ETW session that contains the data from the tracking record. </summary>
    </member>
    <member name="M:System.Activities.Tracking.EtwTrackingParticipant.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.EtwTrackingParticipant" /> class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.EtwTrackingParticipant.ApplicationReference">
      <summary>Gets the reference value used by the ETW provider created by this tracking participant.</summary>
      <returns>The reference value.</returns>
    </member>
    <member name="P:System.Activities.Tracking.EtwTrackingParticipant.EtwProviderId">
      <summary>Gets the provider ID used by the ETW provider created by this tracking participant.</summary>
      <returns>The provider ID.</returns>
    </member>
    <member name="T:System.Activities.Tracking.FaultPropagationQuery">
      <summary>When added to the <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" /> collection, subscribes to fault propagation records when the tracking profile is queried for tracking records.</summary>
    </member>
    <member name="M:System.Activities.Tracking.FaultPropagationQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.FaultPropagationQuery" /> class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.FaultPropagationQuery.FaultHandlerActivityName">
      <summary>Gets the name of the fault hander activity that propagated the fault.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="P:System.Activities.Tracking.FaultPropagationQuery.FaultSourceActivityName">
      <summary>Gets the name of the activity that was the source of the fault.</summary>
      <returns>The activity name</returns>
    </member>
    <member name="T:System.Activities.Tracking.FaultPropagationRecord">
      <summary>Contains the data sent to a tracking participant by the run-time tracking infrastructure when a fault is propagated from a workflow activity.</summary>
    </member>
    <member name="M:System.Activities.Tracking.FaultPropagationRecord.#ctor(System.Guid,System.Int64,System.Activities.Tracking.ActivityInfo,System.Activities.Tracking.ActivityInfo,System.Boolean,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.FaultPropagationRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the activity that generated the event.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking events are generated.</param>
      <param name="faultSource">The activity that is the source of the fault.</param>
      <param name="faultHandler">The activity that is the fault handler.</param>
      <param name="isFaultSource">true if this handler is the first handler of the fault; false if this handler is a subsequent handler of the fault.</param>
      <param name="fault">The exception details.</param>
    </member>
    <member name="P:System.Activities.Tracking.FaultPropagationRecord.Fault">
      <summary>Get the exception data contained in the fault.</summary>
      <returns>The exception data.</returns>
    </member>
    <member name="P:System.Activities.Tracking.FaultPropagationRecord.FaultHandler">
      <summary>Gets the <see cref="T:System.Activities.Tracking.ActivityInfo" /> of the fault handler.</summary>
      <returns>The activity information.</returns>
    </member>
    <member name="P:System.Activities.Tracking.FaultPropagationRecord.FaultSource">
      <summary>Gets the <see cref="T:System.Activities.Tracking.ActivityInfo" /> of the activity that generated the fault.</summary>
      <returns>The activity information.</returns>
    </member>
    <member name="P:System.Activities.Tracking.FaultPropagationRecord.IsFaultSource">
      <summary>A value that indicates whether this handler is the first handler for the fault. </summary>
      <returns>true if this is the first handler for the exception. false if this handler is a subsequent handler for the fault.</returns>
    </member>
    <member name="M:System.Activities.Tracking.FaultPropagationRecord.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Activities.Tracking.FaultPropagationRecord" /> object.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="T:System.Activities.Tracking.ImplementationVisibility">
      <summary>Describes the visibility modes within a tracking profile.</summary>
    </member>
    <member name="F:System.Activities.Tracking.ImplementationVisibility.RootScope">
      <summary>Only the root activity and its implementation for the workflow is emitted.</summary>
    </member>
    <member name="F:System.Activities.Tracking.ImplementationVisibility.All">
      <summary>All tracking records are emitted.</summary>
    </member>
    <member name="T:System.Activities.Tracking.TrackingParticipant">
      <summary>The base class for workflow extensions that interact with the workflow tracking infrastructure and access tracking records.</summary>
    </member>
    <member name="M:System.Activities.Tracking.TrackingParticipant.#ctor">
      <summary>When implemented in a derived class, creates a new instance of the derived class.</summary>
    </member>
    <member name="M:System.Activities.Tracking.TrackingParticipant.BeginTrack(System.Activities.Tracking.TrackingRecord,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, begins asynchronous processing of the tracking record.</summary>
      <returns>The result of the operation.</returns>
      <param name="record">The generated tracking record.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
      <param name="callback">The method to be called on completion of the operation.</param>
      <param name="state">A user-defined object that uniquely identifies this asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Tracking.TrackingParticipant.EndTrack(System.IAsyncResult)">
      <summary>When implemented in a derived class, represents the end of an asynchronous tracking operation. </summary>
      <param name="result">The status of the operation.</param>
    </member>
    <member name="M:System.Activities.Tracking.TrackingParticipant.Track(System.Activities.Tracking.TrackingRecord,System.TimeSpan)">
      <summary>When implemented in a derived class, used to synchronously process the tracking record.</summary>
      <param name="record">The generated tracking record.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
    </member>
    <member name="P:System.Activities.Tracking.TrackingParticipant.TrackingProfile">
      <summary>The tracking profile object used by the tracking participant. Before adding the tracking participant to the workflow extensions, the tracking profile is set on the participant.</summary>
      <returns>The tracking profile.</returns>
    </member>
    <member name="T:System.Activities.Tracking.TrackingProfile">
      <summary>Creates a subscription to workflow tracking records in a <see cref="T:System.Activities.Tracking.TrackingParticipant" />. </summary>
    </member>
    <member name="M:System.Activities.Tracking.TrackingProfile.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.TrackingProfile" /> class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.TrackingProfile.ActivityDefinitionId">
      <summary>Gets or sets the activity definition ID of the tracking profile.</summary>
      <returns>The activity definition ID.</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingProfile.ImplementationVisibility">
      <summary>Gets or sets a value that filters tracking records emitted from nested activities within a top level activity (activities that compose the implementation of another activity.)</summary>
      <returns>An <see cref="T:System.Activities.Tracking.ImplementationVisibility" /> object that indicates the scope of records to be filtered.The default value is <see cref="F:System.Activities.Tracking.ImplementationVisibility.RootScope" />.</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingProfile.Name">
      <summary>Gets the display name of the tracking profile.</summary>
      <returns>The profile name.</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingProfile.Queries">
      <summary>Gets the collection of <see cref="T:System.Activities.Tracking.TrackingQuery" /> objects that define the records to which this tracking profile subscribes.</summary>
      <returns>The collection of queries.</returns>
    </member>
    <member name="T:System.Activities.Tracking.TrackingQuery">
      <summary>The base class for all tracking queries. Tracking queries are used to create a subscription definition for a <see cref="T:System.Activities.Tracking.TrackingProfile" />.</summary>
    </member>
    <member name="M:System.Activities.Tracking.TrackingQuery.#ctor">
      <summary>When implemented in a derived class, creates a new instance of the derived class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.TrackingQuery.QueryAnnotations">
      <summary>A collection of data in the form of name/value pairs that is included with data that is returned by this query.</summary>
      <returns>The collection of annotations.</returns>
    </member>
    <member name="T:System.Activities.Tracking.TrackingRecord">
      <summary>The abstract class from which all workflow tracking records derive. Tracking records represent the data sent to tracking participants when tracked events occur.</summary>
    </member>
    <member name="M:System.Activities.Tracking.TrackingRecord.#ctor(System.Activities.Tracking.TrackingRecord)">
      <summary>When implemented in a derived class, creates a new instance of the derived class with the specified instance tracking record.</summary>
      <param name="record">The tracking record of the generating workflow element.</param>
    </member>
    <member name="M:System.Activities.Tracking.TrackingRecord.#ctor(System.Guid)">
      <summary>When implemented in a derived class, creates a new instance of the derived class with the specified instance ID.</summary>
      <param name="instanceId">The ID of the generating workflow instance.</param>
    </member>
    <member name="M:System.Activities.Tracking.TrackingRecord.#ctor(System.Guid,System.Int64)">
      <summary>When implemented in a derived class, creates a new instance of the derived class with the specified instance ID and record number.</summary>
      <param name="instanceId">The ID of the generating workflow instance.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking records are generated.</param>
    </member>
    <member name="P:System.Activities.Tracking.TrackingRecord.Annotations">
      <summary>When implemented in a derived class, represents a collection of name/value pairs that are added to this tracking record.</summary>
      <returns>The dictionary of elements to be added to this tracking record.</returns>
    </member>
    <member name="M:System.Activities.Tracking.TrackingRecord.Clone">
      <summary>Creates a copy of the <see cref="T:System.Activities.Tracking.TrackingRecord" />.</summary>
      <returns>A copy of the <see cref="T:System.Activities.Tracking.TrackingRecord" />.</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingRecord.EventTime">
      <summary>When implemented in a derived class, represents the time the tracking record occurred.</summary>
      <returns>The event time.</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingRecord.InstanceId">
      <summary>When implemented in a derived class, represents the ID of the generating workflow instance.</summary>
      <returns>The element ID.</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingRecord.Level">
      <summary>Gets the <see cref="T:System.Diagnostics.TraceLevel" /> of the event.</summary>
      <returns>The trace level.</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingRecord.RecordNumber">
      <summary>A sequence that defines the order in which tracking records are generated. </summary>
      <returns>The sequence order.</returns>
    </member>
    <member name="M:System.Activities.Tracking.TrackingRecord.ToString">
      <summary>When implemented in a derived class, returns a string that contains all tracking data from the record.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceAbortedRecord">
      <summary>Contains the data sent to a tracking participant by the run-time tracking infrastructure when a workflow instance is aborted.</summary>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceAbortedRecord.#ctor(System.Guid,System.Int64,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceAbortedRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the aborted workflow.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking records are generated.</param>
      <param name="activityDefinitionId">The display name of the root workflow activity.</param>
      <param name="reason">The reason the workflow was aborted.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceAbortedRecord.#ctor(System.Guid,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceAbortedRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the aborted workflow.</param>
      <param name="activityDefinitionId">The display name of the root Workflow Activity.</param>
      <param name="reason">The reason the workflow was aborted.</param>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceAbortedRecord.Reason">
      <summary>Gets a string that describes why the workflow was aborted.</summary>
      <returns>The reason the workflow was aborted.</returns>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceAbortedRecord.ToString">
      <summary>Returns a string that contains the tracking record data.</summary>
      <returns>The tracking record data.</returns>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceQuery">
      <summary>When added to the <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" /> collection, subscribes to workflow instance records when the tracking profile is created to subscribe to tracking records.</summary>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceQuery" /> class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceQuery.States">
      <summary>The subscribed states from the tracked workflow instance when the tracking records are created.</summary>
      <returns>The workflow states.</returns>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceRecord">
      <summary>Contains the data sent to a tracking service by the run-time tracking infrastructure when a workflow instance changes state.</summary>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceRecord.#ctor(System.Activities.Tracking.WorkflowInstanceRecord)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" /> class from an existing <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" /> instance.</summary>
      <param name="record">The instance of the workflow instance record to use.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceRecord.#ctor(System.Guid,System.Int64,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the generating workflow instance.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking events are generated.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="state">The current state of the workflow when the record is generated.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceRecord.#ctor(System.Guid,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the generating workflow instance.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="state">The current state of the workflow when the record is generated.</param>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceRecord.ActivityDefinitionId">
      <summary>Returns the display name of the root activity of the workflow that generated this record.</summary>
      <returns>The activity definition ID.</returns>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceRecord.Clone">
      <summary>Creates a deep copy of <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" />.</summary>
      <returns>A deep copy of the <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" />.</returns>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceRecord.State">
      <summary>The current state of the workflow when the record is generated.</summary>
      <returns>The workflow state.</returns>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceRecord.ToString">
      <summary>Returns a string that contains the tracking record data.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceStates">
      <summary>Specifies the state of a workflow instance.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Aborted">
      <summary>The workflow instance is aborted.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Canceled">
      <summary>The workflow instance is canceled.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Completed">
      <summary>The workflow instance is completed.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Deleted">
      <summary>The workflow instance is deleted.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Idle">
      <summary>The workflow instance is idle.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Persisted">
      <summary>The workflow instance is persisted.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Resumed">
      <summary>The workflow instance is resumed.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Started">
      <summary>The workflow instance is started.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Suspended">
      <summary>The workflow instance is suspended.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Terminated">
      <summary>The workflow instance is terminated.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.UnhandledException">
      <summary>The workflow instance encountered an unhandled exception.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Unloaded">
      <summary>The workflow instance is unloaded.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Unsuspended">
      <summary>The workflow instance is unsuspended.</summary>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceSuspendedRecord">
      <summary>Contains the data sent to a tracking participant by the run-time tracking infrastructure when a workflow instance is suspended.</summary>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceSuspendedRecord.#ctor(System.Guid,System.Int64,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceSuspendedRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the suspended workflow.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking records are generated.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="reason">The reason the workflow was suspended</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceSuspendedRecord.#ctor(System.Guid,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceSuspendedRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the suspended workflow.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="reason">The reason the workflow was suspended.</param>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceSuspendedRecord.Reason">
      <summary>Gets a string that describes why the workflow instance was suspended.</summary>
      <returns>The reason the workflow was suspended.</returns>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceSuspendedRecord.ToString">
      <summary>Returns a string that contains the tracking record data.</summary>
      <returns>The tracking record data.</returns>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceTerminatedRecord">
      <summary>Contains the data sent to a tracking participant by the run-time tracking infrastructure when a workflow is terminated.</summary>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceTerminatedRecord.#ctor(System.Guid,System.Int64,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceTerminatedRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the terminated workflow.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking records are generated.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="reason">The reason the workflow was terminated.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceTerminatedRecord.#ctor(System.Guid,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceTerminatedRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the terminated workflow.</param>
      <param name="activityDefinitionId">The ID of the activity definition.</param>
      <param name="reason">The reason the workflow was terminated.</param>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceTerminatedRecord.Reason">
      <summary>Gets a string that describes why the workflow instance was terminated.</summary>
      <returns>The reason the workflow was terminated.</returns>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceTerminatedRecord.ToString">
      <summary>Returns a string that contains the tracking record data.</summary>
      <returns>The tracking record data.</returns>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord">
      <summary>Contains the data sent to a tracking participant by the run-time tracking infrastructure when a workflow instance encounters an unhandled exception.</summary>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord.#ctor(System.Guid,System.Int64,System.String,System.Activities.Tracking.ActivityInfo,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the generating workflow instance.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking events are generated.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="faultSource">The activity that generated the fault.</param>
      <param name="exception">The unhandled exception data.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord.#ctor(System.Guid,System.String,System.Activities.Tracking.ActivityInfo,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the generating workflow instance.</param>
      <param name="activityDefinitionId">The activity definition ID of the generating workflow activity.</param>
      <param name="faultSource">The activity that generated the fault.</param>
      <param name="exception">The unhandled exception data.</param>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord.FaultSource">
      <summary>Returns the activity that generated the fault.</summary>
      <returns>The faulting activity.</returns>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord.ToString">
      <summary>Returns the tracking record data.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord.UnhandledException">
      <summary>Gets the unhandled exception data.</summary>
      <returns>The exception data.</returns>
    </member>
    <member name="T:System.Activities.Validation.ActivityValidationServices">
      <summary>Provides the functionality to validate a workflow. </summary>
    </member>
    <member name="M:System.Activities.Validation.ActivityValidationServices.Resolve(System.Activities.Activity,System.String)">
      <summary>Retrieves the workflow activity with the specified ID in the specified workflow.</summary>
      <returns>A workflow activity.</returns>
      <param name="root">The root workflow activity that contains the activity element to access.</param>
      <param name="id">An identifier that is associated with an activity.</param>
    </member>
    <member name="M:System.Activities.Validation.ActivityValidationServices.Validate(System.Activities.Activity)">
      <summary>Verifies that a workflow activity is correctly configured according to the validation logic. This logic can be the cacheMetadata method of the activities to validate, or build and policy constraints.</summary>
      <returns>A collection of validation errors, each of which can contain the name of the validated activity, a descriptive message, an error code, and other information.</returns>
      <param name="toValidate">An element from a workflow activity tree.</param>
    </member>
    <member name="M:System.Activities.Validation.ActivityValidationServices.Validate(System.Activities.Activity,System.Activities.Validation.ValidationSettings)">
      <summary>Verifies that a workflow activity is correctly configured according to the validation logic. This logic can be the cacheMetadata method of the activities to validate, or build and policy constraints.</summary>
      <returns>A collection of validation errors, each of which can contain the name of the activity that is configured incorrectly, a descriptive message, an error or warning code , and other information.</returns>
      <param name="toValidate">An activity from a workflow activity tree.</param>
      <param name="settings">An object that determines the behavior of the validation method on the workflow , can suppress the internal validation logic, and can also contain the policy constraints.</param>
    </member>
    <member name="T:System.Activities.Validation.AddValidationError">
      <summary>Add a specified activity validation error to the activity before execution.</summary>
    </member>
    <member name="M:System.Activities.Validation.AddValidationError.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.AddValidationError" /> class.</summary>
    </member>
    <member name="P:System.Activities.Validation.AddValidationError.IsWarning">
      <summary>Gets or sets a value that indicates whether the validation error that occurred is a warning and not an error.</summary>
      <returns>true if the error that occurred is a warning and not an error; otherwise false.</returns>
    </member>
    <member name="P:System.Activities.Validation.AddValidationError.Message">
      <summary>Gets or sets an alphanumeric string that contains a description of the error.</summary>
      <returns>A description of the error.</returns>
    </member>
    <member name="P:System.Activities.Validation.AddValidationError.PropertyName">
      <summary>Gets or sets the name of the property that caused the error.</summary>
      <returns>The name of the property that caused the error.</returns>
    </member>
    <member name="T:System.Activities.Validation.AssertValidation">
      <summary>Adds a constraint violation to a list of constraint violations if the Assertion condition evaluates to false.</summary>
    </member>
    <member name="M:System.Activities.Validation.AssertValidation.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.AssertValidation" /> class.</summary>
    </member>
    <member name="P:System.Activities.Validation.AssertValidation.Assertion">
      <summary>Gets or sets a value that indicates whether the assert validation resolved to true or false.</summary>
      <returns>
        <see cref="T:System.Activities.InArgument`1" />.</returns>
    </member>
    <member name="P:System.Activities.Validation.AssertValidation.IsWarning">
      <summary>Gets or sets the value that indicates whether the result of the assert validation is a warning or an error.</summary>
      <returns>
        <see cref="T:System.Activities.InArgument`1" />.</returns>
    </member>
    <member name="P:System.Activities.Validation.AssertValidation.Message">
      <summary>Gets or sets the text string that states the results of the assert validation.</summary>
      <returns>
        <see cref="T:System.Activities.InArgument`1" />.</returns>
    </member>
    <member name="P:System.Activities.Validation.AssertValidation.PropertyName">
      <summary>Gets or sets the name of the property associated with the assert violation.</summary>
      <returns>An InArgument that contains the name of the property associated with the assert violation.</returns>
    </member>
    <member name="T:System.Activities.Validation.Constraint">
      <summary>Handles the validation constraint that is used for validating a workflow element.</summary>
    </member>
    <member name="M:System.Activities.Validation.Constraint.AddValidationError(System.Activities.NativeActivityContext,System.Activities.Validation.ValidationError)">
      <summary>Adds a validation error to a list of run-time validation errors that are attached to the execution context.</summary>
      <param name="context">The workflow activity execution environment.</param>
      <param name="error">A validation error that occurs during a workflow runtime.</param>
    </member>
    <member name="M:System.Activities.Validation.Constraint.CacheMetadata(System.Activities.NativeActivityMetadata)">
      <summary>Creates a <see cref="T:System.Activities.NativeActivityMetadata" /> object that contains runtime arguments for the workflow validation process.</summary>
      <param name="metadata">A <see cref="T:System.Activities.NativeActivityMetadata" /> object that becomes the container for a list of validation runtime arguments. </param>
    </member>
    <member name="M:System.Activities.Validation.Constraint.Execute(System.Activities.NativeActivityContext)">
      <summary>Invokes the process that validates a workflow element.</summary>
      <param name="context">The workflow activity execution environment.</param>
    </member>
    <member name="M:System.Activities.Validation.Constraint.OnExecute(System.Activities.NativeActivityContext,System.Object,System.Activities.Validation.ValidationContext)">
      <summary>When implemented by a derived class, validates the specified object using the specified native activity and validation contexts.</summary>
      <param name="context">The workflow activity execution.</param>
      <param name="objectToValidate">A workflow element.</param>
      <param name="objectToValidateContext">The context of the workflow element to be validated.</param>
    </member>
    <member name="F:System.Activities.Validation.Constraint.ValidationErrorListPropertyName">
      <summary>The name for an activity constraint property that is a list of workflow run-time validation errors.</summary>
    </member>
    <member name="T:System.Activities.Validation.Constraint`1">
      <summary>Handles a constraint used for validating an element of type T.</summary>
      <typeparam name="T">The type of the element to be validated.</typeparam>
    </member>
    <member name="M:System.Activities.Validation.Constraint`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.Constraint`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Validation.Constraint`1.Body">
      <summary>Gets or sets the validation logic.</summary>
      <returns>An <see cref="T:System.Activities.ActivityAction" /> delegate.</returns>
    </member>
    <member name="T:System.Activities.Validation.GetChildSubtree">
      <summary>Retrieves workflow child elements from an instance of an activity.</summary>
    </member>
    <member name="M:System.Activities.Validation.GetChildSubtree.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.GetChildSubtree" /> class.</summary>
    </member>
    <member name="P:System.Activities.Validation.GetChildSubtree.ValidationContext">
      <summary>Gets or sets the property that serves as an argument into an activity and provides the activity with the information required for its validation process.</summary>
      <returns>An argument to an activity that provides information for its validation process.</returns>
    </member>
    <member name="T:System.Activities.Validation.GetParentChain">
      <summary>Retrieves the collection of all workflow elements which belong to the parent axis of an activity.</summary>
    </member>
    <member name="M:System.Activities.Validation.GetParentChain.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.GetParentChain" /> class.</summary>
    </member>
    <member name="P:System.Activities.Validation.GetParentChain.ValidationContext">
      <summary>Gets or sets the property that serves as an argument into an activity and provides the activity with the information required for its validation process.</summary>
      <returns>An <see cref="T:System.Activities.InArgument`1" />.</returns>
    </member>
    <member name="T:System.Activities.Validation.GetWorkflowTree">
      <summary>Retrieves a workflow tree from an instance of an activity.</summary>
    </member>
    <member name="M:System.Activities.Validation.GetWorkflowTree.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.GetWorkflowTree" /> class.</summary>
    </member>
    <member name="P:System.Activities.Validation.GetWorkflowTree.ValidationContext">
      <summary>Gets or sets the property that serves as an argument into an activity and provides the activity with the information required for its validation process.</summary>
      <returns>An argument to an activity that provides information for its validation process.</returns>
    </member>
    <member name="T:System.Activities.Validation.ValidationContext">
      <summary>Generates results based on the correct context for the current node in the workflow tree.</summary>
    </member>
    <member name="T:System.Activities.Validation.ValidationError">
      <summary>Represents an instance of a validation error that occurs before execution of the workflow.</summary>
    </member>
    <member name="M:System.Activities.Validation.ValidationError.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.ValidationError" /> class using the specified error message.</summary>
      <param name="message">The information about the error.</param>
    </member>
    <member name="M:System.Activities.Validation.ValidationError.#ctor(System.String,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.ValidationError" /> class using the specified error message and warning indication.</summary>
      <param name="message">The error message.</param>
      <param name="isWarning">true if the error is a warning; otherwise, false.</param>
    </member>
    <member name="M:System.Activities.Validation.ValidationError.#ctor(System.String,System.Boolean,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.ValidationError" /> class using the specified error message, warning indicator, and name of the property that caused the error.</summary>
      <param name="message">The error message.</param>
      <param name="isWarning">An indicator whether the error is a warning.</param>
      <param name="propertyName">The alphanumeric name of the property that generated the error.</param>
    </member>
    <member name="P:System.Activities.Validation.ValidationError.Id">
      <summary>A unique alphanumeric identifier for the <see cref="T:System.Activities.Activity" /> that is the source of the error. This identifier is unique for each activity in a specific workflow.</summary>
      <returns>An identifier.</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationError.IsWarning">
      <summary>Gets a value that indicates whether the validation error is a warning and not an error.</summary>
      <returns>true if the validation error is a warning; otherwise false.</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationError.Message">
      <summary>Gets an alphanumeric message that provides information about the validation error.</summary>
      <returns>A string.</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationError.PropertyName">
      <summary>Gets the alphanumeric name of the property that generated the error.</summary>
      <returns>A string.</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationError.Source">
      <summary>Gets the activity that is the source of the error.</summary>
      <returns>An activity.</returns>
    </member>
    <member name="M:System.Activities.Validation.ValidationError.ToString">
      <summary>Converts the validation error property names and values into a message string that lists them.</summary>
      <returns>A string.</returns>
    </member>
    <member name="T:System.Activities.Validation.ValidationResults">
      <summary>Containts all validation errors generated by <see cref="M:System.Activities.Validation.ActivityValidationServices.Validate(System.Activities.Activity)" /> while validating a workflow.  These errors are contained in the <see cref="P:System.Activities.Validation.ValidationResults.Errors" /> and <see cref="P:System.Activities.Validation.ValidationResults.Warnings" /> collections.</summary>
    </member>
    <member name="P:System.Activities.Validation.ValidationResults.Errors">
      <summary>Gets a read-only collection of workflow validation errors.</summary>
      <returns>A read-only collection of validation errors.</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationResults.Warnings">
      <summary>Gets a read-only collection of workflow validation warnings.</summary>
      <returns>A read-only collection of validation warnings.</returns>
    </member>
    <member name="T:System.Activities.Validation.ValidationSettings">
      <summary>Represents a collection of settings that customize the behavior that <see cref="M:System.Activities.Validation.ActivityValidationServices.Validate(System.Activities.Activity)" /> will exhibit. It also enables the activity user to apply policy constraints to a workflow.</summary>
    </member>
    <member name="M:System.Activities.Validation.ValidationSettings.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.ValidationSettings" /> class.</summary>
    </member>
    <member name="P:System.Activities.Validation.ValidationSettings.AdditionalConstraints">
      <summary>Gets a  dictionary of type-constraint pairs. Each additional constraint added to the dictionary will be applied to every activity of the specify type in the workflow to validate. </summary>
      <returns>A dictionary type list of constraints and types. </returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationSettings.OnlyUseAdditionalConstraints">
      <summary>Gets or sets a value that indicates whether the additional validation constraints are to be used exclusively to validate the workflow. If set to true, all the validation contained inside the activity itself will be ignored.</summary>
      <returns>true if the additional constraints are to be used exclusively; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationSettings.SingleLevel">
      <summary>Gets or sets a value that indicates whether the supplied activity and all the children and sub-children of the supplied activity are validated, or if the validator should validate only to the supplied activity.</summary>
      <returns>true if an element is being validated without validating its child elements; otherwise, false if the element and its children and sub-children are being validated.</returns>
    </member>
    <member name="T:System.Activities.XamlIntegration.ActivityWithResultConverter">
      <summary>Provides type conversion for the result type of a workflow activity operation. </summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityWithResultConverter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.XamlIntegration.ActivityWithResultConverter" /> class.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityWithResultConverter.#ctor(System.Type)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.XamlIntegration.ActivityWithResultConverter" /> class with the specified type to which an activity result is converted.</summary>
      <param name="type">The type to which the activity result is converted.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.ActivityWithResultValueSerializer">
      <summary>Ensures that the result of an activity is properly converted to a string that can be used for serial transmission.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityWithResultValueSerializer.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.XamlIntegration.ActivityWithResultValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityWithResultValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Returns an indication whether an input object is an <see cref="T:System.Activities.XamlIntegration.IValueSerializableExpression" /> that can be serialized into a string.</summary>
      <returns>true if the expression can be serialized; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Activities.XamlIntegration.IValueSerializableExpression" /> object that is verified for its ability to be converted to a string for serial transmission.</param>
      <param name="context">Defines a context for the serialization of <see cref="T:System.Activities.XamlIntegration.IValueSerializableExpression" />.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityWithResultValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Serializes the specified object into a string.</summary>
      <returns>A string version of the serializable expression.</returns>
      <param name="value">The object that is converted to a string for serial transmission.</param>
      <param name="context">Defines a context for the serialization of the object being that is converted into a string.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.ActivityXamlServices">
      <summary>Creates an instance of an activity tree described in XAML.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateBuilderReader(System.Xaml.XamlReader)">
      <summary>Maps an x:Class activity tree from the specified reader to an <see cref="T:System.Activities.ActivityBuilder" /> or <see cref="T:System.Activities.ActivityBuilder`1" />.</summary>
      <returns>A <see cref="T:System.Xaml.XamlReader" /> that handles the transformation between the <see cref="T:System.Activities.ActivityBuilder" /> and the activity x:Class XAML.</returns>
      <param name="innerReader">The x:Class content.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateBuilderReader(System.Xaml.XamlReader,System.Xaml.XamlSchemaContext)">
      <summary>Maps an x:Class activity tree from the specified reader to an <see cref="T:System.Activities.ActivityBuilder" /> or <see cref="T:System.Activities.ActivityBuilder`1" /> using the specified schema context.</summary>
      <returns>A <see cref="T:System.Xaml.XamlReader" /> that handles the transformation between the <see cref="T:System.Activities.ActivityBuilder" /> and the activity x:Class XAML.</returns>
      <param name="innerReader">The x:Class content.</param>
      <param name="schemaContext">The schema context.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateBuilderWriter(System.Xaml.XamlWriter)">
      <summary>Maps an <see cref="T:System.Activities.ActivityBuilder" /> or <see cref="T:System.Activities.ActivityBuilder`1" /> from the specified writer to an x:Class activity tree.</summary>
      <returns>A <see cref="T:System.Xaml.XamlWriter" /> that handles the transformation between the <see cref="T:System.Activities.ActivityBuilder" /> and the activity x:Class XAML.</returns>
      <param name="innerWriter">The content of an <see cref="T:System.Activities.ActivityBuilder" /> or <see cref="T:System.Activities.ActivityBuilder`1" />.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateReader(System.IO.Stream)">
      <summary>Maps an x:Class activity tree from the specified stream to an <see cref="T:System.Activities.DynamicActivity" /> or <see cref="T:System.Activities.DynamicActivity`1" />.</summary>
      <returns>The <see cref="T:System.Activities.ActivityBuilder" /> or <see cref="T:System.Activities.ActivityBuilder`1" /> content.</returns>
      <param name="stream">The x:Class content.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateReader(System.Xaml.XamlReader)">
      <summary>Maps an x:Class activity tree from the specified reader to an <see cref="T:System.Activities.DynamicActivity" /> or <see cref="T:System.Activities.DynamicActivity`1" />.</summary>
      <returns>The <see cref="T:System.Activities.ActivityBuilder" /> or <see cref="T:System.Activities.ActivityBuilder`1" /> content.</returns>
      <param name="innerReader">The x:Class content.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateReader(System.Xaml.XamlReader,System.Xaml.XamlSchemaContext)">
      <summary>Maps an x:Class activity tree from the specified reader to an <see cref="T:System.Activities.DynamicActivity" /> or <see cref="T:System.Activities.DynamicActivity`1" /> using the specified schema context.</summary>
      <returns>The <see cref="T:System.Activities.ActivityBuilder" /> or <see cref="T:System.Activities.ActivityBuilder`1" /> content.</returns>
      <param name="innerReader">The x:Class content.</param>
      <param name="schemaContext">The schema context.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.IO.Stream)">
      <summary>Creates an instance of the declarative workflow described in the specified stream.</summary>
      <returns>An instance of the activity tree that describes the workflow.</returns>
      <param name="stream">The workflow definition.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.IO.TextReader)">
      <summary>Creates an instance of the declarative workflow described in the specified text reader.</summary>
      <returns>An instance of the activity tree that describes the workflow.</returns>
      <param name="textReader">The workflow definition.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.String)">
      <summary>Creates an instance of the declarative workflow described in the specified file.</summary>
      <returns>An instance of the activity tree that describes the workflow.</returns>
      <param name="fileName">A file that contains the workflow definition.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.Xaml.XamlReader)">
      <summary>Creates an instance of the declarative workflow described in the specified XAML reader.</summary>
      <returns>An instance of the activity tree that describes the workflow.</returns>
      <param name="xamlReader">The workflow definition.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.Xml.XmlReader)">
      <summary>Creates an instance of the declarative workflow described in the specified XML reader.</summary>
      <returns>An instance of the activity tree that describes the workflow.</returns>
      <param name="xmlReader">The workflow definition.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.ArgumentValueSerializer">
      <summary>Converts instances of <see cref="T:System.Activities.Argument" /> to instances of <see cref="T:System.String" />.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ArgumentValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.ArgumentValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ArgumentValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified object can be converted into a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">The object to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ArgumentValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts the specified object to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the specified object.</returns>
      <param name="value">The object to convert into a <see cref="T:System.String" />.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.FuncDeferringLoader">
      <summary>Represents an object that loads an instance of a saved function.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.FuncDeferringLoader.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.XamlIntegration.FuncDeferringLoader" /> class.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.FuncDeferringLoader.Load(System.Xaml.XamlReader,System.IServiceProvider)">
      <summary>Loads an instance of a function that can be used at any point to deserialize a list of nodes.</summary>
      <returns>An instance of a function.</returns>
      <param name="xamlReader">A list of serialized nodes.</param>
      <param name="context">A context that provides information needed for parsing.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.FuncDeferringLoader.Save(System.Object,System.IServiceProvider)">
      <summary>Serializes the specified <see cref="T:System.Object" /> into a Xaml node list.</summary>
      <returns>A Xaml reader.</returns>
      <param name="value">The object to transform into a Xaml node list.</param>
      <param name="serviceProvider">An object that provides context information for serialization. </param>
    </member>
    <member name="T:System.Activities.XamlIntegration.InArgumentConverter">
      <summary>Provides a type converter to convert <see cref="T:System.Activities.InArgument" /> classes to and from various other representations.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.InArgumentConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.InArgumentConverter" /> class.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.InArgumentConverter.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.InArgumentConverter" /> class using the specified type.</summary>
      <param name="type">The type of the associated <see cref="T:System.Activities.InArgument" />.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.InOutArgumentConverter">
      <summary>Provides a type converter to convert <see cref="T:System.Activities.InOutArgument" /> classes to and from various other representations.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.InOutArgumentConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.InOutArgumentConverter" /> class.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.InOutArgumentConverter.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.InOutArgumentConverter" /> class using the specified type.</summary>
      <param name="type">The type of the associated <see cref="T:System.Activities.InOutArgument" />.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.IValueSerializableExpression">
      <summary>Provides methods for converting expressions to strings.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.IValueSerializableExpression.CanConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the expression can be converted into a string.</summary>
      <returns>true if the expression can be converted into a string; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.IValueSerializableExpression.ConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an expression to a string.</summary>
      <returns>A string representation of the expression.</returns>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.OutArgumentConverter">
      <summary>Provides a type converter to convert <see cref="T:System.Activities.OutArgument" /> classes to and from various other representations.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.OutArgumentConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.OutArgumentConverter" /> class.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.OutArgumentConverter.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.OutArgumentConverter" /> class using the specified type.</summary>
      <param name="type">The type of the associated <see cref="T:System.Activities.OutArgument" />.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.PropertyReferenceExtension`1">
      <summary>Provides access to properties contained in an x:Class document.</summary>
      <typeparam name="T">The type of the associated property.</typeparam>
    </member>
    <member name="M:System.Activities.XamlIntegration.PropertyReferenceExtension`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.PropertyReferenceExtension`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.XamlIntegration.PropertyReferenceExtension`1.PropertyName">
      <summary>Get or sets the name of the associated property.</summary>
      <returns>The name of the property.</returns>
    </member>
    <member name="M:System.Activities.XamlIntegration.PropertyReferenceExtension`1.ProvideValue(System.IServiceProvider)">
      <summary>Retrieves the value of the associated property.</summary>
      <returns>The property value.</returns>
      <param name="serviceProvider">An object that provides services for the markup extension.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.TypeConverterBase">
      <summary>Provides methods that derived type converter classes can use for converting objects to and from various representations.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.TypeConverterBase.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>When overridden in a derived class, determines whether the specified type can be converted from.</summary>
      <returns>true if the specified type can be converted from; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="sourceType">The type to convert from.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.TypeConverterBase.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>When overridden in a derived class, determines whether the specified type can be converted to.</summary>
      <returns>true if the specified type can be converted to; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="destinationType">The type to convert to.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.TypeConverterBase.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>When overridden in a derived class, converts the specified value to a new representation specified by the derived class.</summary>
      <returns>The converted value.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo" />. If not supplied, the current culture is assumed.</param>
      <param name="value">The object to convert.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.TypeConverterBase.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>When overridden in a derived class, converts the specified value to the specified representation.</summary>
      <returns>The converted value.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo" />. If not supplied, the current culture is assumed.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert to.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.AddIn.Contract.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.AddIn.Contract</name>
  </assembly>
  <members>
    <member name="T:System.AddIn.Contract.IContract">
      <summary>Represents the base interface for all contracts that are used for communication between components that are updated independently.</summary>
    </member>
    <member name="M:System.AddIn.Contract.IContract.AcquireLifetimeToken">
      <summary>Specifies that the contract is accessible to a client until the client revokes the contract.</summary>
      <returns>A value, also known as a lifetime token, that identifies the client that has acquired the contract.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IContract.GetRemoteHashCode">
      <summary>Returns a hash code for the <see cref="T:System.AddIn.Contract.IContract" />.</summary>
      <returns>A hash code for the <see cref="T:System.AddIn.Contract.IContract" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IContract.QueryContract(System.String)">
      <summary>Returns a contract that is implemented by this contract.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.IContract" /> that represents a contract that a client is requesting from the current contract; null if the current contract does not support the contract that is requested.</returns>
      <param name="contractIdentifier">A string that identifies the contract that is being requested.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IContract.RemoteEquals(System.AddIn.Contract.IContract)">
      <summary>Indicates whether the specified contract is equal to this <see cref="T:System.AddIn.Contract.IContract" />.</summary>
      <returns>true if <paramref name="contract" /> is equal to this <see cref="T:System.AddIn.Contract.IContract" />; otherwise, false.</returns>
      <param name="contract">The contract to compare with this <see cref="T:System.AddIn.Contract.IContract" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IContract.RemoteToString">
      <summary>Returns a string representation of the current <see cref="T:System.AddIn.Contract.IContract" />.</summary>
      <returns>A string representation of the current <see cref="T:System.AddIn.Contract.IContract" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IContract.RevokeLifetimeToken(System.Int32)">
      <summary>Specifies that the contract is no longer accessible to a client.</summary>
      <param name="token">A value, also known as a lifetime token, that identifies the client that is revoking the contract.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.IEnumeratorContract`1">
      <summary>Enumerates the elements in an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection.</summary>
      <typeparam name="T">The type of objects being enumerated. </typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IEnumeratorContract`1.GetCurrent">
      <summary>Returns the object in the collection at the current position of the enumerator.</summary>
      <returns>The <see cref="T:System.AddIn.Contract.IContract" /> in the collection at the current position of the enumerator.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IEnumeratorContract`1.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IEnumeratorContract`1.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.IExecutorExtensionContract">
      <summary>Defines an interface that host applications can implement to extend add-in executors.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IExecutorExtensionContract.AssemblyLoaded(System.String)">
      <summary>Called after an add-in executor loads an add-in assembly.</summary>
      <param name="assemblyName">The name of the assembly that was loaded.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IExecutorExtensionContract.AssemblyLoadedFrom(System.String)">
      <summary>Called after an add-in executor loads an add-in assembly from a specified location.</summary>
      <param name="assemblyFile">The name of the assembly that was loaded.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IExecutorExtensionContract.AssemblyLoading(System.String)">
      <summary>Called just before an add-in executor loads an add-in assembly.</summary>
      <param name="assemblyName">The name of the assembly to be loaded.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IExecutorExtensionContract.AssemblyLoadingFrom(System.String)">
      <summary>Called just before an add-in executor loads an add-in assembly from a specified location.</summary>
      <param name="assemblyFile">The name of the assembly to be loaded.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IExecutorExtensionContract.EntryPointStarted(System.AddIn.Contract.IContract)">
      <summary>Called after an add-in executor instantiates the entry point of an add-in assembly.</summary>
      <param name="entryPoint">An <see cref="T:System.AddIn.Contract.IContract" /> that represents the entry point that was instantiated.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IExecutorExtensionContract.EntryPointStarting(System.String,System.String,System.AddIn.Contract.Collections.IRemoteArgumentArrayContract)">
      <summary>Called just before an add-in executor instantiates the entry point in an add-in assembly.</summary>
      <param name="assemblyName">The name of the add-in assembly.</param>
      <param name="startupClass">The name of the class that is the entry point for the add-in assembly.</param>
      <param name="initArgs">An <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayContract" /> that contains the arguments that will be passed to the constructor for <paramref name="startupClass" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IExecutorExtensionContract.ExecutorCreated">
      <summary>Called after an add-in loader creates a new add-in executor.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.IListContract`1">
      <summary>Represents a generic list of types that are defined by a contract and are used to pass collections of that contract type between a host and an add-in.</summary>
      <typeparam name="T">The contract type of the objects in the list.</typeparam>
    </member>
    <member name="M:System.AddIn.Contract.IListContract`1.Add(`0)">
      <summary>Adds an object to an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection. </summary>
      <param name="item">The object to add.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IListContract`1.Clear">
      <summary>Removes all objects from an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IListContract`1.Contains(`0)">
      <summary>Determines whether a specific item is in an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection.</summary>
      <returns>true if <paramref name="item" /> is in the collection; otherwise, false. </returns>
      <param name="item">The object to look for in the collection.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IListContract`1.GetCount">
      <summary>Gets the number of items in an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection.</summary>
      <returns>The number of items in the collection.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IListContract`1.GetEnumeratorContract">
      <summary>Returns an enumerator that iterates through an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.IEnumeratorContract`1" /> enumerator to iterate through the collection.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IListContract`1.GetIsReadOnly">
      <summary>Determines whether an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IListContract`1.GetItem(System.Int32)">
      <summary>Returns the item at the specified index of an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection.</summary>
      <returns>The item at the specified index.</returns>
      <param name="index">The zero-based index of the item to get.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.IListContract`1.GetCount" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IListContract`1.IndexOf(`0)">
      <summary>Returns the index of a specific item in an <see cref="T:System.AddIn.Contract.Collections.IListContract`1" /> collection.</summary>
      <returns>The index of the specified item.</returns>
      <param name="item">An item in the collection.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of the <see cref="M:System.AddIn.Contract.IListContract`1.GetCount" /> method.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IListContract`1.Insert(System.Int32,`0)">
      <summary>Inserts an item at the specified index in an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection.</summary>
      <param name="index">The zero-based index at which to insert <paramref name="item" />.</param>
      <param name="item">The <see cref="T:System.AddIn.Contract.IContract" /> object to insert in the <see cref="T:System.AddIn.Contract.IListContract`1" /> collection.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.IListContract`1.GetCount" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.AddIn.Contract.IListContract`1" /> collection is read-only.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IListContract`1.Remove(`0)">
      <summary>Removes an item from an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection of a specified type.</summary>
      <returns>true if an item is removed; otherwise, false. </returns>
      <param name="item">The item to remove from the collection.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IListContract`1.RemoveAt(System.Int32)">
      <summary>Removes the item at the specified index in an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection.</summary>
      <param name="index">The index of the item to remove.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of the <see cref="M:System.AddIn.Contract.IListContract`1.GetCount" /> method.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.AddIn.Contract.IListContract`1" /> collection is read-only.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IListContract`1.SetItem(System.Int32,`0)">
      <summary>Sets the item at the specified index in an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection.</summary>
      <param name="index">The zero-based index at which to set the item.</param>
      <param name="item">The item to set at the specified index.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of the <see cref="M:System.AddIn.Contract.IListContract`1.GetCount" /> method.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.AddIn.Contract.IListContract`1" /> collection is read-only.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.INativeHandleContract">
      <summary>Provides access to a window's handle (Hwnd) from native code. </summary>
    </member>
    <member name="M:System.AddIn.Contract.INativeHandleContract.GetHandle">
      <summary>Obtains the window's handle (Hwnd).</summary>
      <returns>An <see cref="T:System.IntPtr" /> object that represents a pointer to the window's handle.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.IProfferServiceContract">
      <summary>Enables clients to provide custom services to components on which the contract is implemented.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IProfferServiceContract.ProfferService(System.String,System.AddIn.Contract.IServiceProviderContract)">
      <summary>Adds a service to the set of services that can be accessed by clients of a component. </summary>
      <param name="serviceIdentifier">A string that identifies the service being offered. </param>
      <param name="service">An <see cref="T:System.AddIn.Contract.IServiceProviderContract" /> that implements the service being offered.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IProfferServiceContract.RevokeService(System.String)">
      <summary>Removes a service from the set of services offered by a component. </summary>
      <param name="serviceIdentifier">A string that identifies the service being revoked.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.ISerializableObjectContract">
      <summary>Defines a contract that provides information about a serializable object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.ISerializableObjectContract.GetCanonicalName">
      <summary>Returns the canonical name of the type of the object that this <see cref="T:System.AddIn.Contract.ISerializableObjectContract" /> describes.</summary>
      <returns>The canonical name of the type of the object that this <see cref="T:System.AddIn.Contract.ISerializableObjectContract" /> describes.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.ISerializableObjectContract.GetSerializableObjectData">
      <summary>Returns data that can be used to help deserialize the object that this <see cref="T:System.AddIn.Contract.ISerializableObjectContract" /> describes.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.SerializableObjectData" /> that contains data about the object that this <see cref="T:System.AddIn.Contract.ISerializableObjectContract" /> describes.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.IServiceProviderContract">
      <summary>Defines a mechanism for retrieving a service contract from a component.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.IServiceProviderContract.QueryService(System.String,System.String)">
      <summary>Returns a service contract that is implemented by this <see cref="T:System.AddIn.Contract.IServiceProviderContract" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.IContract" /> that represents a service contract that a client is requesting from the <see cref="T:System.AddIn.Contract.IServiceProviderContract" />; null if the <see cref="T:System.AddIn.Contract.IServiceProviderContract" /> does not implement the requested contract.</returns>
      <param name="serviceIdentifier">The name of the service that is being requested.</param>
      <param name="serviceContractIdentifier">The service contract that is being requested.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.RemoteArgument">
      <summary>Represents an instance of a type that can be passed across process and application domain boundaries.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.AddIn.Contract.IContract)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents an <see cref="T:System.AddIn.Contract.IContract" /> argument.</summary>
      <param name="value">An <see cref="T:System.AddIn.Contract.IContract" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.AddIn.Contract.IContract,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents an <see cref="T:System.AddIn.Contract.IContract" /> argument that can be passed by reference.</summary>
      <param name="value">An <see cref="T:System.AddIn.Contract.IContract" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.AddIn.Contract.RemoteArgumentKind,System.TypeCode)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class using the specified <see cref="T:System.AddIn.Contract.RemoteArgumentKind" /> and <see cref="T:System.TypeCode" /> for an argument that is not passed by reference.</summary>
      <param name="remoteArgKind">One of the <see cref="T:System.AddIn.Contract.RemoteArgumentKind" /> values that indicates whether the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents an intrinsic type, an array of intrinsic types, an <see cref="T:System.AddIn.Contract.IContract" />, or the <see cref="F:System.Type.Missing" /> value.</param>
      <param name="typeCode">A <see cref="T:System.TypeCode" /> that specifies the base type of the remote argument.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="remoteArgKind" /> is <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> or <see cref="F:System.AddIn.Contract.RemoteArgumentKind.IntrinsicArray" />, and <paramref name="typeCode" /> is <see cref="F:System.TypeCode.Object" /> or <see cref="F:System.TypeCode.Empty" />.-or-<paramref name="remoteArgKind" /> is <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Missing" /> and <paramref name="typeCode" /> is not <see cref="F:System.TypeCode.Empty" />.-or-<paramref name="remoteArgKind" /> is <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Contract" /> and <paramref name="typeCode" /> is not <see cref="F:System.TypeCode.Object" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.AddIn.Contract.RemoteArgumentKind,System.TypeCode,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class using the specified <see cref="T:System.AddIn.Contract.RemoteArgumentKind" /> and <see cref="T:System.TypeCode" /> for an argument that can be passed by reference.</summary>
      <param name="remoteArgKind">One of the <see cref="T:System.AddIn.Contract.RemoteArgumentKind" /> values that indicates whether the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents an intrinsic type, an array of intrinsic types, an <see cref="T:System.AddIn.Contract.IContract" />, or the <see cref="F:System.Type.Missing" /> value.</param>
      <param name="typeCode">A <see cref="T:System.TypeCode" /> that specifies the base type of the remote argument.</param>
      <param name="isByRef">true if the remote argument is passed by reference; otherwise, false.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="remoteArgKind" /> is <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> or <see cref="F:System.AddIn.Contract.RemoteArgumentKind.IntrinsicArray" />, and <paramref name="typeCode" /> is <see cref="F:System.TypeCode.Object" /> or <see cref="F:System.TypeCode.Empty" />.-or-<paramref name="remoteArgKind" /> is <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Missing" /> and <paramref name="typeCode" /> is not <see cref="F:System.TypeCode.Empty" />.-or-<paramref name="remoteArgKind" /> is <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Contract" /> and <paramref name="typeCode" /> is not <see cref="F:System.TypeCode.Object" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="remoteArgKind" /> is not a valid <see cref="T:System.AddIn.Contract.RemoteArgumentKind" /> value. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Array)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents an <see cref="T:System.Array" /> argument.</summary>
      <param name="array">An <see cref="T:System.Array" /> argument that can be passed across process or application domain boundaries.</param>
      <exception cref="T:System.ArgumentException">The array element type is not a base type (that is, the <see cref="M:System.Type.GetTypeCode(System.Type)" /> method for the array element type returns <see cref="F:System.TypeCode.Object" />).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Array,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents an <see cref="T:System.Array" /> argument that can be passed by reference.</summary>
      <param name="array">An <see cref="T:System.Array" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="array" /> is an argument that is passed by reference; otherwise, false.</param>
      <exception cref="T:System.ArgumentException">The array element type is not a base type (that is, the <see cref="M:System.Type.GetTypeCode(System.Type)" /> method returns <see cref="F:System.TypeCode.Object" /> for the array element type).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.Boolean" /> argument.</summary>
      <param name="value">A <see cref="T:System.Boolean" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.Boolean" /> argument that can be passed by reference.</summary>
      <param name="value">A <see cref="T:System.Boolean" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Byte)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.Byte" /> argument.</summary>
      <param name="value">A <see cref="T:System.Byte" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Byte,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.Byte" /> argument that can be passed by reference.</summary>
      <param name="value">A <see cref="T:System.Byte" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Char)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.Char" /> argument.</summary>
      <param name="value">A <see cref="T:System.Char" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Char,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.Char" /> argument that can be passed by reference.</summary>
      <param name="value">A <see cref="T:System.Char" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.DateTime" /> argument.</summary>
      <param name="value">A <see cref="T:System.DateTime" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.DateTime,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.DateTime" /> argument that can be passed by reference.</summary>
      <param name="value">A <see cref="T:System.DateTime" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.DBNull)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.DBNull" /> argument.</summary>
      <param name="value">A <see cref="T:System.DBNull" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.DBNull,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.DBNull" /> argument that can be passed by reference.</summary>
      <param name="value">A <see cref="T:System.DBNull" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Decimal)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.Decimal" /> argument.</summary>
      <param name="value">A <see cref="T:System.Decimal" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Decimal,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.Decimal" /> argument that can be passed by reference.</summary>
      <param name="value">A <see cref="T:System.Decimal" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.Double" /> argument.</summary>
      <param name="value">A <see cref="T:System.Double" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Double,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.Double" /> argument that can be passed by reference.</summary>
      <param name="value">A <see cref="T:System.Double" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents an <see cref="T:System.Int16" /> argument.</summary>
      <param name="value">An <see cref="T:System.Int16" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Int16,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents an <see cref="T:System.Int16" /> argument that can be passed by reference.</summary>
      <param name="value">An <see cref="T:System.Int16" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents an <see cref="T:System.Int32" /> argument.</summary>
      <param name="value">An <see cref="T:System.Int32" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents an <see cref="T:System.Int32" /> argument that can be passed by reference.</summary>
      <param name="value">An <see cref="T:System.Int32" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents an <see cref="T:System.Int64" /> argument.</summary>
      <param name="value">An <see cref="T:System.Int64" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Int64,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents an <see cref="T:System.Int64" /> argument that can be passed by reference.</summary>
      <param name="value">An <see cref="T:System.Int64" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.SByte)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents an <see cref="T:System.SByte" /> argument.</summary>
      <param name="value">An <see cref="T:System.SByte" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.SByte,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents an <see cref="T:System.SByte" /> argument that can be passed by reference.</summary>
      <param name="value">An <see cref="T:System.SByte" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Single)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.Single" /> argument.</summary>
      <param name="value">A <see cref="T:System.Single" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.Single,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.Single" /> argument that can be passed by reference.</summary>
      <param name="value">A <see cref="T:System.Single" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.String" /> argument.</summary>
      <param name="value">A <see cref="T:System.String" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.String" /> argument that can be passed by reference.</summary>
      <param name="value">A <see cref="T:System.String" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.UInt16)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.UInt16" /> argument.</summary>
      <param name="value">A <see cref="T:System.UInt16" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.UInt16,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.UInt16" /> argument that can be passed by reference.</summary>
      <param name="value">A <see cref="T:System.UInt16" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.UInt32" /> argument.</summary>
      <param name="value">A <see cref="T:System.UInt32" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.UInt32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.UInt32" /> argument that can be passed by reference.</summary>
      <param name="value">A <see cref="T:System.UInt32" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.UInt64)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.UInt64" /> argument.</summary>
      <param name="value">A <see cref="T:System.UInt64" /> argument that can be passed across process or application domain boundaries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.#ctor(System.UInt64,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> class that represents a <see cref="T:System.UInt64" /> argument that can be passed by reference.</summary>
      <param name="value">A <see cref="T:System.UInt64" /> argument that can be passed across process or application domain boundaries.</param>
      <param name="isByRef">true if <paramref name="value" /> is an argument that is passed by reference; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.ArrayValue">
      <summary>Gets or sets the <see cref="T:System.Array" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.Array" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; null if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.IntrinsicArray" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is set to the <see cref="F:System.TypeCode.Object" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.BooleanValue">
      <summary>Gets or sets the <see cref="T:System.Boolean" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.Boolean" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; false if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.Boolean" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.ByteValue">
      <summary>Gets or sets the <see cref="T:System.Byte" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.Byte" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; 0 (zero) if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.Byte" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.CharValue">
      <summary>Gets or sets the <see cref="T:System.Char" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.Char" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; <see cref="F:System.Char.MinValue" /> if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.Char" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.ContractValue">
      <summary>Gets or sets the <see cref="T:System.AddIn.Contract.IContract" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.AddIn.Contract.IContract" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; null if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Contract" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.Object" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.CreateRemoteArgument(System.Object)">
      <summary>Creates a <see cref="T:System.AddIn.Contract.RemoteArgument" /> for an argument that is not passed by reference. </summary>
      <returns>A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that represents the specified argument.</returns>
      <param name="value">The argument that will be passed across process or application domain boundaries.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.TypeCode" /> of <paramref name="value" /> is <see cref="F:System.TypeCode.Object" /> and <paramref name="value" /> is not an <see cref="T:System.AddIn.Contract.IContract" />.-or-The <see cref="T:System.TypeCode" /> of <paramref name="value" /> is <see cref="F:System.TypeCode.Empty" /> and <paramref name="value" /> is not set to <see cref="F:System.Reflection.Missing.Value" />.-or-<paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface and <paramref name="value" /> is not an <see cref="T:System.Array" />.-or-<paramref name="value" /> is an <see cref="T:System.Array" /> that contains elements with a <see cref="T:System.TypeCode" /> value of <see cref="F:System.TypeCode.Object" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.CreateRemoteArgument(System.Object,System.Boolean)">
      <summary>Creates a <see cref="T:System.AddIn.Contract.RemoteArgument" /> for an argument that can be passed by reference. </summary>
      <returns>A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that represents the specified argument.</returns>
      <param name="value">The argument that will be passed across process or application domain boundaries.</param>
      <param name="isByRef">true to pass the <paramref name="value" /> argument by reference; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.TypeCode" /> of <paramref name="value" /> is <see cref="F:System.TypeCode.Object" /> and <paramref name="value" /> is not an <see cref="T:System.AddIn.Contract.IContract" />.-or-The <see cref="T:System.TypeCode" /> of <paramref name="value" /> is <see cref="F:System.TypeCode.Empty" /> and <paramref name="value" /> is not set to <see cref="F:System.Reflection.Missing.Value" />.-or-<paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface and <paramref name="value" /> is not an <see cref="T:System.Array" />.-or-<paramref name="value" /> is an <see cref="T:System.Array" /> that contains elements with a <see cref="T:System.TypeCode" /> value of <see cref="F:System.TypeCode.Object" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.RemoteArgument.CreateRemoteArgument(System.Object,System.Boolean,System.TypeCode)">
      <summary>Creates a <see cref="T:System.AddIn.Contract.RemoteArgument" /> for an argument that has the specified type code and that can be passed by reference.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that represents the specified argument.</returns>
      <param name="value">The argument that will be passed across process or application domain boundaries.</param>
      <param name="isByRef">true to pass the argument by reference; otherwise, false.</param>
      <param name="typeCodeToUse">A <see cref="T:System.TypeCode" /> that indicates the type code of <paramref name="value" />, if <paramref name="value" /> is not an <see cref="T:System.Array" />. Otherwise, a <see cref="T:System.TypeCode" /> that indicates the type code of the elements in <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.TypeCode" /> of <paramref name="value" /> is <see cref="F:System.TypeCode.Object" />, <paramref name="value" /> is not an <see cref="T:System.AddIn.Contract.IContract" />, and <paramref name="value" /> is not null.-or-The <see cref="T:System.TypeCode" /> of <paramref name="value" /> is <see cref="F:System.TypeCode.Empty" /> and <paramref name="value" /> is not <see cref="F:System.Reflection.Missing.Value" />.-or-<paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface, <paramref name="value" /> is not null, and <paramref name="value" /> is not an <see cref="T:System.Array" />. -or-<paramref name="value" /> is an <see cref="T:System.Array" /> that contains elements with a <see cref="T:System.TypeCode" /> value of <see cref="F:System.TypeCode.Object" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.TypeCode" /> of <paramref name="value" /> is not <see cref="F:System.TypeCode.DBNull" /> and <paramref name="typeCodeToUse" /> is <see cref="F:System.TypeCode.DBNull" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="typeCodeToUse" /> does not specify a valid <see cref="T:System.TypeCode" /> value.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.DateTimeValue">
      <summary>Gets or sets the <see cref="T:System.DateTime" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.DateTime" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; <see cref="F:System.DateTime.MinValue" /> if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.DateTime" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.DBNullValue">
      <summary>Gets or sets the <see cref="T:System.DBNull" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.DBNull" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; null if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.DBNull" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.DecimalValue">
      <summary>Gets or sets the <see cref="T:System.Decimal" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.Decimal" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; 0 (zero) if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.Decimal" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.DoubleValue">
      <summary>Gets or sets the <see cref="T:System.Double" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.Double" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; 0.0 if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.Double" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.Int16Value">
      <summary>Gets or sets the <see cref="T:System.Int16" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.Int16" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; 0 (zero) if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.Int16" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.Int32Value">
      <summary>Gets or sets the <see cref="T:System.Int32" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.Int32" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; 0 (zero) if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.Int32" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.Int64Value">
      <summary>Gets or sets the <see cref="T:System.Int64" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.Int64" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; 0 (zero) if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.Int64" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.IsByRef">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents an argument that is passed by reference.</summary>
      <returns>true if the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents an argument that is passed by reference; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.MissingValue">
      <summary>Gets the <see cref="F:System.Type.Missing" /> value. </summary>
      <returns>The <see cref="F:System.Type.Missing" /> value.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-This property value is retrieved while the <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.Empty" /> value.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind">
      <summary>Gets a <see cref="T:System.AddIn.Contract.RemoteArgumentKind" /> that indicates the kind of argument that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents.</summary>
      <returns>One of the <see cref="T:System.AddIn.Contract.RemoteArgumentKind" /> values that indicates whether the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents an intrinsic type, an array of intrinsic types, an <see cref="T:System.AddIn.Contract.IContract" />, or the <see cref="F:System.Type.Missing" /> value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.SByteValue">
      <summary>Gets or sets the <see cref="T:System.SByte" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.SByte" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; 0 (zero) if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.SByte" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.SingleValue">
      <summary>Gets or sets the <see cref="T:System.Single" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.Single" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; 0.0 if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.Single" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.StringValue">
      <summary>Gets or sets the <see cref="T:System.String" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.String" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; null if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.String" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.TypeCode">
      <summary>Gets a <see cref="T:System.TypeCode" /> that indicates the base type of the argument that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents.</summary>
      <returns>A <see cref="T:System.TypeCode" /> that indicates the base type of the argument that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.UInt16Value">
      <summary>Gets or sets the <see cref="T:System.UInt16" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.UInt16" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; 0 (zero) if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.UInt16" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.UInt32Value">
      <summary>Gets or sets the <see cref="T:System.UInt32" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.UInt32" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; 0 (zero) if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.UInt32" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Contract.RemoteArgument.UInt64Value">
      <summary>Gets or sets the <see cref="T:System.UInt64" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents. </summary>
      <returns>The <see cref="T:System.UInt64" /> that the <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents; 0 (zero) if the value of the <see cref="T:System.AddIn.Contract.RemoteArgument" /> has not yet been specified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property is not set to the <see cref="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic" /> value.-or-The <see cref="P:System.AddIn.Contract.RemoteArgument.TypeCode" /> property is not set to the <see cref="F:System.TypeCode.UInt64" /> value.-or-This property is set while the <see cref="P:System.AddIn.Contract.RemoteArgument.IsByRef" /> property is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.RemoteArgumentKind">
      <summary>Specifies the kind of argument that a <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.RemoteArgumentKind.Missing">
      <summary>The <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents the <see cref="F:System.Type.Missing" /> value. This is the default value for the <see cref="P:System.AddIn.Contract.RemoteArgument.RemoteArgumentKind" /> property.</summary>
    </member>
    <member name="F:System.AddIn.Contract.RemoteArgumentKind.Intrinsic">
      <summary>The <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents an intrinsic data type.</summary>
    </member>
    <member name="F:System.AddIn.Contract.RemoteArgumentKind.IntrinsicArray">
      <summary>The <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents an <see cref="T:System.Array" /> that contains elements of an intrinsic data type.</summary>
    </member>
    <member name="F:System.AddIn.Contract.RemoteArgumentKind.Contract">
      <summary>The <see cref="T:System.AddIn.Contract.RemoteArgument" /> represents an <see cref="T:System.AddIn.Contract.IContract" />.</summary>
    </member>
    <member name="T:System.AddIn.Contract.SerializableObjectData">
      <summary>Provides information about a serializable object. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.SerializableObjectData.DimensionLengths">
      <summary>Represents an array that contains the length of each of the dimensions of the serializable array that this <see cref="T:System.AddIn.Contract.SerializableObjectData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.SerializableObjectData.DimensionLowerBounds">
      <summary>Represents an array that contains the lower bound of each of the dimensions of the serializable array that this <see cref="T:System.AddIn.Contract.SerializableObjectData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.SerializableObjectData.ElementIndexes">
      <summary>Represents an array that contains the indexes of the parent array that contains the serializable object that this <see cref="T:System.AddIn.Contract.SerializableObjectData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.SerializableObjectData.IsArray">
      <summary>Indicates whether the <see cref="T:System.AddIn.Contract.SerializableObjectData" /> describes a serializable array.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.SerializableObjectData.IsArrayElement">
      <summary>Indicates whether the <see cref="T:System.AddIn.Contract.SerializableObjectData" /> describes an element in a serializable array.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.SerializableObjectData.MemberName">
      <summary>Represents the member name of the serializable object that this <see cref="T:System.AddIn.Contract.SerializableObjectData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.SerializableObjectData.ObjectId">
      <summary>Represents the ID of the serializable object that this <see cref="T:System.AddIn.Contract.SerializableObjectData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.SerializableObjectData.ParentId">
      <summary>Represents the ID of the parent of the serializable object that this <see cref="T:System.AddIn.Contract.SerializableObjectData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Automation.IRemoteDelegateContract">
      <summary>Defines a contract that components can use to access a delegate across application domain and process boundaries.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteDelegateContract.InvokeDelegate(System.AddIn.Contract.Collections.IRemoteArgumentArrayContract)">
      <summary>Invokes the delegate that this <see cref="T:System.AddIn.Contract.Automation.IRemoteDelegateContract" /> identifies.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that specifies the return value of the invoked delegate.</returns>
      <param name="args">An <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayContract" /> that specifies the delegate parameters.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract">
      <summary>Defines a contract that components can use to access information about an event across application domain and process boundaries.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteEventInfoContract.GetAddMethod">
      <summary>Returns the method that was used to add an event handler delegate to the event that this <see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /> identifies.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /> that represents the method that was used to add an event handler delegate to the event that this <see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /> identifies.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteEventInfoContract.GetMemberData">
      <summary>Returns information about the event that this <see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /> identifies.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.Automation.RemoteMemberData" /> that provides information about the event that this <see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /> identifies.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteEventInfoContract.GetRemoveMethod">
      <summary>Returns the method that was used to remove an event handler delegate from the event that this <see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /> identifies.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /> that represents the method that was used to remove an event handler delegate from the event that this <see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /> identifies.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Automation.IRemoteFieldInfoContract">
      <summary>Defines a contract that components can use to access information about a field across application domain and process boundaries.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteFieldInfoContract.GetFieldData">
      <summary>Returns information about the field that this <see cref="T:System.AddIn.Contract.Automation.IRemoteFieldInfoContract" /> identifies.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.Automation.RemoteFieldData" /> that provides information about the field that this <see cref="T:System.AddIn.Contract.Automation.IRemoteFieldInfoContract" /> identifies.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteFieldInfoContract.GetValue(System.AddIn.Contract.Automation.IRemoteObjectContract)">
      <summary>Returns the value of the field that this <see cref="T:System.AddIn.Contract.Automation.IRemoteFieldInfoContract" /> identifies.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that specifies the field value.</returns>
      <param name="obj">The <see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" /> that identifies the object that contains the field.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteFieldInfoContract.SetValue(System.AddIn.Contract.Automation.IRemoteObjectContract,System.AddIn.Contract.RemoteArgument,System.Int32)">
      <summary>Sets the value of the field that this <see cref="T:System.AddIn.Contract.Automation.IRemoteFieldInfoContract" /> represents.</summary>
      <param name="obj">The <see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" /> that identifies the object that contains the field.</param>
      <param name="value">A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that specifies the field value.</param>
      <param name="localeId">The locale ID that the field will use for any locale-specific type conversions.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract">
      <summary>Defines a contract that components can use to access information about a method across application domain and process boundaries.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteMethodInfoContract.GetMethodData">
      <summary>Returns information about the method that this <see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /> identifies.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.Automation.RemoteMethodData" /> that provides information about the method that this <see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /> identifies.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteMethodInfoContract.Invoke(System.AddIn.Contract.Automation.IRemoteObjectContract,System.Reflection.BindingFlags,System.AddIn.Contract.Collections.IRemoteArgumentArrayContract,System.Int32)">
      <summary>Invokes the method that this <see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /> identifies.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that specifies the return value of the invoked method.</returns>
      <param name="target">The <see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" /> that identifies the object that contains the method to invoke.</param>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to invoke the method.</param>
      <param name="parameters">An <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayContract" /> that specifies the method parameters; null if the method does not have any parameters.</param>
      <param name="localeId">The locale ID that the method will use for any locale-specific type conversions of the arguments or return value.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Automation.IRemoteObjectContract">
      <summary>Defines a contract that components can use to access an object across application domain and process boundaries.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType">
      <summary>Returns an <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> that specifies the type of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> that specifies the type of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteObjectContract.RemoteCast(System.String)">
      <summary>Casts the object identified by the current <see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" /> to a specified type. </summary>
      <returns>A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that represents the result of the cast operation.</returns>
      <param name="canonicalName">The canonical name of the type to cast the object to.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract">
      <summary>Defines a contract that components can use to access information about a property across application domain and process boundaries.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemotePropertyInfoContract.GetGetMethod">
      <summary>Returns the get accessor of the property that this <see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /> identifies.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /> that represents the get accessor of the property that this <see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /> identifies; null if the property does not have a get accessor.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemotePropertyInfoContract.GetPropertyData">
      <summary>Returns information about the property that this <see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /> identifies.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.Automation.RemotePropertyData" /> that provides information about the property that this <see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /> identifies.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemotePropertyInfoContract.GetSetMethod">
      <summary>Returns the set accessor of the property that this <see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /> identifies.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /> that represents the set accessor of the property that this <see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /> identifies; null if the property does not have a set accessor.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemotePropertyInfoContract.GetValue(System.AddIn.Contract.Automation.IRemoteObjectContract,System.Reflection.BindingFlags,System.AddIn.Contract.Collections.IRemoteArgumentArrayContract,System.Int32)">
      <summary>Returns the value of the property that this <see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /> identifies.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that specifies the property value.</returns>
      <param name="obj">The <see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" /> that identifies the object that contains the property.</param>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to invoke the property.</param>
      <param name="index">An <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayContract" />  that specifies the index values for an indexed property; null if the property is not indexed.</param>
      <param name="localeId">A locale ID to use for locale-specific conversions that are performed by the property.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemotePropertyInfoContract.SetValue(System.AddIn.Contract.Automation.IRemoteObjectContract,System.AddIn.Contract.RemoteArgument@,System.Reflection.BindingFlags,System.AddIn.Contract.Collections.IRemoteArgumentArrayContract,System.Int32)">
      <summary>Sets the value of the property that this <see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /> identifies.</summary>
      <param name="target">The <see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" /> that identifies the object that contains the property.</param>
      <param name="value">A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that specifies the property value.</param>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to invoke the property.</param>
      <param name="index">An <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayContract" /> that specifies the index values for an indexed property; null if the property is not indexed.</param>
      <param name="localeId">The locale ID that the property will use for any locale-specific type conversions.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Automation.IRemoteTypeContract">
      <summary>Defines a contract that components can use to access type information and invoke members across application domain and process boundaries.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetCanonicalName">
      <summary>Returns the canonical name of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</summary>
      <returns>The canonical name of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>Returns an <see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /> that provides access to a specified event of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /> that provides access to the specified event, if found; otherwise, null.</returns>
      <param name="name">The name of an event of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</param>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to search for the event.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetEvents(System.Reflection.BindingFlags)">
      <summary>Returns a collection of <see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /> objects that provides access to the specified events of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /> of <see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /> objects that provides access to the events that match the specified binding constraints; otherwise, an empty <see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" />.</returns>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to search for the events.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Returns an <see cref="T:System.AddIn.Contract.Automation.IRemoteFieldInfoContract" /> that provides access to a specified field of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Automation.IRemoteFieldInfoContract" /> that provides access to the specified field, if found; otherwise, null.</returns>
      <param name="name">The name of a field of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</param>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to search for the field.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetFields(System.Reflection.BindingFlags)">
      <summary>Returns a collection of <see cref="T:System.AddIn.Contract.Automation.IRemoteFieldInfoContract" /> objects that provides access to the specified fields of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /> of <see cref="T:System.AddIn.Contract.Automation.IRemoteFieldInfoContract" /> objects that provides access to the fields that match the specified binding constraints; otherwise, an empty <see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" />.</returns>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to search for the fields.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetInterface(System.String)">
      <summary>Returns an interface that is implemented by the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> that represents the interface with the specified canonical name that this <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> implements. null if this <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> does not implement an interface with the specified canonical name.</returns>
      <param name="canonicalName">The canonical name of an interface that is implemented by the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetInterfaces">
      <summary>Returns the interfaces that are implemented by the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /> of <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> objects that represent all the interfaces that are implemented by the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>Returns a collection of <see cref="T:System.AddIn.Contract.IContract" /> objects that provides access to all the specified members of the specified member type in the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />, using the specified binding constraints.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /> of <see cref="T:System.AddIn.Contract.IContract" /> objects that represent the members of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> that have the specified name and that meet the criteria specified by the <paramref name="memberTypes" /> and <paramref name="bindingFlags" /> parameters.</returns>
      <param name="name">The name of a member of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />. The name can represent multiple members that have the same name.</param>
      <param name="memberTypes">A bitwise combination of the <see cref="T:System.Reflection.MemberTypes" /> values that specifies the members to search for.</param>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to search for the members.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetMembers(System.Reflection.BindingFlags)">
      <summary>Returns a collection of <see cref="T:System.AddIn.Contract.IContract" /> objects that provides access to all the members in the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> that match the specified binding constraints.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /> of <see cref="T:System.AddIn.Contract.IContract" /> objects that provides access to the members of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> that meet the specified binding constraints.</returns>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to search for the members.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetMethod(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Collections.IArrayContract{System.AddIn.Contract.Automation.IRemoteTypeContract})">
      <summary>Returns an <see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /> that provides access to a specified method of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /> that provides access to the specified method, if found; otherwise, null.</returns>
      <param name="name">The name of a method of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</param>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to search for the method.</param>
      <param name="remoteTypes">An <see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /> of <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> objects that represent the number, order, and type of the parameters for the method to get.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetMethods(System.Reflection.BindingFlags)">
      <summary>Returns a collection of <see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /> objects that provides access to the specified methods of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /> of <see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /> objects that provides access to the methods that match the specified binding constraints.</returns>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to search for the methods.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetProperties(System.Reflection.BindingFlags)">
      <summary>Returns a collection of <see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /> objects that provides access to the specified properties of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /> of <see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /> objects that provides access to the properties that match the specified binding constraints.</returns>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to search for the properties.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetProperty(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Automation.IRemoteTypeContract,System.AddIn.Contract.Collections.IArrayContract{System.AddIn.Contract.Automation.IRemoteTypeContract})">
      <summary>Returns an <see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /> that provides access to a specified property of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /> that provides access to the specified property, if found; otherwise, null.</returns>
      <param name="name">The name of a property of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</param>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to search for the method.</param>
      <param name="remoteReturnType">An <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> that specifies the return type of the property.</param>
      <param name="remoteTypes">An <see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /> of <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> objects that represent the parameters for the specified property.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetTypeData">
      <summary>Returns type information about the object that the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> identifies.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.Automation.RemoteTypeData" /> that contains information about the object that the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> identifies.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Automation.IRemoteTypeContract.InvokeMember(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Automation.IRemoteObjectContract,System.AddIn.Contract.Collections.IRemoteArgumentArrayContract,System.Boolean[],System.Int32)">
      <summary>Invokes the specified member of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that represents the return value of the invoked member.</returns>
      <param name="name">The name of the member to invoke.</param>
      <param name="bindingFlags">A bitwise combination of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies how to search for the member.</param>
      <param name="target">The <see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" /> on which to invoke the specified member.</param>
      <param name="remoteArgs">An <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayContract" /> that contains the arguments to pass to the member to invoke.</param>
      <param name="remoteArgModifiers">An array of Boolean values that indicate whether each of the <paramref name="remoteArgs" /> values is passed by reference. </param>
      <param name="localeId">A locale ID to use for locale-specific conversions that might be performed by the member being invoked.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Automation.RemoteFieldData">
      <summary>Provides information about a field of a type that components can access across application domain and process boundaries.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteFieldData.Attributes">
      <summary>Represents the attributes of the field that this <see cref="T:System.AddIn.Contract.Automation.RemoteFieldData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteFieldData.FieldType">
      <summary>Represents the type of the value of the field that this <see cref="T:System.AddIn.Contract.Automation.RemoteFieldData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteFieldData.MemberData">
      <summary>Represents member data for the field that this <see cref="T:System.AddIn.Contract.Automation.RemoteFieldData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Automation.RemoteMemberData">
      <summary>Provides information about a member of a type that components can access across application domain and process boundaries.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteMemberData.DeclaringType">
      <summary>Represents the type that declares the member that this <see cref="T:System.AddIn.Contract.Automation.RemoteMemberData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteMemberData.Name">
      <summary>Represents the name of the member that this <see cref="T:System.AddIn.Contract.Automation.RemoteMemberData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Automation.RemoteMethodData">
      <summary>Provides information about a method of a type that components can access across application domain and process boundaries.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteMethodData.Attributes">
      <summary>Represents the attributes of the method that this <see cref="T:System.AddIn.Contract.Automation.RemoteMethodData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteMethodData.MemberData">
      <summary>Represents member data for the method that this <see cref="T:System.AddIn.Contract.Automation.RemoteMethodData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteMethodData.Parameters">
      <summary>Represents information about the parameters of the method that this <see cref="T:System.AddIn.Contract.Automation.RemoteMethodData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteMethodData.ReturnParameter">
      <summary>Represents information about the return value of the method that this <see cref="T:System.AddIn.Contract.Automation.RemoteMethodData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Automation.RemoteParameterData">
      <summary>Provides information about a parameter or return value of a method that belongs to a type that components can access across application domain and process boundaries.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteParameterData.Attributes">
      <summary>Represents the attributes of the method parameter that this <see cref="T:System.AddIn.Contract.Automation.RemoteParameterData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteParameterData.DefaultValue">
      <summary>Represents the default value of the method parameter that this <see cref="T:System.AddIn.Contract.Automation.RemoteParameterData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteParameterData.IsByRef">
      <summary>Indicates whether this <see cref="T:System.AddIn.Contract.Automation.RemoteParameterData" /> describes a method parameter that is passed by reference.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteParameterData.IsParameterArray">
      <summary>Indicates whether this <see cref="T:System.AddIn.Contract.Automation.RemoteParameterData" /> describes a method parameter that can have a variable number of arguments.</summary>
      <returns>true if the data is a parameter array; otherwise, false. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteParameterData.Name">
      <summary>Represents the name of the method parameter that this <see cref="T:System.AddIn.Contract.Automation.RemoteParameterData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteParameterData.ParameterType">
      <summary>Represents the type of the method parameter or return value that this <see cref="T:System.AddIn.Contract.Automation.RemoteParameterData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteParameterData.Position">
      <summary>Represents the position of the method parameter that this <see cref="T:System.AddIn.Contract.Automation.RemoteParameterData" /> describes in relation to the other parameters of the method.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Automation.RemotePropertyData">
      <summary>Provides information about a property of a type that components can access across application domain and process boundaries.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemotePropertyData.Attributes">
      <summary>Represents the attributes of the property that this <see cref="T:System.AddIn.Contract.Automation.RemotePropertyData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemotePropertyData.CanRead">
      <summary>Indicates whether this <see cref="T:System.AddIn.Contract.Automation.RemotePropertyData" /> describes a readable property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemotePropertyData.CanWrite">
      <summary>Indicates whether this <see cref="T:System.AddIn.Contract.Automation.RemotePropertyData" /> describes a writable property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemotePropertyData.IndexParameters">
      <summary>Represents the index parameters for the property that this <see cref="T:System.AddIn.Contract.Automation.RemotePropertyData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemotePropertyData.MemberData">
      <summary>Represents member data for the property that this <see cref="T:System.AddIn.Contract.Automation.RemotePropertyData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemotePropertyData.PropertyType">
      <summary>Represents the type of the property that this <see cref="T:System.AddIn.Contract.Automation.RemotePropertyData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Automation.RemoteTypeData">
      <summary>Provides information about a type that components can access across application domain and process boundaries. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteTypeData.ArrayRank">
      <summary>Indicates the rank (that is, the number of dimensions) of the remote array type that this <see cref="T:System.AddIn.Contract.Automation.RemoteTypeData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteTypeData.AssemblyName">
      <summary>Represents the full name of the assembly that contains the remote type that this <see cref="T:System.AddIn.Contract.Automation.RemoteTypeData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteTypeData.AssemblyQualifiedName">
      <summary>Represents the name of the remote type that this <see cref="T:System.AddIn.Contract.Automation.RemoteTypeData" /> describes, qualified by the name of the assembly that contains the type.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteTypeData.Attributes">
      <summary>Represents the attributes of the remote type that this <see cref="T:System.AddIn.Contract.Automation.RemoteTypeData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteTypeData.BaseType">
      <summary>Represents the base type of the remote type that this <see cref="T:System.AddIn.Contract.Automation.RemoteTypeData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteTypeData.ElementType">
      <summary>Represents the type of the elements in the remote array type that this <see cref="T:System.AddIn.Contract.Automation.RemoteTypeData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteTypeData.FullName">
      <summary>Represents the name of the remote type that this <see cref="T:System.AddIn.Contract.Automation.RemoteTypeData" /> describes, qualified by the namespace.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteTypeData.IsArray">
      <summary>Indicates whether this <see cref="T:System.AddIn.Contract.Automation.RemoteTypeData" /> describes an array type.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteTypeData.IsByRef">
      <summary>Indicates whether this <see cref="T:System.AddIn.Contract.Automation.RemoteTypeData" /> describes a type that is passed by reference.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteTypeData.MemberData">
      <summary>Represents member data for the remote type that this <see cref="T:System.AddIn.Contract.Automation.RemoteTypeData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Automation.RemoteTypeData.TypeCode">
      <summary>Represents the type of the remote type that this <see cref="T:System.AddIn.Contract.Automation.RemoteTypeData" /> describes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Collections.IArrayContract`1">
      <summary>Represents a generic array of <see cref="T:System.AddIn.Contract.IContract" /> objects.</summary>
      <typeparam name="C">The type of elements in the array. <paramref name="C" /> must implement the <see cref="T:System.AddIn.Contract.IContract" /> interface.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IArrayContract`1.GetCount">
      <summary>Returns the number of elements contained in the <see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IArrayContract`1.GetItem(System.Int32)">
      <summary>Returns the element at the specified index. </summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to return. </param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.Collections.IArrayContract`1.GetCount" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IArrayContract`1.SetItem(System.Int32,`0)">
      <summary>Replaces the element at the specified index with the specified <see cref="T:System.AddIn.Contract.IContract" />.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="value">The new value for the element at the specified index. </param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.Collections.IArrayContract`1.GetCount" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Collections.ICollectionContract`1">
      <summary>Represents a generic collection of <see cref="T:System.AddIn.Contract.IContract" /> objects.</summary>
      <typeparam name="C">The type of elements in the collection. <paramref name="C" /> must implement the <see cref="T:System.AddIn.Contract.IContract" /> interface.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.ICollectionContract`1.Add(`0)">
      <summary>Adds an <see cref="T:System.AddIn.Contract.IContract" /> to the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" />.</summary>
      <param name="item">The <see cref="T:System.AddIn.Contract.IContract" /> to add to the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" /> is read-only.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.ICollectionContract`1.Clear">
      <summary>Removes all elements from the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" />.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" /> is read-only.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.ICollectionContract`1.Contains(`0)">
      <summary>Returns a value that indicates whether the specified <see cref="T:System.AddIn.Contract.IContract" /> is in the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" />.</summary>
      <returns>true if the specified <see cref="T:System.AddIn.Contract.IContract" /> is in the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" />; otherwise, false.</returns>
      <param name="item">The <see cref="T:System.AddIn.Contract.IContract" /> to locate in the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.ICollectionContract`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the entire <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" /> to a compatible one-dimensional array, starting at the specified index of the target array. </summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" />. </param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-The number of elements in the source <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination array.-or-Type <paramref name="C" /> cannot be cast automatically to the type of the destination array.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.ICollectionContract`1.GetCount">
      <summary>Returns the number of elements contained in the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.ICollectionContract`1.GetIsReadOnly">
      <summary>Returns a value that indicates whether the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" /> is read-only; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.ICollectionContract`1.Remove(`0)">
      <summary>Removes the first occurrence of a specific <see cref="T:System.AddIn.Contract.IContract" /> from the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" />.</summary>
      <returns>true if <paramref name="item" /> is successfully removed; otherwise, false. This method also returns false if <paramref name="item" /> was not found in the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" />.</returns>
      <param name="item">The <see cref="T:System.AddIn.Contract.IContract" /> to remove from the <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" /> is read-only.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Collections.IEnumerableContract`1">
      <summary>Exposes an enumerator that supports a simple iteration over a generic collection of <see cref="T:System.AddIn.Contract.IContract" /> objects.</summary>
      <typeparam name="C">The type of objects to enumerate. <paramref name="C" /> must implement the <see cref="T:System.AddIn.Contract.IContract" /> interface.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IEnumerableContract`1.GetEnumeratorContract">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Collections.IEnumeratorContract`1" /> that can be used to iterate through the collection.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Collections.IEnumeratorContract`1">
      <summary>Enumerates the elements of a generic collection of <see cref="T:System.AddIn.Contract.IContract" /> objects.</summary>
      <typeparam name="C">The type of objects to enumerate. <paramref name="C" /> must implement the <see cref="T:System.AddIn.Contract.IContract" /> interface.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IEnumeratorContract`1.GetCurrent">
      <summary>Returns the <see cref="T:System.AddIn.Contract.IContract" /> in the collection at the current position of the enumerator.</summary>
      <returns>The <see cref="T:System.AddIn.Contract.IContract" /> in the collection at the current position of the enumerator.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IEnumeratorContract`1.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IEnumeratorContract`1.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Collections.IListContract`1">
      <summary>Represents a generic collection of <see cref="T:System.AddIn.Contract.IContract" /> objects that can be individually accessed by index.</summary>
      <typeparam name="C">The type of objects in the list. <paramref name="C" /> must implement the <see cref="T:System.AddIn.Contract.IContract" /> interface.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IListContract`1.GetItem(System.Int32)">
      <summary>Returns the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.Collections.ICollectionContract`1.GetCount" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IListContract`1.IndexOf(`0)">
      <summary>Returns the index of a specific element in the <see cref="T:System.AddIn.Contract.Collections.IListContract`1" />.</summary>
      <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
      <param name="item">The <see cref="T:System.AddIn.Contract.IContract" /> to locate in the <see cref="T:System.AddIn.Contract.Collections.IListContract`1" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IListContract`1.Insert(System.Int32,`0)">
      <summary>Inserts an element in the <see cref="T:System.AddIn.Contract.Collections.IListContract`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which to insert <paramref name="item" />.</param>
      <param name="item">The <see cref="T:System.AddIn.Contract.IContract" /> to insert in the <see cref="T:System.AddIn.Contract.Collections.IListContract`1" />.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.Collections.ICollectionContract`1.GetCount" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.AddIn.Contract.Collections.IListContract`1" /> is read-only.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IListContract`1.RemoveAt(System.Int32)">
      <summary>Removes the element at the specified index.</summary>
      <param name="index">The index of the element to remove.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.Collections.ICollectionContract`1.GetCount" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.AddIn.Contract.Collections.IListContract`1" /> is read-only.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IListContract`1.SetItem(System.Int32,`0)">
      <summary>Replaces the element at the specified index.</summary>
      <param name="index">The zero-based index at which to set the element.</param>
      <param name="value">The element to set at the specified index.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.Collections.ICollectionContract`1.GetCount" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.AddIn.Contract.Collections.IListContract`1" /> is read-only.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayContract">
      <summary>Represents an array of <see cref="T:System.AddIn.Contract.RemoteArgument" /> objects.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentArrayContract.GetItem(System.Int32)">
      <summary>Returns the element at the specified index. </summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to return.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.Collections.IRemoteArgumentCollectionContract.GetCount" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentArrayContract.SetItem(System.Int32,System.AddIn.Contract.RemoteArgument)">
      <summary>Replaces the element at the specified index with the specified <see cref="T:System.AddIn.Contract.RemoteArgument" />.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="value">The new value for the element at the specified index.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.Collections.IRemoteArgumentCollectionContract.GetCount" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract">
      <summary>Represents an array of <see cref="T:System.AddIn.Contract.RemoteArgument" /> objects that dynamically resizes itself as required.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract.Add(System.AddIn.Contract.RemoteArgument)">
      <summary>Adds a <see cref="T:System.AddIn.Contract.RemoteArgument" /> to the end of the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract" />.</summary>
      <param name="newItem">The <see cref="T:System.AddIn.Contract.RemoteArgument" /> to be added to the end of the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract.Clear">
      <summary>Removes all elements from the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract.Contains(System.AddIn.Contract.RemoteArgument)">
      <summary>Indicates whether a specified <see cref="T:System.AddIn.Contract.RemoteArgument" /> is in the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract" />.</summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract" />; otherwise, false.</returns>
      <param name="item">The <see cref="T:System.AddIn.Contract.RemoteArgument" /> to locate in the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract.IndexOf(System.AddIn.Contract.RemoteArgument)">
      <summary>Returns the zero-based index of the first occurrence of a specified <see cref="T:System.AddIn.Contract.RemoteArgument" /> in the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract" />.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="item" /> in the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract" />, if found; otherwise, -1.</returns>
      <param name="item">The <see cref="T:System.AddIn.Contract.RemoteArgument" /> to locate in the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract.Insert(System.Int32,System.AddIn.Contract.RemoteArgument)">
      <summary>Inserts a <see cref="T:System.AddIn.Contract.RemoteArgument" /> into the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract" /> at the specified index.</summary>
      <param name="index">The zero-based index at which to insert <paramref name="item" />.</param>
      <param name="item">The <see cref="T:System.AddIn.Contract.RemoteArgument" /> to insert.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.Collections.IRemoteArgumentCollectionContract.GetCount" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract.Remove(System.AddIn.Contract.RemoteArgument)">
      <summary>Removes the first occurrence of a specified <see cref="T:System.AddIn.Contract.RemoteArgument" /> from the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract" />. </summary>
      <param name="item">The <see cref="T:System.AddIn.Contract.RemoteArgument" /> to remove.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract.RemoveAt(System.Int32)">
      <summary>Removes the element at the specified index of the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract" />.</summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.Collections.IRemoteArgumentCollectionContract.GetCount" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Collections.IRemoteArgumentCollectionContract">
      <summary>Represents a collection of <see cref="T:System.AddIn.Contract.RemoteArgument" /> objects.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentCollectionContract.GetCount">
      <summary>Returns the number of elements contained in the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentCollectionContract" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentCollectionContract" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract">
      <summary>Represents a collection of <see cref="T:System.AddIn.Contract.RemoteArgument" /> objects that are stored as key/value pairs.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract.Add(System.AddIn.Contract.RemoteArgument,System.AddIn.Contract.RemoteArgument)">
      <summary>Adds an element with a specified key and value to the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" />.</summary>
      <param name="key">The <see cref="T:System.AddIn.Contract.RemoteArgument" /> to use as the key of the element to add.</param>
      <param name="value">The <see cref="T:System.AddIn.Contract.RemoteArgument" /> to use as the value of the element to add.</param>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract.Clear">
      <summary>Removes all elements from the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract.ContainsKey(System.AddIn.Contract.RemoteArgument)">
      <summary>Indicates whether the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> contains an element with the specified key.</summary>
      <returns>true if the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> contains an element with the specified key; otherwise, false.</returns>
      <param name="key">The key to locate in the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract.GetEnumeratorContract">
      <summary>Returns an <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryEnumeratorContract" /> that can be used to iterate through the elements in the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryEnumeratorContract" /> that can be used to iterate through the elements in the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract.GetItem(System.AddIn.Contract.RemoteArgument)">
      <summary>Returns the value of the element with the specified key.</summary>
      <returns>The <see cref="T:System.AddIn.Contract.RemoteArgument" /> with the specified key.</returns>
      <param name="key">The key of the value to return.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract.GetKeys">
      <summary>Returns an <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentCollectionContract" /> that contains the keys of the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> object. </summary>
      <returns>An <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentCollectionContract" /> that contains the keys of the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract.GetValues">
      <summary>Returns an <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentCollectionContract" /> that contains the values of the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> object. </summary>
      <returns>An <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentCollectionContract" /> that contains the values of the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> object. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract.Remove(System.AddIn.Contract.RemoteArgument)">
      <summary>Removes the element with the specified key from the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" />.</summary>
      <returns>true if the element is successfully found and removed; otherwise, false. This method returns false if <paramref name="key" /> is not found in the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" />.</returns>
      <param name="key">The key of the element to remove. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract.SetItem(System.AddIn.Contract.RemoteArgument,System.AddIn.Contract.RemoteArgument)">
      <summary>Replaces the value of an element.</summary>
      <param name="key">The key of the value to replace.</param>
      <param name="value">The new value of the specified element.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryEnumeratorContract">
      <summary>Enumerates the elements of an <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryEnumeratorContract.GetEntry">
      <summary>Returns the key and the value of the current <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> entry.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.Collections.RemoteArgumentDictionaryEntry" /> that contains the key and the value of the current <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> entry.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryEnumeratorContract" /> is positioned before the first entry of the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> or after the last entry. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryEnumeratorContract.GetKey">
      <summary>Returns the key of the current <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> entry.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that contains the key of the current <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> entry.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryEnumeratorContract" /> is positioned before the first entry of the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> or after the last entry. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryEnumeratorContract.GetValue">
      <summary>Returns the value of the current <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> entry.</summary>
      <returns>A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that contains the value of the current <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> entry.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryEnumeratorContract" /> is positioned before the first entry of the <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" /> or after the last entry. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Collections.IRemoteArgumentEnumerableContract">
      <summary>Exposes an enumerator that supports a simple iteration over a collection of <see cref="T:System.AddIn.Contract.RemoteArgument" /> objects.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentEnumerableContract.GetEnumeratorContract">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentEnumeratorContract" /> that can be used to iterate through the collection.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Collections.IRemoteArgumentEnumeratorContract">
      <summary>Enumerates the elements of a collection of <see cref="T:System.AddIn.Contract.RemoteArgument" /> objects.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentEnumeratorContract.GetCurrent">
      <summary>Returns the <see cref="T:System.AddIn.Contract.RemoteArgument" /> in the collection at the current position of the enumerator.</summary>
      <returns>The <see cref="T:System.AddIn.Contract.RemoteArgument" /> in the collection at the current position of the enumerator.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentEnumeratorContract.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.IRemoteArgumentEnumeratorContract.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Contract.Collections.RemoteArgumentDictionaryEntry">
      <summary>Defines a key/value pair in an <see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Contract.Collections.RemoteArgumentDictionaryEntry.#ctor(System.AddIn.Contract.RemoteArgument,System.AddIn.Contract.RemoteArgument)">
      <summary>Initializes an instance of the <see cref="T:System.AddIn.Contract.Collections.RemoteArgumentDictionaryEntry" /> structure with the specified key and value.</summary>
      <param name="key">The <see cref="T:System.AddIn.Contract.RemoteArgument" /> that contains the key in the new <see cref="T:System.AddIn.Contract.Collections.RemoteArgumentDictionaryEntry" />.</param>
      <param name="value">The <see cref="T:System.AddIn.Contract.RemoteArgument" /> that contains the value in the new <see cref="T:System.AddIn.Contract.Collections.RemoteArgumentDictionaryEntry" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Collections.RemoteArgumentDictionaryEntry.Key">
      <summary>Represents the key in the key/value pair that this <see cref="T:System.AddIn.Contract.Collections.RemoteArgumentDictionaryEntry" /> represents.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AddIn.Contract.Collections.RemoteArgumentDictionaryEntry.Value">
      <summary>Represents the value in the key/value pair that this <see cref="T:System.AddIn.Contract.Collections.RemoteArgumentDictionaryEntry" /> represents.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Pipeline.AddInContractAttribute">
      <summary>Identifies an object as a add-in contract segment of the pipeline.</summary>
    </member>
    <member name="M:System.AddIn.Pipeline.AddInContractAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Pipeline.AddInContractAttribute" /> class. </summary>
    </member>
    <member name="T:System.AddIn.Pipeline.QualificationDataAttribute">
      <summary>Provides developer-specified data for a pipeline segment.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Pipeline.QualificationDataAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Pipeline.QualificationDataAttribute" /> class. </summary>
      <param name="name">Any identifier that serves as a key in a key/value pair.</param>
      <param name="value">Any value.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Pipeline.QualificationDataAttribute.Name">
      <summary>Gets the name, which serves as a key, of a key/value pair.</summary>
      <returns>The assigned name for the attribute.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Pipeline.QualificationDataAttribute.Value">
      <summary>Gets the value of a key/value pair.</summary>
      <returns>The assigned value for the attribute.</returns>
      <filterpriority>2</filterpriority>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.Compensation.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Compensation</name>
  </assembly>
  <members>
    <member name="T:System.Compensation.CompensationCoordinatorServiceHost"></member>
    <member name="M:System.Compensation.CompensationCoordinatorServiceHost.#ctor(System.Uri)"></member>
    <member name="P:System.Compensation.CompensationCoordinatorServiceHost.CoordinatorActivationServiceEndpoint"></member>
    <member name="P:System.Compensation.CompensationCoordinatorServiceHost.CoordinatorCompletionServiceEndpoint"></member>
    <member name="T:System.Compensation.DistributedCompensationApplicationCompletionEndpoint"></member>
    <member name="M:System.Compensation.DistributedCompensationApplicationCompletionEndpoint.#ctor"></member>
    <member name="M:System.Compensation.DistributedCompensationApplicationCompletionEndpoint.#ctor(System.Uri)"></member>
    <member name="P:System.Compensation.DistributedCompensationApplicationCompletionEndpoint.CoordinatorCompletionListenUri"></member>
    <member name="T:System.Compensation.DistributedCompensationApplicationParticipationEndpoint"></member>
    <member name="M:System.Compensation.DistributedCompensationApplicationParticipationEndpoint.#ctor"></member>
    <member name="M:System.Compensation.DistributedCompensationApplicationParticipationEndpoint.#ctor(System.Uri)"></member>
    <member name="P:System.Compensation.DistributedCompensationApplicationParticipationEndpoint.CoordinatorActivationListenUri"></member>
    <member name="T:System.ServiceModel.Channels.CompensationFlowBindingElement">
      <summary>Manages a compensation flow binding element for a configuration file.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CompensationFlowBindingElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Channels.CompensationFlowBindingElement" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CompensationFlowBindingElement.#ctor(System.ServiceModel.Channels.CompensationFlowBindingElement)">
      <summary>Creates a new instanceof the <see cref="T:System.ServiceModel.Channels.CompensationFlowBindingElement" /> class initialized with a compensation flow binding element that is copied for use in setting up a flow channel.</summary>
      <param name="elementToBeCloned">The specified binding element that is copied.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CompensationFlowBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Creates a new client channel factory of a specified type.</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />.</returns>
      <param name="context">An object that provides custom binding, parameter, URI address, and URI mode information for the construction of a channel.</param>
      <typeparam name="TChannel">The specified type of channel to be built (for example, input, output, request, reply, duplex, and other types of channels.)</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.CompensationFlowBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Creates a new service channel listener of a specified type.</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.IChannelListener`1" />.</returns>
      <param name="context">An object that provides custom binding, parameter, URI address, and URI mode information for the construction of a channel.</param>
      <typeparam name="TChannel">The specified type of channel to be built (for example, input, output, request, reply, duplex, and other types of channels).</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.CompensationFlowBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Returns a value that indicates whether the channel binding context contains the information required to build the specified type of channel factory. </summary>
      <returns>
        <see cref="T:System.Boolean" />.</returns>
      <param name="context">An object that provides custom binding, parameter, URI address, and URI mode information for the construction of a channel.</param>
      <typeparam name="TChannel">The specified type of channel to be built (for example, input, output, request, reply, duplex, and other types of channels).</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.CompensationFlowBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Returns a value that indicates whether the channel binding context contains the information required to build the specified type of channel listener.</summary>
      <returns>
        <see cref="T:System.Boolean" />.</returns>
      <param name="context">An object that provides custom binding, parameter, URI address, and URI mode information for the construction of a channel.</param>
      <typeparam name="TChannel">The specified type of channel to be built (for example, input, output, request, reply, duplex, and other types of channels).</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.CompensationFlowBindingElement.Clone">
      <summary>Creates a copy of the current compensation flow binding element.</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.BindingElement" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CompensationFlowBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Returns a generic type property from the specified binding context.</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.BindingElement" />.</returns>
      <param name="context">An object that provides custom binding, parameter, URI address, and URI mode information for the construction of a channel.</param>
      <typeparam name="T">The generic type.</typeparam>
    </member>
    <member name="T:System.ServiceModel.Channels.CompensationFlowValidationBehavior">
      <summary>Verifies that the operation description provides data for compensation flow and an indication that compensation flow is expected.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CompensationFlowValidationBehavior.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Channels.CompensationFlowValidationBehavior" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CompensationFlowValidationBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Not implemented.</summary>
      <param name="endpoint">Not implemented.</param>
      <param name="bindingParameters">Not implemented.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CompensationFlowValidationBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>Not implemented.</summary>
      <param name="endpoint">Not implemented.</param>
      <param name="clientRuntime">Not implemented.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CompensationFlowValidationBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
      <summary>Not implemented.</summary>
      <param name="endpoint">Not implemented.</param>
      <param name="endpointDispatcher">Not implemented.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CompensationFlowValidationBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>Verifies that an operation description includes a compensation flow binding element and also a flow option setting that indicates compensation is required.</summary>
      <param name="endpoint">An object that provides information that enables clients of a service to find and communicate with that service.</param>
    </member>
    <member name="T:System.WorkflowModel.Activities.GetFlowedCompensationContext">
      <summary>A helper activity used within the context of <see cref="T:System.WorkflowServiceModel.Activities.ServiceOperation" /> to retrieve the flowed compensation context from the message properties to a variable.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.GetFlowedCompensationContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.GetFlowedCompensationContext" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.GetFlowedCompensationContext.CompensationContext">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.OutArgument`1" /> that contains the <see cref="T:System.WorkflowModel.Activities.CompensationContext" /> for this <see cref="T:System.WorkflowModel.Activities.GetFlowedCompensationContext" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.OutArgument`1" /> that contains the <see cref="T:System.WorkflowModel.Activities.CompensationContext" /> for this <see cref="T:System.WorkflowModel.Activities.GetFlowedCompensationContext" />.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.AddIn.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.AddIn</name>
  </assembly>
  <members>
    <member name="T:System.AddIn.AddInAttribute">
      <summary>Identifies an object as an add-in.</summary>
    </member>
    <member name="M:System.AddIn.AddInAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.AddInAttribute" /> class. </summary>
      <param name="name">The name of the add-in.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="P:System.AddIn.AddInAttribute.Description">
      <summary>Gets or sets the description of an add-in.</summary>
      <returns>The current description of the add-in.</returns>
    </member>
    <member name="P:System.AddIn.AddInAttribute.Name">
      <summary>Gets the name of the add-In.</summary>
      <returns>The name of the add-in.</returns>
    </member>
    <member name="P:System.AddIn.AddInAttribute.Publisher">
      <summary>Gets or sets the publisher of the add-in.</summary>
      <returns>The publisher of the add-in.</returns>
    </member>
    <member name="P:System.AddIn.AddInAttribute.Version">
      <summary>Gets or sets the software version of the add-in.</summary>
      <returns>The software version of the add-in.</returns>
    </member>
    <member name="T:System.AddIn.Hosting.AddInController">
      <summary>Provides access to an add-in for a variety of tasks.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Hosting.AddInController.AddInEnvironment">
      <summary>Gets an <see cref="T:System.AddIn.Hosting.AddInEnvironment" /> object.</summary>
      <returns>An object that can be used to activate other add-ins in the same environment as the original add-in.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Hosting.AddInController.AppDomain">
      <summary>Gets the application domain that contains an add-in. </summary>
      <returns>The application domain of the add-in.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.AddInController.GetAddInController(System.Object)">
      <summary>Obtains the controller for an add-in.</summary>
      <returns>The controller for the add-in.</returns>
      <param name="addIn">The host view of the add-in.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.AddInController.Shutdown">
      <summary>Disables an add-in.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Hosting.AddInController.Token">
      <summary>Gets the token that represents the add-in.</summary>
      <returns>An object that represents the add-in.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Hosting.AddInEnvironment">
      <summary>Provides access to the application domain and process of an add-in.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.AddInEnvironment.#ctor(System.AppDomain)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Hosting.AddInEnvironment" /> class. </summary>
      <param name="appDomain">The application domain that contains the add-in.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="appDomain" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">Full-trust permission is demanded. A caller in the call chain does not have sufficient permission.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Hosting.AddInEnvironment.Process">
      <summary>Gets the <see cref="T:System.AddIn.Hosting.AddInProcess" /> object that represents the process in which the add-in is running.</summary>
      <returns>The process in which the add-in is running.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Hosting.AddInProcess">
      <summary>Provides an external process for running add-ins out-of-process from the host application.</summary>
    </member>
    <member name="M:System.AddIn.Hosting.AddInProcess.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Hosting.AddInProcess" /> class. </summary>
    </member>
    <member name="M:System.AddIn.Hosting.AddInProcess.#ctor(System.AddIn.Hosting.Platform)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Hosting.AddInProcess" /> class, specifying the bits-per-word of the process in which the add-in runs.</summary>
      <param name="platform">A value that specifies the bits-per-word of the process that runs the add-in.</param>
      <exception cref="T:System.InvalidOperationException">The registry entry for the path to the executable (AddInProcess.exe or AddInProcess32.exe) is missing.-or-The executable is missing.</exception>
    </member>
    <member name="P:System.AddIn.Hosting.AddInProcess.IsCurrentProcess">
      <summary>Gets a value that indicates whether the current <see cref="T:System.AddIn.Hosting.AddInProcess" /> object represents the host application process.</summary>
      <returns>true if the <see cref="T:System.AddIn.Hosting.AddInProcess" /> object corresponds to the current process; otherwise, false. </returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInProcess.KeepAlive">
      <summary>Gets or sets a value that indicates whether to keep the external process alive.</summary>
      <returns>true if the external process should be kept alive; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInProcess.Platform">
      <summary>Gets the bits-per-word of the process in which the out-of-process add-in is run.</summary>
      <returns>The bits-per-word of the process that runs the add-in.</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInProcess.ProcessId">
      <summary>Gets the process ID of the external process.</summary>
      <returns>The process ID, or -1 if the external process has not started.</returns>
    </member>
    <member name="M:System.AddIn.Hosting.AddInProcess.Shutdown">
      <summary>Forcibly shuts down the external process.</summary>
      <returns>true if the external process was running and is successfully shut down; false if there is no active process associated with the <see cref="T:System.AddIn.Hosting.AddInProcess" />.</returns>
      <exception cref="T:System.InvalidOperationException">The add-in is running in-process with the host application. Starting and stopping the process is allowed only for external processes, not for the host process.</exception>
    </member>
    <member name="E:System.AddIn.Hosting.AddInProcess.ShuttingDown">
      <summary>Occurs when the process represented by the <see cref="T:System.AddIn.Hosting.AddInProcess" /> object is about to be shut down.</summary>
    </member>
    <member name="M:System.AddIn.Hosting.AddInProcess.Start">
      <summary>Starts the external process.</summary>
      <returns>true if the process is successfully started; false if the process is already running.</returns>
      <exception cref="T:System.InvalidOperationException">The add-in is running in-process with the host application. Starting and stopping the process is allowed only for external processes, not for the host process.</exception>
    </member>
    <member name="P:System.AddIn.Hosting.AddInProcess.StartupTimeout">
      <summary>Gets or sets the number of seconds to allow for the process to start.</summary>
      <returns>The number of seconds to allow for process startup.</returns>
      <exception cref="T:System.InvalidOperationException">The process is already running.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The assigned value is less than 0 (zero).</exception>
    </member>
    <member name="T:System.AddIn.Hosting.AddInSecurityLevel">
      <summary>Specifies the trust level that is granted to the application domain that an add-in is loaded into. </summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSecurityLevel.Internet">
      <summary>Use the Internet security level for add-ins that have a low trust level.</summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSecurityLevel.Intranet">
      <summary>Use the Intranet security level for add-ins that are located on a company's intranet. These add-ins can have a greater trust level because the servers and information are within a company's firewall. </summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSecurityLevel.FullTrust">
      <summary>Use the full trust security level for add-ins that are allowed to read and write to the local file system, create network connections, and read from the registry. This security level grants full access to the add-in's code access security (CAS) by applying the <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> field. </summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSecurityLevel.Host">
      <summary>Use the host security level to give the add-in the same permissions currently granted to the hosting code.</summary>
    </member>
    <member name="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException">
      <summary>The exception that is thrown when a segment directory is missing from the pipeline directory structure.</summary>
    </member>
    <member name="M:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException" /> class.</summary>
    </member>
    <member name="M:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException" /> class with serialization data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination object data. </param>
    </member>
    <member name="M:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException" /> class with a specified message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.AddIn.Hosting.AddInSegmentType">
      <summary>Specifies the type of a pipeline segment.</summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSegmentType.HostViewOfAddIn">
      <summary>Specifies the host view of the add-in segment.</summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSegmentType.HostSideAdapter">
      <summary>Specifies a host-side adapter segment.</summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSegmentType.Contract">
      <summary>Specifies a contract segment.</summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSegmentType.AddInSideAdapter">
      <summary>Specifies an add-in-side adapter segment.</summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSegmentType.AddInView">
      <summary>Specifies an add-in view segment.</summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSegmentType.AddIn">
      <summary>Specifies an add-in segment.</summary>
    </member>
    <member name="T:System.AddIn.Hosting.AddInStore">
      <summary>Provides methods to store and find information about available add-ins and pipeline segments.</summary>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.FindAddIn(System.Type,System.String,System.String,System.String)">
      <summary>Finds a specific add-in.</summary>
      <returns>A collection of tokens that contains only the token representing the add-in that was found.</returns>
      <param name="hostViewOfAddIn">The type that defines the host's view of the add-in. </param>
      <param name="pipelineRootFolderPath">The path to the root of the pipeline directory structure.</param>
      <param name="addInFilePath">The path and file name of the add-in to find.</param>
      <param name="addInTypeName">The name of the add-in as specified by the <see cref="T:System.AddIn.AddInAttribute" /> attribute.</param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="pipelineRootFolderPath" /> or <paramref name="addInFilePath" /> or <paramref name="addInTypeName" /> is 0.- or -The add-in file does not exist in <paramref name="addInfilePath" />.</exception>
      <exception cref="T:System.ArgumentNullException">One or more parameters are null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have read access permission to <paramref name="pipelineRootFolderPath" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.FindAddIns(System.Type,System.AddIn.Hosting.PipelineStoreLocation)">
      <summary>Finds all add-ins for a specified host view of the add-in at a location specified by the <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> enumeration value.</summary>
      <returns>A collection of tokens that represent the add-ins that were found.</returns>
      <param name="hostViewOfAddIn">The type that defines the host's view of the add-in.</param>
      <param name="location">The host application's base directory.</param>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">There is an access violation to the pipeline directory structure. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="location" /> is an invalid <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> value. </exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.FindAddIns(System.Type,System.AddIn.Hosting.PipelineStoreLocation,System.String[])">
      <summary>Finds all add-ins for a specified host view of the add-in at the location specified by a <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> value and an optional add-ins folder. </summary>
      <returns>A collection of tokens that represent the add-ins that were found.</returns>
      <param name="hostViewOfAddIn">The type that defines the host's view of the add-in.</param>
      <param name="location">One of the enumeration values.Currently the only value in this enumeration is the directory specified by the <see cref="P:System.AppDomainSetup.ApplicationBase" />  property that was used to set up the host's application domain. </param>
      <param name="addInFolderPaths">(Optional). The path of the directory that contains one or more subdirectories of add-ins. Because this parameter takes an array of strings, you can specify more than one path.This parameter is not required if your add-ins are located in the pipeline directory structure under the AddIns folder.</param>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">There is an access violation to the pipeline directory structure. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="location" /> is an invalid <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> value. </exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.FindAddIns(System.Type,System.String,System.String[])">
      <summary>Finds all add-ins for a specified host view of the add-in from a specified root directory. </summary>
      <returns>A collection of tokens that represent the add-ins that were found.</returns>
      <param name="hostViewOfAddIn">The type that defines the host's view of the add-in.</param>
      <param name="pipelineRootFolderPath">The path of the root of the pipeline directory structure.</param>
      <param name="addInFolderPaths">(Optional). The path of the directory that contains one or more subdirectories of add-ins. Because this parameter takes an array of strings, you can specify more than one path.This parameter is not required if your add-ins are located in the pipeline directory structure under the AddIns folder.</param>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">There is an access violation to the pipeline directory structure. </exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.Rebuild(System.AddIn.Hosting.PipelineStoreLocation)">
      <summary>Rebuilds the pipeline segments cache and includes new segments at the location specified by a <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> value.</summary>
      <returns>A collection of strings that describe warnings as the pipeline segments are evaluated.</returns>
      <param name="location">One of the enumeration values.Currently the only value in this enumeration is the directory specified by the <see cref="P:System.AppDomainSetup.ApplicationBase" />  property that was used to set up the host's application domain. </param>
      <exception cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException">A segment directory is missing from the pipeline directory structure. </exception>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">There is an access violation to the pipeline directory structure. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="location" /> is an invalid <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> value.</exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.Rebuild(System.String)">
      <summary>Rebuilds the pipeline segments cache and includes new segments from a specified root directory.</summary>
      <returns>A collection of strings that describe warnings as the pipeline segments are evaluated.</returns>
      <param name="pipelineRootFolderPath">The path of the root of the pipeline directory structure.</param>
      <exception cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException">A segment directory is missing from the pipeline directory structure. </exception>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">There is an access violation to the pipeline directory structure. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.RebuildAddIns(System.String)">
      <summary>Rebuilds the add-in cache and includes new add-ins from a specified root directory.</summary>
      <returns>A collection of strings that describe warnings as the pipeline segments are evaluated.</returns>
      <param name="addInsFolderPath">The path of the directory that contains one or more subdirectories of add-ins.</param>
      <exception cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException">A segment directory is missing from the pipeline directory structure. </exception>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">There is an access violation to the pipeline directory structure. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addInsFolderPath" /> is null. </exception>
      <exception cref="T:System.Security.SecurityException">Caller does not have both read and write access permissions to the location that is specified by <paramref name="addInsFolderPath" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.Update(System.AddIn.Hosting.PipelineStoreLocation)">
      <summary>Updates the pipeline segments cache with new segments at the location specified by a <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> value.</summary>
      <returns>A collection of strings that describe warnings as the pipeline segments are evaluated.</returns>
      <param name="location">One of the enumeration values.Currently the only value in this enumeration is the directory as specified by the <see cref="P:System.AppDomainSetup.ApplicationBase" />  property that was used to set up the host's application domain. </param>
      <exception cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException">A segment directory is missing from the pipeline directory structure. </exception>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">There is an access violation to the pipeline directory structure. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="location" /> is an invalid <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> value.</exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.Update(System.String)">
      <summary>Updates the pipeline segments cache with new segments from a specified root directory.</summary>
      <returns>A collection of strings that describe warnings as the pipeline segments are evaluated.</returns>
      <param name="pipelineRootFolderPath">The path of the root of the pipeline directory structure.</param>
      <exception cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException">A segment directory is missing from the pipeline directory structure. </exception>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">There is an access violation to the pipeline directory structure. </exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.UpdateAddIns(System.String)">
      <summary>Updates the add-in cache and includes new add-ins at a specified location. </summary>
      <returns>A collection of strings that describe warnings as the pipeline segments are evaluated.</returns>
      <param name="addInsFolderPath">The path of the directory that contains one or more subdirectories of add-ins.</param>
      <exception cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException">A segment directory is missing from the pipeline directory structure. </exception>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">There is an access violation to the pipeline directory structure. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addInsFolderPath" /> is null. </exception>
      <exception cref="T:System.Security.SecurityException">Caller does not have both read and write access permissions to the location that is specified by <paramref name="addInsFolderPath" />. </exception>
    </member>
    <member name="T:System.AddIn.Hosting.AddInToken">
      <summary>Represents an add-in that can be activated. </summary>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInEnvironment)">
      <summary>Activates an add-in in the environment of another add-in.</summary>
      <returns>The host view of the add-in.</returns>
      <param name="environment">The application domain and process that contains the original add-in. </param>
      <typeparam name="T">The interface or abstract base type that represents the host view of the add-in.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInProcess,System.AddIn.Hosting.AddInSecurityLevel)">
      <summary>Activates an add-in in an external process, in a new application domain, and with a specified trust level.</summary>
      <returns>The host view of the add-in.</returns>
      <param name="process">The external process in which to activate the add-in.</param>
      <param name="level">One of the enumeration values that specifies the trust level.</param>
      <typeparam name="T">The interface or abstract base type that represents the host view of the add-in.</typeparam>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInProcess,System.Security.PermissionSet)">
      <summary>Activates an add-in in an external process, in a new application domain, and with a specified permission set.</summary>
      <returns>The host view of the add-in.</returns>
      <param name="process">The external process in which to activate the add-in.</param>
      <param name="permissionSet">The required permission set granted for the add-in.</param>
      <typeparam name="T">The interface or abstract base type that represents the host view of the add-in.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInSecurityLevel)">
      <summary>Activates an add-in with a specified trust level in a new application domain.</summary>
      <returns>The host view of the add-in.</returns>
      <param name="trustLevel">One of the enumeration values that specifies the trust level.</param>
      <typeparam name="T">The interface or abstract base type that represents the host view of the add-in.</typeparam>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInSecurityLevel,System.String)">
      <summary>Activates an add-in in a new application domain with a specified name and trust level.</summary>
      <returns>The host view of the add-in.</returns>
      <param name="trustLevel">One of the enumeration values that specifies the trust level.</param>
      <param name="appDomainName">The friendly name to assign to the new application domain.</param>
      <typeparam name="T">The interface or abstract base type that represents the host view of the add-in.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AppDomain)">
      <summary>Activates an add-in in an existing application domain.</summary>
      <returns>The host view of the add-in.</returns>
      <param name="target">The application domain that the add-in should be activated in. </param>
      <typeparam name="T">The interface or abstract base type that represents the host view of the add-in.</typeparam>
      <exception cref="T:System.Security.SecurityException">Full-trust permission is demanded. A caller in the call chain does not have sufficient permission. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.Activate``1(System.Security.PermissionSet)">
      <summary>Activates an add-in with a specified permission set in a new application domain.</summary>
      <returns>The host view of the add-in.</returns>
      <param name="permissions">The permissions granted for the add-in.</param>
      <typeparam name="T">The interface or abstract base type that represents the host view of the add-in.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="permissions" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AddIn.Hosting.AddInToken.AddInFullName">
      <summary>Gets the namespace and type of the add-in.</summary>
      <returns>The type of the add-in, fully qualified by its namespace.</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInToken.AssemblyName">
      <summary>Gets the name of the assembly that contains the add-in.</summary>
      <returns>The name of the assembly.</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInToken.Description">
      <summary>Gets the description of the add-in.</summary>
      <returns>A description of the add-in, or null if the description is not specified in the <see cref="T:System.AddIn.AddInAttribute" /> attribute.</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInToken.EnableDirectConnect">
      <summary>Gets and sets a value that indicates whether add-ins should be directly connected to their hosts when conditions permit.</summary>
      <returns>true if the add-in should be directly connected to the host; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.Equals(System.Object)">
      <summary>Determines whether a specified object is equal to the current instance.</summary>
      <returns>true if the specified object and the current instance are equal; otherwise, false. </returns>
      <param name="obj">The object to compare with the current instance.</param>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.GetEnumerator">
      <summary>Returns an enumerator for the qualification data of the pipeline segments that are associated with this token.</summary>
      <returns>An enumerator that can be used to iterate through the qualification data of the pipeline segments that are associated with the current token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.GetHashCode">
      <summary>Serves as a hash function for a token.</summary>
      <returns>A hash code for the current token.</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInToken.Name">
      <summary>Gets the name of the add-in.</summary>
      <returns>The name of the add-in.</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInToken.Publisher">
      <summary>Gets the publisher of the add-in.</summary>
      <returns>The publisher of the add-in, or null if the publisher is not specified in the <see cref="T:System.AddIn.AddInAttribute" /> attribute.</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInToken.QualificationData">
      <summary>Gets a dictionary of data about the segments in the pipeline associated with the current token.</summary>
      <returns>A dictionary whose keys are pipeline segments and whose values are dictionaries of name/value pairs that represent qualification data for each segment.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator for the qualification data of the pipeline segments that are associated with this token. </summary>
      <returns>An enumerator that can be used to iterate through the qualification data of the pipeline segments that are associated with the current token.</returns>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.ToString">
      <summary>Returns a string that represents the token.</summary>
      <returns>A string that represents the token.</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInToken.Version">
      <summary>Gets the version of the add-in, as specified in the <see cref="T:System.AddIn.AddInAttribute" /> attribute.</summary>
      <returns>The version of the add-in, or null if the version number is not specified in the <see cref="T:System.AddIn.AddInAttribute" /> attribute.</returns>
    </member>
    <member name="T:System.AddIn.Hosting.InvalidPipelineStoreException">
      <summary>The exception that is thrown when a directory is not found and the user does not have permission to access the pipeline root path or an add-in path.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.InvalidPipelineStoreException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Hosting.InvalidPipelineStoreException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.InvalidPipelineStoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Hosting.InvalidPipelineStoreException" /> class with serialization and streaming context information.</summary>
      <param name="info">The serialized object data.</param>
      <param name="context">The contextual information about the source or destination object data.</param>
    </member>
    <member name="M:System.AddIn.Hosting.InvalidPipelineStoreException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Hosting.InvalidPipelineStoreException" /> class with the specified message.</summary>
      <param name="message">A description of the error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.InvalidPipelineStoreException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Hosting.InvalidPipelineStoreException" /> class with the specified message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A description of the error.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Hosting.PipelineStoreLocation">
      <summary>Specifies alternative locations for a pipeline store instead of a path to a directory.</summary>
    </member>
    <member name="F:System.AddIn.Hosting.PipelineStoreLocation.ApplicationBase">
      <summary>The location specified by the <see cref="P:System.AppDomainSetup.ApplicationBase" /> property for setting up the application domain's host.</summary>
    </member>
    <member name="T:System.AddIn.Hosting.Platform">
      <summary>Specifies the bits-per-word of the process in which an out-of-process add-in is run.</summary>
    </member>
    <member name="F:System.AddIn.Hosting.Platform.Host">
      <summary>The add-in is loaded into an external process with the same bits-per-word as the host process.</summary>
    </member>
    <member name="F:System.AddIn.Hosting.Platform.AnyCpu">
      <summary>The add-in is loaded into an external process with the same bits-per-word as the operating system.</summary>
    </member>
    <member name="F:System.AddIn.Hosting.Platform.X86">
      <summary>The add-in is loaded into a 32-bit external process.</summary>
    </member>
    <member name="F:System.AddIn.Hosting.Platform.X64">
      <summary>The add-in is loaded into a 64-bit external process.</summary>
    </member>
    <member name="T:System.AddIn.Hosting.QualificationDataItem">
      <summary>Represents information supplied by the developer of a pipeline segment, for use by the host. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.QualificationDataItem.Equals(System.Object)">
      <summary>Determines whether a specified object is equal to the current qualification data item.</summary>
      <returns>true if <paramref name="obj" /> is equal to the current instance; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.AddIn.Hosting.QualificationDataItem.GetHashCode">
      <summary>Gets the hash code for this qualification data item.</summary>
      <returns>The hash code.</returns>
    </member>
    <member name="P:System.AddIn.Hosting.QualificationDataItem.Name">
      <summary>Gets the name of the qualification data item.</summary>
      <returns>The name of the qualification data item.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Hosting.QualificationDataItem.op_Equality(System.AddIn.Hosting.QualificationDataItem,System.AddIn.Hosting.QualificationDataItem)">
      <summary>Determines whether two <see cref="T:System.AddIn.Hosting.QualificationDataItem" /> structures are equal.</summary>
      <returns>true if <paramref name="item1" /> and <paramref name="item2" /> are equal; otherwise, false.</returns>
      <param name="item1">The first <see cref="T:System.AddIn.Hosting.QualificationDataItem" /> to compare.</param>
      <param name="item2">The second <see cref="T:System.AddIn.Hosting.QualificationDataItem" /> to compare.</param>
    </member>
    <member name="M:System.AddIn.Hosting.QualificationDataItem.op_Inequality(System.AddIn.Hosting.QualificationDataItem,System.AddIn.Hosting.QualificationDataItem)">
      <summary>Determines whether two <see cref="T:System.AddIn.Hosting.QualificationDataItem" /> structures are different.</summary>
      <returns>true if <paramref name="item1" /> and <paramref name="item2" /> are not equal; otherwise, false.</returns>
      <param name="item1">The first <see cref="T:System.AddIn.Hosting.QualificationDataItem" /> to compare.</param>
      <param name="item2">The second <see cref="T:System.AddIn.Hosting.QualificationDataItem" /> to compare.</param>
    </member>
    <member name="P:System.AddIn.Hosting.QualificationDataItem.Segment">
      <summary>Gets a value that identifies the pipeline segment the qualification data item was applied to.</summary>
      <returns>The kind of pipeline segment the data item was applied to. </returns>
    </member>
    <member name="P:System.AddIn.Hosting.QualificationDataItem.Value">
      <summary>Gets the value of the qualification data item.</summary>
      <returns>The value of the item.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Pipeline.AddInAdapterAttribute">
      <summary>Identifies an object as an add-in-side adapter segment of the pipeline.</summary>
    </member>
    <member name="M:System.AddIn.Pipeline.AddInAdapterAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Pipeline.AddInAdapterAttribute" /> class. </summary>
    </member>
    <member name="T:System.AddIn.Pipeline.AddInBaseAttribute">
      <summary>Identifies an object as an add-in view segment of the pipeline.</summary>
    </member>
    <member name="M:System.AddIn.Pipeline.AddInBaseAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Pipeline.AddInBaseAttribute" /> class. </summary>
    </member>
    <member name="P:System.AddIn.Pipeline.AddInBaseAttribute.ActivatableAs">
      <summary>Gets or sets one or more add-in base types that a single add-in-side adapter can use to construct the pipeline.</summary>
      <returns>An array of add-in base types.</returns>
    </member>
    <member name="T:System.AddIn.Pipeline.CollectionAdapters">
      <summary>Enables collections to be passed between an add-in and its host application. </summary>
    </member>
    <member name="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})">
      <summary>Converts the specified <see cref="T:System.AddIn.Contract.IListContract`1" /> collection to an <see cref="T:System.Collections.Generic.IList`1" /> collection.</summary>
      <returns>The converted collection.</returns>
      <param name="collection">The collection from the other side of the pipeline.</param>
      <typeparam name="T">The type of objects that are contained in the list. <paramref name="T" /> must be serializable.</typeparam>
    </member>
    <member name="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
      <summary>Converts a specified <see cref="T:System.AddIn.Contract.IListContract`1" /> collection to an <see cref="T:System.Collections.Generic.IList`1" /> collection by using converter adapters.</summary>
      <returns>The converted collection.</returns>
      <param name="collection">The collection to pass to the other side of the pipeline.</param>
      <param name="contractViewAdapter">A converter that adapts the data from the type defined in the contract to the type expected in the view.</param>
      <param name="viewContractAdapter">A converter that adapts the data from the type defined in the view to the type expected by the contract. </param>
      <typeparam name="TContract">The type that defines the contract for passing objects of type <paramref name="TView" /> across the isolation boundary.</typeparam>
      <typeparam name="TView">The type that defines the view of the objects in the list.</typeparam>
    </member>
    <member name="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})">
      <summary>Converts a specified <see cref="T:System.Collections.Generic.IList`1" /> collection to an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection.</summary>
      <returns>The converted collection.</returns>
      <param name="collection">The collection to convert.</param>
      <typeparam name="T">The type of objects that are contained in the list. <paramref name="T" /> must be serializable.</typeparam>
    </member>
    <member name="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
      <summary>Converts a specified <see cref="T:System.Collections.Generic.IList`1" /> collection to an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection by using converter adapters.</summary>
      <returns>The converted collection.</returns>
      <param name="collection">The collection to convert.</param>
      <param name="viewContractAdapter">A converter that adapts the data from the type defined in the view to the type expected by the contract.  </param>
      <param name="contractViewAdapter">A converter that adapts the data from the type defined in the contract to the type expected in the view.</param>
      <typeparam name="TView">The type that defines the view of the objects in the list.</typeparam>
      <typeparam name="TContract">The type that defines the contract for passing objects of type <paramref name="TView" /> across the isolation boundary.</typeparam>
    </member>
    <member name="T:System.AddIn.Pipeline.ContractAdapter">
      <summary>Provides methods for sharing and readapting add-ins.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractAdapter.ContractToViewAdapter``1(System.AddIn.Pipeline.ContractHandle,System.AddIn.Hosting.PipelineStoreLocation)">
      <summary>Obtains a host view of an add-in if a suitable host-side adapter is found at a location specified by a value from the <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> enumeration.</summary>
      <returns>The host view of the add-in that is shared.</returns>
      <param name="contract">A handle to the contract used by the add-in to be shared.</param>
      <param name="location">The host's application base.</param>
      <typeparam name="TView">The type that defines the host view of the add-in.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="location" /> is invalid.</exception>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractAdapter.ContractToViewAdapter``1(System.AddIn.Pipeline.ContractHandle,System.String)">
      <summary>Obtains a host view of an add-in if a suitable host-side adapter is found at a location specified by a path.</summary>
      <returns>The host view of the add-in that is shared.</returns>
      <param name="contract">A handle to the contract used by the add-in to be shared.</param>
      <param name="pipelineRoot">A path to the add-in store.</param>
      <typeparam name="TView">The type that defines the host view of the add-in.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractAdapter.ViewToContractAdapter(System.Object)">
      <summary>Gets the handle to the contract for a provided host view of an add-in.</summary>
      <returns>A handle to the contract.</returns>
      <param name="view">The host view of an add-in activated by the system from the current application domain.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="view" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Pipeline.ContractBase">
      <summary>Provides a default implementation of <see cref="T:System.AddIn.Contract.IContract" /> members.</summary>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Pipeline.ContractBase" /> class. </summary>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.AcquireLifetimeToken">
      <summary>Obtains a lifetime token.</summary>
      <returns>A random number that identifies a token.</returns>
      <exception cref="T:System.InvalidOperationException">All previously acquired tokens have been revoked.  No further tokens are available.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.GetRemoteHashCode">
      <summary>Gets the hash code for the current <see cref="T:System.AddIn.Pipeline.ContractBase" /> object.</summary>
      <returns>A hash code for the current <see cref="T:System.AddIn.Pipeline.ContractBase" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.OnFinalRevoke">
      <summary>When overridden in an add-in-side adapter, releases native resources held by the adapter.</summary>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.QueryContract(System.String)">
      <summary>Reflects over the instance of a contract and returns the this pointer if the current object implements that contract.</summary>
      <returns>The this pointer to an <see cref="T:System.AddIn.Contract.IContract" /> interface, or null if the contract is not implemented.</returns>
      <param name="contractIdentifier">The full name of the contract, including its assembly name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractIdentifier" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.RemoteEquals(System.AddIn.Contract.IContract)">
      <summary>Compares an object with a remote object for equality.</summary>
      <returns>true if the object is equal to the remote object; otherwise, false. </returns>
      <param name="contract">The object to test for equality with the remote object.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.RemoteToString">
      <summary>Gets a string that identifies a remote object. </summary>
      <returns>A string that identifies the remote object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.Renewal(System.Runtime.Remoting.Lifetime.ILease)">
      <summary>Requests a sponsoring client to renew the lease for the specified object. </summary>
      <returns>The renewed lease.</returns>
      <param name="lease">The lifetime lease object that is used by the remoting lifetime service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lease" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.RevokeLifetimeToken(System.Int32)">
      <summary>Removes the specified token from the list of outstanding lifetime tokens.</summary>
      <param name="token">The token number.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="token" /> is not found in the list of outstanding lifetime tokens.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AddIn.Pipeline.ContractHandle">
      <summary>Provides methods that control the lifetime of an add-in.</summary>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractHandle.#ctor(System.AddIn.Contract.IContract)">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Pipeline.ContractHandle" /> class. </summary>
      <param name="contract">The contract to use in the pipeline.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contract" /> is null.</exception>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)">
      <summary>Gets the instance of the add-in-side adapter when the application domain was created.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.IContract" /> object that represents the owner of the application domain.</returns>
      <param name="domain">The application domain to check.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="domain" /> is null.</exception>
    </member>
    <member name="P:System.AddIn.Pipeline.ContractHandle.Contract">
      <summary>Gets the contract used by a pipeline.</summary>
      <returns>The contract, which is derived from <see cref="T:System.AddIn.Contract.IContract" />. </returns>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)">
      <summary>Determines whether an application domain is owned by the specified contract.</summary>
      <returns>true if the contract owns the application domain; otherwise, false. </returns>
      <param name="contract">The contract to check.</param>
      <param name="domain">The application domain to check.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contract" /> or <paramref name="domain" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractHandle.Dispose">
      <summary>Revokes the lifetime token on a contract, regardless of input.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractHandle.Dispose(System.Boolean)">
      <summary>Revokes the lifetime token on the contract regardless of input and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractHandle.Finalize"></member>
    <member name="T:System.AddIn.Pipeline.HostAdapterAttribute">
      <summary>Identifies an object as a host-side adapter segment of the pipeline.</summary>
    </member>
    <member name="M:System.AddIn.Pipeline.HostAdapterAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.AddIn.Pipeline.HostAdapterAttribute" /> class. </summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.ComponentModel.Composition.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.Composition</name>
  </assembly>
  <members>
    <member name="T:System.Lazy`2">
      <summary>Provides a lazy indirect reference to an object and its associated metadata for use by the Managed Extensibility Framework.</summary>
      <typeparam name="T">The type of the object referenced.</typeparam>
      <typeparam name="TMetadata">The type of the metadata.</typeparam>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`2" /> class with the specified metadata that uses the specified function to get the referenced object.</summary>
      <param name="valueFactory">A function that returns the referenced object.</param>
      <param name="metadata">The metadata associated with the referenced object.</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`2" /> class with the specified metadata and thread safety value that uses the specified function to get the referenced object.</summary>
      <param name="valueFactory">A function that returns the referenced object.</param>
      <param name="metadata">The metadata associated with the referenced object.</param>
      <param name="isThreadSafe">Indicates whether the <see cref="T:System.Lazy`2" /> object that is created will be thread-safe.</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Threading.LazyThreadSafetyMode)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`2" /> class with the specified metadata and thread synchronization mode that uses the specified function to get the referenced object.</summary>
      <param name="valueFactory">A function that returns the referenced object</param>
      <param name="metadata">The metadata associated with the referenced object.</param>
      <param name="mode">The thread synchronization mode</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`2" /> class with the specified metadata.</summary>
      <param name="metadata">The metadata associated with the referenced object.</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`2" /> class with the specified metadata and thread safety value.</summary>
      <param name="metadata">The metadata associated with the referenced object.</param>
      <param name="isThreadSafe">Indicates whether the <see cref="T:System.Lazy`2" /> object that is created will be thread-safe.</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1,System.Threading.LazyThreadSafetyMode)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`2" /> class with the specified metadata and thread synchronization mode.</summary>
      <param name="metadata">The metadata associated with the referenced object.</param>
      <param name="mode">The thread synchronization mode.</param>
    </member>
    <member name="P:System.Lazy`2.Metadata">
      <summary>Gets the metadata associated with the referenced object.</summary>
      <returns>The metadata associated with the referenced object.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.AttributedModelServices">
      <summary>Contains helper methods for using the attributed programming model with composition.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,System.String,``0)">
      <summary>Creates a part from the specified value and adds it to the specified batch with the specified contract name.</summary>
      <returns>The new part.</returns>
      <param name="batch">The batch to add to.</param>
      <param name="contractName">The contract name of the export.</param>
      <param name="exportedValue">The value to add.</param>
      <typeparam name="T">The type of the new part.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,``0)">
      <summary>Creates a part from the specified value and adds it to the specified batch.</summary>
      <returns>The new part.</returns>
      <param name="batch">The batch to add to.</param>
      <param name="exportedValue">The value to add.</param>
      <typeparam name="T">The type of the new part.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.AddPart(System.ComponentModel.Composition.Hosting.CompositionBatch,System.Object)">
      <summary>Creates a composable part from the specified attributed object, and adds it to the specified composition batch.</summary>
      <returns>The new part.</returns>
      <param name="batch">The batch to add to.</param>
      <param name="attributedPart">The object to add.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,System.String,``0)">
      <summary>Creates a part from the specified object under the specified contract name and composes it in the specified composition container.</summary>
      <param name="container">The composition container to perform composition in.</param>
      <param name="contractName">The contract name to export the part under.</param>
      <param name="exportedValue">The value to compose.</param>
      <typeparam name="T">The type of the new part.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,``0)">
      <summary>Creates a part from the specified value and composes it in the specified composition container.</summary>
      <param name="container">The composition container to perform composition in.</param>
      <param name="exportedValue">The value to compose.</param>
      <typeparam name="T">The type of the new part.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.ComposeParts(System.ComponentModel.Composition.Hosting.CompositionContainer,System.Object[])">
      <summary>Creates composable parts from an array of attributed objects and composes them in the specified composition container.</summary>
      <param name="container">The composition container to perform composition in.</param>
      <param name="attributedParts">An array of attributed objects to compose.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.CreatePart(System.Object)">
      <summary>Creates a composable part from an attributed object.</summary>
      <returns>The created part.</returns>
      <param name="attributedPart">The attributed object.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.CreatePartDefinition(System.Type,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Creates a part definition with the specified type and origin.</summary>
      <returns>The new part definition.</returns>
      <param name="type">The type of the definition.</param>
      <param name="origin">The origin of the definition.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.CreatePartDefinition(System.Type,System.ComponentModel.Composition.Primitives.ICompositionElement,System.Boolean)">
      <summary>Creates a part definition with the specified type and origin.</summary>
      <returns>The new part definition.</returns>
      <param name="type">The type of the definition.</param>
      <param name="origin">The origin of the definition.</param>
      <param name="ensureIsDiscoverable">A value indicating whether or not the new definition should be discoverable.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.GetContractName(System.Type)">
      <summary>Gets a canonical contract name for the specified type.</summary>
      <returns>A contract name created from the specified type.</returns>
      <param name="type">The type to use.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.GetMetadataView``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Gets a metadata view object from a dictionary of loose metadata.</summary>
      <returns>A metadata view containing the specified metadata.</returns>
      <param name="metadata">A collection of loose metadata.</param>
      <typeparam name="TMetadataView">The type of the metadata view object to get.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Reflection.MethodInfo)">
      <summary>Gets the unique identifier for the specified method.</summary>
      <returns>The unique identifier for the method.</returns>
      <param name="method">The method to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Type)">
      <summary>Gets the unique identifier for the specified type.</summary>
      <returns>The unique identifier for the type.</returns>
      <param name="type">The type to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object)">
      <summary>Composes the specified part by using the specified composition service, with recomposition disabled.</summary>
      <returns>The composed part.</returns>
      <param name="compositionService">The composition service to use.</param>
      <param name="attributedPart">The part to compose.</param>
    </member>
    <member name="T:System.ComponentModel.Composition.ChangeRejectedException">
      <summary>An exception that indicates whether a component has been rejected during composition.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ChangeRejectedException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.CompositionError})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ChangeRejectedException" /> class with a list of composition errors. </summary>
      <param name="errors">A collection of errors that occurred during composition.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ChangeRejectedException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ChangeRejectedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="P:System.ComponentModel.Composition.ChangeRejectedException.Message">
      <summary>Gets or sets the message associated with the component rejection.</summary>
      <returns>The message associated with the component rejection.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.CompositionContractMismatchException">
      <summary>The exception that is thrown when the underlying exported object or metadata of an <see cref="T:System.Lazy`1" /> or <see cref="T:System.Lazy`2" /> object cannot be cast to T or TMetadataView, respectively.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionContractMismatchException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionContractMismatchException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionContractMismatchException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionContractMismatchException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.ComponentModel.Composition.CompositionError">
      <summary>Represents an error that occurs during composition in a <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> class with the specified error message.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> property to an empty string ("").</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> class with the specified error message and the composition element that is the cause of the composition error.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> property to an empty string ("").</param>
      <param name="element">The composition element that is the cause of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Element" /> property to null.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> class with the specified error message, and the composition element and exception that are the cause of the composition error.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> property to an empty string ("").</param>
      <param name="element">The composition element that is the cause of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Element" /> property to null.</param>
      <param name="exception">The <see cref="P:System.ComponentModel.Composition.CompositionError.Exception" /> that is the underlying cause of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Exception" /> property to null.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> class with the specified error message and the exception that is the cause of the composition error.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> property to an empty string ("").</param>
      <param name="exception">The <see cref="P:System.ComponentModel.Composition.CompositionError.Exception" /> that is the underlying cause of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Exception" /> property to null.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionError.Description">
      <summary>Gets a description of the composition error.</summary>
      <returns>A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionError" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionError.Element">
      <summary>Gets the composition element that is the cause of the error.</summary>
      <returns>The composition element that is the cause of the <see cref="T:System.ComponentModel.Composition.CompositionError" />. The default is null.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionError.Exception">
      <summary>Gets the exception that is the underlying cause of the composition error.</summary>
      <returns>The exception that is the underlying cause of the <see cref="T:System.ComponentModel.Composition.CompositionError" />. The default is null.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.ToString">
      <summary>Returns a string representation of the composition error.</summary>
      <returns>A string that contains the <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> property.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.CompositionException">
      <summary>Represents the exception that is thrown when one or more errors occur during composition in a <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionException" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionException.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.CompositionError})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionException" /> class with the specified collection of composition errors.</summary>
      <param name="errors">A collection of <see cref="T:System.ComponentModel.Composition.CompositionError" /> objects that represent problems during composition.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionException" /> class with the specified error message.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionException" /> or null to set the <see cref="P:System.Exception.Message" /> property to its default value.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionException" /> class with the specified error message and the exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionException" /> or null to set the <see cref="P:System.Exception.Message" /> property to its default value.</param>
      <param name="innerException">The exception that is the underlying cause of the <see cref="T:System.ComponentModel.Composition.CompositionException" /> or null to set the <see cref="P:System.Exception.InnerException" /> property to null.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionException.Errors">
      <summary>Gets or sets a collection of <see cref="T:System.ComponentModel.Composition.CompositionError" /> objects that describe the errors associated with the <see cref="T:System.ComponentModel.Composition.CompositionException" />.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.CompositionError" /> objects that describe the errors associated with the <see cref="T:System.ComponentModel.Composition.CompositionException" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionException.Message">
      <summary>Gets a message that describes the exception.</summary>
      <returns> A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionException" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.CreationPolicy">
      <summary>Specifies options added to a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object that control when the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object creates a new instance of that part.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.CreationPolicy.Any">
      <summary>Specifies that the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> will use the most appropriate <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> for the part given the current context. This is the default <see cref="T:System.ComponentModel.Composition.CreationPolicy" />. Be default, <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> will use <see cref="F:System.ComponentModel.Composition.CreationPolicy.Shared" />, unless the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> or importer requests <see cref="F:System.ComponentModel.Composition.CreationPolicy.NonShared" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.CreationPolicy.Shared">
      <summary>Specifies that a single shared instance of the associated <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> will be created by the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> and shared by all requestors.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.CreationPolicy.NonShared">
      <summary>Specifies that a new non-shared instance of the associated <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> will be created by the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> for every requestor.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.ExportAttribute">
      <summary>Specifies that a type, property, field, or method provides a particular export.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ExportAttribute" /> class, exporting the type or member marked with this attribute under the default contract name.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ExportAttribute" /> class, exporting the type or member marked with this attribute under the specified contract name.</summary>
      <param name="contractName">The contract name that is used to export the type or member marked with this attribute, or null or an empty string ("") to use the default contract name.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ExportAttribute" /> class, exporting the specified type under the specified contract name.</summary>
      <param name="contractName">The contract name that is used to export the type or member marked with this attribute, or null or an empty string ("") to use the default contract name.</param>
      <param name="contractType">The type to export.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ExportAttribute" /> class, exporting the type or member marked with this attribute under a contract name derived from the specified type.</summary>
      <param name="contractType">A type from which to derive the contract name that is used to export the type or member marked with this attribute, or null to use the default contract name.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportAttribute.ContractName">
      <summary>Gets the contract name that is used to export the type or member marked with this attribute.</summary>
      <returns>The contract name that is used to export the type or member marked with this attribute. The default value is an empty string ("").</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportAttribute.ContractType">
      <summary>Gets the contract type that is exported by the member that this attribute is attached to.</summary>
      <returns>The type of export that is be provided. The default value is null, which means that the type will be obtained by looking at the type on the member that this export is attached to. </returns>
    </member>
    <member name="T:System.ComponentModel.Composition.ExportMetadataAttribute">
      <summary>Specifies metadata for a type, property, field, or method marked with the <see cref="T:System.ComponentModel.Composition.ExportAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportMetadataAttribute.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ExportMetadataAttribute" /> with the specified name and metadata value.</summary>
      <param name="name">A string that contains the name of the metadata value, or null to set the <see cref="P:System.ComponentModel.Composition.ExportMetadataAttribute.Name" /> property to an empty string ("").</param>
      <param name="value">An object that contains the metadata value. This can be null.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportMetadataAttribute.IsMultiple">
      <summary>Gets or sets a value that indicates whether this item is marked with this attribute more than once.</summary>
      <returns>true if the item is marked more than once; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportMetadataAttribute.Name">
      <summary>Gets the name of the metadata value.</summary>
      <returns> A string that contains the name of the metadata value.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportMetadataAttribute.Value">
      <summary>Gets the metadata value.</summary>
      <returns> An object that contains the metadata value.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.ICompositionService">
      <summary>Provides methods for composing <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects in a <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ICompositionService.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>Composes the specified part, with recomposition and validation disabled.</summary>
      <param name="part">The part to compose.</param>
    </member>
    <member name="T:System.ComponentModel.Composition.ImportAttribute">
      <summary>Specifies that a property, field, or parameter imports a particular export.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportAttribute" /> class, importing the export with the default contract name.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportAttribute" /> class, importing the export with the specified contract name.</summary>
      <param name="contractName">The contract name of the export to import, or null or an empty string ("") to use the default contract name.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportAttribute" /> class, importing the export with the specified contract name and type.</summary>
      <param name="contractName">The contract name of the export to import, or null or an empty string ("") to use the default contract name.</param>
      <param name="contractType">The type of the export to import.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportAttribute" /> class, importing the export with the contract name derived from the specified type.</summary>
      <param name="contractType">The type to derive the contract name of the export from, or null to use the default contract name.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.AllowDefault">
      <summary>Gets or sets a value that indicates whether the property, field, or parameter will be set to its type's default value when an export with the contract name is not present in the container.</summary>
      <returns>true if the property, field, or parameter will be set to its type's default value when there is no export with the <see cref="P:System.ComponentModel.Composition.ImportAttribute.ContractName" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.AllowRecomposition">
      <summary>Gets or sets a value that indicates whether the property or field will be recomposed when exports with a matching contract have changed in the container.</summary>
      <returns>true if the property or field allows recomposition when exports with a matching <see cref="P:System.ComponentModel.Composition.ImportAttribute.ContractName" /> are added or removed from the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.ContractName">
      <summary>Gets the contract name of the export to import.</summary>
      <returns>The contract name of the export to import. The default is an empty string ("").</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.ContractType">
      <summary>Gets the type of the export to import.</summary>
      <returns>The type of the export to import.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.RequiredCreationPolicy">
      <summary>Gets or sets a value that indicates that the importer requires a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> for the exports used to satisfy this import. </summary>
      <returns>One of the following values:<see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />, if the importer does not require a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" />. This is the default.<see cref="F:System.ComponentModel.Composition.CreationPolicy.Shared" /> to require that all used exports be shared by all parts in the container.<see cref="F:System.ComponentModel.Composition.CreationPolicy.NonShared" /> to require that all used exports be non-shared in a container. In this case, each part receives their own instance.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
      <summary>The exception that is thrown when the cardinality of an <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> object does not match the cardinality of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects available that are in an <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> object.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" /> class with serialized data.</summary>
      <param name="info">An object that holds the serialized object data about the <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" />. </param>
      <param name="context">An object that contains contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <paramref name="info" /> is missing a required value.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="info" /> contains a value that cannot be cast to the correct type.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" /> class with a specified message that describes the error.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" />, or null to set the <see cref="P:System.Exception.Message" /> property to its default value. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.ComponentModel.Composition.ImportingConstructorAttribute">
      <summary>Specifies that a particular constructor should be used when constructing an attributed part.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportingConstructorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportingConstructorAttribute" /> class.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.ImportManyAttribute">
      <summary>Specifies that a property, field, or parameter imports a particular set of exports.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportManyAttribute" /> class, importing the set of exports with the default contract name.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportManyAttribute" /> class, importing the set of exports with the specified contract name.</summary>
      <param name="contractName">The contract name of the exports to import, or null or an empty string ("") to use the default contract name.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportManyAttribute" /> class, importing the set of exports with the specified contract name and contract type.</summary>
      <param name="contractName">The contract name of the exports to import, or null or an empty string ("") to use the default contract name.</param>
      <param name="contractType">The type of the export to import.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportManyAttribute" /> class, importing the set of exports with the contract name derived from the specified type.</summary>
      <param name="contractType">The type to derive the contract name of the exports to import, or nullto use the default contract name.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportManyAttribute.AllowRecomposition">
      <summary>Gets or sets a value indicating whether the decorated property or field will be recomposed when exports that provide the matching contract change.</summary>
      <returns>true if the property or field allows for recomposition when exports that provide the same <see cref="P:System.ComponentModel.Composition.ImportManyAttribute.ContractName" /> are added or removed from the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />; otherwise, false.The default value is false.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportManyAttribute.ContractName">
      <summary>Gets the contract name of the exports to import.</summary>
      <returns>The contract name of the exports to import. The default value is an empty string ("").</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportManyAttribute.ContractType">
      <summary>Gets the contract type of the export to import.</summary>
      <returns>The type of the export that this import is expecting. The default value is null, which means that the type will be obtained by looking at the type on the member that this import is attached to. If the type is <see cref="T:System.Object" />, the import will match any exported type.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportManyAttribute.RequiredCreationPolicy">
      <summary>Gets or sets a value that indicates that the importer requires a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> for the exports used to satisfy this import. </summary>
      <returns>One of the following values:<see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />, if the importer does not require a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" />. This is the default.<see cref="F:System.ComponentModel.Composition.CreationPolicy.Shared" /> to require that all used exports be shared by all parts in the container.<see cref="F:System.ComponentModel.Composition.CreationPolicy.NonShared" /> to require that all used exports be non-shared in a container. In this case, each part receives their own instance.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.InheritedExportAttribute">
      <summary>Specifies that a type provides a particular export, and that subclasses of that type will also provide that export.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> class. </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> class with the specified contract name.</summary>
      <param name="contractName">The name of the contract.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> class with the specified contract name and type.</summary>
      <param name="contractName">The name of the contract.</param>
      <param name="contractType">The type of the contract.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> class with the specified contract type.</summary>
      <param name="contractType">The type of the contract.</param>
    </member>
    <member name="T:System.ComponentModel.Composition.IPartImportsSatisfiedNotification">
      <summary>Enables implementers to be notified when a part's imports have been satisfied.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.IPartImportsSatisfiedNotification.OnImportsSatisfied">
      <summary>Called when a part's imports have been satisfied and it is safe to use.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.MetadataAttributeAttribute">
      <summary>Specifies that an attribute can be used to provide metadata for a type, property, field, or method marked with the <see cref="T:System.ComponentModel.Composition.ExportAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.MetadataAttributeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.MetadataAttributeAttribute" /> class.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.PartCreationPolicyAttribute">
      <summary>Specifies the <see cref="P:System.ComponentModel.Composition.PartCreationPolicyAttribute.CreationPolicy" /> for a given <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.PartCreationPolicyAttribute.#ctor(System.ComponentModel.Composition.CreationPolicy)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.PartCreationPolicyAttribute" /> class with the specified creation policy.</summary>
      <param name="creationPolicy">The creation policy to use.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.PartCreationPolicyAttribute.CreationPolicy">
      <summary>Gets or sets a value that indicates the creation policy of the attributed part.</summary>
      <returns>One of the <see cref="P:System.ComponentModel.Composition.PartCreationPolicyAttribute.CreationPolicy" /> values that indicates the creation policy of the attributed part. The default is <see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.PartMetadataAttribute">
      <summary>Specifies metadata for a type to be used as a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> and <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.PartMetadataAttribute.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.PartMetadataAttribute" /> class with the specified name and metadata value.</summary>
      <param name="name">A string that contains the name of the metadata value or null to use an empty string ("").</param>
      <param name="value">An object that contains the metadata value. This can be null.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.PartMetadataAttribute.Name">
      <summary>Gets the name of the metadata value.</summary>
      <returns> A string that contains the name of the metadata value.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.PartMetadataAttribute.Value">
      <summary>Gets the metadata value.</summary>
      <returns> An object that contains the metadata value.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.PartNotDiscoverableAttribute">
      <summary>Marks a type that will not be discovered as a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> in a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.PartNotDiscoverableAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.PartNotDiscoverableAttribute" /> class.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.AggregateCatalog">
      <summary>A catalog that contains a mutable collection of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> objects. </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartCatalog})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> class with the specified catalogs.</summary>
      <param name="catalogs">A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> objects to add to the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> or null to create an empty <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="catalogs" /> contains an element that is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> class with the specified catalogs.</summary>
      <param name="catalogs">A array of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> objects to add to the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="catalogs" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="catalogs" /> contains an element that is null.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AggregateCatalog.Catalogs">
      <summary>Gets the underlying catalogs of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> object.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> objects that underlie the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> object.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> object has been disposed of.</exception>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changed">
      <summary>Occurs when the contents of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> object have changed.</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changing">
      <summary>Occurs when the contents of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> object is changing.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets the export definitions that match the constraint expressed by the specified definition.</summary>
      <returns>A collection of <see cref="T:System.Tuple`2" /> containing the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects and their associated <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects for objects that match the constraint specified by <paramref name="definition" />.</returns>
      <param name="definition">The conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects to be returned.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> object has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changed" /> event.</summary>
      <param name="e">A <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" /> object that contains the event data. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changing" /> event.</summary>
      <param name="e">A <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" /> object that contains the event data. </param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AggregateCatalog.Parts">
      <summary>Gets the part definitions that are contained in the catalog.</summary>
      <returns>The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects that are contained in the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> object.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> has been disposed of.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider">
      <summary>Aggregates the exports provided by a collection of <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> objects.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Hosting.ExportProvider})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> class.</summary>
      <param name="providers">The prioritized list of export providers. The providers are consulted in the order in which they are supplied.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> class.</summary>
      <param name="providers">The prioritized list of export providers.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> class. </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> class and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Gets all the exports that match the conditions of the specified import.</summary>
      <returns>A collection that contains all the exports that match the specified condition.</returns>
      <param name="definition">The conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to be returned.</param>
      <param name="atomicComposition">The transactional container for the composition.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Providers">
      <summary>Gets a collection that contains the providers that the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> object aggregates.</summary>
      <returns>A collection of the <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> objects that the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> aggregates.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> object has been disposed of.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog">
      <summary>An immutable <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> object created from a managed code assembly.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.Reflection.Assembly)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> class with the specified assembly.</summary>
      <param name="assembly">The assembly that contains the attributed <see cref="T:System.Type" /> objects to add to the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> object.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assembly" /> is null.-or-<paramref name="assembly" /> was loaded in the reflection-only context.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> class with the specified code base.</summary>
      <param name="codeBase">A string that specifies the code base of the assembly that contains the attributed <see cref="T:System.Type" /> objects to add to the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> object.</param>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="codeBase" /> is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and <paramref name="codeBase" /> was compiled with a later version.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have path discovery permission. </exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="codeBase" /> could not be loaded.-or-<paramref name="codeBase" /> specified a directory.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="codeBase" /> is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="codeBase" /> is not found.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="codeBase" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. </exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Assembly">
      <summary>Gets the assembly whose attributed types are contained in the assembly catalog.</summary>
      <returns>The assembly whose attributed <see cref="T:System.Type" /> objects are contained in the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets a collection of exports that match the conditions specified by the import definition.</summary>
      <returns>A collection of exports that match the conditions specified by <paramref name="definition" />.</returns>
      <param name="definition">Conditions that specify which exports to match.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Parts">
      <summary>Gets the part definitions that are contained in the assembly catalog.</summary>
      <returns>The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects contained in the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> object has been disposed of.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName">
      <summary>Gets the display name of the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> object.</summary>
      <returns>A string that represents the type and assembly of this <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> object.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin">
      <summary>Gets the composition element that this element originated from.</summary>
      <returns>Always null.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.ToString">
      <summary>Gets a string representation of the assembly catalog.</summary>
      <returns>A representation of the assembly catalog.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.AtomicComposition">
      <summary>Represents a single composition operation for transactional composition.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> class. </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor(System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> class with the specified parent <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" />.</summary>
      <param name="outerAtomicComposition">The parent of this composition operation.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.AddCompleteAction(System.Action)">
      <summary>Adds an action to be executed when the overall composition operation completes successfully.</summary>
      <param name="completeAction">The action to be executed.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.AddRevertAction(System.Action)">
      <summary>Adds an action to be executed if the overall composition operation fails.</summary>
      <param name="revertAction">The action to be executed.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Complete">
      <summary>Marks this composition operation as complete.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> class, and mark this composition operation as failed.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)">
      <summary>Saves a key-value pair in the transaction to track tentative state.</summary>
      <param name="key">The key to save.</param>
      <param name="value">The value to save.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,System.Boolean,``0@)">
      <summary>Gets a value saved by the <see cref="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)" /> method, with the option of not searching parent transactions.</summary>
      <returns>true if the value was successfully retrieved; otherwise, false.</returns>
      <param name="key">The key to retrieve from.</param>
      <param name="localAtomicCompositionOnly">true to exclude parent transactions; otherwise, false.</param>
      <param name="value">The retrieved value.</param>
      <typeparam name="T">The type of the value to be retrieved.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,``0@)">
      <summary>Gets a value saved by the <see cref="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)" /> method.</summary>
      <returns>true if the value was successfully retrieved; otherwise, false.</returns>
      <param name="key">The key to retrieve from.</param>
      <param name="value">The retrieved value.</param>
      <typeparam name="T">The type of the value to be retrieved.</typeparam>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider">
      <summary>Provides access to all the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects declared by a given catalog.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> class with the specified catalog.</summary>
      <param name="catalog">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> that the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> uses to produce <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="catalog" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> class with the specified catalog and optional in thread-safe mode. </summary>
      <param name="catalog">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> that the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> uses to produce <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</param>
      <param name="isThreadSafe">true if this object must be thread-safe; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="catalog" /> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Catalog">
      <summary>Gets the catalog that is used to provide exports.</summary>
      <returns>The catalog that the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> uses to produce <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Returns all exports that match the conditions of the specified import.</summary>
      <returns>A collection that contains all the exports that match the specified condition.</returns>
      <param name="definition">The conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to be returned.</param>
      <param name="atomicComposition">The composition transaction to use, or null to disable transactional composition.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CatalogExportProvider.SourceProvider">
      <summary>Gets or sets the export provider which provides access to additional exports.</summary>
      <returns>The export provider that provides the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> access to additional <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects. The default is null.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">This property has already been set.-or-The methods on the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> object have already been accessed.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs">
      <summary>Provides data for the <see cref="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changed" /> event.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartDefinition},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartDefinition},System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" /> class with the specified changes.</summary>
      <param name="addedDefinitions">The part definitions that were added to the catalog.</param>
      <param name="removedDefinitions">The part definitions that were removed from the catalog.</param>
      <param name="atomicComposition">The composition transaction to use, or null to disable transactional composition.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.AddedDefinitions">
      <summary>Gets a collection of definitions added to the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> in this change.</summary>
      <returns>A collection of definitions added to the catalog.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.AtomicComposition">
      <summary>Gets the composition transaction for this change.</summary>
      <returns>The composition transaction for this change.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.RemovedDefinitions">
      <summary>Gets a collection of definitions removed from the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> in this change.</summary>
      <returns>A collection of definitions removed from the catalog in this change.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider">
      <summary>Provides access to the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects provided by a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> class, optionally in thread-safe mode. </summary>
      <param name="isThreadSafe">true if the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> object must be thread-safe; otherwise, false.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)">
      <summary>Executes composition on the specified batch.</summary>
      <param name="batch">The batch to execute composition on.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Gets a collection of all exports in this provider that match the conditions of the specified import.</summary>
      <returns>A collection of all exports in this provider that match the specified conditions.</returns>
      <param name="definition">The <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> that defines the conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> to get.</param>
      <param name="atomicComposition">The composition transaction to use, or null to disable transactional composition.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.SourceProvider">
      <summary>Gets or sets the export provider that provides access to additional <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</summary>
      <returns>A provider that provides the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects. The default is null.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">This property has already been set.-or-The methods on the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> have already been accessed.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CompositionBatch">
      <summary>Represents a set of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects to add or remove from a container.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePart},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePart})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> class with the specified parts for addition and removal.</summary>
      <param name="partsToAdd">A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects to add.</param>
      <param name="partsToRemove">A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partsToAdd" /> is null.-or-<paramref name="partsToRemove" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.AddExport(System.ComponentModel.Composition.Primitives.Export)">
      <summary>Adds the specified export to the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> object.</summary>
      <returns>The part added.</returns>
      <param name="export">The export to add to the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="export" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.AddPart(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>Adds the specified part to the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> object.</summary>
      <param name="part">The part to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="part" /> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CompositionBatch.PartsToAdd">
      <summary>Gets the collection of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects to be added.</summary>
      <returns>A collection of parts to be added.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CompositionBatch.PartsToRemove">
      <summary>Gets the collection of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects to be removed.</summary>
      <returns>A collection of parts to be removed.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.RemovePart(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>Puts the specified part on the list of parts to remove.</summary>
      <param name="part">The part to be removed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="part" /> is null.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CompositionConstants">
      <summary>Contains static metadata keys used by the composition system.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Hosting.CompositionConstants.ExportTypeIdentityMetadataName">
      <summary>Specifies the key for metadata created by the composition system to mark a part with a unique identifier.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Hosting.CompositionConstants.PartCreationPolicyMetadataName">
      <summary>Specifies the key for metadata created by the composition system to mark a part with a creation policy.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
      <summary>Serves as a repository for <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects and provides methods for composition.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> class with the specified export providers.</summary>
      <param name="providers">An array of <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> objects that provide the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects, or null to set <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> to an empty <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="providers" /> contains an element that is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean,System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> class with the specified catalog, thread-safe mode, and export providers. </summary>
      <param name="catalog">A catalog that provides <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</param>
      <param name="isThreadSafe">true if this <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object must be thread-safe; otherwise, false.</param>
      <param name="providers">An array of <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> objects that provide the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects, or null to set the <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> property to an empty <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> class with the specified catalog and export providers.</summary>
      <param name="catalog">A catalog that provides <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</param>
      <param name="providers">An array of <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> objects that provide the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects, or null to set <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> to an empty <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="providers" /> contains an element that is null.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Catalog">
      <summary>Gets the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> that provides the container access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</summary>
      <returns>The catalog that provides the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> access to exports produced from <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects. The default is null.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)">
      <summary>Adds or removes the parts in the specified <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> from the container and executes composition.</summary>
      <param name="batch">Changes to the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> to include during the composition.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Returns a collection of all exports that match the conditions in the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> object.</summary>
      <returns>A collection of all the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects in this <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object that match the conditions specified by <paramref name="definition" />.</returns>
      <param name="definition">The object that defines the conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to get.</param>
      <param name="atomicComposition">The composition transaction to use, or null to disable transactional composition.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers">
      <summary>Gets the export providers that provide the container access to additional <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> objects.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> objects that provide the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> access to additional <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects. The default is an empty <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport(System.ComponentModel.Composition.Primitives.Export)">
      <summary>Releases the specified <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object from the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />. </summary>
      <param name="export">The <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> that needs to be released.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="export" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport``1(System.Lazy{``0})">
      <summary>Removes the specified export from composition and releases its resources if possible.</summary>
      <param name="export">An indirect reference to the export to remove.</param>
      <typeparam name="T">The type of the export.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})">
      <summary>Releases a set of <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects from the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />. </summary>
      <param name="exports">A collection of <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to be released.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exports" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="exports" /> contains an element that is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``1(System.Collections.Generic.IEnumerable{System.Lazy{``0}})">
      <summary>Removes a collection of exports from composition and releases their resources if possible.</summary>
      <param name="exports">A collection of indirect references to the exports to be removed.</param>
      <typeparam name="T">The type of the exports.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}})">
      <summary>Removes a collection of exports from composition and releases their resources if possible.</summary>
      <param name="exports">A collection of indirect references to the exports to be removed and their metadata.</param>
      <typeparam name="T">The type of the exports.</typeparam>
      <typeparam name="TMetadataView">The type of the exports' metadata view.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>Satisfies the imports of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object without registering it for recomposition.</summary>
      <param name="part">The part to satisfy the imports of.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="part" /> is null.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of the errors that occurred.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog">
      <summary>A <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> object that represents the contents of a directory.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" /> class with <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects based on all the DLL files in the specified directory path.</summary>
      <param name="path">Path to the directory to scan for assemblies to add to the catalog.The path must be absolute or relative to <see cref="P:System.AppDomain.BaseDirectory" />.</param>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified <paramref name="path" /> is invalid. For example, it is on an unmapped drive. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more implementation-specific invalid characters.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based computers, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" /> class with <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects based on the specified search pattern in the specified directory path.</summary>
      <param name="path">Path to the directory to scan for assemblies to add to the catalog.The path must be absolute or relative to <see cref="P:System.AppDomain.BaseDirectory" />.</param>
      <param name="searchPattern">The pattern to search with. The format of the pattern should be the same as specified for <see cref="M:System.IO.Directory.GetFiles(System.String,System.String)" />.</param>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified <paramref name="path" /> is invalid. For example, it is on an unmapped drive.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null or <paramref name="searchPattern" /> is null.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more implementation-specific invalid characters.-or-<paramref name="searchPattern" /> does not contain a valid pattern.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length. For example, on Windows-based computers, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changed">
      <summary>Occurs when the contents of the catalog has changed.</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changing">
      <summary>Occurs when the catalog is changing.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.FullPath">
      <summary>Gets the translated absolute path observed by the <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" />.</summary>
      <returns>The translated absolute path observed by the catalog.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets the export definitions that match the constraint expressed by the specified definition.</summary>
      <returns>A collection of <see cref="T:System.Tuple`2" /> containing the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects and their associated <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects for objects that match the constraint specified by <paramref name="definition" />.</returns>
      <param name="definition">The conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects to be returned.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" /> object has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.LoadedFiles">
      <summary>Gets the collection of files currently loaded in the catalog.</summary>
      <returns>A collection of files currently loaded in the catalog.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changed" /> event.</summary>
      <param name="e">A <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changing" /> event.</summary>
      <param name="e">A <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" /> that contains the event data.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Parts">
      <summary>Gets the part definitions that are contained in the directory catalog.</summary>
      <returns>The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects that are contained in the <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" /> object has been disposed of.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Path">
      <summary>Gets the path observed by the <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" />.</summary>
      <returns>The path observed by the catalog.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Refresh">
      <summary>Refreshes the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects with the latest files in the directory that match the search pattern. </summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified <paramref name="path" /> has been removed.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.SearchPattern">
      <summary>Gets the search pattern passed into the constructor of <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" />.</summary>
      <returns>The search pattern the catalog uses to find files. The default is *.dll.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName">
      <summary>Gets the display name of the directory catalog.</summary>
      <returns>A string that contains a human-readable display name of the <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin">
      <summary>Gets the composition element from which the directory catalog originated.</summary>
      <returns>Always null.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.ToString">
      <summary>Gets a string representation of the directory catalog.</summary>
      <returns>A string representation of the catalog.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ExportProvider">
      <summary>Defines the abstract base class for export providers, which provides methods for retrieving <see cref="T:System.Lazy`1" /> objects.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> class.</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged">
      <summary>Occurs when the exports in the <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> change.</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging">
      <summary>Occurs when the provided exports are changing.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1">
      <summary>Returns the export with the contract name derived from the specified type parameter. If there is not exactly one matching export, an exception is thrown.</summary>
      <returns>The export with the contract name derived from the specified type parameter.</returns>
      <typeparam name="T">The type parameter of the <see cref="T:System.Lazy`1" /> object to return. The contract name is also derived from this type parameter.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There are zero <see cref="T:System.Lazy`1" /> objects with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.-or-There is more than one <see cref="T:System.Lazy`1" /> object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2">
      <summary>Returns the export with the contract name derived from the specified type parameter. If there is not exactly one matching export, an exception is thrown.</summary>
      <returns>System.Lazy`2</returns>
      <typeparam name="T">The type parameter of the <see cref="T:System.Lazy`2" /> object to return. The contract name is also derived from this type parameter.</typeparam>
      <typeparam name="TMetadataView">The type of the metadata view of the <see cref="T:System.Lazy`2" /> object to return.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There are zero <see cref="T:System.Lazy`2" /> objects with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.-or-There is more than one <see cref="T:System.Lazy`2" /> object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="TMetadataView" /> is not a valid metadata view type.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2(System.String)">
      <summary>Returns the export with the specified contract name. If there is not exactly one matching export, an exception is thrown.</summary>
      <returns>The export with the specified contract name.</returns>
      <param name="contractName">The contract name of the <see cref="T:System.Lazy`2" /> object to return, or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type parameter of the <see cref="T:System.Lazy`2" /> object to return.</typeparam>
      <typeparam name="TMetadataView">The type of the metadata view of the <see cref="T:System.Lazy`2" /> object to return.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There are zero <see cref="T:System.Lazy`2" /> objects with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.-or-There is more than one <see cref="T:System.Lazy`2" /> object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="TMetadataView" /> is not a valid metadata view type.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)">
      <summary>Returns the export with the specified contract name. If there is not exactly one matching export, an exception is thrown.</summary>
      <returns>The export with the specified contract name.</returns>
      <param name="contractName">The contract name of the <see cref="T:System.Lazy`1" /> object to return, or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type parameter of the <see cref="T:System.Lazy`1" /> object to return.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There are zero <see cref="T:System.Lazy`1" /> objects with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.-or-There is more than one <see cref="T:System.Lazy`1" /> object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1">
      <summary>Returns the exported object with the contract name derived from the specified type parameter. If there is not exactly one matching exported object, an exception is thrown.</summary>
      <returns>The exported object with the contract name derived from the specified type parameter.</returns>
      <typeparam name="T">The type of the exported object to return. The contract name is also derived from this type parameter.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There are zero exported objects with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.-or-There is more than one exported object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">The underlying exported object cannot be cast to <paramref name="T" />.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)">
      <summary>Returns the exported object with the specified contract name. If there is not exactly one matching exported object, an exception is thrown.</summary>
      <returns>The exported object with the specified contract name.</returns>
      <param name="contractName">The contract name of the exported object to return, or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type of the exported object to return.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There are zero exported objects with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.-or-There is more than one exported object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">The underlying exported object cannot be cast to <paramref name="T" />.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1">
      <summary>Gets the exported object with the contract name derived from the specified type parameter or the default value for the specified type, or throws an exception if there is more than one matching exported object.</summary>
      <returns>The exported object with the contract name derived from <paramref name="T" />, if found; otherwise, the default value for <paramref name="T" />.</returns>
      <typeparam name="T">The type of the exported object to return. The contract name is also derived from this type parameter.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There is more than one exported object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">The underlying exported object cannot be cast to <paramref name="T" />.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)">
      <summary>Gets the exported object with the specified contract name or the default value for the specified type, or throws an exception if there is more than one matching exported object.</summary>
      <returns>The exported object with the specified contract name, if found; otherwise, the default value for <paramref name="T" />.</returns>
      <param name="contractName">The contract name of the exported object to return, or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type of the exported object to return.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There is more than one exported object with the specified contract name in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">The underlying exported object cannot be cast to <paramref name="T" />.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1">
      <summary>Gets all the exported objects with the contract name derived from the specified type parameter.</summary>
      <returns>The exported objects with the contract name derived from the specified type parameter, if found; otherwise, an empty <see cref="T:System.Collections.ObjectModel.Collection`1" /> object.</returns>
      <typeparam name="T">The type of the exported object to return. The contract name is also derived from this type parameter.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">One or more of the underlying exported objects cannot be cast to <paramref name="T" />.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)">
      <summary>Gets all the exported objects with the specified contract name.</summary>
      <returns>The exported objects with the specified contract name, if found; otherwise, an empty <see cref="T:System.Collections.ObjectModel.Collection`1" /> object.</returns>
      <param name="contractName">The contract name of the exported objects to return; or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type of the exported object to return.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">One or more of the underlying exported values cannot be cast to <paramref name="T" />.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2">
      <summary>Gets all the exports with the contract name derived from the specified type parameter.</summary>
      <returns>The <see cref="T:System.Lazy`2" /> objects with the contract name derived from <paramref name="T" />, if found; otherwise, an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> object.</returns>
      <typeparam name="T">The type parameter of the <see cref="T:System.Lazy`2" /> objects to return. The contract name is also derived from this type parameter.</typeparam>
      <typeparam name="TMetadataView">The type of the metadata view of the <see cref="T:System.Lazy`2" /> objects to return.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="TMetadataView" /> is not a valid metadata view type.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1">
      <summary>Gets all the exports with the contract name derived from the specified type parameter.</summary>
      <returns>The <see cref="T:System.Lazy`1" /> objects with the contract name derived from <paramref name="T" />, if found; otherwise, an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> object.</returns>
      <typeparam name="T">The type parameter of the <see cref="T:System.Lazy`1" /> objects to return. The contract name is also derived from this type parameter.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets all exports that match the conditions of the specified import definition.</summary>
      <returns>A collection of all the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects matching the condition specified by <paramref name="definition" />.</returns>
      <param name="definition">The object that defines the conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to get.</param>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
        <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> and there are zero <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects that match the conditions of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.-or-<see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> or <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> and there is more than one <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object that matches the conditions of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Gets all exports that match the conditions of the specified import definition and composition.</summary>
      <returns>A collection of all the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects matching the condition specified by <paramref name="definition" /> and <paramref name="atomicComposition" />.</returns>
      <param name="definition">The object that defines the conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to get.</param>
      <param name="atomicComposition">The transactional container for the composition.</param>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
        <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> and there are zero <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects that match the conditions of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.-or-<see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> or <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> and there is more than one <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object that matches the conditions of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.-or-<paramref name="atomicComposition" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)">
      <summary>Gets all the exports with the specified contract name.</summary>
      <returns>The <see cref="T:System.Lazy`1" /> objects with the specified contract name, if found; otherwise, an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> object.</returns>
      <param name="contractName">The contract name of the <see cref="T:System.Lazy`1" /> objects to return, or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type parameter of the <see cref="T:System.Lazy`1" /> objects to return.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2(System.String)">
      <summary>Gets all the exports with the specified contract name.</summary>
      <returns>The <see cref="T:System.Lazy`2" /> objects with the specified contract name if found; otherwise, an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> object.</returns>
      <param name="contractName">The contract name of the <see cref="T:System.Lazy`2" /> objects to return, or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type parameter of the <see cref="T:System.Lazy2" /> objects to return. The contract name is also derived from this type parameter.</typeparam>
      <typeparam name="TMetadataView">The type of the metadata view of the <see cref="T:System.Lazy`2" /> objects to return.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="TMetadataView" /> is not a valid metadata view type.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.Type,System.Type,System.String)">
      <summary>Gets all the exports with the specified contract name.</summary>
      <returns>A collection of all the <see cref="T:System.Lazy`2" /> objects for the contract matching <paramref name="contractName" />.</returns>
      <param name="type">The type parameter of the <see cref="T:System.Lazy`2" /> objects to return.</param>
      <param name="metadataViewType">The type of the metadata view of the <see cref="T:System.Lazy`2" /> objects to return.</param>
      <param name="contractName">The contract name of the <see cref="T:System.Lazy`2" /> object to return, or null or an empty string ("") to use the default contract name.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="metadataViewType" /> is not a valid metadata view type.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Gets all the exports that match the constraint defined by the specified definition.</summary>
      <returns>A collection that contains all the exports that match the specified condition.</returns>
      <param name="definition">The object that defines the conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to return.</param>
      <param name="atomicComposition">The transactional container for the composition.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanged(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanging(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" /> event.</summary>
      <param name="e">An <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.TryGetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export}@)">
      <summary>Gets all the exports that match the conditions of the specified import.</summary>
      <returns>true
            if <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> or <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrMore" /> and there are zero <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects that match the conditions of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />; true if <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> or <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> and there is exactly one <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> that matches the conditions of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />; otherwise, false.</returns>
      <param name="definition">The object that defines the conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to get.</param>
      <param name="atomicComposition">The transactional container for the composition.</param>
      <param name="exports">When this method returns, contains a collection of <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects that match the conditions defined by <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />, if found; otherwise, an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> object. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs">
      <summary>Provides data for the <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" /> and <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" /> event. </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition},System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" /> class. </summary>
      <param name="addedExports">The events that were added.</param>
      <param name="removedExports">The events that were removed.</param>
      <param name="atomicComposition">The composition transaction that contains the change.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.AddedExports">
      <summary>Gets the exports that were added in this change.</summary>
      <returns>A collection of the exports that were added.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.AtomicComposition">
      <summary>Gets the composition transaction of the change, if any.</summary>
      <returns>A reference to the composition transaction associated with the change, or null if no transaction is being used.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.ChangedContractNames">
      <summary>Gets the contract names that were altered in the change.</summary>
      <returns>A collection of the altered contract names.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.RemovedExports">
      <summary>Gets the exports that were removed in the change.</summary>
      <returns>A collection of the removed exports.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ImportEngine">
      <summary>Provides methods to perform composition on a specific part or parts.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> class. </summary>
      <param name="sourceProvider">The <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> that provides the <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> class, optionally in thread-safe mode.</summary>
      <param name="sourceProvider">The <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> that provides the <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</param>
      <param name="isThreadSafe">true if thread safety is required; otherwise, false.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.PreviewImports(System.ComponentModel.Composition.Primitives.ComposablePart,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Previews all the required imports for the specified part to make sure that they can be satisfied, without actually setting them.</summary>
      <param name="part">The part to preview the imports of.</param>
      <param name="atomicComposition">The composition transaction to use, or null for no composition transaction.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.ReleaseImports(System.ComponentModel.Composition.Primitives.ComposablePart,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Releases all the exports used to satisfy the imports of the specified part.</summary>
      <param name="part">The part to release the imports of.</param>
      <param name="atomicComposition">The composition transaction to use, or null for no composition transaction.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.SatisfyImports(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>Satisfies the imports of the specified part.</summary>
      <param name="part">The part to satisfy the imports of.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>Satisfies the imports of the specified part without registering them for recomposition.</summary>
      <param name="part">The part to satisfy the imports of.</param>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged">
      <summary>Provides notifications when a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> changes.</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changed">
      <summary>Occurs when a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> has changed.</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changing">
      <summary>Occurs when a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> is changing.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.TypeCatalog">
      <summary>An immutable <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> object that is created from a type array or a list of managed types. </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> class with the specified types.</summary>
      <param name="types">A collection of attributed <see cref="T:System.Type" /> objects to add to the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> contains an element that is null.-or-<paramref name="types" /> contains an element that was loaded in the reflection-only context.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Type[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> class with the specified types.</summary>
      <param name="types">An array of attributed <see cref="T:System.Type" /> objects to add to the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> contains an element that is null.-or-<paramref name="types" /> contains an element that was loaded in the reflection-only context.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets a collection of exports that match the conditions specified by the import definition.</summary>
      <returns>A collection of exports that match the conditions specified by <paramref name="definition" />.</returns>
      <param name="definition">Conditions that specify which exports to match.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.TypeCatalog.Parts">
      <summary>Gets the part definitions that are contained in the catalog.</summary>
      <returns>The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects that are contained in the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> object.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> object has been disposed of.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.TypeCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName">
      <summary>Gets the display name of the type catalog.</summary>
      <returns>A string containing a human-readable display name of the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.TypeCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin">
      <summary>Gets the composition element from which the type catalog originated.</summary>
      <returns>Always null. </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.ToString">
      <summary>Returns a string representation of the type catalog.</summary>
      <returns>A string representation of the type catalog.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ComposablePart">
      <summary>Defines the abstract base class for composable parts, which import objects and produce exported objects.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePart.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePart.Activate">
      <summary>Called when all the imports of the part have been set, and exports can be retrieved.</summary>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePart.ExportDefinitions">
      <summary>Gets a collection of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects that describe the exported objects provided by the part.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects that describe the exported objects provided by the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePart.GetExportedValue(System.ComponentModel.Composition.Primitives.ExportDefinition)">
      <summary>Gets the exported object described by the specified <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> object.</summary>
      <returns>The exported object described by <paramref name="definition" />.</returns>
      <param name="definition">One of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects from the <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePart.ExportDefinitions" /> property that describes the exported object to return.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.</exception>
      <exception cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException">An error occurred getting the exported object described by the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="definition" /> did not originate from the <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePart.ExportDefinitions" /> property on the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />.</exception>
      <exception cref="T:System.InvalidOperationException">One or more prerequisite imports, indicated by <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.IsPrerequisite" />, have not been set.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePart.ImportDefinitions">
      <summary>Gets a collection of the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> objects that describe the imported objects required by the part.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> objects that describe the imported objects required by the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object has been disposed of.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePart.Metadata">
      <summary>Gets the metadata of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object.</summary>
      <returns>The metadata of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object. The default is an empty, read-only <see cref="T:System.Collections.Generic.IDictionary`2" /> object. </returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePart.SetImport(System.ComponentModel.Composition.Primitives.ImportDefinition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})">
      <summary>Sets the import described by the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> object to be satisfied by the specified exports.</summary>
      <param name="definition">One of the objects from the <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePart.ImportDefinitions" /> property that specifies the import to be set.</param>
      <param name="exports">A collection of <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects of which to set the import described by <paramref name="definition" />.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null. -or- <paramref name="exports" /> is null.</exception>
      <exception cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException">An error occurred setting the import described by the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> object.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="definition" /> did not originate from the <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePart.ImportDefinitions" /> property on the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />. -or- <paramref name="exports" /> contains an element that is null. -or- <paramref name="exports" /> is empty and <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" />. -or- <paramref name="exports" /> contains more than one element and <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> or <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.ComponentModel.Composition.Primitives.ComposablePart.SetImport(System.ComponentModel.Composition.Primitives.ImportDefinition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})" /> has been previously called and <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.IsRecomposable" /> is false.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog">
      <summary>Represents the abstract base class for composable part catalogs, which collect and return <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets a list of export definitions that match the constraint defined by the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> object.</summary>
      <returns>A collection of <see cref="T:System.Tuple`2" /> containing the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects and their associated <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects for objects that match the constraint specified by <paramref name="definition" />.</returns>
      <param name="definition">The conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects to be returned.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> object has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Parts">
      <summary>Gets the part definitions that are contained in the catalog.</summary>
      <returns>The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> contained in the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> object has been disposed of.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition">
      <summary>Defines an abstract base class for composable part definitions, which describe and enable the creation of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.CreatePart">
      <summary>Creates a new instance of a part that the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> describes.</summary>
      <returns>The created part.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.ExportDefinitions">
      <summary>Gets a collection of <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects that describe the objects exported by the part defined by this <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> object.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects that describe the exported objects provided by <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects created by the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.ImportDefinitions">
      <summary>Gets a collection of <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> objects that describe the imports required by the part defined by this <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> object.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> objects that describe the imports required by <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects created by the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.Metadata">
      <summary>Gets a collection of the metadata for this <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> object.</summary>
      <returns>A collection that contains the metadata for the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />. The default is an empty, read-only <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ComposablePartException">
      <summary>The exception that is thrown when an error occurs when calling methods on a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> class with the specified serialization data.</summary>
      <param name="info">An object that holds the serialized object data for the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />.</param>
      <param name="context">An object that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <paramref name="info" /> is missing a required value.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="info" /> contains a value that cannot be cast to the correct type.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> class with the specified error message.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.Exception.Message" /> property to its default value.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> class with the specified error message and the composition element that is the cause of the exception.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.Exception.Message" /> property to its default value.</param>
      <param name="element">The composition element that is the cause of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePartException.Element" /> property to null.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> class with the specified error message, and the composition element and exception that are the cause of this exception.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.Exception.Message" /> property to its default value.</param>
      <param name="element">The composition element that is the cause of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePartException.Element" /> property to null.</param>
      <param name="innerException">The exception that is the underlying cause of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.Exception.InnerException" /> property to null.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> class with the specified error message and the exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.Exception.Message" /> property to its default value.</param>
      <param name="innerException">The exception that is the underlying cause of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.Exception.InnerException" /> property to null.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartException.Element">
      <summary>Gets the composition element that is the cause of the exception.</summary>
      <returns>The compositional element that is the cause of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />. The default is null.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Gets the serialization data for the exception.</summary>
      <param name="info">After calling the method, contains serialized object data about the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />.</param>
      <param name="context">After calling the method, contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition">
      <summary>Represents an import that is required by a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object and that can specify both a contract name and metadata.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.Boolean,System.ComponentModel.Composition.CreationPolicy)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" /> class with the specified contract name, required type identity, required metadata, cardinality, a value that indicates if the import definition is recomposable, a value that indicates if the import definition is a prerequisite, and a value that indicates the required creation policy.</summary>
      <param name="contractName">A string that contains the contract name of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object required by the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" />.</param>
      <param name="requiredTypeIdentity">The type identity of the export type expected. Use the <see cref="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Type)" /> method to generate a type identity for a given type. If no specific type is required, use null.</param>
      <param name="requiredMetadata">A collection of key/value pairs containing the metadata names and types required by the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" />; or null to set the <see cref="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredMetadata" /> property to an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection.</param>
      <param name="cardinality">One of the <see cref="T:System.ComponentModel.Composition.Primitives.ImportCardinality" /> values that indicates the cardinality of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects required by the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" />.</param>
      <param name="isRecomposable">true to specify that the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" /> can be satisfied multiple times throughout the lifetime of a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />; otherwise, false.</param>
      <param name="isPrerequisite">true to specify that the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" /> is required to be satisfied before a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> can start producing exported objects; otherwise, false.</param>
      <param name="requiredCreationPolicy">A value that indicates that the importer requires a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> for the exports used to satisfy this import. If no specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> is needed, the default is <see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contractName" /> is an empty string ("").-or-<paramref name="requiredMetadata" /> contains an element that is null.-or-<paramref name="cardinality" /> is not one of the <see cref="T:System.ComponentModel.Composition.Primitives.ImportCardinality" /> values.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.Constraint">
      <summary>Gets an expression that defines conditions that must be matched to satisfy the import described by this import definition.</summary>
      <returns>An expression that contains a <see cref="T:System.Func`2" /> object that defines the conditions that must be matched for the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> to be satisfied by an <see cref="T:System.ComponentModel.Composition.Primitives.Export" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.IsConstraintSatisfiedBy(System.ComponentModel.Composition.Primitives.ExportDefinition)">
      <summary>Returns a value indicating whether the constraint represented by this object is satisfied by the export represented by the given export definition.</summary>
      <returns>true if the constraint is satisfied; otherwise, false.</returns>
      <param name="exportDefinition">The export definition to test.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredCreationPolicy">
      <summary>Gets or sets a value that indicates that the importer requires a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> for the exports used to satisfy this import. </summary>
      <returns>One of the following values:<see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />, if the importer does not require a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" />.<see cref="F:System.ComponentModel.Composition.CreationPolicy.Shared" /> to require that all exports used should be shared by all importers in the container.<see cref="F:System.ComponentModel.Composition.CreationPolicy.NonShared" /> to require that all exports used should be non-shared in the container. In this case, each importer receives a separate instance.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredMetadata">
      <summary>Gets the metadata names of the export required by the import definition.</summary>
      <returns>A collection of <see cref="T:System.String" /> objects that contain the metadata names of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects required by the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" />. The default is an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredTypeIdentity">
      <summary>Gets the expected type of the export that matches this <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" />.</summary>
      <returns>A string that is generated by calling the <see cref="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Type)" /> method on the type that this import expects. If the value is null then this import does not expect a particular type.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.Export">
      <summary>Represents an export, which is a type that consists of a delay-created exported object and the metadata that describes that object.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.#ctor(System.ComponentModel.Composition.Primitives.ExportDefinition,System.Func{System.Object})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> class with the specified export definition and exported object getter.</summary>
      <param name="definition">An object that describes the contract that the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object satisfies.</param>
      <param name="exportedValueGetter">A method that is called to create the exported object of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" />. This delays the creation of the object until the <see cref="M:System.ComponentModel.Composition.Primitives.Export.Value" /> property is called. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.-or-<paramref name="exportedObjectGetter" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Func{System.Object})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> class with the specified contract name, metadata, and exported value getter.</summary>
      <param name="contractName">The contract name of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object.</param>
      <param name="metadata">The metadata of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object or null to set the <see cref="P:System.ComponentModel.Composition.Primitives.Export.Metadata" /> property to an empty, read-only <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</param>
      <param name="exportedValueGetter">A method that is called to create the exported object of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" />. This delays the creation of the object until the <see cref="M:System.ComponentModel.Composition.Primitives.Export.Value" /> method is called.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractName" /> is null.-or-<paramref name="exportedObjectGetter" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contractName" /> is an empty string ("").</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.#ctor(System.String,System.Func{System.Object})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> class with the specified contract name and exported value getter.</summary>
      <param name="contractName">The contract name of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object.</param>
      <param name="exportedValueGetter">A method that is called to create the exported object of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" />. This delays the creation of the object until the <see cref="M:System.ComponentModel.Composition.Primitives.Export.Value" /> method is called.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractName" /> is null.-or-<paramref name="exportedObjectGetter" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contractName" /> is an empty string ("").</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.Export.Definition">
      <summary>Gets the definition that describes the contract that the export satisfies.</summary>
      <returns>A definition that describes the contract that the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object satisfies.</returns>
      <exception cref="T:System.NotImplementedException">This property was not overridden by a derived class.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.GetExportedValueCore">
      <summary>Returns the exported object the export provides.</summary>
      <returns>The exported object the export provides.</returns>
      <exception cref="T:System.NotImplementedException">The <see cref="M:System.ComponentModel.Composition.Primitives.Export.GetExportedValueCore" /> method was not overridden by a derived class.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.Export.Metadata">
      <summary>Gets the metadata for the export.</summary>
      <returns>The metadata of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" />.</returns>
      <exception cref="T:System.NotImplementedException">The <see cref="P:System.ComponentModel.Composition.Primitives.Export.Definition" /> property was not overridden by a derived class.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.Export.Value">
      <summary>Provides the object this export represents.</summary>
      <returns>The object this export represents.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ExportDefinition">
      <summary>Describes the contract that a particular <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object satisfies.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportDefinition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportDefinition.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> class with the specified contract name and metadata.</summary>
      <param name="contractName">The contract name of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> object.</param>
      <param name="metadata">The metadata of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> or null to set the <see cref="P:System.ComponentModel.Composition.Primitives.ExportDefinition.Metadata" /> property to an empty, read-only <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contractName" /> is an empty string ("").</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ExportDefinition.ContractName">
      <summary>Gets the contract name.</summary>
      <returns>The contract name of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> object.</returns>
      <exception cref="T:System.NotImplementedException">The property was not overridden by a derived class.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ExportDefinition.Metadata">
      <summary>Gets the contract metadata.</summary>
      <returns>The metadata of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" />. The default is an empty, read-only <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportDefinition.ToString">
      <summary>Returns a string representation of the export definition.</summary>
      <returns>A string representation of the export definition.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ExportedDelegate">
      <summary>Represents a function exported by a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportedDelegate.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportedDelegate" /> class. </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportedDelegate.#ctor(System.Object,System.Reflection.MethodInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportedDelegate" /> class for the specified part and method. </summary>
      <param name="instance">The part exporting the method.</param>
      <param name="method">The method to be exported.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportedDelegate.CreateDelegate(System.Type)">
      <summary>Gets a delegate of the specified type.</summary>
      <returns>A delegate of the specified type, or null if no such delegate can be created.</returns>
      <param name="delegateType">The type of the delegate to return.</param>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ICompositionElement">
      <summary>Represents an element that participates in composition.</summary>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ICompositionElement.DisplayName">
      <summary>Gets the display name of the composition element.</summary>
      <returns>The human-readable display name of the <see cref="T:System.ComponentModel.Composition.Primitives.ICompositionElement" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ICompositionElement.Origin">
      <summary>Gets the composition element from which the current composition element originated.</summary>
      <returns>The composition element from which the current <see cref="T:System.ComponentModel.Composition.Primitives.ICompositionElement" /> originated, or null if the <see cref="T:System.ComponentModel.Composition.Primitives.ICompositionElement" /> is the root composition element.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ImportCardinality">
      <summary>Indicates the cardinality of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects required by an <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne">
      <summary>Zero or one <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects are required by the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne">
      <summary>Exactly one <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object is required by the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrMore">
      <summary>Zero or more <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects are required by the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ImportDefinition">
      <summary>Represents an import that is required by a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ImportDefinition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ImportDefinition.#ctor(System.Linq.Expressions.Expression{System.Func{System.ComponentModel.Composition.Primitives.ExportDefinition,System.Boolean}},System.String,System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> class with the specified constraint, contract name, cardinality, a value that indicates whether the import definition is recomposable, and a value that indicates whether the import definition is a prerequisite.</summary>
      <param name="constraint">An expression that contains a <see cref="T:System.Func`2" /> object that defines the conditions an <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> must match to satisfy the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</param>
      <param name="contractName">The contract name.</param>
      <param name="cardinality">One of the enumeration values that indicates the cardinality of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects required by the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</param>
      <param name="isRecomposable">true to specify that the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> can be satisfied multiple times throughout the lifetime of a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object; otherwise, false.</param>
      <param name="isPrerequisite">true to specify that the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> must be satisfied before a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> can start producing exported objects; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constraint" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="cardinality" /> is not one of the values of <see cref="T:System.ComponentModel.Composition.Primitives.ImportCardinality" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality">
      <summary>Gets the cardinality of the exports required by the import definition.</summary>
      <returns>One of the enumeration values that indicates the cardinality of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects required by the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />. The default is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Constraint">
      <summary>Gets an expression that defines conditions that the import must satisfy to match the import definition.</summary>
      <returns>An expression that contains a <see cref="T:System.Func`2" /> object that defines the conditions an <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> must satisfy to match the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</returns>
      <exception cref="T:System.NotImplementedException">The property was not overridden by a derived class.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.ContractName">
      <summary>Gets the name of the contract.</summary>
      <returns>The contract name.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ImportDefinition.IsConstraintSatisfiedBy(System.ComponentModel.Composition.Primitives.ExportDefinition)">
      <summary>Gets a value that indicates whether the export represented by the specified definition satisfies the constraints of this import definition.</summary>
      <returns>true if the constraints are satisfied; otherwise, false.</returns>
      <param name="exportDefinition">The export definition to test.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.IsPrerequisite">
      <summary>Gets a value that indicates whether the import definition must be satisfied before a part can start producing exported objects.</summary>
      <returns>true if the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> must be satisfied before a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object can start producing exported objects; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.IsRecomposable">
      <summary>Gets a value that indicates whether the import definition can be satisfied multiple times.</summary>
      <returns>true if the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> can be satisfied multiple times throughout the lifetime of a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ImportDefinition.ToString">
      <summary>Returns a string representation of the import definition.</summary>
      <returns>A string representation of the import definition.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo">
      <summary>Represents a <see cref="T:System.Reflection.MemberInfo" /> object that does not load assemblies or create objects until requested.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.#ctor(System.Reflection.MemberInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" /> class, representing the specified member.</summary>
      <param name="member">The member to represent.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.#ctor(System.Reflection.MemberTypes,System.Func{System.Reflection.MemberInfo[]})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" /> class for a member of the specified type with the specified accessors.</summary>
      <param name="memberType">The type of the represented member.</param>
      <param name="accessorsCreator">A function whose return value is a collection of the accessors for the represented member.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.#ctor(System.Reflection.MemberTypes,System.Reflection.MemberInfo[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" /> class for a member of the specified type with the specified accessors.</summary>
      <param name="memberType">The type of the represented member.</param>
      <param name="accessors">An array of the accessors for the represented member.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.Equals(System.Object)">
      <param name="obj">The other object.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.GetAccessors">
      <summary>Gets an array of the accessors for the represented member.</summary>
      <returns>An array of the accessors for the represented member.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.GetHashCode"></member>
    <member name="P:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.MemberType">
      <summary>Gets the type of the represented member.</summary>
      <returns>The type of the represented member.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.op_Equality(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo)">
      <summary>Determines whether the two specified <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" /> objects are equal.</summary>
      <returns>true if the objects are equal; otherwise, false.</returns>
      <param name="left">The first object to test.</param>
      <param name="right">The second object to test.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.op_Inequality(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo)">
      <summary>Determines whether the two specified <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" /> objects are not equal.</summary>
      <returns>true if the objects are equal; otherwise, false.</returns>
      <param name="left">The first object to test.</param>
      <param name="right">The second object to test.</param>
    </member>
    <member name="T:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices">
      <summary>Provides extension methods to create and retrieve reflection-based parts.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateExportDefinition(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.String,System.Lazy{System.Collections.Generic.IDictionary{System.String,System.Object}},System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Creates an export definition from the specified member, with the specified contract name, metadata, and origin.</summary>
      <returns>An export definition created from the specified parameters.</returns>
      <param name="exportingMember">The member to export.</param>
      <param name="contractName">The contract name to use for the export.</param>
      <param name="metadata">The metadata for the export.</param>
      <param name="origin">The object that the export originates from.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.ComponentModel.Composition.CreationPolicy,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Creates an import definition for the specified member, with the specified contract name, type identity, required metadata, cardinality, recomposition policy, creation policy, and origin.</summary>
      <returns>An import definition created from the specified parameters.</returns>
      <param name="importingMember">The member to import into.</param>
      <param name="contractName">The contract name to use for the import.</param>
      <param name="requiredTypeIdentity">The required type identity for the import.</param>
      <param name="requiredMetadata">The required metadata for the import.</param>
      <param name="cardinality">The cardinality of the import.</param>
      <param name="isRecomposable">A value that indicates whether the import is recomposable.</param>
      <param name="requiredCreationPolicy">A value that indicates the import's creation policy.</param>
      <param name="origin">The object to import into.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.Lazy{System.Reflection.ParameterInfo},System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.ComponentModel.Composition.CreationPolicy,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Creates an import definition for the specified parameter, with the specified contract name, type identity, required metadata, cardinality, creation policy, and origin.</summary>
      <returns>An import definition created from the specified parameters.</returns>
      <param name="parameter">The parameter to import.</param>
      <param name="contractName">The contract name to use for the import.</param>
      <param name="requiredTypeIdentity">The required type identity for the import.</param>
      <param name="requiredMetadata">The required metadata for the import.</param>
      <param name="cardinality">The cardinality of the import.</param>
      <param name="requiredCreationPolicy">A value that indicates the import's creation policy.</param>
      <param name="origin">The object to import into.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreatePartDefinition(System.Lazy{System.Type},System.Boolean,System.Lazy{System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ImportDefinition}},System.Lazy{System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition}},System.Lazy{System.Collections.Generic.IDictionary{System.String,System.Object}},System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Creates a part definition with the specified part type, imports, exports, metadata, and origin.</summary>
      <returns>A part definition created from the specified parameters.</returns>
      <param name="partType">The type of the part.</param>
      <param name="isDisposalRequired">true if the part requires disposal; otherwise, false.</param>
      <param name="imports">A collection of the part's imports.</param>
      <param name="exports">A collection of the part's exports.</param>
      <param name="metadata">The part's metadata.</param>
      <param name="origin">The part's origin.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetExportingMember(System.ComponentModel.Composition.Primitives.ExportDefinition)">
      <summary>Gets the exporting member from a specified export definition.</summary>
      <returns>The member specified in the export definition.</returns>
      <param name="exportDefinition">The export definition to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetImportingMember(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets the importing member from a specified import definition.</summary>
      <returns>The member specified in the import definition.</returns>
      <param name="importDefinition">The import definition to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetImportingParameter(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets the importing parameter from a specified import definition.</summary>
      <returns>The parameter specified in the import definition.</returns>
      <param name="importDefinition">The import definition to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetPartType(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)">
      <summary>Gets the type of a part from a specified part definition.</summary>
      <returns>The type of the defined part.</returns>
      <param name="partDefinition">The part definition to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.IsDisposalRequired(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)">
      <summary>Determines whether the specified part requires disposal.</summary>
      <returns>true if the part requires disposal; otherwise, false.</returns>
      <param name="partDefinition">The part to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.IsImportingParameter(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Determines whether an import definition represents a member or a parameter.</summary>
      <returns>true if the import definition represents a parameter; otherwise, false.</returns>
      <param name="importDefinition">The import definition to examine.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.ComponentModel.DataAnnotations.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.DataAnnotations</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider">
      <summary>Extends the metadata information for a class by adding attributes and property information that is defined in an associated class.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider" /> class by using the specified type.</summary>
      <param name="type">The type for which the metadata provider is created.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider.#ctor(System.Type,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider" /> class by using the specified metadata provider type and associated type.</summary>
      <param name="type">The type for which the metadata provider is created.</param>
      <param name="associatedMetadataType">The associated type that contains the metadata.</param>
      <exception cref="ArgumentNullException">The value of <paramref name="associatedMetadataType" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary>Gets a type descriptor for the specified type and object.</summary>
      <returns>The descriptor that provides metadata for the type.</returns>
      <param name="objectType">The type of object to retrieve the type descriptor for.</param>
      <param name="instance">An instance of the type. </param>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.AssociationAttribute">
      <summary>Represents an attribute that is used to specify that an entity property participates in an association.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.AssociationAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.AssociationAttribute" /> class</summary>
      <param name="name">The name of the association.</param>
      <param name="thisKey">A comma-separated list of the property names of the key values on the <paramref name="thisKey" /> side of the association.</param>
      <param name="otherKey">A comma-separated list of the property names of the key values on the <paramref name="otherKey" /> side of the association.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.IsForeignKey">
      <summary>Gets or sets a value that indicates whether the association member represents a foreign key.</summary>
      <returns>true if the association represents a foreign key; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.Name">
      <summary>Gets the name of the association.</summary>
      <returns>The name of the association.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.OtherKey">
      <summary>Gets the property names of the key values on the OtherKey side of the association.</summary>
      <returns>A comma-separated list of the property names that represent the key values on the OtherKey side of the association.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.OtherKeyMembers">
      <summary>Gets a collection of individual key members that are specified in the <see cref="P:System.ComponentModel.DataAnnotations.AssociationAttribute.OtherKey" /> property.</summary>
      <returns>A collection of individual key members that are specified in the <see cref="P:System.ComponentModel.DataAnnotations.AssociationAttribute.OtherKey" /> property.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.ThisKey">
      <summary>Gets the property names of the key values on the ThisKey side of the association.</summary>
      <returns>A comma-separated list of the property names that represent the key values on the ThisKey side of the association.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.ThisKeyMembers">
      <summary>Gets a collection of individual key members that are specified in the <see cref="P:System.ComponentModel.DataAnnotations.AssociationAttribute.ThisKey" /> property.</summary>
      <returns>A collection of individual key members that are specified in the <see cref="P:System.ComponentModel.DataAnnotations.AssociationAttribute.ThisKey" /> property.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute">
      <summary>Specifies the data type of the column that is used for optimistic concurrency checks.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute" /> class.</summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.CustomValidationAttribute">
      <summary>Specifies a custom validation method to call at run time.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.CustomValidationAttribute.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.CustomValidationAttribute" /> class.</summary>
      <param name="validatorType">The type that contains the method that performs custom validation.</param>
      <param name="method">The method that performs custom validation.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.CustomValidationAttribute.FormatErrorMessage(System.String)">
      <summary>Formats a validation error message.</summary>
      <returns>An instance of the formatted error message.</returns>
      <param name="name">The name to include in the formatted message.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.CustomValidationAttribute.Method">
      <summary>Gets the validation method.</summary>
      <returns>The name of the validation method.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.CustomValidationAttribute.TypeId">
      <summary>Gets a unique identifier for this attribute.</summary>
      <returns>The object that identifies this attribute.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.CustomValidationAttribute.ValidatorType">
      <summary>Gets the type that performs custom validation.</summary>
      <returns>The type that performs custom validation.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DataType">
      <summary>Represents an enumeration of the data types associated with data fields and parameters. </summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Custom">
      <summary>Represents a custom data type.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.DateTime">
      <summary>Represents an instant in time, expressed as a date and time of day.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Date">
      <summary>Represents a date value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Time">
      <summary>Represents a time value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Duration">
      <summary>Represents a continuous time during which an object exists.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.PhoneNumber">
      <summary>Represents a phone number value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Currency">
      <summary>Represents a currency value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Text">
      <summary>Represents text that is displayed.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Html">
      <summary>Represents an HTML file.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.MultilineText">
      <summary>Represents multi-line text.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.EmailAddress">
      <summary>Represents an e-mail address.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Password">
      <summary>Represent a password value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Url">
      <summary>Represents a URL value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.ImageUrl">
      <summary>Represents a URL to an image.</summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DataTypeAttribute">
      <summary>Specifies the name of an additional type to associate with a data field.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.#ctor(System.ComponentModel.DataAnnotations.DataType)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DataTypeTypeAttribute" /> class by using the specified type name.</summary>
      <param name="dataType">The name of the type to associate with the data field.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DataTypeTypeAttribute" /> class by using the specified field template name.</summary>
      <param name="customDataType">The name of the custom field template to associate with the data field.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="customDataType" /> is null or an empty string (""). </exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.CustomDataType">
      <summary>Gets the name of custom field template that is associated with the data field.</summary>
      <returns>The name of the custom field template that is associated with the data field.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DataType">
      <summary>Gets the type that is associated with the data field.</summary>
      <returns>One of the <see cref="T:System.ComponentModel.DataAnnotations.DataType" /> values.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DisplayFormat">
      <summary>Gets a data-field display format.</summary>
      <returns>The data-field display format.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.GetDataTypeName">
      <summary>Returns the name of the type that is associated with the data field.</summary>
      <returns>The name of the type associated with the data field.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.IsValid(System.Object)">
      <summary>Checks that the value of the data field is valid.</summary>
      <returns>true always.</returns>
      <param name="value">The data field value to validate.</param>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DisplayAttribute">
      <summary>Provides a general-purpose attribute that lets you specify localizable strings for types and members of entity partial classes.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute" /> class.</summary>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateField">
      <summary>Gets or sets a value that indicates whether UI should be generated automatically in order to display this field.</summary>
      <returns>true if UI should be generated automatically to display this field; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">An attempt was made to get the property value before it was set.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateFilter">
      <summary>Gets or sets a value that indicates whether UI should be generated automatically in order to display filtering for this field. </summary>
      <returns>true if UI should be generated automatically to display filtering for this field; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">An attempt was made to get the property value before it was set.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description">
      <summary>Gets or sets a value that is used to display a description in the UI.</summary>
      <returns>The value that is used to display a description in the UI.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetAutoGenerateField">
      <summary>Returns the value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateField" /> property.</summary>
      <returns>The value of <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateField" /> if the property has been initialized; otherwise, null.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetAutoGenerateFilter">
      <summary>Returns a value that indicates whether UI should be generated automatically in order to display filtering for this field. </summary>
      <returns>The value of <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateFilter" /> if the property has been initialized; otherwise, null.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetDescription">
      <summary>Returns the value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> property.</summary>
      <returns>The localized description, if the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> has been specified and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> property represents a resource key; otherwise, the non-localized value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> property.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> property are initialized, but a public static property that has a name that matches the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> value could not be found for the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetGroupName">
      <summary>Returns the value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" /> property.</summary>
      <returns>A value that will be used for grouping fields in the UI, if <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" /> has been initialized; otherwise, null. If the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property has been specified and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" /> property represents a resource key, a localized string is returned; otherwise, a non-localized string is returned.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetName">
      <summary>Returns a value that is used for field display in the UI.</summary>
      <returns>The localized string for the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" /> property, if the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property has been specified and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" /> property represents a resource key; otherwise, the non-localized value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" /> property.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" /> property are initialized, but a public static property that has a name that matches the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" /> value could not be found for the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetOrder">
      <summary>Returns the value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order" /> property.</summary>
      <returns>The value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order" /> property, if it has been set; otherwise, null.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetPrompt">
      <summary>Returns the value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" /> property.</summary>
      <returns>Gets the localized string for the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" /> property if the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property has been specified and if the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" /> property represents a resource key; otherwise, the non-localized value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" /> property.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetShortName">
      <summary>Returns the value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" /> property.</summary>
      <returns>The localized string for the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" /> property if the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property has been specified and if the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" /> property represents a resource key; otherwise, the non-localized value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" /> value property.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName">
      <summary>Gets or sets a value that is used to group fields in the UI.</summary>
      <returns>A value that is used to group fields in the UI.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name">
      <summary>Gets or sets a value that is used for display in the UI.</summary>
      <returns>A value that is used for display in the UI.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order">
      <summary>Gets or sets the order weight of the column.</summary>
      <returns>The order weight of the column.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt">
      <summary>Gets or sets a value that will be used to set the watermark for prompts in the UI.</summary>
      <returns>A value that will be used to display a watermark in the UI.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType">
      <summary>Gets or sets the type that contains the resources for the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" />, <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" />, <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" />, and <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> properties.</summary>
      <returns>The type of the resource that contains the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" />, <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" />, <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" />, and <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> properties.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName">
      <summary>Gets or sets a value that is used for the grid column label.</summary>
      <returns>A value that is for the grid column label.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute">
      <summary>Specifies the column that is displayed in the referred table as a foreign-key column.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute" /> class by using the specified column. </summary>
      <param name="displayColumn">The name of the column to use as the display column.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute" /> class by using the specified display and sort columns. </summary>
      <param name="displayColumn">The name of the column to use as the display column.</param>
      <param name="sortColumn">The name of the column to use for sorting.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute" /> class by using the specified display column, and the specified sort column and sort order. </summary>
      <param name="displayColumn">The name of the column to use as the display column.</param>
      <param name="sortColumn">The name of the column to use for sorting.</param>
      <param name="sortDescending">true to sort in descending order; otherwise, false. The default is false.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.DisplayColumn">
      <summary>Gets the name of the column to use as the display field.</summary>
      <returns>The name of the display column.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.SortColumn">
      <summary>Gets the name of the column to use for sorting.</summary>
      <returns>The name of the sort column.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.SortDescending">
      <summary>Gets a value that indicates whether to sort in descending or ascending order.</summary>
      <returns>true if the column will be sorted in descending order; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DisplayFormatAttribute">
      <summary>Specifies how data fields are displayed and formatted by ASP.NET Dynamic Data.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayFormatAttribute" /> class. </summary>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.ApplyFormatInEditMode">
      <summary>Gets or sets a value that indicates whether the formatting string that is specified by the <see cref="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString" /> property is applied to the field value when the data field is in edit mode.</summary>
      <returns>true if the formatting string applies to the field value in edit mode; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.ConvertEmptyStringToNull">
      <summary>Gets or sets a value that indicates whether empty string values ("") are automatically converted to null when the data field is updated in the data source.</summary>
      <returns>true if empty string values are automatically converted to null; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString">
      <summary>Gets or sets the display format for the field value.</summary>
      <returns>A formatting string that specifies the display format for the value of the data field. The default is an empty string (""), which indicates that no special formatting is applied to the field value.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.HtmlEncode">
      <summary>Gets or sets a value that indicates whether the field should be HTML-encoded.</summary>
      <returns>true if the field should be HTML-encoded; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.NullDisplayText">
      <summary>Gets or sets the text that is displayed for a field when the field's value is null.</summary>
      <returns>The text that is displayed for a field when the field's value is null. The default is an empty string (""), which indicates that this property is not set.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.EditableAttribute">
      <summary>Indicates whether a data field is editable.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.EditableAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.EditableAttribute" /> class.</summary>
      <param name="allowEdit">true to specify that field is editable; otherwise, false.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.EditableAttribute.AllowEdit">
      <summary>Gets a value that indicates whether a field is editable.</summary>
      <returns>true if the field is editable; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.EditableAttribute.AllowInitialValue">
      <summary>Gets or sets a value that indicates whether an initial value is enabled.</summary>
      <returns>true if an initial value is enabled; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute">
      <summary>Enables a .NET Framework enumeration to be mapped to a data column.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute" /> class.</summary>
      <param name="enumType">The type of the enumeration.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute.EnumType">
      <summary>Gets or sets the enumeration type.</summary>
      <returns>The enumeration type.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute.IsValid(System.Object)">
      <summary>Checks that the value of the data field is valid.</summary>
      <returns>true if the data field value is valid; otherwise, false.</returns>
      <param name="value">The data field value to validate.</param>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute">
      <summary>Represents an attribute that is used to specify the filtering behavior for a column.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute" /> class by using the filter UI hint.</summary>
      <param name="filterUIHint">The name of the control to use for filtering.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute" /> class by using the filter UI hint and presentation layer name.</summary>
      <param name="filterUIHint">The name of the control to use for filtering.</param>
      <param name="presentationLayer">The name of the presentation layer that supports this control.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.#ctor(System.String,System.String,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute" /> class by using the filter UI hint, presentation layer name, and control parameters.</summary>
      <param name="filterUIHint">The name of the control to use for filtering.</param>
      <param name="presentationLayer">The name of the presentation layer that supports this control.</param>
      <param name="controlParameters">The list of parameters for the control.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.ControlParameters">
      <summary>Gets the name/value pairs that are used as parameters in the control's constructor.</summary>
      <returns>The name/value pairs that are used as parameters in the control's constructor.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.Equals(System.Object)">
      <summary>Returns a value that indicates whether this attribute instance is equal to a specified object.</summary>
      <returns>True if the passed object is equal to this attribute instance; otherwise, false.</returns>
      <param name="obj">The object to compare with this attribute instance.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.FilterUIHint">
      <summary>Gets the name of the control to use for filtering.</summary>
      <returns>The name of the control to use for filtering.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.GetHashCode">
      <summary>Returns the hash code for this attribute instance.</summary>
      <returns>This attribute insatnce hash code.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.PresentationLayer">
      <summary>Gets the name of the presentation layer that supports this control.</summary>
      <returns>The name of the presentation layer that supports this control.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.TypeId">
      <summary>Returns the unique identifier for this attribute instance.</summary>
      <returns>This attribuet instance unique identifier.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.IValidatableObject">
      <summary>Provides a way for an object to be invalidated.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.IValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>Determines whether the specified object is valid.</summary>
      <returns>A collection that holds failed-validation information.</returns>
      <param name="validationContext">The validation context.</param>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.KeyAttribute">
      <summary>Denotes one or more properties that uniquely identify an entity.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.KeyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute" /> class.</summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.MetadataTypeAttribute">
      <summary>Specifies the metadata class to associate with a data model class.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.MetadataTypeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.MetadataTypeAttribute" /> class.</summary>
      <param name="metadataClassType">The metadata class to reference.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="metadataClassType" /> is null. </exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.MetadataTypeAttribute.MetadataClassType">
      <summary>Gets the metadata class that is associated with a data-model partial class.</summary>
      <returns>The type value that represents the metadata class.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.RangeAttribute">
      <summary>Specifies the numeric range constraints for the value of a data field. </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" /> class by using the specified minimum and maximum values. </summary>
      <param name="minimum">Specifies the minimum value allowed for the data field value.</param>
      <param name="maximum">Specifies the maximum value allowed for the data field value.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" /> class by using the specified minimum and maximum values.</summary>
      <param name="minimum">Specifies the minimum value allowed for the data field value.</param>
      <param name="maximum">Specifies the maximum value allowed for the data field value.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Type,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" /> class by using the specified minimum and maximum values and the specific type.</summary>
      <param name="type">Specifies the type of the object to test.</param>
      <param name="minimum">Specifies the minimum value allowed for the data field value.</param>
      <param name="maximum">Specifies the maximum value allowed for the data field value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.FormatErrorMessage(System.String)">
      <summary>Formats the error message that is displayed when range validation fails.</summary>
      <returns>The formatted error message.</returns>
      <param name="name">The name of the field that caused the validation failure. </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.IsValid(System.Object)">
      <summary>Checks that the value of the data field is in the specified range.</summary>
      <returns>true if the specified value is in the range; otherwise, false.</returns>
      <param name="value">The data field value to validate.</param>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">The data field value was outside the allowed range.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RangeAttribute.Maximum">
      <summary>Gets the maximum allowed field value.</summary>
      <returns>The maximum value that is allowed for the data field.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RangeAttribute.Minimum">
      <summary>Gets the minimum allowed field value.</summary>
      <returns>The minimu value that is allowed for the data field.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RangeAttribute.OperandType">
      <summary>Gets the type of the data field whose value must be validated.</summary>
      <returns>The type of the data field whose value must be validated.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute">
      <summary>Specifies that a data field value in ASP.NET Dynamic Data must match the specified regular expression.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute" /> class.</summary>
      <param name="pattern">The regular expression that is used to validate the data field value. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.FormatErrorMessage(System.String)">
      <summary>Formats the error message to display if the regular expression validation fails.</summary>
      <returns>The formatted error message.</returns>
      <param name="name">The name of the field that caused the validation failure.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.IsValid(System.Object)">
      <summary>Checks whether the value entered by the user matches the regular expression pattern. </summary>
      <returns>true if validation is successful; otherwise, false.</returns>
      <param name="value">The data field value to validate.</param>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">The data field value did not match the regular expression pattern.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.Pattern">
      <summary>Gets the regular expression pattern.</summary>
      <returns>The pattern to match.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.RequiredAttribute">
      <summary>Specifies that a data field value is required.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> class.</summary>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RequiredAttribute.AllowEmptyStrings">
      <summary>Gets or sets a value that indicates whether an empty string is allowed.</summary>
      <returns>true if an empty string is allowed; otherwise, false. The default value is false.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RequiredAttribute.IsValid(System.Object)">
      <summary>Checks that the value of the required data field is not empty.</summary>
      <returns>true if validation is successful; otherwise, false.</returns>
      <param name="value">The data field value to validate.</param>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">The data field value was null.</exception>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute">
      <summary>Specifies whether a class or data column uses scaffolding.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of <see cref="T:System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute" /> using the <see cref="P:System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute.Scaffold" /> property.</summary>
      <param name="scaffold">The value that specifies whether scaffolding is enabled.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute.Scaffold">
      <summary>Gets or sets the value that specifies whether scaffolding is enabled.</summary>
      <returns>true, if scaffolding is enabled; otherwise false.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ScaffoldTableAttribute">
      <summary>Specifies whether a class or data table uses scaffolding.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ScaffoldTableAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of <see cref="T:System.ComponentModel.DataAnnotations.ScaffoldTableAttribute" /> using the <see cref="P:System.ComponentModel.DataAnnotations.ScaffoldTableAttribute.Scaffold" /> property.</summary>
      <param name="scaffold">The value that specifies whether scaffolding is enabled.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ScaffoldTableAttribute.Scaffold">
      <summary>Gets or sets the value that specifies whether scaffolding is enabled.</summary>
      <returns>true, if scaffolding is enabled; otherwise false.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.StringLengthAttribute">
      <summary>Specifies the minimum and maximum length of characters that are allowed in a data field.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.StringLengthAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" /> class by using a specified maximum length.</summary>
      <param name="maximumLength">The maximum length of a string. </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.StringLengthAttribute.FormatErrorMessage(System.String)">
      <summary>Applies formatting to a specified error message.</summary>
      <returns>The formatted error message.</returns>
      <param name="name">The error message to format.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumLength" /> is negative. -or-<paramref name="maximumLength" /> is less than <paramref name="minimumLength" />.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.StringLengthAttribute.IsValid(System.Object)">
      <summary>Determines whether a specified object is valid.</summary>
      <returns>true if the specified object is valid; otherwise, false.</returns>
      <param name="value">The object to validate.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumLength" /> is negative.-or-<paramref name="maximumLength" /> is less than <see cref="P:System.ComponentModel.DataAnnotations.StringLengthAttribute.MinimumLength" />.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.StringLengthAttribute.MaximumLength">
      <summary>Gets or sets the maximum length of a string.</summary>
      <returns>The maximum length a string. </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.StringLengthAttribute.MinimumLength">
      <summary>Gets or sets the minimum length of a string.</summary>
      <returns>The minimum length of a string.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.TimestampAttribute">
      <summary>Specifies the data type of the column as a row version.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.TimestampAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute" /> class.</summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.UIHintAttribute">
      <summary>Specifies the template or user control that Dynamic Data uses to display a data field. </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" /> class by using a specified user control. </summary>
      <param name="uiHint">The user control to use to display the data field. </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" /> class using the specified user control and specified presentation layer. </summary>
      <param name="uiHint">The user control (field template) to use to display the data field.</param>
      <param name="presentationLayer">The presentation layer that uses the class. Can be set to "HTML", "Silverlight", "WPF", or "WinForms".</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String,System.String,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" /> class by using the specified user control, presentation layer, and control parameters.</summary>
      <param name="uiHint">The user control (field template) to use to display the data field.</param>
      <param name="presentationLayer">The presentation layer that uses the class. Can be set to "HTML", "Silverlight", "WPF", or "WinForms".</param>
      <param name="controlParameters">The object to use to retrieve values from any data sources. </param>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters" /> is null or it is a constraint key.-or-The value of <see cref="P:System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters" /> is not a string. </exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters">
      <summary>Gets or sets the <see cref="T:System.Web.DynamicData.DynamicControlParameter" /> object to use to retrieve values from any data source.</summary>
      <returns>A collection of key/value pairs. </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.Equals(System.Object)">
      <summary>Gets a value that indicates whether this instance is equal to the specified object.</summary>
      <returns>true if the specified object is equal to this instance; otherwise, false.</returns>
      <param name="obj">The object to compare with this instance, or a null reference.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.GetHashCode">
      <summary>Gets the hash code for the current instance of the attribute.</summary>
      <returns>The attribute instance hash code.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.PresentationLayer">
      <summary>Gets or sets the presentation layer that uses the <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" /> class. </summary>
      <returns>The presentation layer that is used by this class.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.TypeId">
      <summary>Gets the unique identifier for the attribute.</summary>
      <returns>The unique identifier for the attribute.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.UIHint">
      <summary>Gets or sets the name of the field template to use to display the data field.</summary>
      <returns>The name of the field template that displays the data field.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ValidationAttribute">
      <summary>Serves as the base class for all validation attributes. </summary>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">The <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" /> and <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName" /> properties for localized error message are set at the same time that the non-localized <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage" /> property error message is set.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.#ctor(System.Func{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class by using the function that enables access to validation resources.</summary>
      <param name="errorMessageAccessor">The function that enables access to validation resources.</param>
      <exception cref="T:System:ArgumentNullException">
        <paramref name="errorMessageAccessor" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class by using the error message to associate with a validation control.</summary>
      <param name="errorMessage">The error message to associate with a validation control.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage">
      <summary>Gets or sets an error message to associate with a validation control if validation fails.</summary>
      <returns>The error message that is associated with the validation control.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName">
      <summary>Gets or sets the error message resource name to use in order to look up the <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" /> property value if validation fails.</summary>
      <returns>The error message resource that is associated with a validation control.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType">
      <summary>Gets or sets the resource type to use for error-message lookup if validation fails.</summary>
      <returns>The type of error message that is associated with a validation control.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageString">
      <summary>Gets the localized validation error message.</summary>
      <returns>The localized validation error message.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)">
      <summary>Applies formatting to an error message, based on the data field where the error occurred. </summary>
      <returns>An instance of the formatted error message.</returns>
      <param name="name">The name to include in the formatted message.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>Checks whether the specified value is valid with respect to the current validation attribute.</summary>
      <returns>An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class. </returns>
      <param name="value">The value to validate.</param>
      <param name="validationContext">The context information about the validation operation.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)">
      <summary>Determines whether the specified value of the object is valid. </summary>
      <returns>true if the specified value is valid; otherwise, false.</returns>
      <param name="value">The value of the object to validate. </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>Validates the specified value with respect to the current validation attribute.</summary>
      <returns>An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class. </returns>
      <param name="value">The value to validate.</param>
      <param name="validationContext">The context information about the validation operation.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>Validates the specified object.</summary>
      <param name="value">The object to validate.</param>
      <param name="validationContext">The <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> object that describes the context where the validation checks are performed. This parameter cannot be null.</param>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Validation failed.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object,System.String)">
      <summary>Validates the specified object.</summary>
      <param name="value">The value of the object to validate.</param>
      <param name="name">The name to include in the error message.</param>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
        <paramref name="value" /> is not valid.</exception>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ValidationContext">
      <summary>Describes the context in which a validation check is performed.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationContext.#ctor(System.Object,System.IServiceProvider,System.Collections.Generic.IDictionary{System.Object,System.Object})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> class. </summary>
      <param name="instance">The object to validate. This parameter is required.</param>
      <param name="serviceProvider">The object that implements the <see cref="T:System.IServiceProvider" /> interface. This parameter is optional.</param>
      <param name="items">A dictionary of key/value pairs to make available to the service consumers. This parameter is optional.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.DisplayName">
      <summary>Gets or sets the name of the member to validate. </summary>
      <returns>The name of the member to validate. </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationContext.GetService(System.Type)">
      <summary>Returns the service that provides custom validation.</summary>
      <returns>An instance of the service, or null if the service is not available.</returns>
      <param name="serviceType">The type of the service to use for validation.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.Items">
      <summary>Gets the dictionary of key/value pairs that is associated with this context.</summary>
      <returns>The dictionary of the key/value pairs for this context.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.MemberName">
      <summary>Gets or sets the name of the member to validate. </summary>
      <returns>The name of the member to validate. </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectInstance">
      <summary>Gets the object to validate.</summary>
      <returns>The object to validate.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectType">
      <summary>Gets the type of the object to validate.</summary>
      <returns>The type of the object to validate.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.ServiceContainer">
      <summary>Gets the validation services container.</summary>
      <returns>The validation services container.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ValidationException">
      <summary>Represents the exception that occurs during validation of a data field when the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class is used. </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class using an error message generated by the system.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.ComponentModel.DataAnnotations.ValidationResult,System.ComponentModel.DataAnnotations.ValidationAttribute,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class by using a validation result, a validation attribute, and the value of the current exception.</summary>
      <param name="validationResult">The list of validation results.</param>
      <param name="validatingAttribute">The attribute that caused the current exception.</param>
      <param name="value">The value of the object that caused the attribute to trigger the validation error.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class using serialized data.</summary>
      <param name="info">The object that holds the serialized data.</param>
      <param name="context">Context information about the source or destination of the serialized object.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class using a specified error message.</summary>
      <param name="message">A specified message that states the error.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String,System.ComponentModel.DataAnnotations.ValidationAttribute,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class using a specified error message, a validation attribute, and the value of the current exception.</summary>
      <param name="errorMessage">The message that states the error.</param>
      <param name="validatingAttribute">The attribute that caused the current exception.</param>
      <param name="value">The value of the object that caused the attribute to trigger validation error.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class using a specified error message and a collection of inner exception instances.</summary>
      <param name="message">The error message. </param>
      <param name="innerException">The collection of validation exceptions.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Gets information about the exception and adds it to the <see cref="T:System.Runtime.Serialization.SerializationInfoEnumerator" /> object</summary>
      <param name="info">The object that holds the serialized object data for the exception that occurred.</param>
      <param name="context">Context information about the source or destination of the exception.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationAttribute">
      <summary>Gets the instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class that triggered this exception.</summary>
      <returns>An instance of the validation attribute type that triggered this exception.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationResult">
      <summary>Gets the <see cref="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationResult" /> instance that describes the validation error.</summary>
      <returns>The <see cref="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationResult" /> instance that describes the validation error.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationException.Value">
      <summary>Gets the value of the object that causes the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class to trigger this exception.</summary>
      <returns>The value of the object that caused the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class to trigger the validation error.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ValidationResult">
      <summary>Represents a container for the results of a validation request.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationResult.#ctor(System.ComponentModel.DataAnnotations.ValidationResult)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class by using a <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> object.</summary>
      <param name="validationResult">The validation result object.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationResult.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class by using an error message.</summary>
      <param name="errorMessage">The error message.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationResult.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class by using an error message and a list of members that have validation errors.</summary>
      <param name="errorMessage">The error message.</param>
      <param name="memberNames">The list of member names that have validation errors.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationResult.ErrorMessage">
      <summary>Gets the error message for the validation.</summary>
      <returns>The error message for the validation.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationResult.MemberNames">
      <summary>Gets the collection of member names that indicate which fields have validation errors.</summary>
      <returns>The collection of member names that indicate which fields have validation errors.</returns>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.ValidationResult.Success">
      <summary>true if validation was successful; otherwise, false.</summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.Validator">
      <summary>Defines a helper class that can be used to validate objects, properties, and methods when it is included in their associated <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> attributes.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})">
      <summary>Determines whether the specified object is valid using the validation context and validation results collection.</summary>
      <returns>true if the object validates; otherwise, false.</returns>
      <param name="instance">The object to validate.</param>
      <param name="validationContext">The context that describes the object to validate.</param>
      <param name="validationResults">A collection to hold each failed validation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult},System.Boolean)">
      <summary>Determines whether the specified object is valid using the validation context, validation results collection, and a value that specifies whether to validate all properties.</summary>
      <returns>true if the object validates; otherwise, false.</returns>
      <param name="instance">The object to validate.</param>
      <param name="validationContext">The context that describes the object to validate.</param>
      <param name="validationResults">A collection to hold each failed validation.</param>
      <param name="validateAllProperties">true to validate all properties; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateProperty(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})">
      <summary>Validates the property.</summary>
      <returns>true if the property validates; otherwise, false.</returns>
      <param name="value">The value to validate.</param>
      <param name="validationContext">The context that describes the property to validate.</param>
      <param name="validationResults">A collection to hold each failed validation. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> cannot be assigned to the property.-or-<paramref name="value " />is null.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateValue(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult},System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationAttribute})">
      <summary>Returns a value that indicates whether the specified value is valid with the specified attributes.</summary>
      <returns>true if the object validates; otherwise, false.</returns>
      <param name="value">The value to validate.</param>
      <param name="validationContext">The context that describes the object to validate.</param>
      <param name="validationResults">A collection to hold failed validations. </param>
      <param name="validationAttributes">The validation attributes.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>Determines whether the specified object is valid using the validation context.</summary>
      <param name="instance">The object to validate.</param>
      <param name="validationContext">The context that describes the object to validate.</param>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">The object is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Boolean)">
      <summary>Determines whether the specified object is valid using the validation context, and a value that specifies whether to validate all properties.</summary>
      <param name="instance">The object to validate.</param>
      <param name="validationContext">The context that describes the object to validate.</param>
      <param name="validateAllProperties">true to validate all properties; otherwise, false.</param>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
        <paramref name="instance" /> is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateProperty(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>Validates the property.</summary>
      <param name="value">The value to validate.</param>
      <param name="validationContext">The context that describes the property to validate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> cannot be assigned to the property.</exception>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">The <paramref name="value" /> parameter is not valid.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateValue(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationAttribute})">
      <summary>Validates the specified attributes.</summary>
      <param name="value">The value to validate.</param>
      <param name="validationContext">The context that describes the object to validate.</param>
      <param name="validationAttributes">The validation attributes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="validationContext" /> parameter is null.</exception>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">The <paramref name="value" /> parameter does not validate with the <paramref name="validationAttributes" /> parameter.</exception>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\PresentationCore.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>PresentationCore</name>
  </assembly>
  <members>
    <member name="T:System.IO.Packaging.PackageStore">
      <summary>Represents a collection of application-specific <see cref="T:System.IO.Packaging.Package" /> instances used in combination with <see cref="T:System.IO.Packaging.PackWebRequest" />.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)">
      <summary>Adds a <see cref="T:System.IO.Packaging.Package" /> to the store.</summary>
      <param name="uri">The key URI of the <paramref name="package" /> to compare in a <see cref="T:System.IO.Packaging.PackWebRequest" />.</param>
      <param name="package">The package to add to the store.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="package" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packageUri" /> is an invalid package URI.</exception>
      <exception cref="T:System.InvalidOperationException">A package with the specified <paramref name="packageUri" /> is already in the store.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)">
      <summary>Returns the <see cref="T:System.IO.Packaging.Package" /> with a specified URI from the store.</summary>
      <returns>The package with a specified <paramref name="packageUri" />; or null, if a package with the specified <paramref name="packageUri" /> is not in the store.</returns>
      <param name="uri">The uniform resource identifier (URI) of the package to return.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packageUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packageUri" /> is an invalid package URI.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)">
      <summary>Removes the <see cref="T:System.IO.Packaging.Package" /> with a specified URI from the store.</summary>
      <param name="uri">The uniform resource identifier (URI) of the package to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packageUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packageUri" /> is an invalid package URI.</exception>
    </member>
    <member name="T:System.IO.Packaging.PackWebRequest">
      <summary>Makes a request to an entire <see cref="T:System.IO.Packaging.PackagePart" /> or to a <see cref="T:System.IO.Packaging.PackagePart" /> in a package, identified by a pack URI.</summary>
    </member>
    <member name="P:System.IO.Packaging.PackWebRequest.CachePolicy">
      <summary>Gets or sets the <see cref="T:System.Net.Cache.RequestCachePolicy" />.</summary>
      <returns>The <see cref="T:System.Net.Cache.RequestCachePolicy" /> to use with pack URI web request.</returns>
      <exception cref="T:System.Net.WebException">The specified <see cref="T:System.Net.Cache.RequestCachePolicy" /> to set is not valid.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackWebRequest.ConnectionGroupName">
      <summary>Gets or sets the name of the connection group.</summary>
      <returns>The connection group name.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebRequest.ContentLength">
      <summary>Gets or sets the Content-length HTTP header. </summary>
      <returns>The content length, in bytes.</returns>
      <exception cref="T:System.NotSupportedException">Set is not supported, <see cref="T:System.IO.Packaging.PackWebRequest" /> is read-only.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackWebRequest.ContentType">
      <summary>Gets or sets the Content-type HTTP header. </summary>
      <returns>The contents of the header.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebRequest.Credentials">
      <summary>Gets or sets the authentication credentials.</summary>
      <returns>The authentication credentials to use with the request.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackWebRequest.GetInnerRequest">
      <summary>Gets the inner <see cref="T:System.Net.WebRequest" />.</summary>
      <returns>A <see cref="T:System.Net.WebRequest" /> created from the inner-URI if the request resolves to a valid transport protocol such http or ftp; or a <see cref="T:System.Net.WebRequest" /> created with a null-URI if the request resolves from the <see cref="T:System.IO.Packaging.PackageStore" /> cache.</returns>
      <exception cref="T:System.NotSupportedException">The inner URI does not resolve to a valid transport protocol such as http for ftp, nor can the request be resolved from the <see cref="T:System.IO.Packaging.PackageStore" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackWebRequest.GetRequestStream">
      <summary>Do not use—<see cref="M:System.IO.Packaging.PackWebRequest.GetRequestStream" /> is not supported by <see cref="T:System.IO.Packaging.PackWebRequest" />.</summary>
      <returns>If <see cref="M:System.IO.Packaging.PackWebRequest.GetRequestStream" /> is called, a <see cref="T:System.NotSupportedException" /> is thrown.</returns>
      <exception cref="T:System.NotSupportedException">Occurs on any call to <see cref="M:System.IO.Packaging.PackWebRequest.GetRequestStream" />.  The pack URI protocol does not support writing.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackWebRequest.GetResponse">
      <summary>Returns the response stream for the request.</summary>
      <returns>The response stream for the request.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebRequest.Headers">
      <summary>Gets or sets the collection of header name/value pairs associated with the request. </summary>
      <returns>A header collection object.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebRequest.Method">
      <summary>Gets or sets the protocol method to use with the pack URI request.</summary>
      <returns>The protocol method name that performs this request.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebRequest.PreAuthenticate">
      <summary>Gets or sets a value that indicates whether to preauthenticate the request.</summary>
      <returns>true to send a WWW-authenticate HTTP header with the initial request; otherwise, false. </returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebRequest.Proxy">
      <summary>Gets or sets the network proxy for Internet access.</summary>
      <returns>The <see cref="T:System.Net.WebProxy" /> to use for Internet access.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebRequest.RequestUri">
      <summary>Gets the URI of the resource associated with the request.</summary>
      <returns>The uniform resource identifier (URI) of the resource associated with the request.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebRequest.Timeout">
      <summary>Gets or sets the length of time before the request times out.</summary>
      <returns>The number of milliseconds to wait before the request times out.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebRequest.UseDefaultCredentials">
      <summary>Gets or sets the default authentication credentials.</summary>
      <returns>The default authentication credentials to use with the pack URI request.</returns>
    </member>
    <member name="T:System.IO.Packaging.PackWebRequestFactory">
      <summary>Represents the class that is invoked when an instance of a pack URI <see cref="T:System.IO.Packaging.PackWebRequest" /> is created.    </summary>
    </member>
    <member name="M:System.IO.Packaging.PackWebRequestFactory.#ctor">
      <summary> Initializes a new instance of the <see cref="T:System.IO.Packaging.PackWebRequestFactory" /> class. </summary>
    </member>
    <member name="M:System.IO.Packaging.PackWebRequestFactory.System#Net#IWebRequestCreate#Create(System.Uri)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.  Use the type-safe <see cref="T:System.IO.Packaging.PackUriHelper" /> method instead. </summary>
      <returns>The pack URI Web request.</returns>
      <param name="uri">The URI to create the Web request.</param>
    </member>
    <member name="T:System.IO.Packaging.PackWebResponse">
      <summary>Represents a response of a <see cref="T:System.IO.Packaging.PackWebRequest" />. </summary>
    </member>
    <member name="M:System.IO.Packaging.PackWebResponse.Close">
      <summary>Closes the stream for this request. </summary>
    </member>
    <member name="P:System.IO.Packaging.PackWebResponse.ContentLength">
      <summary>Gets the content length of the response. </summary>
      <returns>The content length, in bytes.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebResponse.ContentType">
      <summary>Gets the Multipurpose Internet Mail Extensions (MIME) content type of the response stream's content. </summary>
      <returns>The MIME type of the stream's content.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackWebResponse.GetResponseStream">
      <summary>Gets the response stream that is contained in the <see cref="T:System.IO.Packaging.PackWebResponse" />. </summary>
      <returns>The response stream.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebResponse.Headers">
      <summary>Gets the collection of Web <see cref="P:System.Net.WebResponse.Headers" /> for this response. </summary>
      <returns>The collection of Web response <see cref="P:System.Net.WebResponse.Headers" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebResponse.InnerResponse">
      <summary>Gets the inner <see cref="T:System.Net.WebResponse" /> object for the response. </summary>
      <returns>The response data as a <see cref="T:System.Net.WebResponse" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebResponse.IsFromCache">
      <summary>Gets a value indicating whether the response is from the package cache or from a Web request. </summary>
      <returns>true if the response is from the package cache; false if the response is from a Web request.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebResponse.ResponseUri">
      <summary>Gets the uniform resource identifier (URI) of the response. </summary>
      <returns>The URI of the response.</returns>
    </member>
    <member name="T:System.Windows.AutoResizedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Interop.HwndSource.AutoResized" /> event raised by <see cref="T:System.Windows.Interop.HwndSource" />.</summary>
    </member>
    <member name="M:System.Windows.AutoResizedEventArgs.#ctor(System.Windows.Size)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.AutoResizedEventArgs" /> class.</summary>
      <param name="size">The size to report in the event data.</param>
    </member>
    <member name="P:System.Windows.AutoResizedEventArgs.Size">
      <summary>Gets the new size of the window after the auto resize operation.</summary>
      <returns>Size of the window after resizing.</returns>
    </member>
    <member name="T:System.Windows.AutoResizedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Interop.HwndSource.AutoResized" /> event raised by <see cref="T:System.Windows.Interop.HwndSource" />.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.BaselineAlignment">
      <summary>Describes how the baseline for a text-based element is positioned on the vertical axis, relative to the established baseline for text.</summary>
    </member>
    <member name="F:System.Windows.BaselineAlignment.Top">
      <summary>A baseline that is aligned to the upper edge of the containing box.</summary>
    </member>
    <member name="F:System.Windows.BaselineAlignment.Center">
      <summary>A baseline that is aligned to the center of the containing box.</summary>
    </member>
    <member name="F:System.Windows.BaselineAlignment.Bottom">
      <summary>A baseline that is aligned at the lower edge of the containing box.</summary>
    </member>
    <member name="F:System.Windows.BaselineAlignment.Baseline">
      <summary>A baseline that is aligned at the actual baseline of the containing box.</summary>
    </member>
    <member name="F:System.Windows.BaselineAlignment.TextTop">
      <summary>A baseline that is aligned at the upper edge of the text baseline.</summary>
    </member>
    <member name="F:System.Windows.BaselineAlignment.TextBottom">
      <summary>A baseline that is aligned at the lower edge of the text baseline.</summary>
    </member>
    <member name="F:System.Windows.BaselineAlignment.Subscript">
      <summary>A baseline that is aligned at the subscript position of the containing box.</summary>
    </member>
    <member name="F:System.Windows.BaselineAlignment.Superscript">
      <summary>A baseline that is aligned at the superscript position of the containing box.</summary>
    </member>
    <member name="T:System.Windows.Clipboard">
      <summary>Provides static methods that facilitate transferring data to and from the system Clipboard.</summary>
    </member>
    <member name="M:System.Windows.Clipboard.Clear">
      <summary>Clears any data from the system Clipboard.</summary>
    </member>
    <member name="M:System.Windows.Clipboard.ContainsAudio">
      <summary>Queries the Clipboard for the presence of data in the <see cref="F:System.Windows.DataFormats.WaveAudio" /> data format.</summary>
      <returns>true if the Clipboard contains data in the <see cref="F:System.Windows.DataFormats.WaveAudio" /> data format; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Clipboard.ContainsData(System.String)">
      <summary>Queries the Clipboard for the presence of data in a specified data format.</summary>
      <returns>true if data in the specified format is available on the Clipboard; otherwise, false. See Remarks.</returns>
      <param name="format">The format of the data to look for. See <see cref="T:System.Windows.DataFormats" /> for predefined formats. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Clipboard.ContainsFileDropList">
      <summary>Queries the Clipboard for the presence of data in the <see cref="F:System.Windows.DataFormats.FileDrop" /> data format.</summary>
      <returns>true if the Clipboard contains data in the <see cref="F:System.Windows.DataFormats.FileDrop" /> data format; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Clipboard.ContainsImage">
      <summary>Queries the Clipboard for the presence of data in the <see cref="F:System.Windows.DataFormats.Bitmap" /> data format.</summary>
      <returns>true if the Clipboard contains data in the <see cref="F:System.Windows.DataFormats.Bitmap" /> data format; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Clipboard.ContainsText">
      <summary>Queries the Clipboard for the presence of data in the <see cref="F:System.Windows.DataFormats.UnicodeText" /> format.</summary>
      <returns>true if the Clipboard contains data in the <see cref="F:System.Windows.DataFormats.UnicodeText" /> data format; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Clipboard.ContainsText(System.Windows.TextDataFormat)">
      <summary>Queries the Clipboard for the presence of data in a text data format.</summary>
      <returns>true if the Clipboard contains data in the specified text data format; otherwise, false.</returns>
      <param name="format">A member of the <see cref="T:System.Windows.TextDataFormat" /> enumeration that specifies the text data format to query for.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="format" /> does not specify a valid member of <see cref="T:System.Windows.TextDataFormat" />.</exception>
    </member>
    <member name="M:System.Windows.Clipboard.GetAudioStream">
      <summary>Returns a stream of Clipboard data in the <see cref="F:System.Windows.DataFormats.WaveAudio" /> data format.</summary>
      <returns>A stream that contains the data in the <see cref="F:System.Windows.DataFormats.WaveAudio" /> format, or null if the Clipboard does not contain data in this format.</returns>
    </member>
    <member name="M:System.Windows.Clipboard.GetData(System.String)">
      <summary>Retrieves data in a specified format from the Clipboard.</summary>
      <returns>An object that contains the data in the specified format, or null if the data is unavailable in the specified format.</returns>
      <param name="format">A string that specifies the format of the data to retrieve. For a set of predefined data formats, see the <see cref="T:System.Windows.DataFormats" /> class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Clipboard.GetDataObject">
      <summary>Returns a data object that represents the entire contents of the Clipboard.</summary>
      <returns>A data object that enables access to the entire contents of the system Clipboard, or null if there is no data on the Clipboard.</returns>
    </member>
    <member name="M:System.Windows.Clipboard.GetFileDropList">
      <summary>Returns a string collection that contains a list of dropped files available on the Clipboard.</summary>
      <returns>A collection of strings, where each string specifies the name of a file in the list of dropped files on the Clipboard, or null if the data is unavailable in this format.</returns>
    </member>
    <member name="M:System.Windows.Clipboard.GetImage">
      <summary>Returns a <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> object from the Clipboard that contains data in the <see cref="F:System.Windows.DataFormats.Bitmap" /> format.</summary>
      <returns>A <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> object that contains data in the <see cref="F:System.Windows.DataFormats.Bitmap" /> format, or null if the data is unavailable in this format.</returns>
    </member>
    <member name="M:System.Windows.Clipboard.GetText">
      <summary>Returns a string containing the <see cref="F:System.Windows.DataFormats.UnicodeText" /> data on the Clipboard.</summary>
      <returns>A string containing the <see cref="F:System.Windows.DataFormats.UnicodeText" /> data , or an empty string if no <see cref="F:System.Windows.DataFormats.UnicodeText" /> data is available on the Clipboard.</returns>
    </member>
    <member name="M:System.Windows.Clipboard.GetText(System.Windows.TextDataFormat)">
      <summary>Returns a string containing text data on the Clipboard. </summary>
      <returns>A string containing text data in the specified data format, or an empty string if no corresponding text data is available.</returns>
      <param name="format">A member of <see cref="T:System.Windows.TextDataFormat" /> that specifies the text data format to retrieve.</param>
    </member>
    <member name="M:System.Windows.Clipboard.IsCurrent(System.Windows.IDataObject)">
      <summary>Compares a specified data object to the contents of the Clipboard.</summary>
      <returns>true if the specified data object matches what is on the system Clipboard; otherwise, false.</returns>
      <param name="data">A data object to compare to the contents of the system Clipboard.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.</exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">An error occurred when accessing the Clipboard. The exception details will include an HResult that identifies the specific error; see <see cref="P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode" />.</exception>
    </member>
    <member name="M:System.Windows.Clipboard.SetAudio(System.Byte[])">
      <summary>Stores audio data (<see cref="F:System.Windows.DataFormats.WaveAudio" /> data format) on the Clipboard.  The audio data is specified as a byte array.</summary>
      <param name="audioBytes">A byte array that contains audio data to store on the Clipboard.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="audioBytes" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Clipboard.SetAudio(System.IO.Stream)">
      <summary>Stores audio data (<see cref="F:System.Windows.DataFormats.WaveAudio" /> data format) on the Clipboard.  The audio data is specified as a stream.</summary>
      <param name="audioStream">A stream that contains audio data to store on the Clipboard.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="audioStream" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Clipboard.SetData(System.String,System.Object)">
      <summary>Stores the specified data on the Clipboard in the specified format.</summary>
      <param name="format">A string that specifies the format to use to store the data. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
      <param name="data">An object representing the data to store on the Clipboard.</param>
    </member>
    <member name="M:System.Windows.Clipboard.SetDataObject(System.Object)">
      <summary>Places a specified non-persistent data object on the system Clipboard.</summary>
      <param name="data">A data object (an object that implements <see cref="T:System.Windows.IDataObject" />) to place on the system Clipboard.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="audioStream" /> is null.</exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">An error occurred when accessing the Clipboard. The exception details will include an HResult that identifies the specific error; see <see cref="P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode" />.</exception>
    </member>
    <member name="M:System.Windows.Clipboard.SetDataObject(System.Object,System.Boolean)">
      <summary>Places a specified data object on the system Clipboard and accepts a Boolean parameter that indicates whether the data object should be left on the Clipboard when the application exits.</summary>
      <param name="data">A data object (an object that implements <see cref="T:System.Windows.IDataObject" />) to place on the system Clipboard.</param>
      <param name="copy">true to leave the data on the system Clipboard when the application exits; false to clear the data from the system Clipboard when the application exits.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="audioStream" /> is null.</exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">An error occured when accessing the Clipboard.  The exception details will include an HResult that identifies the specific error; see <see cref="P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode" />.</exception>
    </member>
    <member name="M:System.Windows.Clipboard.SetFileDropList(System.Collections.Specialized.StringCollection)">
      <summary>Stores <see cref="F:System.Windows.DataFormats.FileDrop" /> data on the Clipboard.  The dropped file list is specified as a string collection.</summary>
      <param name="fileDropList">A string collection that contains the dropped file list to store in the data object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileDropList" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileDropList" /> contains zero strings, or the full path to file specified in the list cannot be resolved.</exception>
    </member>
    <member name="M:System.Windows.Clipboard.SetImage(System.Windows.Media.Imaging.BitmapSource)">
      <summary>Stores <see cref="F:System.Windows.DataFormats.Bitmap" /> data on the Clipboard.  The image data is specified as a <see cref="T:System.Windows.Media.Imaging.BitmapSource" />.</summary>
      <param name="image">A <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> object that contains the image data to store on the Clipboard.</param>
    </member>
    <member name="M:System.Windows.Clipboard.SetText(System.String)">
      <summary>Stores <see cref="F:System.Windows.DataFormats.UnicodeText" /> data on the Clipboard. </summary>
      <param name="text">A string that contains the <see cref="F:System.Windows.DataFormats.UnicodeText" /> data to store on the Clipboard.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textData" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Clipboard.SetText(System.String,System.Windows.TextDataFormat)">
      <summary>Stores text data on the Clipboard in a specified text data format.  The <see cref="F:System.Windows.DataFormats.UnicodeText" /> data to store is specified as a string.</summary>
      <param name="text">A string that contains the text data to store on the Clipboard.</param>
      <param name="format">A member of <see cref="T:System.Windows.TextDataFormat" /> that specifies the specific text data format to store.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
    </member>
    <member name="T:System.Windows.ContentElement">
      <summary>Provides a WPF core-level base class for content elements. Content elements are designed for flow-style presentation, using an intuitive markup-oriented layout model and a deliberately simple object model. </summary>
    </member>
    <member name="M:System.Windows.ContentElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.ContentElement" /> class. </summary>
    </member>
    <member name="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
      <summary>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. </summary>
      <param name="routedEvent">An identifier for the routed event to be handled.</param>
      <param name="handler">A reference to the handler implementation.</param>
    </member>
    <member name="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
      <summary>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. Specify <paramref name="handledEventsToo" /> as true to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route. </summary>
      <param name="routedEvent">An identifier for the routed event to be handled.</param>
      <param name="handler">A reference to the handler implementation.</param>
      <param name="handledEventsToo">true to register the handler such that it is invoked even when  the routed event is marked handled in its event data; false to register the handler with the default condition that it will not be invoked if the routed event is already marked handled. The default is false.Do not routinely ask to rehandle a routed event. For more information, see Remarks.</param>
    </member>
    <member name="M:System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
      <summary>Adds handlers to the specified <see cref="T:System.Windows.EventRoute" /> for the current <see cref="T:System.Windows.ContentElement" /> event handler collection.</summary>
      <param name="route">The event route that handlers are added to.</param>
      <param name="e">The event data that is used to add the handlers. This method uses the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of the arguments to create the handlers. </param>
    </member>
    <member name="P:System.Windows.ContentElement.AllowDrop">
      <summary>Gets or sets a value that indicates whether this element can be used as the target of a drag-and-drop operation.  </summary>
      <returns>true if this element can be used as the target of a drag-and-drop operation; otherwise, false. The default value is false.</returns>
    </member>
    <member name="F:System.Windows.ContentElement.AllowDropProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.AllowDrop" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.AllowDrop" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
      <summary>Applies an animation to a specified dependency property on this element. Any existing animations are stopped and replaced with the new animation.</summary>
      <param name="dp">The identifier for the property to animate.</param>
      <param name="clock">The animation clock that controls and declares the animation.</param>
    </member>
    <member name="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
      <summary>Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.</summary>
      <param name="dp">The property to animate.</param>
      <param name="clock">The animation clock that controls and declares the animation.</param>
      <param name="handoffBehavior">A value of the enumeration. The default is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />, which will stop any existing animation and replace with the new one.</param>
    </member>
    <member name="P:System.Windows.ContentElement.AreAnyTouchesCaptured">
      <summary>Gets a value that indicates whether at least one touch is captured to this element. </summary>
      <returns>true if at least one touch is captured to this element; otherwise, false. </returns>
    </member>
    <member name="F:System.Windows.ContentElement.AreAnyTouchesCapturedProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.AreAnyTouchesCaptured" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.AreAnyTouchesCaptured" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin">
      <summary>Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree. </summary>
      <returns>true if at least one touch is captured to this element or any child elements in its visual tree; otherwise, false. </returns>
    </member>
    <member name="F:System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver">
      <summary>Gets a value that indicates whether at least one touch is pressed over this element.</summary>
      <returns>true if at least one touch is pressed over this element; otherwise, false. </returns>
    </member>
    <member name="F:System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.AreAnyTouchesOver">
      <summary>Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree. </summary>
      <returns>true if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, false. </returns>
    </member>
    <member name="F:System.Windows.ContentElement.AreAnyTouchesOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.AreAnyTouchesOver" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.AreAnyTouchesOver" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
      <summary>Starts an animation for a specified animated property on this element. </summary>
      <param name="dp">The property to animate, which is specified as a dependency property identifier.</param>
      <param name="animation">The timeline of the animation to start.</param>
    </member>
    <member name="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
      <summary>Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation. </summary>
      <param name="dp">The property to animate, which is specified as the dependency property identifier.</param>
      <param name="animation">The timeline of the animation to be applied.</param>
      <param name="handoffBehavior">A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.</param>
    </member>
    <member name="M:System.Windows.ContentElement.CaptureMouse">
      <summary>Attempts to force capture of the mouse to this element. </summary>
      <returns>true if the mouse is successfully captured; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.ContentElement.CaptureStylus">
      <summary>Attempts to force capture of the stylus to this element. </summary>
      <returns>true if the stylus is successfully captured; otherwise, false. </returns>
    </member>
    <member name="M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)">
      <summary>Attempts to force capture of a touch to this element.</summary>
      <returns>true if the specified touch is captured to this element; otherwise, false.</returns>
      <param name="touchDevice">The device to capture.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="touchDevice" /> is null.</exception>
    </member>
    <member name="P:System.Windows.ContentElement.CommandBindings">
      <summary>Gets a collection of <see cref="T:System.Windows.Input.CommandBinding" /> objects that are associated with this element. </summary>
      <returns>The collection of all <see cref="T:System.Windows.Input.CommandBinding" /> objects.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.DragEnter">
      <summary>Occurs when the input system reports an underlying drag event with this element as the drag target. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.DragEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.DragEnter" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.DragEnter" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.DragLeave">
      <summary>Occurs when the input system reports an underlying drag event with this element as the drag origin. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.DragLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.DragLeave" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.DragLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.DragOver">
      <summary>Occurs when the input system reports an underlying drag event with this element as the potential drop target. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.DragOverEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.DragOver" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.DragOver" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.Drop">
      <summary>Occurs when the input system reports an underlying drop event with this element as the drop target. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.DropEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.Drop" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.Drop" /> routed event.</returns>
    </member>
    <member name="M:System.Windows.ContentElement.Focus">
      <summary>Attempts to set focus to this element. </summary>
      <returns>true if keyboard focus could be set to this element; false if this method call did not force focus.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.Focusable">
      <summary>Gets or sets a value that indicates whether the element can receive focus.  </summary>
      <returns>true if the element is focusable; otherwise false. The default is false; however, see Remarks.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.FocusableChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.ContentElement.Focusable" /> property changes.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.FocusableProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.Focusable" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.Focusable" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
      <summary>Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation. </summary>
      <returns>The property value as if no animations are attached to the specified dependency property. </returns>
      <param name="dp">The dependency property to check.</param>
    </member>
    <member name="M:System.Windows.ContentElement.GetUIParentCore">
      <summary>When overridden in a derived class, returns an alternative user interface (UI) parent for this element if no visual parent exists. </summary>
      <returns>An object, if implementation of a derived class has an alternate parent connection to report.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.GiveFeedback">
      <summary>Occurs when the input system reports an underlying drag-and-drop event that involves this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.GiveFeedbackEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.GiveFeedback" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.GiveFeedback" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.GotFocus">
      <summary>Occurs when this element gets logical focus. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.GotFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.GotFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.GotFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.GotKeyboardFocus">
      <summary>Occurs when the keyboard is focused on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.GotKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.GotKeyboardFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.GotKeyboardFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.GotMouseCapture">
      <summary>Occurs when this element captures the mouse. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.GotMouseCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.GotMouseCapture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.GotMouseCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.GotStylusCapture">
      <summary>Occurs when this element captures the stylus. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.GotStylusCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.GotStylusCapture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.GotStylusCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.GotTouchCapture">
      <summary>Occurs when a touch is captured to this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.GotTouchCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.GotTouchCapture" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.GotTouchCapture" /> routed event.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.HasAnimatedProperties">
      <summary>Gets a value that indicates whether this element has any animated properties. </summary>
      <returns>true if this element has animations attached to any of its properties; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.InputBindings">
      <summary>Gets the collection of input bindings that are associated with this element. </summary>
      <returns>The collection of input bindings.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.IsEnabled">
      <summary>Gets or sets a value that indicates whether this element is enabled in the user interface (UI).  </summary>
      <returns>true if the element is enabled; otherwise, false. The default value is true.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.IsEnabledChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsEnabled" /> property on this element changes. </summary>
    </member>
    <member name="P:System.Windows.ContentElement.IsEnabledCore">
      <summary>Gets a value that becomes the return value of <see cref="P:System.Windows.ContentElement.IsEnabled" /> in derived classes. </summary>
      <returns>true if the element is enabled; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.ContentElement.IsEnabledProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.IsEnabled" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.IsEnabled" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.IsFocused">
      <summary>Gets a value that determines whether this element has logical focus.  </summary>
      <returns>true if this element has logical focus; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.ContentElement.IsFocusedProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.IsFocused" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.ContentElement.IsFocused" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.IsInputMethodEnabled">
      <summary>Gets a value that indicates whether an input method system, such as an Input Method Editor (IME), is enabled for processing the input to this element. </summary>
      <returns>true if an input method is active; otherwise, false. The default value of the underlying attached property is true; however, this value is influenced by the state of input methods at runtime.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.IsKeyboardFocused">
      <summary>Gets a value that indicates whether this element has keyboard focus.  </summary>
      <returns>true if this element has keyboard focus; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.IsKeyboardFocusedChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.IsKeyboardFocusedProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.IsKeyboardFocusWithin">
      <summary>Gets a value that indicates whether keyboard focus is anywhere within the element or child elements.  </summary>
      <returns>true if keyboard focus is on the element or its child elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged">
      <summary>Occurs when the value of the <see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.IsKeyboardFocusWithinProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.IsKeyboardFocusWithin" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.ContentElement.IsKeyboardFocusWithin" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.IsMouseCaptured">
      <summary>Gets a value that indicates whether the mouse is captured by this element.  </summary>
      <returns>true if the element has mouse capture; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.IsMouseCapturedChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsMouseCaptured" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.IsMouseCapturedProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.IsMouseCaptured" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.IsMouseCaptured" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.IsMouseCaptureWithin">
      <summary>Gets a value that determines whether mouse capture is held by this element or by child elements in its element tree. </summary>
      <returns>true if this element or a contained element has mouse capture; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged">
      <summary>Occurs when the value of the <see cref="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty" /> changes on this element.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.IsMouseDirectlyOver">
      <summary>Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.  </summary>
      <returns>true if the mouse pointer is over the same element result as a hit test; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.IsMouseDirectlyOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.IsMouseOver">
      <summary>Gets a value that indicates whether the mouse pointer is located over this element (including visual child elements, or its control compositing). </summary>
      <returns>true if mouse pointer is over the element or its child elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.ContentElement.IsMouseOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.IsMouseOver" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.ContentElement.IsMouseOver" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.IsStylusCaptured">
      <summary>Gets a value that indicates whether the stylus is captured to this element.  </summary>
      <returns>true if the element has stylus capture; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.IsStylusCapturedChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsStylusCaptured" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.IsStylusCapturedProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.IsStylusCaptured" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.IsStylusCaptured" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.IsStylusCaptureWithin">
      <summary>Gets a value that determines whether stylus capture is held by this element, including child elements and control compositing. </summary>
      <returns>true if stylus capture is held within this element; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.IsStylusCaptureWithinProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.IsStylusDirectlyOver">
      <summary>Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.  </summary>
      <returns>true if the stylus is over the same element as a hit test; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.IsStylusDirectlyOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.IsStylusOver">
      <summary>Gets a value that indicates whether the stylus is located over this element (including visual child elements).  </summary>
      <returns>true if the stylus is over the element or its child elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.ContentElement.IsStylusOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.IsStylusOver" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.ContentElement.IsStylusOver" /> dependency property identifier.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.KeyDown">
      <summary>Occurs when a key is pressed while focus is on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.KeyDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.KeyDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.KeyDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.KeyUp">
      <summary>Occurs when a key is released while focus is on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.KeyUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.KeyUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.KeyUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.LostFocus">
      <summary>Occurs when this element loses logical focus. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.LostFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.LostFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.LostFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.LostKeyboardFocus">
      <summary>Occurs when the keyboard is no longer focused on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.LostKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.LostKeyboardFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.LostKeyboardFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.LostMouseCapture">
      <summary>Occurs when this element loses mouse capture. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.LostMouseCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.LostMouseCapture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.LostMouseCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.LostStylusCapture">
      <summary>Occurs when this element loses stylus capture. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.LostStylusCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.LostStylusCapture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.LostStylusCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.LostTouchCapture">
      <summary>Occurs when this element loses a touch capture. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.LostTouchCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.LostTouchCapture" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.LostTouchCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.MouseDown">
      <summary>Occurs when any mouse button is pressed while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.MouseDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.MouseDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.MouseDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.MouseEnter">
      <summary>Occurs when the mouse pointer enters the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.MouseEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.MouseEnter" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.MouseEnter" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.MouseLeave">
      <summary>Occurs when the mouse pointer leaves the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.MouseLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.MouseLeave" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.MouseLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.MouseLeftButtonDown">
      <summary>Occurs when the left mouse button is pressed while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.MouseLeftButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.MouseLeftButtonUp">
      <summary>Occurs when the left mouse button is released while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.MouseLeftButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.MouseMove">
      <summary>Occurs when the mouse pointer moves while over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.MouseMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.MouseMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.MouseMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.MouseRightButtonDown">
      <summary>Occurs when the right mouse button is pressed while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.MouseRightButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.MouseRightButtonUp">
      <summary>Occurs when the right mouse button is released while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.MouseRightButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.MouseUp">
      <summary>Occurs when any mouse button is released over this element.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.MouseUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.MouseUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.MouseUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.MouseWheel">
      <summary>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.MouseWheelEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.MouseWheel" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.MouseWheel" /> routed event.</returns>
    </member>
    <member name="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)">
      <summary>Attempts to move focus from this element to another element. The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element. </summary>
      <returns>true if the requested traversal was performed; otherwise, false. </returns>
      <param name="request">A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnCreateAutomationPeer">
      <summary>Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations for the Windows Presentation Foundation (WPF) infrastructure.</summary>
      <returns>The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation.</returns>
    </member>
    <member name="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragLeave" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragOver" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.GiveFeedback" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.ContentElement.GotFocus" /> routed event by using the event data provided. </summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data. This event data must contain the identifier for the <see cref="E:System.Windows.ContentElement.GotFocus" /> event.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.ContentElement.GotTouchCapture" /> routed event that occurs when a touch is captured to this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked just before the <see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /> event is raised by this element. Implement this method to add class handling for this event. </summary>
      <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsMouseCapturedChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsStylusCapturedChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.ContentElement.LostFocus" /> routed event by using the event data that is provided. </summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data. This event data must contain the identifier for the <see cref="E:System.Windows.ContentElement.LostFocus" /> event.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.ContentElement.LostTouchCapture" /> routed event that occurs when this element loses a touch capture.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /> routed event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was pressed.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was released.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was pressed.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was released.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the mouse button was released.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDrop" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that one or more mouse buttons were pressed.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was pressed.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was released.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was pressed.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was released.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that one or more mouse buttons were released.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.ContentElement.PreviewTouchDown" /> routed event that occurs when a touch presses this element. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.ContentElement.PreviewTouchMove" /> routed event that occurs when a touch moves while inside this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.ContentElement.PreviewTouchUp" /> routed event that occurs when a touch is released inside this element. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> attached event is raised by this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> attached event is raised by this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.ContentElement.TouchDown" /> routed event that occurs when a touch presses inside this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.ContentElement.TouchEnter" /> routed event that occurs when a touch moves from outside to inside the bounds of this element. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.ContentElement.TouchLeave" /> routed event that occurs when a touch moves from inside to outside the bounds of this element. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.ContentElement.TouchMove" /> routed event that occurs when a touch moves while inside this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.ContentElement.TouchUp" /> routed event that occurs when a touch is released inside this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
      <summary>When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</summary>
      <returns>The element that would have received focus if <see cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> were actually invoked.</returns>
      <param name="direction">The direction of the requested focus traversal.</param>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewDragEnter">
      <summary>Occurs when the input system reports an underlying drag event with this element as the drag target. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewDragEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewDragEnter" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewDragEnter" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewDragLeave">
      <summary>Occurs when the input system reports an underlying drag event with this element as the drag origin. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewDragLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewDragLeave" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewDragLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewDragOver">
      <summary>Occurs when the input system reports an underlying drag event with this element as the potential drop target. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewDragOverEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewDragOver" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewDragOver" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewDrop">
      <summary>Occurs when the input system reports an underlying drop event with this element as the drop target. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewDropEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewDrop" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewDrop" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewGiveFeedback">
      <summary>Occurs when a drag-and-drop operation is started. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewGiveFeedbackEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewGiveFeedback" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewGiveFeedback" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
      <summary>Occurs when the keyboard is focused on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewKeyDown">
      <summary>Occurs when a key is pressed while the keyboard is focused on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewKeyDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewKeyDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewKeyDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewKeyUp">
      <summary>Occurs when a key is released while the keyboard is focused on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewKeyUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewKeyUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewKeyUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
      <summary>Occurs when the keyboard is no longer focused on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewMouseDown">
      <summary>Occurs when any mouse button is pressed while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewMouseDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewMouseDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
      <summary>Occurs when the left mouse button is pressed while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
      <summary>Occurs when the left mouse button is released while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewMouseMove">
      <summary>Occurs when the mouse pointer moves while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewMouseMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewMouseMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
      <summary>Occurs when the right mouse button is pressed while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
      <summary>Occurs when the right mouse button is released while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewMouseUp">
      <summary>Occurs when any mouse button is released while the mouse pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewMouseUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewMouseUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewMouseWheel">
      <summary>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewMouseWheelEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseWheel" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewMouseWheel" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewQueryContinueDrag">
      <summary>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewQueryContinueDragEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewStylusButtonDown">
      <summary>Occurs when the stylus button is pressed while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewStylusButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewStylusButtonUp">
      <summary>Occurs when the stylus button is released while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewStylusButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewStylusDown">
      <summary>Occurs when the stylus touches the digitizer while it is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewStylusDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewStylusDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewStylusInAirMove">
      <summary>Occurs when the stylus moves over an element without actually touching the digitizer. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewStylusInAirMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewStylusInRange">
      <summary>Occurs when the stylus is close enough to the digitizer to be detected, while over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewStylusInRangeEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusInRange" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewStylusInRange" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewStylusMove">
      <summary>Occurs when the stylus moves while over the element. The stylus must move while being detected by the  digitizer  to raise this event, otherwise, <see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" /> is raised instead.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewStylusMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewStylusMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
      <summary>Occurs when the stylus is too far from the digitizer to be detected. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
      <summary>Occurs when a user performs one of several stylus gestures.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewStylusSystemGestureEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewStylusUp">
      <summary>Occurs when the user raises the stylus off the digitizer while the stylus is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewStylusUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewStylusUp" /> routed event. </returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewTextInput">
      <summary>Occurs when this element gets text in a device-independent manner. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewTextInputEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewTextInput" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewTextInput" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewTouchDown">
      <summary>Occurs when a finger touches the screen while the finger is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewTouchDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewTouchDown" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewTouchDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewTouchMove">
      <summary>Occurs when a finger moves on the screen while the finger is over this element.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewTouchMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewTouchMove" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewTouchMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewTouchUp">
      <summary>Occurs when a finger is raised off of the screen while the finger is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewTouchUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewTouchUp" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewTouchUp" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.QueryContinueDrag">
      <summary>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.QueryContinueDragEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.QueryContinueDrag" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.QueryContinueDrag" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.QueryCursor">
      <summary>Occurs when the cursor is requested to display. This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.QueryCursorEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.QueryCursor" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.QueryCursor" /> routed event.</returns>
    </member>
    <member name="M:System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)">
      <summary>Raises a specific routed event. The <see cref="T:System.Windows.RoutedEvent" /> to be raised is identified within the <see cref="T:System.Windows.RoutedEventArgs" /> instance that is provided (as the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of that event data). </summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data and also identifies the event to raise. </param>
    </member>
    <member name="M:System.Windows.ContentElement.ReleaseAllTouchCaptures">
      <summary>Releases all captured touch devices from this element.</summary>
    </member>
    <member name="M:System.Windows.ContentElement.ReleaseMouseCapture">
      <summary>Releases the mouse capture, if this element held the capture.</summary>
    </member>
    <member name="M:System.Windows.ContentElement.ReleaseStylusCapture">
      <summary>Releases the stylus device capture, if this element held the capture. </summary>
    </member>
    <member name="M:System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)">
      <summary>Attempts to release the specified touch device from this element.</summary>
      <returns>true if the touch device is released; otherwise, false.</returns>
      <param name="touchDevice">The device to release. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="touchDevice" /> is null.</exception>
    </member>
    <member name="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
      <summary>Removes the specified routed event handler from this element. </summary>
      <param name="routedEvent">The identifier of the routed event for which the handler is attached.</param>
      <param name="handler">The specific handler implementation to remove from the event handler collection on this element.</param>
    </member>
    <member name="M:System.Windows.ContentElement.ShouldSerializeCommandBindings">
      <summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.ContentElement.CommandBindings" /> property on instances of this class.</summary>
      <returns>true if the <see cref="P:System.Windows.ContentElement.CommandBindings" /> property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.ContentElement.ShouldSerializeInputBindings">
      <summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.ContentElement.InputBindings" /> property on instances of this class.</summary>
      <returns>true if the <see cref="P:System.Windows.ContentElement.InputBindings" /> property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.StylusButtonDown">
      <summary>Occurs when the stylus button is pressed while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.StylusButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.StylusButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.StylusButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.StylusButtonUp">
      <summary>Occurs when the stylus button is released while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.StylusButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.StylusButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.StylusButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.StylusDown">
      <summary>Occurs when the stylus touches the digitizer while the stylus is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.StylusDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.StylusDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.StylusDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.StylusEnter">
      <summary>Occurs when the stylus enters the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.StylusEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.StylusEnter" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.StylusEnter" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.StylusInAirMove">
      <summary>Occurs when the stylus moves over an element without actually touching the digitizer. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.StylusInAirMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.StylusInAirMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.StylusInAirMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.StylusInRange">
      <summary>Occurs when the stylus is close enough to the digitizer to be detected, while over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.StylusInRangeEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.StylusInRange" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.StylusInRange" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.StylusLeave">
      <summary>Occurs when the stylus leaves the bounds of the element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.StylusLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.StylusLeave" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.StylusLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.StylusMove">
      <summary>Occurs when the stylus moves over this element. The stylus must move while on the digitizer to raise this event. Otherwise, <see cref="E:System.Windows.ContentElement.StylusInAirMove" /> is raised instead.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.StylusMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.StylusMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.StylusMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.StylusOutOfRange">
      <summary>Occurs when the stylus is too far from the digitizer to be detected, while over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.StylusOutOfRangeEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.StylusOutOfRange" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.StylusOutOfRange" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.StylusSystemGesture">
      <summary>Occurs when a user performs one of several stylus gestures.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.StylusSystemGestureEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.StylusSystemGesture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.StylusSystemGesture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.StylusUp">
      <summary>Occurs when the user raises the stylus off the digitizer while it is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.StylusUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.StylusUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.StylusUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.TextInput">
      <summary>Occurs when this element gets text in a device-independent manner. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.TextInputEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.TextInput" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.TextInput" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.TouchDown">
      <summary>Occurs when a finger touches the screen while the finger is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.TouchDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.TouchDown" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.TouchDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.TouchEnter">
      <summary>Occurs when a touch moves from outside to inside the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.TouchEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.TouchEnter" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.TouchEnter" /> routed event.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.TouchesCaptured">
      <summary>Gets all touch devices that are captured to this element.</summary>
      <returns>An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.TouchesCapturedWithin">
      <summary>Gets all touch devices that are captured to this element or any child elements in its visual tree. </summary>
      <returns>An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element or any child elements in its visual tree.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.TouchesDirectlyOver">
      <summary>Gets all touch devices that are over this element.</summary>
      <returns>An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.TouchesOver">
      <summary>Gets all touch devices that are over this element or any child elements in its visual tree.</summary>
      <returns>An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element or any child elements in its visual tree.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.TouchLeave">
      <summary>Occurs when a touch moves from inside to outside the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.TouchLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.TouchLeave" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.TouchLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.TouchMove">
      <summary>Occurs when a finger moves on the screen while the finger is over this element.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.TouchMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.TouchMove" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.TouchMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.TouchUp">
      <summary>Occurs when a finger is raised off of the screen while the finger is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.TouchUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.TouchUp" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.TouchUp" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.ContentOperations">
      <summary>Provides static utility methods for getting or setting the position of a <see cref="T:System.Windows.ContentElement" /> in an element tree.</summary>
    </member>
    <member name="M:System.Windows.ContentOperations.GetParent(System.Windows.ContentElement)">
      <summary>Gets the parent element of the specified <see cref="T:System.Windows.ContentElement" />.</summary>
      <returns>The parent element in the current tree.</returns>
      <param name="reference">The <see cref="T:System.Windows.ContentElement" /> to get the parent from.</param>
    </member>
    <member name="M:System.Windows.ContentOperations.SetParent(System.Windows.ContentElement,System.Windows.DependencyObject)">
      <summary>Sets the parent element of the provided <see cref="T:System.Windows.ContentElement" />.</summary>
      <param name="reference">The <see cref="T:System.Windows.ContentElement" /> to reparent.</param>
      <param name="parent">The new parent element.</param>
    </member>
    <member name="T:System.Windows.CultureInfoIetfLanguageTagConverter">
      <summary>Converts instances of <see cref="T:System.Globalization.CultureInfo" /> to and from other data types.</summary>
    </member>
    <member name="M:System.Windows.CultureInfoIetfLanguageTagConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.CultureInfoIetfLanguageTagConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.CultureInfoIetfLanguageTagConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether <see cref="T:System.Windows.CultureInfoIetfLanguageTagConverter" /> can convert from a given type.</summary>
      <returns>true if <see cref="T:System.Windows.CultureInfoIetfLanguageTagConverter" /> can convert; otherwise, false. </returns>
      <param name="typeDescriptorContext">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> value.</param>
      <param name="sourceType">The <see cref="T:System.Type" /> being queried for conversion support.</param>
    </member>
    <member name="M:System.Windows.CultureInfoIetfLanguageTagConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether <see cref="T:System.Windows.CultureInfoIetfLanguageTagConverter" /> can convert to a given type.</summary>
      <returns>true if <see cref="T:System.Windows.CultureInfoIetfLanguageTagConverter" /> can convert; otherwise, false. </returns>
      <param name="typeDescriptorContext">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> value.</param>
      <param name="destinationType">The <see cref="T:System.Type" /> being queried for conversion support.</param>
    </member>
    <member name="M:System.Windows.CultureInfoIetfLanguageTagConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts a given object type to a <see cref="T:System.Globalization.CultureInfo" /> object.</summary>
      <returns>A <see cref="T:System.Globalization.CultureInfo" /> object.</returns>
      <param name="typeDescriptorContext">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> value.</param>
      <param name="cultureInfo">The <see cref="T:System.Globalization.CultureInfo" /> object whose value is respected during conversion.</param>
      <param name="source">The <see cref="T:System.Type" /> being converted.</param>
    </member>
    <member name="M:System.Windows.CultureInfoIetfLanguageTagConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts a <see cref="T:System.Globalization.CultureInfo" /> object to a given object type.</summary>
      <returns>A <see cref="T:System.Object" />.</returns>
      <param name="typeDescriptorContext">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> value.</param>
      <param name="cultureInfo">The <see cref="T:System.Globalization.CultureInfo" /> object whose value is respected during conversion.</param>
      <param name="value">The object that represents the <see cref="T:System.Globalization.CultureInfo" /> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type" /> of the returned converted object.</param>
    </member>
    <member name="T:System.Windows.DataFormat">
      <summary>Represents a data format by using a format name and numeric ID.</summary>
    </member>
    <member name="M:System.Windows.DataFormat.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DataFormat" /> class.</summary>
      <param name="name">The name for the data format.</param>
      <param name="id">The integer ID for the data format.</param>
    </member>
    <member name="P:System.Windows.DataFormat.Id">
      <summary>Gets the numeric ID of the data format.</summary>
      <returns>The numeric ID of the data format.</returns>
    </member>
    <member name="P:System.Windows.DataFormat.Name">
      <summary>Gets the name of the data format.</summary>
      <returns>The name of the data format.</returns>
    </member>
    <member name="T:System.Windows.DataFormats">
      <summary>Provides a set of predefined data format names that can be used to identify data formats available in the clipboard or drag-and-drop operations.</summary>
    </member>
    <member name="F:System.Windows.DataFormats.Bitmap">
      <summary>Specifies a Microsoft Windows bitmap data format.</summary>
      <returns>A string denoting the Windows bitmap data format: "Bitmap".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.CommaSeparatedValue">
      <summary>Specifies a comma-separated value (CSV) data format.</summary>
      <returns>A string denoting the comma-separated value data format: "CSV".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.Dib">
      <summary>Specifies the device-independent bitmap (DIB) data format.</summary>
      <returns>A string denoting the DIB data format: "DeviceIndependentBitmap".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.Dif">
      <summary>Specifies the Windows Data Interchange Format (DIF) data format.</summary>
      <returns>A string denoting the DIF data format: "DataInterchangeFormat".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.EnhancedMetafile">
      <summary>Specifies the Windows enhanced metafile format.</summary>
      <returns>A string denoting the Windows enhanced metafile format: "EnhancedMetafile".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.FileDrop">
      <summary>Specifies the Windows file drop format.</summary>
      <returns>A string denoting the Windows file drop format; "FileDrop".</returns>
    </member>
    <member name="M:System.Windows.DataFormats.GetDataFormat(System.Int32)">
      <summary>Returns a <see cref="T:System.Windows.DataFormat" /> object that defines a name and numeric ID for the specified data format. The desired data format is specified by numeric ID.</summary>
      <returns>A <see cref="T:System.Windows.DataFormat" /> object that contains the numeric ID and the name of the requested data format.</returns>
      <param name="id">The numeric ID of the data format to request a <see cref="T:System.Windows.DataFormat" /> object for.</param>
    </member>
    <member name="M:System.Windows.DataFormats.GetDataFormat(System.String)">
      <summary>Returns a <see cref="T:System.Windows.DataFormat" /> object that defines a name and numeric ID for the specified data format. The desired data format is specified by name (a string).</summary>
      <returns>A <see cref="T:System.Windows.DataFormat" /> object that contains the numeric ID and the name of the requested data format.</returns>
      <param name="format">The name of the data format to request a <see cref="T:System.Windows.DataFormat" /> object for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null.</exception>
    </member>
    <member name="F:System.Windows.DataFormats.Html">
      <summary>Specifies the HTML data format.</summary>
      <returns>A string denoting the HTML data format: "HTML Format".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.Locale">
      <summary>Specifies the Windows locale (culture) data format.</summary>
      <returns>A string denoting the Windows locale format: "Locale".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.MetafilePicture">
      <summary>Specifies the Windows metafile picture data format.</summary>
      <returns>A string denoting the Windows metafile picture data format: "MetaFilePict".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.OemText">
      <summary>Specifies the standard Windows OEM text data format.</summary>
      <returns>A string denoting the Windows OEM text data format: "OEMText".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.Palette">
      <summary>Specifies the Windows palette data format.</summary>
      <returns>A string denoting the Windows palette data format: "Palette".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.PenData">
      <summary>Specifies the Windows pen data format.</summary>
      <returns>A string denoting the Windows pen data format: "PenData".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.Riff">
      <summary>Specifies the Resource Interchange File Format (RIFF) audio data format.</summary>
      <returns>A string denoting the RIFF audio data format: "RiffAudio".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.Rtf">
      <summary>Specifies the Rich Text Format (RTF) data format.</summary>
      <returns>A string denoting the RTF data format: "Rich Text Format".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.Serializable">
      <summary>Specifies a data format that encapsulates any type of serializable data objects.</summary>
      <returns>A string denoting a serializable data format: "PersistentObject".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.StringFormat">
      <summary>Specifies the common language runtime (CLR) string class data format.</summary>
      <returns>A string denoting the CLR string class data format: "System.String".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.SymbolicLink">
      <summary>Specifies the Windows symbolic link data format.</summary>
      <returns>A string denoting the Windows symbolic link data format: "SymbolicLink".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.Text">
      <summary>Specifies the ANSI text data format.</summary>
      <returns>A string denoting the ANSI text data format: "Text".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.Tiff">
      <summary>Specifies the Tagged Image File Format (TIFF) data format.</summary>
      <returns>A string denoting the TIFF data format: "TaggedImageFileFormat".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.UnicodeText">
      <summary>Specifies the Unicode text data format.</summary>
      <returns>A string denoting the Unicode text data format: "UnicodeText".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.WaveAudio">
      <summary>Specifies the wave audio data format.</summary>
      <returns>A string denoting the wave audio format: "WaveAudio".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.Xaml">
      <summary>Specifies the Extensible Application Markup Language (XAML) data format.</summary>
      <returns>A string denoting the XAML data format: "Xaml".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.XamlPackage">
      <summary>Specifies the Extensible Application Markup Language (XAML) package data format.</summary>
      <returns>A string denoting the XAML data format: "XamlPackage".</returns>
    </member>
    <member name="T:System.Windows.DataObject">
      <summary>Provides a basic implementation of the <see cref="T:System.Windows.IDataObject" /> interface, which defines a format-independent mechanism for transferring data.</summary>
    </member>
    <member name="M:System.Windows.DataObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DataObject" /> class.</summary>
    </member>
    <member name="M:System.Windows.DataObject.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DataObject" /> class that contains the specified data.</summary>
      <param name="data">An object that represents the data to store in this data object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="data" /> references a <see cref="T:System.Windows.DataObject" /> object.</exception>
    </member>
    <member name="M:System.Windows.DataObject.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DataObject" /> class that contains the specified data and its associated format; the format is specified by a string.</summary>
      <param name="format">A string that specifies the format for the data. For a set of predefined data formats, see the       <see cref="T:System.Windows.DataFormats" /> class.</param>
      <param name="data">An object that represents the data to store in this data object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> or <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.#ctor(System.String,System.Object,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DataObject" /> class that contains the specified data and its associated format; the format is specified by a string. This overload includes a Boolean flag to indicate whether the data may be converted to another format on retrieval.</summary>
      <param name="format">A string that specifies the format for the data. For a set of predefined data formats, see the <see cref="T:System.Windows.DataFormats" /> class.</param>
      <param name="data">The data to store in this data object.</param>
      <param name="autoConvert">true to allow the data to be converted to another format on retrieval; false to prohibit the data from being converted to another format on retrieval.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> or <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.#ctor(System.Type,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DataObject" /> class that contains the specified data and its associated format; the data format is specified by a <see cref="T:System.Type" /> object.</summary>
      <param name="format">A <see cref="T:System.Type" /> that specifies the format for the data. For a set of predefined data formats, see the <see cref="T:System.Windows.DataFormats" /> class.</param>
      <param name="data">The data to store in this data object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> or <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.AddCopyingHandler(System.Windows.DependencyObject,System.Windows.DataObjectCopyingEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.DataObject.Copying" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to add.</param>
    </member>
    <member name="M:System.Windows.DataObject.AddPastingHandler(System.Windows.DependencyObject,System.Windows.DataObjectPastingEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.DataObject.Pasting" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to add.</param>
    </member>
    <member name="M:System.Windows.DataObject.AddSettingDataHandler(System.Windows.DependencyObject,System.Windows.DataObjectSettingDataEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.DataObject.SettingData" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to add.</param>
    </member>
    <member name="M:System.Windows.DataObject.ContainsAudio">
      <summary>Queries a data object for the presence of data in the <see cref="F:System.Windows.DataFormats.WaveAudio" /> data format.</summary>
      <returns>true if the data object contains data in the <see cref="F:System.Windows.DataFormats.WaveAudio" /> data format; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.DataObject.ContainsFileDropList">
      <summary>Queries a data object for the presence of data in the <see cref="F:System.Windows.DataFormats.FileDrop" /> data format.</summary>
      <returns>true if the data object contains data in the <see cref="F:System.Windows.DataFormats.FileDrop" /> data format; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.DataObject.ContainsImage">
      <summary>Queries a data object for the presence of data in the <see cref="F:System.Windows.DataFormats.Bitmap" /> data format.</summary>
      <returns>true if the data object contains data in the <see cref="F:System.Windows.DataFormats.Bitmap" /> data format; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.DataObject.ContainsText">
      <summary>Queries a data object for the presence of data in the <see cref="F:System.Windows.DataFormats.UnicodeText" /> format.</summary>
      <returns>true if the data object contains data in the <see cref="F:System.Windows.DataFormats.UnicodeText" /> data format; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.DataObject.ContainsText(System.Windows.TextDataFormat)">
      <summary>Queries a data object for the presence of data in a text data format.</summary>
      <returns>true if the data object contains data in a text data format; otherwise, false.</returns>
      <param name="format">A member of the <see cref="T:System.Windows.TextDataFormat" /> enumeration that specifies the text data format to query for.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="format" /> does not specify a valid member of <see cref="T:System.Windows.TextDataFormat" />.</exception>
    </member>
    <member name="E:System.Windows.DataObject.Copying">
      <summary>Occurs when the associated dependency object has prepared appropriate data formats that represent the copy selection, added the copy selection formats to a <see cref="T:System.Windows.DataObject" />, and is ready to either place the <see cref="T:System.Windows.DataObject" /> on the <see cref="T:System.Windows.Clipboard" /> or begin a drag-and-drop operation.</summary>
    </member>
    <member name="F:System.Windows.DataObject.CopyingEvent">
      <summary>Identifies the <see cref="E:System.Windows.DataObject.Copying" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.DataObject.Copying" />  attached event.</returns>
    </member>
    <member name="M:System.Windows.DataObject.GetAudioStream">
      <summary>Returns a stream that contains data in the <see cref="F:System.Windows.DataFormats.WaveAudio" /> data format.</summary>
      <returns>A stream that contains data in the <see cref="F:System.Windows.DataFormats.WaveAudio" /> format, or null if the data is unavailable in this format.</returns>
    </member>
    <member name="M:System.Windows.DataObject.GetData(System.String)">
      <summary>Returns data in a format specified by a string.</summary>
      <returns>An object that contains the data in the specified format, or null if the data is unavailable in the specified format.</returns>
      <param name="format">A string that specifies the format for the data. For a set of predefined data formats, see the <see cref="T:System.Windows.DataFormats" /> class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.GetData(System.String,System.Boolean)">
      <summary>Returns a data object in a specified format, optionally converting the data to the specified format.</summary>
      <returns>A data object with the data in the specified format, or null if the data is unavailable in the specified format.If the <paramref name="autoConvert" /> parameter is true and the data cannot be converted to the specified format, or if automatic conversion is disabled (by calling <see cref="M:System.Windows.DataObject.SetData(System.String,System.Object,System.Boolean)" /> with the <paramref name="autoConvert" /> parameter set to false), this method returns null.</returns>
      <param name="format">A string that specifies the format for the data. For a set of predefined data formats, see the <see cref="T:System.Windows.DataFormats" /> class.</param>
      <param name="autoConvert">true to attempt to automatically convert the data to the specified format; false for no data format conversion.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.GetData(System.Type)">
      <summary>Returns a data object in a format specified by a <see cref="T:System.Type" /> object.</summary>
      <returns>A data object with the data in the specified format, or null if the data is unavailable in the specified format.</returns>
      <param name="format">A <see cref="T:System.Type" /> that specifies the format for the data. For a set of predefined data formats, see the <see cref="T:System.Windows.DataFormats" /> class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.GetDataPresent(System.String)">
      <summary>Determines whether the data is available in, or can be converted to, a format specified by a string.</summary>
      <returns>true if the data is in, or can be converted to, the specified format; otherwise, false.</returns>
      <param name="format">A string that specifies the format for the data. For a set of predefined data formats, see the <see cref="T:System.Windows.DataFormats" /> class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.GetDataPresent(System.String,System.Boolean)">
      <summary>Determines whether the data is available in, or can be converted to, a specified format. A Boolean flag indicates whether to check if the data can be converted to the specified format if it is not available in that format.</summary>
      <returns>true if the data is in, or can be converted to, the specified format; otherwise, false.</returns>
      <param name="format">A string that specifies the data format to check. For a set of predefined data formats, see the <see cref="T:System.Windows.DataFormats" /> class.</param>
      <param name="autoConvert">false to check only for the specified format; true to also check whether data stored in this data object can be converted to the specified format.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.GetDataPresent(System.Type)">
      <summary>Determines whether the data is available in, or can be converted to, a format specified by a <see cref="T:System.Type" /> object.</summary>
      <returns>true if the data is in, or can be converted to, the specified format; otherwise, false.</returns>
      <param name="format">A <see cref="T:System.Type" /> that specifies the data format to check. F or a set of predefined data formats, see the <see cref="T:System.Windows.DataFormats" /> class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.GetFileDropList">
      <summary>Returns a string collection that contains a list of dropped files.</summary>
      <returns>A collection of strings, where each string specifies the name of a file in the list of dropped files, or null if the data is unavailable in this format.</returns>
    </member>
    <member name="M:System.Windows.DataObject.GetFormats">
      <summary>Returns a list of formats in which the data in this data object is stored, or can be converted to.</summary>
      <returns>An array of strings, with each string specifying the name of a format that this data object supports.</returns>
    </member>
    <member name="M:System.Windows.DataObject.GetFormats(System.Boolean)">
      <summary>Returns a list of formats in which the data in this data object is stored. A Boolean flag indicates whether to also include formats that the data can be automatically converted to.</summary>
      <returns>An array of strings, with each string specifying the name of a format supported by this data object.</returns>
      <param name="autoConvert">true to retrieve all formats in which the data in this data object is stored, or can be converted to; false to retrieve only formats in which the data in this data object is stored.</param>
    </member>
    <member name="M:System.Windows.DataObject.GetImage">
      <summary>Returns a <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> object that contains data in the <see cref="F:System.Windows.DataFormats.Bitmap" /> format.</summary>
      <returns>A <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> object that contains data in the <see cref="F:System.Windows.DataFormats.Bitmap" /> format, or null if the data is unavailable in this format.</returns>
    </member>
    <member name="M:System.Windows.DataObject.GetText">
      <summary>Returns a string that contains the <see cref="F:System.Windows.DataFormats.UnicodeText" /> data in this data object.</summary>
      <returns>A string that contains the <see cref="F:System.Windows.DataFormats.UnicodeText" /> data, or an empty string if no <see cref="F:System.Windows.DataFormats.UnicodeText" /> data is available.</returns>
    </member>
    <member name="M:System.Windows.DataObject.GetText(System.Windows.TextDataFormat)">
      <summary>Returns a string that contains text data of the specified format in this data object.</summary>
      <returns>A string containing text data in the specified data format, or an empty string if no corresponding text data is available.</returns>
      <param name="format">A member of <see cref="T:System.Windows.TextDataFormat" /> that specifies the specific text data format to retrieve.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="format" /> does not specify a valid member of <see cref="T:System.Windows.TextDataFormat" />.</exception>
    </member>
    <member name="E:System.Windows.DataObject.Pasting">
      <summary>Occurs when the associated dependency object is ready to paste data.</summary>
    </member>
    <member name="F:System.Windows.DataObject.PastingEvent">
      <summary>Identifies the <see cref="E:System.Windows.DataObject.Pasting" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.DataObject.Pasting" />  attached event.</returns>
    </member>
    <member name="M:System.Windows.DataObject.RemoveCopyingHandler(System.Windows.DependencyObject,System.Windows.DataObjectCopyingEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.DataObject.Copying" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to remove.</param>
    </member>
    <member name="M:System.Windows.DataObject.RemovePastingHandler(System.Windows.DependencyObject,System.Windows.DataObjectPastingEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.DataObject.Pasting" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to remove.</param>
    </member>
    <member name="M:System.Windows.DataObject.RemoveSettingDataHandler(System.Windows.DependencyObject,System.Windows.DataObjectSettingDataEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.DataObject.SettingData" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to remove.</param>
    </member>
    <member name="M:System.Windows.DataObject.SetAudio(System.Byte[])">
      <summary>Stores audio data (<see cref="F:System.Windows.DataFormats.WaveAudio" /> data format) in this data object. The audio data is specified as a byte array.</summary>
      <param name="audioBytes">A byte array that contains audio data to store in the data object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="audioBytes" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.SetAudio(System.IO.Stream)">
      <summary>Stores audio data (<see cref="F:System.Windows.DataFormats.WaveAudio" /> data format) in this data object.  The audio data is specified as a stream.</summary>
      <param name="audioStream">A stream that contains audio data to store in the data object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="audioStream" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.SetData(System.Object)">
      <summary>Stores the specified data in this data object, automatically determining the data format from the source object type.</summary>
      <param name="data">An object that represents the data to store in this data object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.SetData(System.String,System.Object)">
      <summary>Stores the specified data in this data object, along with one or more specified data formats; the data format is specified by a string.</summary>
      <param name="format">A string that specifies the format for the data. For a set of predefined data formats, see the <see cref="T:System.Windows.DataFormats" /> class.</param>
      <param name="data">An object that represents the data to store in this data object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> or <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.SetData(System.String,System.Object,System.Boolean)">
      <summary>Stores the specified data in this data object, along with one or more specified data formats. This overload includes a Boolean flag to indicate whether the data can be converted to another format on retrieval.</summary>
      <param name="format">A string that specifies the format for the data. For a set of predefined data formats, see the <see cref="T:System.Windows.DataFormats" /> class.</param>
      <param name="data">An object that represents the data to store in this data object.</param>
      <param name="autoConvert">true to allow the data to be converted to another format on retrieval; false to prohibit the data from being converted to another format on retrieval.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> or <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.SetData(System.Type,System.Object)">
      <summary>Stores the specified data in this data object, along with one or more specified data formats; the data format is specified by a <see cref="T:System.Type" /> object.</summary>
      <param name="format">A <see cref="T:System.Type" /> object that specifies the format for the data. For a set of predefined data formats, see the <see cref="T:System.Windows.DataFormats" /> class.</param>
      <param name="data">An object that represents the data to store in this data object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> or <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.SetFileDropList(System.Collections.Specialized.StringCollection)">
      <summary>Stores <see cref="F:System.Windows.DataFormats.FileDrop" /> data in this data object.  The dropped file list is specified as a string collection.</summary>
      <param name="fileDropList">A string collection that contains the dropped file list to store in the data object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileDropList" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileDropList" /> contains zero strings, or the full path to file specified in the list cannot be resolved.</exception>
    </member>
    <member name="M:System.Windows.DataObject.SetImage(System.Windows.Media.Imaging.BitmapSource)">
      <summary>Stores <see cref="F:System.Windows.DataFormats.Bitmap" /> data in this data object.  The image data is specified as a <see cref="T:System.Windows.Media.Imaging.BitmapSource" />.</summary>
      <param name="image">A <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> object that contains the image data to store in the data object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="image" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.SetText(System.String)">
      <summary>Stores <see cref="F:System.Windows.DataFormats.UnicodeText" /> data, specified as a string, in this data object.</summary>
      <param name="textData">A string that contains the <see cref="F:System.Windows.DataFormats.UnicodeText" /> data to store in the data object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textData" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.SetText(System.String,System.Windows.TextDataFormat)">
      <summary>Stores text data in this data object. The format of the text data to store is specified with a member of <see cref="T:System.Windows.TextDataFormat" />.</summary>
      <param name="textData">A string that contains the text data to store in the data object.</param>
      <param name="format">A member of <see cref="T:System.Windows.TextDataFormat" /> that specifies the text data format to store.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textData" /> is null.</exception>
    </member>
    <member name="E:System.Windows.DataObject.SettingData">
      <summary>Occurs when the associated dependency object attempts to add a new data format to a <see cref="T:System.Windows.DataObject" />.</summary>
    </member>
    <member name="F:System.Windows.DataObject.SettingDataEvent">
      <summary>Identifies the <see cref="E:System.Windows.DataObject.SettingData" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.DataObject.SettingData" /> attached event.</returns>
    </member>
    <member name="M:System.Windows.DataObject.System#Runtime#InteropServices#ComTypes#IDataObject#DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)">
      <summary>Creates a connection between a data object and an advisory sink. This method is called by an object that supports an advisory sink and enables the advisory sink to be notified of changes in the object's data.</summary>
      <returns>This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following: </returns>
      <param name="pFormatetc"> A <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format, target device, aspect, and medium that will be used for future notifications.</param>
      <param name="advf">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> values that specifies a group of flags for controlling the advisory connection.</param>
      <param name="pAdvSink">A pointer to the <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> interface on the advisory sink that will receive the change notification.</param>
      <param name="pdwConnection">When this method returns, contains a pointer to a DWORD token that identifies this connection. You can use this token later to delete the advisory connection by passing it to <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)" />. If this value is zero, the connection was not established. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Windows.DataObject.System#Runtime#InteropServices#ComTypes#IDataObject#DUnadvise(System.Int32)">
      <summary>Destroys a notification connection that had been previously established.</summary>
      <param name="dwConnection">A DWORD token that specifies the connection to remove. Use the value returned by <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> when the connection was originally established.</param>
    </member>
    <member name="M:System.Windows.DataObject.System#Runtime#InteropServices#ComTypes#IDataObject#EnumDAdvise(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>Creates an object that can be used to enumerate the current advisory connections.</summary>
      <returns>This method supports the standard return value E_OUTOFMEMORY, as well as the following:ValueDescriptionS_OKThe enumerator object is successfully instantiated or there are no connections.OLE_E_ADVISENOTSUPPORTEDThis object does not support advisory notifications.</returns>
      <param name="enumAdvise">When this method returns, contains an <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA" /> that receives the interface pointer to the new enumerator object. If the implementation sets <paramref name="enumAdvise" /> to null, there are no connections to advisory sinks at this time. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Windows.DataObject.System#Runtime#InteropServices#ComTypes#IDataObject#EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)">
      <summary>Creates an object for enumerating the <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structures for a data object. These structures are used in calls to <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> or <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />. </summary>
      <returns>This method supports the standard return values E_INVALIDARG and E_OUTOFMEMORY, as well as the following:ValueDescriptionS_OKThe enumerator object was successfully created.E_NOTIMPLThe direction specified by the <paramref name="direction" /> parameter is not supported.OLE_S_USEREGRequests that OLE enumerate the formats from the registry.</returns>
      <param name="dwDirection">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.DATADIR" /> values that specifies the direction of the data.</param>
    </member>
    <member name="M:System.Windows.DataObject.System#Runtime#InteropServices#ComTypes#IDataObject#GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>Provides a standard <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure that is logically equivalent to a more complex structure. Use this method to determine whether two different <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structures would return the same data, removing the need for duplicate rendering.</summary>
      <returns>This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following: ValueDescriptionS_OKThe returned <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure is different from the one that was passed.DATA_S_SAMEFORMATETCThe <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structures are the same and null is returned in the <paramref name="formatOut" /> parameter.DV_E_LINDEXThere is an invalid value for <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />; currently, only -1 is supported.DV_E_FORMATETCThere is an invalid value for the <paramref name="pFormatetc" /> parameter.OLE_E_NOTRUNNINGThe application is not running.</returns>
      <param name="pformatetcIn">A pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device that the caller would like to use to retrieve data in a subsequent call such as <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />. The <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> member is not significant in this case and should be ignored.</param>
      <param name="pformatetcOut">When this method returns, contains a pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure that contains the most general information possible for a specific rendering, making it canonically equivalent to <paramref name="formatetIn" />. The caller must allocate this structure and the <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)" /> method must fill in the data. To retrieve data in a subsequent call such as <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />, the caller uses the supplied value of <paramref name="formatOut" />, unless the value supplied is null. This value is null if the method returns DATA_S_SAMEFORMATETC. The <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> member is not significant in this case and should be ignored. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Windows.DataObject.System#Runtime#InteropServices#ComTypes#IDataObject#GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>Obtains data from a source data object. The <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> method, which is called by a data consumer, renders the data described in the specified <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure and transfers it through the specified <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> structure. The caller then assumes responsibility for releasing the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> structure.</summary>
      <param name="formatetc">A pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device to use when passing the data. It is possible to specify more than one medium by using the Boolean OR operator, allowing the method to choose the best medium among those specified.</param>
      <param name="medium">When this method returns, contains a pointer to the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> structure that indicates the storage medium containing the returned data through its <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed" /> member, and the responsibility for releasing the medium through the value of its <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> member. If <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> is null, the receiver of the medium is responsible for releasing it; otherwise, <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> points to the IUnknown interface on the appropriate object so its Release method can be called. The medium must be allocated and filled in by <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Windows.DataObject.System#Runtime#InteropServices#ComTypes#IDataObject#GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>Obtains data from a source data object. This method, which is called by a data consumer, differs from the <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> method in that the caller must allocate and free the specified storage medium.</summary>
      <param name="formatetc">A pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device to use when passing the data. Only one medium can be specified in <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" />, and only the following <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> values are valid: <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE" />, <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM" />, <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL" />, or <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE" />.</param>
      <param name="medium">A <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />, passed by reference, that defines the storage medium containing the data being transferred. The medium must be allocated by the caller and filled in by <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />. The caller must also free the medium. The implementation of this method must always supply a value of null for the <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> member of the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> structure that this parameter points to.</param>
    </member>
    <member name="M:System.Windows.DataObject.System#Runtime#InteropServices#ComTypes#IDataObject#QueryGetData(System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>Determines whether the data object is capable of rendering the data described in the <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure. Objects attempting a paste or drop operation can call this method before calling <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> to get an indication of whether the operation may be successful.</summary>
      <returns>This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following: ValueDescriptionS_OKA subsequent call to <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> would probably be successful.DV_E_LINDEXAn invalid value for <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />; currently, only -1 is supported.DV_E_FORMATETCAn invalid value for the <paramref name="pFormatetc" /> parameter.DV_E_TYMEDAn invalid <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed" /> value.DV_E_DVASPECTAn invalid <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect" /> value.OLE_E_NOTRUNNINGThe application is not running.</returns>
      <param name="formatetc">A pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device to use for the query.</param>
    </member>
    <member name="M:System.Windows.DataObject.System#Runtime#InteropServices#ComTypes#IDataObject#SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)">
      <summary>Transfers data to the object that implements this method. This method is called by an object that contains a data source.</summary>
      <param name="pFormatetcIn">A <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format used by the data object when interpreting the data contained in the storage medium.</param>
      <param name="pmedium">A <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> structure, passed by reference, that defines the storage medium in which the data is being passed.</param>
      <param name="fRelease">true to specify that the data object called, which implements <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />, owns the storage medium after the call returns. This means that the data object must free the medium after it has been used by calling the ReleaseStgMedium function. false to specify that the caller retains ownership of the storage medium, and the data object called uses the storage medium for the duration of the call only.</param>
    </member>
    <member name="T:System.Windows.DataObjectCopyingEventArgs">
      <summary>Arguments for the <see cref="T:System.Windows.DataObject" />.<see cref="E:System.Windows.DataObject.Copying" /> event.</summary>
    </member>
    <member name="M:System.Windows.DataObjectCopyingEventArgs.#ctor(System.Windows.IDataObject,System.Boolean)">
      <summary>Initializes a new instance of <see cref="T:System.Windows.DataObjectCopyingEventArgs" />.</summary>
      <param name="dataObject">A <see cref="T:System.Windows.DataObject" /> containing data ready to be copied.</param>
      <param name="isDragDrop">A Boolean value indicating whether the copy is part of a drag-and-drop operation. true to indicate that the copy is part of a drag-and-drop operation; otherwise, false. If this parameter is set to true, the <see cref="E:System.Windows.DataObject.Copying" /> event fires when dragging is initiated.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="dataObject" /> is null.</exception>
    </member>
    <member name="P:System.Windows.DataObjectCopyingEventArgs.DataObject">
      <summary>Gets the data object associated with the <see cref="E:System.Windows.DataObject.Copying" /> event.</summary>
      <returns>The data object associated with the <see cref="E:System.Windows.DataObject.Copying" /> event.</returns>
    </member>
    <member name="T:System.Windows.DataObjectCopyingEventHandler">
      <summary>Represents a method that will handle the <see cref="E:System.Windows.DataObject.Copying" /> attached event.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.DataObjectEventArgs">
      <summary>Provides an abstract base class for events associated with the <see cref="T:System.Windows.DataObject" /> class.</summary>
    </member>
    <member name="M:System.Windows.DataObjectEventArgs.CancelCommand">
      <summary>Cancels the associated command or operation.</summary>
    </member>
    <member name="P:System.Windows.DataObjectEventArgs.CommandCancelled">
      <summary>Gets a value indicating whether the associated command or operation has been canceled.</summary>
      <returns>true if the command has been canceled; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.DataObjectEventArgs.IsDragDrop">
      <summary>Gets a value indicating whether the associated event is part of a drag-and-drop operation.</summary>
      <returns>true if the associated event is part of a drag-and-drop operation; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.DataObjectPastingEventArgs">
      <summary>Contains arguments for the <see cref="T:System.Windows.DataObject" />.<see cref="E:System.Windows.DataObject.Pasting" /> event.</summary>
    </member>
    <member name="M:System.Windows.DataObjectPastingEventArgs.#ctor(System.Windows.IDataObject,System.Boolean,System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Windows.DataObjectPastingEventArgs" />.</summary>
      <param name="dataObject">A <see cref="T:System.Windows.DataObject" /> containing the data to be pasted.</param>
      <param name="isDragDrop">A Boolean value indicating whether the paste is part of a drag-and-drop operation. true to indicate that the paste is part of a drag-and-drop operation; otherwise, false. If this parameter is set to true, a <see cref="E:System.Windows.DataObject.Pasting" /> event is fired on drop.</param>
      <param name="formatToApply">A string specifying the preferred data format to use for the paste operation. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="dataObject" /> or <paramref name="formatToApply" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised when <paramref name="formatToApply" /> specifies a data format that is not present in the data object specified by <paramref name="dataObject" />.</exception>
    </member>
    <member name="P:System.Windows.DataObjectPastingEventArgs.DataObject">
      <summary>Gets or sets a suggested <see cref="T:System.Windows.DataObject" /> to use for the paste operation.</summary>
      <returns>The currently suggested <see cref="T:System.Windows.DataObject" /> to use for the paste operation. Getting this value returns the currently suggested <see cref="T:System.Windows.DataObject" /> for the paste operation.Setting this value specifies a new suggested <see cref="T:System.Windows.DataObject" /> to use for the paste operation.</returns>
      <exception cref="T:System.ArgumentNullException">Raised when an attempt is made to set this property to null.</exception>
      <exception cref="T:System.ArgumentException">Raised when an attempt is made to set this property to a data object that contains no data formats.</exception>
    </member>
    <member name="P:System.Windows.DataObjectPastingEventArgs.FormatToApply">
      <summary>Gets or sets a string specifying the suggested data format to use for the paste operation.</summary>
      <returns>A string specifying the suggested data format to use for the paste operation.Getting this value returns the currently suggested data format to use for the paste operation.Setting this value specifies a new suggested data format to use for the paste operation.</returns>
      <exception cref="T:System.ArgumentNullException">Raised when an attempt is made to set this property to null.</exception>
      <exception cref="T:System.ArgumentException">Raised when an attempt is made to set this property to a data format that is not present in the data object referenced by the <see cref="P:System.Windows.DataObjectPastingEventArgs.DataObject" /> property.</exception>
    </member>
    <member name="P:System.Windows.DataObjectPastingEventArgs.SourceDataObject">
      <summary>Gets a copy of the original data object associated with the paste operation.</summary>
      <returns>A copy of the original data object associated with the paste operation.</returns>
    </member>
    <member name="T:System.Windows.DataObjectPastingEventHandler">
      <summary>Represents a method that will handle the <see cref="E:System.Windows.DataObject.Pasting" /> attached event.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.DataObjectSettingDataEventArgs">
      <summary>Contains arguments for the <see cref="T:System.Windows.DataObject" />.<see cref="E:System.Windows.DataObject.SettingData" /> event.</summary>
    </member>
    <member name="M:System.Windows.DataObjectSettingDataEventArgs.#ctor(System.Windows.IDataObject,System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Windows.DataObjectSettingDataEventArgs" />.</summary>
      <param name="dataObject">The <see cref="T:System.Windows.DataObject" /> to which a new data format is being added.</param>
      <param name="format">A string specifying the new data format that is being added to the accompanying data object. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="dataObject" /> or <paramref name="format" /> is null.</exception>
    </member>
    <member name="P:System.Windows.DataObjectSettingDataEventArgs.DataObject">
      <summary>Gets the <see cref="T:System.Windows.DataObject" /> associated with the <see cref="E:System.Windows.DataObject.SettingData" /> event.</summary>
      <returns>The <see cref="T:System.Windows.DataObject" /> associated with the <see cref="E:System.Windows.DataObject.SettingData" /> event.</returns>
    </member>
    <member name="P:System.Windows.DataObjectSettingDataEventArgs.Format">
      <summary>Gets a string specifying the new data format that is being added to the accompanying data object.</summary>
      <returns>A string specifying the new data format that is being added to the accompanying data object.</returns>
    </member>
    <member name="T:System.Windows.DataObjectSettingDataEventHandler">
      <summary>Represents a method that will handle the <see cref="E:System.Windows.DataObject.SettingData" /> attached event.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.DragAction">
      <summary>Specifies how and if a drag-and-drop operation should continue.</summary>
    </member>
    <member name="F:System.Windows.DragAction.Continue">
      <summary>The operation will continue.</summary>
    </member>
    <member name="F:System.Windows.DragAction.Drop">
      <summary>The operation will stop with a drop.</summary>
    </member>
    <member name="F:System.Windows.DragAction.Cancel">
      <summary>The operation is canceled with no drop message.</summary>
    </member>
    <member name="T:System.Windows.DragDrop">
      <summary>Provides helper methods and fields for initiating drag-and-drop operations, including a method to begin a drag-and-drop operation, and facilities for adding and removing drag-and-drop related event handlers.</summary>
    </member>
    <member name="M:System.Windows.DragDrop.AddDragEnterHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.UIElement.DragEnter" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to be added.</param>
    </member>
    <member name="M:System.Windows.DragDrop.AddDragLeaveHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.UIElement.DragLeave" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to be added.</param>
    </member>
    <member name="M:System.Windows.DragDrop.AddDragOverHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.UIElement.DragOver" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to be added.</param>
    </member>
    <member name="M:System.Windows.DragDrop.AddDropHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.UIElement.Drop" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to be added.</param>
    </member>
    <member name="M:System.Windows.DragDrop.AddGiveFeedbackHandler(System.Windows.DependencyObject,System.Windows.GiveFeedbackEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.UIElement.GiveFeedback" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to be added.</param>
    </member>
    <member name="M:System.Windows.DragDrop.AddPreviewDragEnterHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.UIElement.PreviewDragEnter" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to be added.</param>
    </member>
    <member name="M:System.Windows.DragDrop.AddPreviewDragLeaveHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.UIElement.PreviewDragLeave" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to be added.</param>
    </member>
    <member name="M:System.Windows.DragDrop.AddPreviewDragOverHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.UIElement.PreviewDragOver" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to be added.</param>
    </member>
    <member name="M:System.Windows.DragDrop.AddPreviewDropHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.UIElement.PreviewDrop" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to be added.</param>
    </member>
    <member name="M:System.Windows.DragDrop.AddPreviewGiveFeedbackHandler(System.Windows.DependencyObject,System.Windows.GiveFeedbackEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to be added.</param>
    </member>
    <member name="M:System.Windows.DragDrop.AddPreviewQueryContinueDragHandler(System.Windows.DependencyObject,System.Windows.QueryContinueDragEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to be added.</param>
    </member>
    <member name="M:System.Windows.DragDrop.AddQueryContinueDragHandler(System.Windows.DependencyObject,System.Windows.QueryContinueDragEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.UIElement.QueryContinueDrag" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to be added.</param>
    </member>
    <member name="M:System.Windows.DragDrop.DoDragDrop(System.Windows.DependencyObject,System.Object,System.Windows.DragDropEffects)">
      <summary>Initiates a drag-and-drop operation.</summary>
      <returns>One of the <see cref="T:System.Windows.DragDropEffects" /> values that specifies the final effect that was performed during the drag-and-drop operation.</returns>
      <param name="dragSource">A reference to the dependency object that is the source of the data being dragged.</param>
      <param name="data">A data object that contains the data being dragged.</param>
      <param name="allowedEffects">One of the <see cref="T:System.Windows.DragDropEffects" /> values that specifies permitted effects of the drag-and-drop operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dragSource" /> or <paramref name="data" /> is null.</exception>
    </member>
    <member name="E:System.Windows.DragDrop.DragEnter">
      <summary>Occurs when an object is dragged into the bounds of an element.</summary>
    </member>
    <member name="F:System.Windows.DragDrop.DragEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.DragDrop.DragEnter" />  attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.DragEnter" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.DragDrop.DragLeave">
      <summary>Occurs when an object is dragged out of the bounds of an element.</summary>
    </member>
    <member name="F:System.Windows.DragDrop.DragLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.DragLeave" />  attached event</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.DragLeave" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.DragDrop.DragOver">
      <summary>Occurs when an object is dragged over the bounds of an element.</summary>
    </member>
    <member name="F:System.Windows.DragDrop.DragOverEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.DragOver" />  attached event</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.DragOver" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.DragDrop.Drop">
      <summary>Occurs when an object is dropped within the bounds of an element.</summary>
    </member>
    <member name="F:System.Windows.DragDrop.DropEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.Drop" />  attached event</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.Drop" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.DragDrop.GiveFeedback">
      <summary>Occurs when a drag-and-drop operation is started, and enables the drop target to send feedback information to the drop source.</summary>
    </member>
    <member name="F:System.Windows.DragDrop.GiveFeedbackEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.GiveFeedback" />  attached event</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.GiveFeedback" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.DragDrop.PreviewDragEnter">
      <summary>Occurs when an object is dragged into the bounds of an element.</summary>
    </member>
    <member name="F:System.Windows.DragDrop.PreviewDragEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewDragEnter" />  attached event</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewDragEnter" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.DragDrop.PreviewDragLeave">
      <summary>Occurs when an object is dragged out of the bounds of an element.</summary>
    </member>
    <member name="F:System.Windows.DragDrop.PreviewDragLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewDragLeave" />  attached event</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewDragLeave" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.DragDrop.PreviewDragOver">
      <summary>Occurs when an object is dragged over the bounds of an element.</summary>
    </member>
    <member name="F:System.Windows.DragDrop.PreviewDragOverEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewDragOver" />  attached event</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewDragOver" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.DragDrop.PreviewDrop">
      <summary>Occurs when an object is dropped within the bounds of the drop target.</summary>
    </member>
    <member name="F:System.Windows.DragDrop.PreviewDropEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewDrop" />  attached event</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewDrop" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.DragDrop.PreviewGiveFeedback">
      <summary>Occurs when a drag-and-drop operation is started, and enables the drop target to send feedback information to the drop source.</summary>
    </member>
    <member name="F:System.Windows.DragDrop.PreviewGiveFeedbackEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" />  attached event</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.DragDrop.PreviewQueryContinueDrag">
      <summary>Occurs when there is a change in the keyboard or mouse button states during a drag-and-drop operation, and enables the drop source to cancel the drag-and-drop operation depending on the key/button states. </summary>
    </member>
    <member name="F:System.Windows.DragDrop.PreviewQueryContinueDragEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" />  attached event</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.DragDrop.QueryContinueDrag">
      <summary>Occurs when there is a change in the keyboard or mouse button states during a drag-and-drop operation, and enables the drop source to cancel the drag-and-drop operation depending on the key/button states. </summary>
    </member>
    <member name="F:System.Windows.DragDrop.QueryContinueDragEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.QueryContinueDrag" />  attached event</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.QueryContinueDrag" /> attached event.</returns>
    </member>
    <member name="M:System.Windows.DragDrop.RemoveDragEnterHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.UIElement.DragEnter" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to be removed</param>
    </member>
    <member name="M:System.Windows.DragDrop.RemoveDragLeaveHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.UIElement.DragLeave" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to be removed</param>
    </member>
    <member name="M:System.Windows.DragDrop.RemoveDragOverHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.UIElement.DragOver" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to be removed</param>
    </member>
    <member name="M:System.Windows.DragDrop.RemoveDropHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.UIElement.Drop" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to be removed</param>
    </member>
    <member name="M:System.Windows.DragDrop.RemoveGiveFeedbackHandler(System.Windows.DependencyObject,System.Windows.GiveFeedbackEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.UIElement.GiveFeedback" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to be removed</param>
    </member>
    <member name="M:System.Windows.DragDrop.RemovePreviewDragEnterHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.UIElement.PreviewDragEnter" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to be removed</param>
    </member>
    <member name="M:System.Windows.DragDrop.RemovePreviewDragLeaveHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.UIElement.PreviewDragLeave" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to be removed</param>
    </member>
    <member name="M:System.Windows.DragDrop.RemovePreviewDragOverHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.UIElement.PreviewDragOver" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to be removed</param>
    </member>
    <member name="M:System.Windows.DragDrop.RemovePreviewDropHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.UIElement.PreviewDrop" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to be removed</param>
    </member>
    <member name="M:System.Windows.DragDrop.RemovePreviewGiveFeedbackHandler(System.Windows.DependencyObject,System.Windows.GiveFeedbackEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to be removed</param>
    </member>
    <member name="M:System.Windows.DragDrop.RemovePreviewQueryContinueDragHandler(System.Windows.DependencyObject,System.Windows.QueryContinueDragEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to be removed</param>
    </member>
    <member name="M:System.Windows.DragDrop.RemoveQueryContinueDragHandler(System.Windows.DependencyObject,System.Windows.QueryContinueDragEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.UIElement.QueryContinueDrag" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to be removed</param>
    </member>
    <member name="T:System.Windows.DragDropEffects">
      <summary>Specifies the effects of a drag-and-drop operation.</summary>
    </member>
    <member name="F:System.Windows.DragDropEffects.None">
      <summary>The drop target does not accept the data.</summary>
    </member>
    <member name="F:System.Windows.DragDropEffects.Copy">
      <summary>The data is copied to the drop target.</summary>
    </member>
    <member name="F:System.Windows.DragDropEffects.Move">
      <summary>The data from the drag source is moved to the drop target.</summary>
    </member>
    <member name="F:System.Windows.DragDropEffects.Link">
      <summary>The data from the drag source is linked to the drop target.</summary>
    </member>
    <member name="F:System.Windows.DragDropEffects.Scroll">
      <summary>Scrolling is about to start or is currently occurring in the drop target.</summary>
    </member>
    <member name="F:System.Windows.DragDropEffects.All">
      <summary>The data is copied, removed from the drag source, and scrolled in the drop target.</summary>
    </member>
    <member name="T:System.Windows.DragDropKeyStates">
      <summary>Specifies the current state of the modifier keys (SHIFT, CTRL, and ALT), as well as the state of the mouse buttons.</summary>
    </member>
    <member name="F:System.Windows.DragDropKeyStates.None">
      <summary>No modifier keys or mouse buttons are pressed.</summary>
    </member>
    <member name="F:System.Windows.DragDropKeyStates.LeftMouseButton">
      <summary>The left mouse button is pressed.</summary>
    </member>
    <member name="F:System.Windows.DragDropKeyStates.RightMouseButton">
      <summary>The right mouse button is pressed.</summary>
    </member>
    <member name="F:System.Windows.DragDropKeyStates.ShiftKey">
      <summary>The shift (SHIFT) key is pressed.</summary>
    </member>
    <member name="F:System.Windows.DragDropKeyStates.ControlKey">
      <summary>The control (CTRL) key is pressed.</summary>
    </member>
    <member name="F:System.Windows.DragDropKeyStates.MiddleMouseButton">
      <summary>The middle mouse button is pressed.</summary>
    </member>
    <member name="F:System.Windows.DragDropKeyStates.AltKey">
      <summary>The ALT key is pressed.</summary>
    </member>
    <member name="T:System.Windows.DragEventArgs">
      <summary>Contains arguments relevant to all drag-and-drop events (<see cref="E:System.Windows.DragDrop.DragEnter" />, <see cref="E:System.Windows.DragDrop.DragLeave" />, <see cref="E:System.Windows.DragDrop.DragOver" />, and <see cref="E:System.Windows.DragDrop.Drop" />).</summary>
    </member>
    <member name="P:System.Windows.DragEventArgs.AllowedEffects">
      <summary>Gets a member of the <see cref="T:System.Windows.DragDropEffects" /> enumeration that specifies which operations are allowed by the originator of the drag event.</summary>
      <returns>A member of the <see cref="T:System.Windows.DragDropEffects" /> enumeration that specifies which operations are allowed by the originator of the drag event.</returns>
    </member>
    <member name="P:System.Windows.DragEventArgs.Data">
      <summary>Gets a data object that contains the data associated with the corresponding drag event.</summary>
      <returns>A data object that contains the data associated with the corresponding drag event..</returns>
    </member>
    <member name="P:System.Windows.DragEventArgs.Effects">
      <summary>Gets or sets the target drop-and-drop operation.</summary>
      <returns>A member of the <see cref="T:System.Windows.DragDropEffects" /> enumeration specifying the target drag-and-drop operation.</returns>
    </member>
    <member name="M:System.Windows.DragEventArgs.GetPosition(System.Windows.IInputElement)">
      <summary>Returns a drop point that is relative to a specified <see cref="T:System.Windows.IInputElement" />.</summary>
      <returns>A drop point that is relative to the element specified in <paramref name="relativeTo" />.</returns>
      <param name="relativeTo">An <see cref="T:System.Windows.IInputElement" /> object for which to get a relative drop point.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="relativeTo" /> is null.</exception>
    </member>
    <member name="P:System.Windows.DragEventArgs.KeyStates">
      <summary>Gets a flag enumeration indicating the current state of the SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons.</summary>
      <returns>One or more members of the <see cref="T:System.Windows.DragDropKeyStates" /> flag enumeration.</returns>
    </member>
    <member name="T:System.Windows.DragEventHandler">
      <summary>Represents a method that will handle drag-and-drop routed events, for example <see cref="E:System.Windows.UIElement.DragEnter" />.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Duration">
      <summary>Represents the duration of time that a <see cref="T:System.Windows.Media.Animation.Timeline" /> is active.</summary>
    </member>
    <member name="M:System.Windows.Duration.#ctor(System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Duration" /> structure with the supplied <see cref="T:System.TimeSpan" /> value.</summary>
      <param name="timeSpan">Represents the initial time interval of this duration.</param>
      <exception cref="T:System.ArgumentException">Occurs when <paramref name="timeSpan" /> is initialized to a negative value.</exception>
    </member>
    <member name="M:System.Windows.Duration.Add(System.Windows.Duration)">
      <summary>Adds the value of the specified instance of <see cref="T:System.Windows.Duration" /> to the value of the current instance.</summary>
      <returns>If both instances of <see cref="T:System.Windows.Duration" /> have values, an instance of <see cref="T:System.Windows.Duration" /> that represents the combined values. Otherwise this method returns null.</returns>
      <param name="duration">An instance of <see cref="T:System.Windows.Duration" /> that represents the value of the current instance plus <paramref name="duration" />.</param>
    </member>
    <member name="P:System.Windows.Duration.Automatic">
      <summary>Gets a <see cref="T:System.Windows.Duration" /> value that is automatically determined.</summary>
      <returns>A <see cref="T:System.Windows.Duration" /> initialized to an automatic value.</returns>
    </member>
    <member name="M:System.Windows.Duration.Compare(System.Windows.Duration,System.Windows.Duration)">
      <summary>Compares one <see cref="T:System.Windows.Duration" /> value to another.</summary>
      <returns>If <paramref name="t1" /> is less than <paramref name="t2" />, a negative value that represents the difference. If <paramref name="t1" /> is equal to <paramref name="t2" />, zero. If <paramref name="t1" /> is greater than <paramref name="t2" />, a positive value that represents the difference.</returns>
      <param name="t1">The first instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">The second instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.Equals(System.Object)">
      <summary>Determines whether a specified object is equal to an instance of <see cref="T:System.Windows.Duration" />.</summary>
      <returns>true if value is equal to the current instance of Duration; otherwise, false.</returns>
      <param name="value">Object to check for equality.</param>
    </member>
    <member name="M:System.Windows.Duration.Equals(System.Windows.Duration)">
      <summary>Determines whether a specified <see cref="T:System.Windows.Duration" /> is equal to this instance of <see cref="T:System.Windows.Duration" />.</summary>
      <returns>true if <paramref name="duration" /> is equal to the current instance of <see cref="T:System.Windows.Duration" />; otherwise, false.</returns>
      <param name="duration">Instance of <see cref="T:System.Windows.Duration" /> to check for equality.</param>
    </member>
    <member name="M:System.Windows.Duration.Equals(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines whether two instances of <see cref="T:System.Windows.Duration" /> are equal.</summary>
      <returns>true if <paramref name="t1" /> is equal to <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">First instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">Second instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="P:System.Windows.Duration.Forever">
      <summary>Gets a <see cref="T:System.Windows.Duration" /> value that represents an infinite interval.</summary>
      <returns>A <see cref="T:System.Windows.Duration" /> initialized to a forever value.</returns>
    </member>
    <member name="M:System.Windows.Duration.GetHashCode">
      <summary>Gets a hash code for this instance.</summary>
      <returns>A signed 32-bit integer hash code.</returns>
    </member>
    <member name="P:System.Windows.Duration.HasTimeSpan">
      <summary>Gets a value that indicates if this <see cref="T:System.Windows.Duration" /> represents a <see cref="T:System.TimeSpan" /> value.</summary>
      <returns>True if this Duration is a <see cref="T:System.TimeSpan" /> value; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Duration.op_Addition(System.Windows.Duration,System.Windows.Duration)">
      <summary>Adds two instances of <see cref="T:System.Windows.Duration" /> together.</summary>
      <returns>If both instances of <see cref="T:System.Windows.Duration" /> have <see cref="T:System.TimeSpan" /> values, this method returns the sum of those two values. If either value is set to <see cref="P:System.Windows.Duration.Automatic" />, the method returns <see cref="P:System.Windows.Duration.Automatic" />. If either value is set to <see cref="P:System.Windows.Duration.Forever" />, the method returns <see cref="P:System.Windows.Duration.Forever" />.If either <paramref name="t1" /> or <paramref name="t2" /> has no value, this method returns null.</returns>
      <param name="t1">The first instance of <see cref="T:System.Windows.Duration" /> to add.</param>
      <param name="t2">The second instance of <see cref="T:System.Windows.Duration" /> to add.</param>
    </member>
    <member name="M:System.Windows.Duration.op_Equality(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines whether two instances of <see cref="T:System.Windows.Duration" /> are equal.</summary>
      <returns>true if both instances of <see cref="T:System.Windows.Duration" /> have values and are equal, or if both instances of <see cref="T:System.Windows.Duration" /> are null. Otherwise, this method returns false.</returns>
      <param name="t1">The first instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">The second instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.op_GreaterThan(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines if one instance of <see cref="T:System.Windows.Duration" /> is greater than another.</summary>
      <returns>true if both <paramref name="t1" /> and <paramref name="t2" /> have values and <paramref name="t1" /> is greater than <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The first instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">The second instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.op_GreaterThanOrEqual(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines whether an instance of <see cref="T:System.Windows.Duration" /> is greater than or equal to another instance.</summary>
      <returns>true if both <paramref name="t1" /> and <paramref name="t2" /> have values and <paramref name="t1" /> is greater than or equal to <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The first instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">The second instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.op_Implicit(System.TimeSpan)~System.Windows.Duration">
      <summary>Implicitly creates a <see cref="T:System.Windows.Duration" /> from a given <see cref="T:System.TimeSpan" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Duration" />.</returns>
      <param name="timeSpan">
        <see cref="T:System.TimeSpan" /> from which an instance of <see cref="T:System.Windows.Duration" /> is implicitly created.</param>
      <exception cref="T:System.ArgumentException">Occurs when <see cref="T:System.TimeSpan" /> is negative.</exception>
    </member>
    <member name="M:System.Windows.Duration.op_Inequality(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines if two instances of <see cref="T:System.Windows.Duration" /> are not equal.</summary>
      <returns>true if exactly one of <paramref name="t1" /> or <paramref name="t2" /> represent a value, or if they both represent values that are not equal; otherwise, false.</returns>
      <param name="t1">The first instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">The second instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.op_LessThan(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines if the value of one instance of <see cref="T:System.Windows.Duration" /> is less than the value of another instance.</summary>
      <returns>true if both <paramref name="t1" /> and <paramref name="t2" /> have values and <paramref name="t1" /> is less than <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The first instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">The second instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.op_LessThanOrEqual(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines if the value of one instance of <see cref="T:System.Windows.Duration" /> is less than or equal to the value of another instance.</summary>
      <returns>true if both <paramref name="t1" /> and <paramref name="t2" /> have values and <paramref name="t1" /> is less than or equal to <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The first instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">The second instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.op_Subtraction(System.Windows.Duration,System.Windows.Duration)">
      <summary>Subtracts the value of one instance of <see cref="T:System.Windows.Duration" /> from another.</summary>
      <returns>If both instances of <see cref="T:System.Windows.Duration" /> have values, an instance of <see cref="T:System.Windows.Duration" /> that represents the value of <paramref name="t1" /> minus <paramref name="t2" />. If <paramref name="t1" /> has a value of <see cref="P:System.Windows.Duration.Forever" /> and <paramref name="t2" /> has a value of <see cref="P:System.Windows.Duration.TimeSpan" />, this method returns <see cref="P:System.Windows.Duration.Forever" />. Otherwise this method returns null.</returns>
      <param name="t1">The first instance of <see cref="T:System.Windows.Duration" />.</param>
      <param name="t2">The instance of <see cref="T:System.Windows.Duration" /> to subtract.</param>
    </member>
    <member name="M:System.Windows.Duration.op_UnaryPlus(System.Windows.Duration)">
      <summary>Returns the specified instance of <see cref="T:System.Windows.Duration" />.</summary>
      <returns>An instance of <see cref="T:System.Windows.Duration" />.</returns>
      <param name="duration">The instance of <see cref="T:System.Windows.Duration" /> to get.</param>
    </member>
    <member name="M:System.Windows.Duration.Plus(System.Windows.Duration)">
      <summary>Returns the specified instance of <see cref="T:System.Windows.Duration" />.</summary>
      <returns>An instance of <see cref="T:System.Windows.Duration" />.</returns>
      <param name="duration">The instance of <see cref="T:System.Windows.Duration" /> to get.</param>
    </member>
    <member name="M:System.Windows.Duration.Subtract(System.Windows.Duration)">
      <summary>Subtracts the value of the specified instance of <see cref="T:System.Windows.Duration" /> from this instance.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Duration" /> whose value is the result of this instance minus the value of <paramref name="duration" />.</returns>
      <param name="duration">The instance of <see cref="T:System.Windows.Duration" /> to subtract from the current instance.</param>
    </member>
    <member name="P:System.Windows.Duration.TimeSpan">
      <summary>Gets the <see cref="T:System.TimeSpan" /> value that this <see cref="T:System.Windows.Duration" /> represents.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> value that this <see cref="T:System.Windows.Duration" /> represents.</returns>
      <exception cref="T:System.InvalidOperationException">Occurs if <see cref="T:System.Windows.Duration" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Duration.ToString">
      <summary>Converts an instance of <see cref="T:System.Windows.Duration" /> to a <see cref="T:System.String" /> representation.</summary>
      <returns>A <see cref="T:System.String" /> representation of this instance of <see cref="T:System.Windows.Duration" />.</returns>
    </member>
    <member name="T:System.Windows.DurationConverter">
      <summary>Converts instances of <see cref="T:System.Windows.Duration" /> to and from other type representations.</summary>
    </member>
    <member name="M:System.Windows.DurationConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DurationConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.DurationConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines if conversion from a given type to an instance of <see cref="T:System.Windows.Duration" /> is possible.</summary>
      <returns>true if <paramref name="t" /> is of type <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="td">Context information used for conversion.</param>
      <param name="t">Type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.DurationConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines if conversion to a specified type is possible.</summary>
      <returns>true if <paramref name="destinationType" /> is of type <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">Context information used for conversion.</param>
      <param name="destinationType">Type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.DurationConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts a given string value to an instance of <see cref="T:System.Windows.Duration" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Duration" />.</returns>
      <param name="td">Context information used for conversion.</param>
      <param name="cultureInfo">Cultural information that is respected during conversion.</param>
      <param name="value">String value to convert to an instance of <see cref="T:System.Windows.Duration" />.</param>
    </member>
    <member name="M:System.Windows.DurationConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts an instance of <see cref="T:System.Windows.Duration" /> to another type.</summary>
      <returns>A new instance of the <paramref name="destinationType" />.</returns>
      <param name="context">Context information used for conversion.</param>
      <param name="cultureInfo">Cultural information that is respected during conversion.</param>
      <param name="value">Duration value to convert from.</param>
      <param name="destinationType">Type being evaluated for conversion.</param>
    </member>
    <member name="T:System.Windows.EventManager">
      <summary>Provides event-related utility methods that register routed events for class owners and add class handlers. </summary>
    </member>
    <member name="M:System.Windows.EventManager.GetRoutedEvents">
      <summary>Returns identifiers for routed events that have been registered to the event system. </summary>
      <returns>An array of type <see cref="T:System.Windows.RoutedEvent" /> that contains the registered objects.</returns>
    </member>
    <member name="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)">
      <summary>Finds all routed event identifiers for events that are registered with the provided owner type. </summary>
      <returns>An array of matching routed event identifiers if any match is found; otherwise, null.</returns>
      <param name="ownerType">The type to start the search with. Base classes are included in the search.</param>
    </member>
    <member name="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
      <summary>Registers a class handler for a particular routed event. </summary>
      <param name="classType">The type of the class that is declaring class handling.</param>
      <param name="routedEvent">The routed event identifier of the event to handle.</param>
      <param name="handler">A reference to the class handler implementation.</param>
    </member>
    <member name="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
      <summary> Registers a class handler for a particular routed event, with the option to handle events where event data is already marked handled.</summary>
      <param name="classType">The type of the class that is declaring class handling.</param>
      <param name="routedEvent">The routed event identifier of the event to handle.</param>
      <param name="handler">A reference to the class handler implementation.</param>
      <param name="handledEventsToo">true to invoke this class handler even if arguments of the routed event have been marked as handled; false to retain the default behavior of not invoking the handler on any marked-handled event.</param>
    </member>
    <member name="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
      <summary>Registers a new routed event with the Windows Presentation Foundation (WPF) event system. </summary>
      <returns>The identifier for the newly registered routed event. This identifier object can now be stored as a static field in a class and then used as a parameter for methods that attach handlers to the event. The routed event identifier is also used for other event system APIs.</returns>
      <param name="name">The name of the routed event. The name must be unique within the owner type and cannot be null or an empty string.</param>
      <param name="routingStrategy">The routing strategy of the event as a value of the enumeration.</param>
      <param name="handlerType">The type of the event handler. This must be a delegate type and cannot be null.</param>
      <param name="ownerType">The owner class type of the routed event. This cannot be null.</param>
    </member>
    <member name="T:System.Windows.EventPrivateKey">
      <summary>Provides unique identification for events whose handlers are stored into an internal hashtable. </summary>
    </member>
    <member name="M:System.Windows.EventPrivateKey.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.EventPrivateKey" /> class. </summary>
    </member>
    <member name="T:System.Windows.EventRoute">
      <summary>Represents the container for the route to be followed by a routed event. </summary>
    </member>
    <member name="M:System.Windows.EventRoute.#ctor(System.Windows.RoutedEvent)">
      <summary> Initializes an instance of the <see cref="T:System.Windows.EventRoute" /> class. </summary>
      <param name="routedEvent">The non-NULL event identifier to be associated with this event route.</param>
    </member>
    <member name="M:System.Windows.EventRoute.Add(System.Object,System.Delegate,System.Boolean)">
      <summary> Adds the specified handler for the specified target to the route. </summary>
      <param name="target">Specifies the target object of which the handler is to be added to the route.</param>
      <param name="handler">Specifies the handler to be added to the route.</param>
      <param name="handledEventsToo">Indicates whether or not the listener detects events that have already been handled.</param>
    </member>
    <member name="M:System.Windows.EventRoute.PeekBranchNode">
      <summary>Returns the top-most element on the event route stack at which two logical trees diverge.</summary>
      <returns>The top-most element on the event route stack at which two logical trees diverge.</returns>
    </member>
    <member name="M:System.Windows.EventRoute.PeekBranchSource">
      <summary>Returns the source for the top-most element on the event route stack at which two logical trees diverge.</summary>
      <returns>The source for the top-most element on the event route stack at which two logical trees diverge.</returns>
    </member>
    <member name="M:System.Windows.EventRoute.PopBranchNode">
      <summary>Returns the top-most node on the event route stack at which two logical trees diverge.</summary>
      <returns>The top-most node on the event route stack at which two logical trees diverge.</returns>
    </member>
    <member name="M:System.Windows.EventRoute.PushBranchNode(System.Object,System.Object)">
      <summary>Adds the top-most node to the event route stack at which two logical trees diverge.</summary>
      <param name="node">The top-most element on the event route stack at which two logical trees diverge.</param>
      <param name="source">The source for the top-most element on the event route stack at which two logical trees diverge.</param>
    </member>
    <member name="T:System.Windows.FlowDirection">
      <summary>Defines constants that specify the content flow direction for text and user interface (UI) elements. </summary>
    </member>
    <member name="F:System.Windows.FlowDirection.LeftToRight">
      <summary>Indicates that content should flow from left to right.</summary>
    </member>
    <member name="F:System.Windows.FlowDirection.RightToLeft">
      <summary>Indicates that content should flow from right to left.</summary>
    </member>
    <member name="T:System.Windows.FontCapitals">
      <summary>Describes the capital letter style for a <see cref="T:System.Windows.Documents.Typography" /> object.</summary>
    </member>
    <member name="F:System.Windows.FontCapitals.Normal">
      <summary>Capital letters render normally.</summary>
    </member>
    <member name="F:System.Windows.FontCapitals.AllSmallCaps">
      <summary>Both capital and lowercase letters are replaced with a glyph form of an uppercase letter with the same approximate height.</summary>
    </member>
    <member name="F:System.Windows.FontCapitals.SmallCaps">
      <summary>Lowercase letters are replaced with a glyph form of an uppercase letter with the same approximate height.</summary>
    </member>
    <member name="F:System.Windows.FontCapitals.AllPetiteCaps">
      <summary>Both capital and lowercase letters are replaced with a glyph form of an uppercase letter with the same approximate height. Petite capitals are smaller than small capitals.</summary>
    </member>
    <member name="F:System.Windows.FontCapitals.PetiteCaps">
      <summary>Lowercase letters are replaced with a glyph form of an uppercase letter with the same approximate height. Petite capitals are smaller than small capitals.</summary>
    </member>
    <member name="F:System.Windows.FontCapitals.Unicase">
      <summary>Capital letters display in unicase. Unicase fonts render both upper and lowercase letters in a mixture of upper and lowercase glyphs determined by the type designer.</summary>
    </member>
    <member name="F:System.Windows.FontCapitals.Titling">
      <summary>Glyph forms are substituted with a typographic form specifically designed for titles.</summary>
    </member>
    <member name="T:System.Windows.FontEastAsianLanguage">
      <summary>Provides a mechanism for the user to select font-specific versions of glyphs for a specified East Asian writing system or language. </summary>
    </member>
    <member name="F:System.Windows.FontEastAsianLanguage.Normal">
      <summary>No font-specific glyph versions are applied.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianLanguage.Jis78">
      <summary>Replaces default Japanese glyphs with the corresponding forms from the JIS78 specification.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianLanguage.Jis83">
      <summary>Replaces default Japanese glyphs with the corresponding forms from the JIS83 specification.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianLanguage.Jis90">
      <summary>Replaces default Japanese glyphs with the corresponding forms from the JIS90 specification.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianLanguage.Jis04">
      <summary>Replaces default Japanese glyphs with the corresponding forms from the JIS04 specification.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianLanguage.HojoKanji">
      <summary>Replaces default glyphs with the corresponding forms from the Hojo Kanji specification.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianLanguage.NlcKanji">
      <summary>Replaces default glyphs with the corresponding forms from the NLC Kanji specification.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianLanguage.Simplified">
      <summary>Replaces traditional Chinese or Japanese forms with their corresponding simplified forms.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianLanguage.Traditional">
      <summary>Replaces simplified Chinese or Japanese forms with their corresponding traditional forms.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianLanguage.TraditionalNames">
      <summary>Replaces simplified Kanji forms with their corresponding traditional forms. This glyph set is explicitly limited to the traditional forms considered proper for use in personal names.</summary>
    </member>
    <member name="T:System.Windows.FontEastAsianWidths">
      <summary>Provides a mechanism for the user to select glyphs of different width styles.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianWidths.Normal">
      <summary>Default width style.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianWidths.Proportional">
      <summary>Replaces uniform width glyphs with proportionally spaced glyphs.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianWidths.Full">
      <summary>Replaces uniform width glyphs with full width (usually em) glyphs.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianWidths.Half">
      <summary>Replaces uniform width glyphs with half width (half em) glyphs.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianWidths.Third">
      <summary>Replaces uniform width glyphs with one-third width (one-third em) glyphs.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianWidths.Quarter">
      <summary>Replaces uniform width glyphs with one-quarter width (one-quarter em) glyphs.</summary>
    </member>
    <member name="T:System.Windows.FontFraction">
      <summary>Describes the fraction style for a <see cref="T:System.Windows.Documents.Typography" /> object.</summary>
    </member>
    <member name="F:System.Windows.FontFraction.Normal">
      <summary>Default style is used.</summary>
    </member>
    <member name="F:System.Windows.FontFraction.Slashed">
      <summary>Slashed fraction style is used.</summary>
    </member>
    <member name="F:System.Windows.FontFraction.Stacked">
      <summary>Stacked fraction style is used.</summary>
    </member>
    <member name="T:System.Windows.FontNumeralAlignment">
      <summary>Describes the numeral alignment for a <see cref="T:System.Windows.Documents.Typography" /> object.</summary>
    </member>
    <member name="F:System.Windows.FontNumeralAlignment.Normal">
      <summary>Default numeral alignment is used.</summary>
    </member>
    <member name="F:System.Windows.FontNumeralAlignment.Proportional">
      <summary>Proportional width alignment is used.</summary>
    </member>
    <member name="F:System.Windows.FontNumeralAlignment.Tabular">
      <summary>Tabular alignment is used.</summary>
    </member>
    <member name="T:System.Windows.FontNumeralStyle">
      <summary>Describes the numeral style for a <see cref="T:System.Windows.Documents.Typography" /> object.</summary>
    </member>
    <member name="F:System.Windows.FontNumeralStyle.Normal">
      <summary>Default numeral style is used.</summary>
    </member>
    <member name="F:System.Windows.FontNumeralStyle.Lining">
      <summary>Lining numeral style is used. Replaces default glyphs with numeric forms of even height.</summary>
    </member>
    <member name="F:System.Windows.FontNumeralStyle.OldStyle">
      <summary>Old style numeral style is used. Replaces default glyphs with a figure style that matches lowercase letters in height and color.</summary>
    </member>
    <member name="T:System.Windows.FontStretch">
      <summary>Describes the degree to which a font has been stretched compared to the normal aspect ratio of that font.</summary>
    </member>
    <member name="M:System.Windows.FontStretch.Compare(System.Windows.FontStretch,System.Windows.FontStretch)">
      <summary>Compares two instances of <see cref="T:System.Windows.FontStretch" /> objects.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the relationship between the two instances of <see cref="T:System.Windows.FontStretch" />.</returns>
      <param name="left">The first <see cref="T:System.Windows.FontStretch" /> object to compare.</param>
      <param name="right">The second <see cref="T:System.Windows.FontStretch" /> object to compare.</param>
    </member>
    <member name="M:System.Windows.FontStretch.Equals(System.Object)">
      <summary>Compares a <see cref="T:System.Object" /> with the current <see cref="T:System.Windows.FontStretch" /> object.</summary>
      <returns>true if two instances are equal; otherwise, false.</returns>
      <param name="obj">The instance of the <see cref="T:System.Object" /> to compare for equality.</param>
    </member>
    <member name="M:System.Windows.FontStretch.Equals(System.Windows.FontStretch)">
      <summary>Compares a <see cref="T:System.Windows.FontStretch" /> object with the current <see cref="T:System.Windows.FontStretch" /> object.</summary>
      <returns>true if two instances are equal; otherwise, false.</returns>
      <param name="obj">The instance of the <see cref="T:System.Windows.FontStretch" /> object to compare for equality.</param>
    </member>
    <member name="M:System.Windows.FontStretch.FromOpenTypeStretch(System.Int32)">
      <summary>Creates a new instance of <see cref="T:System.Windows.FontStretch" /> that corresponds to the OpenType usStretchClass value. </summary>
      <returns>A new instance of <see cref="T:System.Windows.FontStretch" />.</returns>
      <param name="stretchValue">An integer value between one and nine that corresponds to the usStretchValue definition in the OpenType specification. </param>
    </member>
    <member name="M:System.Windows.FontStretch.GetHashCode">
      <summary>Retrieves the hash code for this object.</summary>
      <returns>An <see cref="T:System.Int32" /> value representing the hash code for the object.</returns>
    </member>
    <member name="M:System.Windows.FontStretch.op_Equality(System.Windows.FontStretch,System.Windows.FontStretch)">
      <summary>Compares two instances of <see cref="T:System.Windows.FontStretch" /> for equality.</summary>
      <returns>true when the specified <see cref="T:System.Windows.FontStretch" /> objects are equal; otherwise, false.</returns>
      <param name="left">First instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
      <param name="right">Second instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontStretch.op_GreaterThan(System.Windows.FontStretch,System.Windows.FontStretch)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontStretch" /> to determine if one instance is greater than the other.</summary>
      <returns>true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">First instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
      <param name="right">Second instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontStretch.op_GreaterThanOrEqual(System.Windows.FontStretch,System.Windows.FontStretch)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontStretch" /> to determine whether one instance is greater than or equal to the other.</summary>
      <returns>true if <paramref name="left" /> is greater than or equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontStretch.op_Inequality(System.Windows.FontStretch,System.Windows.FontStretch)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontStretch" /> to determine inequality.</summary>
      <returns>false if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, true.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontStretch.op_LessThan(System.Windows.FontStretch,System.Windows.FontStretch)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontStretch" /> to determine whether one instance is less than the other. </summary>
      <returns>true if <paramref name="left" /> is less than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontStretch.op_LessThanOrEqual(System.Windows.FontStretch,System.Windows.FontStretch)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontStretch" /> to determine whether one instance is less than or equal to the other.</summary>
      <returns>true if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontStretch.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <returns>A <see cref="T:System.String" /> containing the value of the current instance in the specified format.</returns>
      <param name="format">The <see cref="T:System.String" /> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation. </param>
      <param name="provider">The <see cref="T:System.IFormatProvider" /> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system. </param>
    </member>
    <member name="M:System.Windows.FontStretch.ToOpenTypeStretch">
      <summary>Returns a value that represents the OpenType usStretchClass for this <see cref="T:System.Windows.FontStretch" /> object. </summary>
      <returns>An integer value between 1 and 999 that corresponds to the usStretchClass definition in the OpenType specification.</returns>
    </member>
    <member name="M:System.Windows.FontStretch.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of the current <see cref="T:System.Windows.FontStretch" /> object based on the current culture.</summary>
      <returns>A <see cref="T:System.String" /> value representation of the object.</returns>
    </member>
    <member name="T:System.Windows.FontStretchConverter">
      <summary>Converts instances of <see cref="T:System.Windows.FontStretch" /> to and from other type representations.</summary>
    </member>
    <member name="M:System.Windows.FontStretchConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.FontStretchConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.FontStretchConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines if conversion from a specified type to a <see cref="T:System.Windows.FontStretch" /> value is possible.</summary>
      <returns>true if <paramref name="t" /> can create a <see cref="T:System.Windows.FontStretch" />; otherwise, false.</returns>
      <param name="td">Context information of a type.</param>
      <param name="t">The type of the source that is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.FontStretchConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of <see cref="T:System.Windows.FontStretch" /> can be converted to a different type.</summary>
      <returns>true if the converter can convert <see cref="T:System.Windows.FontStretch" /> to <paramref name="destinationType" />; otherwise, false.</returns>
      <param name="context">Context information of a type.</param>
      <param name="destinationType">The desired type that that this instance of <see cref="T:System.Windows.FontStretch" /> is being evaluated for conversion to.</param>
    </member>
    <member name="M:System.Windows.FontStretchConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert a specified object to an instance of <see cref="T:System.Windows.FontStretch" />.</summary>
      <returns>The instance of <see cref="T:System.Windows.FontStretch" /> created from the converted <paramref name="value" />.</returns>
      <param name="td">Context information of a type.</param>
      <param name="ci">
        <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The object being converted.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is null or is not a valid type for conversion.</exception>
    </member>
    <member name="M:System.Windows.FontStretchConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert an instance of <see cref="T:System.Windows.FontStretch" /> to a specified type.</summary>
      <returns>The object created from the converted instance of <see cref="T:System.Windows.FontStretch" />.</returns>
      <param name="context">Context information of a type.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The instance of <see cref="T:System.Windows.FontStretch" /> to convert.</param>
      <param name="destinationType">The type this instance of <see cref="T:System.Windows.FontStretch" /> is converted to.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is null- or -<paramref name="value" /> is not an instance of <see cref="T:System.Windows.FontStretch" />- or -<paramref name="destinationType" /> is not a valid destination type.</exception>
    </member>
    <member name="T:System.Windows.FontStretches">
      <summary>Provides a set of static predefined <see cref="T:System.Windows.FontStretch" /> values.</summary>
    </member>
    <member name="P:System.Windows.FontStretches.Condensed">
      <summary>Specifies a condensed <see cref="T:System.Windows.FontStretch" />.</summary>
      <returns>A value that represents a condensed <see cref="T:System.Windows.FontStretch" />.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.Expanded">
      <summary>Specifies an expanded <see cref="T:System.Windows.FontStretch" />.</summary>
      <returns>A value that represents an expanded <see cref="T:System.Windows.FontStretch" />.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.ExtraCondensed">
      <summary>Specifies an extra-condensed <see cref="T:System.Windows.FontStretch" />.</summary>
      <returns>A value that represents an extra-condensed <see cref="T:System.Windows.FontStretch" />.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.ExtraExpanded">
      <summary>Specifies an extra-expanded <see cref="T:System.Windows.FontStretch" />.</summary>
      <returns>A value that represents an extra-expanded <see cref="T:System.Windows.FontStretch" />.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.Medium">
      <summary>Specifies a medium <see cref="T:System.Windows.FontStretch" />.</summary>
      <returns>A value that represents a medium <see cref="T:System.Windows.FontStretch" />.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.Normal">
      <summary>Specifies a normal <see cref="T:System.Windows.FontStretch" />.</summary>
      <returns>A value that represents a normal <see cref="T:System.Windows.FontStretch" />.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.SemiCondensed">
      <summary>Specifies a semi-condensed <see cref="T:System.Windows.FontStretch" />.</summary>
      <returns>A value that represents a semi-condensed <see cref="T:System.Windows.FontStretch" />.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.SemiExpanded">
      <summary>Specifies a semi-expanded <see cref="T:System.Windows.FontStretch" />.</summary>
      <returns>A value that represents a semi-expanded <see cref="T:System.Windows.FontStretch" />.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.UltraCondensed">
      <summary>Specifies an ultra-condensed <see cref="T:System.Windows.FontStretch" />.</summary>
      <returns>A value that represents an ultra-condensed <see cref="T:System.Windows.FontStretch" />.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.UltraExpanded">
      <summary>Specifies an ultra-expanded <see cref="T:System.Windows.FontStretch" />.</summary>
      <returns>A value that represents an ultra-expanded <see cref="T:System.Windows.FontStretch" />.</returns>
    </member>
    <member name="T:System.Windows.FontStyle">
      <summary>Defines a structure that represents the style of a font face as normal, italic, or oblique.</summary>
    </member>
    <member name="M:System.Windows.FontStyle.Equals(System.Object)">
      <summary>Compares an <see cref="T:System.Object" /> with the current <see cref="T:System.Windows.FontStyle" /> instance for equality.</summary>
      <returns>true to show the two instances are equal; otherwise, false.</returns>
      <param name="obj">An <see cref="T:System.Object" /> value that represents the <see cref="T:System.Windows.FontStyle" /> to compare for equality.</param>
    </member>
    <member name="M:System.Windows.FontStyle.Equals(System.Windows.FontStyle)">
      <summary>Compares a <see cref="T:System.Windows.FontStyle" /> with the current <see cref="T:System.Windows.FontStyle" /> instance for equality.</summary>
      <returns>true to show the two instances are equal; otherwise, false.</returns>
      <param name="obj">An instance of <see cref="T:System.Windows.FontStyle" /> to compare for equality.</param>
    </member>
    <member name="M:System.Windows.FontStyle.GetHashCode">
      <summary>Retrieves the hash code for this object. </summary>
      <returns>A 32-bit hash code, which is a signed integer.</returns>
    </member>
    <member name="M:System.Windows.FontStyle.op_Equality(System.Windows.FontStyle,System.Windows.FontStyle)">
      <summary>Compares two instances of <see cref="T:System.Windows.FontStyle" /> for equality.</summary>
      <returns>true to show the specified <see cref="T:System.Windows.FontStyle" /> objects are equal; otherwise, false.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontStyle" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontStyle" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontStyle.op_Inequality(System.Windows.FontStyle,System.Windows.FontStyle)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontStyle" /> to determine inequality.</summary>
      <returns>false to show <paramref name="left" /> is equal to <paramref name="right" />; otherwise, true.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontStyle" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontStyle" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontStyle.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <returns>A <see cref="T:System.String" /> containing the value of the current instance in the specified format.</returns>
      <param name="format">The <see cref="T:System.String" /> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation. </param>
      <param name="provider">The <see cref="T:System.IFormatProvider" /> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system. </param>
    </member>
    <member name="M:System.Windows.FontStyle.ToString">
      <summary>Creates a <see cref="T:System.String" /> that represents the current <see cref="T:System.Windows.FontStyle" /> object and is based on the <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> property information.</summary>
      <returns>A <see cref="T:System.String" /> that represents the value of the <see cref="T:System.Windows.FontStyle" /> object, such as "Normal", "Italic", or "Oblique".</returns>
    </member>
    <member name="T:System.Windows.FontStyleConverter">
      <summary>Converts instances of <see cref="T:System.Windows.FontStyle" /> to and from other data types.  </summary>
    </member>
    <member name="M:System.Windows.FontStyleConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.FontStyleConverter" />.</summary>
    </member>
    <member name="M:System.Windows.FontStyleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value that indicates whether this converter can convert an object of the given type to an instance of <see cref="T:System.Windows.FontStyle" />.</summary>
      <returns>true if the converter can convert the provided type to an instance of <see cref="T:System.Windows.FontStyle" />; otherwise, false.</returns>
      <param name="td">Describes the context information of a type.</param>
      <param name="t">The type of the source that is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.FontStyleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of <see cref="T:System.Windows.FontStyle" /> can be converted to a different type.</summary>
      <returns>true if the converter can convert this instance of <see cref="T:System.Windows.FontStyle" />; otherwise, false.</returns>
      <param name="context">Context information of a type.</param>
      <param name="destinationType">The desired type that that this instance of <see cref="T:System.Windows.FontStyle" /> is being evaluated for conversion to.</param>
    </member>
    <member name="M:System.Windows.FontStyleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert a specified object to an instance of <see cref="T:System.Windows.FontStyle" />.</summary>
      <returns>The instance of <see cref="T:System.Windows.FontStyle" /> created from the converted <paramref name="value" />.</returns>
      <param name="td">Context information of a type.</param>
      <param name="ci">
        <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The object being converted.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is null or is not a valid type for conversion.</exception>
    </member>
    <member name="M:System.Windows.FontStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert an instance of <see cref="T:System.Windows.FontStyle" /> to a specified type.</summary>
      <returns>The object created from the converted instance of <see cref="T:System.Windows.FontStyle" />.</returns>
      <param name="context">Context information of a type.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The instance of <see cref="T:System.Windows.FontStyle" /> to convert.</param>
      <param name="destinationType">The type this instance of <see cref="T:System.Windows.FontStyle" /> is converted to. </param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is null-or-<paramref name="value" /> is not an instance of <see cref="T:System.Windows.FontStyle" />-or-<paramref name="destinationType" /> is not a valid destination type.</exception>
    </member>
    <member name="T:System.Windows.FontStyles">
      <summary>Provides a set of static predefined <see cref="T:System.Windows.FontStyle" /> values.</summary>
    </member>
    <member name="P:System.Windows.FontStyles.Italic">
      <summary>Specifies an italic <see cref="T:System.Windows.FontStyle" />.</summary>
      <returns>A value that represents an italic <see cref="T:System.Windows.FontStyle" />.</returns>
    </member>
    <member name="P:System.Windows.FontStyles.Normal">
      <summary>Specifies a normal <see cref="T:System.Windows.FontStyle" />.</summary>
      <returns>A value that represents a normal <see cref="T:System.Windows.FontStyle" />.</returns>
    </member>
    <member name="P:System.Windows.FontStyles.Oblique">
      <summary>Specifies an oblique <see cref="T:System.Windows.FontStyle" />.</summary>
      <returns>A value that represents an oblique <see cref="T:System.Windows.FontStyle" />.</returns>
    </member>
    <member name="T:System.Windows.FontVariants">
      <summary>Renders variant typographic glyph forms.</summary>
    </member>
    <member name="F:System.Windows.FontVariants.Normal">
      <summary>Default font behavior. Font scaling and positioning is normal.</summary>
    </member>
    <member name="F:System.Windows.FontVariants.Superscript">
      <summary>Replaces a default glyph with a superscript glyph. Superscript is commonly used for footnotes.</summary>
    </member>
    <member name="F:System.Windows.FontVariants.Subscript">
      <summary>Replaces a default glyph with a subscript glyph.</summary>
    </member>
    <member name="F:System.Windows.FontVariants.Ordinal">
      <summary>Replaces a default glyph with an ordinal glyph, or it may combine glyph substitution with positioning adjustments for proper placement. Ordinal forms are normally associated with numeric notation of an ordinal word, such as "1st" for "first."</summary>
    </member>
    <member name="F:System.Windows.FontVariants.Inferior">
      <summary>Replaces a default glyph with an inferior glyph, or it may combine glyph substitution with positioning adjustments for proper placement. Inferior forms are typically used in chemical formulas or mathematical notation.</summary>
    </member>
    <member name="F:System.Windows.FontVariants.Ruby">
      <summary>Replaces a default glyph with a smaller Japanese Kana glyph. This is used to clarify the meaning of Kanji, which may be unfamiliar to the reader.</summary>
    </member>
    <member name="T:System.Windows.FontWeight">
      <summary>Refers to the density of a typeface, in terms of the lightness or heaviness of the strokes.</summary>
    </member>
    <member name="M:System.Windows.FontWeight.Compare(System.Windows.FontWeight,System.Windows.FontWeight)">
      <summary>Compares two instances of <see cref="T:System.Windows.FontWeight" />.</summary>
      <returns>An <see cref="T:System.Int32" /> value that indicates the relationship between the two instances of <see cref="T:System.Windows.FontWeight" />. When the return value is less than zero, <paramref name="left" /> is less than <paramref name="right" />. When this value is zero, it indicates that both operands are equal. When the value is greater than zero, it indicates that <paramref name="left" /> is greater than <paramref name="right" />.</returns>
      <param name="left">The first <see cref="T:System.Windows.FontWeight" /> object to compare.</param>
      <param name="right">The second <see cref="T:System.Windows.FontWeight" /> object to compare.</param>
    </member>
    <member name="M:System.Windows.FontWeight.Equals(System.Object)">
      <summary>Determines whether the current <see cref="T:System.Windows.FontWeight" /> object is equal to a specified object.</summary>
      <returns>true if the two instances are equal; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare for equality.</param>
    </member>
    <member name="M:System.Windows.FontWeight.Equals(System.Windows.FontWeight)">
      <summary>Determines whether the current <see cref="T:System.Windows.FontWeight" /> object is equal to a specified <see cref="T:System.Windows.FontWeight" /> object.</summary>
      <returns>true if the two instances are equal; otherwise, false.</returns>
      <param name="obj">The instance of <see cref="T:System.Windows.FontWeight" /> to compare for equality.</param>
    </member>
    <member name="M:System.Windows.FontWeight.FromOpenTypeWeight(System.Int32)">
      <summary>Creates a new instance of <see cref="T:System.Windows.FontWeight" /> that corresponds to the OpenType usWeightClass value.</summary>
      <returns>A new instance of <see cref="T:System.Windows.FontWeight" />.</returns>
      <param name="weightValue">An integer value between 1 and 999 that corresponds to the usWeightClass definition in the OpenType specification.</param>
    </member>
    <member name="M:System.Windows.FontWeight.GetHashCode">
      <summary>Retrieves the hash code for this object.</summary>
      <returns>A 32-bit hash code, which is a signed integer.</returns>
    </member>
    <member name="M:System.Windows.FontWeight.op_Equality(System.Windows.FontWeight,System.Windows.FontWeight)">
      <summary>Compares two instances of <see cref="T:System.Windows.FontWeight" /> for equality.</summary>
      <returns>true if the instances of <see cref="T:System.Windows.FontWeight" /> are equal; otherwise, false.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontWeight.op_GreaterThan(System.Windows.FontWeight,System.Windows.FontWeight)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontWeight" /> to determine whether one instance is greater than the other.</summary>
      <returns>true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontWeight.op_GreaterThanOrEqual(System.Windows.FontWeight,System.Windows.FontWeight)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontWeight" /> to determine whether one instance is greater than or equal to the other.</summary>
      <returns>true if <paramref name="left" /> is greater than or equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontWeight.op_Inequality(System.Windows.FontWeight,System.Windows.FontWeight)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontWeight" /> to determine inequality.</summary>
      <returns>false if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, true.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontWeight.op_LessThan(System.Windows.FontWeight,System.Windows.FontWeight)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontWeight" /> to determine whether one instance is less than the other.</summary>
      <returns>true if <paramref name="left" /> is less than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontWeight.op_LessThanOrEqual(System.Windows.FontWeight,System.Windows.FontWeight)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontWeight" /> to determine whether one instance is less than or equal to the other.</summary>
      <returns>true if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontWeight.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <returns>A <see cref="T:System.String" /> containing the value of the current instance in the specified format.</returns>
      <param name="format">The <see cref="T:System.String" /> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation. </param>
      <param name="provider">The <see cref="T:System.IFormatProvider" /> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system. </param>
    </member>
    <member name="M:System.Windows.FontWeight.ToOpenTypeWeight">
      <summary>Returns a value that represents the OpenType usWeightClass for the <see cref="T:System.Windows.FontWeight" /> object.</summary>
      <returns>An integer value between 1 and 999 that corresponds to the usWeightClass definition in the OpenType specification.</returns>
    </member>
    <member name="M:System.Windows.FontWeight.ToString">
      <summary>Returns a text string that represents the value of the <see cref="T:System.Windows.FontWeight" /> object and is based on the <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> property information.</summary>
      <returns>A <see cref="T:System.String" /> that represents the value of the <see cref="T:System.Windows.FontWeight" /> object, such as "Light", "Normal", or "UltraBold".</returns>
    </member>
    <member name="T:System.Windows.FontWeightConverter">
      <summary>Converts instances of <see cref="T:System.Windows.FontWeight" /> to and from other data types.</summary>
    </member>
    <member name="M:System.Windows.FontWeightConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.FontWeightConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.FontWeightConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value that indicates whether this converter can convert an object of the given type to an instance of <see cref="T:System.Windows.FontWeight" />.</summary>
      <returns>true if the converter can convert the provided type to an instance of <see cref="T:System.Windows.FontWeight" />; otherwise, false.</returns>
      <param name="td">Context information of a type.</param>
      <param name="t">The type of the source that is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.FontWeightConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of <see cref="T:System.Windows.FontWeight" /> can be converted to a different type.</summary>
      <returns>true if the converter can convert this instance of <see cref="T:System.Windows.FontWeight" />; otherwise, false.</returns>
      <param name="context">Context information of a type.</param>
      <param name="destinationType">The desired type that that this instance of <see cref="T:System.Windows.FontWeight" /> is being evaluated for conversion to.</param>
    </member>
    <member name="M:System.Windows.FontWeightConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert a specified object to an instance of <see cref="T:System.Windows.FontWeight" />.</summary>
      <returns>The instance of <see cref="T:System.Windows.FontWeight" /> created from the converted <paramref name="value" />.</returns>
      <param name="td">Context information of a type.</param>
      <param name="ci">
        <see cref="T:System.Globalization.CultureInfo" /> of the type being converted. </param>
      <param name="value">The object being converted.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is null or is not a valid type for conversion.</exception>
    </member>
    <member name="M:System.Windows.FontWeightConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert an instance of <see cref="T:System.Windows.FontWeight" /> to a specified type.</summary>
      <returns>The object created from the converted instance of <see cref="T:System.Windows.FontWeight" />.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="culture">Describes the <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The instance of <see cref="T:System.Windows.FontWeight" /> to convert.</param>
      <param name="destinationType">The type this instance of <see cref="T:System.Windows.FontWeight" /> is converted to. </param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is null-or-<paramref name="value" /> i is not an instance of <see cref="T:System.Windows.FontWeight" />-or-<paramref name="destinationType" /> is not a valid destination type.</exception>
    </member>
    <member name="T:System.Windows.FontWeights">
      <summary>Provides a set of static predefined <see cref="T:System.Windows.FontWeight" /> values.</summary>
    </member>
    <member name="P:System.Windows.FontWeights.Black">
      <summary>Specifies a "Black" font weight.</summary>
      <returns>A value that represents a "Black" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.Bold">
      <summary>Specifies a "Bold" font weight.</summary>
      <returns>A value that represents a "Bold" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.DemiBold">
      <summary>Specifies a "Demi-bold" font weight.</summary>
      <returns>A value that represents a "Demi-bold" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.ExtraBlack">
      <summary>Specifies an "Extra-black" font weight.</summary>
      <returns>A value that represents an "Extra-black" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.ExtraBold">
      <summary>Specifies an "Extra-bold" font weight.</summary>
      <returns>A value that represents an "Extra-bold" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.ExtraLight">
      <summary>Specifies an "Extra-light" font weight.</summary>
      <returns>A value that represents an "Extra-light" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.Heavy">
      <summary>Specifies a "Heavy" font weight.</summary>
      <returns>A value that represents a "Heavy" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.Light">
      <summary>Specifies a "Light" font weight.</summary>
      <returns>A value that represents a "Light" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.Medium">
      <summary>Specifies a "Medium" font weight.</summary>
      <returns>A value that represents a "Medium" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.Normal">
      <summary>Specifies a "Normal" font weight.</summary>
      <returns>A value that represents a "Normal" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.Regular">
      <summary>Specifies a "Regular" font weight.</summary>
      <returns>A value that represents a "Regular" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.SemiBold">
      <summary>Specifies a "Semi-bold" font weight.</summary>
      <returns>A value that represents a "Semi-bold" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.Thin">
      <summary>Specifies a "Thin" font weight.</summary>
      <returns>A value that represents a "Thin" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.UltraBlack">
      <summary>Specifies an "Ultra-black" font weight.</summary>
      <returns>A value that represents an "Ultra-black" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.UltraBold">
      <summary>Specifies an "Ultra-bold" font weight.</summary>
      <returns>A value that represents an "Ultra-bold" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.UltraLight">
      <summary>Specifies an "Ultra-light" font weight.</summary>
      <returns>A value that represents an "Ultra-light" font weight.</returns>
    </member>
    <member name="T:System.Windows.FreezableCollection`1">
      <summary>Represents a collection of <see cref="T:System.Windows.DependencyObject" />, <see cref="T:System.Windows.Freezable" />, or <see cref="T:System.Windows.Media.Animation.Animatable" /> objects. <see cref="T:System.Windows.FreezableCollection`1" /> is itself an <see cref="T:System.Windows.Media.Animation.Animatable" /> type. </summary>
      <typeparam name="T">The type of collection. This type must be a <see cref="T:System.Windows.DependencyObject" /> or a derived class.  </typeparam>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Windows.FreezableCollection`1" /> that is empty and has the default initial capacity.</summary>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.FreezableCollection`1" /> class that contains the same elements as the specified collection.</summary>
      <param name="collection">The collection whose items should be added to the new <see cref="T:System.Windows.FreezableCollection`1" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> is null.</exception>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.FreezableCollection`1" /> that is empty and has the specified initial capacity.</summary>
      <param name="capacity">A value that is greater than or equal to 0 that specifies the number of elements the new collection can initially store.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than 0.</exception>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.Add(`0)">
      <summary>Adds the specified object to the end of the <see cref="T:System.Windows.FreezableCollection`1" />.</summary>
      <param name="value">The object to be added to the end of the <see cref="T:System.Windows.FreezableCollection`1" />. This value cannot be null.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.FreezableCollection`1" /> is frozen (its <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true).</exception>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.Clear">
      <summary>Removes all elements from the collection.</summary>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.FreezableCollection`1" /> and its contents, making deep copies. If this collection (or its contents) has animated dependency properties, the property’s base value is copied, not its current animated value.</summary>
      <returns>A modifiable copy of this collection and its contents. The copy's <see cref="P:System.Windows.Freezable.IsFrozen" /> value is false.</returns>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.CloneCore(System.Windows.Freezable)">
      <summary>Makes this instance a clone (deep copy) of the specified <see cref="T:System.Windows.FreezableCollection`1" /> using base (non-animated) property values.</summary>
      <param name="source">The <see cref="T:System.Windows.FreezableCollection`1" /> to copy.</param>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.CloneCurrentValue">
      <summary>Creates a modifiable copy of this <see cref="T:System.Windows.FreezableCollection`1" /> and its contents, making deep copies of this object's current values. If this object (or the objects it contains) contains animated dependency properties, their current animated values are copied.</summary>
      <returns>A modifiable clone of the collection and its contents. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Makes this instance a modifiable clone (deep copy) of the specified <see cref="T:System.Windows.FreezableCollection`1" /> using current property values.</summary>
      <param name="source">The <see cref="T:System.Windows.FreezableCollection`1" /> to clone.</param>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.Contains(`0)">
      <summary>Determines whether this <see cref="T:System.Windows.FreezableCollection`1" /> contains the specified value.</summary>
      <returns>true if value is found in the <see cref="T:System.Windows.FreezableCollection`1" />; otherwise, false.</returns>
      <param name="value">The object to locate in this collection. This object may be null.</param>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the entire <see cref="T:System.Windows.FreezableCollection`1" /> to a compatible one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from <see cref="T:System.Windows.FreezableCollection`1" />.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Windows.FreezableCollection`1" /> is greater than the available space from index to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Windows.FreezableCollection`1.Count">
      <summary>Gets the number of elements contained by this <see cref="T:System.Windows.FreezableCollection`1" />.</summary>
      <returns>The number of elements contained by this <see cref="T:System.Windows.FreezableCollection`1" />.</returns>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.CreateInstanceCore">
      <summary>Creates a new instance of the <see cref="T:System.Windows.FreezableCollection`1" />.</summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.FreezeCore(System.Boolean)">
      <summary>Makes this <see cref="T:System.Windows.FreezableCollection`1" /> object unmodifiable or determines whether it can be made unmodifiable.</summary>
      <returns>If <paramref name="isChecking" /> is true, this method returns true if this <see cref="T:System.Windows.FreezableCollection`1" /> can be made unmodifiable, or false if it cannot be made unmodifiable. If <paramref name="isChecking" /> is false, this method returns true if the if the specified <see cref="T:System.Windows.FreezableCollection`1" /> is now unmodifiable, or false if it cannot be made unmodifiable, with the side effect of having begun to change the frozen status of this object.</returns>
      <param name="isChecking">true if the <see cref="T:System.Windows.FreezableCollection`1" /> should simply return whether it can be frozen. false if the <see cref="T:System.Windows.FreezableCollection`1" /> instance should actually freeze itself when this method is called.</param>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a frozen clone of the specified <see cref="T:System.Windows.FreezableCollection`1" /> using base (non-animated) property values.</summary>
      <param name="source">The <see cref="T:System.Windows.FreezableCollection`1" /> to copy.</param>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" />. If this object has animated dependency properties, their current animated values are copied.</summary>
      <param name="source">The <see cref="T:System.Windows.FreezableCollection`1" /> to copy.</param>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.GetEnumerator">
      <summary>Returns an enumerator for the entire <see cref="T:System.Windows.FreezableCollection`1" />.</summary>
      <returns>An enumerator for the entire <see cref="T:System.Windows.FreezableCollection`1" />.</returns>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.IndexOf(`0)">
      <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Windows.FreezableCollection`1" />.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the entire <see cref="T:System.Windows.FreezableCollection`1" />, if found; otherwise, -1.</returns>
      <param name="value">The object to locate in the <see cref="T:System.Windows.FreezableCollection`1" />.</param>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.Insert(System.Int32,`0)">
      <summary>Inserts the specified object into the <see cref="T:System.Windows.FreezableCollection`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The object to insert.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.- or -<paramref name="index" /> is greater than <see cref="P:System.Windows.FreezableCollection`1.Count" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.FreezableCollection`1" /> is frozen (its <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true). </exception>
    </member>
    <member name="P:System.Windows.FreezableCollection`1.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.- or -<paramref name="index" /> is equal to or greater than <see cref="P:System.Windows.FreezableCollection`1.Count" />.</exception>
      <exception cref="T:System.ArgumentException">The specified element is null.</exception>
      <exception cref="T:System.InvalidOperationException">Attempting to set an item in the collection when the collection is frozen (its <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true).</exception>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.Remove(`0)">
      <summary>Removes the first occurrence of the specified object from the <see cref="T:System.Windows.FreezableCollection`1" />.</summary>
      <returns>true if an occurrence of <paramref name="value" /> was found in the collection and removed; false if <paramref name="value" /> could not be found in the collection.</returns>
      <param name="value">The object to remove.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.FreezableCollection`1" /> is frozen (its <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true).</exception>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.RemoveAt(System.Int32)">
      <summary>Removes the object at the specified zero-based index of the <see cref="T:System.Windows.FreezableCollection`1" />. </summary>
      <param name="index">The zero-based index of the object to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.- or -<paramref name="index" /> is greater than <see cref="P:System.Windows.FreezableCollection`1.Count" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.FreezableCollection`1" /> is frozen (its <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true).</exception>
    </member>
    <member name="P:System.Windows.FreezableCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly"></member>
    <member name="M:System.Windows.FreezableCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">A zero-based <see cref="T:System.Array" /> that receives the copied items from the <see cref="T:System.Windows.FreezableCollection`1" />.</param>
      <param name="index">The first position in the specified <see cref="T:System.Array" /> to receive the copied contents.</param>
    </member>
    <member name="P:System.Windows.FreezableCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>true if access to the <see cref="T:System.Windows.FreezableCollection`1" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.FreezableCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Windows.FreezableCollection`1" />.</returns>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Windows.FreezableCollection`1" />.</param>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Contains(System.Object)" />.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Windows.FreezableCollection`1" />; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.FreezableCollection`1" />.</param>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.FreezableCollection`1" />.</param>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</summary>
      <param name="index">The zero-based index at which to insert the <see cref="T:System.Object" />.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Windows.FreezableCollection`1" />.</param>
    </member>
    <member name="P:System.Windows.FreezableCollection`1.System#Collections#IList#IsFixedSize">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsFixedSize" />.</summary>
      <returns>true if the <see cref="T:System.Windows.FreezableCollection`1" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.FreezableCollection`1.System#Collections#IList#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsReadOnly" />.</summary>
      <returns>true if the <see cref="T:System.Windows.FreezableCollection`1" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.FreezableCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.Item(System.Int32)" />.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.System#Collections#IList#Remove(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Windows.FreezableCollection`1" />.</param>
    </member>
    <member name="E:System.Windows.FreezableCollection`1.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>For a description of this members, see <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
    </member>
    <member name="E:System.Windows.FreezableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>For a description of this members, see <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</summary>
    </member>
    <member name="T:System.Windows.FreezableCollection`1.Enumerator">
      <summary>Enumerates the members of a <see cref="T:System.Windows.FreezableCollection`1" />.</summary>
    </member>
    <member name="P:System.Windows.FreezableCollection`1.Enumerator.Current">
      <summary>Gets a value that represents the current element in the collection.</summary>
      <returns>The current element in the collection.</returns>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element in the collection.</summary>
      <returns>true if the enumerator successfully advanced to the next element in the collection; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.Enumerator.Reset">
      <summary>Resets the enumerator to its initial position.</summary>
    </member>
    <member name="P:System.Windows.FreezableCollection`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.Enumerator.System#IDisposable#Dispose">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Windows.GiveFeedbackEventArgs">
      <summary>Contains arguments for the <see cref="E:System.Windows.DragDrop.GiveFeedback" /> event.</summary>
    </member>
    <member name="P:System.Windows.GiveFeedbackEventArgs.Effects">
      <summary>Gets a value that indicates the effects of drag-and-drop operation.</summary>
      <returns>A member of the <see cref="T:System.Windows.DragDropEffects" /> enumeration that indicates the effects of the drag-and-drop operation.</returns>
    </member>
    <member name="P:System.Windows.GiveFeedbackEventArgs.UseDefaultCursors">
      <summary>Gets or sets a Boolean value indicating whether default cursor feedback behavior should be used for the associated drag-and-drop operation.</summary>
      <returns>A Boolean value that indicating whether default cursor feedback behavior should be used for the associated drag-and-drop operation. true to use default feedback cursor behavior; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.GiveFeedbackEventHandler">
      <summary>Represents a method that will handle the feedback routed event from in-process drag-and-drop operations, for instance <see cref="E:System.Windows.UIElement.GiveFeedback" />.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.IContentHost">
      <summary>This interface is implemented by layouts which host <see cref="T:System.Windows.ContentElement" />. </summary>
    </member>
    <member name="M:System.Windows.IContentHost.GetRectangles(System.Windows.ContentElement)">
      <summary>Returns a collection of bounding rectangles for a child element. </summary>
      <returns>A collection of bounding rectangles for a child element. </returns>
      <param name="child">The child element that the bounding rectangles are returned for.</param>
      <exception cref="T:System.ArgumentNullException">If child is null.</exception>
      <exception cref="T:System.ArgumentException">If the element is not a direct descendant (i.e. element must be a child of the <see cref="T:System.Windows.IContentHost" /> or a <see cref="T:System.Windows.ContentElement" /> which is a direct descendant  of the <see cref="T:System.Windows.IContentHost" />).</exception>
    </member>
    <member name="P:System.Windows.IContentHost.HostedElements">
      <summary>Gets an enumeration containing all descendant <see cref="T:System.Windows.ContentElement" />-derived classes, as well as all <see cref="T:System.Windows.UIElement" />-derived classes that are a direct descendant of the <see cref="T:System.Windows.IContentHost" /> or one of its descendant <see cref="T:System.Windows.ContentElement" /> classes. </summary>
      <returns>Enumeration containing all descendant <see cref="T:System.Windows.ContentElement" />-derived classes, as well as all <see cref="T:System.Windows.UIElement" />-derived classes that are a direct descendant of the <see cref="T:System.Windows.IContentHost" /> or one of its descendant <see cref="T:System.Windows.ContentElement" /> classes. In other words, elements for which the <see cref="T:System.Windows.IContentHost" /> creates a visual representation (<see cref="T:System.Windows.ContentElement" />-derived classes) or whose layout is driven by the <see cref="T:System.Windows.IContentHost" /> (the first-level descendant <see cref="T:System.Windows.UIElement" />-derived classes).</returns>
    </member>
    <member name="M:System.Windows.IContentHost.InputHitTest(System.Windows.Point)">
      <summary>Performs hit-testing for child elements.</summary>
      <returns>A descendant of <see cref="T:System.Windows.IInputElement" />, or NULL if no such element exists.</returns>
      <param name="point">Mouse coordinates relative to the ContentHost.</param>
    </member>
    <member name="M:System.Windows.IContentHost.OnChildDesiredSizeChanged(System.Windows.UIElement)">
      <summary> Called when a <see cref="T:System.Windows.UIElement" />-derived class which is hosted by a <see cref="T:System.Windows.IContentHost" /> changes its <see cref="P:System.Windows.UIElement.DesiredSize" />.</summary>
      <param name="child">Child element whose <see cref="P:System.Windows.UIElement.DesiredSize" /> has changed</param>
      <exception cref="T:System.ArgumentNullException">If child is null.</exception>
      <exception cref="T:System.ArgumentException">If child is not a direct descendant (i.e. child must be a child of the <see cref="T:System.Windows.IContentHost" /> or a <see cref="T:System.Windows.ContentElement" /> which is a direct descendant of the <see cref="T:System.Windows.IContentHost" />).</exception>
    </member>
    <member name="T:System.Windows.IDataObject">
      <summary>Provides a format-independent mechanism for transferring data.</summary>
    </member>
    <member name="M:System.Windows.IDataObject.GetData(System.String)">
      <summary>Retrieves a data object in a specified format; the data format is specified by a string.</summary>
      <returns>A data object with the data in the specified format, or null if the data is not available in the specified format.</returns>
      <param name="format">A string that specifies what format to retrieve the data as. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
    </member>
    <member name="M:System.Windows.IDataObject.GetData(System.String,System.Boolean)">
      <summary>Retrieves a data object in a specified format, optionally converting the data to the specified format.</summary>
      <returns>A data object with the data in the specified format, or null if the data is not available in the specified format.</returns>
      <param name="format">A string that specifies what format to retrieve the data as. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
      <param name="autoConvert">true to attempt to automatically convert the data to the specified format; false for no data format conversion. If this parameter is false, the method returns data in the specified format if available, or null if the data is not available in the specified format.</param>
    </member>
    <member name="M:System.Windows.IDataObject.GetData(System.Type)">
      <summary>Retrieves a data object in a specified format; the data format is specified by a <see cref="T:System.Type" /> object.</summary>
      <returns>A data object with the data in the specified format, or null if the data is not available in the specified format.</returns>
      <param name="format">A <see cref="T:System.Type" /> object that specifies what format to retrieve the data as. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
    </member>
    <member name="M:System.Windows.IDataObject.GetDataPresent(System.String)">
      <summary>Checks to see whether the data is available in, or can be converted to, a specified format; the data format is specified by a string.</summary>
      <returns>true if the data is in, or can be converted to, the specified format; otherwise, false.</returns>
      <param name="format">A string that specifies what format to check for. See the <see cref="T:System.Windows.DataFormats" /> class for a set of pre-defined data formats.</param>
    </member>
    <member name="M:System.Windows.IDataObject.GetDataPresent(System.String,System.Boolean)">
      <summary>Checks to see whether the data is available in, or can be converted to, a specified format. A Boolean flag indicates whether to check if the data can be converted to the specified format, if it is not available in that format.</summary>
      <returns>true if the data is in, or can be converted to, the specified format; otherwise, false.</returns>
      <param name="format">A string that specifies what format to check for. See the <see cref="T:System.Windows.DataFormats" /> class for a set of pre-defined data formats.</param>
      <param name="autoConvert">false to only check for the specified format; true to also check whether or not data stored in this data object can be converted to the specified format.</param>
    </member>
    <member name="M:System.Windows.IDataObject.GetDataPresent(System.Type)">
      <summary>Checks to see whether the data is available in, or can be converted to, a specified format. The data format is specified by a <see cref="T:System.Type" /> object.</summary>
      <returns>true if the data is in, or can be converted to, the specified format; otherwise, false.</returns>
      <param name="format">A <see cref="T:System.Type" /> that specifies what format to check for. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
    </member>
    <member name="M:System.Windows.IDataObject.GetFormats">
      <summary>Returns a list of all formats that the data in this data object is stored in, or can be converted to.</summary>
      <returns>An array of strings, with each string specifying the name of a format supported by this data object.</returns>
    </member>
    <member name="M:System.Windows.IDataObject.GetFormats(System.Boolean)">
      <summary>Returns a list of all formats that the data in this data object is stored in. A Boolean flag indicates whether or not to also include formats that the data can be automatically converted to.</summary>
      <returns>An array of strings, with each string specifying the name of a format supported by this data object.</returns>
      <param name="autoConvert">true to retrieve all formats that data stored in this data object is stored in, or can be converted to; false to retrieve only formats that data stored in this data object is stored in (excluding formats that the data is not stored in, but can be automatically converted to).</param>
    </member>
    <member name="M:System.Windows.IDataObject.SetData(System.Object)">
      <summary>Stores the specified data in this data object, automatically converting the data format from the source object type.</summary>
      <param name="data">The data to store in this data object.</param>
    </member>
    <member name="M:System.Windows.IDataObject.SetData(System.String,System.Object)">
      <summary>Stores the specified data in this data object, along with one or more specified data formats. The data format is specified by a string.</summary>
      <param name="format">A string that specifies what format to store the data in. See the <see cref="T:System.Windows.DataFormats" /> class for a set of pre-defined data formats.</param>
      <param name="data">The data to store in this data object.</param>
    </member>
    <member name="M:System.Windows.IDataObject.SetData(System.String,System.Object,System.Boolean)">
      <summary>Stores the specified data in this data object, along with one or more specified data formats. This overload includes a Boolean flag to indicate whether the data may be converted to another format on retrieval.</summary>
      <param name="format">A string that specifies what format to store the data in. See the <see cref="T:System.Windows.DataFormats" /> class for a set of pre-defined data formats.</param>
      <param name="data">The data to store in this data object.</param>
      <param name="autoConvert">true to allow the data to be converted to another format on retrieval; false to prohibit the data from being converted to another format on retrieval.</param>
    </member>
    <member name="M:System.Windows.IDataObject.SetData(System.Type,System.Object)">
      <summary>Stores the specified data in this data object, along with one or more specified data formats. The data format is specified by a <see cref="T:System.Type" /> class.</summary>
      <param name="format">A <see cref="T:System.Type" /> that specifies what format to store the data in. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
      <param name="data">The data to store in this data object.</param>
    </member>
    <member name="T:System.Windows.IInputElement">
      <summary>Establishes the common events and also the event-related properties and methods for basic input processing by Windows Presentation Foundation (WPF) elements.</summary>
    </member>
    <member name="M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
      <summary>Adds a routed event handler for a specific routed event to an element. </summary>
      <param name="routedEvent">The identifier for the routed event that is being handled.</param>
      <param name="handler">A reference to the handler implementation.</param>
    </member>
    <member name="M:System.Windows.IInputElement.CaptureMouse">
      <summary>Attempts to force capture of the mouse to this element. </summary>
      <returns>true if the mouse is successfully captured; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.IInputElement.CaptureStylus">
      <summary>Attempts to force capture of the stylus to this element. </summary>
      <returns>true if the stylus is successfully captured; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.IInputElement.Focus">
      <summary>Attempts to focus the keyboard on this element. </summary>
      <returns>true if keyboard focus is moved to this element or already was on this element; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.IInputElement.Focusable">
      <summary>Gets or sets a value that indicates whether focus can be set to this element.</summary>
      <returns>true if the element can have focus set to it; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.IInputElement.GotKeyboardFocus">
      <summary>Occurs when the keyboard is focused on this element.</summary>
    </member>
    <member name="E:System.Windows.IInputElement.GotMouseCapture">
      <summary>Occurs when the element captures the mouse. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.GotStylusCapture">
      <summary>Occurs when the element captures the stylus. </summary>
    </member>
    <member name="P:System.Windows.IInputElement.IsEnabled">
      <summary>Gets a value that indicates whether this element is enabled in the user interface (UI). </summary>
      <returns>true if the element is enabled; otherwise, false.     </returns>
    </member>
    <member name="P:System.Windows.IInputElement.IsKeyboardFocused">
      <summary>Gets a value that indicates whether this element has keyboard focus. </summary>
      <returns>true if this element has keyboard focus; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.IInputElement.IsKeyboardFocusWithin">
      <summary>Gets a value that indicates whether keyboard focus is anywhere inside the element bounds, including if keyboard focus is inside the bounds of any visual child elements. </summary>
      <returns>true if keyboard focus is on the element or its child elements; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.IInputElement.IsMouseCaptured">
      <summary>Gets a value that indicates whether the mouse is captured to this element. </summary>
      <returns>true if the element has mouse capture; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.IInputElement.IsMouseDirectlyOver">
      <summary>Gets a value that indicates whether the mouse pointer is over this element in the strictest hit testing sense. </summary>
      <returns>true if the mouse pointer is over this element; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.IInputElement.IsMouseOver">
      <summary>Gets a value that indicates whether the mouse pointer is located over this element (including visual children elements that are inside its bounds). </summary>
      <returns>true if the mouse pointer is over the element or its child elements; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.IInputElement.IsStylusCaptured">
      <summary>Gets a value that indicates whether the stylus is captured to this element. </summary>
      <returns>true if the element has stylus capture; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.IInputElement.IsStylusDirectlyOver">
      <summary>Gets a value that indicates whether the stylus is over this element in the strictest hit testing sense. </summary>
      <returns>true if the stylus is over the element; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.IInputElement.IsStylusOver">
      <summary>Gets a value that indicates whether the stylus is located over this element (or over visual child elements that are inside its bounds). </summary>
      <returns>true if the stylus cursor is over the element or its child elements; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.IInputElement.KeyDown">
      <summary>Occurs when a key is pressed while the keyboard is focused on this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.KeyUp">
      <summary>Occurs when a key is released while the keyboard is focused on this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.LostKeyboardFocus">
      <summary>Occurs when the keyboard is no longer focused on this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.LostMouseCapture">
      <summary>Occurs when this element loses mouse capture. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.LostStylusCapture">
      <summary>Occurs when this element loses stylus capture. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.MouseEnter">
      <summary>Occurs when the mouse pointer enters the bounds of this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.MouseLeave">
      <summary>Occurs when the mouse pointer leaves the bounds of this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.MouseLeftButtonDown">
      <summary>Occurs when the left mouse button is pressed while the mouse pointer is over the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.MouseLeftButtonUp">
      <summary>Occurs when the left mouse button is released while the mouse pointer is over the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.MouseMove">
      <summary>Occurs when the mouse pointer moves while the mouse pointer is over the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.MouseRightButtonDown">
      <summary>Occurs when the right mouse button is pressed while the mouse pointer is over the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.MouseRightButtonUp">
      <summary>Occurs when the right mouse button is released while the mouse pointer is over the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.MouseWheel">
      <summary>Occurs when the mouse wheel moves while the mouse pointer is over this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewGotKeyboardFocus">
      <summary>Occurs when the keyboard is focused on this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewKeyDown">
      <summary>Occurs when a key is pressed while the keyboard is focused on this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewKeyUp">
      <summary>Occurs when a key is released while the keyboard is focused on this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewLostKeyboardFocus">
      <summary>Occurs when the keyboard is no longer focused on this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewMouseLeftButtonDown">
      <summary>Occurs when the left mouse button is pressed while the mouse pointer is over the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewMouseLeftButtonUp">
      <summary>Occurs when the left mouse button is released while the mouse pointer is over the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewMouseMove">
      <summary>Occurs when the mouse pointer moves while the mouse pointer is over the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewMouseRightButtonDown">
      <summary>Occurs when the right mouse button is pressed while the mouse pointer is over the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewMouseRightButtonUp">
      <summary>Occurs when the right mouse button is released while the mouse pointer is over the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewMouseWheel">
      <summary>Occurs when the mouse wheel moves while the mouse pointer is over this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewStylusButtonDown">
      <summary>Occurs when the stylus button is pressed down while the stylus is over this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewStylusButtonUp">
      <summary>Occurs when the stylus button is released while the stylus is over this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewStylusDown">
      <summary>Occurs when the stylus touches the digitizer while over this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewStylusInAirMove">
      <summary>Occurs when the stylus moves over an element, but without touching the digitizer. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewStylusInRange">
      <summary>Occurs when the stylus is close enough to the digitizer to be detected. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewStylusMove">
      <summary>Occurs when the stylus moves while the stylus is over the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewStylusOutOfRange">
      <summary>Occurs when the stylus is too far from the digitizer to be detected. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewStylusSystemGesture">
      <summary>Occurs when one of several stylus gestures are detected, for example, <see cref="F:System.Windows.Input.SystemGesture.Tap" /> or <see cref="F:System.Windows.Input.SystemGesture.Drag" />.</summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewStylusUp">
      <summary>Occurs when the stylus is raised off the digitizer while over this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewTextInput">
      <summary>Occurs when this element gets text in a device-independent manner. </summary>
    </member>
    <member name="M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)">
      <summary>Raises the routed event that is specified by the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property within the provided <see cref="T:System.Windows.RoutedEventArgs" />.</summary>
      <param name="e">An instance of the <see cref="T:System.Windows.RoutedEventArgs" /> class that contains the identifier for the event to raise. </param>
    </member>
    <member name="M:System.Windows.IInputElement.ReleaseMouseCapture">
      <summary>Releases the mouse capture, if this element holds the capture. </summary>
    </member>
    <member name="M:System.Windows.IInputElement.ReleaseStylusCapture">
      <summary>Releases the stylus capture, if this element holds the capture. </summary>
    </member>
    <member name="M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
      <summary>Removes all instances of the specified routed event handler from this element. </summary>
      <param name="routedEvent">Identifier of the routed event for which the handler is attached.</param>
      <param name="handler">The specific handler implementation to remove from this element's event handler collection.</param>
    </member>
    <member name="E:System.Windows.IInputElement.StylusButtonDown">
      <summary>Occurs when the stylus button is pressed while the stylus is over this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.StylusButtonUp">
      <summary>Occurs when the stylus button is released while the stylus is over this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.StylusDown">
      <summary>Occurs when the stylus touches the digitizer while over this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.StylusEnter">
      <summary>Occurs when the stylus cursor enters the bounds of the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.StylusInAirMove">
      <summary>Occurs when the stylus moves over an element, but without touching the digitizer. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.StylusInRange">
      <summary>Occurs when the stylus is close enough to the digitizer to be detected. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.StylusLeave">
      <summary>Occurs when the stylus cursor leaves the bounds of the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.StylusMove">
      <summary>Occurs when the stylus cursor moves over the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.StylusOutOfRange">
      <summary>Occurs when the stylus is too far from the digitizer to be detected. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.StylusSystemGesture">
      <summary>Occurs when one of several stylus gestures are detected, for example, <see cref="F:System.Windows.Input.SystemGesture.Tap" /> or <see cref="F:System.Windows.Input.SystemGesture.Drag" />. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.StylusUp">
      <summary>Occurs when the stylus is raised off the digitizer while over this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.TextInput">
      <summary>Occurs when this element gets text in a device-independent manner. </summary>
    </member>
    <member name="T:System.Windows.KeySplineConverter">
      <summary>Converts instances of other types to and from a <see cref="T:System.Windows.Media.Animation.KeySpline" />. </summary>
    </member>
    <member name="M:System.Windows.KeySplineConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.KeySplineConverter" /> class. </summary>
    </member>
    <member name="M:System.Windows.KeySplineConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object can be converted from a given type to an instance of a <see cref="T:System.Windows.Media.Animation.KeySpline" />.  </summary>
      <returns>true if the type can be converted to a <see cref="T:System.Windows.Media.Animation.KeySpline" />; otherwise, false.</returns>
      <param name="typeDescriptor">Describes the context information of a type.</param>
      <param name="destinationType">The type of the source that is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.KeySplineConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> Determines whether an instance of a <see cref="T:System.Windows.Media.Animation.KeySpline" /> can be converted to a different type. </summary>
      <returns>true if this <see cref="T:System.Windows.Media.Animation.KeySpline" /> can be converted to <paramref name="destinationType" />; otherwise, false.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="destinationType">The desired type this <see cref="T:System.Windows.Media.Animation.KeySpline" /> is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.KeySplineConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Media.Animation.KeySpline" />. </summary>
      <returns>The <see cref="T:System.Windows.Media.Animation.KeySpline" /> created from converting <paramref name="value" />.</returns>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="cultureInfo">Cultural information to respect during conversion.</param>
      <param name="value">The object being converted.</param>
      <exception cref="T:System.NotSupportedException">Thrown if the specified object is NULL or is a type that cannot be converted to a <see cref="T:System.Windows.Media.Animation.KeySpline" />.</exception>
    </member>
    <member name="M:System.Windows.KeySplineConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary> Attempts to convert a <see cref="T:System.Windows.Media.Animation.KeySpline" /> to a specified type. </summary>
      <returns>The object created from converting this <see cref="T:System.Windows.Media.Animation.KeySpline" />.</returns>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="cultureInfo">Cultural information to respect during conversion.</param>
      <param name="value">The <see cref="T:System.Windows.Media.Animation.KeySpline" /> to convert.</param>
      <param name="destinationType">The type to convert this <see cref="T:System.Windows.Media.Animation.KeySpline" /> to.</param>
      <exception cref="T:System.NotSupportedException">Thrown if <paramref name="value" /> is null or is not a <see cref="T:System.Windows.Media.Animation.KeySpline" />, or if the <paramref name="destinationType" /> is not one of the valid types for conversion.</exception>
    </member>
    <member name="T:System.Windows.KeyTimeConverter">
      <summary>Converts instances of <see cref="T:System.Windows.Media.Animation.KeyTime" /> to and from other types.</summary>
    </member>
    <member name="M:System.Windows.KeyTimeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.KeyTimeConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.KeyTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object can be converted from a given type to an instance of a <see cref="T:System.Windows.Media.Animation.KeyTime" />. </summary>
      <returns>true if this type can be converted; otherwise, false.</returns>
      <param name="typeDescriptorContext">Contextual information required for conversion.</param>
      <param name="type">Type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.KeyTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines if a given type can be converted to an instance of <see cref="T:System.Windows.Media.Animation.KeyTime" />. </summary>
      <returns>true if this type can be converted; otherwise, false.</returns>
      <param name="typeDescriptorContext">Contextual information required for conversion.</param>
      <param name="type">Type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.KeyTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert a given object to an instance of <see cref="T:System.Windows.Media.Animation.KeyTime" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.Animation.KeyTime" />, based on the supplied <paramref name="value" />.</returns>
      <param name="typeDescriptorContext">Context information required for conversion.</param>
      <param name="cultureInfo">Cultural information that is respected during conversion.</param>
      <param name="value">The object being converted to an instance of <see cref="T:System.Windows.Media.Animation.KeyTime" />.</param>
    </member>
    <member name="M:System.Windows.KeyTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert an instance of <see cref="T:System.Windows.Media.Animation.KeyTime" /> to another type.</summary>
      <returns>A new object, based on <paramref name="value" />.</returns>
      <param name="typeDescriptorContext">Context information required for conversion.</param>
      <param name="cultureInfo">Cultural information that is respected during conversion.</param>
      <param name="value">
        <see cref="T:System.Windows.Media.Animation.KeyTime" /> value to convert from.</param>
      <param name="destinationType">Type being evaluated for conversion.</param>
    </member>
    <member name="T:System.Windows.LineBreakCondition">
      <summary>Describes the breaking condition around an inline object.</summary>
    </member>
    <member name="F:System.Windows.LineBreakCondition.BreakDesired">
      <summary>Break if not prohibited by another object.</summary>
    </member>
    <member name="F:System.Windows.LineBreakCondition.BreakPossible">
      <summary>Break if allowed by another object.</summary>
    </member>
    <member name="F:System.Windows.LineBreakCondition.BreakRestrained">
      <summary>Break always prohibited unless the other object is set to <see cref="F:System.Windows.LineBreakCondition.BreakAlways" />.</summary>
    </member>
    <member name="F:System.Windows.LineBreakCondition.BreakAlways">
      <summary>Break is always allowed.</summary>
    </member>
    <member name="T:System.Windows.LocalizabilityAttribute">
      <summary>Specifies the localization attributes for a binary XAML (BAML) class or class member.</summary>
    </member>
    <member name="M:System.Windows.LocalizabilityAttribute.#ctor(System.Windows.LocalizationCategory)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.LocalizabilityAttribute" /> class with a specified localization category.</summary>
      <param name="category">The localization category.</param>
    </member>
    <member name="P:System.Windows.LocalizabilityAttribute.Category">
      <summary>Gets the category setting of the localization attribute's targeted value.</summary>
      <returns>The category setting of the localization attribute.</returns>
    </member>
    <member name="P:System.Windows.LocalizabilityAttribute.Modifiability">
      <summary>Gets or sets the modifiability setting of the localization attribute's targeted value.</summary>
      <returns>The modifiability setting of the localization attribute.</returns>
    </member>
    <member name="P:System.Windows.LocalizabilityAttribute.Readability">
      <summary>Gets or sets the readability setting of the localization attribute's targeted value.</summary>
      <returns>The readability setting of the localization attribute.</returns>
    </member>
    <member name="T:System.Windows.LocalizationCategory">
      <summary>Specifies the category value of a <see cref="T:System.Windows.LocalizabilityAttribute" /> for a binary XAML (BAML) class or class member.</summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.None">
      <summary>Resource does not belong to a standard category.</summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.Text">
      <summary>For a lengthy piece of text.</summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.Title">
      <summary>For a single line of text, such as text used for a title.</summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.Label">
      <summary>A <see cref="T:System.Windows.Controls.Label" /> or related control.</summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.Button">
      <summary>A <see cref="T:System.Windows.Controls.Button" /> or related control.</summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.CheckBox">
      <summary>A <see cref="T:System.Windows.Controls.CheckBox" /> or related control. </summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.ComboBox">
      <summary>A <see cref="T:System.Windows.Controls.ComboBox" /> or related control such as <see cref="T:System.Windows.Controls.ComboBoxItem" />. </summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.ListBox">
      <summary>A <see cref="T:System.Windows.Controls.ListBox" /> or related control such as <see cref="T:System.Windows.Controls.ListBoxItem" />. </summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.Menu">
      <summary>A <see cref="T:System.Windows.Controls.Menu" /> or related control such as <see cref="T:System.Windows.Controls.MenuItem" />. </summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.RadioButton">
      <summary>A <see cref="T:System.Windows.Controls.RadioButton" /> or related control.</summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.ToolTip">
      <summary>A <see cref="T:System.Windows.Controls.ToolTip" /> or related control.</summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.Hyperlink">
      <summary>A <see cref="T:System.Windows.Documents.Hyperlink" /> or related control.</summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.TextFlow">
      <summary>For panels that can contain text.</summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.XmlData">
      <summary>
            XML data. </summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.Font">
      <summary>Font-related data such as font name, style, or size.</summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.Inherit">
      <summary>Inherits its category from a parent node.</summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.Ignore">
      <summary>Do not localize this resource. This does not apply to any child nodes that might exist.</summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.NeverLocalize">
      <summary>Do not localize this resource, or any child nodes whose category is set to Inherit.</summary>
    </member>
    <member name="T:System.Windows.Modifiability">
      <summary>Specifies the modifiability value of a <see cref="T:System.Windows.LocalizabilityAttribute" /> for a binary XAML (BAML) class or class member.</summary>
    </member>
    <member name="F:System.Windows.Modifiability.Unmodifiable">
      <summary>Targeted value is not modifiable by localizers.</summary>
    </member>
    <member name="F:System.Windows.Modifiability.Modifiable">
      <summary>Targeted value is modifiable by localizers.</summary>
    </member>
    <member name="F:System.Windows.Modifiability.Inherit">
      <summary>Targeted value modifiability is inherited from its parent node.</summary>
    </member>
    <member name="T:System.Windows.PresentationSource">
      <summary>Provides an abstract base for classes that present content from another technology as part of an interoperation scenario. In addition, this class provides static methods for working with these sources, as well as the basic visual-layer presentation architecture.</summary>
    </member>
    <member name="M:System.Windows.PresentationSource.#ctor">
      <summary>Provides initialization for base class values when called by the constructor of a derived class. </summary>
    </member>
    <member name="M:System.Windows.PresentationSource.AddSource">
      <summary>Adds a <see cref="T:System.Windows.PresentationSource" /> derived class instance to the list of known presentation sources.</summary>
    </member>
    <member name="M:System.Windows.PresentationSource.AddSourceChangedHandler(System.Windows.IInputElement,System.Windows.SourceChangedEventHandler)">
      <summary>Adds a handler for the SourceChanged event to the provided element.</summary>
      <param name="element">The element to add the handler to.</param>
      <param name="handler">The hander implementation to add.</param>
    </member>
    <member name="M:System.Windows.PresentationSource.ClearContentRenderedListeners">
      <summary>Sets the list of listeners for the <see cref="E:System.Windows.PresentationSource.ContentRendered" /> event to null. </summary>
    </member>
    <member name="P:System.Windows.PresentationSource.CompositionTarget">
      <summary>Gets the visual target for the visuals being presented in the source. </summary>
      <returns>A visual target (instance of a <see cref="T:System.Windows.Media.CompositionTarget" /> derived class).</returns>
    </member>
    <member name="E:System.Windows.PresentationSource.ContentRendered">
      <summary>Occurs when content is rendered and ready for user interaction. </summary>
    </member>
    <member name="P:System.Windows.PresentationSource.CurrentSources">
      <summary>Returns a list of sources. </summary>
      <returns>A list of weak references. </returns>
    </member>
    <member name="M:System.Windows.PresentationSource.FromDependencyObject(System.Windows.DependencyObject)">
      <summary>Returns the source in which a provided <see cref="T:System.Windows.DependencyObject" /> is presented.</summary>
      <returns>The <see cref="T:System.Windows.PresentationSource" /> in which the dependency object is being presented.</returns>
      <param name="dependencyObject">The <see cref="T:System.Windows.DependencyObject" /> to find the source for.</param>
    </member>
    <member name="M:System.Windows.PresentationSource.FromVisual(System.Windows.Media.Visual)">
      <summary>Returns the source in which a provided <see cref="T:System.Windows.Media.Visual" /> is presented.</summary>
      <returns>The <see cref="T:System.Windows.PresentationSource" /> in which the visual is being presented, or null if <paramref name="visual" /> is disposed.</returns>
      <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> to find the source for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visual" /> is null.</exception>
    </member>
    <member name="M:System.Windows.PresentationSource.GetCompositionTargetCore">
      <summary>When overridden in a derived class, returns a visual target for the given source. </summary>
      <returns>Returns a <see cref="T:System.Windows.Media.CompositionTarget" /> that is target for rendering the visual.</returns>
    </member>
    <member name="P:System.Windows.PresentationSource.IsDisposed">
      <summary>When overridden in a derived class, gets a value that declares whether the object is disposed. </summary>
      <returns>true if the object is disposed; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.PresentationSource.RemoveSource">
      <summary>Removes a <see cref="T:System.Windows.PresentationSource" /> derived class instance from the list of known presentation sources.</summary>
    </member>
    <member name="M:System.Windows.PresentationSource.RemoveSourceChangedHandler(System.Windows.IInputElement,System.Windows.SourceChangedEventHandler)">
      <summary>Removes a handler for the SourceChanged event from the provided element.</summary>
      <param name="e">The element to remove the handler from.</param>
      <param name="handler">The handler implementation to remove.</param>
    </member>
    <member name="M:System.Windows.PresentationSource.RootChanged(System.Windows.Media.Visual,System.Windows.Media.Visual)">
      <summary>Provides notification that the root <see cref="T:System.Windows.Media.Visual" /> has changed. </summary>
      <param name="oldRoot">The old root <see cref="T:System.Windows.Media.Visual" />.</param>
      <param name="newRoot">The new root <see cref="T:System.Windows.Media.Visual" />.</param>
    </member>
    <member name="P:System.Windows.PresentationSource.RootVisual">
      <summary>When overridden in a derived class, gets or sets the root visual being presented in the source. </summary>
      <returns>The root visual.</returns>
    </member>
    <member name="T:System.Windows.QueryContinueDragEventArgs">
      <summary>Contains arguments for the <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> event.</summary>
    </member>
    <member name="P:System.Windows.QueryContinueDragEventArgs.Action">
      <summary>Gets or sets the current status of the associated drag-and-drop operation.</summary>
      <returns>A member of the <see cref="T:System.Windows.DragAction" /> enumeration indicating the current status of the associated drag-and-drop operation.</returns>
    </member>
    <member name="P:System.Windows.QueryContinueDragEventArgs.EscapePressed">
      <summary>Gets a Boolean value indicating whether the ESC key has been pressed.</summary>
      <returns>A Boolean value indicating whether the ESC key has been pressed. true if the ESC was pressed; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.QueryContinueDragEventArgs.KeyStates">
      <summary>Gets a flag enumeration indicating the current state of the SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons.</summary>
      <returns>One or more members of the <see cref="T:System.Windows.DragDropKeyStates" /> flag enumeration.</returns>
    </member>
    <member name="T:System.Windows.QueryContinueDragEventHandler">
      <summary>Represents a method that will handle the routed events that enables a drag-and-drop operation to be canceled by the drag source, for example <see cref="E:System.Windows.UIElement.QueryContinueDrag" />.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Readability">
      <summary>Specifies the readability value of a <see cref="T:System.Windows.LocalizabilityAttribute" /> for a binary XAML (BAML) class or class member.</summary>
    </member>
    <member name="F:System.Windows.Readability.Unreadable">
      <summary>Targeted value is not readable.</summary>
    </member>
    <member name="F:System.Windows.Readability.Readable">
      <summary>Targeted value is readable text.</summary>
    </member>
    <member name="F:System.Windows.Readability.Inherit">
      <summary>Targeted value readability is inherited from its parent node.</summary>
    </member>
    <member name="T:System.Windows.RoutedEvent">
      <summary>Represents and identifies a routed event and declares its characteristics.</summary>
    </member>
    <member name="M:System.Windows.RoutedEvent.AddOwner(System.Type)">
      <summary>Associates another owner class with this routed event, and enables routing of the event and handling on this class.  </summary>
      <returns>The identifier field for the event. This return value should be used to set a public static read-only field that will store the identifier for the representation of the routed event on the owning class. This field must be accessible because it will be required to attach any instance handlers for the event when using the <see cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" /> utility method.</returns>
      <param name="ownerType">The type of the class where the routed event is added.</param>
    </member>
    <member name="P:System.Windows.RoutedEvent.HandlerType">
      <summary>Gets the handler type of the routed event. </summary>
      <returns>The handler type of the routed event.</returns>
    </member>
    <member name="P:System.Windows.RoutedEvent.Name">
      <summary>Gets the identifying name of the routed event. </summary>
      <returns>The name of the routed event.</returns>
    </member>
    <member name="P:System.Windows.RoutedEvent.OwnerType">
      <summary>Gets the registered owner type of the routed event. </summary>
      <returns>The owner type of the routed event.</returns>
    </member>
    <member name="P:System.Windows.RoutedEvent.RoutingStrategy">
      <summary>Gets the routing strategy of the routed event. </summary>
      <returns>One of the enumeration values. The default is the enumeration default, <see cref="F:System.Windows.RoutingStrategy.Bubble" />.</returns>
    </member>
    <member name="M:System.Windows.RoutedEvent.ToString">
      <summary>Returns the string representation of this <see cref="T:System.Windows.RoutedEvent" />.</summary>
      <returns>A string representation for this object, which is identical to the value returned by <see cref="P:System.Windows.RoutedEvent.Name" />.</returns>
    </member>
    <member name="T:System.Windows.RoutedEventArgs">
      <summary>Contains state information and event data associated with a routed event. </summary>
    </member>
    <member name="M:System.Windows.RoutedEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.RoutedEventArgs" /> class. </summary>
    </member>
    <member name="M:System.Windows.RoutedEventArgs.#ctor(System.Windows.RoutedEvent)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.RoutedEventArgs" /> class, using the supplied routed event identifier. </summary>
      <param name="routedEvent">The routed event identifier for this instance of the <see cref="T:System.Windows.RoutedEventArgs" /> class.</param>
    </member>
    <member name="M:System.Windows.RoutedEventArgs.#ctor(System.Windows.RoutedEvent,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.RoutedEventArgs" /> class, using the supplied routed event identifier, and providing the opportunity to declare a different source for the event. </summary>
      <param name="routedEvent">The routed event identifier for this instance of the <see cref="T:System.Windows.RoutedEventArgs" /> class.</param>
      <param name="source">An alternate source that will be reported when the event is handled. This pre-populates the <see cref="P:System.Windows.RoutedEventArgs.Source" /> property.</param>
    </member>
    <member name="P:System.Windows.RoutedEventArgs.Handled">
      <summary>Gets or sets a value that indicates the present state of the event handling for a routed event as it travels the route. </summary>
      <returns>If setting, set to true if the event is to be marked handled; otherwise false. If reading this value, true indicates that either a class handler, or some instance handler along the route, has already marked this event handled. false.indicates that no such handler has marked the event handled.The default value is false.</returns>
    </member>
    <member name="M:System.Windows.RoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
      <summary>When overridden in a derived class, provides a way to invoke event handlers in a type-specific way, which can increase efficiency over the base implementation.</summary>
      <param name="genericHandler">The generic handler / delegate implementation to be invoked.</param>
      <param name="genericTarget">The target on which the provided handler should be invoked.</param>
    </member>
    <member name="M:System.Windows.RoutedEventArgs.OnSetSource(System.Object)">
      <summary>When overridden in a derived class, provides a notification callback entry point whenever the value of the <see cref="P:System.Windows.RoutedEventArgs.Source" /> property of an instance changes.</summary>
      <param name="source">The new value that <see cref="P:System.Windows.RoutedEventArgs.Source" /> is being set to.</param>
    </member>
    <member name="P:System.Windows.RoutedEventArgs.OriginalSource">
      <summary>Gets the original reporting source as determined by pure hit testing, before any possible <see cref="P:System.Windows.RoutedEventArgs.Source" /> adjustment by a parent class.</summary>
      <returns>The original reporting source, before any possible <see cref="P:System.Windows.RoutedEventArgs.Source" /> adjustment made by class handling, which may have been done to flatten composited element trees.</returns>
    </member>
    <member name="P:System.Windows.RoutedEventArgs.RoutedEvent">
      <summary>Gets or sets the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> associated with this <see cref="T:System.Windows.RoutedEventArgs" /> instance. </summary>
      <returns>The identifier for the event that has been invoked.</returns>
      <exception cref="T:System.InvalidOperationException">Attempted to change the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" />   value while the event is being routed.</exception>
    </member>
    <member name="P:System.Windows.RoutedEventArgs.Source">
      <summary>Gets or sets a reference to the object that raised the event. </summary>
      <returns>The object that raised the event.</returns>
    </member>
    <member name="T:System.Windows.RoutedEventHandler">
      <summary>Represents the method that will handle various routed events that do not have specific event data beyond the data that is common for all routed events. </summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data. </param>
    </member>
    <member name="T:System.Windows.RoutedEventHandlerInfo">
      <summary>Provides special handling information to inform event listeners whether specific handlers should be invoked.</summary>
    </member>
    <member name="M:System.Windows.RoutedEventHandlerInfo.Equals(System.Object)">
      <summary>Determines whether the specified object is equivalent to the current <see cref="T:System.Windows.RoutedEventHandlerInfo" />.</summary>
      <returns>true if the specified object is equivalent to the current <see cref="T:System.Windows.RoutedEventHandlerInfo" />; otherwise, false.</returns>
      <param name="obj">The object to compare to the current <see cref="T:System.Windows.RoutedEventHandlerInfo" />.</param>
    </member>
    <member name="M:System.Windows.RoutedEventHandlerInfo.Equals(System.Windows.RoutedEventHandlerInfo)">
      <summary>Determines whether the specified <see cref="T:System.Windows.RoutedEventHandlerInfo" /> is equivalent to the current <see cref="T:System.Windows.RoutedEventHandlerInfo" />.</summary>
      <returns>true if the specified <see cref="T:System.Windows.RoutedEventHandlerInfo" /> is equivalent to the current <see cref="T:System.Windows.RoutedEventHandlerInfo" />; otherwise, false.</returns>
      <param name="handlerInfo">The <see cref="T:System.Windows.RoutedEventHandlerInfo" /> to compare to the current <see cref="T:System.Windows.RoutedEventHandlerInfo" />.</param>
    </member>
    <member name="M:System.Windows.RoutedEventHandlerInfo.GetHashCode">
      <summary>Returns a hash code for the current <see cref="T:System.Windows.RoutedEventHandlerInfo" />.</summary>
      <returns>A hash code for the current <see cref="T:System.Windows.RoutedEventHandlerInfo" />.</returns>
    </member>
    <member name="P:System.Windows.RoutedEventHandlerInfo.Handler">
      <summary>Gets the event handler.</summary>
      <returns>The event handler.</returns>
    </member>
    <member name="P:System.Windows.RoutedEventHandlerInfo.InvokeHandledEventsToo">
      <summary>Gets a value that indicates whether the event handler is invoked when the routed event is marked handled.</summary>
      <returns>true if the event handler is invoked when the routed event is marked handled; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.RoutedEventHandlerInfo.op_Equality(System.Windows.RoutedEventHandlerInfo,System.Windows.RoutedEventHandlerInfo)">
      <summary>Determines whether the specified objects are equivalent.</summary>
      <returns>true if the objects are equivalent; otherwise, false.</returns>
      <param name="handlerInfo1">The first object to compare.</param>
      <param name="handlerInfo2">The second object to compare.</param>
    </member>
    <member name="M:System.Windows.RoutedEventHandlerInfo.op_Inequality(System.Windows.RoutedEventHandlerInfo,System.Windows.RoutedEventHandlerInfo)">
      <summary>Determines whether the specified objects are not equivalent.</summary>
      <returns>true if the objects are not equivalent; otherwise, false.</returns>
      <param name="handlerInfo1">The first object to compare.</param>
      <param name="handlerInfo2">The second object to compare.</param>
    </member>
    <member name="T:System.Windows.RoutingStrategy">
      <summary>Indicates the routing strategy of a routed event. </summary>
    </member>
    <member name="F:System.Windows.RoutingStrategy.Tunnel">
      <summary>The routed event uses a tunneling strategy, where the event instance routes downwards through the tree, from root to source element. </summary>
    </member>
    <member name="F:System.Windows.RoutingStrategy.Bubble">
      <summary>The routed event uses a bubbling strategy, where the event instance routes upwards through the tree, from event source to root. </summary>
    </member>
    <member name="F:System.Windows.RoutingStrategy.Direct">
      <summary>The routed event does not route through an element tree, but does support other routed event capabilities such as class handling, <see cref="T:System.Windows.EventTrigger" /> or <see cref="T:System.Windows.EventSetter" />. </summary>
    </member>
    <member name="T:System.Windows.SizeChangedInfo">
      <summary>Report the specifics of a value change involving a <see cref="T:System.Windows.Size" />. This is used as a parameter in <see cref="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> overrides.</summary>
    </member>
    <member name="M:System.Windows.SizeChangedInfo.#ctor(System.Windows.UIElement,System.Windows.Size,System.Boolean,System.Boolean)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.SizeChangedInfo" /> class. </summary>
      <param name="element">The element where the size is being changed.</param>
      <param name="previousSize">The previous size, before the change.</param>
      <param name="widthChanged">true if the Width component of the size changed.</param>
      <param name="heightChanged">true if the Height component of the size changed.</param>
    </member>
    <member name="P:System.Windows.SizeChangedInfo.HeightChanged">
      <summary>Gets a value indicating whether this <see cref="T:System.Windows.SizeChangedInfo" />  reports a size change that includes a significant change to the Height component. </summary>
      <returns>true if there is a significant Height component change; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.SizeChangedInfo.NewSize">
      <summary>Gets the new size being reported. </summary>
      <returns>The new size.</returns>
    </member>
    <member name="P:System.Windows.SizeChangedInfo.PreviousSize">
      <summary> Gets the previous size of the size-related value being reported as changed. </summary>
      <returns>The previous size.</returns>
    </member>
    <member name="P:System.Windows.SizeChangedInfo.WidthChanged">
      <summary> Gets a value that declares whether the Width component of the size changed. </summary>
      <returns>true if the width changed; otherwise, false. </returns>
    </member>
    <member name="T:System.Windows.SizeToContent">
      <summary>Specifies how a window will automatically size itself to fit the size of its content. Used by the <see cref="P:System.Windows.Window.SizeToContent" /> property.</summary>
    </member>
    <member name="F:System.Windows.SizeToContent.Manual">
      <summary>Specifies that a window will not automatically set its size to fit the size of its content. Instead, the size of a window is determined by other properties, including <see cref="P:System.Windows.FrameworkElement.Width" />, <see cref="P:System.Windows.FrameworkElement.Height" />, <see cref="P:System.Windows.FrameworkElement.MaxWidth" />, <see cref="P:System.Windows.FrameworkElement.MaxHeight" />, <see cref="P:System.Windows.FrameworkElement.MinWidth" />, and <see cref="P:System.Windows.FrameworkElement.MinHeight" />. See WPF Windows Overview.</summary>
    </member>
    <member name="F:System.Windows.SizeToContent.Width">
      <summary>Specifies that a window will automatically set its width to fit the width of its content, but not the height.</summary>
    </member>
    <member name="F:System.Windows.SizeToContent.Height">
      <summary>Specifies that a window will automatically set its height to fit the height of its content, but not the width.</summary>
    </member>
    <member name="F:System.Windows.SizeToContent.WidthAndHeight">
      <summary>Specifies that a window will automatically set both its width and height to fit the width and height of its content.</summary>
    </member>
    <member name="T:System.Windows.SourceChangedEventArgs">
      <summary>Provides data for the SourceChanged event, used for interoperation. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Windows.SourceChangedEventArgs.#ctor(System.Windows.PresentationSource,System.Windows.PresentationSource)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.SourceChangedEventArgs" /> class, using supplied information for the old and new sources. </summary>
      <param name="oldSource">The old <see cref="T:System.Windows.PresentationSource" /> that this handler is being notified about.</param>
      <param name="newSource">The new <see cref="T:System.Windows.PresentationSource" /> that this handler is being notified about.</param>
    </member>
    <member name="M:System.Windows.SourceChangedEventArgs.#ctor(System.Windows.PresentationSource,System.Windows.PresentationSource,System.Windows.IInputElement,System.Windows.IInputElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.SourceChangedEventArgs" /> class, using supplied information for the old and new sources, the element that this change effects, and the previous reported parent of that element. </summary>
      <param name="oldSource">The old <see cref="T:System.Windows.PresentationSource" /> that this handler is being notified about.</param>
      <param name="newSource">The new <see cref="T:System.Windows.PresentationSource" /> that this handler is being notified about.</param>
      <param name="element">The element whose parent changed causing the source to change.</param>
      <param name="oldParent">The old parent of the element whose parent changed causing the source to change.</param>
    </member>
    <member name="P:System.Windows.SourceChangedEventArgs.Element">
      <summary>Gets the element whose parent change causing the presentation source information to change. </summary>
      <returns>The element that is reporting the change.</returns>
    </member>
    <member name="P:System.Windows.SourceChangedEventArgs.NewSource">
      <summary>Gets the new source involved in this source change. </summary>
      <returns>The new <see cref="T:System.Windows.PresentationSource" />.</returns>
    </member>
    <member name="P:System.Windows.SourceChangedEventArgs.OldParent">
      <summary>Gets the previous parent of the element whose parent change causing the presentation source information to change. </summary>
      <returns>The previous parent element source.</returns>
    </member>
    <member name="P:System.Windows.SourceChangedEventArgs.OldSource">
      <summary>Gets the old source involved in this source change. </summary>
      <returns>The old <see cref="T:System.Windows.PresentationSource" />.</returns>
    </member>
    <member name="T:System.Windows.SourceChangedEventHandler">
      <summary>Represents the method that will handle the "SourceChanged" event on specific listener elements.</summary>
      <param name="sender">The object where the event is raised, and the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.StrokeCollectionConverter">
      <summary>Converts a <see cref="T:System.Windows.Ink.StrokeCollection" /> to a string.</summary>
    </member>
    <member name="M:System.Windows.StrokeCollectionConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.StrokeCollectionConverter" /> class. </summary>
    </member>
    <member name="M:System.Windows.StrokeCollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.StrokeCollectionConverter" /> can convert an object of a specified type to a <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <returns>true if the <see cref="T:System.Windows.StrokeCollectionConverter" /> can convert an object of type <paramref name="sourceType" /> to a <see cref="T:System.Windows.Ink.StrokeCollection" />; otherwise, false.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides the format context.</param>
      <param name="sourceType">The <see cref="T:System.Type" /> to convert from.</param>
    </member>
    <member name="M:System.Windows.StrokeCollectionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.StrokeCollectionConverter" /> can convert a <see cref="T:System.Windows.Ink.StrokeCollection" /> to the specified type.</summary>
      <returns>true if the <see cref="T:System.Windows.StrokeCollectionConverter" /> can convert a <see cref="T:System.Windows.Ink.StrokeCollection" /> to the <paramref name="sourceType" />; otherwise, false.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides the format context.</param>
      <param name="destinationType">The <see cref="T:System.Type" /> to convert to.</param>
    </member>
    <member name="M:System.Windows.StrokeCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified object to a <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> converted from <paramref name="value" />.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
    </member>
    <member name="M:System.Windows.StrokeCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts a <see cref="T:System.Windows.Ink.StrokeCollection" /> to a string.</summary>
      <returns>An object that represents the specified <see cref="T:System.Windows.Ink.StrokeCollection" />.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type" /> to convert to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is null.</exception>
    </member>
    <member name="M:System.Windows.StrokeCollectionConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns whether this object supports a standard set of values that can be picked from a list, using the specified context. </summary>
      <returns>false in all cases.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
    </member>
    <member name="T:System.Windows.TextAlignment">
      <summary>Specifies whether the text in the object is left-aligned, right-aligned, centered, or justified.</summary>
    </member>
    <member name="F:System.Windows.TextAlignment.Left">
      <summary>Default. Text is aligned to the left.</summary>
    </member>
    <member name="F:System.Windows.TextAlignment.Right">
      <summary>Text is aligned to the right.</summary>
    </member>
    <member name="F:System.Windows.TextAlignment.Center">
      <summary>Text is centered.</summary>
    </member>
    <member name="F:System.Windows.TextAlignment.Justify">
      <summary>Text is justified.</summary>
    </member>
    <member name="T:System.Windows.TextDataFormat">
      <summary>Specifies the data format of the text data.</summary>
    </member>
    <member name="F:System.Windows.TextDataFormat.Text">
      <summary>Specifies that the text data is in the <see cref="F:System.Windows.DataFormats.Text" /> data format.</summary>
    </member>
    <member name="F:System.Windows.TextDataFormat.UnicodeText">
      <summary>Specifies that the text data is in the <see cref="F:System.Windows.DataFormats.UnicodeText" /> data format.</summary>
    </member>
    <member name="F:System.Windows.TextDataFormat.Rtf">
      <summary>Specifies that the text data is in the <see cref="F:System.Windows.DataFormats.Rtf" /> data format.</summary>
    </member>
    <member name="F:System.Windows.TextDataFormat.Html">
      <summary>Specifies that the text data is in the <see cref="F:System.Windows.DataFormats.Html" /> data format.</summary>
    </member>
    <member name="F:System.Windows.TextDataFormat.CommaSeparatedValue">
      <summary>Specifies that the text data is in the <see cref="F:System.Windows.DataFormats.CommaSeparatedValue" /> data format.</summary>
    </member>
    <member name="F:System.Windows.TextDataFormat.Xaml">
      <summary>Specifies that the text data is in the <see cref="F:System.Windows.DataFormats.Xaml" /> data format.</summary>
    </member>
    <member name="T:System.Windows.TextDecoration">
      <summary>Represents a text decoration, which a visual ornamentation that is added to text (such as an underline).</summary>
    </member>
    <member name="M:System.Windows.TextDecoration.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.TextDecoration" /> class.</summary>
    </member>
    <member name="M:System.Windows.TextDecoration.#ctor(System.Windows.TextDecorationLocation,System.Windows.Media.Pen,System.Double,System.Windows.TextDecorationUnit,System.Windows.TextDecorationUnit)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.TextDecoration" /> class with the specified <see cref="P:System.Windows.TextDecoration.Location" />, <see cref="P:System.Windows.TextDecoration.Pen" />, <see cref="P:System.Windows.TextDecoration.PenOffset" />, <see cref="P:System.Windows.TextDecoration.PenOffsetUnit" />, and <see cref="P:System.Windows.TextDecoration.PenThicknessUnit" /> values.  </summary>
      <param name="location">The location of the text decoration.</param>
      <param name="pen">The <see cref="T:System.Windows.Media.Pen" /> used to draw the text decoration. If this value is null, the text decoration color matches the text color to which it is applied, and the text decoration's thickness is set to the font's recommended thickness.</param>
      <param name="penOffset">The vertical displacement from the text decoration's location. A negative value moves the decoration lower, while a positive value moves the decoration higher.</param>
      <param name="penOffsetUnit">The units used to interpret the value of <paramref name="penOffset" />.</param>
      <param name="penThicknessUnit">The units used to interpret the value of the <see cref="P:System.Windows.Media.Pen.Thickness" /> for the <paramref name="pen" />.</param>
    </member>
    <member name="M:System.Windows.TextDecoration.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.TextDecoration" />, making deep copies of this object's values. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true.</returns>
    </member>
    <member name="M:System.Windows.TextDecoration.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.TextDecoration" /> object, making deep copies of this object's current values. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property value is false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property value is true.</returns>
    </member>
    <member name="P:System.Windows.TextDecoration.Location">
      <summary>Gets or sets the vertical location at which the text decoration is drawn.  </summary>
      <returns>The vertical location at which the text decoration is drawn.</returns>
    </member>
    <member name="F:System.Windows.TextDecoration.LocationProperty">
      <summary>Identifies the <see cref="P:System.Windows.TextDecoration.Location" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.TextDecoration.Location" /> dependency property. </returns>
    </member>
    <member name="P:System.Windows.TextDecoration.Pen">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Pen" /> used to draw the text decoration.  </summary>
      <returns>The <see cref="T:System.Windows.Media.Pen" /> used to draw the text decoration. If this value is null, the decoration color matches the text to which it is applied and the decoration's thickness is set to the font's recommended thickness.</returns>
    </member>
    <member name="P:System.Windows.TextDecoration.PenOffset">
      <summary>Gets or sets the text decoration's offset from its <see cref="P:System.Windows.TextDecoration.Location" />.  </summary>
      <returns>The text decoration's offset from its <see cref="P:System.Windows.TextDecoration.Location" />. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.TextDecoration.PenOffsetProperty">
      <summary>Identifies the <see cref="P:System.Windows.TextDecoration.PenOffset" /> dependency property. </summary>
      <returns>The identifier for the  <see cref="P:System.Windows.TextDecoration.PenOffset" /> dependency property. </returns>
    </member>
    <member name="P:System.Windows.TextDecoration.PenOffsetUnit">
      <summary>Gets the units in which the <see cref="P:System.Windows.TextDecoration.PenOffset" /> value is expressed.  </summary>
      <returns>The units in which the <see cref="P:System.Windows.TextDecoration.PenOffset" /> value is expressed. The default is <see cref="F:System.Windows.TextDecorationUnit.FontRecommended" />.</returns>
    </member>
    <member name="F:System.Windows.TextDecoration.PenOffsetUnitProperty">
      <summary>Identifies the <see cref="P:System.Windows.TextDecoration.PenOffsetUnit" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.TextDecoration.PenOffsetUnit" /> dependency property. </returns>
    </member>
    <member name="F:System.Windows.TextDecoration.PenProperty">
      <summary>Identifies the <see cref="P:System.Windows.TextDecoration.Pen" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.TextDecoration.Pen" /> dependency property. </returns>
    </member>
    <member name="P:System.Windows.TextDecoration.PenThicknessUnit">
      <summary>Gets the units in which the <see cref="P:System.Windows.Media.Pen.Thickness" /> of the text decoration's <see cref="P:System.Windows.TextDecoration.Pen" /> is expressed.  </summary>
      <returns>The units in which the <see cref="P:System.Windows.Media.Pen.Thickness" /> of the text decoration's <see cref="P:System.Windows.TextDecoration.Pen" /> is expressed. The default is <see cref="F:System.Windows.TextDecorationUnit.FontRecommended" />.</returns>
    </member>
    <member name="F:System.Windows.TextDecoration.PenThicknessUnitProperty">
      <summary>Identifies the <see cref="P:System.Windows.TextDecoration.PenThicknessUnit" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.TextDecoration.PenThicknessUnit" /> dependency property. </returns>
    </member>
    <member name="T:System.Windows.TextDecorationCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.TextDecoration" /> instances.</summary>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.#ctor">
      <summary>Initializes a new <see cref="T:System.Windows.TextDecorationCollection" /> instance that is empty.</summary>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.TextDecoration})">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.TextDecorationCollection" /> class by specifying an enumerator.</summary>
      <param name="collection">An enumerator of type <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.#ctor(System.Int32)">
      <summary>Initializes a new <see cref="T:System.Windows.TextDecorationCollection" /> instance that is empty and has the specified initial capacity.</summary>
      <param name="capacity">The number of elements that the new collection is initially capable of storing.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.Add(System.Collections.Generic.IEnumerable{System.Windows.TextDecoration})">
      <summary>Adds a generic <see cref="T:System.Collections.Generic.IEnumerable`1" /> to the collection.</summary>
      <param name="textDecorations">A generic <see cref="T:System.Collections.Generic.IEnumerable`1" /> of type <see cref="T:System.Windows.TextDecoration" />.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.Add(System.Windows.TextDecoration)">
      <summary>Inserts the specified <see cref="T:System.Windows.TextDecoration" /> object into the collection.</summary>
      <param name="value">The <see cref="T:System.Windows.TextDecoration" /> object to insert.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.Clear">
      <summary>Removes all <see cref="T:System.Windows.TextDecoration" /> objects from the <see cref="T:System.Windows.TextDecorationCollection" />.</summary>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.TextDecorationCollection" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.TextDecorationCollection" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.Contains(System.Windows.TextDecoration)">
      <summary>Determines if the <see cref="T:System.Windows.TextDecorationCollection" /> contains the specified <see cref="T:System.Windows.TextDecoration" />.</summary>
      <returns>true if <paramref name="value" /> is in the collection; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Windows.TextDecoration" /> object to locate.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.CopyTo(System.Windows.TextDecoration[],System.Int32)">
      <summary>Copies the <see cref="T:System.Windows.TextDecoration" /> objects in the collection into an array of <see cref="T:System.Windows.TextDecorationCollection" />, starting at the specified index position.</summary>
      <param name="array">The destination array.</param>
      <param name="index">The zero-based index position where copying begins.</param>
    </member>
    <member name="P:System.Windows.TextDecorationCollection.Count">
      <summary>Gets the number of <see cref="T:System.Windows.TextDecoration" /> objects in the <see cref="T:System.Windows.TextDecorationCollection" />.</summary>
      <returns>The number of objects in the collection.</returns>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the collection.</summary>
      <returns>An enumerator that can iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.IndexOf(System.Windows.TextDecoration)">
      <summary>Returns the index of the specified <see cref="T:System.Windows.TextDecoration" /> object within the collection. </summary>
      <returns>The zero-based index of <paramref name="value" />, if found; otherwise -1;</returns>
      <param name="value">The <see cref="T:System.Windows.TextDecoration" /> object to locate.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.Insert(System.Int32,System.Windows.TextDecoration)">
      <summary>Inserts the specified <see cref="T:System.Windows.TextDecoration" /> object at the specified index position in the collection.</summary>
      <param name="index">The zero-based index position to insert the object.</param>
      <param name="value">The <see cref="T:System.Windows.TextDecoration" /> object to insert.</param>
    </member>
    <member name="P:System.Windows.TextDecorationCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Windows.TextDecoration" /> object at the specified index position.</summary>
      <returns>The <see cref="T:System.Windows.TextDecoration" /> object at the <paramref name="index" /> position.</returns>
      <param name="index">The zero-based index position of the object to get or set.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.Remove(System.Windows.TextDecoration)">
      <summary>Removes the specified <see cref="T:System.Windows.TextDecoration" /> object from the collection.</summary>
      <returns>true if <paramref name="value" /> was successfully deleted; otherwise false.</returns>
      <param name="value">The <see cref="T:System.Windows.TextDecoration" /> object to remove.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.RemoveAt(System.Int32)">
      <summary>Removes the specified <see cref="T:System.Windows.TextDecoration" /> object from the collection at the specified index.</summary>
      <param name="index">The zero-based index position from where to delete the object.</param>
    </member>
    <member name="P:System.Windows.TextDecorationCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether the collection is read-only.</summary>
      <returns>true if the <see cref="T:System.Windows.TextDecorationCollection" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">A zero-based <see cref="T:System.Array" /> that receives the copied items from the <see cref="T:System.Windows.TextDecorationCollection" />.</param>
      <param name="index">The first position in the specified <see cref="T:System.Array" /> to receive the copied contents.</param>
    </member>
    <member name="P:System.Windows.TextDecorationCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value that indicates whether access to the collection is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Windows.TextDecorationCollection" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.TextDecorationCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Windows.TextDecorationCollection" />.</returns>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the collection.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Windows.TextDecorationCollection" />.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the collection contains a specific value.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Windows.TextDecorationCollection" />; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Media.TextEffectCollection" />.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the collection.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.TextDecorationCollection" />.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item to the collection at the specified index.</summary>
      <param name="index">The zero-based index at which to insert the <see cref="T:System.Object" />.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Windows.TextDecorationCollection" />.</param>
    </member>
    <member name="P:System.Windows.TextDecorationCollection.System#Collections#IList#IsFixedSize">
      <summary>Gets a value that indicates whether the collection has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Windows.TextDecorationCollection" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.TextDecorationCollection.System#Collections#IList#IsReadOnly">
      <summary>Gets a value that indicates whether the collection is read-only.</summary>
      <returns>true if the <see cref="T:System.Windows.TextDecorationCollection" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.TextDecorationCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the collection.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Windows.TextDecorationCollection" />.</param>
    </member>
    <member name="T:System.Windows.TextDecorationCollection.Enumerator">
      <summary>Enumerates <see cref="T:System.Windows.TextDecoration" /> items in a <see cref="T:System.Windows.TextDecoration" />.</summary>
    </member>
    <member name="P:System.Windows.TextDecorationCollection.Enumerator.Current">
      <summary>Gets the current element in the collection.</summary>
      <returns>The current <see cref="T:System.Windows.TextDecoration" /> in the collection.</returns>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element in the collection.</summary>
      <returns>true if the enumerator successfully advanced to the next element; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.Enumerator.Reset">
      <summary>Resets the enumerator to its initial position, which is before the first element in the collection.</summary>
    </member>
    <member name="P:System.Windows.TextDecorationCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>For a description of this members, see <see cref="P:System.Collections.IEnumerator.Current" />.</summary>
      <returns>The current element in the collection.</returns>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.Enumerator.System#IDisposable#Dispose">
      <summary>For a description of this members, see <see cref="M:System.IDisposable.Dispose" />.</summary>
    </member>
    <member name="T:System.Windows.TextDecorationCollectionConverter">
      <summary>Converts instances of <see cref="T:System.Windows.TextDecorationCollection" /> from other data types.</summary>
    </member>
    <member name="M:System.Windows.TextDecorationCollectionConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.TextDecorationCollectionConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.TextDecorationCollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value that indicates whether this converter can convert an object of the given type to an instance of <see cref="T:System.Windows.TextDecorationCollection" />.</summary>
      <returns>true if the converter can convert the provided type to an instance of <see cref="T:System.Windows.TextDecorationCollection" />; otherwise, false.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="sourceType">The type of the source that is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollectionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of <see cref="T:System.Windows.TextDecorationCollection" /> can be converted to a different type.</summary>
      <returns>false is always returned because the <see cref="T:System.Windows.TextDecorationCollection" /> cannot be converted to another type.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="destinationType">The type of the source that is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert a specified object to an instance of <see cref="T:System.Windows.TextDecorationCollection" />.</summary>
      <returns>The instance of <see cref="T:System.Windows.FontWeight" /> created from the converted <paramref name="input" />.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="culture">Describes the <see cref="T:System.Globalization.CultureInfo" /> of the type being converted. </param>
      <param name="input">The object being converted.</param>
      <exception cref="T:System.NotSupportedException">Occurs if <paramref name="input" /> is null or is not a valid type for conversion.</exception>
    </member>
    <member name="M:System.Windows.TextDecorationCollectionConverter.ConvertFromString(System.String)">
      <summary>Attempts to convert a specified string to an instance of <see cref="T:System.Windows.TextDecorationCollection" />.</summary>
      <returns>The instance of <see cref="T:System.Windows.TextDecorationCollection" /> created from the converted <paramref name="text" />.</returns>
      <param name="text">The <see cref="T:System.String" /> to be converted into the <see cref="T:System.Windows.TextDecorationCollection" /> object.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert an instance of <see cref="T:System.Windows.TextDecorationCollection" /> to a specified type.</summary>
      <returns>null is always returned because <see cref="T:System.Windows.TextDecorationCollection" /> cannot be converted to any other type.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="culture">Describes the <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The instance of <see cref="T:System.Windows.TextDecorationCollection" /> to convert.</param>
      <param name="destinationType">The type this instance of <see cref="T:System.Windows.TextDecorationCollection" /> is converted to.</param>
    </member>
    <member name="T:System.Windows.TextDecorationLocation">
      <summary>Specifies the vertical position of a <see cref="T:System.Windows.TextDecoration" /> object.</summary>
    </member>
    <member name="F:System.Windows.TextDecorationLocation.Underline">
      <summary>The vertical position of an underline. This is the default value.</summary>
    </member>
    <member name="F:System.Windows.TextDecorationLocation.OverLine">
      <summary>The vertical position of an overline.</summary>
    </member>
    <member name="F:System.Windows.TextDecorationLocation.Strikethrough">
      <summary>The vertical position of a strikethrough.</summary>
    </member>
    <member name="F:System.Windows.TextDecorationLocation.Baseline">
      <summary>The vertical position of a baseline.</summary>
    </member>
    <member name="T:System.Windows.TextDecorations">
      <summary>Provides a set of static predefined text decorations.</summary>
    </member>
    <member name="P:System.Windows.TextDecorations.Baseline">
      <summary>Specifies a baseline <see cref="T:System.Windows.TextDecoration" />.</summary>
      <returns>A value that represents a baseline <see cref="T:System.Windows.TextDecoration" />.</returns>
    </member>
    <member name="P:System.Windows.TextDecorations.OverLine">
      <summary>Specifies an overline <see cref="T:System.Windows.TextDecoration" />.</summary>
      <returns>A value that represents an overline <see cref="T:System.Windows.TextDecoration" />.</returns>
    </member>
    <member name="P:System.Windows.TextDecorations.Strikethrough">
      <summary>Specifies a strikethrough <see cref="T:System.Windows.TextDecoration" />.</summary>
      <returns>A value that represents a strikethrough <see cref="T:System.Windows.TextDecoration" />.</returns>
    </member>
    <member name="P:System.Windows.TextDecorations.Underline">
      <summary>Specifies an underline <see cref="T:System.Windows.TextDecoration" />.</summary>
      <returns>A value that represents an underline <see cref="T:System.Windows.TextDecoration" />.</returns>
    </member>
    <member name="T:System.Windows.TextDecorationUnit">
      <summary>Specifies the unit type of either a <see cref="T:System.Windows.TextDecoration" /> <see cref="P:System.Windows.TextDecoration.PenOffset" /> or a <see cref="P:System.Windows.TextDecoration.Pen" /> thickness value.</summary>
    </member>
    <member name="F:System.Windows.TextDecorationUnit.FontRecommended">
      <summary>A unit value that is relative to the font used for the <see cref="T:System.Windows.TextDecoration" />. If the decoration spans multiple fonts, an average recommended value is calculated. This is the default value.</summary>
    </member>
    <member name="F:System.Windows.TextDecorationUnit.FontRenderingEmSize">
      <summary>A unit value that is relative to the em size of the font. The value of the offset or thickness is equal to the offset or thickness value multiplied by the font em size.</summary>
    </member>
    <member name="F:System.Windows.TextDecorationUnit.Pixel">
      <summary>A unit value that is expressed in pixels.</summary>
    </member>
    <member name="T:System.Windows.TextMarkerStyle">
      <summary>Describes the appearance of a list item's bullet style.</summary>
    </member>
    <member name="F:System.Windows.TextMarkerStyle.None">
      <summary>No marker is displayed.</summary>
    </member>
    <member name="F:System.Windows.TextMarkerStyle.Disc">
      <summary>A solid disc circle is displayed.</summary>
    </member>
    <member name="F:System.Windows.TextMarkerStyle.Circle">
      <summary>A hollow disc circle is displayed.</summary>
    </member>
    <member name="F:System.Windows.TextMarkerStyle.Square">
      <summary>A hollow square shape is displayed.</summary>
    </member>
    <member name="F:System.Windows.TextMarkerStyle.Box">
      <summary>A solid square box is displayed.</summary>
    </member>
    <member name="F:System.Windows.TextMarkerStyle.LowerRoman">
      <summary>A lowercase Roman numeral is displayed, starting with the numeral i, for example, i, ii, iii, and iv. The <see cref="T:System.Windows.TextMarkerStyle" /> is automatically incremented for each item added to the list.</summary>
    </member>
    <member name="F:System.Windows.TextMarkerStyle.UpperRoman">
      <summary>An uppercase Roman numeral is displayed, starting with the numeral I, for example, I, II, III, and IV. The <see cref="T:System.Windows.TextMarkerStyle" /> is automatically incremented for each item added to the list.</summary>
    </member>
    <member name="F:System.Windows.TextMarkerStyle.LowerLatin">
      <summary>A lowercase ASCII character is displayed, starting with the letter a, for example, a, b, and c. The <see cref="T:System.Windows.TextMarkerStyle" /> is automatically incremented for each item added to the list.</summary>
    </member>
    <member name="F:System.Windows.TextMarkerStyle.UpperLatin">
      <summary>An uppercase ASCII character is displayed, starting with the letter A, for example, A, B, and C. The <see cref="T:System.Windows.TextMarkerStyle" /> is automatically incremented for each item added to the list.</summary>
    </member>
    <member name="F:System.Windows.TextMarkerStyle.Decimal">
      <summary>A decimal is displayed, starting with the number one, for example, 1, 2, and 3. The <see cref="T:System.Windows.TextMarkerStyle" /> is automatically incremented for each item added to the list.</summary>
    </member>
    <member name="T:System.Windows.TextTrimming">
      <summary>Describes how text is trimmed when it overflows the edge of its containing box.</summary>
    </member>
    <member name="F:System.Windows.TextTrimming.None">
      <summary>Text is not trimmed.</summary>
    </member>
    <member name="F:System.Windows.TextTrimming.CharacterEllipsis">
      <summary>Text is trimmed at a character boundary. An ellipsis (...) is drawn in place of remaining text.</summary>
    </member>
    <member name="F:System.Windows.TextTrimming.WordEllipsis">
      <summary>Text is trimmed at a word boundary. An ellipsis (...) is drawn in place of remaining text.</summary>
    </member>
    <member name="T:System.Windows.TextWrapping">
      <summary> Specifies whether text wraps when it reaches the edge of the containing box </summary>
    </member>
    <member name="F:System.Windows.TextWrapping.WrapWithOverflow">
      <summary> Line-breaking occurs if the line overflows beyond the available block width. However, a line may overflow beyond the block width if the line breaking algorithm cannot determine a line break opportunity, as in the case of a very long word constrained in a fixed-width container with no scrolling allowed. </summary>
    </member>
    <member name="F:System.Windows.TextWrapping.NoWrap">
      <summary> No line wrapping is performed. </summary>
    </member>
    <member name="F:System.Windows.TextWrapping.Wrap">
      <summary> Line-breaking occurs if the line overflows beyond the available block width, even if the standard line breaking algorithm cannot determine any line break opportunity, as in the case of a very long word constrained in a fixed-width container with no scrolling allowed. </summary>
    </member>
    <member name="T:System.Windows.UIElement">
      <summary>
        <see cref="T:System.Windows.UIElement" /> is a base class for WPF core level implementations building on Windows Presentation Foundation (WPF) elements and basic presentation characteristics. </summary>
    </member>
    <member name="M:System.Windows.UIElement.#ctor">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.UIElement" /> class. </summary>
    </member>
    <member name="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
      <summary>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. </summary>
      <param name="routedEvent">An identifier for the routed event to be handled.</param>
      <param name="handler">A reference to the handler implementation.</param>
    </member>
    <member name="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
      <summary>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. Specify <paramref name="handledEventsToo" /> as true to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route. </summary>
      <param name="routedEvent">An identifier for the routed event to be handled.</param>
      <param name="handler">A reference to the handler implementation.</param>
      <param name="handledEventsToo">true to register the handler such that it is invoked even when  the routed event is marked handled in its event data; false to register the handler with the default condition that it will not be invoked if the routed event is already marked handled. The default is false.Do not routinely ask to rehandle a routed event. For more information, see Remarks.</param>
    </member>
    <member name="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
      <summary>Adds handlers to the specified <see cref="T:System.Windows.EventRoute" /> for the current <see cref="T:System.Windows.UIElement" /> event handler collection.</summary>
      <param name="route">The event route that handlers are added to.</param>
      <param name="e">The event data that is used to add the handlers. This method uses the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of the event data to create the handlers. </param>
    </member>
    <member name="P:System.Windows.UIElement.AllowDrop">
      <summary>Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation.  </summary>
      <returns>true if this element can be used as the target of a drag-and-drop operation; otherwise, false. The default value is false.     </returns>
    </member>
    <member name="F:System.Windows.UIElement.AllowDropProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.AllowDrop" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.AllowDrop" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
      <summary>Applies an animation to a specified dependency property on this element. Any existing animations are stopped and replaced with the new animation.</summary>
      <param name="dp">The identifier for the property to animate.</param>
      <param name="clock">The animation clock that controls and declares the animation.</param>
    </member>
    <member name="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
      <summary>Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.</summary>
      <param name="dp">The property to animate.</param>
      <param name="clock">The animation clock that controls and declares the animation.</param>
      <param name="handoffBehavior">A value of the enumeration. The default is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />, which will stop any existing animation and replace with the new one.</param>
    </member>
    <member name="P:System.Windows.UIElement.AreAnyTouchesCaptured">
      <summary>Gets a value that indicates whether at least one touch is captured to this element. </summary>
      <returns>true if at least one touch is captured to this element; otherwise, false. </returns>
    </member>
    <member name="F:System.Windows.UIElement.AreAnyTouchesCapturedProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin">
      <summary>Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree. </summary>
      <returns>true if at least one touch is captured to this element or any child elements in its visual tree; otherwise, false. </returns>
    </member>
    <member name="F:System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver">
      <summary>Gets a value that indicates whether at least one touch is pressed over this element.</summary>
      <returns>true if at least one touch is pressed over this element; otherwise, false. </returns>
    </member>
    <member name="F:System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.AreAnyTouchesOver">
      <summary>Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree. </summary>
      <returns>true if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, false. </returns>
    </member>
    <member name="F:System.Windows.UIElement.AreAnyTouchesOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesOver" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.AreAnyTouchesOver" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
      <summary>Positions child elements and determines a size for a <see cref="T:System.Windows.UIElement" />. Parent elements call this method from their <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> implementation (or a WPF framework-level equivalent) to form a recursive layout update. This method constitutes the second pass of a layout update. </summary>
      <param name="finalRect">The final size that the parent computes for the child element, provided as a <see cref="T:System.Windows.Rect" /> instance.</param>
    </member>
    <member name="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)">
      <summary>Defines the template for WPF core-level arrange layout definition. </summary>
      <param name="finalRect">The final area within the parent that element should use to arrange itself and its child elements.</param>
    </member>
    <member name="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
      <summary>Starts an animation for a specified animated property on this element. </summary>
      <param name="dp">The property to animate, which is specified as a dependency property identifier.</param>
      <param name="animation">The timeline of the animation to start.</param>
    </member>
    <member name="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
      <summary>Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation. </summary>
      <param name="dp">The property to animate, which is specified as the dependency property identifier.</param>
      <param name="animation">The timeline of the animation to be applied.</param>
      <param name="handoffBehavior">A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.</param>
    </member>
    <member name="P:System.Windows.UIElement.BitmapEffect">
      <summary>Gets or sets a bitmap effect that applies directly to the rendered content for this element.  </summary>
      <returns>The bitmap effect to apply.</returns>
    </member>
    <member name="P:System.Windows.UIElement.BitmapEffectInput">
      <summary> Gets or sets an input source for the bitmap effect that applies directly to the rendered content for this element.  </summary>
      <returns>The source for bitmap effects.</returns>
    </member>
    <member name="F:System.Windows.UIElement.BitmapEffectInputProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.BitmapEffectInput" /> dependency property.</summary>
      <returns>The <see cref="P:System.Windows.UIElement.BitmapEffectInput" /> dependency property identifier.</returns>
    </member>
    <member name="F:System.Windows.UIElement.BitmapEffectProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.BitmapEffect" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.UIElement.BitmapEffect" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.UIElement.CacheMode">
      <summary>Gets or sets a cached representation of the <see cref="T:System.Windows.UIElement" />. </summary>
      <returns>A <see cref="T:System.Windows.Media.CacheMode" /> that holds a cached representation of the <see cref="T:System.Windows.UIElement" />.</returns>
    </member>
    <member name="F:System.Windows.UIElement.CacheModeProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.CacheMode" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.CacheMode" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.UIElement.CaptureMouse">
      <summary>Attempts to force capture of the mouse to this element. </summary>
      <returns>true if the mouse is successfully captured; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.UIElement.CaptureStylus">
      <summary> Attempts to force capture of the stylus to this element. </summary>
      <returns>true if the stylus was successfully captured; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)">
      <summary>Attempts to force capture of a touch to this element.</summary>
      <returns>true if the specified touch is captured to this element; otherwise, false.</returns>
      <param name="touchDevice">The device to capture.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="touchDevice" /> is null.</exception>
    </member>
    <member name="P:System.Windows.UIElement.Clip">
      <summary>Gets or sets the geometry used to define the outline of the contents of an element.  </summary>
      <returns>The geometry to be used for clipping area sizing. The default is a null <see cref="T:System.Windows.Media.Geometry" />.</returns>
    </member>
    <member name="F:System.Windows.UIElement.ClipProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.Clip" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.Clip" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.ClipToBounds">
      <summary>Gets or sets a value indicating whether to clip the content of this element (or content coming from the child elements of this element) to fit into the size of the containing element.   </summary>
      <returns>true if the content should be clipped; otherwise, false. The default value is false.</returns>
    </member>
    <member name="F:System.Windows.UIElement.ClipToBoundsProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.ClipToBounds" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.ClipToBounds" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.CommandBindings">
      <summary>Gets a collection of <see cref="T:System.Windows.Input.CommandBinding" /> objects associated with this element. A <see cref="T:System.Windows.Input.CommandBinding" /> enables command handling for this element, and declares the linkage between a command, its events, and the handlers attached by this element.</summary>
      <returns>The collection of all <see cref="T:System.Windows.Input.CommandBinding" /> objects.</returns>
    </member>
    <member name="P:System.Windows.UIElement.DesiredSize">
      <summary>Gets the size that this element computed during the measure pass of the layout process. </summary>
      <returns>The computed size, which becomes the desired size for the arrange pass.</returns>
    </member>
    <member name="E:System.Windows.UIElement.DragEnter">
      <summary>Occurs when the input system reports an underlying drag event with this element as the drag target. </summary>
    </member>
    <member name="F:System.Windows.UIElement.DragEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.DragEnter" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.DragEnter" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.DragLeave">
      <summary>Occurs when the input system reports an underlying drag event with this element as the drag origin. </summary>
    </member>
    <member name="F:System.Windows.UIElement.DragLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.DragLeave" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.DragLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.DragOver">
      <summary>Occurs when the input system reports an underlying drag event with this element as the potential drop target. </summary>
    </member>
    <member name="F:System.Windows.UIElement.DragOverEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.DragOver" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.DragOver" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.Drop">
      <summary>Occurs when the input system reports an underlying drop event with this element as the drop target. </summary>
    </member>
    <member name="F:System.Windows.UIElement.DropEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.Drop" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.Drop" /> routed event.</returns>
    </member>
    <member name="P:System.Windows.UIElement.Effect">
      <summary>Gets or sets the bitmap effect to apply to the <see cref="T:System.Windows.UIElement" />. </summary>
      <returns>An <see cref="T:System.Windows.Media.Effects.Effect" /> that represents the bitmap effect. </returns>
    </member>
    <member name="F:System.Windows.UIElement.EffectProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.Effect" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.Effect" /> dependency property. </returns>
    </member>
    <member name="M:System.Windows.UIElement.Focus">
      <summary>Attempts to set focus to this element. </summary>
      <returns>true if keyboard focus and logical focus were set to this element; false if only logical focus was set to this element, or if the call to this method did not force the focus to change.</returns>
    </member>
    <member name="P:System.Windows.UIElement.Focusable">
      <summary>Gets or sets a value that indicates whether the element can receive focus.  </summary>
      <returns>true if the element is focusable; otherwise false. The default is false, but see Remarks.</returns>
    </member>
    <member name="E:System.Windows.UIElement.FocusableChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.Focusable" /> property changes.</summary>
    </member>
    <member name="F:System.Windows.UIElement.FocusableProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.Focusable" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.Focusable" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
      <summary>Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation. </summary>
      <returns>The property value as if no animations are attached to the specified dependency property. </returns>
      <param name="dp">The dependency property to check.</param>
    </member>
    <member name="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)">
      <summary>Returns an alternative clipping geometry that represents the region that would be clipped if <see cref="P:System.Windows.UIElement.ClipToBounds" /> were set to true. </summary>
      <returns>The potential clipping geometry.</returns>
      <param name="layoutSlotSize">The available size provided by the element.</param>
    </member>
    <member name="M:System.Windows.UIElement.GetUIParentCore">
      <summary>When overridden in a derived class, returns an alternative user interface (UI) parent for this element if no visual parent exists. </summary>
      <returns>An object, if implementation of a derived class has an alternate parent connection to report.</returns>
    </member>
    <member name="E:System.Windows.UIElement.GiveFeedback">
      <summary>Occurs when the input system reports an underlying drag-and-drop event that involves this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.GiveFeedbackEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.GiveFeedback" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.GiveFeedback" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.GotFocus">
      <summary>Occurs when this element gets logical focus. </summary>
    </member>
    <member name="F:System.Windows.UIElement.GotFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.GotFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.GotFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.GotKeyboardFocus">
      <summary>Occurs when the keyboard is focused on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.GotKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.GotKeyboardFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.GotKeyboardFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.GotMouseCapture">
      <summary>Occurs when this element captures the mouse. </summary>
    </member>
    <member name="F:System.Windows.UIElement.GotMouseCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.GotMouseCapture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.GotMouseCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.GotStylusCapture">
      <summary>Occurs when this element captures the stylus. </summary>
    </member>
    <member name="F:System.Windows.UIElement.GotStylusCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.GotStylusCapture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.GotStylusCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.GotTouchCapture">
      <summary>Occurs when a touch is captured to this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.GotTouchCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.GotTouchCapture" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.GotTouchCapture" /> routed event.</returns>
    </member>
    <member name="P:System.Windows.UIElement.HasAnimatedProperties">
      <summary>Gets a value indicating whether this element has any animated properties. </summary>
      <returns>true if this element has animations attached to any of its properties; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
      <summary>Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> to supply base element hit testing behavior (returning <see cref="T:System.Windows.Media.GeometryHitTestResult" />). </summary>
      <returns>Results of the test, including the evaluated geometry.</returns>
      <param name="hitTestParameters">Describes the hit test to perform, including the initial hit point.</param>
    </member>
    <member name="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)">
      <summary> Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /> to supply base element hit testing behavior (returning <see cref="T:System.Windows.Media.HitTestResult" />). </summary>
      <returns>Results of the test, including the evaluated point.</returns>
      <param name="hitTestParameters">Describes the hit test to perform, including the initial hit point.</param>
    </member>
    <member name="P:System.Windows.UIElement.InputBindings">
      <summary> Gets the collection of input bindings associated with this element. </summary>
      <returns>The collection of input bindings.</returns>
    </member>
    <member name="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)">
      <summary> Returns the input element within the current element that is at the specified coordinates, relative to the current element's origin. </summary>
      <returns>The element child that is located at the given position.</returns>
      <param name="point">The offset coordinates within this element.</param>
    </member>
    <member name="M:System.Windows.UIElement.InvalidateArrange">
      <summary>Invalidates the arrange state (layout) for the element. After the invalidation, the element will have its layout updated, which will occur asynchronously unless subsequently forced by <see cref="M:System.Windows.UIElement.UpdateLayout" />. </summary>
    </member>
    <member name="M:System.Windows.UIElement.InvalidateMeasure">
      <summary>Invalidates the measurement state (layout) for the element. </summary>
    </member>
    <member name="M:System.Windows.UIElement.InvalidateVisual">
      <summary>Invalidates the rendering of the element, and forces a complete new layout pass. <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> is called after the layout cycle is completed. </summary>
    </member>
    <member name="P:System.Windows.UIElement.IsArrangeValid">
      <summary>Gets a value indicating whether the computed size and position of child elements in this element's layout are valid. </summary>
      <returns>true if the size and position of layout are valid; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsEnabled">
      <summary>Gets or sets a value indicating whether this element is enabled in the user interface (UI).  </summary>
      <returns>true if the element is enabled; otherwise, false. The default value is true.</returns>
    </member>
    <member name="E:System.Windows.UIElement.IsEnabledChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsEnabled" /> property on this element changes. </summary>
    </member>
    <member name="P:System.Windows.UIElement.IsEnabledCore">
      <summary>Gets a value that becomes the return value of <see cref="P:System.Windows.UIElement.IsEnabled" /> in derived classes. </summary>
      <returns>true if the element is enabled; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.UIElement.IsEnabledProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsEnabled" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.IsEnabled" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsFocused">
      <summary>Gets a value that determines whether this element has logical focus.  </summary>
      <returns>true if this element has logical focus; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.UIElement.IsFocusedProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsFocused" /> dependency property.  </summary>
      <returns>The <see cref="P:System.Windows.UIElement.IsFocused" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsHitTestVisible">
      <summary>Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content. </summary>
      <returns>true if this element could be returned as a hit test result from at least one point; otherwise, false. The default value is true.</returns>
    </member>
    <member name="E:System.Windows.UIElement.IsHitTestVisibleChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property changes on this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement.IsHitTestVisibleProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsHitTestVisible" />  dependency property. </summary>
      <returns>The <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsInputMethodEnabled">
      <summary>Gets a value indicating whether an input method system, such as an Input Method Editor (IME),  is enabled for processing the input to this element. </summary>
      <returns>true if an input method is active; otherwise, false. The default value of the underlying attached property is true; however, this will be influenced by the actual state of input methods at runtime.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsKeyboardFocused">
      <summary>Gets a value indicating whether this element has keyboard focus.  </summary>
      <returns>true if this element has keyboard focus; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.UIElement.IsKeyboardFocusedChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.IsKeyboardFocusedProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsKeyboardFocusWithin">
      <summary>Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.  </summary>
      <returns>true if keyboard focus is on the element or its child elements; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged">
      <summary>Occurs when the value of the <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.IsKeyboardFocusWithinProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /> dependency property.  </summary>
      <returns>The <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsManipulationEnabled">
      <summary>Gets or sets a value that indicates whether manipulation events are enabled on this <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>true if manipulation events are enabled on this <see cref="T:System.Windows.UIElement" />; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.UIElement.IsManipulationEnabledProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsManipulationEnabled" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.IsManipulationEnabled" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsMeasureValid">
      <summary>Gets a value indicating whether the current size returned by layout measure is valid. </summary>
      <returns>true if the measure pass of layout returned a valid and current value; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsMouseCaptured">
      <summary>Gets a value indicating whether the mouse is captured to this element.  </summary>
      <returns>true if the element has mouse capture; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.UIElement.IsMouseCapturedChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.IsMouseCapturedProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsMouseCaptureWithin">
      <summary>Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree. </summary>
      <returns>true if this element or a contained element has mouse capture; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.UIElement.IsMouseCaptureWithinChanged">
      <summary>Occurs when the value of the <see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" /> changes on this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement.IsMouseCaptureWithinProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsMouseDirectlyOver">
      <summary>Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.  </summary>
      <returns>true if the mouse pointer is over the same element result as a hit test; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.UIElement.IsMouseDirectlyOverChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.IsMouseDirectlyOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsMouseOver">
      <summary>Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).  </summary>
      <returns>true if mouse pointer is over the element or its child elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.UIElement.IsMouseOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsMouseOver" /> dependency property.  </summary>
      <returns>The <see cref="P:System.Windows.UIElement.IsMouseOver" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsStylusCaptured">
      <summary>Gets a value indicating whether the stylus is captured by this element.  </summary>
      <returns>true if the element has stylus capture; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.UIElement.IsStylusCapturedChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.IsStylusCapturedProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsStylusCaptureWithin">
      <summary>Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree. </summary>
      <returns>true if this element or a contained element has stylus capture; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.UIElement.IsStylusCaptureWithinChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.IsStylusCaptureWithinProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsStylusDirectlyOver">
      <summary>Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.  </summary>
      <returns>true if the stylus pointer is over the same element result as a hit test; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.UIElement.IsStylusDirectlyOverChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.IsStylusDirectlyOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsStylusOver">
      <summary> Gets a value indicating whether the stylus cursor is located over this element (including visual child elements).  </summary>
      <returns>true if stylus cursor is over the element or its child elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.UIElement.IsStylusOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsStylusOver" /> dependency property.  </summary>
      <returns>The <see cref="P:System.Windows.UIElement.IsStylusOver" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsVisible">
      <summary>Gets a value indicating whether this element is visible in the user interface (UI).  </summary>
      <returns>true if the element is visible; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.UIElement.IsVisibleChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsVisible" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.IsVisibleProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsVisible" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.UIElement.IsVisible" /> dependency property identifier.</returns>
    </member>
    <member name="E:System.Windows.UIElement.KeyDown">
      <summary>Occurs when a key is pressed while focus is on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.KeyDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.KeyDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.KeyDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.KeyUp">
      <summary>Occurs when a key is released while focus is on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.KeyUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.KeyUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.KeyUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.LayoutUpdated">
      <summary>Occurs when the layout of the various visual elements associated with the current <see cref="T:System.Windows.Threading.Dispatcher" /> changes. </summary>
    </member>
    <member name="E:System.Windows.UIElement.LostFocus">
      <summary>Occurs when this element loses logical focus. </summary>
    </member>
    <member name="F:System.Windows.UIElement.LostFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.LostFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.LostFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.LostKeyboardFocus">
      <summary>Occurs when the keyboard is no longer focused on this element,. </summary>
    </member>
    <member name="F:System.Windows.UIElement.LostKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.LostKeyboardFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.LostKeyboardFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.LostMouseCapture">
      <summary>Occurs when this element loses mouse capture. </summary>
    </member>
    <member name="F:System.Windows.UIElement.LostMouseCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.LostMouseCapture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.LostMouseCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.LostStylusCapture">
      <summary>Occurs when this element loses stylus capture. </summary>
    </member>
    <member name="F:System.Windows.UIElement.LostStylusCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.LostStylusCapture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.LostStylusCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.LostTouchCapture">
      <summary>Occurs when this element loses a touch capture. </summary>
    </member>
    <member name="F:System.Windows.UIElement.LostTouchCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.LostTouchCapture" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.LostTouchCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.ManipulationBoundaryFeedback">
      <summary>Occurs when the manipulation encounters a boundary.</summary>
    </member>
    <member name="F:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event.</summary>
    </member>
    <member name="E:System.Windows.UIElement.ManipulationCompleted">
      <summary>Occurs when a manipulation and inertia on the <see cref="T:System.Windows.UIElement" /> object is complete.</summary>
    </member>
    <member name="F:System.Windows.UIElement.ManipulationCompletedEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.ManipulationDelta">
      <summary>Occurs when the input device changes position during a manipulation. </summary>
    </member>
    <member name="F:System.Windows.UIElement.ManipulationDeltaEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.ManipulationInertiaStarting">
      <summary>Occurs when the input device loses contact with the <see cref="T:System.Windows.UIElement" /> object during a manipulation and inertia begins.</summary>
    </member>
    <member name="F:System.Windows.UIElement.ManipulationInertiaStartingEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.ManipulationStarted">
      <summary>Occurs when an input device begins a manipulation on the <see cref="T:System.Windows.UIElement" /> object.</summary>
    </member>
    <member name="F:System.Windows.UIElement.ManipulationStartedEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.ManipulationStarted" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.ManipulationStarted" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.ManipulationStarting">
      <summary>Occurs when the manipulation processor is first created. </summary>
    </member>
    <member name="F:System.Windows.UIElement.ManipulationStartingEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.ManipulationStarting" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.ManipulationStarting" /> routed event.</returns>
    </member>
    <member name="M:System.Windows.UIElement.Measure(System.Windows.Size)">
      <summary>Updates the <see cref="P:System.Windows.UIElement.DesiredSize" /> of a <see cref="T:System.Windows.UIElement" />. Parent elements call this method from their own <see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" /> implementations to form a recursive layout update. Calling this method constitutes the first pass (the "Measure" pass) of a layout update. </summary>
      <param name="availableSize">The available space that a parent element can allocate a child element. A child element can request a larger space than what is available; the provided size might be accommodated if scrolling is possible in the content model for the current element.</param>
    </member>
    <member name="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
      <summary>When overridden in a derived class, provides measurement logic for sizing this element properly, with consideration of the size of any child element content. </summary>
      <returns>The desired size of this element in layout.</returns>
      <param name="availableSize">The available size that the parent element can allocate for the child.</param>
    </member>
    <member name="E:System.Windows.UIElement.MouseDown">
      <summary>Occurs when any mouse button is pressed while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement.MouseDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.MouseDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.MouseEnter">
      <summary>Occurs when the mouse pointer enters the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.MouseEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseEnter" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.MouseEnter" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.MouseLeave">
      <summary>Occurs when the mouse pointer leaves the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.MouseLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseLeave" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.MouseLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.MouseLeftButtonDown">
      <summary>Occurs when the left mouse button is pressed while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.MouseLeftButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.MouseLeftButtonUp">
      <summary>Occurs when the left mouse button is released while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.MouseLeftButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.MouseMove">
      <summary>Occurs when the mouse pointer moves while over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.MouseMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.MouseMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.MouseRightButtonDown">
      <summary>Occurs when the right mouse button is pressed while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.MouseRightButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.MouseRightButtonUp">
      <summary>Occurs when the right mouse button is released while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.MouseRightButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.MouseUp">
      <summary>Occurs when any mouse button is released over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement.MouseUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.MouseUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.MouseWheel">
      <summary>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.MouseWheelEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseWheel" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.MouseWheel" /> routed event.</returns>
    </member>
    <member name="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)">
      <summary>Attempts to move focus from this element to another element. The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element. </summary>
      <returns>true if the requested traversal was performed; otherwise, false. </returns>
      <param name="request">A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
      <summary>Provides class handling for when an access key that is meaningful for this element is invoked. </summary>
      <param name="e">The event data to the access key event. The event data reports which key was invoked, and indicate whether the <see cref="T:System.Windows.Input.AccessKeyManager" /> object that controls the sending of these events also sent this access key invocation to other elements.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)">
      <summary>Supports layout behavior when a child element is resized. </summary>
      <param name="child">The child element that is being resized.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnCreateAutomationPeer">
      <summary>Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations for the Windows Presentation Foundation (WPF) infrastructure.</summary>
      <returns>The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation.</returns>
    </member>
    <member name="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragLeave" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragOver" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.GiveFeedback" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.UIElement.GotFocus" /> routed event by using the event data provided. </summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data. This event data must contain the identifier for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.GotTouchCapture" /> routed event that occurs when a touch is captured to this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked just before the <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> event is raised by this element. Implement this method to add class handling for this event. </summary>
      <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusCapturedChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.UIElement.LostFocus" /> routed event by using the event data that is provided. </summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data. This event data must contain the identifier for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.LostTouchCapture" /> routed event that occurs when this element loses a touch capture .</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
      <summary>Called when the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event occurs.</summary>
      <param name="e">The data for the event. </param>
    </member>
    <member name="M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)">
      <summary>Called when the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)">
      <summary>Called when the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)">
      <summary>Called when the <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)">
      <summary>Called when the <see cref="E:System.Windows.UIElement.ManipulationStarted" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.ManipulationStarting" /> routed event that occurs when the manipulation processor is first created. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.ManipulationStartingEventArgs" />  that contains the event data. </param>
    </member>
    <member name="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was pressed.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was released.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was pressed.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was released.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the mouse button was released.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDrop" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that one or more mouse buttons were pressed.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was pressed.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was released.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was pressed.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was released.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that one or more mouse buttons were released.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> routed event that occurs when a touch presses this element. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> routed event that occurs when a touch moves while inside this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> routed event that occurs when a touch is released inside this element. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)">
      <summary>When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing. </summary>
      <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
      <summary>When overridden in a derived class, participates in rendering operations that are directed by the layout system. This method is invoked after layout update, and before rendering, if the element's <see cref="P:System.Windows.UIElement.RenderSize" /> has changed as a result of layout update. </summary>
      <param name="info">The packaged parameters (<see cref="T:System.Windows.SizeChangedInfo" />), which includes old and new sizes, and which dimension actually changes.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> attached event is raised by this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> attached event is raised by this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.TouchDown" /> routed event that occurs when a touch presses inside this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.TouchEnter" /> routed event that occurs when a touch moves from outside to inside the bounds of this element. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.TouchLeave" /> routed event that occurs when a touch moves from inside to outside the bounds of this <see cref="T:System.Windows.UIElement" />. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.TouchMove" /> routed event that occurs when a touch moves while inside this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.TouchUp" /> routed event that occurs when a touch is released inside this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)">
      <summary>Invoked when the parent element of this <see cref="T:System.Windows.UIElement" /> reports a change to its underlying visual parent.</summary>
      <param name="oldParent">The previous parent. This may be provided as null if the <see cref="T:System.Windows.DependencyObject" /> did not have a parent element previously.</param>
    </member>
    <member name="P:System.Windows.UIElement.Opacity">
      <summary>Gets or sets the opacity factor applied to the entire <see cref="T:System.Windows.UIElement" /> when it is rendered in the user interface (UI).  </summary>
      <returns>The opacity factor. Default opacity is 1.0. Expected values are between 0.0 and 1.0.</returns>
    </member>
    <member name="P:System.Windows.UIElement.OpacityMask">
      <summary>Gets or sets an opacity mask, as a <see cref="T:System.Windows.Media.Brush" /> implementation that is applied to any alpha-channel masking for the rendered content of this element.  </summary>
      <returns>The brush to use for opacity masking.</returns>
    </member>
    <member name="F:System.Windows.UIElement.OpacityMaskProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.OpacityMask" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.OpacityMask" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.UIElement.OpacityProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.Opacity" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.Opacity" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.PersistId">
      <summary>Gets a value that uniquely identifies this element. </summary>
      <returns>The unique identifier for this element.</returns>
    </member>
    <member name="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
      <summary>When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</summary>
      <returns>The element that would have received focus if <see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> were actually invoked.</returns>
      <param name="direction">The direction of the requested focus traversal.</param>
    </member>
    <member name="E:System.Windows.UIElement.PreviewDragEnter">
      <summary>Occurs when the input system reports an underlying drag event with this element as the drag target. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewDragEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewDragEnter" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewDragEnter" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewDragLeave">
      <summary>Occurs when the input system reports an underlying drag event with this element as the drag origin. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewDragLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewDragLeave" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewDragLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewDragOver">
      <summary>Occurs when the input system reports an underlying drag event with this element as the potential drop target. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewDragOverEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewDragOver" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewDragOver" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewDrop">
      <summary>Occurs when the input system reports an underlying drop event with this element as the drop target. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewDropEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewDrop" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewDrop" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewGiveFeedback">
      <summary>Occurs when a drag-and-drop operation is started. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewGiveFeedbackEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
      <summary>Occurs when the keyboard is focused on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewKeyDown">
      <summary>Occurs when a key is pressed while focus is on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewKeyDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewKeyDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewKeyDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewKeyUp">
      <summary>Occurs when a key is released while focus is on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewKeyUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewKeyUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewKeyUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
      <summary>Occurs when the keyboard is no longer focused on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewMouseDown">
      <summary>Occurs when any mouse button is pressed while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewMouseDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewMouseDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
      <summary>Occurs when the left mouse button is pressed while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
      <summary>Occurs when the left mouse button is released while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewMouseMove">
      <summary>Occurs when the mouse pointer moves while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewMouseMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewMouseMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
      <summary>Occurs when the right mouse button is pressed while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
      <summary>Occurs when the right mouse button is released while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewMouseUp">
      <summary>Occurs when any mouse button is released while the mouse pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewMouseUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewMouseUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewMouseWheel">
      <summary>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewMouseWheelEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseWheel" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewMouseWheel" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewQueryContinueDrag">
      <summary>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewQueryContinueDragEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewStylusButtonDown">
      <summary>Occurs when the stylus button is pressed while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewStylusButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewStylusButtonUp">
      <summary>Occurs when the stylus button is released while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewStylusButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewStylusDown">
      <summary>Occurs when the stylus touches the digitizer while it is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewStylusDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewStylusDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewStylusInAirMove">
      <summary>Occurs when the stylus moves over an element without actually touching the digitizer. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewStylusInRange">
      <summary>Occurs when the stylus is close enough to the digitizer to be detected, while over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewStylusInRangeEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusInRange" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewStylusInRange" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewStylusMove">
      <summary>Occurs when the stylus moves while over the element. The stylus must move while being detected by the digitizer to raise this event, otherwise, <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> is raised instead.</summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewStylusMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewStylusMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewStylusOutOfRange">
      <summary>Occurs when the stylus is too far from the digitizer to be detected. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewStylusSystemGesture">
      <summary>Occurs when a user performs one of several stylus gestures.</summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewStylusUp">
      <summary>Occurs when the user raises the stylus off the digitizer while the stylus is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewStylusUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewStylusUp" /> routed event. </returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewTextInput">
      <summary>Occurs when this element gets text in a device-independent manner. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewTextInputEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewTextInput" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewTextInput" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewTouchDown">
      <summary>Occurs when a finger touches the screen while the finger is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewTouchDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewTouchMove">
      <summary>Occurs when a finger moves on the screen while the finger is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewTouchMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewTouchUp">
      <summary>Occurs when a finger is raised off of the screen while the finger is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewTouchUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.QueryContinueDrag">
      <summary>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation. </summary>
    </member>
    <member name="F:System.Windows.UIElement.QueryContinueDragEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.QueryContinueDrag" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.QueryContinueDrag" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.QueryCursor">
      <summary>Occurs when the cursor is requested to display. This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position. </summary>
    </member>
    <member name="F:System.Windows.UIElement.QueryCursorEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.QueryCursor" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.QueryCursor" /> routed event.</returns>
    </member>
    <member name="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)">
      <summary>Raises a specific routed event. The <see cref="T:System.Windows.RoutedEvent" /> to be raised is identified within the <see cref="T:System.Windows.RoutedEventArgs" /> instance that is provided (as the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of that event data). </summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data and also identifies the event to raise. </param>
    </member>
    <member name="M:System.Windows.UIElement.ReleaseAllTouchCaptures">
      <summary>Releases all captured touch devices from this element.</summary>
    </member>
    <member name="M:System.Windows.UIElement.ReleaseMouseCapture">
      <summary> Releases the mouse capture, if this element held the capture. </summary>
    </member>
    <member name="M:System.Windows.UIElement.ReleaseStylusCapture">
      <summary> Releases the stylus device capture, if this element held the capture. </summary>
    </member>
    <member name="M:System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)">
      <summary>Attempts to release the specified touch device from this element.</summary>
      <returns>true if the touch device is released; otherwise, false.</returns>
      <param name="touchDevice">The device to release. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="touchDevice" /> is null.</exception>
    </member>
    <member name="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
      <summary> Removes the specified routed event handler from this element. </summary>
      <param name="routedEvent">The identifier of the routed event for which the handler is attached.</param>
      <param name="handler">The specific handler implementation to remove from the event handler collection on this element.</param>
    </member>
    <member name="P:System.Windows.UIElement.RenderSize">
      <summary>Gets (or sets, but see Remarks) the final render size of this element. </summary>
      <returns>The rendered size for this element.</returns>
    </member>
    <member name="P:System.Windows.UIElement.RenderTransform">
      <summary>Gets or sets transform information that affects the rendering position of this element.  </summary>
      <returns>Describes the specifics of the desired render transform. The default is <see cref="P:System.Windows.Media.Transform.Identity" />.</returns>
    </member>
    <member name="P:System.Windows.UIElement.RenderTransformOrigin">
      <summary>Gets or sets the center point of any possible render transform declared by <see cref="P:System.Windows.UIElement.RenderTransform" />, relative to the bounds of the element.  </summary>
      <returns>The value that declares the render transform. The default value is a <see cref="T:System.Windows.Point" /> with coordinates (0,0). </returns>
    </member>
    <member name="F:System.Windows.UIElement.RenderTransformOriginProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.RenderTransformOrigin" /> dependency property.  </summary>
      <returns>The <see cref="P:System.Windows.UIElement.RenderTransformOrigin" /> dependency property identifier.</returns>
    </member>
    <member name="F:System.Windows.UIElement.RenderTransformProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.RenderTransform" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.RenderTransform" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.UIElement.ShouldSerializeCommandBindings">
      <summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement.CommandBindings" /> property on instances of this class.</summary>
      <returns>true if the <see cref="P:System.Windows.UIElement.CommandBindings" /> property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.UIElement.ShouldSerializeInputBindings">
      <summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement.InputBindings" /> property on instances of this class.</summary>
      <returns>true if the <see cref="P:System.Windows.UIElement.InputBindings" /> property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.UIElement.SnapsToDevicePixels">
      <summary>Gets or sets a value that determines whether rendering for this element should use device-specific pixel settings during rendering.  </summary>
      <returns>true if the element should render in accordance to device pixels; otherwise, false. The default as declared on <see cref="T:System.Windows.UIElement" /> is false.</returns>
    </member>
    <member name="F:System.Windows.UIElement.SnapsToDevicePixelsProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.SnapsToDevicePixels" /> dependency property.  </summary>
      <returns>The <see cref="P:System.Windows.UIElement.SnapsToDevicePixels" /> dependency property identifier.</returns>
    </member>
    <member name="E:System.Windows.UIElement.StylusButtonDown">
      <summary>Occurs when the stylus button is pressed while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement.StylusButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.StylusButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.StylusButtonUp">
      <summary>Occurs when the stylus button is released while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement.StylusButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.StylusButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.StylusDown">
      <summary>Occurs when the stylus touches the digitizer while the stylus is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.StylusDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.StylusDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.StylusEnter">
      <summary>Occurs when the stylus enters the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.StylusEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusEnter" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.StylusEnter" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.StylusInAirMove">
      <summary>Occurs when the stylus moves over an element without actually touching the digitizer. </summary>
    </member>
    <member name="F:System.Windows.UIElement.StylusInAirMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusInAirMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.StylusInAirMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.StylusInRange">
      <summary>Occurs when the stylus is close enough to the digitizer to be detected, while over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.StylusInRangeEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusInRange" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.StylusInRange" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.StylusLeave">
      <summary>Occurs when the stylus leaves the bounds of the element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.StylusLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusLeave" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.StylusLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.StylusMove">
      <summary>Occurs when the stylus moves over this element. The stylus must move while on the digitizer to raise this event. Otherwise, <see cref="E:System.Windows.UIElement.StylusInAirMove" /> is raised instead.</summary>
    </member>
    <member name="F:System.Windows.UIElement.StylusMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.StylusMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.StylusOutOfRange">
      <summary>Occurs when the stylus is too far from the digitizer to be detected, while over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.StylusOutOfRangeEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusOutOfRange" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.StylusOutOfRange" /> routed event.</returns>
    </member>
    <member name="P:System.Windows.UIElement.StylusPlugIns">
      <summary>Gets a collection of all stylus plug-in (customization) objects associated with this element. </summary>
      <returns>The collection of stylus plug-ins, as a specialized collection.</returns>
    </member>
    <member name="E:System.Windows.UIElement.StylusSystemGesture">
      <summary>Occurs when a user performs one of several stylus gestures.</summary>
    </member>
    <member name="F:System.Windows.UIElement.StylusSystemGestureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusSystemGesture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.StylusSystemGesture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.StylusUp">
      <summary>Occurs when the user raises the stylus off the digitizer while it is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.StylusUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.StylusUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.TextInput">
      <summary>Occurs when this element gets text in a device-independent manner. </summary>
    </member>
    <member name="F:System.Windows.UIElement.TextInputEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.TextInput" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.TextInput" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.TouchDown">
      <summary>Occurs when a finger touches the screen while the finger is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.TouchDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.TouchDown" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.TouchDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.TouchEnter">
      <summary>Occurs when a touch moves from outside to inside the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.TouchEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.TouchEnter" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.TouchEnter" /> routed event.</returns>
    </member>
    <member name="P:System.Windows.UIElement.TouchesCaptured">
      <summary>Gets all touch devices that are captured to this element.</summary>
      <returns>An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element.</returns>
    </member>
    <member name="P:System.Windows.UIElement.TouchesCapturedWithin">
      <summary>Gets all touch devices that are captured to this element or any child elements in its visual tree. </summary>
      <returns>An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element or any child elements in its visual tree.</returns>
    </member>
    <member name="P:System.Windows.UIElement.TouchesDirectlyOver">
      <summary>Gets all touch devices that are over this element.</summary>
      <returns>An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element.</returns>
    </member>
    <member name="P:System.Windows.UIElement.TouchesOver">
      <summary>Gets all touch devices that are over this element or any child elements in its visual tree.</summary>
      <returns>An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element or any child elements in its visual tree.</returns>
    </member>
    <member name="E:System.Windows.UIElement.TouchLeave">
      <summary>Occurs when a touch moves from inside to outside the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.TouchLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.TouchLeave" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.TouchLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.TouchMove">
      <summary>Occurs when a finger moves on the screen while the finger is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement.TouchMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.TouchMove" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.TouchMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.TouchUp">
      <summary>Occurs when a finger is raised off of the screen while the finger is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.TouchUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.TouchUp" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.TouchUp" /> routed event.</returns>
    </member>
    <member name="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)">
      <summary>Translates a point relative to this element to coordinates that are relative to the specified element. </summary>
      <returns>A point value, now relative to the target element rather than this source element.</returns>
      <param name="point">The point value, as relative to this element.</param>
      <param name="relativeTo">The element to translate the given point into.</param>
    </member>
    <member name="P:System.Windows.UIElement.Uid">
      <summary>Gets or sets the Uid for this element.  </summary>
      <returns>A string that the Uid for this element.</returns>
    </member>
    <member name="F:System.Windows.UIElement.UidProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.Uid" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.Uid" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.UIElement.UpdateLayout">
      <summary>Ensures that all visual child elements of this element are properly updated for layout. </summary>
    </member>
    <member name="P:System.Windows.UIElement.Visibility">
      <summary>Gets or sets the user interface (UI) visibility of this element.  </summary>
      <returns>A value of the enumeration. The default value is <see cref="F:System.Windows.Visibility.Visible" />.</returns>
    </member>
    <member name="F:System.Windows.UIElement.VisibilityProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.Visibility" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.Visibility" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.UIElement3D">
      <summary>
        <see cref="T:System.Windows.UIElement3D" /> is a base class for WPF core level implementations building on Windows Presentation Foundation (WPF) elements and basic presentation characteristics. </summary>
    </member>
    <member name="M:System.Windows.UIElement3D.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.UIElement3D" /> class. </summary>
    </member>
    <member name="M:System.Windows.UIElement3D.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
      <summary>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. </summary>
      <param name="routedEvent">An identifier for the routed event to be handled.</param>
      <param name="handler">A reference to the handler implementation.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
      <summary>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. Specify <paramref name="handledEventsToo" /> as true to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route. </summary>
      <param name="routedEvent">An identifier for the routed event to be handled.</param>
      <param name="handler">A reference to the handler implementation.</param>
      <param name="handledEventsToo">true to register the handler such that it is invoked even when the routed event is marked handled in its event data; false to register the handler with the default condition that it will not be invoked if the routed event is already marked handled. The default is false.Do not routinely ask to rehandle a routed event. For more information, see Remarks.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
      <summary>Adds handlers to the specified <see cref="T:System.Windows.EventRoute" /> for the current <see cref="T:System.Windows.UIElement3D" /> event handler collection.</summary>
      <param name="route">The event route that handlers are added to.</param>
      <param name="e">The event data that is used to add the handlers. This method uses the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of the event data to create the handlers. </param>
    </member>
    <member name="P:System.Windows.UIElement3D.AllowDrop">
      <summary>Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation.  </summary>
      <returns>true if this element can be used as the target of a drag-and-drop operation; otherwise, false. The default value is false.     </returns>
    </member>
    <member name="F:System.Windows.UIElement3D.AllowDropProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.AllowDrop" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.AllowDrop" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.AreAnyTouchesCaptured">
      <summary>Gets a value that indicates whether at least one touch is captured to this element.</summary>
      <returns>true if at least one touch is captured to this element; otherwise, false. </returns>
    </member>
    <member name="F:System.Windows.UIElement3D.AreAnyTouchesCapturedProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesCaptured" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesCaptured" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.AreAnyTouchesCapturedWithin">
      <summary>Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.</summary>
      <returns>true if at least one touch is captured to this element or any child elements in its visual tree; otherwise, false. </returns>
    </member>
    <member name="F:System.Windows.UIElement3D.AreAnyTouchesCapturedWithinProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesCapturedWithin" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesCapturedWithin" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.AreAnyTouchesDirectlyOver">
      <summary>Gets a value that indicates whether at least one touch is pressed over this element.</summary>
      <returns>true if at least one touch is pressed over this element; otherwise, false. </returns>
    </member>
    <member name="F:System.Windows.UIElement3D.AreAnyTouchesDirectlyOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesDirectlyOver" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesDirectlyOver" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.AreAnyTouchesOver">
      <summary>Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree. </summary>
      <returns>true if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, false. </returns>
    </member>
    <member name="F:System.Windows.UIElement3D.AreAnyTouchesOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesOver" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesOver" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.UIElement3D.CaptureMouse">
      <summary>Attempts to force capture of the mouse to this element. </summary>
      <returns>true if the mouse is successfully captured; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.UIElement3D.CaptureStylus">
      <summary> Attempts to force capture of the stylus to this element. </summary>
      <returns>true if the stylus was successfully captured; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.UIElement3D.CaptureTouch(System.Windows.Input.TouchDevice)">
      <summary>Attempts to force capture of a touch to this element.</summary>
      <returns>true if the specified touch is captured to this element; otherwise, false. </returns>
      <param name="touchDevice">The device to capture.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="touchDevice" /> is null.</exception>
    </member>
    <member name="P:System.Windows.UIElement3D.CommandBindings">
      <summary>Gets a collection of <see cref="T:System.Windows.Input.CommandBinding" /> objects associated with this element. </summary>
      <returns>The collection of all <see cref="T:System.Windows.Input.CommandBinding" /> objects.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.DragEnter">
      <summary>Occurs when the input system reports an underlying drag event with this element as the drag target. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.DragEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.DragEnter" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.DragEnter" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.DragLeave">
      <summary>Occurs when the input system reports an underlying drag event with this element as the drag origin. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.DragLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.DragLeave" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.DragLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.DragOver">
      <summary>Occurs when the input system reports an underlying drag event with this element as the potential drop target. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.DragOverEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.DragOver" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.DragOver" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.Drop">
      <summary>Occurs when the input system reports an underlying drop event with this element as the drop target. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.DropEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.Drop" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.Drop" /> routed event.</returns>
    </member>
    <member name="M:System.Windows.UIElement3D.Focus">
      <summary> Attempts to set the logical focus on this element. </summary>
      <returns>true if both logical and keyboard focus were set to this element; false if only logical focus was set.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.Focusable">
      <summary>Gets or sets a value that indicates whether the element can receive focus.  </summary>
      <returns>true if the element is focusable; otherwise false. The default is false, but see Remarks.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.FocusableChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement3D.Focusable" /> property changes.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.FocusableProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.Focusable" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.Focusable" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.UIElement3D.GetUIParentCore">
      <summary>When overridden in a derived class, returns an alternative user interface (UI) parent for this element if no visual parent exists. </summary>
      <returns>An object, if implementation of a derived class has an alternate parent connection to report.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.GiveFeedback">
      <summary>Occurs when the input system reports an underlying drag-and-drop event that involves this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.GiveFeedbackEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.GiveFeedback" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.GiveFeedback" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.GotFocus">
      <summary>Occurs when this element gets logical focus. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.GotFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.GotFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.GotFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.GotKeyboardFocus">
      <summary>Occurs when the keyboard is focused on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.GotKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.GotKeyboardFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.GotKeyboardFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.GotMouseCapture">
      <summary>Occurs when this element captures the mouse. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.GotMouseCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.GotMouseCapture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.GotMouseCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.GotStylusCapture">
      <summary>Occurs when this element captures the stylus. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.GotStylusCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.GotStylusCapture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.GotStylusCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.GotTouchCapture">
      <summary>Occurs when a touch is captured to this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.GotTouchCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.GotTouchCapture" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.GotTouchCapture" /> routed event.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.InputBindings">
      <summary> Gets the collection of input bindings associated with this element. </summary>
      <returns>The collection of input bindings.</returns>
    </member>
    <member name="M:System.Windows.UIElement3D.InvalidateModel">
      <summary>Invalidates the model that represents the element.</summary>
    </member>
    <member name="P:System.Windows.UIElement3D.IsEnabled">
      <summary>Gets or sets a value indicating whether this element is enabled in the user interface (UI).  </summary>
      <returns>true if the element is enabled; otherwise, false. The default value is true.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.IsEnabledChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsEnabled" /> property on this element changes. </summary>
    </member>
    <member name="P:System.Windows.UIElement3D.IsEnabledCore">
      <summary>Gets a value that becomes the return value of <see cref="P:System.Windows.UIElement3D.IsEnabled" /> in derived classes. </summary>
      <returns>true if the element is enabled; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.UIElement3D.IsEnabledProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsEnabled" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.IsEnabled" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsFocused">
      <summary>Gets a value that determines whether this element has logical focus.  </summary>
      <returns>true if this element has logical focus; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.UIElement3D.IsFocusedProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsFocused" /> dependency property.  </summary>
      <returns>The <see cref="P:System.Windows.UIElement3D.IsFocused" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsHitTestVisible">
      <summary>Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content. </summary>
      <returns>true if this element could be returned as a hit test result from at least one point; otherwise, false. The default value is true.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.IsHitTestVisibleChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsHitTestVisible" /> dependency property changes on this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.IsHitTestVisibleProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsHitTestVisible" />  dependency property. </summary>
      <returns>The <see cref="P:System.Windows.UIElement3D.IsHitTestVisible" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsInputMethodEnabled">
      <summary>Gets a value indicating whether an input method system, such as an Input Method Editor (IME),  is enabled for processing the input to this element. </summary>
      <returns>true if an input method is active; otherwise, false. The default value of the underlying attached property is true; however, this will be influenced by the actual state of input methods at runtime.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsKeyboardFocused">
      <summary>Gets a value indicating whether this element has keyboard focus.  </summary>
      <returns>true if this element has keyboard focus; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.IsKeyboardFocusedChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsKeyboardFocused" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.IsKeyboardFocusedProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsKeyboardFocused" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.IsKeyboardFocused" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsKeyboardFocusWithin">
      <summary>Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.  </summary>
      <returns>true if keyboard focus is on the element or its child elements; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsKeyboardFocusWithin" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.IsKeyboardFocusWithinProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsKeyboardFocusWithin" /> dependency property.  </summary>
      <returns>The <see cref="P:System.Windows.UIElement3D.IsKeyboardFocusWithin" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsMouseCaptured">
      <summary>Gets a value indicating whether the mouse is captured to this element.  </summary>
      <returns>true if the element has mouse capture; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.IsMouseCapturedChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsMouseCaptured" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.IsMouseCapturedProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsMouseCaptured" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.IsMouseCaptured" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsMouseCaptureWithin">
      <summary>Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree. </summary>
      <returns>true if this element or a contained element has mouse capture; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.IsMouseCaptureWithinChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsMouseCaptureWithin" /> property changes on this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.IsMouseCaptureWithinProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsMouseCaptureWithin" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.IsMouseCaptureWithin" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsMouseDirectlyOver">
      <summary>Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.  </summary>
      <returns>true if the mouse pointer is over the same element result as a hit test; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.IsMouseDirectlyOverChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsMouseDirectlyOver" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.IsMouseDirectlyOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsMouseDirectlyOver" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.IsMouseDirectlyOver" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsMouseOver">
      <summary>Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).  </summary>
      <returns>true if mouse pointer is over the element or its child elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.UIElement3D.IsMouseOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsMouseOver" /> dependency property.  </summary>
      <returns>The <see cref="P:System.Windows.UIElement3D.IsMouseOver" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsStylusCaptured">
      <summary>Gets a value indicating whether the stylus is captured by this element.  </summary>
      <returns>true if the element has stylus capture; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.IsStylusCapturedChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsStylusCaptured" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.IsStylusCapturedProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsStylusCaptured" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.IsStylusCaptured" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsStylusCaptureWithin">
      <summary>Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree. </summary>
      <returns>true if this element or a contained element has stylus capture; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.IsStylusCaptureWithinChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsStylusCaptureWithin" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.IsStylusCaptureWithinProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsStylusCaptureWithin" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.IsStylusCaptureWithin" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsStylusDirectlyOver">
      <summary>Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.  </summary>
      <returns>true if the stylus pointer is over the same element result as a hit test; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.IsStylusDirectlyOverChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsStylusDirectlyOver" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.IsStylusDirectlyOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsStylusDirectlyOver" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.IsStylusDirectlyOver" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsStylusOver">
      <summary> Gets a value indicating whether the stylus cursor is located over this element (including visual child elements).  </summary>
      <returns>true if stylus cursor is over the element or its child elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.UIElement3D.IsStylusOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsStylusOver" /> dependency property.  </summary>
      <returns>The <see cref="P:System.Windows.UIElement3D.IsStylusOver" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsVisible">
      <summary>Gets a value indicating whether this element is visible in the user interface (UI). </summary>
      <returns>true if the element is visible; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.IsVisibleChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsVisible" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.IsVisibleProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsVisible" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.UIElement3D.IsVisible" /> dependency property identifier.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.KeyDown">
      <summary>Occurs when a key is pressed while the keyboard is focused on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.KeyDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.KeyDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.KeyDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.KeyUp">
      <summary>Occurs when a key is released while the keyboard is focused on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.KeyUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.KeyUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.KeyUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.LostFocus">
      <summary>Occurs when this element loses logical focus. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.LostFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.LostFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.LostFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.LostKeyboardFocus">
      <summary>Occurs when the keyboard is no longer focused on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.LostKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.LostKeyboardFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.LostKeyboardFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.LostMouseCapture">
      <summary>Occurs when this element loses mouse capture. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.LostMouseCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.LostMouseCapture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.LostMouseCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.LostStylusCapture">
      <summary>Occurs when this element loses stylus capture. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.LostStylusCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.LostStylusCapture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.LostStylusCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.LostTouchCapture">
      <summary>Occurs when this element loses a touch capture. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.LostTouchCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.LostTouchCapture" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.LostTouchCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.MouseDown">
      <summary>Occurs when any mouse button is pressed while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.MouseDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.MouseDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.MouseDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.MouseEnter">
      <summary>Occurs when the mouse pointer enters the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.MouseEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.MouseEnter" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.MouseEnter" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.MouseLeave">
      <summary>Occurs when the mouse pointer leaves the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.MouseLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.MouseLeave" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.MouseLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.MouseLeftButtonDown">
      <summary>Occurs when the left mouse button is pressed while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.MouseLeftButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.MouseLeftButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.MouseLeftButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.MouseLeftButtonUp">
      <summary>Occurs when the left mouse button is released while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.MouseLeftButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.MouseLeftButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.MouseLeftButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.MouseMove">
      <summary>Occurs when the mouse pointer moves while over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.MouseMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.MouseMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.MouseMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.MouseRightButtonDown">
      <summary>Occurs when the right mouse button is pressed while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.MouseRightButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.MouseRightButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.MouseRightButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.MouseRightButtonUp">
      <summary>Occurs when the right mouse button is released while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.MouseRightButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.MouseRightButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.MouseRightButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.MouseUp">
      <summary>Occurs when any mouse button is released over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.MouseUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.MouseUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.MouseUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.MouseWheel">
      <summary>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.MouseWheelEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.MouseWheel" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.MouseWheel" /> routed event.</returns>
    </member>
    <member name="M:System.Windows.UIElement3D.MoveFocus(System.Windows.Input.TraversalRequest)">
      <summary>Attempts to move focus from this element to another element. The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element. </summary>
      <returns>true if the requested traversal was performed; otherwise, false. </returns>
      <param name="request">A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
      <summary> Provides class handling for when an access key that is meaningful for this element is invoked. </summary>
      <param name="e">The event data to the access key event. The event data reports which key was invoked, and indicate whether the <see cref="T:System.Windows.Input.AccessKeyManager" /> object that controls the sending of these events also sent this access key invocation to other elements.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnCreateAutomationPeer">
      <summary>Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations for the Windows Presentation Foundation (WPF) infrastructure.</summary>
      <returns>The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation.</returns>
    </member>
    <member name="M:System.Windows.UIElement3D.OnDragEnter(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnDragLeave(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragLeave" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnDragOver(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragOver" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnDrop(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.Drop" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.GiveFeedback" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.UIElement3D.GotFocus" /> routed event by using the event data provided. </summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data. This event data must contain the identifier for the <see cref="E:System.Windows.UIElement3D.GotFocus" /> event.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement3D.GotTouchCapture" /> routed event that occurs when a touch is captured to this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsKeyboardFocusedChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked just before the <see cref="E:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged" /> event is raised by this element. Implement this method to add class handling for this event. </summary>
      <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsMouseCapturedChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsMouseCaptureWithinChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsMouseDirectlyOverChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsStylusCapturedChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsStylusCaptureWithinChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsStylusDirectlyOverChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.UIElement3D.LostFocus" /> routed event by using the event data that is provided. </summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data. This event data must contain the identifier for the <see cref="E:System.Windows.UIElement3D.LostFocus" /> event.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement3D.LostTouchCapture" /> routed event that occurs when this element loses a touch capture.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.MouseLeftButtonDown" /> routed event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was pressed.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.MouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was released.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.MouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was pressed.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.MouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was released.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the mouse button was released.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewDragEnter(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewDragLeave(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewDragOver(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewDrop(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDrop" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that one or more mouse buttons were pressed.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was pressed.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was released.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was pressed.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was released.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that one or more mouse buttons were released.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement3D.PreviewTouchDown" /> routed event that occurs when a touch presses this element. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement3D.PreviewTouchMove" /> routed event that occurs when a touch moves while inside this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement3D.PreviewTouchUp" /> routed event that occurs when a touch is released inside this element. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> attached event is raised by this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> attached event is raised by this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnStylusMove(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnStylusUp(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnTouchDown(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement3D.TouchDown" /> routed event that occurs when a touch presses inside this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnTouchEnter(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement3D.TouchEnter" /> routed event that occurs when a touch moves from outside to inside the bounds of this element. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnTouchLeave(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement3D.TouchLeave" /> routed event that occurs when a touch moves from inside to outside the bounds of this element. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnTouchMove(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement3D.TouchMove" /> routed event that occurs when a touch moves while inside this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnTouchUp(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement3D.TouchUp" /> routed event that occurs when a touch is released inside this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnUpdateModel">
      <summary>Participates in rendering operations when overridden in a derived class.</summary>
    </member>
    <member name="M:System.Windows.UIElement3D.OnVisualParentChanged(System.Windows.DependencyObject)">
      <summary>Invoked when the parent element of this <see cref="T:System.Windows.UIElement3D" /> reports a change to its underlying visual parent.</summary>
      <param name="oldParent">The previous parent. This may be provided as null if the <see cref="T:System.Windows.DependencyObject" /> did not have a parent element previously.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
      <summary>When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</summary>
      <returns>The element that would have received focus if <see cref="M:System.Windows.UIElement3D.MoveFocus(System.Windows.Input.TraversalRequest)" /> were actually invoked.</returns>
      <param name="direction">The direction of the requested focus traversal.</param>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewDragEnter">
      <summary>Occurs when the input system reports an underlying drag event with this element as the drag target. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewDragEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewDragEnter" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewDragEnter" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewDragLeave">
      <summary>Occurs when the input system reports an underlying drag event with this element as the drag origin. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewDragLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewDragLeave" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewDragLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewDragOver">
      <summary>Occurs when the input system reports an underlying drag event with this element as the potential drop target. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewDragOverEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewDragOver" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewDragOver" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewDrop">
      <summary>Occurs when the input system reports an underlying drop event with this element as the drop target. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewDropEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewDrop" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewDrop" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewGiveFeedback">
      <summary>Occurs when a drag-and-drop operation is started. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewGiveFeedbackEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewGiveFeedback" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewGiveFeedback" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewGotKeyboardFocus">
      <summary>Occurs when the keyboard is focused on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewGotKeyboardFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewGotKeyboardFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewKeyDown">
      <summary>Occurs when a key is pressed while the keyboard is focused on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewKeyDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewKeyDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewKeyDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewKeyUp">
      <summary>Occurs when a key is released while the keyboard is focused on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewKeyUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewKeyUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewKeyUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewLostKeyboardFocus">
      <summary>Occurs when the keyboard is no longer focused on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewLostKeyboardFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewLostKeyboardFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewMouseDown">
      <summary>Occurs when any mouse button is pressed while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewMouseDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewMouseDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewMouseLeftButtonDown">
      <summary>Occurs when the left mouse button is pressed while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewMouseLeftButtonUp">
      <summary>Occurs when the left mouse button is released while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewMouseMove">
      <summary>Occurs when the mouse pointer moves while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewMouseMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewMouseMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewMouseRightButtonDown">
      <summary>Occurs when the right mouse button is pressed while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewMouseRightButtonUp">
      <summary>Occurs when the right mouse button is released while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewMouseUp">
      <summary>Occurs when any mouse button is released while the mouse pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewMouseUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewMouseUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewMouseWheel">
      <summary>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewMouseWheelEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseWheel" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewMouseWheel" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewQueryContinueDrag">
      <summary>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewQueryContinueDragEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewQueryContinueDrag" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewQueryContinueDrag" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewStylusButtonDown">
      <summary>Occurs when the stylus button is pressed while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewStylusButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewStylusButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewStylusButtonUp">
      <summary>Occurs when the stylus button is released while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewStylusButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewStylusButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewStylusDown">
      <summary>Occurs when the stylus touches the digitizer while it is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewStylusDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewStylusDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewStylusInAirMove">
      <summary>Occurs when the stylus moves over an element without actually touching the digitizer. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewStylusInAirMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusInAirMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewStylusInAirMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewStylusInRange">
      <summary>Occurs when the stylus is close enough to the digitizer to be detected, while over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewStylusInRangeEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusInRange" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewStylusInRange" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewStylusMove">
      <summary>Occurs when the stylus moves while over the element. The stylus must move while being detected by the digitizer to raise this event, otherwise, <see cref="E:System.Windows.UIElement3D.PreviewStylusInAirMove" /> is raised instead.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewStylusMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewStylusMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewStylusOutOfRange">
      <summary>Occurs when the stylus is too far from the digitizer to be detected. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusOutOfRange" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewStylusOutOfRange" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewStylusSystemGesture">
      <summary>Occurs when a user performs one of several stylus gestures.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewStylusSystemGestureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusSystemGesture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewStylusSystemGesture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewStylusUp">
      <summary>Occurs when the user raises the stylus off the digitizer while the stylus is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewStylusUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewStylusUp" /> routed event. </returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewTextInput">
      <summary>Occurs when this element gets text in a device-independent manner. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewTextInputEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewTextInput" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewTextInput" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewTouchDown">
      <summary>Occurs when a finger touches the screen while the finger is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewTouchDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewTouchDown" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewTouchDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewTouchMove">
      <summary>Occurs when a finger moves on the screen while the finger is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewTouchMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewTouchMove" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewTouchMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewTouchUp">
      <summary>Occurs when a finger is raised off of the screen while the finger is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewTouchUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewTouchUp" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewTouchUp" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.QueryContinueDrag">
      <summary>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.QueryContinueDragEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.QueryContinueDrag" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.QueryContinueDrag" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.QueryCursor">
      <summary>Occurs when the cursor is requested to display. This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.QueryCursorEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.QueryCursor" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.QueryCursor" /> routed event.</returns>
    </member>
    <member name="M:System.Windows.UIElement3D.RaiseEvent(System.Windows.RoutedEventArgs)">
      <summary>Raises a specific routed event. The <see cref="T:System.Windows.RoutedEvent" /> to be raised is identified within the <see cref="T:System.Windows.RoutedEventArgs" /> instance that is provided (as the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of that event data). </summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data and also identifies the event to raise. </param>
    </member>
    <member name="M:System.Windows.UIElement3D.ReleaseAllTouchCaptures">
      <summary>Releases all captured touch devices from this element.</summary>
    </member>
    <member name="M:System.Windows.UIElement3D.ReleaseMouseCapture">
      <summary> Releases the mouse capture, if this element held the capture. </summary>
    </member>
    <member name="M:System.Windows.UIElement3D.ReleaseStylusCapture">
      <summary> Releases the stylus device capture, if this element held the capture. </summary>
    </member>
    <member name="M:System.Windows.UIElement3D.ReleaseTouchCapture(System.Windows.Input.TouchDevice)">
      <summary>Attempts to release the specified touch device from this element.</summary>
      <returns>true if the touch device is released; otherwise, false.</returns>
      <param name="touchDevice">The device to release. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="touchDevice" /> is null.</exception>
    </member>
    <member name="M:System.Windows.UIElement3D.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
      <summary> Removes the specified routed event handler from this element. </summary>
      <param name="routedEvent">The identifier of the routed event for which the handler is attached.</param>
      <param name="handler">The specific handler implementation to remove from the event handler collection on this element.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.ShouldSerializeCommandBindings">
      <summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement3D.CommandBindings" /> property on instances of this class.</summary>
      <returns>true if the <see cref="P:System.Windows.UIElement3D.CommandBindings" /> property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.UIElement3D.ShouldSerializeInputBindings">
      <summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement3D.InputBindings" /> property on instances of this class.</summary>
      <returns>true if the <see cref="P:System.Windows.UIElement3D.InputBindings" /> property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.StylusButtonDown">
      <summary>Occurs when the stylus button is pressed while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.StylusButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.StylusButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.StylusButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.StylusButtonUp">
      <summary>Occurs when the stylus button is released while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.StylusButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.StylusButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.StylusButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.StylusDown">
      <summary>Occurs when the stylus touches the digitizer while the stylus is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.StylusDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.StylusDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.StylusDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.StylusEnter">
      <summary>Occurs when the stylus enters the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.StylusEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.StylusEnter" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.StylusEnter" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.StylusInAirMove">
      <summary>Occurs when the stylus moves over an element without actually touching the digitizer. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.StylusInAirMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.StylusInAirMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.StylusInAirMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.StylusInRange">
      <summary>Occurs when the stylus is close enough to the digitizer to be detected, while over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.StylusInRangeEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.StylusInRange" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.StylusInRange" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.StylusLeave">
      <summary>Occurs when the stylus leaves the bounds of the element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.StylusLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.StylusLeave" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.StylusLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.StylusMove">
      <summary>Occurs when the stylus moves over this element. The stylus must move while on the digitizer to raise this event. Otherwise, <see cref="E:System.Windows.UIElement3D.StylusInAirMove" /> is raised instead.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.StylusMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.StylusMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.StylusMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.StylusOutOfRange">
      <summary>Occurs when the stylus is too far from the digitizer to be detected, while over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.StylusOutOfRangeEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.StylusOutOfRange" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.StylusOutOfRange" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.StylusSystemGesture">
      <summary>Occurs when a user performs one of several stylus gestures.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.StylusSystemGestureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.StylusSystemGesture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.StylusSystemGesture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.StylusUp">
      <summary>Occurs when the user raises the stylus off the digitizer while it is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.StylusUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.StylusUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.StylusUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.TextInput">
      <summary>Occurs when this element gets text in a device-independent manner. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.TextInputEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.TextInput" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.TextInput" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.TouchDown">
      <summary>Occurs when a finger touches the screen while the finger is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.TouchDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.TouchDown" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.TouchDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.TouchEnter">
      <summary>Occurs when a touch moves from outside to inside the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.TouchEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.TouchEnter" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.TouchEnter" /> routed event.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.TouchesCaptured">
      <summary>Gets all touch devices that are captured to this element.</summary>
      <returns>An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.TouchesCapturedWithin">
      <summary>Gets all touch devices that are captured to this element or any child elements in its visual tree. </summary>
      <returns>An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element or any child elements in its visual tree.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.TouchesDirectlyOver">
      <summary>Gets all touch devices that are over this element.</summary>
      <returns>An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.TouchesOver">
      <summary>Gets all touch devices that are over this element or any child elements in its visual tree.</summary>
      <returns>An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element or any child elements in its visual tree.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.TouchLeave">
      <summary>Occurs when a touch moves from inside to outside the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.TouchLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.TouchLeave" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.TouchLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.TouchMove">
      <summary>Occurs when a finger moves on the screen while the finger is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.TouchMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.TouchMove" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.TouchMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.TouchUp">
      <summary>Occurs when a finger is raised off of the screen while the finger is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.TouchUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.TouchUp" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.TouchUp" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.Visibility">
      <summary>Gets or sets the user interface (UI) visibility of this element.  </summary>
      <returns>A value of the enumeration. The default value is <see cref="F:System.Windows.Visibility.Visible" />.</returns>
    </member>
    <member name="F:System.Windows.UIElement3D.VisibilityProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.Visibility" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.Visibility" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.UIPropertyMetadata">
      <summary> Provides property metadata for non-framework properties that do have rendering/user interface impact at the core level. </summary>
    </member>
    <member name="M:System.Windows.UIPropertyMetadata.#ctor">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.UIPropertyMetadata" /> class. </summary>
    </member>
    <member name="M:System.Windows.UIPropertyMetadata.#ctor(System.Object)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.UIPropertyMetadata" /> class, with the specified default value for the property.</summary>
      <param name="defaultValue">The default value of the dependency property, usually provided as a value of some specific type.</param>
    </member>
    <member name="M:System.Windows.UIPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.UIPropertyMetadata" /> class, with the specified PropertyChanged callback. </summary>
      <param name="defaultValue">The default value of the dependency property, usually provided as a value of some specific type.</param>
      <param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
    </member>
    <member name="M:System.Windows.UIPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.UIPropertyMetadata" /> class, with the specified default value and callbacks. </summary>
      <param name="defaultValue">The default value of the dependency property, usually provided as a value of some specific type.</param>
      <param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
      <param name="coerceValueCallback">Reference to a handler implementation that is to be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</param>
    </member>
    <member name="M:System.Windows.UIPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.UIPropertyMetadata" /> class, with the specified default value and callbacks, and a Boolean used to disable animations on the property. </summary>
      <param name="defaultValue">The default value of the dependency property, usually provided as a value of some specific type.</param>
      <param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
      <param name="coerceValueCallback">Reference to a handler implementation that is to be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</param>
      <param name="isAnimationProhibited">Set to true to prevent the property system from animating the property that this metadata is applied to. Such properties will raise run time exceptions if animations of them are attempted. The default is false.</param>
    </member>
    <member name="M:System.Windows.UIPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.UIPropertyMetadata" /> class, with the specified PropertyChanged callback.</summary>
      <param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
    </member>
    <member name="P:System.Windows.UIPropertyMetadata.IsAnimationProhibited">
      <summary> Gets or sets a value declaring whether animations should be disabled on the dependency property where the containing metadata instance is applied. </summary>
      <returns>true indicates that animations are disallowed; false indicates that animations are allowed. The default is false (animations allowed).</returns>
    </member>
    <member name="T:System.Windows.Visibility">
      <summary>Specifies the display state of an element. </summary>
    </member>
    <member name="F:System.Windows.Visibility.Visible">
      <summary>Display the element.</summary>
    </member>
    <member name="F:System.Windows.Visibility.Hidden">
      <summary>Do not display the element, but reserve space for the element in layout.</summary>
    </member>
    <member name="F:System.Windows.Visibility.Collapsed">
      <summary>Do not display the element, and do not reserve space for it in layout.</summary>
    </member>
    <member name="T:System.Windows.Automation.AutomationProperties">
      <summary>Provides a means of getting or setting the value of the associated properties of the instance of the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> element. </summary>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.AcceleratorKey">
      <summary>Gets or sets the accelerator key for the specified element.</summary>
      <returns>The accelerator key for the specified element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.AcceleratorKeyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.AccessKey">
      <summary>Gets or sets the access key for the specified element.</summary>
      <returns>The access key for the specified element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.AccessKeyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.AccessKey" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.AccessKey" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.AutomationId">
      <summary>Gets or set the string that uniquely identifies the specified element.</summary>
      <returns>The string that uniquely identifies the specified element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.AutomationIdProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetAcceleratorKey(System.Windows.DependencyObject)">
      <summary>Gets the <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>A string that contains the accelerator key.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetAccessKey(System.Windows.DependencyObject)">
      <summary>Gets the <see cref="P:System.Windows.Automation.AutomationProperties.AccessKey" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The access key for the specified element.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetAutomationId(System.Windows.DependencyObject)">
      <summary>Gets the <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The UI Automation identifier for the specified element.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetHelpText(System.Windows.DependencyObject)">
      <summary>Gets the <see cref="P:System.Windows.Automation.AutomationProperties.HelpText" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>A string containing the help text for the specified element. The string that is returned generally is the same text that is provided in the tooltip for the control.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetIsColumnHeader(System.Windows.DependencyObject)">
      <summary>Gets the <see cref="P:System.Windows.Automation.AutomationProperties.IsColumnHeader" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>A boolean that indicates whether the specified element is a <see cref="F:System.Windows.Automation.TablePattern.ColumnHeadersProperty" />.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetIsRequiredForForm(System.Windows.DependencyObject)">
      <summary>Gets the <see cref="P:System.Windows.Automation.AutomationProperties.IsRequiredForForm" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>A boolean that indicates whether the specified element is <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsRequiredForForm" />.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetIsRowHeader(System.Windows.DependencyObject)">
      <summary>Gets the <see cref="P:System.Windows.Automation.AutomationProperties.IsRowHeader" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>A boolean that indicates whether the specified element is a <see cref="F:System.Windows.Automation.TablePattern.RowHeadersProperty" />.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetItemStatus(System.Windows.DependencyObject)">
      <summary>Gets the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ItemStatus" /> of the given element.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetItemType(System.Windows.DependencyObject)">
      <summary>Gets the <see cref="P:System.Windows.Automation.AutomationProperties.ItemType" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ItemType" /> of the given element.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetLabeledBy(System.Windows.DependencyObject)">
      <summary>Gets the <see cref="P:System.Windows.Automation.AutomationProperties.LabeledBy" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The element that is targeted by the label. </returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetName(System.Windows.DependencyObject)">
      <summary>Gets the <see cref="P:System.Windows.Automation.AutomationProperties.Name" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The name of the specified element.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.HelpText">
      <summary>Gets or sets the help text for the specified element. The help text generally is the same text that is provided in the tooltip for the control.</summary>
      <returns>The help text for the specified element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.HelpTextProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.HelpText" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.HelpText" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.IsColumnHeader">
      <summary>Gets or sets a value indicating whether the specified element is a column header.</summary>
      <returns>true if the element is a column header; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.IsColumnHeaderProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.IsColumnHeader" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.IsColumnHeader" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.IsRequiredForForm">
      <summary>Gets or sets a value that indicates whether the specified element is required to be filled out on a form.</summary>
      <returns>true if the element is required to be filled out on a form; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.IsRequiredForFormProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.IsRequiredForForm" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.IsRequiredForForm" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.IsRowHeader">
      <summary>Gets or sets a value indicating whether the specified element is a row header.</summary>
      <returns>true if the element is a row header; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.IsRowHeaderProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.IsRowHeader" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.IsRowHeader" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.ItemStatus">
      <summary>Gets or sets a description of the status of an item within an element.</summary>
      <returns>The status of an item within an element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.ItemStatusProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.ItemType">
      <summary>Gets or sets a description of the type of the specified element.</summary>
      <returns>The type of the specified element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.ItemTypeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.ItemType" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.ItemType" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.LabeledBy">
      <summary>Gets or sets the element that contains the text label for the specified element.</summary>
      <returns>The element that contains the text label for the specified element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.LabeledByProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.LabeledBy" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.LabeledBy" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.Name">
      <summary>Gets or sets the name of the element.</summary>
      <returns>The name of the element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.NameProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.Name" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.Name" /> attached property. </returns>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetAcceleratorKey(System.Windows.DependencyObject,System.String)">
      <summary>Sets the <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> on which to set the property.</param>
      <param name="value">The accelerator key value to set.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetAccessKey(System.Windows.DependencyObject,System.String)">
      <summary>Sets the <see cref="P:System.Windows.Automation.AutomationProperties.AccessKey" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> on which to set the property.</param>
      <param name="value">The access key value to set.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetAutomationId(System.Windows.DependencyObject,System.String)">
      <summary>Sets the <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> on which to set the property.</param>
      <param name="value">The UI Automation identifier value to set.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetHelpText(System.Windows.DependencyObject,System.String)">
      <summary>Sets the <see cref="P:System.Windows.Automation.AutomationProperties.HelpText" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> on which to set the property.</param>
      <param name="value">The help text value to set.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetIsColumnHeader(System.Windows.DependencyObject,System.Boolean)">
      <summary>Sets the <see cref="P:System.Windows.Automation.AutomationProperties.IsColumnHeader" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> on which to set the property.</param>
      <param name="value">The value to set; true if the element is meant to be a column header, otherwise false</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetIsRequiredForForm(System.Windows.DependencyObject,System.Boolean)">
      <summary>Sets the <see cref="P:System.Windows.Automation.AutomationProperties.IsRequiredForForm" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> on which to set the property.</param>
      <param name="value">The value to set; true if the element is meant to be required to be filled out on a form, otherwise false.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetIsRowHeader(System.Windows.DependencyObject,System.Boolean)">
      <summary>Sets the <see cref="P:System.Windows.Automation.AutomationProperties.IsRowHeader" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> on which to set the property.</param>
      <param name="value">The value to set; true if the element is meant to be a row header, otherwise false.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetItemStatus(System.Windows.DependencyObject,System.String)">
      <summary>Sets the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> on which to set the property.</param>
      <param name="value">The item status value to set.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetItemType(System.Windows.DependencyObject,System.String)">
      <summary>Sets the <see cref="P:System.Windows.Automation.AutomationProperties.ItemType" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> on which to set the property.</param>
      <param name="value">The item type value to set.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetLabeledBy(System.Windows.DependencyObject,System.Windows.UIElement)">
      <summary>Sets the <see cref="P:System.Windows.Automation.AutomationProperties.LabeledBy" /> attached property.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> on which to set the property.</param>
      <param name="value">The labeled by value to set.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetName(System.Windows.DependencyObject,System.String)">
      <summary>Sets the <see cref="P:System.Windows.Automation.AutomationProperties.Name" /> attached property.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> on which to set the property.</param>
      <param name="value">The name value to set.</param>
    </member>
    <member name="T:System.Windows.Automation.Peers.AutomationControlType">
      <summary>Specifies the <see cref="T:System.Windows.Automation.ControlType" /> that is exposed to the UI Automation client.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Button">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Button" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Calendar">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Calendar" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.CheckBox">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.CheckBox" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ComboBox">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.ComboBox" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Edit">
      <summary>An <see cref="F:System.Windows.Automation.ControlType.Edit" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Hyperlink">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Hyperlink" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Image">
      <summary>An <see cref="F:System.Windows.Automation.ControlType.Image" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ListItem">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.ListItem" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.List">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.List" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Menu">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Menu" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.MenuBar">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.MenuBar" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.MenuItem">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.MenuItem" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ProgressBar">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.ProgressBar" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.RadioButton">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.RadioButton" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ScrollBar">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.ScrollBar" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Slider">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Slider" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Spinner">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Spinner" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.StatusBar">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.StatusBar" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Tab">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Tab" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.TabItem">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.TabItem" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Text">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Text" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ToolBar">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.ToolBar" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ToolTip">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.ToolTip" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Tree">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Tree" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.TreeItem">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.TreeItem" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Custom">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Custom" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Group">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Group" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Thumb">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Thumb" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.DataGrid">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.DataGrid" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.DataItem">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.DataItem" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Document">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Document" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.SplitButton">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.SplitButton" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Window">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Window" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Pane">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Pane" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Header">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Header" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.HeaderItem">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.HeaderItem" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Table">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Table" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.TitleBar">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.TitleBar" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Separator">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Separator" /> control type.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.AutomationEvents">
      <summary>Specifies the event that is raised by the element through the associated <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.ToolTipOpened">
      <summary>
        <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.ToolTipOpenedEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.ToolTipClosed">
      <summary>
        <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.ToolTipClosedEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.MenuOpened">
      <summary>
        <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.MenuOpenedEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.MenuClosed">
      <summary>
        <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.MenuClosedEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.AutomationFocusChanged">
      <summary>
        <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.AutomationFocusChangedEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.InvokePatternOnInvoked">
      <summary>
        <see cref="F:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.SelectionItemPatternOnElementAddedToSelection">
      <summary>
        <see cref="F:System.Windows.Automation.SelectionItemPatternIdentifiers.ElementAddedToSelectionEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.SelectionItemPatternOnElementRemovedFromSelection">
      <summary>
        <see cref="F:System.Windows.Automation.SelectionItemPatternIdentifiers.ElementRemovedFromSelectionEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.SelectionItemPatternOnElementSelected">
      <summary>
        <see cref="F:System.Windows.Automation.SelectionItemPatternIdentifiers.ElementSelectedEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.SelectionPatternOnInvalidated">
      <summary>
        <see cref="F:System.Windows.Automation.SelectionPatternIdentifiers.InvalidatedEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.TextPatternOnTextSelectionChanged">
      <summary>
        <see cref="F:System.Windows.Automation.TextPatternIdentifiers.TextSelectionChangedEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.TextPatternOnTextChanged">
      <summary>
        <see cref="F:System.Windows.Automation.TextPatternIdentifiers.TextChangedEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.AsyncContentLoaded">
      <summary>
        <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.AsyncContentLoadedEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.PropertyChanged">
      <summary>Used to raise a notification that a property has changed.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.StructureChanged">
      <summary>
        <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.StructureChangedEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.InputReachedTarget">
      <summary>
        <see cref="F:System.Windows.Automation.SynchronizedInputPatternIdentifiers.InputReachedTargetEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.InputReachedOtherElement">
      <summary>
        <see cref="F:System.Windows.Automation.SynchronizedInputPatternIdentifiers.InputReachedOtherElementEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.InputDiscarded">
      <summary>
        <see cref="F:System.Windows.Automation.SynchronizedInputPatternIdentifiers.InputDiscardedEvent" />
      </summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.AutomationOrientation">
      <summary>Specifies the direction in which a control can be laid out. </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationOrientation.None">
      <summary>The control doesn't have an orientation. An example of a control without an orientation is a <see cref="T:System.Windows.Controls.Button" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationOrientation.Horizontal">
      <summary>The control is laid out horizontally.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationOrientation.Vertical">
      <summary>The control is laid out horizontally.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.AutomationPeer">
      <summary>Provides a base class that exposes an element to UI Automation. </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.#ctor">
      <summary>Provides initialization for base class values when they are called by the constructor of a derived class.</summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.AutomationPeer.EventsSource">
      <summary>Gets or sets an <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> that is reported to the automation client as a source for all the events that come from this <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> that is the source of events.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey">
      <summary>Gets the accelerator key combinations for the element that is associated with the UI Automation peer. </summary>
      <returns>The accelerator key.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKeyCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey" />.</summary>
      <returns>The accelerator key.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKey">
      <summary>Gets the access key for the element that is associated with the automation peer.</summary>
      <returns>The string that contains the access key.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKeyCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKey" />.</summary>
      <returns>The string that contains the access key.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType">
      <summary>Gets the control type for the element that is associated with the UI Automation peer.</summary>
      <returns>The control type.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlTypeCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The control type.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationId">
      <summary>Gets the <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> of the element that is associated with the automation peer.</summary>
      <returns>The identifier.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationIdCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationId" />.</summary>
      <returns>The string that contains the identifier.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle">
      <summary>Gets the <see cref="T:System.Windows.Rect" /> object that represents the screen coordinates of the element that is associated with the automation peer.</summary>
      <returns>The bounding rectangle.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangleCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle" />.</summary>
      <returns>The bounding rectangle.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren">
      <summary>Gets the collection of <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren" /> elements that are represented in the UI Automation tree as immediate child elements of the automation peer.</summary>
      <returns>The collection of child elements.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetChildrenCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren" />.</summary>
      <returns>The collection of child elements.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName">
      <summary>Gets a name that is used with <see cref="T:System.Windows.Automation.Peers.AutomationControlType" />, to differentiate the control that is represented by this <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />. </summary>
      <returns>The class name. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetClassNameCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>The class name.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint">
      <summary>Gets a <see cref="T:System.Windows.Point" /> on the element that is associated with the automation peer that responds to a mouse click. </summary>
      <returns>A point in the clickable area of the element.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePointCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint" />.</summary>
      <returns>A point within the clickable area of the element.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText">
      <summary>Gets text that describes the functionality of the control that is associated with the automation peer. </summary>
      <returns>The help text.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpTextCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText" />.</summary>
      <returns>The help text.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetHostRawElementProviderCore">
      <summary>Tells UI Automation where in the UI Automation tree to place the hwnd being hosted by a Windows Presentation Foundation (WPF) element.</summary>
      <returns>This method returns the hosted hwnd to UI Automation for controls that host hwnds.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatus">
      <summary>Gets text that conveys the visual status of the element that is associated with this automation peer. </summary>
      <returns>The status.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatusCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatus" />.</summary>
      <returns>The status.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetItemType">
      <summary>Gets a string that describes what kind of item an object represents. </summary>
      <returns>The kind of item.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetItemTypeCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemType" />.</summary>
      <returns>The kind of item.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the <see cref="T:System.Windows.Controls.Label" /> that is targeted to the element. </summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.LabelAutomationPeer" /> for the element that is targeted by the <see cref="T:System.Windows.Controls.Label" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledByCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.LabelAutomationPeer" /> for the element that is targeted by the <see cref="T:System.Windows.Controls.Label" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlType">
      <summary>Gets a human-readable localized string that represents the <see cref="T:System.Windows.Automation.Peers.AutomationControlType" /> value for the control that is associated with this automation peer.</summary>
      <returns>The type of the control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlTypeCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlType" />.</summary>
      <returns>The type of the control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetName">
      <summary>Gets text that describes the element that is associated with this automation peer.</summary>
      <returns>The name.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetNameCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The string that contains the label.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientation">
      <summary>Gets a value that indicates the explicit control orientation, if any.</summary>
      <returns>The orientation of the control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientationCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientation" />.</summary>
      <returns>The orientation of the control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetParent">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> that is the parent of this <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</summary>
      <returns>The parent automation peer.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>When overridden in a derived class, gets the control pattern that is associated with the specified <see cref="T:System.Windows.Automation.Peers.PatternInterface" />.</summary>
      <returns>The object that implements the pattern interface; null if this peer does not support this interface.</returns>
      <param name="patternInterface">A value from the <see cref="T:System.Windows.Automation.Peers.PatternInterface" /> enumeration.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus">
      <summary>Gets a value that indicates whether the element that is associated with this automation peer currently has keyboard focus.</summary>
      <returns>true if the element has keyboard focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocusCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus" />.</summary>
      <returns>true if the element has keyboard focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.InvalidatePeer">
      <summary>Triggers recalculation of the main properties of the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> and raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> notification to the Automation Client if the properties changed. </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElement">
      <summary>Gets a value that indicates whether the element that is associated with this automation peer contains data that is presented to the user.</summary>
      <returns>true if the element is a content element; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElementCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElement" />.</summary>
      <returns>true if the element is a content element; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElement">
      <summary>Gets a value that indicates whether the element is understood by the user as interactive or as contributing to the logical structure of the control in the GUI.</summary>
      <returns>true if the element is a control; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElementCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElement" />.</summary>
      <returns>true if the element is a control; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabled">
      <summary>Gets a value that indicates whether the element associated with this automation peer supports interaction.</summary>
      <returns>true if the element supports interaction; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabledCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabled" />.</summary>
      <returns>true if the automation peer can receive and send events; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.AutomationPeer.IsHwndHost">
      <summary>Gets a value that indicates whether the element that is associated with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> hosts hwnds in Windows Presentation Foundation (WPF).</summary>
      <returns>true if the element that is associated with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> hosts hwnds in Windows Presentation Foundation (WPF); otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable">
      <summary>Gets a value that indicates whether the element can accept keyboard focus.</summary>
      <returns>true if the element can accept keyboard focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusableCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable" />.</summary>
      <returns>true if the element can accept keyboard focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreen">
      <summary>Gets a value that indicates whether an element is off the screen.</summary>
      <returns>true if the element is not on the screen; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreenCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreen" />.</summary>
      <returns>true if the element is not on the screen; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsPassword">
      <summary>Gets a value that indicates whether the element contains sensitive content.</summary>
      <returns>true if the element contains sensitive content such as a password; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsPasswordCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsPassword" />.</summary>
      <returns>true if the element contains sensitive content; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm">
      <summary>Gets a value that indicates whether the element that is associated with this peer must be completed on a form.</summary>
      <returns>true if the element must be completed; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForFormCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm" />.</summary>
      <returns>true if the element is must be completed; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.ListenerExists(System.Windows.Automation.Peers.AutomationEvents)">
      <summary>Gets a value that indicates whether UI Automation is listening for the specified event. </summary>
      <returns>A boolean that indicates whether UI Automation is listening for the event.</returns>
      <param name="eventId">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.PeerFromProvider(System.Windows.Automation.Provider.IRawElementProviderSimple)">
      <summary>Gets an <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the specified <see cref="T:System.Windows.Automation.Provider.IRawElementProviderSimple" /> proxy.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</returns>
      <param name="provider">The class that implements <see cref="T:System.Windows.Automation.Provider.IRawElementProviderSimple" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.ProviderFromPeer(System.Windows.Automation.Peers.AutomationPeer)">
      <summary>Gets the <see cref="T:System.Windows.Automation.Provider.IRawElementProviderSimple" /> for the specified <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</summary>
      <returns>The proxy.</returns>
      <param name="peer">The automation peer.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.RaiseAsyncContentLoadedEvent(System.Windows.Automation.AsyncContentLoadedEventArgs)">
      <summary>Called by the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> to raise the <see cref="F:System.Windows.Automation.AutomationElement.AsyncContentLoadedEvent" /> event.</summary>
      <param name="args">The event data.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.RaiseAutomationEvent(System.Windows.Automation.Peers.AutomationEvents)">
      <summary>Raises an automation event.</summary>
      <param name="eventId">The event identifier.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.RaisePropertyChangedEvent(System.Windows.Automation.AutomationProperty,System.Object,System.Object)">
      <summary>Raises an event to notify the automation client of a changed property value.</summary>
      <param name="property">The property that changed.</param>
      <param name="oldValue">The previous value of the property.</param>
      <param name="newValue">The new value of the property.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.ResetChildrenCache">
      <summary>Synchronously resets the tree of child elements by calling <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildrenCore" />. </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus">
      <summary>Sets the keyboard focus on the element that is associated with this automation peer.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.SetFocusCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus" />.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.ContentElementAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.ContentElement" /> types to UI Automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.#ctor(System.Windows.ContentElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.CreatePeerForElement(System.Windows.ContentElement)">
      <summary>Creates a <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> for the specified <see cref="T:System.Windows.ContentElement" />. </summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> for the specified <see cref="T:System.Windows.ContentElement" />.</returns>
      <param name="element">The <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.FromElement(System.Windows.ContentElement)">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> for the specified <see cref="T:System.Windows.ContentElement" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> for the specified <see cref="T:System.Windows.ContentElement" />, or null if the <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> has not been created by the <see cref="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.CreatePeerForElement(System.Windows.ContentElement)" /> method.</returns>
      <param name="element">The <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetAcceleratorKeyCore">
      <summary>Gets the accelerator key for the element associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey" />.</summary>
      <returns>
        <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetAccessKeyCore">
      <summary>Gets the access key for the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKey" />.</summary>
      <returns>The access key for this <see cref="T:System.Windows.ContentElement" />. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>
        <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Custom" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetAutomationIdCore">
      <summary>Gets the string that uniquely identifies the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationId" />.</summary>
      <returns>A string containing the automation identifier.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetBoundingRectangleCore">
      <summary>Gets the <see cref="T:System.Windows.Rect" /> representing the bounding rectangle of the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle" />.</summary>
      <returns>The bounding rectangle.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetChildrenCore">
      <summary>Gets the collection of child elements of the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren" />.</summary>
      <returns>The collection of child elements.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>
        <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetClickablePointCore">
      <summary>Gets a <see cref="T:System.Windows.Point" /> that represents the clickable space that is on the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint" />.</summary>
      <returns>The point that represents the clickable space that is on the element.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetHelpTextCore">
      <summary>Gets the string that describes the functionality of the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText" />.</summary>
      <returns>The string that describes the functionality of the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetItemStatusCore">
      <summary>Gets a string that conveys the visual status of the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatus" />.</summary>
      <returns>A string containing the status.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetItemTypeCore">
      <summary>Gets a human-readable string that contains the type of the item that the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> represents. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemType" />.</summary>
      <returns>The string that contains the item type.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetLabeledByCore">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the <see cref="T:System.Windows.Controls.Label" /> that is targeted to the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.LabelAutomationPeer" /> for the element that is targeted by the <see cref="T:System.Windows.Controls.Label" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetNameCore">
      <summary>Gets the text label of the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The string that contains the label.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetOrientationCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> is laid out in a specific direction. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientation" />.</summary>
      <returns>
        <see cref="F:System.Windows.Automation.Peers.AutomationOrientation.None" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />.</summary>
      <returns>An object that implements the <see cref="T:System.Windows.Automation.Provider.ISynchronizedInputProvider" /> interface if <paramref name="patternInterface" /> is <see cref="F:System.Windows.Automation.Peers.PatternInterface.SynchronizedInput" />; otherwise, null.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.HasKeyboardFocusCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> currently has keyboard input focus. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus" />.</summary>
      <returns>true if the element has keyboard input focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.IsContentElementCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> is an element that contains data that is presented to the user. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElement" />.</summary>
      <returns>false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.IsControlElementCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> is something that the end user would understand as being interactive or as contributing to the logical structure of the control in the GUI. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElement" />.</summary>
      <returns>false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.IsEnabledCore">
      <summary>Gets a value that indicates whether this automation peer can receive and send events to the associated element. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabled" />.</summary>
      <returns>true if the automation peer can receive and send events; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.IsKeyboardFocusableCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> can accept keyboard focus. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable" />.</summary>
      <returns>false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.IsOffscreenCore">
      <summary>Gets a value that indicates whether <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> is off of the screen. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreen" />.</summary>
      <returns>true if the element is not on the screen; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.IsPasswordCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> contains protected content. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsPassword" />.</summary>
      <returns>false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.IsRequiredForFormCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> is required to be filled out on a form. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm" />.</summary>
      <returns>false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ContentElementAutomationPeer.Owner">
      <summary>Gets the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />.</summary>
      <returns>The <see cref="T:System.Windows.ContentElement" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.SetFocusCore">
      <summary>Sets the keyboard input focus on the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus" />.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.GenericRootAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Interop.HwndSource" /> types to UI Automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.GenericRootAutomationPeer.#ctor(System.Windows.UIElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.GenericRootAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.GenericRootAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.GenericRootAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.GenericRootAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Pane" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.GenericRootAutomationPeer.GetBoundingRectangleCore">
      <summary>Gets the <see cref="T:System.Windows.Rect" /> that represents the bounding rectangle of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.GenericRootAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle" />.</summary>
      <returns>The bounding rectangle.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.GenericRootAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.GenericRootAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string that contains "Pane".</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.GenericRootAutomationPeer.GetNameCore">
      <summary>Gets the text label of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.GenericRootAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The string that contains the label.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.HostedWindowWrapper">
      <summary>Exposes <see cref="T:System.Windows.Interop.HwndHost" /> types to UI Automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.HostedWindowWrapper.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.HostedWindowWrapper" /> class.</summary>
      <param name="hwnd">The pointer to the <see cref="T:System.Windows.Interop.HwndHost" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.HostedWindowWrapper" />.</param>
    </member>
    <member name="T:System.Windows.Automation.Peers.PatternInterface">
      <summary>Specifies the control pattern that <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)" /> returns.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Invoke">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IInvokeProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Selection">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Value">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IValueProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.RangeValue">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IRangeValueProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Scroll">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IScrollProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.ScrollItem">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IScrollItemProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.ExpandCollapse">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IExpandCollapseProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Grid">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IGridProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.GridItem">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IGridItemProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.MultipleView">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IMultipleViewProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Window">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IWindowProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.SelectionItem">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.ISelectionItemProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Dock">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IDockProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Table">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.ITableProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.TableItem">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.ITableItemProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Toggle">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IToggleProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Transform">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.ITransformProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Text">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.ITextProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.ItemContainer">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IItemContainerProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.VirtualizedItem">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IVirtualizedItemProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.SynchronizedInput">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.ISynchronizedInputProvider" /> control pattern interface.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.UIElement3D" /> types to UI Automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.#ctor(System.Windows.UIElement3D)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> class. </summary>
      <param name="owner">The <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.CreatePeerForElement(System.Windows.UIElement3D)">
      <summary>Creates a <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> for the specified <see cref="T:System.Windows.UIElement3D" />.</summary>
      <returns>A  <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> for the specified <see cref="T:System.Windows.UIElement3D" />.</returns>
      <param name="element">The <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.FromElement(System.Windows.UIElement3D)">
      <summary>Returns the <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> for the specified <see cref="T:System.Windows.UIElement3D" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />, or null if the <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> was not created by the <see cref="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.CreatePeerForElement(System.Windows.UIElement3D)" /> method.</returns>
      <param name="element">The <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetAcceleratorKeyCore">
      <summary>Returns the accelerator key for the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey" />.</summary>
      <returns>The accelerator key for the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetAccessKeyCore">
      <summary>Returns the access key for the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKey" />.</summary>
      <returns>The access key for the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetAutomationControlTypeCore">
      <summary>Returns the control type for the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>
        <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Custom" /> in all cases.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetAutomationIdCore">
      <summary>Returns the string that uniquely identifies the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationId" />.</summary>
      <returns>The string that uniquely identifies the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetBoundingRectangleCore">
      <summary>Returns the <see cref="T:System.Windows.Rect" /> that represents the bounding rectangle of the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle" />.</summary>
      <returns>The <see cref="T:System.Windows.Rect" /> that contains the coordinates of the element. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetChildrenCore">
      <summary>Returns the collection of child elements of the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> elements than correspond to the child elements of the <see cref="T:System.Windows.UIElement3D" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetClassNameCore">
      <summary>Returns the name of the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>
        <see cref="F:System.String.Empty" /> in all cases.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetClickablePointCore">
      <summary>Returns a <see cref="T:System.Windows.Point" /> that represents the clickable space that is on the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint" />.</summary>
      <returns>The <see cref="T:System.Windows.Point" /> on the element that allows a click. The point values are (<see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" />) if the element is not both a <see cref="T:System.Windows.Interop.HwndSource" /> and a <see cref="T:System.Windows.PresentationSource" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetHelpTextCore">
      <summary>Returns the string that describes the functionality of the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText" />.</summary>
      <returns>A string that describes the functionality of the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetItemStatusCore">
      <summary>Returns a string that communicates the status of the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatus" />.</summary>
      <returns>The status of the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetItemTypeCore">
      <summary>Returns a human-readable string that represents the item type that the <see cref="T:System.Windows.UIElement3D" /> for this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemType" />.</summary>
      <returns>A string that represents the item type that the <see cref="T:System.Windows.UIElement3D" /> for this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetLabeledByCore">
      <summary>Returns the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the element that targets the <see cref="T:System.Windows.UIElement3D" /> for this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the element that targets the <see cref="T:System.Windows.UIElement3D" /> for this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetNameCore">
      <summary>Returns the string that represents the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The string that represents the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetOrientationCore">
      <summary>Returns the orientation of the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientation" />.</summary>
      <returns>
        <see cref="F:System.Windows.Automation.Peers.AutomationOrientation.None" /> in all cases.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Returns the control pattern for the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />.</summary>
      <returns>An object that implements the <see cref="T:System.Windows.Automation.Provider.ISynchronizedInputProvider" /> interface if <paramref name="patternInterface" /> is <see cref="F:System.Windows.Automation.Peers.PatternInterface.SynchronizedInput" />; otherwise, null.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.HasKeyboardFocusCore">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> currently has keyboard input focus. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus" />.</summary>
      <returns>true if the element has keyboard input focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.IsContentElementCore">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> is an element that contains data that is presented to the user. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElement" />.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.IsControlElementCore">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> is understood by the end user as interactive. Optionally, the user might understand the <see cref="T:System.Windows.UIElement3D" /> as contributing to the logical structure of the control in the GUI. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElement" />.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.IsEnabledCore">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> can participate in hit testing or accept focus. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable" />.</summary>
      <returns>true if the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> can participate in hit testing or accept focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.IsKeyboardFocusableCore">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> can accept keyboard focus. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable" />.</summary>
      <returns>true if the element can receive keyboard focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.IsOffscreenCore">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> is off the screen. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreen" />.</summary>
      <returns>true if the element is not on the screen; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.IsPasswordCore">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> contains protected content. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsPassword" />.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.IsRequiredForFormCore">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> is required to be completed on a form. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm" />.</summary>
      <returns>true if the <see cref="T:System.Windows.UIElement3D" /> is required to be completed on a form; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.UIElement3DAutomationPeer.Owner">
      <summary>Gets the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />.</summary>
      <returns>The <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.SetFocusCore">
      <summary>Sets the keyboard input focus on the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus" />.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.UIElementAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.UIElement" /> types to UI Automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.#ctor(System.Windows.UIElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.CreatePeerForElement(System.Windows.UIElement)">
      <summary>Creates a <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> for the specified <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />.</returns>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.FromElement(System.Windows.UIElement)">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> for the specified <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />, or  null if the <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> was not created by the <see cref="M:System.Windows.Automation.Peers.UIElementAutomationPeer.CreatePeerForElement(System.Windows.UIElement)" /> method.</returns>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetAcceleratorKeyCore">
      <summary>Gets the accelerator key for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey" />.</summary>
      <returns>The <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetAcceleratorKey(System.Windows.DependencyObject)" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetAccessKeyCore">
      <summary>Gets the access key for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />.This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKey" />.</summary>
      <returns>The access key for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Custom" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetAutomationIdCore">
      <summary>Gets the string that uniquely identifies the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationId" />.</summary>
      <returns>The <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetAutomationId(System.Windows.DependencyObject)" />. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetBoundingRectangleCore">
      <summary>Gets the <see cref="T:System.Windows.Rect" /> that represents the bounding rectangle of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle" />.</summary>
      <returns>The <see cref="T:System.Windows.Rect" /> that contains the coordinates of the element. Optionally, if the element is not both a <see cref="T:System.Windows.Interop.HwndSource" /> and a <see cref="T:System.Windows.PresentationSource" />, this method returns <see cref="P:System.Windows.Rect.Empty" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetChildrenCore">
      <summary>Gets the collection of child elements of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren" />.</summary>
      <returns>A list of child <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> elements.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>An <see cref="F:System.String.Empty" /> string.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetClickablePointCore">
      <summary>Gets a <see cref="T:System.Windows.Point" /> that represents the clickable space that is on the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint" />.</summary>
      <returns>The <see cref="T:System.Windows.Point" /> on the element that allows a click. The point values are (<see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" />) if the element is not both a <see cref="T:System.Windows.Interop.HwndSource" /> and a <see cref="T:System.Windows.PresentationSource" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetHelpTextCore">
      <summary>Gets the string that describes the functionality of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText" />.</summary>
      <returns>The string that contains the <see cref="P:System.Windows.Automation.AutomationProperties.HelpText" /> that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetHelpText(System.Windows.DependencyObject)" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetItemStatusCore">
      <summary>Gets a string that communicates the visual status of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatus" />.</summary>
      <returns>The string that contains the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetItemStatus(System.Windows.DependencyObject)" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetItemTypeCore">
      <summary>Gets a human-readable string that contains the item type that the <see cref="T:System.Windows.UIElement" /> for this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> represents. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemType" />.</summary>
      <returns>The string that contains the <see cref="P:System.Windows.Automation.AutomationProperties.ItemType" /> that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetItemType(System.Windows.DependencyObject)" />. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetLabeledByCore">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the element that is targeted to the <see cref="T:System.Windows.UIElement" /> for this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the element that is targeted to the <see cref="T:System.Windows.UIElement" /> for this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetNameCore">
      <summary>Gets the text label of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The string that contains the <see cref="P:System.Windows.Automation.AutomationProperties.Name" /> that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetName(System.Windows.DependencyObject)" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetOrientationCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> is laid out in a specific direction. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientation" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationOrientation.None" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />.</summary>
      <returns>An object that implements the <see cref="T:System.Windows.Automation.Provider.ISynchronizedInputProvider" /> interface if <paramref name="patternInterface" /> is <see cref="F:System.Windows.Automation.Peers.PatternInterface.SynchronizedInput" />; otherwise, null.</returns>
      <param name="patternInterface">A value from the enumeration.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.HasKeyboardFocusCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> currently has keyboard input focus. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus" />.</summary>
      <returns>true if the element has keyboard input focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.IsContentElementCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> is an element that contains data that is presented to the user. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElement" />.</summary>
      <returns>true.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.IsControlElementCore">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> is understood by the end user as interactive. Optionally, the user might understand the <see cref="T:System.Windows.UIElement" /> as contributing to the logical structure of the control in the GUI. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElement" />.</summary>
      <returns>true.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.IsEnabledCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> can accept keyboard focus. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable" />.</summary>
      <returns>A boolean that contains the value of <see cref="P:System.Windows.UIElement.IsEnabled" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.IsKeyboardFocusableCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> can accept keyboard focus. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable" />.</summary>
      <returns>true if the element is focusable by the keyboard; otherwise false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.IsOffscreenCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> is off the screen. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreen" />.</summary>
      <returns>true if the element is not on the screen; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.IsPasswordCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> contains protected content. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsPassword" />.</summary>
      <returns>false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.IsRequiredForFormCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> is required to be completed on a form. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm" />.</summary>
      <returns>A boolean that contains the value that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetIsRequiredForForm(System.Windows.DependencyObject)" />, if it's set; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.UIElementAutomationPeer.Owner">
      <summary>Gets the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />.</summary>
      <returns>The <see cref="T:System.Windows.UIElement" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.SetFocusCore">
      <summary>Sets the keyboard input focus on the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus" />.</summary>
    </member>
    <member name="T:System.Windows.Documents.ContentPosition">
      <summary>Abstract class that represents the position of content. This position is content specific.  </summary>
    </member>
    <member name="M:System.Windows.Documents.ContentPosition.#ctor">
      <summary>Call this constructor as the initializer of a derived class' constructor, in order to properly initialize a class derived from <see cref="T:System.Windows.Documents.ContentPosition" />. </summary>
    </member>
    <member name="F:System.Windows.Documents.ContentPosition.Missing">
      <summary>Static representation of a non-existent ContentPosition. </summary>
    </member>
    <member name="T:System.Windows.Documents.DocumentPage">
      <summary>Represents a document page produced by a paginator.  </summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentPage.#ctor(System.Windows.Media.Visual)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.DocumentPage" /> class by using the specified <see cref="T:System.Windows.Media.Visual" />. </summary>
      <param name="visual">The visual representation of the page.</param>
    </member>
    <member name="M:System.Windows.Documents.DocumentPage.#ctor(System.Windows.Media.Visual,System.Windows.Size,System.Windows.Rect,System.Windows.Rect)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.DocumentPage" /> class by using the specified <see cref="T:System.Windows.Media.Visual" /> and box sizes. </summary>
      <param name="visual">The visual representation of the page.</param>
      <param name="pageSize">The size of the page, including margins, as it will be after any cropping.</param>
      <param name="bleedBox">The area for print production-related bleeds, registration marks, and crop marks that may appear on the physical sheet outside the logical page boundaries.</param>
      <param name="contentBox">The area of the page within the margins.</param>
    </member>
    <member name="P:System.Windows.Documents.DocumentPage.BleedBox">
      <summary>When overridden in a derived class, gets the area for print production-related bleeds, registration marks, and crop marks that may appear on the physical sheet outside the logical page boundaries. </summary>
      <returns>A <see cref="T:System.Windows.Rect" /> representing the size and location of the bleed box area. </returns>
    </member>
    <member name="P:System.Windows.Documents.DocumentPage.ContentBox">
      <summary>When overridden in a derived class, gets the area of the page within the margins.</summary>
      <returns>A <see cref="T:System.Windows.Rect" /> representing the area of the page, not including the margins. </returns>
    </member>
    <member name="M:System.Windows.Documents.DocumentPage.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Windows.Documents.DocumentPage" />. </summary>
    </member>
    <member name="F:System.Windows.Documents.DocumentPage.Missing">
      <summary>Represents a missing page. This property is static and read only. </summary>
      <returns>A <see cref="T:System.Windows.Documents.DocumentPage" /> with all its size properties set to zero.</returns>
    </member>
    <member name="M:System.Windows.Documents.DocumentPage.OnPageDestroyed(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Documents.DocumentPage.PageDestroyed" /> event. </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
    </member>
    <member name="E:System.Windows.Documents.DocumentPage.PageDestroyed">
      <summary>Occurs when the <see cref="P:System.Windows.Documents.DocumentPage.Visual" /> that depicts the <see cref="T:System.Windows.Documents.DocumentPage" /> is destroyed and can no longer be used for display.</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentPage.SetBleedBox(System.Windows.Rect)">
      <summary>Sets the dimensions and location of the <see cref="P:System.Windows.Documents.DocumentPage.BleedBox" />. </summary>
      <param name="bleedBox">An object that specifies the size and location of a rectangle.</param>
    </member>
    <member name="M:System.Windows.Documents.DocumentPage.SetContentBox(System.Windows.Rect)">
      <summary>Sets the dimension and location of the <see cref="P:System.Windows.Documents.DocumentPage.ContentBox" />. </summary>
      <param name="contentBox">An object that specifies the size and location of a rectangle.</param>
    </member>
    <member name="M:System.Windows.Documents.DocumentPage.SetSize(System.Windows.Size)">
      <summary>Sets the <see cref="P:System.Windows.Documents.DocumentPage.Size" /> of the physical page as it will be after any cropping. </summary>
      <param name="size">The size of the page.</param>
    </member>
    <member name="M:System.Windows.Documents.DocumentPage.SetVisual(System.Windows.Media.Visual)">
      <summary>Sets the <see cref="P:System.Windows.Documents.DocumentPage.Visual" /> that depicts the page.</summary>
      <param name="visual">The visual representation of the page.</param>
    </member>
    <member name="P:System.Windows.Documents.DocumentPage.Size">
      <summary>When overridden in a derived class, gets the actual size of a page as it will be following any cropping. </summary>
      <returns>A <see cref="T:System.Windows.Size" /> representing the height and width of the page.</returns>
    </member>
    <member name="P:System.Windows.Documents.DocumentPage.Visual">
      <summary>When overridden in a derived class, gets the visual representation of the page. </summary>
      <returns>A <see cref="T:System.Windows.Media.Visual" /> depicting the page. </returns>
    </member>
    <member name="T:System.Windows.Documents.DocumentPaginator">
      <summary>Provides an abstract base class that supports creation of multiple-page elements from a single document.</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentPaginator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.DocumentPaginator" /> class. </summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentPaginator.CancelAsync(System.Object)">
      <summary>Cancels a previous <see cref="Overload:System.Windows.Documents.DocumentPaginator.GetPageAsync" /> or <see cref="Overload:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync" /> operation.</summary>
      <param name="userState">The original <paramref name="userState" /> passed to <see cref="Overload:System.Windows.Documents.DocumentPaginator.GetPageAsync" />, <see cref="Overload:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync" />, or <see cref="Overload:System.Windows.Documents.DocumentPaginator.ComputePageCountAsync" /> that identifies the asynchronous task to cancel.</param>
    </member>
    <member name="M:System.Windows.Documents.DocumentPaginator.ComputePageCount">
      <summary>Forces a pagination of the content, updates <see cref="P:System.Windows.Documents.DocumentPaginator.PageCount" /> with the new total, and sets <see cref="P:System.Windows.Documents.DocumentPaginator.IsPageCountValid" /> to true.</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentPaginator.ComputePageCountAsync">
      <summary>Asynchronously, forces a pagination of the content, updates <see cref="P:System.Windows.Documents.DocumentPaginator.PageCount" /> with the new total, and sets <see cref="P:System.Windows.Documents.DocumentPaginator.IsPageCountValid" /> to true.</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentPaginator.ComputePageCountAsync(System.Object)">
      <summary>Asynchronously, forces a pagination of the content, updates <see cref="P:System.Windows.Documents.DocumentPaginator.PageCount" /> with the new total, sets <see cref="P:System.Windows.Documents.DocumentPaginator.IsPageCountValid" /> to true. </summary>
      <param name="userState">A unique identifier for the asynchronous task.</param>
    </member>
    <member name="E:System.Windows.Documents.DocumentPaginator.ComputePageCountCompleted">
      <summary>Occurs when a <see cref="Overload:System.Windows.Documents.DocumentPaginator.ComputePageCountAsync" /> operation has finished. </summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentPaginator.GetPage(System.Int32)">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Windows.Documents.DocumentPage" /> for the specified page number.</summary>
      <returns>The <see cref="T:System.Windows.Documents.DocumentPage" /> for the specified <paramref name="pageNumber" />, or <see cref="F:System.Windows.Documents.DocumentPage.Missing" /> if the page does not exist.</returns>
      <param name="pageNumber">The zero-based page number of the document page that is needed.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pageNumber" /> is negative.</exception>
    </member>
    <member name="M:System.Windows.Documents.DocumentPaginator.GetPageAsync(System.Int32)">
      <summary>Asynchronously returns (through the <see cref="E:System.Windows.Documents.DocumentPaginator.GetPageCompleted" /> event) the <see cref="T:System.Windows.Documents.DocumentPage" /> for the specified page number.</summary>
      <param name="pageNumber">The zero-based page number of the document page that is needed.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pageNumber" /> is negative.</exception>
    </member>
    <member name="M:System.Windows.Documents.DocumentPaginator.GetPageAsync(System.Int32,System.Object)">
      <summary>Asynchronously returns (through the <see cref="E:System.Windows.Documents.DocumentPaginator.GetPageCompleted" /> event) the <see cref="T:System.Windows.Documents.DocumentPage" /> for the specified page number and assigns the specified ID to the asynchronous task.</summary>
      <param name="pageNumber">The zero-based page number of the <see cref="T:System.Windows.Documents.DocumentPage" /> to get.</param>
      <param name="userState">A unique identifier for the asynchronous task.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pageNumber" /> is negative.</exception>
    </member>
    <member name="E:System.Windows.Documents.DocumentPaginator.GetPageCompleted">
      <summary>Occurs when <see cref="Overload:System.Windows.Documents.DocumentPaginator.GetPageAsync" /> has completed.</summary>
    </member>
    <member name="P:System.Windows.Documents.DocumentPaginator.IsPageCountValid">
      <summary>When overridden in a derived class, gets a value indicating whether <see cref="P:System.Windows.Documents.DocumentPaginator.PageCount" /> is the total number of pages. </summary>
      <returns>true if pagination is complete and <see cref="P:System.Windows.Documents.DocumentPaginator.PageCount" /> is the total number of pages; otherwise, false, if pagination is in process and <see cref="P:System.Windows.Documents.DocumentPaginator.PageCount" /> is the number of pages currently formatted (not the total).This value may revert to false, after being true, if <see cref="P:System.Windows.Documents.DocumentPaginator.PageSize" /> or content changes; because those events would force a repagination.</returns>
    </member>
    <member name="M:System.Windows.Documents.DocumentPaginator.OnComputePageCountCompleted(System.ComponentModel.AsyncCompletedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Documents.DocumentPaginator.ComputePageCountCompleted" /> event. </summary>
      <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.Documents.DocumentPaginator.OnGetPageCompleted(System.Windows.Documents.GetPageCompletedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Documents.DocumentPaginator.GetPageCompleted" /> event. </summary>
      <param name="e">A <see cref="T:System.Windows.Documents.GetPageCompletedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.Documents.DocumentPaginator.OnPagesChanged(System.Windows.Documents.PagesChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Documents.DocumentPaginator.PagesChanged" /> event. </summary>
      <param name="e">A <see cref="T:System.Windows.Documents.PagesChangedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="P:System.Windows.Documents.DocumentPaginator.PageCount">
      <summary>When overridden in a derived class, gets a count of the number of pages currently formatted</summary>
      <returns>A count of the number of pages that have been formatted.</returns>
    </member>
    <member name="E:System.Windows.Documents.DocumentPaginator.PagesChanged">
      <summary>Occurs when the document content is changed.</summary>
    </member>
    <member name="P:System.Windows.Documents.DocumentPaginator.PageSize">
      <summary>When overridden in a derived class, gets or sets the suggested width and height of each page.</summary>
      <returns>A <see cref="T:System.Windows.Size" /> representing the width and height of each page.</returns>
    </member>
    <member name="P:System.Windows.Documents.DocumentPaginator.Source">
      <summary>When overridden in a derived class, returns the element being paginated.</summary>
      <returns>An <see cref="T:System.Windows.Documents.IDocumentPaginatorSource" /> representing the element being paginated.</returns>
    </member>
    <member name="T:System.Windows.Documents.DynamicDocumentPaginator">
      <summary>Provides an abstract base class that supports automatic background pagination and tracking content positions across repaginations in addition to the methods and properties of its own base class.</summary>
    </member>
    <member name="M:System.Windows.Documents.DynamicDocumentPaginator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.DynamicDocumentPaginator" /> class. </summary>
    </member>
    <member name="M:System.Windows.Documents.DynamicDocumentPaginator.GetObjectPosition(System.Object)">
      <summary>When overridden in a derived class, returns a <see cref="T:System.Windows.Documents.ContentPosition" /> for the specified <see cref="T:System.Object" />.</summary>
      <returns>The <see cref="T:System.Windows.Documents.ContentPosition" /> of the given object.</returns>
      <param name="value">The object to return the <see cref="T:System.Windows.Documents.ContentPosition" /> of.</param>
    </member>
    <member name="M:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumber(System.Windows.Documents.ContentPosition)">
      <summary>When overridden in a derived class, returns the zero-based page number of the specified <see cref="T:System.Windows.Documents.ContentPosition" />.</summary>
      <returns>An <see cref="T:System.Int32" /> representing zero-based page number where the specified <paramref name="contentPosition" /> appears.</returns>
      <param name="contentPosition">The content position whose page number is needed.</param>
    </member>
    <member name="M:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync(System.Windows.Documents.ContentPosition)">
      <summary>Asynchronously, returns (through the This method raises the <see cref="E:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberCompleted" /> event) the zero-based page number of the specified <see cref="T:System.Windows.Documents.ContentPosition" />.</summary>
      <param name="contentPosition">The content position whose page number is needed.</param>
    </member>
    <member name="M:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync(System.Windows.Documents.ContentPosition,System.Object)">
      <summary>Asynchronously, returns (through the This method raises the <see cref="E:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberCompleted" /> event) the zero-based page number of the specified <see cref="T:System.Windows.Documents.ContentPosition" />.</summary>
      <param name="contentPosition">The content position element to return the page number of.</param>
      <param name="userState">A unique identifier for the asynchronous task.</param>
    </member>
    <member name="E:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberCompleted">
      <summary>Occurs when <see cref="Overload:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync" /> has completed.</summary>
    </member>
    <member name="M:System.Windows.Documents.DynamicDocumentPaginator.GetPagePosition(System.Windows.Documents.DocumentPage)">
      <summary>When overridden in a derived class, gets the position of the specified page in the document's content.</summary>
      <returns>A <see cref="T:System.Windows.Documents.ContentPosition" /> representing the position of <paramref name="page" />. </returns>
      <param name="page">The page whose position is needed.</param>
    </member>
    <member name="P:System.Windows.Documents.DynamicDocumentPaginator.IsBackgroundPaginationEnabled">
      <summary>Gets or sets a value indicating whether pagination is performed automatically in the background in response to certain events, such as a change in page size.</summary>
      <returns>true if background pagination is enabled; otherwise, false. The default is true.</returns>
    </member>
    <member name="M:System.Windows.Documents.DynamicDocumentPaginator.OnGetPageNumberCompleted(System.Windows.Documents.GetPageNumberCompletedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberCompleted" /> event. </summary>
      <param name="e">A <see cref="T:System.Windows.Documents.GetPageNumberCompletedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.Documents.DynamicDocumentPaginator.OnPaginationCompleted(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Documents.DynamicDocumentPaginator.PaginationCompleted" /> event. </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.Documents.DynamicDocumentPaginator.OnPaginationProgress(System.Windows.Documents.PaginationProgressEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Documents.DynamicDocumentPaginator.PaginationProgress" /> event. </summary>
      <param name="e">A <see cref="T:System.Windows.Documents.PaginationProgressEventArgs" /> that contains the event data. </param>
    </member>
    <member name="E:System.Windows.Documents.DynamicDocumentPaginator.PaginationCompleted">
      <summary>Occurs when all document content has been paginated.</summary>
    </member>
    <member name="E:System.Windows.Documents.DynamicDocumentPaginator.PaginationProgress">
      <summary>Occurs when one or more content pages have been paginated.</summary>
    </member>
    <member name="T:System.Windows.Documents.GetPageCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Documents.DocumentPaginator.GetPageCompleted" /> event. </summary>
    </member>
    <member name="M:System.Windows.Documents.GetPageCompletedEventArgs.#ctor(System.Windows.Documents.DocumentPage,System.Int32,System.Exception,System.Boolean,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.GetPageCompletedEventArgs" /> class. </summary>
      <param name="page">The <see cref="T:System.Windows.Documents.DocumentPage" /> for the requested <paramref name="pageNumber" />.</param>
      <param name="pageNumber">The <paramref name="pageNumber" /> parameter passed to <see cref="M:System.Windows.Documents.DocumentPaginator.GetPageAsync(System.Int32,System.Object)" />.</param>
      <param name="error">The exception that occurred during the asynchronous operation; or NULL if there were no errors.</param>
      <param name="cancelled">true if the asynchronous operation was canceled; otherwise, false.</param>
      <param name="userState">The unique <paramref name="userState" /> parameter passed to <see cref="M:System.Windows.Documents.DocumentPaginator.GetPageAsync(System.Int32,System.Object)" />.</param>
    </member>
    <member name="P:System.Windows.Documents.GetPageCompletedEventArgs.DocumentPage">
      <summary>Gets the <see cref="T:System.Windows.Documents.DocumentPage" /> for the page specified in the call to <see cref="M:System.Windows.Documents.DocumentPaginator.GetPageAsync(System.Int32,System.Object)" />. </summary>
      <returns>The document page for the page specified in the call to <see cref="M:System.Windows.Documents.DocumentPaginator.GetPageAsync(System.Int32,System.Object)" />.</returns>
    </member>
    <member name="P:System.Windows.Documents.GetPageCompletedEventArgs.PageNumber">
      <summary>Gets the page number passed to <see cref="M:System.Windows.Documents.DocumentPaginator.GetPageAsync(System.Int32,System.Object)" />. </summary>
      <returns>The page number passed to <see cref="M:System.Windows.Documents.DocumentPaginator.GetPageAsync(System.Int32,System.Object)" />.</returns>
    </member>
    <member name="T:System.Windows.Documents.GetPageCompletedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Documents.DocumentPaginator.GetPageCompleted" /> event of a <see cref="T:System.Windows.Documents.FixedDocument" /> or other classes implementing <see cref="T:System.Windows.Documents.DocumentPaginator" />. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Documents.GetPageNumberCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberCompleted" /> event.</summary>
    </member>
    <member name="M:System.Windows.Documents.GetPageNumberCompletedEventArgs.#ctor(System.Windows.Documents.ContentPosition,System.Int32,System.Exception,System.Boolean,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.GetPageNumberCompletedEventArgs" /> class.</summary>
      <param name="contentPosition">The <paramref name="contentPosition" /> parameter passed to <see cref="M:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync(System.Windows.Documents.ContentPosition)" />.</param>
      <param name="pageNumber">The page number where the <paramref name="contentPosition" /> appears.</param>
      <param name="error">The exception that occurred during the asynchronous operation; or NULL if there were no errors.</param>
      <param name="cancelled">true if the asynchronous operation was canceled; otherwise, false.</param>
      <param name="userState">The unique <paramref name="userState" /> parameter passed to <see cref="M:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync(System.Windows.Documents.ContentPosition)" />.</param>
    </member>
    <member name="P:System.Windows.Documents.GetPageNumberCompletedEventArgs.ContentPosition">
      <summary>Gets the <see cref="T:System.Windows.Documents.ContentPosition" /> passed to <see cref="M:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync(System.Windows.Documents.ContentPosition)" />.</summary>
      <returns>The content position passed to <see cref="M:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync(System.Windows.Documents.ContentPosition)" />.</returns>
    </member>
    <member name="P:System.Windows.Documents.GetPageNumberCompletedEventArgs.PageNumber">
      <summary>Gets the page number for the <see cref="T:System.Windows.Documents.ContentPosition" /> passed to <see cref="M:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync(System.Windows.Documents.ContentPosition)" />.</summary>
      <returns>The page number (zero-based) for the <see cref="T:System.Windows.Documents.ContentPosition" /> passed to <see cref="M:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync(System.Windows.Documents.ContentPosition)" />.</returns>
    </member>
    <member name="T:System.Windows.Documents.GetPageNumberCompletedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberCompleted" /> event of a <see cref="T:System.Windows.Documents.FixedDocument" />, or <see cref="T:System.Windows.Documents.FlowDocument" />. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Documents.IDocumentPaginatorSource">
      <summary>Defines the source object that performs actual content pagination.</summary>
    </member>
    <member name="P:System.Windows.Documents.IDocumentPaginatorSource.DocumentPaginator">
      <summary>When implemented in a derived class, gets the object that performs content pagination.</summary>
      <returns>The object that performs the actual content pagination.</returns>
    </member>
    <member name="T:System.Windows.Documents.PagesChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Documents.DocumentPaginator.PagesChanged" /> event. </summary>
    </member>
    <member name="M:System.Windows.Documents.PagesChangedEventArgs.#ctor(System.Int32,System.Int32)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Documents.PagesChangedEventArgs" /> class. </summary>
      <param name="start">The page number (zero-based) of first page that changed.</param>
      <param name="count">The number of continuous pages that changed.</param>
    </member>
    <member name="P:System.Windows.Documents.PagesChangedEventArgs.Count">
      <summary> Gets the number of continuous pages that changed. </summary>
      <returns>The number of continuous pages that changed.</returns>
    </member>
    <member name="P:System.Windows.Documents.PagesChangedEventArgs.Start">
      <summary> Gets the page number of the first page that changed. </summary>
      <returns>The page number (zero-based) of first page that changed.</returns>
    </member>
    <member name="T:System.Windows.Documents.PagesChangedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Documents.DocumentPaginator.PagesChanged" /> event. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Documents.PaginationProgressEventArgs">
      <summary> Provides data for the <see cref="E:System.Windows.Documents.DynamicDocumentPaginator.PaginationProgress" /> event. </summary>
    </member>
    <member name="M:System.Windows.Documents.PaginationProgressEventArgs.#ctor(System.Int32,System.Int32)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Documents.PaginationProgressEventArgs" /> class. </summary>
      <param name="start">The page number (zero-based) of first page paginated.</param>
      <param name="count">The number of continuous pages paginated.</param>
    </member>
    <member name="P:System.Windows.Documents.PaginationProgressEventArgs.Count">
      <summary> Gets the number of continuous pages that were paginated. </summary>
      <returns>The number of continuous pages that were paginated.</returns>
    </member>
    <member name="P:System.Windows.Documents.PaginationProgressEventArgs.Start">
      <summary> Gets the page number of the first page that was paginated. </summary>
      <returns>The page number (zero-based) of first page that was paginated.</returns>
    </member>
    <member name="T:System.Windows.Documents.PaginationProgressEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Documents.DynamicDocumentPaginator.PaginationProgress" /> event. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Ink.ApplicationGesture">
      <summary>Specifies the available application-specific <paramref name="gesture" />.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.AllGestures">
      <summary>Recognizes all application-specific gestures.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.ArrowDown">
      <summary>Has no suggested semantic behavior or action. The arrow can be drawn in single stroke or in two strokes where one stroke is the line and the other is the arrow head. Do not use more than two strokes to draw the arrow.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.ArrowLeft">
      <summary>Has no suggested semantic behavior or action. The arrow can be drawn in single stroke or in two strokes where one stroke is the line and the other is the arrow head. Do not use more than two strokes to draw the arrow.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.ArrowRight">
      <summary>Has no suggested semantic behavior or action. The arrow can be drawn in single stroke or in two strokes where one stroke is the line and the other is the arrow head. Do not use more than two strokes to draw the arrow.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.ArrowUp">
      <summary>Has no suggested semantic behavior or action. The arrow can be drawn in single stroke or in two strokes where one stroke is the line and the other is the arrow head. Do not use more than two strokes to draw the arrow.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.Check">
      <summary>Has no suggested semantic behavior or action. The upward stroke must be twice as long as the smaller downward stroke.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.ChevronDown">
      <summary>Has no suggested semantic behavior or action. Both sides of the chevron must be drawn as equal as possible. The angle must be sharp and end in a point.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.ChevronLeft">
      <summary>Has no suggested semantic behavior or action. Both sides of the chevron must be drawn as equal as possible. The angle must be sharp and end in a point.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.ChevronRight">
      <summary>Has no suggested semantic behavior or action. Both sides of the chevron must be drawn as equal as possible. The angle must be sharp and end in a point.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.ChevronUp">
      <summary>Has no suggested semantic behavior or action. Both sides of the chevron must be drawn as equal as possible. The angle must be sharp and end in a point.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.Circle">
      <summary>Has no suggested semantic behavior or action. The circle must be drawn in a single stroke without lifting the pen.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.Curlicue">
      <summary>Has no suggested semantic behavior or action. Start the curlicue on the word you intend to cut.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.DoubleCircle">
      <summary>Has no suggested semantic behavior or action. The two circles must overlap each other and be drawn in a single stroke without lifting the pen.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.DoubleCurlicue">
      <summary>Has no suggested semantic behavior or action. Start the double-curlicue on the word you intend to copy.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.DoubleTap">
      <summary>Signifies a mouse double-click. The two taps must be made quickly to result in the least amount of slippage and the least duration between taps. In addition, the taps must be as close to each other as possible.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.Down">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn as a single fast flick in the downward direction.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.DownLeft">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the down stroke. The two sides must be as equal in length as possible and at a right angle.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.DownLeftLong">
      <summary>Signifies pressing an ENTER key. This gesture must be drawn in a single stroke starting with the down stroke. The left stroke is about twice as long as the up stroke, and the two strokes must be at a right angle.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.DownRight">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the down stroke. The two sides must be as equal in length as possible and at a right angle.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.DownRightLong">
      <summary>Signifies pressing the spacebar. This gesture must be drawn in a single stroke starting with the down stroke. The right stroke must be about twice as long as the up stroke, and the two strokes must be at a right angle.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.DownUp">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the down stroke. The two strokes must be as close to each other as possible.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.Exclamation">
      <summary>Has no suggested semantic behavior or action. The line must be drawn first and then the dot drawn quickly and as close to the line as possible.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.Left">
      <summary>Specifies a backspace. This gesture must be drawn as a single fast flick to the left.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.LeftDown">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the left stroke. The two sides are as equal in length as possible and at a right angle.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.LeftRight">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the left stroke. The two sides are as equal in length as possible and at a right angle.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.LeftUp">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the left stroke. The two sides must be as equal in length as possible and at a right angle.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.NoGesture">
      <summary>Recognizes no application-specific gestures.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.Right">
      <summary>Signifies a space. This gesture must be drawn as a single fast flick to the right.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.RightDown">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the right stroke. The two sides must be as equal in length as possible and at a right angle.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.RightLeft">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the right stroke. The two strokes must be as close to each other as possible.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.RightUp">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the right stroke. The two sides must be as equal in length as possible and at a right angle.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.ScratchOut">
      <summary>Erases content. This gesture must be drawn as a single stroke that has at least three back-and-forth motions.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.SemicircleLeft">
      <summary>Has no suggested semantic behavior or action. The semicircle must be drawn from left to right. The two ends of the semicircle should be as horizontally even as possible.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.SemicircleRight">
      <summary>Has no suggested semantic behavior or action. The semicircle must be drawn from right to left. The two ends of the semicircle should be as horizontally even as possible.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.Square">
      <summary>Has no suggested semantic behavior or action. The square can be drawn in one or two strokes. In one stroke, draw the entire square without lifting the pen. In two strokes, draw three sides of the square and use another stroke to draw the remaining side. Do not use more than two strokes to draw the square.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.Star">
      <summary>Has no suggested semantic behavior or action. The star must have exactly five points and be drawn in a single stroke without lifting the pen.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.Tap">
      <summary>Signifies a mouse click. For the least amount of slippage, the tap must be made quickly.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.Triangle">
      <summary>Has no suggested semantic behavior or action. The triangle must be drawn in a single stroke, without lifting the pen.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.Up">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn as a single fast flick in the upward direction.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.UpDown">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the up stroke. The two strokes must be as close to each other as possible.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.UpLeft">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the up stroke. The two sides must be as equal in length as possible and at a right angle.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.UpLeftLong">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the up stroke. The left stroke must be about twice as long as the up stroke, and the two strokes must be at a right angle.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.UpRight">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the up stroke. The two sides must be as equal in length as possible and at a right angle.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.UpRightLong">
      <summary>Signifies pressing a TAB key. This gesture must be drawn in a single stroke starting with the up stroke. The right stroke must be about twice as long as the up stroke, and the two strokes must be at a right angle.</summary>
    </member>
    <member name="T:System.Windows.Ink.DrawingAttributeIds">
      <summary>Contains a set of GUIDs that identify the properties in the <see cref="T:System.Windows.Ink.DrawingAttributes" /> class.</summary>
    </member>
    <member name="F:System.Windows.Ink.DrawingAttributeIds.Color">
      <summary>Identifies the <see cref="P:System.Windows.Ink.DrawingAttributes.Color" /> property.</summary>
    </member>
    <member name="F:System.Windows.Ink.DrawingAttributeIds.DrawingFlags">
      <summary>Identifies the internal DrawingFlags property.</summary>
    </member>
    <member name="F:System.Windows.Ink.DrawingAttributeIds.IsHighlighter">
      <summary>Identifies the <see cref="P:System.Windows.Ink.DrawingAttributes.IsHighlighter" /> property.</summary>
    </member>
    <member name="F:System.Windows.Ink.DrawingAttributeIds.StylusHeight">
      <summary>Identifies the <see cref="P:System.Windows.Ink.DrawingAttributes.Height" /> property.</summary>
    </member>
    <member name="F:System.Windows.Ink.DrawingAttributeIds.StylusTip">
      <summary>Identifies the <see cref="P:System.Windows.Ink.DrawingAttributes.StylusTip" /> property.</summary>
    </member>
    <member name="F:System.Windows.Ink.DrawingAttributeIds.StylusTipTransform">
      <summary>Identifies the <see cref="P:System.Windows.Ink.DrawingAttributes.StylusTipTransform" /> property.</summary>
    </member>
    <member name="F:System.Windows.Ink.DrawingAttributeIds.StylusWidth">
      <summary>Identifies the <see cref="P:System.Windows.Ink.DrawingAttributes.Width" /> property.</summary>
    </member>
    <member name="T:System.Windows.Ink.DrawingAttributes">
      <summary>Specifies the appearance of a <see cref="T:System.Windows.Ink.Stroke" /></summary>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.DrawingAttributes" /> class. </summary>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.AddPropertyData(System.Guid,System.Object)">
      <summary>Adds a custom property to the <see cref="T:System.Windows.Ink.DrawingAttributes" /> object.</summary>
      <param name="propertyDataId">The <see cref="T:System.Guid" /> to associate with the custom property.</param>
      <param name="propertyData">The value of the custom property. <paramref name="propertyData" /> must be of type <see cref="T:System.Char" />, <see cref="T:System.Byte" />, <see cref="T:System.Int16" />, <see cref="T:System.UInt16" />, <see cref="T:System.Int32" />, <see cref="T:System.UInt32" />, <see cref="T:System.Int64" />, <see cref="T:System.UInt64" />, <see cref="T:System.Single" />, <see cref="T:System.Double" />, <see cref="T:System.DateTime" />, <see cref="T:System.Boolean" />, <see cref="T:System.String" />, <see cref="T:System.Decimal" /> or an array of these data types; however it cannot be an array of type <see cref="T:System.String" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyData" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyDataId" /> is an empty <see cref="T:System.Guid" />.-or-<paramref name="propertyData" /> is not one of the allowed data types listed in the Parameters section.</exception>
    </member>
    <member name="E:System.Windows.Ink.DrawingAttributes.AttributeChanged">
      <summary>Occurs when a property in the <see cref="T:System.Windows.Ink.DrawingAttributes" /> object changes.</summary>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.Clone">
      <summary>Copies the <see cref="T:System.Windows.Ink.DrawingAttributes" /> object.</summary>
      <returns>A copy of the <see cref="T:System.Windows.Ink.DrawingAttributes" /> object.</returns>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.Color">
      <summary>Gets or sets the color of a <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <returns>The color of a <see cref="T:System.Windows.Ink.Stroke" />.</returns>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.ContainsPropertyData(System.Guid)">
      <summary>Returns a value that indicates whether the specified property data identifier is in the <see cref="T:System.Windows.Ink.DrawingAttributes" /> object.</summary>
      <returns>true if the specified property data identifier is in the <see cref="T:System.Windows.Ink.DrawingAttributes" /> object; otherwise, false.</returns>
      <param name="propertyDataId">The <see cref="T:System.Guid" /> to locate in the <see cref="T:System.Windows.Ink.DrawingAttributes" /> object .</param>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Ink.DrawingAttributes" /> object is equal to the current <see cref="T:System.Windows.Ink.DrawingAttributes" /> object. </summary>
      <returns>true if the objects are equal; otherwise, false.</returns>
      <param name="o">The <see cref="T:System.Windows.Ink.DrawingAttributes" /> object to compare to the current <see cref="T:System.Windows.Ink.DrawingAttributes" /> object.</param>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.FitToCurve">
      <summary>Gets or sets a value that indicates whether Bezier smoothing is used to render the <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <returns>true to use Bezier smoothing to render the <see cref="T:System.Windows.Ink.Stroke" />; otherwise false. The default is false.</returns>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.GetHashCode"></member>
    <member name="M:System.Windows.Ink.DrawingAttributes.GetPropertyData(System.Guid)">
      <summary>Gets the value of the custom property associated with the specified <see cref="T:System.Guid" />.</summary>
      <returns>The value of the custom property associated with the specified <see cref="T:System.Guid" />.</returns>
      <param name="propertyDataId">The <see cref="T:System.Guid" /> associated with the custom property to get.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyDataId" /> is not associated with a custom property of the <see cref="T:System.Windows.Ink.DrawingAttributes" /> object.</exception>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.GetPropertyDataIds">
      <summary>Returns the GUIDs of any custom properties associated with the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <returns>An array of type <see cref="T:System.Guid" /> that represents the property data identifiers.</returns>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.Height">
      <summary>Gets or sets the height of the stylus used to draw the <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <returns>The value that indicates the height of the stylus used to draw the <see cref="T:System.Windows.Ink.Stroke" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.Windows.Ink.DrawingAttributes.Height" /> property is less than <see cref="F:System.Double.Epsilon" /> or <see cref="F:System.Double.NaN" />.</exception>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.IgnorePressure">
      <summary>Gets or sets a value that indicates whether the thickness of a rendered <see cref="T:System.Windows.Ink.Stroke" /> changes according the amount of pressure applied.</summary>
      <returns>true to indicate that the thickness of the stroke is uniform; false to indicate that the thickness of a rendered <see cref="T:System.Windows.Ink.Stroke" /> increases when pressure is increased. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.IsHighlighter">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Windows.Ink.Stroke" /> looks like a highlighter.</summary>
      <returns>true to render the <see cref="T:System.Windows.Ink.Stroke" /> as a highlighter; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Ink.DrawingAttributes.MaxHeight">
      <summary>Specifies the largest value allowed for the <see cref="P:System.Windows.Ink.DrawingAttributes.Height" /> property.</summary>
    </member>
    <member name="F:System.Windows.Ink.DrawingAttributes.MaxWidth">
      <summary>Specifies the largest value allowed for the <see cref="P:System.Windows.Ink.DrawingAttributes.Width" /> property.</summary>
    </member>
    <member name="F:System.Windows.Ink.DrawingAttributes.MinHeight">
      <summary>Specifies the smallest value allowed for the <see cref="P:System.Windows.Ink.DrawingAttributes.Height" /> property.</summary>
    </member>
    <member name="F:System.Windows.Ink.DrawingAttributes.MinWidth">
      <summary>Specifies the smallest value allowed for the <see cref="P:System.Windows.Ink.DrawingAttributes.Width" /> property.</summary>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.OnAttributeChanged(System.Windows.Ink.PropertyDataChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Ink.DrawingAttributes.AttributeChanged" /> event. </summary>
      <param name="e">A <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs" /> that contains the event data. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Occurs when any <see cref="T:System.Windows.Ink.DrawingAttributes" /> property changes.</summary>
      <param name="e">EventArgs</param>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Ink.DrawingAttributes.PropertyDataChanged" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs" /> that contains the event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.op_Equality(System.Windows.Ink.DrawingAttributes,System.Windows.Ink.DrawingAttributes)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Ink.DrawingAttributes" /> objects are equal.</summary>
      <returns>true if the objects are equal; otherwise, false.</returns>
      <param name="first">The first <see cref="T:System.Windows.Ink.DrawingAttributes" /> object to compare.</param>
      <param name="second">The second <see cref="T:System.Windows.Ink.DrawingAttributes" /> object to compare.</param>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.op_Inequality(System.Windows.Ink.DrawingAttributes,System.Windows.Ink.DrawingAttributes)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Ink.DrawingAttributes" /> objects are not equal.</summary>
      <returns>true if the objects are not equal; otherwise, false.</returns>
      <param name="first">The first <see cref="T:System.Windows.Ink.DrawingAttributes" /> object to compare.</param>
      <param name="second">The second <see cref="T:System.Windows.Ink.DrawingAttributes" /> object to compare.</param>
    </member>
    <member name="E:System.Windows.Ink.DrawingAttributes.PropertyDataChanged">
      <summary>Occurs when property data is added or removed from the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.RemovePropertyData(System.Guid)">
      <summary>Removes the custom property associated with the specified <see cref="T:System.Guid" />.</summary>
      <param name="propertyDataId">The <see cref="T:System.Guid" /> associated with the custom property to remove.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyDataId" /> is not associated with a custom property of the <see cref="T:System.Windows.Ink.DrawingAttributes" /> object.</exception>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.StylusTip">
      <summary>Gets or sets the shape of the stylus used to draw the <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <returns>One of the <see cref="T:System.Windows.Ink.StylusShape" /> values.</returns>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.StylusTipTransform">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Matrix" /> that specifies the transformation to perform on the stylus' tip.</summary>
      <returns>A <see cref="T:System.Windows.Media.Matrix" /> that specifies the transformation to perform on the stylus' tip.</returns>
      <exception cref="T:System.ArgumentException">The matrix set to <see cref="P:System.Windows.Ink.DrawingAttributes.StylusTipTransform" /> is not an invertible matrix.-or-The <see cref="P:System.Windows.Media.Matrix.OffsetX" /> or <see cref="P:System.Windows.Media.Matrix.OffsetY" /> property of the matrix is not zero.</exception>
    </member>
    <member name="E:System.Windows.Ink.DrawingAttributes.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Occurs when the value of any <see cref="T:System.Windows.Ink.DrawingAttributes" /> property has changed.</summary>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.Width">
      <summary>Gets or sets the width of the stylus used to draw the <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <returns>The width of the stylus used to draw the <see cref="T:System.Windows.Ink.Stroke" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.Windows.Ink.DrawingAttributes.Width" /> property is less than <see cref="F:System.Double.Epsilon" /> or <see cref="F:System.Double.NaN" />.</exception>
    </member>
    <member name="T:System.Windows.Ink.DrawingAttributesReplacedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.InkCanvas.DefaultDrawingAttributesReplaced" /> event.</summary>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributesReplacedEventArgs.#ctor(System.Windows.Ink.DrawingAttributes,System.Windows.Ink.DrawingAttributes)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.DrawingAttributesReplacedEventArgs" /> class. </summary>
      <param name="newDrawingAttributes">The new <see cref="T:System.Windows.Ink.DrawingAttributes" />.</param>
      <param name="previousDrawingAttributes">The old <see cref="T:System.Windows.Ink.DrawingAttributes" />.</param>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributesReplacedEventArgs.NewDrawingAttributes">
      <summary>Gets the new <see cref="T:System.Windows.Ink.DrawingAttributes" />.</summary>
      <returns>The new <see cref="T:System.Windows.Ink.DrawingAttributes" />. </returns>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributesReplacedEventArgs.PreviousDrawingAttributes">
      <summary>Gets the old <see cref="T:System.Windows.Ink.DrawingAttributes" />.</summary>
      <returns>The old <see cref="T:System.Windows.Ink.DrawingAttributes" />.</returns>
    </member>
    <member name="T:System.Windows.Ink.DrawingAttributesReplacedEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Windows.Controls.InkCanvas.DefaultDrawingAttributesReplaced" /> event of an <see cref="T:System.Windows.Controls.InkCanvas" />.  </summary>
      <param name="sender">The source of the event. </param>
      <param name="e">A <see cref="T:System.Windows.Ink.DrawingAttributesReplacedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:System.Windows.Ink.EllipseStylusShape">
      <summary>Represents a stylus tip shaped like an ellipse.</summary>
    </member>
    <member name="M:System.Windows.Ink.EllipseStylusShape.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.EllipseStylusShape" /> class with the specified width and height. </summary>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:System.Windows.Ink.EllipseStylusShape.#ctor(System.Double,System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.EllipseStylusShape" /> class with the specified width, height, and angle.</summary>
      <param name="width"></param>
      <param name="height"></param>
      <param name="rotation">The angle of the stylus shape.</param>
    </member>
    <member name="T:System.Windows.Ink.GestureRecognitionResult">
      <summary>Contains information about an ink gesture.</summary>
    </member>
    <member name="P:System.Windows.Ink.GestureRecognitionResult.ApplicationGesture">
      <summary>Gets the recognized ink gesture.</summary>
      <returns>The recognized ink gesture.</returns>
    </member>
    <member name="P:System.Windows.Ink.GestureRecognitionResult.RecognitionConfidence">
      <summary>Gets the level of confidence that the <see cref="T:System.Windows.Ink.GestureRecognizer" /> has in the recognition of the gesture.</summary>
      <returns>One of the <see cref="T:System.Windows.Ink.RecognitionConfidence" /> levels.</returns>
    </member>
    <member name="T:System.Windows.Ink.GestureRecognizer">
      <summary>Recognizes ink gestures.</summary>
    </member>
    <member name="M:System.Windows.Ink.GestureRecognizer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.GestureRecognizer" /> class. </summary>
    </member>
    <member name="M:System.Windows.Ink.GestureRecognizer.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Ink.ApplicationGesture})">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.GestureRecognizer" /> class. </summary>
      <param name="enabledApplicationGestures">An array of type <see cref="T:System.Windows.Ink.ApplicationGesture" /> that specifies the application gestures the <see cref="T:System.Windows.Ink.GestureRecognizer" /> will recognize.</param>
    </member>
    <member name="M:System.Windows.Ink.GestureRecognizer.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Windows.Ink.GestureRecognizer" />. </summary>
    </member>
    <member name="M:System.Windows.Ink.GestureRecognizer.GetEnabledGestures">
      <summary>Gets the gestures that the <see cref="T:System.Windows.Ink.GestureRecognizer" /> recognizes.</summary>
      <returns>An array of type <see cref="T:System.Windows.Ink.ApplicationGesture" /> that contains gestures the <see cref="T:System.Windows.Ink.GestureRecognizer" /> is set to recognize.</returns>
    </member>
    <member name="P:System.Windows.Ink.GestureRecognizer.IsRecognizerAvailable">
      <summary>Gets a Boolean that indicates whether the gesture recognizer is available on the user's system.</summary>
      <returns>true if the recognition component is available; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Ink.GestureRecognizer.Recognize(System.Windows.Ink.StrokeCollection)">
      <summary>Looks for gestures in the specified <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <returns>An array of type <see cref="T:System.Windows.Ink.GestureRecognitionResult" /> that contains application gestures that the <see cref="T:System.Windows.Ink.GestureRecognizer" /> recognized.</returns>
      <param name="strokes">The <see cref="T:System.Windows.Ink.StrokeCollection" /> to search for gestures.</param>
    </member>
    <member name="M:System.Windows.Ink.GestureRecognizer.SetEnabledGestures(System.Collections.Generic.IEnumerable{System.Windows.Ink.ApplicationGesture})">
      <summary>Sets the application gestures that the <see cref="T:System.Windows.Ink.GestureRecognizer" /> recognizes.</summary>
      <param name="applicationGestures">An array of type <see cref="T:System.Windows.Ink.ApplicationGesture" /> that specifies the application gestures you wish the <see cref="T:System.Windows.Ink.GestureRecognizer" /> to recognize.</param>
    </member>
    <member name="T:System.Windows.Ink.IncrementalHitTester">
      <summary>Dynamically performs hit testing on a <see cref="T:System.Windows.Ink.Stroke" />.</summary>
    </member>
    <member name="M:System.Windows.Ink.IncrementalHitTester.AddPoint(System.Windows.Point)">
      <summary>Adds a <see cref="T:System.Windows.Point" /> to the <see cref="T:System.Windows.Ink.IncrementalHitTester" />.</summary>
      <param name="point">The <see cref="T:System.Windows.Point" /> to add to the <see cref="T:System.Windows.Ink.IncrementalHitTester" />.</param>
    </member>
    <member name="M:System.Windows.Ink.IncrementalHitTester.AddPoints(System.Collections.Generic.IEnumerable{System.Windows.Point})">
      <summary>Adds points to the <see cref="T:System.Windows.Ink.IncrementalHitTester" />.</summary>
      <param name="points">An array of type <see cref="T:System.Windows.Point" /> to add to the <see cref="T:System.Windows.Ink.IncrementalHitTester" />.</param>
    </member>
    <member name="M:System.Windows.Ink.IncrementalHitTester.AddPoints(System.Windows.Input.StylusPointCollection)">
      <summary>Adds the specified <see cref="T:System.Windows.Input.StylusPoint" /> objects to the <see cref="T:System.Windows.Ink.IncrementalHitTester" />.</summary>
      <param name="stylusPoints">A collection of <see cref="T:System.Windows.Input.StylusPoint" /> objects to add to the <see cref="T:System.Windows.Ink.IncrementalHitTester" />.</param>
    </member>
    <member name="M:System.Windows.Ink.IncrementalHitTester.AddPointsCore(System.Collections.Generic.IEnumerable{System.Windows.Point})">
      <summary>Adds points to the <see cref="T:System.Windows.Ink.IncrementalHitTester" />.</summary>
      <param name="points">The points to add</param>
    </member>
    <member name="M:System.Windows.Ink.IncrementalHitTester.EndHitTesting">
      <summary>Releases resources used by the <see cref="T:System.Windows.Ink.IncrementalHitTester" />. </summary>
    </member>
    <member name="P:System.Windows.Ink.IncrementalHitTester.IsValid">
      <summary>Gets whether the <see cref="T:System.Windows.Ink.IncrementalHitTester" /> is hit testing.</summary>
      <returns>true if the <see cref="T:System.Windows.Ink.IncrementalHitTester" /> is hit testing; otherwise, false. </returns>
    </member>
    <member name="T:System.Windows.Ink.IncrementalLassoHitTester">
      <summary>Dynamically hit tests a <see cref="T:System.Windows.Ink.Stroke" /> with a lasso.</summary>
    </member>
    <member name="M:System.Windows.Ink.IncrementalLassoHitTester.AddPointsCore(System.Collections.Generic.IEnumerable{System.Windows.Point})">
      <summary>Adds points to the <see cref="T:System.Windows.Ink.IncrementalHitTester" />.</summary>
      <param name="points"></param>
    </member>
    <member name="M:System.Windows.Ink.IncrementalLassoHitTester.OnSelectionChanged(System.Windows.Ink.LassoSelectionChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged" /> event. </summary>
      <param name="eventArgs">Event data.</param>
    </member>
    <member name="E:System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged">
      <summary>Occurs when the lasso path selects or unselects an ink <see cref="T:System.Windows.Ink.Stroke" />. </summary>
    </member>
    <member name="T:System.Windows.Ink.IncrementalStrokeHitTester">
      <summary>Dynamically hit tests a stroke with an eraser path.</summary>
    </member>
    <member name="M:System.Windows.Ink.IncrementalStrokeHitTester.AddPointsCore(System.Collections.Generic.IEnumerable{System.Windows.Point})">
      <param name="points">The points.</param>
    </member>
    <member name="M:System.Windows.Ink.IncrementalStrokeHitTester.OnStrokeHit(System.Windows.Ink.StrokeHitEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Ink.IncrementalStrokeHitTester.StrokeHit" /> event.</summary>
      <param name="eventArgs">Event data.</param>
    </member>
    <member name="E:System.Windows.Ink.IncrementalStrokeHitTester.StrokeHit">
      <summary>Occurs when the <see cref="T:System.Windows.Ink.IncrementalStrokeHitTester" /> intersects an ink <see cref="T:System.Windows.Ink.Stroke" />.</summary>
    </member>
    <member name="T:System.Windows.Ink.LassoSelectionChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged" /> event. </summary>
    </member>
    <member name="P:System.Windows.Ink.LassoSelectionChangedEventArgs.DeselectedStrokes">
      <summary>Gets the strokes that have been removed from lasso path since the last time the <see cref="E:System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged" /> event was raised. </summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains the strokes that have been removed from the lasso path since the last time the <see cref="E:System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged" /> event was raised. </returns>
    </member>
    <member name="P:System.Windows.Ink.LassoSelectionChangedEventArgs.SelectedStrokes">
      <summary>Gets the strokes that have been surrounded by the lasso path since the last time the <see cref="E:System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged" /> event was raised.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains the strokes that have been surrounded by the lasso path since the last time the <see cref="E:System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged" /> event was raised.</returns>
    </member>
    <member name="T:System.Windows.Ink.LassoSelectionChangedEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged" /> event of a <see cref="T:System.Windows.Ink.IncrementalLassoHitTester" />. </summary>
      <param name="sender">The source of the event. </param>
      <param name="e">A <see cref="T:System.Windows.Ink.LassoSelectionChangedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:System.Windows.Ink.PropertyDataChangedEventArgs">
      <summary>Provides data for the PropertyDataChanged event.</summary>
    </member>
    <member name="M:System.Windows.Ink.PropertyDataChangedEventArgs.#ctor(System.Guid,System.Object,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs" /> class.</summary>
      <param name="propertyGuid">The <see cref="T:System.Guid" /> of the custom property which changed.</param>
      <param name="newValue">The new custom property object.</param>
      <param name="previousValue">The previous custom property object.</param>
    </member>
    <member name="P:System.Windows.Ink.PropertyDataChangedEventArgs.NewValue">
      <summary>Gets the new custom property object. </summary>
    </member>
    <member name="P:System.Windows.Ink.PropertyDataChangedEventArgs.PreviousValue">
      <summary>Gets the previous custom property object.</summary>
    </member>
    <member name="P:System.Windows.Ink.PropertyDataChangedEventArgs.PropertyGuid">
      <summary>Gets the <see cref="T:System.Guid" /> of the custom property which changed.</summary>
    </member>
    <member name="T:System.Windows.Ink.PropertyDataChangedEventHandler">
      <summary>Represents the method that handles the PropertyDataChanged event. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e"></param>
    </member>
    <member name="T:System.Windows.Ink.RecognitionConfidence">
      <summary>Specifies the confidence level that the <see cref="T:System.Windows.Ink.GestureRecognizer" /> determines for a particular ink gesture.</summary>
    </member>
    <member name="F:System.Windows.Ink.RecognitionConfidence.Strong">
      <summary>Indicates strong confidence in the recognition result.</summary>
    </member>
    <member name="F:System.Windows.Ink.RecognitionConfidence.Intermediate">
      <summary>Indicates intermediate confidence in the recognition result.</summary>
    </member>
    <member name="F:System.Windows.Ink.RecognitionConfidence.Poor">
      <summary>Indicates poor confidence in the recognition result.</summary>
    </member>
    <member name="T:System.Windows.Ink.RectangleStylusShape">
      <summary>Represents a rectangular stylus tip.</summary>
    </member>
    <member name="M:System.Windows.Ink.RectangleStylusShape.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.RectangleStylusShape" /> class with the specified width and height.</summary>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:System.Windows.Ink.RectangleStylusShape.#ctor(System.Double,System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.RectangleStylusShape" /> class with the specified width, height, and angle.</summary>
      <param name="width"></param>
      <param name="height"></param>
      <param name="rotation"></param>
    </member>
    <member name="T:System.Windows.Ink.Stroke">
      <summary>Represents a single ink stroke.</summary>
    </member>
    <member name="M:System.Windows.Ink.Stroke.#ctor(System.Windows.Input.StylusPointCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.Stroke" /> class. </summary>
      <param name="stylusPoints">A <see cref="T:System.Windows.Input.StylusPointCollection" /> that represents the <see cref="T:System.Windows.Ink.Stroke" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylusPoints" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stylusPoints" /> is empty..</exception>
    </member>
    <member name="M:System.Windows.Ink.Stroke.#ctor(System.Windows.Input.StylusPointCollection,System.Windows.Ink.DrawingAttributes)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.Stroke" /> class. </summary>
      <param name="stylusPoints">A <see cref="T:System.Windows.Input.StylusPointCollection" /> that represents the <see cref="T:System.Windows.Ink.Stroke" />.</param>
      <param name="drawingAttributes">A <see cref="T:System.Windows.Ink.DrawingAttributes" /> object that specifies the appearance of the <see cref="T:System.Windows.Ink.Stroke" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylusPoints" /> is null.-or-<paramref name="drawingAtrributes" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stylusPoints" /> is empty.</exception>
    </member>
    <member name="M:System.Windows.Ink.Stroke.AddPropertyData(System.Guid,System.Object)">
      <summary>Adds a custom property to the <see cref="T:System.Windows.Ink.Stroke" /> object.</summary>
      <param name="propertyDataId">The unique identifier for the property.</param>
      <param name="propertyData">The value of the custom property. <paramref name="propertyData" /> must be of type <see cref="T:System.Char" />, <see cref="T:System.Byte" />,<see cref="T:System.Int16" />,,<see cref="T:System.UInt16" />, <see cref="T:System.Int32" />, <see cref="T:System.UInt32" />, <see cref="T:System.Int64" />, <see cref="T:System.UInt64" />, <see cref="T:System.Single" />, <see cref="T:System.Double" />, <see cref="T:System.DateTime" />, <see cref="T:System.Boolean" />, <see cref="T:System.String" />, <see cref="T:System.Decimal" />  or an array of these data types, except <see cref="T:System.String" />, which is not allowed.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="propertyData" /> argument is not one of the allowed data types listed in the Parameters section.</exception>
    </member>
    <member name="M:System.Windows.Ink.Stroke.Clone">
      <summary>Returns a deep copy of the existing <see cref="T:System.Windows.Ink.Stroke" /> object.</summary>
      <returns>The new <see cref="T:System.Windows.Ink.Stroke" /> object.</returns>
    </member>
    <member name="M:System.Windows.Ink.Stroke.ContainsPropertyData(System.Guid)">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.Ink.Stroke" /> object contains the specified custom property.</summary>
      <returns>Returns true if the custom property exists; otherwise, returns false.</returns>
      <param name="propertyDataId">The unique identifier for the property.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.Draw(System.Windows.Media.DrawingContext)">
      <summary>Renders the <see cref="T:System.Windows.Ink.Stroke" /> object based upon the specified <see cref="T:System.Windows.Media.DrawingContext" />.</summary>
      <param name="context"></param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.Draw(System.Windows.Media.DrawingContext,System.Windows.Ink.DrawingAttributes)">
      <summary>Renders the <see cref="T:System.Windows.Ink.Stroke" /> object based upon the specified <see cref="T:System.Windows.Media.DrawingContext" /> and <see cref="T:Microsoft.Ink.DrawingAttributes" />.</summary>
      <param name="drawingContext">The <see cref="T:System.Windows.Media.DrawingContext" /> object onto which the stroke will be rendered.</param>
      <param name="drawingAttributes">The <see cref="T:Microsoft.Ink.DrawingAttributes" /> object defining the attributes of the stroke that is drawn.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.DrawCore(System.Windows.Media.DrawingContext,System.Windows.Ink.DrawingAttributes)">
      <summary>Renders the <see cref="T:System.Windows.Ink.Stroke" /> on the specified <see cref="T:System.Windows.Media.DrawingContext" /> using the specified <see cref="T:Microsoft.Ink.DrawingAttributes" />.</summary>
      <param name="drawingContext">The <see cref="T:System.Windows.Media.DrawingContext" /> object onto which the stroke will be rendered.</param>
      <param name="drawingAttributes">The <see cref="T:Microsoft.Ink.DrawingAttributes" /> object defining the attributes of the stroke that is drawn.</param>
    </member>
    <member name="P:System.Windows.Ink.Stroke.DrawingAttributes">
      <summary>Gets or sets the <see cref="T:System.Windows.Ink.DrawingAttributes" /> for the <see cref="T:System.Windows.Ink.Stroke" /> object. </summary>
      <exception cref="T:System.ArgumentNullException">The set value is null.</exception>
    </member>
    <member name="E:System.Windows.Ink.Stroke.DrawingAttributesChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Ink.Stroke.DrawingAttributes" /> associated with the <see cref="T:System.Windows.Ink.Stroke" /> object change. </summary>
    </member>
    <member name="E:System.Windows.Ink.Stroke.DrawingAttributesReplaced">
      <summary>Occurs when the drawing attributes of a <see cref="T:System.Windows.Ink.Stroke" /> object are replaced.</summary>
    </member>
    <member name="M:System.Windows.Ink.Stroke.GetBezierStylusPoints">
      <summary>Returns the stylus points the <see cref="T:System.Windows.Ink.Stroke" /> uses when <see cref="P:System.Windows.Ink.DrawingAttributes.FitToCurve" /> is true.</summary>
      <returns>A <see cref="T:System.Windows.Input.StylusPointCollection" /> that contains the stylus points along the spine of a <see cref="T:System.Windows.Ink.Stroke" /> when <see cref="P:System.Windows.Ink.DrawingAttributes.FitToCurve" /> is true</returns>
    </member>
    <member name="M:System.Windows.Ink.Stroke.GetBounds">
      <summary>Retrieves the bounding box for the <see cref="T:System.Windows.Ink.Stroke" /> object.</summary>
      <returns>A <see cref="T:System.Windows.Rect" /> structure defining the bounding box for the <see cref="T:System.Windows.Ink.Stroke" /> object.</returns>
    </member>
    <member name="M:System.Windows.Ink.Stroke.GetClipResult(System.Collections.Generic.IEnumerable{System.Windows.Point})">
      <summary>Returns segments of the current <see cref="T:System.Windows.Ink.Stroke" /> that are within the specified bounds.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains copies of the segments of the current <see cref="T:System.Windows.Ink.Stroke" /> that are within the specified bounds.</returns>
      <param name="lassoPoints">The points that specify the line which defines where to clip.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.GetClipResult(System.Windows.Rect)">
      <summary>Returns segments of the current <see cref="T:System.Windows.Ink.Stroke" /> that are within the specified rectangle.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains copies of the segments of the current <see cref="T:System.Windows.Ink.Stroke" /> that are within the bounds of <paramref name="bounds" />.</returns>
      <param name="bounds">A <see cref="T:System.Windows.Rect" /> that specifies the area to clip.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.GetEraseResult(System.Collections.Generic.IEnumerable{System.Windows.Point})">
      <summary>Returns segments of the current <see cref="T:System.Windows.Ink.Stroke" /> that are outside the specified bounds.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains the segments of the current <see cref="T:System.Windows.Ink.Stroke" /> that are outside the specified bounds.</returns>
      <param name="lassoPoints">An array of type <see cref="T:System.Windows.Point" /> that specifies the area to erase.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.GetEraseResult(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Windows.Ink.StylusShape)">
      <summary>Returns the segments of the current <see cref="T:System.Windows.Ink.Stroke" /> after it is dissected by the designated path using the specified <see cref="T:System.Windows.Ink.StylusShape" />.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains copies of the segments of the current <see cref="T:System.Windows.Ink.Stroke" /> after it is dissected by the specified path.</returns>
      <param name="eraserPath">An array of type <see cref="T:System.Windows.Point" /> that specifies the path that dissects the <see cref="T:System.Windows.Ink.Stroke" />.</param>
      <param name="eraserShape">A <see cref="T:System.Windows.Ink.StylusShape" /> that specifies the shape of the eraser.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.GetEraseResult(System.Windows.Rect)">
      <summary>Returns segments of the current <see cref="T:System.Windows.Ink.Stroke" /> that are outside the specified rectangle.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains the segments of the current <see cref="T:System.Windows.Ink.Stroke" /> that are outside the bounds of the specified <see cref="T:System.Windows.Rect" />.</returns>
      <param name="bounds">A <see cref="T:System.Windows.Rect" /> that specifies the area to erase.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.GetGeometry">
      <summary>Gets the <see cref="T:System.Windows.Media.Geometry" /> of the current <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <returns>A <see cref="T:System.Windows.Media.Geometry" /> that represents the <see cref="T:System.Windows.Ink.Stroke" />.</returns>
    </member>
    <member name="M:System.Windows.Ink.Stroke.GetGeometry(System.Windows.Ink.DrawingAttributes)">
      <summary>Gets the <see cref="T:System.Windows.Media.Geometry" /> of the current <see cref="T:System.Windows.Ink.Stroke" /> using the specified <see cref="T:System.Windows.Ink.DrawingAttributes" />.</summary>
      <returns>A <see cref="T:System.Windows.Media.Geometry" /> that represents the <see cref="T:System.Windows.Ink.Stroke" />.</returns>
      <param name="drawingAttributes">The <see cref="T:System.Windows.Ink.DrawingAttributes" /> that determines the <see cref="T:System.Windows.Media.Geometry" /> of the <see cref="T:System.Windows.Ink.Stroke" />.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.GetPropertyData(System.Guid)">
      <summary>Retrieves the property data for the specified GUID.</summary>
      <returns>An object containing the property data.</returns>
      <param name="propertyDataId">The unique identifier for the property.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyDataId" /> is not associated with a custom property of the <see cref="T:System.Windows.Ink.Stroke" />.</exception>
    </member>
    <member name="M:System.Windows.Ink.Stroke.GetPropertyDataIds">
      <summary>Retrieves the GUIDs of any custom properties associated with the <see cref="T:System.Windows.Ink.Stroke" /> object.</summary>
      <returns>An array of <see cref="T:System.Guid" /> objects.</returns>
    </member>
    <member name="M:System.Windows.Ink.Stroke.HitTest(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Int32)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Windows.Ink.Stroke" /> is within the specified bounds.</summary>
      <returns>true if the current stroke is within the specified bounds; otherwise false.</returns>
      <param name="lassoPoints">An array of type <see cref="T:System.Windows.Point" /> that represents the bounds of the area to hit test.</param>
      <param name="percentageWithinLasso">The percentage of the length of the <see cref="T:System.Windows.Ink.Stroke" />, that must be in <paramref name="lassoPoints" /> for the <see cref="T:System.Windows.Ink.Stroke" /> to be considered hit.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.HitTest(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Windows.Ink.StylusShape)">
      <summary>Returns whether the specified path intersects the <see cref="T:System.Windows.Ink.Stroke" /> using the specified <see cref="T:System.Windows.Ink.StylusShape" />.</summary>
      <returns>true if <paramref name="stylusShape" /> intersects the current stroke; otherwise, false.</returns>
      <param name="path">The path that <paramref name="stylusShape" /> follows for hit testing</param>
      <param name="stylusShape">The shape of <paramref name="path" /> with which to hit test.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.HitTest(System.Windows.Point)">
      <summary>Returns a value that indicates whether current <see cref="T:System.Windows.Ink.Stroke" /> intersects the specified point.</summary>
      <returns>true if <paramref name="point" /> intersects the current stroke; otherwise, false.</returns>
      <param name="point">The <see cref="T:System.Windows.Point" /> to hit test.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.HitTest(System.Windows.Point,System.Double)">
      <summary>Returns a value that indicates whether current <see cref="T:System.Windows.Ink.Stroke" /> intersects the specified area.</summary>
      <returns>true if the specified area intersects the current stroke; otherwise, false.</returns>
      <param name="point">The <see cref="T:System.Windows.Point" /> that defines the center of the area to hit test.</param>
      <param name="diameter">The diameter of the area to hit test.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.HitTest(System.Windows.Rect,System.Int32)">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.Ink.Stroke" /> is within the bounds of the specified rectangle.</summary>
      <returns>true if the current stroke is within the bounds of <paramref name="bounds" />; otherwise false.</returns>
      <param name="bounds"></param>
      <param name="percentageWithinBounds">The percentage of the length of the <see cref="T:System.Windows.Ink.Stroke" />, that must be in <paramref name="percentageWithinBounds" /> for the <see cref="T:System.Windows.Ink.Stroke" /> to be considered hit..</param>
    </member>
    <member name="E:System.Windows.Ink.Stroke.Invalidated">
      <summary>Occurs when the appearance of the <see cref="T:System.Windows.Ink.Stroke" /> changes.</summary>
    </member>
    <member name="M:System.Windows.Ink.Stroke.OnDrawingAttributesChanged(System.Windows.Ink.PropertyDataChangedEventArgs)">
      <summary>Allows derived classes to modify the default behavior of the <see cref="E:System.Windows.Ink.Stroke.DrawingAttributesChanged" /> event.</summary>
      <param name="e">The <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs" /> object that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.OnDrawingAttributesReplaced(System.Windows.Ink.DrawingAttributesReplacedEventArgs)">
      <summary>Allows derived classes to modify the default behavior of the <see cref="E:System.Windows.Ink.Stroke.DrawingAttributesReplaced" /> event.</summary>
      <param name="e">The <see cref="T:System.Windows.Ink.DrawingAttributesReplacedEventArgs" /> object that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.OnInvalidated(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Ink.Stroke.Invalidated" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Occurs when any <see cref="T:System.Windows.Ink.Stroke" /> property changes.</summary>
      <param name="e"></param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)">
      <summary>Allows derived classes to modify the default behavior of the <see cref="E:System.Windows.Ink.Stroke.PropertyDataChanged" /> event.</summary>
      <param name="e">The <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs" /> object that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.OnStylusPointsChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Ink.Stroke.StylusPointsChanged" /> event.</summary>
      <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.OnStylusPointsReplaced(System.Windows.Ink.StylusPointsReplacedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Ink.Stroke.StylusPointsReplaced" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Ink.StylusPointsReplacedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="E:System.Windows.Ink.Stroke.PropertyDataChanged">
      <summary>Occurs when the custom properties on a <see cref="T:System.Windows.Ink.Stroke" /> object changes.</summary>
    </member>
    <member name="M:System.Windows.Ink.Stroke.RemovePropertyData(System.Guid)">
      <summary>Deletes a custom property from the <see cref="T:System.Windows.Ink.Stroke" /> object.</summary>
      <param name="propertyDataId">The unique identifier for the property.</param>
    </member>
    <member name="P:System.Windows.Ink.Stroke.StylusPoints">
      <summary>Returns the stylus points of the <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <returns>The <see cref="T:System.Windows.Input.StylusPointCollection" /> that contains the stylus points that represent the current <see cref="T:System.Windows.Ink.Stroke" />.</returns>
    </member>
    <member name="E:System.Windows.Ink.Stroke.StylusPointsChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Ink.Stroke.StylusPoints" /> property changes.</summary>
    </member>
    <member name="E:System.Windows.Ink.Stroke.StylusPointsReplaced">
      <summary>Occurs when the <see cref="P:System.Windows.Ink.Stroke.StylusPoints" /> property is assigned a new <see cref="T:System.Windows.Input.StylusPointCollection" />.</summary>
    </member>
    <member name="E:System.Windows.Ink.Stroke.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Occurs when the value of any <see cref="T:System.Windows.Ink.Stroke" /> property has changed.</summary>
    </member>
    <member name="M:System.Windows.Ink.Stroke.Transform(System.Windows.Media.Matrix,System.Boolean)">
      <summary>Performs a transformation based upon the specified <see cref="T:System.Windows.Media.Matrix" /> object.</summary>
      <param name="transformMatrix">The <see cref="T:System.Windows.Media.Matrix" /> object defining the transformation.</param>
      <param name="applyToStylusTip">true to apply the transformation to the tip of the stylus; otherwise, false.</param>
    </member>
    <member name="T:System.Windows.Ink.StrokeCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Ink.Stroke" /> objects.</summary>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.StrokeCollection" /> class. </summary>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Ink.Stroke})">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.StrokeCollection" /> class that contains the specified strokes. </summary>
      <param name="strokes">The strokes to add to the <see cref="T:System.Windows.Ink.StrokeCollection" />.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.#ctor(System.IO.Stream)">
      <summary>Initializes a <see cref="T:System.Windows.Ink.StrokeCollection" /> from the specified <see cref="T:System.IO.Stream" /> of Ink Serialized Format (ISF).</summary>
      <param name="stream">A stream that contains ink data.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Add(System.Windows.Ink.StrokeCollection)">
      <summary>Adds the specified strokes to the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <param name="strokes">The <see cref="T:System.Windows.Ink.StrokeCollection" /> to add to the collection.</param>
      <exception cref="T:System.ArgumentException">A <see cref="T:System.Windows.Ink.Stroke" /> in <paramref name="strokes" /> is already a member of the <see cref="T:System.Windows.Ink.StrokeCollection" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="strokes" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.AddPropertyData(System.Guid,System.Object)">
      <summary>Adds a custom property to the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <param name="propertyDataId">The <see cref="T:System.Guid" /> to associate with the custom property.</param>
      <param name="propertyData">The value of the custom property. <paramref name="propertyData" /> must be of type <see cref="T:System.Char" />, <see cref="T:System.Byte" />,<see cref="T:System.Int16" />,,<see cref="T:System.UInt16" />, <see cref="T:System.Int32" />, <see cref="T:System.UInt32" />, <see cref="T:System.Int64" />, <see cref="T:System.UInt64" />, <see cref="T:System.Single" />, <see cref="T:System.Double" />, <see cref="T:System.DateTime" />, <see cref="T:System.Boolean" />, <see cref="T:System.String" />, <see cref="T:System.Decimal" /> or an array of these data types, except <see cref="T:System.String" />, which is not allowed.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyDataId" /> is an empty <see cref="T:System.Guid" />.-or-<paramref name="propertyData" /> is not one of the allowed data types listed in the Parameters section.</exception>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.ClearItems">
      <summary>Clears all strokes from the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Clip(System.Collections.Generic.IEnumerable{System.Windows.Point})">
      <summary>Removes all strokes in the <see cref="T:System.Windows.Ink.StrokeCollection" /> that are outside the bounds of the specified <see cref="T:System.Drawing.Point" /> array.</summary>
      <param name="lassoPoints">An array of type <see cref="T:System.Drawing.Point" /> that specifies the area to be clipped.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Clip(System.Windows.Rect)">
      <summary>Replaces all strokes that are clipped by the specified rectangle with new strokes that do not extend beyond the specified rectangle.  </summary>
      <param name="bounds">A <see cref="T:System.Windows.Rect" /> that specifies the area to be clipped.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Clone">
      <summary>Copies the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <returns>A copy of the <see cref="T:System.Windows.Ink.StrokeCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.ContainsPropertyData(System.Guid)">
      <summary>Returns whether the specified custom property identifier is in the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <returns>true if the specified custom property identifier is in the <see cref="T:System.Windows.Ink.StrokeCollection" />; otherwise, false.</returns>
      <param name="propertyDataId">The <see cref="T:System.Guid" /> to locate in the <see cref="T:System.Windows.Ink.StrokeCollection" />.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Draw(System.Windows.Media.DrawingContext)">
      <summary>Draws the strokes in the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <param name="context">The <see cref="T:System.Windows.Media.DrawingContext" /> on which to draw the <see cref="T:System.Windows.Ink.StrokeCollection" />.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Erase(System.Collections.Generic.IEnumerable{System.Windows.Point})">
      <summary>Removes the ink that is within the bounds of the specified area.</summary>
      <param name="lassoPoints">An array of type <see cref="T:System.Drawing.Point" /> that specifies the area to be erased.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Erase(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Windows.Ink.StylusShape)">
      <summary>Replaces all strokes that are clipped by the region created by the specified <see cref="T:System.Windows.Ink.StylusShape" /> along the specified path with new Strokes that are not clipped by the region.</summary>
      <param name="eraserPath">An array of type <see cref="T:System.Windows.Point" /> that specifies the path to be erased.</param>
      <param name="eraserShape">A <see cref="T:System.Windows.Ink.StylusShape" /> that specifies the shape of the eraser.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Erase(System.Windows.Rect)">
      <summary>Replaces all strokes that are clipped by the specified rectangle with new strokes that do not enter the bounds of the specified rectangle. </summary>
      <param name="bounds"></param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.GetBounds">
      <summary>Returns the bounds of the strokes in the collection.</summary>
      <returns>A <see cref="T:System.Windows.Rect" /> that contains the bounds of the strokes in the <see cref="T:System.Windows.Ink.StrokeCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.GetIncrementalLassoHitTester(System.Int32)">
      <summary>Creates an <see cref="T:System.Windows.Ink.IncrementalLassoHitTester" /> that hit tests the <see cref="T:System.Windows.Ink.StrokeCollection" /> with a lasso (freehand) path.</summary>
      <returns>An <see cref="T:System.Windows.Ink.IncrementalLassoHitTester" /> that hit tests the <see cref="T:System.Windows.Ink.StrokeCollection" />.</returns>
      <param name="percentageWithinLasso">The minimum percentage of each <see cref="T:System.Windows.Ink.Stroke" /> that must be contained within the lasso for it to be considered hit.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.GetIncrementalStrokeHitTester(System.Windows.Ink.StylusShape)">
      <summary>Creates an <see cref="T:System.Windows.Ink.IncrementalStrokeHitTester" /> that hit tests the <see cref="T:System.Windows.Ink.StrokeCollection" /> with an erasing path.</summary>
      <returns>An <see cref="T:System.Windows.Ink.IncrementalStrokeHitTester" /> that hit tests the <see cref="T:System.Windows.Ink.StrokeCollection" />.</returns>
      <param name="eraserShape">A <see cref="T:System.Windows.Ink.StylusShape" /> that specifies the tip of the stylus.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.GetPropertyData(System.Guid)">
      <summary>Returns the value of the custom property associated with the specified <see cref="T:System.Guid" />.</summary>
      <returns>The value of the custom property associated with the specified <see cref="T:System.Guid" />.</returns>
      <param name="propertyDataId">The <see cref="T:System.Guid" /> associated with the custom property to get.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyDataId" /> is not associated with a custom property of the <see cref="T:System.Windows.Ink.StrokeCollection" />.</exception>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.GetPropertyDataIds">
      <summary>Returns the GUIDs of any custom properties associated with the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <returns>An array of type <see cref="T:System.Guid" /> that represent the custom property identifiers.</returns>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.HitTest(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Int32)">
      <summary>Returns a collection of strokes that have at least the specified percentage of length within the specified area.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> that has strokes with at least the specified percentage within the <see cref="T:System.Windows.Point" /> array.</returns>
      <param name="lassoPoints">An array of type <see cref="T:System.Windows.Point" /> that represents the bounds of the area to be hit tested.</param>
      <param name="percentageWithinLasso">The acceptable length of the <see cref="T:System.Windows.Ink.Stroke" />, as a percentage, for <paramref name="lassoPoints" /> to contain.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lassoPoints" /> is null.-or-<paramref name="percentageWithinLasso" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="lassoPoints" /> contains an empty array.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="percentageWithinLasso" /> is less than 0 or greater than 100.</exception>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.HitTest(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Windows.Ink.StylusShape)">
      <summary>Returns a collection of strokes that intersect with the specified path.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> of strokes that intersect with <paramref name="path" />.</returns>
      <param name="path">An array to type <see cref="T:System.Windows.Point" /> that represents the path to be hit tested.</param>
      <param name="stylusShape">The <see cref="T:System.Windows.Ink.StylusShape" /> that specifies the shape of <paramref name="eraserPath" />.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.HitTest(System.Windows.Point)">
      <summary>Returns a collection of strokes that intersect the specified point.</summary>
      <returns>A collection of <see cref="T:System.Windows.Ink.Stroke" /> objects that intersect the specified point.</returns>
      <param name="point">The point to hit test.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.HitTest(System.Windows.Point,System.Double)">
      <summary>Returns a collection of strokes that intersect the specified area.</summary>
      <returns>A collection of <see cref="T:System.Windows.Ink.Stroke" /> objects that intersect the specified point.</returns>
      <param name="point">The <see cref="T:System.Windows.Point" /> to hit test.</param>
      <param name="diameter">The size of the area around the <see cref="T:System.Windows.Point" /> to hit test.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.HitTest(System.Windows.Rect,System.Int32)">
      <summary>Returns a collection of strokes that have at least the specified percentage of length within the specified rectangle.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> that has strokes with at least the specified percentage within the <see cref="T:System.Windows.Rect" />.</returns>
      <param name="bounds">A <see cref="T:System.Windows.Rect" /> that specifies the bounds to be hit tested.</param>
      <param name="percentageWithinBounds">The minimum required length of a Stroke that must exist within bounds for it to be considered hit.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.IndexOf(System.Windows.Ink.Stroke)">
      <summary>Returns the index of the specified <see cref="T:System.Windows.Ink.Stroke" /> in the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <returns>The index of the stroke.</returns>
      <param name="stroke">The stroke whose position is required.</param>
    </member>
    <member name="F:System.Windows.Ink.StrokeCollection.InkSerializedFormat">
      <summary>Represents the native persistence format for ink data.</summary>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.InsertItem(System.Int32,System.Windows.Ink.Stroke)">
      <summary>Inserts a stroke into the <see cref="T:System.Windows.Ink.StrokeCollection" /> at the specified index.</summary>
      <param name="index"></param>
      <param name="stroke"></param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Occurs when any <see cref="T:System.Windows.Ink.StrokeCollection" /> property changes.</summary>
      <param name="e">Event data.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Ink.StrokeCollection.PropertyDataChanged" /> event. </summary>
      <param name="e"></param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.OnStrokesChanged(System.Windows.Ink.StrokeCollectionChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Ink.StrokeCollection.StrokesChanged" /> event. </summary>
      <param name="e">A <see cref="T:System.Windows.Ink.StrokeCollectionChangedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="E:System.Windows.Ink.StrokeCollection.PropertyDataChanged">
      <summary>Occurs when custom property is added or removed from the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Remove(System.Windows.Ink.StrokeCollection)">
      <summary>Removes the specified strokes from the collection.</summary>
      <param name="strokes"></param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.RemoveItem(System.Int32)">
      <summary>Removes the stroke at the specified index from the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <param name="index">The specified index.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.RemovePropertyData(System.Guid)">
      <summary>Removes the custom property associated with the specified <see cref="T:System.Guid" />.</summary>
      <param name="propertyDataId">The <see cref="T:System.Guid" /> associated with the custom property to remove.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Replace(System.Windows.Ink.Stroke,System.Windows.Ink.StrokeCollection)">
      <summary>Replaces the specified <see cref="T:System.Windows.Ink.Stroke" /> with the specified <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <param name="strokeToReplace">The <see cref="T:System.Windows.Ink.Stroke" /> to replace.</param>
      <param name="strokesToReplaceWith">The source <see cref="T:System.Windows.Ink.StrokeCollection" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="strokesToReplace" /> is empty.-or-<paramref name="strokesToReplaceWith" /> is empty.-or-A <see cref="T:System.Windows.Ink.Stroke" /> in <paramref name="strokesToReplaceWith" /> is already in <paramref name="strokesToReplace" />. </exception>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Replace(System.Windows.Ink.StrokeCollection,System.Windows.Ink.StrokeCollection)">
      <summary>Replaces the specified <see cref="T:System.Windows.Ink.StrokeCollection" /> with a new <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <param name="strokesToReplace">The destination <see cref="T:System.Windows.Ink.StrokeCollection" />.</param>
      <param name="strokesToReplaceWith">The source <see cref="T:System.Windows.Ink.StrokeCollection" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="strokesToReplace" /> is empty.-or-<paramref name="strokesToReplaceWith" /> is empty.-or-A <see cref="T:System.Windows.Ink.Stroke" /> in <paramref name="strokesToReplaceWith" /> is already in <paramref name="strokesToReplace." />-or-The strokes in <paramref name="strokesToReplaceWith" /> are not continuous. </exception>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Save(System.IO.Stream)">
      <summary>Saves the <see cref="T:System.Windows.Ink.StrokeCollection" /> to the specified <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> to which to save the <see cref="T:System.Windows.Ink.StrokeCollection" />.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Save(System.IO.Stream,System.Boolean)">
      <summary>Saves the <see cref="T:System.Windows.Ink.StrokeCollection" /> to the specified <see cref="T:System.IO.Stream" /> and compresses it, when specified.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> to which to save the <see cref="T:System.Windows.Ink.StrokeCollection" />.</param>
      <param name="compress">true to compress the <see cref="T:System.Windows.Ink.StrokeCollection" />; otherwise, false.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.SetItem(System.Int32,System.Windows.Ink.Stroke)">
      <summary>Replaces the stroke at the specified index.</summary>
      <param name="index"></param>
      <param name="stroke"></param>
    </member>
    <member name="E:System.Windows.Ink.StrokeCollection.StrokesChanged">
      <summary>Occurs when a <see cref="T:System.Windows.Ink.Stroke" /> in the collection changes. </summary>
    </member>
    <member name="E:System.Windows.Ink.StrokeCollection.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>Occurs when the <see cref="T:System.Windows.Ink.StrokeCollection" /> changes.</summary>
    </member>
    <member name="E:System.Windows.Ink.StrokeCollection.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Occurs when the value of any <see cref="T:System.Windows.Ink.StrokeCollection" /> property has changed.</summary>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Transform(System.Windows.Media.Matrix,System.Boolean)">
      <summary>Modifies each of the <see cref="P:System.Windows.Ink.Stroke.StylusPoints" /> and optionally the <see cref="P:System.Windows.Ink.DrawingAttributes.StylusTipTransform" /> for each stroke in the <see cref="T:System.Windows.Ink.StrokeCollection" /> according to the specified <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="transformMatrix">A <see cref="T:System.Windows.Media.Matrix" /> which specifies the transformation to perform on the <see cref="T:System.Windows.Ink.StrokeCollection" />.</param>
      <param name="applyToStylusTip">true to apply the transformation to the tip of the stylus; otherwise, false.</param>
    </member>
    <member name="T:System.Windows.Ink.StrokeCollectionChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Ink.StrokeCollection.StrokesChanged" /> event.</summary>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollectionChangedEventArgs.#ctor(System.Windows.Ink.StrokeCollection,System.Windows.Ink.StrokeCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.StrokeCollectionChangedEventArgs" /> class. </summary>
      <param name="added">A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains the added strokes.</param>
      <param name="removed">A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains the removed strokes.</param>
    </member>
    <member name="P:System.Windows.Ink.StrokeCollectionChangedEventArgs.Added">
      <summary>Gets the strokes that have been added to the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains the added strokes.</returns>
    </member>
    <member name="P:System.Windows.Ink.StrokeCollectionChangedEventArgs.Removed">
      <summary>Gets the strokes that have been removed from the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains the removed strokes. </returns>
    </member>
    <member name="T:System.Windows.Ink.StrokeCollectionChangedEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Windows.Ink.StrokeCollection.StrokesChanged" /> event of a <see cref="T:System.Windows.Ink.StrokeCollection" />.  </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Windows.Ink.StrokeCollectionChangedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:System.Windows.Ink.StrokeHitEventArgs">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Ink.IncrementalStrokeHitTester.StrokeHit" /> event of a <see cref="T:System.Windows.Ink.IncrementalStrokeHitTester" />. </summary>
    </member>
    <member name="M:System.Windows.Ink.StrokeHitEventArgs.GetPointEraseResults">
      <summary>Returns the strokes that are a result of the eraser path erasing a stroke.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains the strokes that are created after the eraser path erases part of <see cref="P:System.Windows.Ink.StrokeHitEventArgs.HitStroke" />.</returns>
    </member>
    <member name="P:System.Windows.Ink.StrokeHitEventArgs.HitStroke">
      <summary>Gets the <see cref="T:System.Windows.Ink.Stroke" /> that is intersected by the eraser path.</summary>
      <returns>The <see cref="T:System.Windows.Ink.Stroke" /> that is intersected by the eraser path.</returns>
    </member>
    <member name="T:System.Windows.Ink.StrokeHitEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Ink.IncrementalStrokeHitTester.StrokeHit" /> event of a <see cref="T:System.Windows.Ink.IncrementalStrokeHitTester" />. </summary>
      <param name="sender">The source of the event. </param>
      <param name="e">A <see cref="T:System.Windows.Ink.StrokeHitEventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:System.Windows.Ink.StylusPointsReplacedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Ink.Stroke.StylusPointsReplaced" /> event.  </summary>
    </member>
    <member name="M:System.Windows.Ink.StylusPointsReplacedEventArgs.#ctor(System.Windows.Input.StylusPointCollection,System.Windows.Input.StylusPointCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.StylusPointsReplacedEventArgs" /> class. </summary>
      <param name="newStylusPoints">The new <see cref="T:System.Windows.Input.StylusPointCollection" /> for the <see cref="T:System.Windows.Ink.Stroke" />.</param>
      <param name="previousStylusPoints">The replaced <see cref="T:System.Windows.Input.StylusPointCollection" />.</param>
    </member>
    <member name="P:System.Windows.Ink.StylusPointsReplacedEventArgs.NewStylusPoints">
      <summary>Gets the new <see cref="T:System.Windows.Input.StylusPointCollection" /> for the <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <returns>The new <see cref="T:System.Windows.Input.StylusPointCollection" /> for the <see cref="T:System.Windows.Ink.Stroke" />.</returns>
    </member>
    <member name="P:System.Windows.Ink.StylusPointsReplacedEventArgs.PreviousStylusPoints">
      <summary>Gets the replaced <see cref="T:System.Windows.Input.StylusPointCollection" />.</summary>
      <returns>The replaced <see cref="T:System.Windows.Input.StylusPointCollection" />.</returns>
    </member>
    <member name="T:System.Windows.Ink.StylusPointsReplacedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Ink.Stroke.StylusPointsReplaced" /> event of a <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <param name="sender">The source of the event. </param>
      <param name="e">A <see cref="T:System.Windows.Ink.StylusPointsReplacedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:System.Windows.Ink.StylusShape">
      <summary>Represents the tip of a stylus.</summary>
    </member>
    <member name="P:System.Windows.Ink.StylusShape.Height">
      <summary>Gets the height of the stylus.</summary>
      <returns>The height of the stylus.</returns>
    </member>
    <member name="P:System.Windows.Ink.StylusShape.Rotation">
      <summary>Gets the angle of the stylus.</summary>
      <returns>The angle of the stylus.</returns>
    </member>
    <member name="P:System.Windows.Ink.StylusShape.Width">
      <summary>Gets the width of the stylus. </summary>
      <returns>The width of the stylus.</returns>
    </member>
    <member name="T:System.Windows.Ink.StylusTip">
      <summary>Specifies the tip to be used to draw a <see cref="T:System.Windows.Ink.Stroke" />.</summary>
    </member>
    <member name="F:System.Windows.Ink.StylusTip.Rectangle">
      <summary>Represents a rectangle-shaped tip.</summary>
    </member>
    <member name="F:System.Windows.Ink.StylusTip.Ellipse">
      <summary>Represents an ellipse-shaped tip.</summary>
    </member>
    <member name="T:System.Windows.Input.AccessKeyEventArgs">
      <summary>Provides information for access keys events. </summary>
    </member>
    <member name="P:System.Windows.Input.AccessKeyEventArgs.IsMultiple">
      <summary>Gets a value that indicates whether other elements are invoked by the key. </summary>
      <returns>true if other elements are invoked; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Input.AccessKeyEventArgs.Key">
      <summary>Gets the access keys that was pressed. </summary>
      <returns>The access key.</returns>
    </member>
    <member name="T:System.Windows.Input.AccessKeyManager">
      <summary>Maintains the registration of all access keys and the handling of interop keyboard commands between Windows Forms, Win32, and Windows Presentation Foundation (WPF).</summary>
    </member>
    <member name="E:System.Windows.Input.AccessKeyManager.AccessKeyPressed">
      <summary>Occurs when the access key is pressed.</summary>
    </member>
    <member name="F:System.Windows.Input.AccessKeyManager.AccessKeyPressedEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.AccessKeyManager.AccessKeyPressed" /> routed event. </summary>
    </member>
    <member name="M:System.Windows.Input.AccessKeyManager.AddAccessKeyPressedHandler(System.Windows.DependencyObject,System.Windows.Input.AccessKeyPressedEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.AccessKeyManager.AccessKeyPressed" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler to be added.</param>
    </member>
    <member name="M:System.Windows.Input.AccessKeyManager.IsKeyRegistered(System.Object,System.String)">
      <summary>Indicates whether the specified key is registered as an access keys in the specified scope.</summary>
      <returns>true if the key is registered; otherwise, false.</returns>
      <param name="scope">The presentation source to query for <paramref name="key" />.</param>
      <param name="key">The key to query.</param>
    </member>
    <member name="M:System.Windows.Input.AccessKeyManager.ProcessKey(System.Object,System.String,System.Boolean)">
      <summary>Processes the specified access keys as if a <see cref="E:System.Windows.UIElement.KeyDown" /> event for the key was passed to the <see cref="T:System.Windows.Input.AccessKeyManager" />. </summary>
      <returns>true if there are more keys that match; otherwise, false.</returns>
      <param name="scope">The scope for the access key.</param>
      <param name="key">The access key.</param>
      <param name="isMultiple">Indicates if <paramref name="key" /> has multiple matches.</param>
    </member>
    <member name="M:System.Windows.Input.AccessKeyManager.Register(System.String,System.Windows.IInputElement)">
      <summary>Associates the specified access keys with the specified element.</summary>
      <param name="key">The access key.</param>
      <param name="element">The element to associate <paramref name="key" /> with.</param>
    </member>
    <member name="M:System.Windows.Input.AccessKeyManager.RemoveAccessKeyPressedHandler(System.Windows.DependencyObject,System.Windows.Input.AccessKeyPressedEventHandler)">
      <summary>Removes the specified <see cref="E:System.Windows.Input.AccessKeyManager.AccessKeyPressed" /> event handler from the specified object.</summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler to be removed.</param>
    </member>
    <member name="M:System.Windows.Input.AccessKeyManager.Unregister(System.String,System.Windows.IInputElement)">
      <summary>Disassociates the specified access keys from the specified element.</summary>
      <param name="key">The access key.</param>
      <param name="element">The element from which to disassociate <paramref name="key" />.</param>
    </member>
    <member name="T:System.Windows.Input.AccessKeyPressedEventArgs">
      <summary>Provides data for the <see cref="T:System.Windows.Input.AccessKeyManager" /> routed event.</summary>
    </member>
    <member name="M:System.Windows.Input.AccessKeyPressedEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.AccessKeyEventArgs" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.AccessKeyPressedEventArgs.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.AccessKeyPressedEventArgs" /> class with the specified access key.</summary>
      <param name="key">The access key.</param>
    </member>
    <member name="M:System.Windows.Input.AccessKeyPressedEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
      <summary>Invokes event handlers in a type-specific way, which can increase event system efficiency.</summary>
      <param name="genericHandler">The generic handler to call in a type-specific way.</param>
      <param name="genericTarget">The target to call the handler on.</param>
    </member>
    <member name="P:System.Windows.Input.AccessKeyPressedEventArgs.Key">
      <summary>Gets a string representation of the access key that was pressed </summary>
      <returns>The access key.</returns>
    </member>
    <member name="P:System.Windows.Input.AccessKeyPressedEventArgs.Scope">
      <summary>Gets the scope for the element that raised this event. </summary>
      <returns>The element's scope.</returns>
    </member>
    <member name="P:System.Windows.Input.AccessKeyPressedEventArgs.Target">
      <summary> Gets or sets the target for the event. </summary>
      <returns>The element that raised this event.</returns>
    </member>
    <member name="T:System.Windows.Input.AccessKeyPressedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Input.AccessKeyManager.AccessKeyPressed" /> attached event.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Input.ApplicationCommands">
      <summary>Provides a standard set of application related commands.</summary>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.CancelPrint">
      <summary>Gets the value that represents the Cancel Print command.</summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextCancel Print</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Close">
      <summary>Gets the value that represents the Close command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+XShift+DeleteUI TextClose</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.ContextMenu">
      <summary>Gets the value that represents the Context Menu command. </summary>
      <returns>The command.Default ValuesKey GestureShift+F10AppsMouse GestureA Mouse Gesture is not attached to this command, but most applications follow the convention of using the Right Click gesture to invoke the context menu.UI TextContext Menu</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Copy">
      <summary>Gets the value that represents the Copy command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+CShift+DeleteUI TextCopy</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.CorrectionList">
      <summary> Gets the value that represents the Correction List command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextCorrection List</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Cut">
      <summary> Gets the value that represents the Cut command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+XShift+DeleteUI TextCut</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Delete">
      <summary> Gets the value that represents the Delete command. </summary>
      <returns>The command.Default ValuesKey GestureDelUI TextDelete</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Find">
      <summary> Gets the value that represents the Find command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+FUI TextFind</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Help">
      <summary> Gets the value that represents the Help command. </summary>
      <returns>The command.Default ValuesKey GestureF1UI TextHelp</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.New">
      <summary> Gets the value that represents the New command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+NUI TextNew</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.NotACommand">
      <summary>Represents a command which is always ignored.</summary>
      <returns>The command.</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Open">
      <summary> Gets the value that represents the Open command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+OUI TextOpen</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Paste">
      <summary> Gets the value that represents the Paste command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+VShift+InsertUI TextPaste</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Print">
      <summary> Gets the value that represents the Print command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+PUI TextPrint</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.PrintPreview">
      <summary> Gets the value that represents the Print Preview command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+F2UI TextPrint Preview</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Properties">
      <summary>Gets the value that represents the Properties command. </summary>
      <returns>The command.Default ValuesKey GestureF4UI TextProperties</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Redo">
      <summary> Gets the value that represents the Redo command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+YUI TextRedo</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Replace">
      <summary> Gets the value that represents the Replace command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+HUI TextReplace</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Save">
      <summary> Gets the value that represents the Save command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+SUI TextSave</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.SaveAs">
      <summary> Gets the value that represents the Save As command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+HUI TextSave As</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.SelectAll">
      <summary>Gets the value that represents the Select All command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+AUI TextSelect All</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Stop">
      <summary> Gets the value that represents the Stop command. </summary>
      <returns>The command.Default ValuesKey GestureEscUI TextStop</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Undo">
      <summary>Gets the value that represents the Undo command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl-ZUI TextUndo</returns>
    </member>
    <member name="T:System.Windows.Input.CanExecuteRoutedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> and <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /> routed events.</summary>
    </member>
    <member name="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Windows.Input.RoutedCommand" /> associated with this event can be executed on the command target.</summary>
      <returns>true if the event can be executed on the command target; otherwise, false.  The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Input.CanExecuteRoutedEventArgs.Command">
      <summary>Gets the command associated with this event.</summary>
      <returns>The command. Unless the command is a custom command, this is generally a <see cref="T:System.Windows.Input.RoutedCommand" />. There is no default value.</returns>
    </member>
    <member name="P:System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting">
      <summary>Determines whether the input routed event that invoked the command should continue to route through the element tree.</summary>
      <returns>true if the routed event should continue to route through element tree; otherwise, false.   The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter">
      <summary>Gets the command specific data.</summary>
      <returns>The command data.  The default value is null.</returns>
    </member>
    <member name="T:System.Windows.Input.CanExecuteRoutedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> event.</summary>
      <param name="sender">The command target that is invoking the handler.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Input.CaptureMode">
      <summary>Specifies the mouse capture policies. </summary>
    </member>
    <member name="F:System.Windows.Input.CaptureMode.None">
      <summary>No mouse capture.  Mouse input goes to the element under the mouse.</summary>
    </member>
    <member name="F:System.Windows.Input.CaptureMode.Element">
      <summary>Mouse capture is applied to a single element.  Mouse input goes to the captured element.</summary>
    </member>
    <member name="F:System.Windows.Input.CaptureMode.SubTree">
      <summary>Mouse capture is applied to a subtree of elements.  If the mouse is over a child of the element with capture, mouse input is sent to the child element.  Otherwise, mouse input is sent to the element with mouse capture.</summary>
    </member>
    <member name="T:System.Windows.Input.CommandBinding">
      <summary>Binds a <see cref="T:System.Windows.Input.RoutedCommand" /> to the event handlers that implement the command. </summary>
    </member>
    <member name="M:System.Windows.Input.CommandBinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBinding" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBinding" /> class by using the specified <see cref="T:System.Windows.Input.ICommand" />.</summary>
      <param name="command">The command to base the new <see cref="T:System.Windows.Input.RoutedCommand" /> on.</param>
    </member>
    <member name="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBinding" /> class by using the specified <see cref="T:System.Windows.Input.ICommand" /> and the specified <see cref="E:System.Windows.Input.CommandBinding.Executed" /> event handler.</summary>
      <param name="command">The command to base the new <see cref="T:System.Windows.Input.RoutedCommand" /> on.</param>
      <param name="executed">The handler for the <see cref="E:System.Windows.Input.CommandBinding.Executed" /> event on the new <see cref="T:System.Windows.Input.RoutedCommand" />.</param>
    </member>
    <member name="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBinding" /> class by using the specified <see cref="T:System.Windows.Input.ICommand" /> and the specified <see cref="E:System.Windows.Input.CommandBinding.Executed" /> and <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> even handlers.</summary>
      <param name="command">The command to base the new <see cref="T:System.Windows.Input.RoutedCommand" /> on.</param>
      <param name="executed">The handler for the <see cref="E:System.Windows.Input.CommandBinding.Executed" /> event on the new <see cref="T:System.Windows.Input.RoutedCommand" />.</param>
      <param name="canExecute">The handler for the <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> event on the new <see cref="T:System.Windows.Input.RoutedCommand" />.</param>
    </member>
    <member name="E:System.Windows.Input.CommandBinding.CanExecute">
      <summary>Occurs when the command associated with this <see cref="T:System.Windows.Input.CommandBinding" /> initiates a check to determine whether the command can be executed on the command target.</summary>
    </member>
    <member name="P:System.Windows.Input.CommandBinding.Command">
      <summary>Gets or sets the <see cref="T:System.Windows.Input.ICommand" /> associated with this <see cref="T:System.Windows.Input.CommandBinding" />. </summary>
      <returns>The command associated with this binding.</returns>
    </member>
    <member name="E:System.Windows.Input.CommandBinding.Executed">
      <summary>Occurs when the command associated with this <see cref="T:System.Windows.Input.CommandBinding" /> executes.</summary>
    </member>
    <member name="E:System.Windows.Input.CommandBinding.PreviewCanExecute">
      <summary>Occurs when the command associated with this <see cref="T:System.Windows.Input.CommandBinding" /> initiates a check to determine whether the command can be executed on the current command target.</summary>
    </member>
    <member name="E:System.Windows.Input.CommandBinding.PreviewExecuted">
      <summary>Occurs when the command associated with this <see cref="T:System.Windows.Input.CommandBinding" /> executes.</summary>
    </member>
    <member name="T:System.Windows.Input.CommandBindingCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Input.CommandBinding" /> objects.</summary>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBindingCollection" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.#ctor(System.Collections.IList)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBindingCollection" /> class using the items in the specified <see cref="T:System.Collections.IList" />.</summary>
      <param name="commandBindings">The collection whose items are copied to the new <see cref="T:System.Windows.Input.CommandBindingCollection" />.</param>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.Add(System.Windows.Input.CommandBinding)">
      <summary>Adds the specified <see cref="T:System.Windows.Input.CommandBinding" /> to this <see cref="T:System.Windows.Input.CommandBindingCollection" />.</summary>
      <returns>0, if the operation was successful (note that this is not the index of the added item).</returns>
      <param name="commandBinding">The binding to add to the collection.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="commandBinding" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.AddRange(System.Collections.ICollection)">
      <summary>Adds the items of the specified <see cref="T:System.Collections.ICollection" /> to the end of this <see cref="T:System.Windows.Input.CommandBindingCollection" />. </summary>
      <param name="collection">The collection of items to add to the end of this <see cref="T:System.Windows.Input.CommandBindingCollection" />.</param>
      <exception cref="T:System.NotSupportedException">Any of the items in the collection to add are null.</exception>
      <exception cref="T:System.NotSupportedException">The collection to add is null.</exception>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.Clear">
      <summary>Removes all items from this <see cref="T:System.Windows.Input.CommandBindingCollection" />.</summary>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.Contains(System.Windows.Input.CommandBinding)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Input.CommandBinding" /> is in this <see cref="T:System.Windows.Input.CommandBindingCollection" />.</summary>
      <returns>true if the specified <see cref="T:System.Windows.Input.CommandBinding" /> is in the collection; otherwise, false.</returns>
      <param name="commandBinding">The binding to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.CopyTo(System.Windows.Input.CommandBinding[],System.Int32)">
      <summary>Copies all of the items in the <see cref="T:System.Windows.Input.CommandBindingCollection" /> to the specified one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="commandBindings">The array into which the collection is copied.</param>
      <param name="index">The index position in <paramref name="commandBindings" /> at which copying starts.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="commandBindings" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.</exception>
    </member>
    <member name="P:System.Windows.Input.CommandBindingCollection.Count">
      <summary>Gets the number of <see cref="T:System.Windows.Input.CommandBinding" /> items in this <see cref="T:System.Windows.Input.CommandBindingCollection" />.</summary>
      <returns>The number of bindings in the collection.</returns>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.GetEnumerator">
      <summary>Gets an enumerator that iterates through this <see cref="T:System.Windows.Input.CommandBindingCollection" />. </summary>
      <returns>The enumerator for this collection.</returns>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.IndexOf(System.Windows.Input.CommandBinding)">
      <summary>Searches for the first occurrence of the specified <see cref="T:System.Windows.Input.CommandBinding" /> in this <see cref="T:System.Windows.Input.CommandBindingCollection" />. </summary>
      <returns>The index of the first occurrence of <paramref name="value" />, if found; otherwise, -1.</returns>
      <param name="value">The binding to locate in the collection. </param>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.Insert(System.Int32,System.Windows.Input.CommandBinding)">
      <summary>Inserts the specified <see cref="T:System.Windows.Input.CommandBinding" /> into this <see cref="T:System.Windows.Input.CommandBindingCollection" /> at the specified index.</summary>
      <param name="index">The zero-based index at which to insert <paramref name="commandBinding" /></param>
      <param name="commandBinding">The binding to insert.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="commandBinding" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Input.CommandBindingCollection.IsFixedSize">
      <summary>Gets a value indicating whether this <see cref="T:System.Windows.Input.CommandBindingCollection" /> has a fixed size. </summary>
      <returns>true if the collection has a fixed size; otherwise, false.  The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Input.CommandBindingCollection.IsReadOnly">
      <summary>Gets a value indicating whether this <see cref="T:System.Windows.Input.CommandBindingCollection" /> is read-only. </summary>
      <returns>true if the collection is read-only; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Input.CommandBindingCollection.IsSynchronized">
      <summary>Gets a value indicating whether access to this <see cref="T:System.Windows.Input.CommandBindingCollection" /> is synchronized (thread-safe). </summary>
      <returns>true if the collection is thread-safe; otherwise, false.  The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Input.CommandBindingCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Windows.Input.CommandBinding" /> at the specified index. </summary>
      <returns>The binding at the specified index.</returns>
      <param name="index">The position in the collection.</param>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.Remove(System.Windows.Input.CommandBinding)">
      <summary>Removes the first occurrence of the specified <see cref="T:System.Windows.Input.CommandBinding" /> from this <see cref="T:System.Windows.Input.CommandBindingCollection" />.</summary>
      <param name="commandBinding">The binding to remove.</param>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.RemoveAt(System.Int32)">
      <summary>Removes the specified <see cref="T:System.Windows.Input.CommandBinding" /> at the specified index of this <see cref="T:System.Windows.Input.CommandBindingCollection" />.</summary>
      <param name="index">The zero-based index of the <see cref="T:System.Windows.Input.CommandBinding" /> to remove.</param>
    </member>
    <member name="P:System.Windows.Input.CommandBindingCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Windows.Input.CommandBindingCollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Windows.Input.CommandBindingCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">A zero-based <see cref="T:System.Array" /> that receives the copied items from the <see cref="T:System.Windows.Input.CommandBindingCollection" />.</param>
      <param name="index">The first position in the specified <see cref="T:System.Array" /> to receive the copied contents.</param>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.System#Collections#IList#Add(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="commandBinding">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Windows.Input.CommandBindingCollection" />.</param>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.System#Collections#IList#Contains(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Contains(System.Object)" />.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Windows.Input.CommandBindingCollection" />; otherwise, false.</returns>
      <param name="key">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Media.TextEffectCollection" />.</param>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Input.CommandBindingCollection" />.</param>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</summary>
      <param name="index">The zero-based index at which to insert the <see cref="T:System.Object" />.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Windows.Input.CommandBindingCollection" />.</param>
    </member>
    <member name="P:System.Windows.Input.CommandBindingCollection.System#Collections#IList#Item(System.Int32)">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.Item(System.Int32)" />.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.System#Collections#IList#Remove(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
      <param name="commandBinding">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Windows.Input.CommandBindingCollection" />.</param>
    </member>
    <member name="T:System.Windows.Input.CommandManager">
      <summary>Provides command related utility methods that register <see cref="T:System.Windows.Input.CommandBinding" /> and <see cref="T:System.Windows.Input.InputBinding" /> objects for class owners and commands, add and remove command event handlers, and provides services for querying the status of a command.</summary>
    </member>
    <member name="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
      <summary>Attaches the specified <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> to the specified element.</summary>
      <param name="element">The element to attach <paramref name="handler" /> to.</param>
      <param name="handler">The can execute handler.  </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="handler" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
      <summary>Attaches the specified <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> to the specified element. </summary>
      <param name="element">The element to attach <paramref name="handler" /> to.</param>
      <param name="handler">The executed handler.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="handler" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
      <summary>Attaches the specified <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> to the specified element.</summary>
      <param name="element">The element to attach <paramref name="handler" /> to.</param>
      <param name="handler">The can execute handler.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="handler" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
      <summary>Attaches the specified <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> to the specified element.</summary>
      <param name="element">The element to attach <paramref name="handler" /> to.</param>
      <param name="handler">The can execute handler.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="handler" /> is null.</exception>
    </member>
    <member name="E:System.Windows.Input.CommandManager.CanExecute">
      <summary>Occurs when the <see cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" /> method on the <see cref="T:System.Windows.Input.RoutedCommand" /> is called and the <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /> event was not handled.</summary>
    </member>
    <member name="F:System.Windows.Input.CommandManager.CanExecuteEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.CommandManager.CanExecute" /> attached event.</summary>
    </member>
    <member name="E:System.Windows.Input.CommandManager.Executed">
      <summary>Occurs when the <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" /> method on the <see cref="T:System.Windows.Input.RoutedCommand" /> is called and the <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" /> event was not handled.</summary>
    </member>
    <member name="F:System.Windows.Input.CommandManager.ExecutedEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.CommandManager.Executed" /> attached event.</summary>
    </member>
    <member name="M:System.Windows.Input.CommandManager.InvalidateRequerySuggested">
      <summary>Forces the <see cref="T:System.Windows.Input.CommandManager" /> to raise the <see cref="E:System.Windows.Input.CommandManager.RequerySuggested" /> event.</summary>
    </member>
    <member name="E:System.Windows.Input.CommandManager.PreviewCanExecute">
      <summary>Occurs when the <see cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" /> method on the <see cref="T:System.Windows.Input.RoutedCommand" /> is called.</summary>
    </member>
    <member name="F:System.Windows.Input.CommandManager.PreviewCanExecuteEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /> attached event.</summary>
    </member>
    <member name="E:System.Windows.Input.CommandManager.PreviewExecuted">
      <summary>Occurs when the <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" /> method on the <see cref="T:System.Windows.Input.RoutedCommand" /> is called.</summary>
    </member>
    <member name="F:System.Windows.Input.CommandManager.PreviewExecutedEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" /> attached event.</summary>
    </member>
    <member name="M:System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)">
      <summary>Registers a <see cref="T:System.Windows.Input.CommandBinding" /> with the specified type. </summary>
      <param name="type">The class with which to register <paramref name="commandBinding" />.</param>
      <param name="commandBinding">The command binding to register.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="commandBinding" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)">
      <summary>Registers the specified <see cref="T:System.Windows.Input.InputBinding" /> with the specified type. </summary>
      <param name="type">The type to register <paramref name="inputBinding" /> with.</param>
      <param name="inputBinding">The input binding to register.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="inputBinding" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.CommandManager.RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
      <summary>Detaches the specified <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> from the specified element.</summary>
      <param name="element">The element to remove <paramref name="handler" /> from.</param>
      <param name="handler">The can execute handler.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="handler" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.CommandManager.RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
      <summary>Detaches the specified <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> from the specified element.</summary>
      <param name="element">The element to remove <paramref name="handler" /> from.</param>
      <param name="handler">The executed handler.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="handler" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
      <summary>Detaches the specified <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> from the specified element.</summary>
      <param name="element">The element to remove <paramref name="handler" /> from.</param>
      <param name="handler">The can execute handler.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="handler" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
      <summary>Detaches the specified <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> from the specified element.</summary>
      <param name="element">The element to remove <paramref name="handler" /> from.</param>
      <param name="handler">The executed handler.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="handler" /> is null.</exception>
    </member>
    <member name="E:System.Windows.Input.CommandManager.RequerySuggested">
      <summary>Occurs when the <see cref="T:System.Windows.Input.CommandManager" /> detects conditions that might change the ability of a command to execute.</summary>
    </member>
    <member name="T:System.Windows.Input.ComponentCommands">
      <summary>Provides a standard set of component-related commands, which have predefined key input gestures and <see cref="P:System.Windows.Input.RoutedUICommand.Text" /> properties.</summary>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.ExtendSelectionDown">
      <summary>Gets the value that represents the Extend Selection Down command. </summary>
      <returns>The command.Default ValuesKey GestureShift+DownUI TextExtend Selection Down</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.ExtendSelectionLeft">
      <summary>Gets the value that represents the Extend Selection Left command. </summary>
      <returns>The command.Default ValuesKey GestureShift+LeftUI TextExtend Selection Left</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.ExtendSelectionRight">
      <summary>Gets the value that represents the Extend Selection Right command. </summary>
      <returns>The command.Default ValuesKey GestureShift+RightUI TextExtend Selection Right</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.ExtendSelectionUp">
      <summary>Gets the value that represents the Extend Selection Up command. </summary>
      <returns>The command.Default ValuesKey GestureShift+UpUI TextExtend Selection Up</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveDown">
      <summary>Gets the value that represents the Move Down command. </summary>
      <returns>The command.Default ValuesKey GestureDownUI TextMove Down</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveFocusBack">
      <summary>Gets the value that represents the Move Focus Back command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+LeftUI TextMove Focus Back</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveFocusDown">
      <summary>Gets the value that represents the Move Focus Down command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+DownUI TextMove Focus Down</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveFocusForward">
      <summary>Gets the value that represents the Move Focus Forward command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+RightUI TextMove Focus Forward</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveFocusPageDown">
      <summary>Gets the value that represents the Move Focus Page Down command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+PageDownUI TextMove Focus Page Down</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveFocusPageUp">
      <summary>Gets the value that represents the Move Focus Page Up command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+PageUpUI TextMove Focus Page Up</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveFocusUp">
      <summary>Gets the value that represents the Move Focus Up command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+UpUI TextMove Focus Up</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveLeft">
      <summary>Gets the value that represents the Move Left command. </summary>
      <returns>The command.Default ValuesKey GestureLeftUI TextMove Left</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveRight">
      <summary>Gets the value that represents the Move Right command. </summary>
      <returns>The command.Default ValuesKey GestureRightUI TextMove Right</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveToEnd">
      <summary>Gets the value that represents the Move To End command. </summary>
      <returns>The command.Default ValuesKey GestureEndUI TextMove To End</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveToHome">
      <summary>Gets the value that represents the Move To Home command. </summary>
      <returns>The command.Default ValuesKey GestureHomeUI TextMove To Home</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveToPageDown">
      <summary>Gets the value that represents the Move To Page Down command. </summary>
      <returns>The command.Default ValuesKey GesturePageDownUI TextMove To Page Down</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveToPageUp">
      <summary>Gets the value that represents the Move To Page Up command. </summary>
      <returns>The command.Default ValuesKey GesturePageUpUI TextMove To Page Up</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveUp">
      <summary>Gets the value that represents the Move Up command. </summary>
      <returns>The command.Default ValuesKey GestureUpUI TextMove Up</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.ScrollByLine">
      <summary>Gets the value that represents the Scroll By Line command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture definedUI TextScroll By Line</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.ScrollPageDown">
      <summary>Gets the value that represents the Scroll Page Down command. </summary>
      <returns>The command.Default ValuesKey GesturePageDownUI TextScroll Page Down</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.ScrollPageLeft">
      <summary>Gets the value that represents the Scroll Page Left command.</summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextScroll Page Left</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.ScrollPageRight">
      <summary>Gets the value that represents the Scroll Page Right command.</summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextScroll Page Right</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.ScrollPageUp">
      <summary>Gets the value that represents the Scroll Page Up command. </summary>
      <returns>The command.Default ValuesKey GesturePageUpUI TextScroll Page Up</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.SelectToEnd">
      <summary>Gets the value that represents the Select To End command. </summary>
      <returns>The command.Default ValuesKey GestureShift+EndUI TextSelect To End</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.SelectToHome">
      <summary>Gets the value that represents the Select To Home command. </summary>
      <returns>The command.Default ValuesKey GestureShift+HomeUI TextSelect To Home</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.SelectToPageDown">
      <summary>Gets the value that represents the Select To Page Down command. </summary>
      <returns>The command.Default ValuesKey GestureShift+PageDownUI TextSelect To Page Down</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.SelectToPageUp">
      <summary>Gets the value that represents the Select To Page Up command. </summary>
      <returns>The command.Default ValuesKey GestureShift+PageUpUI TextSelect To Page Up</returns>
    </member>
    <member name="T:System.Windows.Input.Cursor">
      <summary>Represents the image used for the mouse pointer.</summary>
    </member>
    <member name="M:System.Windows.Input.Cursor.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.Cursor" /> class from the specified <see cref="T:System.IO.Stream" />. </summary>
      <param name="cursorStream">The <see cref="T:System.IO.Stream" /> that contains the cursor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cursorStream" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.Cursor.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.Cursor" /> class from the specified .ani or a .cur file. </summary>
      <param name="cursorFile">The file that contains the cursor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cursorFile" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="cursorFile" /> is not an .ani or .cur file name.</exception>
    </member>
    <member name="M:System.Windows.Input.Cursor.Dispose">
      <summary>Releases the resources used by the <see cref="T:System.Windows.Input.Cursor" /> class. </summary>
    </member>
    <member name="M:System.Windows.Input.Cursor.ToString">
      <summary>Returns the string representation of the <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>The name of the cursor.</returns>
    </member>
    <member name="T:System.Windows.Input.CursorConverter">
      <summary>Converts a <see cref="T:System.Windows.Input.Cursor" /> object to and from other types.</summary>
    </member>
    <member name="M:System.Windows.Input.CursorConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.CursorConverter" /> class. </summary>
    </member>
    <member name="M:System.Windows.Input.CursorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object of the specified type can be converted to an instance of <see cref="T:System.Windows.Input.Cursor" />, using the specified context.</summary>
      <returns>true if <paramref name="sourceType" /> is of type <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="sourceType">The type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.CursorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of <see cref="T:System.Windows.Input.Cursor" /> can be converted to the specified type, using the specified context.</summary>
      <returns>true if <paramref name="destinationType" /> is of type <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="destinationType">The type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.CursorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Input.Cursor" />, using the specified context.</summary>
      <returns>The converted object, or null if <paramref name="value" /> is an empty string.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="culture">Culture specific information.</param>
      <param name="value">The object to convert.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> cannot be converted</exception>
    </member>
    <member name="M:System.Windows.Input.CursorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert a <see cref="T:System.Windows.Input.Cursor" /> to the specified type, using the specified context.</summary>
      <returns>The converted object, or an empty string if <paramref name="value" /> is null.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="culture">Culture specific information.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="source" /> cannot be converted.</exception>
    </member>
    <member name="M:System.Windows.Input.CursorConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets a collection of standard cursor values, using the specified context.</summary>
      <returns>A collection that holds a standard set of valid values.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
    </member>
    <member name="M:System.Windows.Input.CursorConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Determines whether this object supports a standard set of values that can be picked from a list, using the specified context.</summary>
      <returns>Always returns true.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
    </member>
    <member name="T:System.Windows.Input.Cursors">
      <summary>Defines a set of default cursors. </summary>
    </member>
    <member name="P:System.Windows.Input.Cursors.AppStarting">
      <summary>Gets the <see cref="T:System.Windows.Input.Cursor" /> that appears when an application is starting. </summary>
      <returns>The AppStarting cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.Arrow">
      <summary>Gets the Arrow <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>The arrow cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.ArrowCD">
      <summary>Gets the arrow with a compact disk <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>The arrowCd cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.Cross">
      <summary>Gets the crosshair <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>The Crosshair cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.Hand">
      <summary>Gets a hand <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>The hand cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.Help">
      <summary>Gets a help <see cref="T:System.Windows.Input.Cursor" /> which is a combination of an arrow and a question mark. </summary>
      <returns>The help cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.IBeam">
      <summary>Gets an I-beam <see cref="T:System.Windows.Input.Cursor" />, which is used to show where the text cursor appears when the mouse is clicked. </summary>
      <returns>The IBeam cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.No">
      <summary>Gets a <see cref="T:System.Windows.Input.Cursor" /> with which indicates that a particular region is invalid for a given operation.</summary>
      <returns>The No cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.None">
      <summary>Gets a special cursor that is invisible. </summary>
      <returns>The none cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.Pen">
      <summary>Gets a pen <see cref="T:System.Windows.Input.Cursor" />.</summary>
      <returns>The pen cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.ScrollAll">
      <summary>Gets the scroll all <see cref="T:System.Windows.Input.Cursor" />.</summary>
      <returns>The scroll all cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.ScrollE">
      <summary>Gets the scroll east <see cref="T:System.Windows.Input.Cursor" />.</summary>
      <returns>A scroll east cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.ScrollN">
      <summary>Gets the scroll north <see cref="T:System.Windows.Input.Cursor" />.</summary>
      <returns>A scroll north cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.ScrollNE">
      <summary>Gets the scroll northeast cursor.</summary>
      <returns>A scroll northeast <see cref="T:System.Windows.Input.Cursor" />.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.ScrollNS">
      <summary>Gets the scroll north/south cursor.</summary>
      <returns>A scroll north/south <see cref="T:System.Windows.Input.Cursor" />.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.ScrollNW">
      <summary>Gets a scroll northwest cursor.</summary>
      <returns>The scroll northwest <see cref="T:System.Windows.Input.Cursor" />.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.ScrollS">
      <summary>Gets the scroll south <see cref="T:System.Windows.Input.Cursor" />.</summary>
      <returns>The scroll south cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.ScrollSE">
      <summary>Gets a south/east scrolling <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>The south/east scrolling cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.ScrollSW">
      <summary>Gets the scroll southwest <see cref="T:System.Windows.Input.Cursor" />.</summary>
      <returns>The scroll southwest cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.ScrollW">
      <summary>Gets the scroll west <see cref="T:System.Windows.Input.Cursor" />.</summary>
      <returns>The scroll west cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.ScrollWE">
      <summary>Gets a west/east scrolling <see cref="T:System.Windows.Input.Cursor" />.</summary>
      <returns>A west/east scrolling cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.SizeAll">
      <summary>Gets a four-headed sizing <see cref="T:System.Windows.Input.Cursor" />, which consists of four joined arrows that point north, south, east, and west.  </summary>
      <returns>A four-headed sizing cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.SizeNESW">
      <summary>Gets a two-headed northeast/southwest sizing <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>A two-headed northeast/southwest sizing cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.SizeNS">
      <summary>Gets a two-headed north/south sizing <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>A two-headed north/south sizing cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.SizeNWSE">
      <summary>Gets a two-headed northwest/southeast sizing <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>A two-headed northwest/southwest sizing cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.SizeWE">
      <summary>Gets a two-headed west/east sizing <see cref="T:System.Windows.Input.Cursor" />.</summary>
      <returns>A two-headed west/east sizing cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.UpArrow">
      <summary>Gets an up arrow <see cref="T:System.Windows.Input.Cursor" />, which is typically used to identify an insertion point.  </summary>
      <returns>An up arrow cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.Wait">
      <summary>Specifies a wait (or hourglass) <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>A wait cursor.</returns>
    </member>
    <member name="T:System.Windows.Input.CursorType">
      <summary>Specifies the built in cursor types. </summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.None">
      <summary>A value indicating that no cursor should be displayed.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.No">
      <summary>No cursor.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.Arrow">
      <summary>A standard arrow cursor.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.AppStarting">
      <summary>A standard arrow with small hourglass cursor.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.Cross">
      <summary>A crosshair cursor.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.Help">
      <summary>A help cursor. </summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.IBeam">
      <summary>A text I-Beam cursor.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.SizeAll">
      <summary>A cursor with arrows pointing north, south, east, and west.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.SizeNESW">
      <summary>A cursor with arrows pointing northeast and southwest.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.SizeNS">
      <summary>A cursor with arrows pointing north and south.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.SizeNWSE">
      <summary>A cursor with arrows pointing northwest and southeast.  </summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.SizeWE">
      <summary>A cursor with arrows pointing west and east.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.UpArrow">
      <summary>A vertical arrow cursor.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.Wait">
      <summary>An hourglass cursor.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.Hand">
      <summary>A hand cursor.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.Pen">
      <summary>A pen cursor.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.ScrollNS">
      <summary>A scrolling cursor with arrows pointing north and south.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.ScrollWE">
      <summary>A scrolling cursor with arrows pointing west and east.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.ScrollAll">
      <summary>A scrolling cursor with arrows pointing north, south, east, and west.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.ScrollN">
      <summary>A scrolling cursor with an arrow pointing north.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.ScrollS">
      <summary>A scrolling cursor with an arrow pointing south.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.ScrollW">
      <summary>A scrolling cursor with an arrow pointing west.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.ScrollE">
      <summary>A scrolling cursor with an arrow pointing east.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.ScrollNW">
      <summary>A scrolling cursor with arrows pointing north and west.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.ScrollNE">
      <summary>A scrolling cursor with arrows pointing north and east.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.ScrollSW">
      <summary>A scrolling cursor with arrows pointing south and west.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.ScrollSE">
      <summary>A scrolling cursor with arrows pointing south and east.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.ArrowCD">
      <summary>An arrow cd cursor.</summary>
    </member>
    <member name="T:System.Windows.Input.ExecutedRoutedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Input.CommandManager.Executed" /> and <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" /> routed events.</summary>
    </member>
    <member name="P:System.Windows.Input.ExecutedRoutedEventArgs.Command">
      <summary>Gets the command that was invoked.</summary>
      <returns>The command associated with this event.  </returns>
    </member>
    <member name="P:System.Windows.Input.ExecutedRoutedEventArgs.Parameter">
      <summary>Gets data parameter of the command.</summary>
      <returns>The command-specific data. The default value is null.</returns>
    </member>
    <member name="T:System.Windows.Input.ExecutedRoutedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Input.CommandBinding.Executed" /> and <see cref="E:System.Windows.Input.CommandBinding.PreviewExecuted" /> routed events, as well as related attached events.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Input.FocusManager">
      <summary>Provides a set of static methods, attached properties, and events for determining and setting focus scopes and for setting the focused element within the scope. </summary>
    </member>
    <member name="P:System.Windows.Input.FocusManager.FocusedElement">
      <summary>Determines whether the element this property is attached to has logical focus.</summary>
      <returns>The element with logical focus. The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Input.FocusManager.FocusedElementProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.FocusManager.FocusedElement" /> attached property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.FocusManager.FocusedElement" /> attached property.</returns>
    </member>
    <member name="M:System.Windows.Input.FocusManager.GetFocusedElement(System.Windows.DependencyObject)">
      <summary>Gets the element with logical focus within the specified focus scope.</summary>
      <returns>The element in the specified focus scope with logical focus.</returns>
      <param name="element">The element with logical focus in the specified focus scope.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.FocusManager.GetFocusScope(System.Windows.DependencyObject)">
      <summary>Determines the closest ancestor of the specified element that has <see cref="P:System.Windows.Input.FocusManager.IsFocusScope" /> set to true.</summary>
      <returns>The focus scope for the specified element.</returns>
      <param name="element">The element to get the closest focus scope for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.FocusManager.GetIsFocusScope(System.Windows.DependencyObject)">
      <summary>Determines whether the specified <see cref="T:System.Windows.DependencyObject" /> is a focus scope.</summary>
      <returns>true if <see cref="P:System.Windows.Input.FocusManager.IsFocusScope" /> is set to true on the specified element; otherwise, false.</returns>
      <param name="element">The element from which to read the attached property.</param>
    </member>
    <member name="F:System.Windows.Input.FocusManager.GotFocusEvent">
      <summary>Identifies the GotFocus<see cref="T:System.Windows.RoutedEvent" />.</summary>
    </member>
    <member name="P:System.Windows.Input.FocusManager.IsFocusScope">
      <summary>Determines whether the element this property is attached to is a focus scope.</summary>
      <returns>true if the element is a focus scope; otherwise, false. The default value is false.</returns>
    </member>
    <member name="F:System.Windows.Input.FocusManager.IsFocusScopeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.FocusManager.IsFocusScope" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.FocusManager.IsFocusScope" /> attached property.</returns>
    </member>
    <member name="F:System.Windows.Input.FocusManager.LostFocusEvent">
      <summary>Identifies the LostFocus<see cref="T:System.Windows.RoutedEvent" />.</summary>
    </member>
    <member name="M:System.Windows.Input.FocusManager.SetFocusedElement(System.Windows.DependencyObject,System.Windows.IInputElement)">
      <summary>Sets logical focus on the specified element.</summary>
      <param name="element">The focus scope in which to make the specified element the <see cref="P:System.Windows.Input.FocusManager.FocusedElement" />.</param>
      <param name="value">The element to give logical focus to.</param>
    </member>
    <member name="M:System.Windows.Input.FocusManager.SetIsFocusScope(System.Windows.DependencyObject,System.Boolean)">
      <summary>Sets the specified <see cref="T:System.Windows.DependencyObject" /> as a focus scope. </summary>
      <param name="element">The element to make a focus scope.</param>
      <param name="value">true if <paramref name="element" /> is a focus scope; otherwise, false.</param>
    </member>
    <member name="T:System.Windows.Input.ICommand">
      <summary>Defines a command.</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
      <summary>Defines the method that determines whether the command can execute in its current state.</summary>
      <returns>true if this command can be executed; otherwise, false.</returns>
      <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
    </member>
    <member name="E:System.Windows.Input.ICommand.CanExecuteChanged">
      <summary>Occurs when changes occur that affect whether or not the command should execute.</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.Execute(System.Object)">
      <summary>Defines the method to be called when the command is invoked.</summary>
      <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
    </member>
    <member name="T:System.Windows.Input.ICommandSource">
      <summary>Defines an object that knows how to invoke a command.</summary>
    </member>
    <member name="P:System.Windows.Input.ICommandSource.Command">
      <summary>Gets the command that will be executed when the command source is invoked.</summary>
      <returns>The command that will be executed when the command source is invoked.</returns>
    </member>
    <member name="P:System.Windows.Input.ICommandSource.CommandParameter">
      <summary>Represents a user defined data value that can be passed to the command when it is executed.</summary>
      <returns>The command specific data.</returns>
    </member>
    <member name="P:System.Windows.Input.ICommandSource.CommandTarget">
      <summary>The object that the command is being executed on.</summary>
      <returns>The object that the command is being executed on.</returns>
    </member>
    <member name="T:System.Windows.Input.IInputLanguageSource">
      <summary>Defines necessary facilities for an object that intends to behave as an input language source.</summary>
    </member>
    <member name="P:System.Windows.Input.IInputLanguageSource.CurrentInputLanguage">
      <summary>Gets or sets the current input language for this input language source object.</summary>
      <returns>A <see cref="T:System.Globalization.CultureInfo" /> object representing the current input language for this input language source object.</returns>
    </member>
    <member name="M:System.Windows.Input.IInputLanguageSource.Initialize">
      <summary>Initializes an input language source object.</summary>
    </member>
    <member name="P:System.Windows.Input.IInputLanguageSource.InputLanguageList">
      <summary>Gets a list of input languages supported by this input language source object.</summary>
      <returns>An enumerable object that represents the list of input languages supported by this input language source object.</returns>
    </member>
    <member name="M:System.Windows.Input.IInputLanguageSource.Uninitialize">
      <summary>Un-initializes an input language source object.</summary>
    </member>
    <member name="T:System.Windows.Input.IManipulator">
      <summary>Provides the position of input that is needed to create a manipulation. "</summary>
    </member>
    <member name="M:System.Windows.Input.IManipulator.GetPosition(System.Windows.IInputElement)">
      <summary>Returns the position of the <see cref="T:System.Windows.Input.IManipulator" /> object.</summary>
      <returns>The position of the <see cref="T:System.Windows.Input.IManipulator" /> object.</returns>
      <param name="relativeTo">The element to use as the frame of reference for calculating the position of the <see cref="T:System.Windows.Input.IManipulator" />.</param>
    </member>
    <member name="P:System.Windows.Input.IManipulator.Id">
      <summary>Gets or sets a unique identifier for the object.</summary>
      <returns>A unique identifier for the object.</returns>
    </member>
    <member name="M:System.Windows.Input.IManipulator.ManipulationEnded(System.Boolean)">
      <summary>Called when the Manipulation ends</summary>
      <param name="cancel">true if the manipulation is canceled; otherwise, false.</param>
    </member>
    <member name="E:System.Windows.Input.IManipulator.Updated">
      <summary>Occurs when the <see cref="T:System.Windows.Input.IManipulator" /> object changes position.</summary>
    </member>
    <member name="T:System.Windows.Input.ImeConversionModeValues">
      <summary>Describes a mode of input conversion to be performed by an input method.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.Native">
      <summary>The input method uses a native character (Hiragana, Hangul, Chinese) conversion mode.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.Katakana">
      <summary>The input method uses Katakana conversion mode.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.FullShape">
      <summary>The input method uses full-shape conversion mode.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.Roman">
      <summary>The input method uses Roman character conversion mode.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.CharCode">
      <summary>The input method uses character code conversion mode.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.NoConversion">
      <summary>The input method will not perform any input conversion.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.Eudc">
      <summary>The input method uses EUDC (end user defined character) conversion mode.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.Symbol">
      <summary>The input method uses symbol conversion mode.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.Fixed">
      <summary>The input method uses fixed conversion mode.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.Alphanumeric">
      <summary>The input method uses alphanumeric conversion mode.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.DoNotCare">
      <summary>The input method does not care what input conversion method is used; the actual conversion method is indeterminate.</summary>
    </member>
    <member name="T:System.Windows.Input.ImeSentenceModeValues">
      <summary>Specifies the mode of sentence conversion performed by an input method.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeSentenceModeValues.None">
      <summary>The input method does not perform any sentence conversion.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeSentenceModeValues.PluralClause">
      <summary>The input method uses plural clause sentence conversion.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeSentenceModeValues.SingleConversion">
      <summary>The input method uses single Kanji/Hanja sentence conversion.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeSentenceModeValues.Automatic">
      <summary>The input method uses the sentence conversion method automatically.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeSentenceModeValues.PhrasePrediction">
      <summary>The input method uses phrase prediction sentence conversion.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeSentenceModeValues.Conversation">
      <summary>The input method uses conversation-style sentence conversion.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeSentenceModeValues.DoNotCare">
      <summary>The input method does not care what sentence conversion method is used; the actual sentence conversion mode is indeterminate.</summary>
    </member>
    <member name="T:System.Windows.Input.InertiaExpansionBehavior">
      <summary>Controls the deceleration of a resizing manipulation during inertia.</summary>
    </member>
    <member name="M:System.Windows.Input.InertiaExpansionBehavior.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InertiaExpansionBehavior" /> class. </summary>
    </member>
    <member name="P:System.Windows.Input.InertiaExpansionBehavior.DesiredDeceleration">
      <summary>Gets or sets the rate that resizing slows in device-independent units (1/96th inch per unit) per square milliseconds.</summary>
      <returns>The rate that resizing slows in device-independent units (1/96th inch per unit) per square milliseconds. The default is <see cref="F:System.Double.NaN" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is set to infinity.-or-The property is set to <see cref="F:System.Double.NaN" />.</exception>
    </member>
    <member name="P:System.Windows.Input.InertiaExpansionBehavior.DesiredExpansion">
      <summary>Gets or sets the amount the element resizes at the end of inertia.</summary>
      <returns>The amount the element resizes at the end of inertia. The default is <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="P:System.Windows.Input.InertiaExpansionBehavior.InitialRadius">
      <summary>Gets or sets the initial average radius.</summary>
      <returns>The initial average radius.</returns>
    </member>
    <member name="P:System.Windows.Input.InertiaExpansionBehavior.InitialVelocity">
      <summary>Gets or sets the initial rate the element resizes at the start of inertia.</summary>
      <returns>The initial rate the element resizes at the start of inertia.</returns>
    </member>
    <member name="T:System.Windows.Input.InertiaRotationBehavior">
      <summary>Controls the deceleration of a rotation manipulation during inertia.</summary>
    </member>
    <member name="M:System.Windows.Input.InertiaRotationBehavior.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InertiaRotationBehavior" /> class. </summary>
    </member>
    <member name="P:System.Windows.Input.InertiaRotationBehavior.DesiredDeceleration">
      <summary>Gets or sets the rate the rotation slows in degrees per squared millisecond.</summary>
      <returns>The rate the rotation slows in degrees per squared millisecond. The default is <see cref="F:System.Double.NaN" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is set to infinity.-or-The property is set to <see cref="F:System.Double.NaN" />.</exception>
    </member>
    <member name="P:System.Windows.Input.InertiaRotationBehavior.DesiredRotation">
      <summary>Gets or sets the rotation, in degrees, at the end of the inertial movement.</summary>
      <returns>The rotation, in degrees, at the end of the inertial movement. The default is <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="P:System.Windows.Input.InertiaRotationBehavior.InitialVelocity">
      <summary>Gets or sets the initial rate of the rotation at the start of the inertia phase.</summary>
      <returns>The initial rate of the rotation at the start of the inertia phase.</returns>
    </member>
    <member name="T:System.Windows.Input.InertiaTranslationBehavior">
      <summary>Controls deceleration on a translation manipulation during inertia.</summary>
    </member>
    <member name="M:System.Windows.Input.InertiaTranslationBehavior.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InertiaTranslationBehavior" /> class. </summary>
    </member>
    <member name="P:System.Windows.Input.InertiaTranslationBehavior.DesiredDeceleration">
      <summary>Gets or sets the rate the linear movement slows in device-independent units (1/96th inch per unit) per squared millisecond.</summary>
      <returns>The rate the linear movement slows in device-independent units (1/96th inch per unit) per squared millisecond.  The default is <see cref="F:System.Double.NaN" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is set to infinity.-or-The property is set to <see cref="F:System.Double.NaN" />.</exception>
    </member>
    <member name="P:System.Windows.Input.InertiaTranslationBehavior.DesiredDisplacement">
      <summary>Gets or sets the linear movement of the manipulation at the end of inertia.</summary>
      <returns>The linear movement of the manipulation at the end of inertia. The default is <see cref="F:System.Double.NaN" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is set to infinity.-or-The property is set to <see cref="F:System.Double.NaN" />.</exception>
    </member>
    <member name="P:System.Windows.Input.InertiaTranslationBehavior.InitialVelocity">
      <summary>Gets or sets the initial rate of linear movement at the start of the inertia phase.</summary>
      <returns>The initial rate of linear movement at the start of the inertia phase.</returns>
    </member>
    <member name="T:System.Windows.Input.InputBinding">
      <summary>Represents a binding between an <see cref="T:System.Windows.Input.InputGesture" /> and a command. The command is potentially a <see cref="T:System.Windows.Input.RoutedCommand" />. </summary>
    </member>
    <member name="M:System.Windows.Input.InputBinding.#ctor">
      <summary>Provides base initialization for classes derived from <see cref="T:System.Windows.Input.InputBinding" />. </summary>
    </member>
    <member name="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputBinding" /> class with the specified command and input gesture.</summary>
      <param name="command">The command to associate with <paramref name="gesture" />.</param>
      <param name="gesture">The input gesture to associate with <paramref name="command" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="command" /> or <paramref name="gesture" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)">
      <summary>Copies the base (non-animated) values of the properties of the specified object.</summary>
      <param name="sourceFreezable">The object to clone.</param>
    </member>
    <member name="M:System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Copies the current values of the properties of the specified object.</summary>
      <param name="sourceFreezable">The object to clone.</param>
    </member>
    <member name="P:System.Windows.Input.InputBinding.Command">
      <summary>Gets or sets the <see cref="T:System.Windows.Input.ICommand" /> associated with this input binding. </summary>
      <returns>The associated command.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Windows.Input.InputBinding.Command" /> value is null.</exception>
    </member>
    <member name="P:System.Windows.Input.InputBinding.CommandParameter">
      <summary>Gets or sets the command-specific data for a particular command.</summary>
      <returns>The command-specific data. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Input.InputBinding.CommandParameterProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.InputBinding.CommandParameter" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.InputBinding.CommandParameter" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.Input.InputBinding.CommandProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.InputBinding.Command" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.InputBinding.Command" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Input.InputBinding.CommandTarget">
      <summary>Gets or sets the target element of the command.</summary>
      <returns>The target of the command. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Input.InputBinding.CommandTargetProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.InputBinding.CommandTarget" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.InputBinding.CommandTarget" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Input.InputBinding.CreateInstanceCore">
      <summary>Creates an instance of an <see cref="T:System.Windows.Input.InputBinding" />.</summary>
      <returns>The new object.</returns>
    </member>
    <member name="P:System.Windows.Input.InputBinding.Gesture">
      <summary>Gets or sets the <see cref="T:System.Windows.Input.InputGesture" /> associated with this input binding. </summary>
      <returns>The associated gesture. The default is null.</returns>
    </member>
    <member name="M:System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes the instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" /> by using base (non-animated) property values.</summary>
      <param name="sourceFreezable">The object to clone.</param>
    </member>
    <member name="M:System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes the current instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" />. If the object has animated dependency properties, their current animated values are copied.</summary>
      <param name="sourceFreezable">The object to clone.</param>
    </member>
    <member name="T:System.Windows.Input.InputBindingCollection">
      <summary>Represents an ordered collection of <see cref="T:System.Windows.Input.InputBinding" /> objects. </summary>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputBindingCollection" /> class. </summary>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.#ctor(System.Collections.IList)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputBindingCollection" /> class using the items in the specified <see cref="T:System.Collections.IList" />.  </summary>
      <param name="inputBindings">The collection whose items are copied to the new <see cref="T:System.Windows.Input.InputBindingCollection" />.</param>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.Add(System.Windows.Input.InputBinding)">
      <summary>Adds the specified <see cref="T:System.Windows.Input.InputBinding" /> to this <see cref="T:System.Windows.Input.InputBindingCollection" />. </summary>
      <returns>Always returns 0. This deviates from the standard <see cref="T:System.Collections.IList" /> implementation for Add, which should return the index where the new item was added to the collection.</returns>
      <param name="inputBinding">The binding to add to the collection.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="inputBinding" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.AddRange(System.Collections.ICollection)">
      <summary>Adds the items of the specified <see cref="T:System.Collections.ICollection" /> to the end of this <see cref="T:System.Windows.Input.InputBindingCollection" /></summary>
      <param name="collection">The collection of items to add to the end of this <see cref="T:System.Windows.Input.InputBindingCollection" />.</param>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.Clear">
      <summary>Removes all items from this <see cref="T:System.Windows.Input.InputBindingCollection" />. </summary>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.Contains(System.Windows.Input.InputBinding)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Input.InputBinding" /> is in this <see cref="T:System.Windows.Input.InputBindingCollection" /></summary>
      <returns>true if the specified <see cref="T:System.Windows.Input.InputBinding" /> is in the collection; otherwise, false.</returns>
      <param name="key">The binding to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.CopyTo(System.Windows.Input.InputBinding[],System.Int32)">
      <summary>Copies all of the items in the <see cref="T:System.Windows.Input.InputBindingCollection" /> to the specified one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="inputBindings">The array into which the collection is copied.</param>
      <param name="index">The index position in <paramref name="inputBindings" /> at which copying starts.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputBindings" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.</exception>
    </member>
    <member name="P:System.Windows.Input.InputBindingCollection.Count">
      <summary>Gets the number of <see cref="T:System.Windows.Input.InputBinding" /> items in this collection. </summary>
      <returns>The number of items in the collection.</returns>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.GetEnumerator">
      <summary>Gets an enumerator that iterates through this <see cref="T:System.Windows.Input.InputBindingCollection" />. </summary>
      <returns>The enumerator for this collection.</returns>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.IndexOf(System.Windows.Input.InputBinding)">
      <summary>Searches for the first occurrence of the specified <see cref="T:System.Windows.Input.InputBinding" /> in his <see cref="T:System.Windows.Input.InputBindingCollection" />.</summary>
      <returns>The index of the first occurrence of <paramref name="value" />, if found; otherwise, –1.</returns>
      <param name="value">The object to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.Insert(System.Int32,System.Windows.Input.InputBinding)">
      <summary>Inserts the specified <see cref="T:System.Windows.Input.InputBinding" /> into this <see cref="T:System.Windows.Input.InputBindingCollection" /> at the specified index. </summary>
      <param name="index">The zero-based index at which to insert <paramref name="inputBinding" />.</param>
      <param name="inputBinding">The binding to insert.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="inputBinding" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Input.InputBindingCollection.IsFixedSize">
      <summary>Gets a value that indicates whether this <see cref="T:System.Windows.Input.InputBindingCollection" /> has a fixed size. </summary>
      <returns>true if the collection has a fixed size; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Input.InputBindingCollection.IsReadOnly">
      <summary>Gets a value that indicates whether this <see cref="T:System.Windows.Input.InputBindingCollection" /> is read-only. </summary>
      <returns>true if the collection is read-only; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Input.InputBindingCollection.IsSynchronized">
      <summary>Gets a value indicating whether access to this <see cref="T:System.Windows.Input.InputBindingCollection" /> is synchronized (thread-safe). </summary>
      <returns>true if the collection is thread safe; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Input.InputBindingCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Windows.Input.InputBinding" /> at the specified index. </summary>
      <returns>The <see cref="T:System.Windows.Input.InputBinding" /> at the specified index.</returns>
      <param name="index">The position in the collection.</param>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.Remove(System.Windows.Input.InputBinding)">
      <summary>Removes the first occurrence of the specified <see cref="T:System.Windows.Input.InputBinding" /> from this <see cref="T:System.Windows.Input.InputBindingCollection" />. </summary>
      <param name="inputBinding">The binding to remove.</param>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.RemoveAt(System.Int32)">
      <summary>Removes the specified <see cref="T:System.Windows.Input.InputBinding" /> at the specified index of this <see cref="T:System.Windows.Input.InputBindingCollection" />. </summary>
      <param name="index">The zero-based index of the <see cref="T:System.Windows.Input.InputBinding" /> to remove.</param>
    </member>
    <member name="P:System.Windows.Input.InputBindingCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Windows.Input.InputBindingCollection" />. </summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Windows.Input.InputBindingCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">A zero-based <see cref="T:System.Array" /> that receives the copied items from the <see cref="T:System.Windows.Input.InputBindingCollection" />.</param>
      <param name="index">The first position in the specified <see cref="T:System.Array" /> to receive the copied contents.</param>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.System#Collections#IList#Add(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="inputBinding">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Windows.Input.InputBindingCollection" />.</param>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.System#Collections#IList#Contains(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Contains(System.Object)" />.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Windows.Input.InputBindingCollection" />; otherwise, false.</returns>
      <param name="key">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Media.TextEffectCollection" />.</param>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Input.InputBindingCollection" />.</param>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</summary>
      <param name="index">The zero-based index at which to insert the <see cref="T:System.Object" />.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Windows.Input.InputBindingCollection" />.</param>
    </member>
    <member name="P:System.Windows.Input.InputBindingCollection.System#Collections#IList#Item(System.Int32)">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.Item(System.Int32)" />.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.System#Collections#IList#Remove(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
      <param name="inputBinding">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Windows.Input.InputBindingCollection" />.</param>
    </member>
    <member name="T:System.Windows.Input.InputDevice">
      <summary>Abstract class that describes an input devices. </summary>
    </member>
    <member name="M:System.Windows.Input.InputDevice.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputDevice" /> class. </summary>
    </member>
    <member name="P:System.Windows.Input.InputDevice.ActiveSource">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Windows.PresentationSource" /> that is reporting input for this device.</summary>
      <returns>The source that is reporting input for this device.</returns>
    </member>
    <member name="P:System.Windows.Input.InputDevice.Target">
      <summary>When overridden in a derived class, gets the element that receives input from this device.</summary>
      <returns>The element that receives input.</returns>
    </member>
    <member name="T:System.Windows.Input.InputEventArgs">
      <summary>Provides data for input related events. </summary>
    </member>
    <member name="M:System.Windows.Input.InputEventArgs.#ctor(System.Windows.Input.InputDevice,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputEventArgs" /> class. </summary>
      <param name="inputDevice">The input device to associate with this event.</param>
      <param name="timestamp">The time when the input occurred.</param>
    </member>
    <member name="P:System.Windows.Input.InputEventArgs.Device">
      <summary>Gets the input device that initiated this event.</summary>
      <returns>The input device associated with this event.</returns>
    </member>
    <member name="M:System.Windows.Input.InputEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
      <summary>Invokes event handlers in a type-specific way, which can increase event system efficiency.</summary>
      <param name="genericHandler">The generic handler to call in a type-specific way.</param>
      <param name="genericTarget">The target to call the handler on.</param>
    </member>
    <member name="P:System.Windows.Input.InputEventArgs.Timestamp">
      <summary>Gets the time when this event occurred. </summary>
      <returns>The timestamp.</returns>
    </member>
    <member name="T:System.Windows.Input.InputEventHandler">
      <summary>Represents the method that handles input related routed events. </summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Input.InputGesture">
      <summary>Abstract class that describes input device gestures.</summary>
    </member>
    <member name="M:System.Windows.Input.InputGesture.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputGesture" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.InputGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)">
      <summary>When overridden in a derived class, determines whether the specified <see cref="T:System.Windows.Input.InputGesture" /> matches the input associated with the specified <see cref="T:System.Windows.Input.InputEventArgs" /> object.</summary>
      <returns>true if the gesture matches the input; otherwise, false.</returns>
      <param name="targetElement">The target of the command.</param>
      <param name="inputEventArgs">The input event data to compare this gesture to.</param>
    </member>
    <member name="T:System.Windows.Input.InputGestureCollection">
      <summary>Represents an ordered collection of <see cref="T:System.Windows.Input.InputGesture" /> objects. </summary>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputGestureCollection" /> class. </summary>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.#ctor(System.Collections.IList)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputGestureCollection" /> class using the elements in the specified <see cref="T:System.Collections.IList" />. </summary>
      <param name="inputGestures">The collection whose elements are copied to the new <see cref="T:System.Windows.Input.InputGestureCollection" />.</param>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.Add(System.Windows.Input.InputGesture)">
      <summary>Adds the specified <see cref="T:System.Windows.Input.InputGesture" /> to this <see cref="T:System.Windows.Input.InputGestureCollection" />. </summary>
      <returns>0, if the operation was successful (note that this is not the index of the added item).  </returns>
      <param name="inputGesture">The gesture to add to the collection.</param>
      <exception cref="T:System.NotSupportedException">the collection is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">the gesture is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.AddRange(System.Collections.ICollection)">
      <summary>Adds the elements of the specified <see cref="T:System.Collections.ICollection" /> to the end of this <see cref="T:System.Windows.Input.InputGestureCollection" />.</summary>
      <param name="collection">The collection of items to add to the end of this <see cref="T:System.Windows.Input.InputGestureCollection" />.</param>
      <exception cref="T:System.NotSupportedException">Any of the items in the collection to add are null.</exception>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">The collection to add is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.Clear">
      <summary>Removes all elements from the <see cref="T:System.Windows.Input.InputGestureCollection" />.</summary>
      <exception cref="T:System.NotSupportedException">The collection is read only.</exception>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.Contains(System.Windows.Input.InputGesture)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Input.InputGesture" /> is in the collection. </summary>
      <returns>true if the gesture is in the collection; otherwise, false.</returns>
      <param name="key">The gesture to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.CopyTo(System.Windows.Input.InputGesture[],System.Int32)">
      <summary>Copies all of the items in the <see cref="T:System.Windows.Input.InputGestureCollection" /> to the specified one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="inputGestures">An array into which the collection is copied.</param>
      <param name="index">The index position in the <paramref name="inputGestures" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputGestures" /> is a null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.</exception>
    </member>
    <member name="P:System.Windows.Input.InputGestureCollection.Count">
      <summary>Gets the number of <see cref="T:System.Windows.Input.InputGesture" /> items in this <see cref="T:System.Windows.Input.InputGestureCollection" />.</summary>
      <returns>The number of gestures in the collection.</returns>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.GetEnumerator">
      <summary>Gets an enumerator that iterates through this <see cref="T:System.Windows.Input.InputGestureCollection" />. </summary>
      <returns>The enumerator for this collection.</returns>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.IndexOf(System.Windows.Input.InputGesture)">
      <summary>Searches for the first occurrence of the specified <see cref="T:System.Windows.Input.InputGesture" /> in this <see cref="T:System.Windows.Input.InputGestureCollection" />.</summary>
      <returns>The index of the first occurrence of <paramref name="value" />, if found; otherwise, -1. </returns>
      <param name="value">The gesture to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.Insert(System.Int32,System.Windows.Input.InputGesture)">
      <summary> Inserts the specified <see cref="T:System.Windows.Input.InputGesture" /> into this <see cref="T:System.Windows.Input.InputGestureCollection" /> at the specified index.</summary>
      <param name="index">Index at which to insert <paramref name="inputGesture" />.</param>
      <param name="inputGesture">The gesture to insert.</param>
      <exception cref="T:System.NotSupportedException">the collection is read-only.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="inputGesture" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Input.InputGestureCollection.IsFixedSize">
      <summary>Gets a value that indicates whether this <see cref="T:System.Windows.Input.InputGestureCollection" /> has a fixed size. </summary>
      <returns>true if the collection has a fixed size; otherwise, false.  The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Input.InputGestureCollection.IsReadOnly">
      <summary>Gets a value that indicates whether this <see cref="T:System.Windows.Input.InputGestureCollection" /> is read-only.  The default value is false.</summary>
      <returns>true if the collection read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Input.InputGestureCollection.IsSynchronized">
      <summary>Gets a value that indicates whether this <see cref="T:System.Windows.Input.InputGestureCollection" /> is synchronized (thread safe). </summary>
      <returns>true if the collection is thread-safe; otherwise, false.  The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Input.InputGestureCollection.Item(System.Int32)">
      <summary>Gets or set the <see cref="T:System.Windows.Input.InputGesture" /> at the specified index. </summary>
      <returns>The gesture at the specified index.</returns>
      <param name="index">The position in the collection.</param>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.Remove(System.Windows.Input.InputGesture)">
      <summary>Removes the first occurrence of the specified <see cref="T:System.Windows.Input.InputGesture" /> from this <see cref="T:System.Windows.Input.InputGestureCollection" />.</summary>
      <param name="inputGesture">The gesture to remove.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">The gesture is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.RemoveAt(System.Int32)">
      <summary>Removes the specified <see cref="T:System.Windows.Input.InputGesture" /> at the specified index of this <see cref="T:System.Windows.Input.InputGestureCollection" />.</summary>
      <param name="index">The zero-based index of the gesture to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.</exception>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.Seal">
      <summary>Sets this <see cref="T:System.Windows.Input.InputGestureCollection" /> to read-only. </summary>
    </member>
    <member name="P:System.Windows.Input.InputGestureCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to this <see cref="T:System.Windows.Input.InputGestureCollection" />. </summary>
      <returns>The object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">A zero-based <see cref="T:System.Array" /> that receives the copied items from the <see cref="T:System.Windows.Input.InputGestureCollection" />.</param>
      <param name="index">The first position in the specified <see cref="T:System.Array" /> to receive the copied contents.</param>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.System#Collections#IList#Add(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="inputGesture">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Windows.Input.InputGestureCollection" />.</param>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.System#Collections#IList#Contains(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Contains(System.Object)" />.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Windows.Input.InputGestureCollection" />; otherwise, false.</returns>
      <param name="key">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Media.TextEffectCollection" />.</param>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Input.InputGestureCollection" />.</param>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</summary>
      <param name="index">The zero-based index at which to insert the <see cref="T:System.Object" />.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Windows.Input.InputGestureCollection" />.</param>
    </member>
    <member name="P:System.Windows.Input.InputGestureCollection.System#Collections#IList#Item(System.Int32)">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.Item(System.Int32)" />.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.System#Collections#IList#Remove(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
      <param name="inputGesture">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Windows.Input.InputGestureCollection" />.</param>
    </member>
    <member name="T:System.Windows.Input.InputLanguageChangedEventArgs">
      <summary>Contains arguments associated with the <see cref="E:System.Windows.Input.InputLanguageManager.InputLanguageChanged" /> event.</summary>
    </member>
    <member name="M:System.Windows.Input.InputLanguageChangedEventArgs.#ctor(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputLanguageChangedEventArgs" /> class.</summary>
      <param name="newLanguageId">A <see cref="T:System.Globalization.CultureInfo" /> object representing a new current input language.</param>
      <param name="previousLanguageId">A <see cref="T:System.Globalization.CultureInfo" /> object representing the previous current input language.</param>
    </member>
    <member name="T:System.Windows.Input.InputLanguageChangingEventArgs">
      <summary>Contains arguments associated with the <see cref="E:System.Windows.Input.InputLanguageManager.InputLanguageChanging" /> event.</summary>
    </member>
    <member name="M:System.Windows.Input.InputLanguageChangingEventArgs.#ctor(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputLanguageChangingEventArgs" /> class.</summary>
      <param name="newLanguageId">A <see cref="T:System.Globalization.CultureInfo" /> object representing a new current input language.</param>
      <param name="previousLanguageId">A <see cref="T:System.Globalization.CultureInfo" /> object representing the previous current input language.</param>
    </member>
    <member name="P:System.Windows.Input.InputLanguageChangingEventArgs.Rejected">
      <summary>Gets or sets a value that indicates whether the initiated change of input language should be accepted or rejected.</summary>
      <returns>true to reject the initiated change of input language; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.Input.InputLanguageEventArgs">
      <summary>Provides a base class for arguments for events dealing with a change in input language.</summary>
    </member>
    <member name="M:System.Windows.Input.InputLanguageEventArgs.#ctor(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
      <summary>Initializes base class values for a new instance of a deriving class.</summary>
      <param name="newLanguageId">A <see cref="T:System.Globalization.CultureInfo" /> object representing a new current input language.</param>
      <param name="previousLanguageId">A <see cref="T:System.Globalization.CultureInfo" /> object representing the previous current input language.</param>
    </member>
    <member name="P:System.Windows.Input.InputLanguageEventArgs.NewLanguage">
      <summary>Gets a <see cref="T:System.Globalization.CultureInfo" /> object representing the new current input language.</summary>
      <returns>A <see cref="T:System.Globalization.CultureInfo" /> object representing the new current input language.</returns>
    </member>
    <member name="P:System.Windows.Input.InputLanguageEventArgs.PreviousLanguage">
      <summary>Gets a <see cref="T:System.Globalization.CultureInfo" /> object representing the previous current input language.</summary>
      <returns>A <see cref="T:System.Globalization.CultureInfo" /> object representing the previous current input language.</returns>
    </member>
    <member name="T:System.Windows.Input.InputLanguageEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Input.InputLanguageManager.InputLanguageChanged" /> and <see cref="E:System.Windows.Input.InputLanguageManager.InputLanguageChanging" /> events.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Input.InputLanguageManager">
      <summary>Provides facilities for managing input languages in Windows Presentation Foundation (WPF).</summary>
    </member>
    <member name="P:System.Windows.Input.InputLanguageManager.AvailableInputLanguages">
      <summary>Gets an enumerator for currently available input languages.</summary>
      <returns>An enumerator for currently available input languages, or null if no input languages are available.This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Input.InputLanguageManager.Current">
      <summary>Gets the input language manager associated with the current context.</summary>
      <returns>An <see cref="T:System.Windows.Input.InputLanguageManager" /> object associated with the current context.This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Input.InputLanguageManager.CurrentInputLanguage">
      <summary>Gets or sets the current input language.</summary>
      <returns>A <see cref="T:System.Globalization.CultureInfo" /> object representing the currently selected input language.  This property may not be set to null.The default value is <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.</returns>
      <exception cref="T:System.ArgumentNullException">Raised when an attempt is made to set this property to null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputLanguageManager.GetInputLanguage(System.Windows.DependencyObject)">
      <summary>Returns the value of the <see cref="P:System.Windows.Input.InputLanguageManager.InputLanguage" />  attached property for a specified dependency object.</summary>
      <returns>A <see cref="T:System.Globalization.CultureInfo" /> object representing the input language for the specified dependency object.</returns>
      <param name="target">The dependency object for which to retrieve the input language.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputLanguageManager.GetRestoreInputLanguage(System.Windows.DependencyObject)">
      <summary>Returns the value of <see cref="P:System.Windows.Input.InputLanguageManager.RestoreInputLanguage" />  attached property for a specified dependency object.</summary>
      <returns>The current value of <see cref="P:System.Windows.Input.InputLanguageManager.RestoreInputLanguage" /> for the specified dependency object.</returns>
      <param name="target">The dependency object for which to retrieve the value of <see cref="P:System.Windows.Input.InputLanguageManager.RestoreInputLanguage" />.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="target" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Input.InputLanguageManager.InputLanguage">
      <summary>Gets or sets the preferred input language for the associated dependency object.</summary>
      <returns>A <see cref="T:System.Globalization.CultureInfo" /> object representing the preferred input language for the associated dependency object.This property has no default value.</returns>
    </member>
    <member name="E:System.Windows.Input.InputLanguageManager.InputLanguageChanged">
      <summary>Occurs when a change of input language is completed.</summary>
    </member>
    <member name="E:System.Windows.Input.InputLanguageManager.InputLanguageChanging">
      <summary>Occurs when a change of input language is initiated.</summary>
    </member>
    <member name="F:System.Windows.Input.InputLanguageManager.InputLanguageProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.InputLanguageManager.InputLanguage" />  attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.InputLanguageManager.InputLanguage" /> attached property.</returns>
    </member>
    <member name="M:System.Windows.Input.InputLanguageManager.RegisterInputLanguageSource(System.Windows.Input.IInputLanguageSource)">
      <summary>Registers an input language source with the <see cref="T:System.Windows.Input.InputLanguageManager" />.</summary>
      <param name="inputLanguageSource">An object that specifies the input language to register.  This object must implement the <see cref="T:System.Windows.Input.IInputLanguageSource" /> interface.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="inputLanguageSource" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputLanguageManager.ReportInputLanguageChanged(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
      <summary>Report the completion of a change of input language to the <see cref="T:System.Windows.Input.InputLanguageManager" />.</summary>
      <param name="newLanguageId">A <see cref="T:System.Globalization.CultureInfo" /> object representing the new input language.</param>
      <param name="previousLanguageId">A <see cref="T:System.Globalization.CultureInfo" /> object representing the previous input language.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="newLanguageId" /> or <paramref name="previousLanguageId" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputLanguageManager.ReportInputLanguageChanging(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
      <summary>Report the initiation of a change of input language to the <see cref="T:System.Windows.Input.InputLanguageManager" />.</summary>
      <returns>true to indicate that the reported change of input language was accepted; otherwise, false.</returns>
      <param name="newLanguageId">A <see cref="T:System.Globalization.CultureInfo" /> object representing the new input language.</param>
      <param name="previousLanguageId">A <see cref="T:System.Globalization.CultureInfo" /> object representing the previous input language.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="newLanguageId" /> or <paramref name="previousLanguageId" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Input.InputLanguageManager.RestoreInputLanguage">
      <summary>Gets or sets a value that indicates whether or not the previously active input language should be restored when the associated dependency object looses the input focus.</summary>
      <returns>true to restore the previously selected input language; otherwise, false.This property has no default value.</returns>
    </memb