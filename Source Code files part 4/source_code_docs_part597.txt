light.Testing.Client.Notification.CloseButtonName">
            <summary>
            Name of the template part.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.Notification.TitleProperty">
            <summary>
            Identifies the Title dependency property.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.Notification.CloseButtonVisibilityProperty">
            <summary>
            Identifies the CloseButtonVisibility dependency property.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.Notification._close">
            <summary>
            Backing field for the close button.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.Notification.#ctor">
            <summary>
            Initializes a new instance of the Notification class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.Notification.OnClosed(System.Windows.RoutedEventArgs)">
            <summary>
            Fires the Closed event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.Notification.OnApplyTemplate">
            <summary>
            Overrides the on apply template method.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.Notification.OnCloseClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Connects to the Click event of the Close button.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.Notification.Title">
            <summary>
            Gets or sets the title of the notification.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.Notification.CloseButtonVisibility">
            <summary>
            Gets or sets the visibility of the close button.
            </summary>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Client.Notification.Closed">
            <summary>
            Closed event that connects to the close button of the notification.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.Notifications">
            <summary>
            A class that contains notification information.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.Notifications.#ctor">
            <summary>
            Initialize a new intance of the Notifications type.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.Notifications.OnApplyTemplate">
            <summary>
            Overrides the on apply template method.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.Notifications.AddNotification(Microsoft.Silverlight.Testing.Client.Notification)">
            <summary>
            Adds a notification object to the set of notifications. Connects the
            close button handler to automatically remove the notification from
            the visual tree.
            </summary>
            <param name="notification">A notification instance.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.Notifications.OnNotificationClosed(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Closed event from the notification and removes the
            child.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.TestApplicationInformation">
            <summary>
            This class contains information about the test application and its
            deployment settings.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestApplicationInformation.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestApplicationInformation.OnInstallStateChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the install state changed event.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestApplicationInformation._installed">
            <summary>
            Backing field for an installed property.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestApplicationInformation.OutOfBrowserApplicationInstalled">
            <summary>
            Gets a value indicating whether the test application is currently
            installed out of browser.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestApplicationInformation.InstallationStateText">
            <summary>
            Gets the text to show the user the state of the out of browser test
            application.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestApplicationInformation.SupportsOutOfBrowserAndNotInstalled">
            <summary>
            Gets a value indicating whether out of browser is both supported and
            not currently installed.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestApplicationInformation.SupportsOutOfBrowser">
            <summary>
            Gets a value indicating whether out of browser is supported by this
            test application.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Service.SimpleXElement">
            <summary>
            A simple implementation similar to XElement.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.SimpleXElement._children">
            <summary>
            Backing field for child elements.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.SimpleXElement._attributes">
            <summary>
            Backing field for attributes.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.SimpleXElement._name">
            <summary>
            Backing field for the element name.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.SimpleXElement._namespace">
            <summary>
            Backing field for optional XML namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the element.
            </summary>
            <param name="elementName">The name of the element.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the element.
            </summary>
            <param name="elementName">The name of the element.</param>
            <param name="ns">The XML namespace of the element.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.#ctor(System.Xml.XmlReader)">
            <summary>
            Initializes a new instance of the class using the reader as the
            current root of the element.
            </summary>
            <param name="newElementReader">The XmlReader instance.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.SetElementValue(System.String,System.String)">
            <summary>
            Sets the value of a new child element.
            </summary>
            <param name="elementName">The element name.</param>
            <param name="value">The value of the new element.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.SetElementValue(System.String,System.String,System.String)">
            <summary>
            Sets the value of a new child element with an XML namespace value.
            </summary>
            <param name="elementName">The element name.</param>
            <param name="value">The value of the new element.</param>
            <param name="xmlNamespace">The XML namespace.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the value of an attribute.
            </summary>
            <param name="attribute">The attribute name.</param>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.SetValue(System.String)">
            <summary>
            Sets the value of the element.
            </summary>
            <param name="value">The new string value.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.Attribute(System.String)">
            <summary>
            Gets an attribute value.
            </summary>
            <param name="name">The attribute name.</param>
            <returns>Returns an instance of the attribute value.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.Add(Microsoft.Silverlight.Testing.Service.SimpleXElement)">
            <summary>
            Adds a child element to the simple element instance.
            </summary>
            <param name="child">The child element instance.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.Descendants(System.String)">
            <summary>
            Returns descendants.
            </summary>
            <param name="elementName">The element name to look for.</param>
            <returns>Returns an enumeration of elements.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.Parse(System.String)">
            <summary>
            Creates a new SimpleXElement.
            </summary>
            <param name="xml">XML content.</param>
            <returns>Returns a new instance of the element and children.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.ParseInternal(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Parses the current level with the XmlReader instance.
            </summary>
            <param name="reader">The reader instance.</param>
            <param name="isFirst">A value indicating whether this is the first
            parse. Actually this will always be true for now.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.ToString">
            <summary>
            Generates the string representation of the element and its tree.
            </summary>
            <returns>Returns the string representation of the element.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.WriteElement(System.Xml.XmlWriter)">
            <summary>
            Writes to the XML writer without document start and ends.
            </summary>
            <param name="w">The writer instance.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.SimpleXElement.Name">
            <summary>
            Gets the element name.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.SimpleXElement.Value">
            <summary>
            Gets or sets the element text, if any.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Toolkit\Mar10\Themes\System.Windows.Controls.Theming.ShinyBlue.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <assembly>
    <name>System.Windows.Controls.Theming.ShinyBlue</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.Windows.Controls.Theming.ShinyBlue.dll</relpath>
    <extension downloadUri="System.Windows.Controls.Theming.ShinyBlue.zip" />
  </assembly>

</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Toolkit\Mar10\Themes\System.Windows.Controls.Theming.ShinyRed.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <assembly>
    <name>System.Windows.Controls.Theming.ShinyRed</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.Windows.Controls.Theming.ShinyRed.dll</relpath>
    <extension downloadUri="System.Windows.Controls.Theming.ShinyRed.zip" />
  </assembly>

</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Toolkit\Mar10\Bin\System.Windows.Controls.Input.Toolkit.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Controls.Input.Toolkit</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Controls.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Automation_OperationCannotBePerformed">
            <summary>
              Looks up a localized string similar to Cannot perform operation..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.DomainUpDown_CurrentIndex_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid index value &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.DomainUpDown_InvalidInputAction_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid InvalidInputAction value &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Expander_OnExpandDirectionPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid ExpandDirection value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.InvalidAttemptToChangeReadOnlyProperty">
            <summary>
              Looks up a localized string similar to Invalid attempt to change read-only property &quot;{0}.&quot;.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ListTimePickerPopup_TimeItemsSelection_ReadOnly">
            <summary>
              Looks up a localized string similar to Cannot set read-only property TimeItemsSelection..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.NumericUpDown_EnsureValidDoubleValue_InvalidDoubleValue">
            <summary>
              Looks up a localized string similar to Invalid double value &apos;{0}&apos;: valid value is of double type and within decimal range..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.NumericUpDown_EnsureValidIncrementValue_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid Increment value &apos;{0}&apos;: valid value is of double type, within decimal range, and positive.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.NumericUpDown_OnDecimalPlacesPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid DecimalPlaces value &apos;{0}&apos;: valid value is of int type and within 0 and 15 inclusive..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ObservableObjectCollection_ReadOnly">
            <summary>
              Looks up a localized string similar to The collection is currently ReadOnly and should not be modified..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Picker_OnMaxDropDownHeightPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid maximum drop down height value &apos;{0}&apos;. The value must be greater than or equal to zero..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Picker_PopupButtonModeNotValid">
            <summary>
              Looks up a localized string similar to Invalid PopupButtonMode value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Rating_SetItemCount_ItemCountMustBeLargerThanOrEqualToZero">
            <summary>
              Looks up a localized string similar to Value must be larger than or equal to 0..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.RatingAutomationPeer_GetLocalizedControlTypeCore">
            <summary>
              Looks up a localized string similar to Rating.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.RatingAutomationPeer_SetValue">
            <summary>
              Looks up a localized string similar to Value must be null or a number between 0 and 1..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.RatingItemAutomationPeer_GetLocalizedControlTypeCore">
            <summary>
              Looks up a localized string similar to Star.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Spinner_SpinNotValid">
            <summary>
              Looks up a localized string similar to Spin action is not valid at this moment..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TimeInput_PopupMinutesInterval_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid PopupMinutesInterval &apos;{0}&apos;. The interval can be set to 0 (no interval) to and including 59..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TimeInput_PopupSecondsInterval_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid PopupSecondsInterval &apos;{0}&apos;.The interval can be set to 0 (no interval) to and including 59..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TimePicker_PopupSetInStyle">
            <summary>
              Looks up a localized string similar to Cannot set the PopupProperty in a style. Please use PopupTemplate..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TimePicker_PopupTimeSelectionModeNotValid">
            <summary>
              Looks up a localized string similar to Invalid PopupTimeSelectionMode for this popup, value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TimeUpDown_OnTimeHintContentChanged">
            <summary>
              Looks up a localized string similar to Cannot set read-only property TimeHintContent..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TypeConverters_Convert_CannotConvert">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is unable to convert &apos;{1}&apos; to &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TypeConverters_ConvertFrom_CannotConvertFromType">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; cannot convert from &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.UpDown_ParseException">
            <summary>
              Looks up a localized string similar to Cannot parse text &apos;{0}&apos;.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Extensions">
            <summary>
            This set of internal extension methods provide general solutions and 
            utilities in a small enough number to not warrant a dedicated extension
            methods class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Extensions.Invert(System.Windows.Media.Matrix,System.Windows.Media.Matrix@)">
            <summary>
            Inverts a Matrix. The Invert functionality on the Matrix type is 
            internal to the framework only. Since Matrix is a struct, an out 
            parameter must be presented.
            </summary>
            <param name="m">The Matrix object.</param>
            <param name="outputMatrix">The matrix to return by an output 
            parameter.</param>
            <returns>Returns a value indicating whether the type was 
            successfully inverted. If the determinant is 0.0, then it cannot 
            be inverted and the original instance will remain untouched.</returns>
        </member>
        <member name="M:System.Windows.Controls.Extensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            An implementation of the Contains member of string that takes in a 
            string comparison. The traditional .NET string Contains member uses 
            StringComparison.Ordinal.
            </summary>
            <param name="s">The string.</param>
            <param name="value">The string value to search for.</param>
            <param name="comparison">The string comparison type.</param>
            <returns>Returns true when the substring is found.</returns>
        </member>
        <member name="T:System.Windows.Controls.BindingSourceEvaluator`1">
            <summary>
            A framework element that permits a binding to be evaluated in a new data
            context leaf node. Uses the BindingSource to do the evaluation.
            </summary>
            <typeparam name="T">The type of dynamic binding to return.</typeparam>
            <remarks>Mimicks the class BindingEvaluator that uses DataContext
            to do evaluation.</remarks>
        </member>
        <member name="F:System.Windows.Controls.BindingSourceEvaluator`1.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.BindingSourceEvaluator`1.#ctor(System.Windows.Data.Binding)">
            <summary>
            Initializes a new instance of the BindingSourceEvaluator class.
            </summary>
            <param name="binding">The binding.</param>
        </member>
        <member name="M:System.Windows.Controls.BindingSourceEvaluator`1.GetDynamicValue(System.Object)">
            <summary>
            Evaluates the specified source.
            </summary>
            <param name="source">The object used as a source for the
            evaluation.</param>
            <returns>The evaluated binding.</returns>
            <remarks>Only uses Path, Converter, ConverterCulture and
            ConverterParameter.</remarks>
        </member>
        <member name="P:System.Windows.Controls.BindingSourceEvaluator`1.Value">
            <summary>
            Gets the data item string value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.BindingSourceEvaluator`1.ValueBinding">
            <summary>
            Gets the value binding that is used as a template
            for the actual evaluation.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.InteractionHelper">
            <summary>
            The InteractionHelper provides controls with support for all of the
            common interactions like mouse movement, mouse clicks, key presses,
            etc., and also incorporates proper event semantics when the control is
            disabled.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper.SequentialClickThresholdInMilliseconds">
            <summary>
            The threshold used to determine whether two clicks are temporally
            local and considered a double click (or triple, quadruple, etc.).
            500 milliseconds is the default double click value on Windows.
            This value would ideally be pulled form the system settings.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper.SequentialClickThresholdInPixelsSquared">
            <summary>
            The threshold used to determine whether two clicks are spatially
            local and considered a double click (or triple, quadruple, etc.)
            in pixels squared.  We use pixels squared so that we can compare to
            the distance delta without taking a square root.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper._updateVisualState">
            <summary>
            Reference used to call UpdateVisualState on the base class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.#ctor(System.Windows.Controls.Control)">
            <summary>
            Initializes a new instance of the InteractionHelper class.
            </summary>
            <param name="control">Control receiving interaction.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
            <remarks>
            UpdateVisualState works differently than the rest of the injected
            functionality.  Most of the other events are overridden by the
            calling class which calls Allow, does what it wants, and then calls
            Base.  UpdateVisualState is the opposite because a number of the
            methods in InteractionHelper need to trigger it in the calling
            class.  We do this using the IUpdateVisualState internal interface.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.UpdateVisualStateBase(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the control's Loaded event.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle changes to the control's IsEnabled property.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnIsReadOnlyChanged(System.Boolean)">
            <summary>
            Handles changes to the control's IsReadOnly property.
            </summary>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnApplyTemplateBase">
            <summary>
            Update the visual state of the control when its template is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's GotFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnGotFocusBase">
            <summary>
            Base implementation of the virtual GotFocus event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's LostFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnLostFocusBase">
            <summary>
            Base implementation of the virtual LostFocus event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseEnter event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseEnterBase">
            <summary>
            Base implementation of the virtual MouseEnter event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseLeave event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeaveBase">
            <summary>
            Base implementation of the virtual MouseLeave event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeftButtonDownBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonDown event
            handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeftButtonUpBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonUp event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.GetLogicalKey(System.Windows.FlowDirection,System.Windows.Input.Key)">
            <summary>
            Translates keys for proper RightToLeft mode support.
            </summary>
            <param name="flowDirection">Control's flow direction mode.</param>
            <param name="originalKey">Original key.</param>
            <returns>
            A translated key code, indicating how the original key should be interpreted.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.Control">
            <summary>
            Gets the control the InteractionHelper is targeting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsFocused">
            <summary>
            Gets a value indicating whether the control has focus.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsMouseOver">
            <summary>
            Gets a value indicating whether the mouse is over the control.
            </summary> 
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsReadOnly">
            <summary>
            Gets a value indicating whether the read-only property is set.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsPressed">
            <summary>
            Gets a value indicating whether the mouse button is pressed down
            over the control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.LastClickTime">
            <summary>
            Gets or sets the last time the control was clicked.
            </summary>
            <remarks>
            The value is stored as Utc time because it is slightly more
            performant than converting to local time.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.LastClickPosition">
            <summary>
            Gets or sets the mouse position of the last click.
            </summary>
            <remarks>The value is relative to the control.</remarks>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.ClickCount">
            <summary>
            Gets the number of times the control was clicked.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ItemsControlHelper">
            <summary>
            The ItemContainerGenerator provides useful utilities for ItemsControls.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.ItemsControlHelper._itemsHost">
            <summary>
            A Panel that is used as the ItemsHost of the ItemsControl.  This
            property will only be valid when the ItemsControl is live in the
            tree and has generated containers for some of its items.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ItemsControlHelper._scrollHost">
            <summary>
            A ScrollViewer that is used to scroll the items in the ItemsHost.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.#ctor(System.Windows.Controls.ItemsControl)">
            <summary>
            Initializes a new instance of the ItemContainerGenerator.
            </summary>
            <param name="control">
            The ItemsControl being tracked by the ItemContainerGenerator.
            </param>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.OnApplyTemplate">
            <summary>
            Apply a control template to the ItemsControl.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Windows.Style)">
            <summary>
            Prepares the specified container to display the specified item.
            </summary>
            <param name="element">
            Container element used to display the specified item.
            </param>
            <param name="parentItemContainerStyle">
            The ItemContainerStyle for the parent ItemsControl.
            </param>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.UpdateItemContainerStyle(System.Windows.Style)">
            <summary>
            Update the style of any generated items when the ItemContainerStyle
            has been changed.
            </summary>
            <param name="itemContainerStyle">The ItemContainerStyle.</param>
            <remarks>
            Silverlight does not support setting a Style multiple times, so we
            only attempt to set styles on elements whose style hasn't already
            been set.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.ScrollIntoView(System.Windows.FrameworkElement)">
            <summary>
            Scroll the desired element into the ScrollHost's viewport.
            </summary>
            <param name="element">Element to scroll into view.</param>
        </member>
        <member name="P:System.Windows.Controls.ItemsControlHelper.ItemsControl">
            <summary>
            Gets or sets the ItemsControl being tracked by the
            ItemContainerGenerator.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ItemsControlHelper.ItemsHost">
            <summary>
            Gets a Panel that is used as the ItemsHost of the ItemsControl.
            This property will only be valid when the ItemsControl is live in
            the tree and has generated containers for some of its items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ItemsControlHelper.ScrollHost">
            <summary>
            Gets a ScrollViewer that is used to scroll the items in the
            ItemsHost.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.IUpdateVisualState">
            <summary>
            The IUpdateVisualState interface is used to provide the
            InteractionHelper with access to the type's UpdateVisualState method.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.IUpdateVisualState.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="T:System.Windows.Controls.TypeConverters">
            <summary>
            Common TypeConverter functionality.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.CanConvertFrom``1(System.Type)">
            <summary>
            Returns a value indicating whether this converter can convert an
            object of the given type to an instance of the expected type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="sourceType">
            The type of the source that is being evaluated for conversion.
            </param>
            <returns>
            A value indicating whether the converter can convert the provided
            type.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.ConvertFrom``1(System.ComponentModel.TypeConverter,System.Object)">
            <summary>
            Attempts to convert a specified object to an instance of the
            expected type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="converter">TypeConverter instance.</param>
            <param name="value">The object being converted.</param>
            <returns>
            The instance of the expected type created from the converted object.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.CanConvertTo``1(System.Type)">
            <summary>
            Determines whether conversion is possible to a specified type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="destinationType">
            Identifies the data type to evaluate for conversion.
            </param>
            <returns>
            A value indicating whether conversion is possible.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.ConvertTo(System.ComponentModel.TypeConverter,System.Object,System.Type)">
            <summary>
            Attempts to convert a specified object to an instance of the
            desired type.
            </summary>
            <param name="converter">TypeConverter instance.</param>
            <param name="value">The object being converted.</param>
            <param name="destinationType">
            The type to convert the value to.
            </param>
            <returns>
            The value of the conversion to the specified type.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.VisualStates">
            <summary>
            Names and helpers for visual states in the controls.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupCommon">
            <summary>
            Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateNormal">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateReadOnly">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateMouseOver">
            <summary>
            MouseOver state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePressed">
            <summary>
            Pressed state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDisabled">
            <summary>
            Disabled state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupFocus">
            <summary>
            Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnfocused">
            <summary>
            Unfocused state of the Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateFocused">
            <summary>
            Focused state of the Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupSelection">
            <summary>
            Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateSelected">
            <summary>
            Selected state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnselected">
            <summary>
            Unselected state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateSelectedInactive">
            <summary>
            Selected inactive state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupExpansion">
            <summary>
            Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpanded">
            <summary>
            Expanded state of the Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCollapsed">
            <summary>
            Collapsed state of the Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupPopup">
            <summary>
            Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePopupOpened">
            <summary>
            Opened state of the Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePopupClosed">
            <summary>
            Closed state of the Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupValidation">
            <summary>
            ValidationStates state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateValid">
            <summary>
            The valid state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInvalidFocused">
            <summary>
            Invalid, focused state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInvalidUnfocused">
            <summary>
            Invalid, unfocused state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupExpandDirection">
            <summary>
            ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandDown">
            <summary>
            Down expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandUp">
            <summary>
            Up expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandLeft">
            <summary>
            Left expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandRight">
            <summary>
            Right expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupHasItems">
            <summary>
            HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateHasItems">
            <summary>
            HasItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateNoItems">
            <summary>
            NoItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupIncrease">
            <summary>
            Increment state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateIncreaseEnabled">
            <summary>
            State enabled for increment group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateIncreaseDisabled">
            <summary>
            State disabled for increment group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupDecrease">
            <summary>
            Decrement state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDecreaseEnabled">
            <summary>
            State enabled for decrement group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDecreaseDisabled">
            <summary>
            State disabled for decrement group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupInteractionMode">
            <summary>
            InteractionMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateEdit">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDisplay">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupLocked">
            <summary>
            DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateLocked">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnlocked">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateActive">
            <summary>
            Active state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInactive">
            <summary>
            Inactive state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupActive">
            <summary>
            Active state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnwatermarked">
            <summary>
            Non-watermarked state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateWatermarked">
            <summary>
            Watermarked state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupWatermark">
            <summary>
            Watermark state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCalendarButtonUnfocused">
            <summary>
            Unfocused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCalendarButtonFocused">
            <summary>
            Focused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupCalendarButtonFocus">
            <summary>
            CalendarButtons Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateBusy">
            <summary>
            Busy state for BusyIndicator.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateIdle">
            <summary>
            Idle state for BusyIndicator.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupBusyStatus">
            <summary>
            Busyness group name.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateVisible">
            <summary>
            Visible state name for BusyIndicator.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateHidden">
            <summary>
            Hidden state name for BusyIndicator.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupVisibility">
            <summary>
            BusyDisplay group.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.GoToState(System.Windows.Controls.Control,System.Boolean,System.String[])">
            <summary>
            Use VisualStateManager to change the visual state of the control.
            </summary>
            <param name="control">
            Control whose visual state is being changed.
            </param>
            <param name="useTransitions">
            A value indicating whether to use transitions when updating the
            visual state, or to snap directly to the new visual state.
            </param>
            <param name="stateNames">
            Ordered list of state names and fallback states to transition into.
            Only the first state to be found will be used.
            </param>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.GetImplementationRoot(System.Windows.DependencyObject)">
            <summary>
            Gets the implementation root of the Control.
            </summary>
            <param name="dependencyObject">The DependencyObject.</param>
            <remarks>
            Implements Silverlight's corresponding internal property on Control.
            </remarks>
            <returns>Returns the implementation root or null.</returns>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.TryGetVisualStateGroup(System.Windows.DependencyObject,System.String)">
            <summary>
            This method tries to get the named VisualStateGroup for the 
            dependency object. The provided object's ImplementationRoot will be 
            looked up in this call.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="groupName">The visual state group's name.</param>
            <returns>Returns null or the VisualStateGroup object.</returns>
        </member>
        <member name="T:System.Windows.Controls.WeakEventListener`3">
            <summary>
            Implements a weak event listener that allows the owner to be garbage
            collected if its only remaining link is an event handler.
            </summary>
            <typeparam name="TInstance">Type of instance listening for the event.</typeparam>
            <typeparam name="TSource">Type of source for the event.</typeparam>
            <typeparam name="TEventArgs">Type of event arguments for the event.</typeparam>
        </member>
        <member name="F:System.Windows.Controls.WeakEventListener`3._weakInstance">
            <summary>
            WeakReference to the instance listening for the event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.#ctor(`0)">
            <summary>
            Initializes a new instances of the WeakEventListener class.
            </summary>
            <param name="instance">Instance subscribing to the event.</param>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.OnEvent(`1,`2)">
            <summary>
            Handler for the subscribed event calls OnEventAction to handle it.
            </summary>
            <param name="source">Event source.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.Detach">
            <summary>
            Detaches from the subscribed event.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.WeakEventListener`3.OnEventAction">
            <summary>
            Gets or sets the method to call when the event fires.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.WeakEventListener`3.OnDetachAction">
            <summary>
            Gets or sets the method to call when detaching from the event.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DesignerProperties">
            <summary>
            Provides a custom implementation of DesignerProperties.GetIsInDesignMode
            to work around an issue.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DesignerProperties.GetIsInDesignMode(System.Windows.DependencyObject)">
            <summary>
            Returns whether the control is in design mode (running under Blend
            or Visual Studio).
            </summary>
            <param name="element">The element from which the property value is
            read.</param>
            <returns>True if in design mode.</returns>
        </member>
        <member name="F:System.Windows.Controls.DesignerProperties._isInDesignMode">
            <summary>
            Stores the computed InDesignMode value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ContextMenu">
            <summary>
            Represents a pop-up menu that enables a control to expose functionality that is specific to the context of the control.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.Primitives.MenuBase">
            <summary>
            Represents a control that defines choices for users to select.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Primitives.MenuBase.ItemContainerStyleProperty">
            <summary>
            Identifies the ItemContainerStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.MenuBase.#ctor">
            <summary>
            Initializes a new instance of the MenuBase class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.MenuBase.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines whether the specified item is, or is eligible to be, its own item container.
            </summary>
            <param name="item">The item to check whether it is an item container.</param>
            <returns>True if the item is a MenuItem or a Separator; otherwise, false.</returns>
        </member>
        <member name="M:System.Windows.Controls.Primitives.MenuBase.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element used to display the specified item.
            </summary>
            <returns>A MenuItem.</returns>
        </member>
        <member name="M:System.Windows.Controls.Primitives.MenuBase.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">Element used to display the specified item.</param>
            <param name="item">Specified item.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.MenuBase.HasDefaultValue(System.Windows.Controls.Control,System.Windows.DependencyProperty)">
            <summary>
            Checks whether a control has the default value for a property.
            </summary>
            <param name="control">The control to check.</param>
            <param name="property">The property to check.</param>
            <returns>True if the property has the default value; false otherwise.</returns>
        </member>
        <member name="P:System.Windows.Controls.Primitives.MenuBase.ItemContainerStyle">
            <summary>
            Gets or sets the Style that is applied to the container element generated for each item.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ContextMenu._rootVisual">
            <summary>
            Stores a reference to the current root visual.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ContextMenu._popup">
            <summary>
            Stores a reference to the current Popup.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ContextMenu._overlay">
            <summary>
            Stores a reference to the current overlay.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.#ctor">
            <summary>
            Initializes a new instance of the ContextMenu class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the left mouse button is pressed.
            </summary>
            <param name="e">The event data for the MouseLeftButtonDown event.</param>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the right mouse button is pressed.
            </summary>
            <param name="e">The event data for the MouseRightButtonDown event.</param>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Responds to the KeyDown event.
            </summary>
            <param name="e">The event data for the KeyDown event.</param>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.ElementMouseRightButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the MouseRightButtonDown event for the owning element.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.FocusNextItem(System.Boolean)">
            <summary>
            Sets focus to the next item in the ContextMenu.
            </summary>
            <param name="down">True to move the focus down; false to move it up.</param>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.ChildMenuItemClicked">
            <summary>
            Called when a child MenuItem is clicked.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.HandleContextMenuOrRootVisualSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Handles the SizeChanged event for the ContextMenu or RootVisual.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.HandleOverlayMouseButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the MouseButtonDown events for the overlay.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.UpdateContextMenuPlacement">
            <summary>
            Updates the location and size of the Popup and overlay.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.ClosePopup">
            <summary>
            Closes the Popup.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ContextMenuService">
            <summary>
            Provides the system implementation for displaying a ContextMenu.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.ContextMenuService.GetContextMenu(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the ContextMenu property of the specified object.
            </summary>
            <param name="obj">Object to query concerning the ContextMenu property.</param>
            <returns>Value of the ContextMenu property.</returns>
        </member>
        <member name="M:System.Windows.Controls.ContextMenuService.SetContextMenu(System.Windows.DependencyObject,System.Windows.Controls.ContextMenu)">
            <summary>
            Sets the value of the ContextMenu property of the specified object.
            </summary>
            <param name="obj">Object to set the property on.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="F:System.Windows.Controls.ContextMenuService.ContextMenuProperty">
            <summary>
            Identifies the ContextMenu attached property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ContextMenuService.OnContextMenuChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the ContextMenu DependencyProperty.
            </summary>
            <param name="o">DependencyObject that changed.</param>
            <param name="e">Event data for the DependencyPropertyChangedEvent.</param>
        </member>
        <member name="T:System.Windows.Controls.MenuItem">
            <summary>
            Represents a selectable item inside a Menu or ContextMenu.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.MenuItem._isFocused">
            <summary>
            Stores a value indicating whether this element has logical focus.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.MenuItem.CommandProperty">
            <summary>
            Identifies the Command dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnCommandChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the Command DependencyProperty.
            </summary>
            <param name="o">DependencyObject that changed.</param>
            <param name="e">Event data for the DependencyPropertyChangedEvent.</param>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnCommandChanged(System.Windows.Input.ICommand,System.Windows.Input.ICommand)">
            <summary>
            Handles changes to the Command property.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.MenuItem.CommandParameterProperty">
            <summary>
            Identifies the CommandParameter dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnCommandParameterChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the CommandParameter DependencyProperty.
            </summary>
            <param name="o">DependencyObject that changed.</param>
            <param name="e">Event data for the DependencyPropertyChangedEvent.</param>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnCommandParameterChanged(System.Object,System.Object)">
            <summary>
            Handles changes to the CommandParameter property.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.MenuItem.IconProperty">
            <summary>
            Identifies the Icon dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.#ctor">
            <summary>
            Initializes a new instance of the MenuItem class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnApplyTemplate">
            <summary>
            Called when the template's tree is generated.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Invoked whenever an unhandled GotFocus event reaches this element in its route.
            </summary>
            <param name="e">A RoutedEventArgs that contains event data.</param>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Raises the LostFocus routed event by using the event data that is provided.
            </summary>
            <param name="e">A RoutedEventArgs that contains event data.</param>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called whenever the mouse enters a MenuItem.
            </summary>
            <param name="e">The event data for the MouseEnter event.</param>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called whenever the mouse leaves a MenuItem.
            </summary>
            <param name="e">The event data for the MouseLeave event.</param>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the left mouse button is pressed.
            </summary>
            <param name="e">The event data for the MouseLeftButtonDown event.</param>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the right mouse button is pressed.
            </summary>
            <param name="e">The event data for the MouseRightButtonDown event.</param>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Responds to the KeyDown event.
            </summary>
            <param name="e">The event data for the KeyDown event.</param>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the Items property changes.
            </summary>
            <param name="e">The event data for the ItemsChanged event.</param>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnClick">
            <summary>
            Called when a MenuItem is clicked and raises a Click event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.HandleCanExecuteChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the CanExecuteChanged event of the Command property.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.UpdateIsEnabled">
            <summary>
            Updates the IsEnabled property.
            </summary>
            <remarks>
            WPF overrides the local value of IsEnabled according to ICommand, so Silverlight does, too.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.ChangeVisualState(System.Boolean)">
            <summary>
            Changes to the correct visual state(s) for the control.
            </summary>
            <param name="useTransitions">True to use transitions; otherwise false.</param>
        </member>
        <member name="E:System.Windows.Controls.MenuItem.Click">
            <summary>
            Occurs when a MenuItem is clicked.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.MenuItem.ParentMenuBase">
            <summary>
            Gets or sets a reference to the MenuBase parent.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.MenuItem.Command">
            <summary>
            Gets or sets the command associated with the menu item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.MenuItem.CommandParameter">
            <summary>
            Gets or sets the parameter to pass to the Command property of a MenuItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.MenuItem.Icon">
            <summary>
            Gets or sets the icon that appears in a MenuItem.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Separator">
            <summary>
            Control that is used to separate items in items controls.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.Separator.#ctor">
            <summary>
            Initializes a new instance of the Separator class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DomainUpDown">
            <summary>
            Represents a control that enables single value selection from a 
            domain of values through a Spinner and TextBox.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.UpDownBase`1">
            <summary>
            Base class for all controls that provide value manipulation with a 
            Spinner and a text box.
            </summary>
            <typeparam name="T">Type of Value property.</typeparam>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.UpDownBase">
            <summary>
            Base class for all controls that provide value manipulation with a 
            Spinner and a text box.
            </summary>
            <remarks>
            This non generic base class is used to specify default template,
            and simulate covariance among sub classes of UpDownBase&lt;T&gt;.
            </remarks>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase.ElementTextName">
            <summary>
            Name constant for Text template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase.ElementSpinnerName">
            <summary>
            Name constant for Spinner template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase.SpinnerStyleName">
            <summary>
            Name constant for SpinnerStyle property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase.SpinnerStyleProperty">
            <summary>
            Identifies the SpinnerStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.OnSpinnerStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed callback for SpinnerStyleProperty.
            </summary>
            <param name="d">UpDownBase whose SpinnerStyleProperty changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.#ctor">
            <summary>
            Initializes a new instance of the UpDownBase class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.OnSpinnerStyleChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            Called when SpinnerStyle property value has changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.GetValue">
            <summary>
            GetValue method for returning UpDownBase&lt;T&gt;.Value as object.
            </summary>
            <returns>Value as object type.</returns>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.SetValue(System.Object)">
            <summary>
            SetValue method for setting UpDownBase&lt;T&gt;.Value through object type parameter.
            </summary>
            <param name="value">New value in object type.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.UpdateVisualState(System.Boolean)">
            <summary>
            Update current visual state.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase.SpinnerStyle">
            <summary>
            Gets or sets the Style that is applied to the spinner.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase.Interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality. Making it internal for subclass access.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1._textBox">
            <summary>
            Private field for Text template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1._text">
            <summary>
            Private field to hold previous value of TextBox.Text.
            </summary>
            <remarks>
            Because TextBox.TextChanged seems to fire randomly, 
            so we compensatethat by handling LostFocus,
            and comparing TextBox.Text with cached previous value.
            </remarks>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1._spinner">
            <summary>
            Private field for Spinner template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1._ignoreValueChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValueProperty property changed handler.
            </summary>
            <param name="d">UpDownBase whose Value changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1.IsEditableProperty">
            <summary>
            Identifies the IsEditable dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnIsEditablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsEditableProperty property changed handler.
            </summary>
            <param name="d">UpDownBase that changed its IsEditable.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.#ctor">
            <summary>
            Initializes a new instance of the UpDownBase(of T) class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.GetValue">
            <summary>
            GetValue override to return Value property as object type.
            </summary>
            <returns>The Value property as object type.</returns>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.SetValue(System.Object)">
            <summary>
            SetValue override to set value to Value property.
            </summary>
            <param name="value">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnApplyTemplate">
            <summary>
            Builds the visual tree for the UpDownBase(of T) control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <remarks>
            Only support up and down arrow keys.
            </remarks>
            <param name="e">Key event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Provides handling for the MouseWheel event.
            </summary>
            <param name="e">Mouse wheel event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.DoDecrement">
            <summary>
            Performs an increment if conditions allow it.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.DoIncrement">
            <summary>
            Performs a decrement if conditions allow it.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnTextLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for Text template part's LostFocus event.
            We use this event to compare current TextBox.Text with cached previous 
            value to decide whether user has typed in a new value. 
            </summary>
            <param name="sender">The Text template part.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.ProcessUserInput">
            <summary>
            Called OnLostFocus and OnKeyDown(Key.Enter) to process user input.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnTextGotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for Text template part's GotFocus event.
            This event handler selects the whole text on GotFocus when nothing is selected.
            </summary>
            <param name="sender">The Text template part.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.SetTextBoxText">
            <summary>
            Display current value in Text template part.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnSpinnerSpin(System.Object,System.Windows.Controls.SpinEventArgs)">
            <summary>
            Event handler for Spinner template part's Spin event.
            </summary>
            <param name="sender">The Spinner template part.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.ApplyValue(System.String)">
            <summary>
            Processes user input when the TextBox.TextChanged event occurs.
            </summary>
            <param name="text">User input.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnParseError(System.Windows.Controls.UpDownParseErrorEventArgs)">
            <summary>
            Raises the ParserError event when there is an error in parsing user input.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnParsing(System.Windows.Controls.UpDownParsingEventArgs{`0})">
            <summary>
            Raises the <see cref="E:Parsing"/> event, to allow easily hooking
            into the parse logic.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Controls.UpDownParsingEventArgs`1"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnSpin(System.Windows.Controls.SpinEventArgs)">
            <summary>
            Occurs when the spinner spins.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{`0})">
            <summary>
            Raises the ValueChanging event when Value property is changing.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{`0})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnIsEditableChanged(System.Boolean,System.Boolean)">
            <summary>
            Called when IsEditable property value changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.SelectAllText">
            <summary>
            Selects all text.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.ParseValue(System.String)">
            <summary>
            Called by ApplyValue to parse user input.
            </summary>
            <param name="text">User input.</param>
            <returns>Value parsed from user input.</returns>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.FormatValue">
            <summary>
            Renders the value property into the textbox text.
            </summary>
            <returns>Formatted Value.</returns>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnIncrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnDecrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase`1.Text">
            <summary>
            Gets the Text template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase`1.Spinner">
            <summary>
            Gets the Spinner template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase`1.Value">
            <summary>
            Gets or sets the Value property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase`1.IsEditable">
            <summary>
            Gets or sets a value indicating whether the value can be manually 
            edited by the end-user.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.UpDownBase`1.ValueChanging">
            <summary>
            Occurs when Value property is changing.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.UpDownBase`1.ValueChanged">
            <summary>
            Occurs when Value property has changed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.UpDownBase`1.Parsing">
            <summary>
            Occurs when a value is being parsed and allows custom parsing.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.UpDownBase`1.ParseError">
            <summary>
            Occurs when there is an error in parsing user input and allows adding parsing logic.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.GroupDomain">
            <summary>
            Domain state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.StateInvalid">
            <summary>
            InvalidDomain of the Domain state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.StateValid">
            <summary>
            Valid of the Domain state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._items">
            <summary>
            Backing store for the Items collection, when ItemsSource is null.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._valueDuringInitialization">
            <summary>
            The value as set during initialization. Since no items have been added
            at that point, the value will be reset. However, during 
            initialization, the value will be cached in this field and used
            when items are actually added. 
            </summary>
            <remarks>After this index has been used, it will be set to new object().</remarks>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._isNotAllowedToEditByFocus">
            <summary>
            Indicates whether the control should not move to EditMode when
            it is gains Focus.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._weakEventListener">
            <summary>
            WeakEventListener used to handle INotifyCollectionChanged events.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._isEditing">
            <summary>
            BackingField for IsEditing, indicating whether the control is in EditMode.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._isInvalidInput">
            <summary>
            Backing field for InvalidInput, indicating whether the last parsed input was invalid.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.CurrentIndexProperty">
            <summary>
            Identifies the CurrentIndex dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnCurrentIndexPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CurrentIndexProperty property changed handler.
            </summary>
            <param name="d">DomainUpDown instance that changed its CurrentIndex.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.IsValidCurrentIndex(System.Int32)">
            <summary>
            SelectedIndexProperty validation handler.
            </summary>
            <param name="value">New value of SelectedIndexProperty.</param>
            <returns>
            Returns true if value is valid for SelectedIndexProperty, false otherwise.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.CoerceSelectedIndex(System.Int32)">
            <summary>
            CurrentIndexProperty coercion handler.
            </summary>
            <param name="index">The index.</param>
            <returns>
            Coerced effective value of CurrentIndexProperty from input parameter value.
            </returns>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._initialCurrentIndex">
            <summary>
            Cached previous value of SelectedIndexProperty.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._currentIndexDuringInitialization">
            <summary>
            The index as set during initialization. Since no items have been added
            at that point, an Exception should be thrown. However, during 
            initialization, the index will be cached in this field and used
            when items are actually added. 
            </summary>
            <remarks>After this index has been used, it will be set to -1.</remarks>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._currentIndexNestLevel">
            <summary>
            Nest level for selected index.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.IsCyclicProperty">
            <summary>
            Identifies the IsCyclic dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnIsCyclicPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsCyclicProperty property changed handler.
            </summary>
            <param name="d">DomainUpDown instance that changed its IsCyclic value.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._valueBindingEvaluator">
            <summary>
            Gets or sets the BindingEvaluator, a framework element that can
            provide updated string values from a single binding.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.InvalidInputActionProperty">
            <summary>
            Identifies the InvalidInputAction dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnInvalidInputActionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            InvalidInputAction property changed handler.
            </summary>
            <param name="d">DomainUpDown instance that changed the InvalidInputAction.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.FallbackItemProperty">
            <summary>
            Identifies the FallbackItem dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnItemsSourcePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemsSourceProperty property changed handler.
            </summary>
            <param name="d">DomainUpDown that changed its ItemsSource.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.ItemTemplateProperty">
            <summary>
            Identifies the ItemTemplate dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.DomainUpDown"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnApplyTemplate">
            <summary>
            Builds the visual tree for the DomainUpDown control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnCreateAutomationPeer">
            <summary>
            Returns a DomainUpDownAutomationPeer for use by the 
            Silverlight automation infrastructure.
            </summary>
            <returns>
            The class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> subclass to return.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.GetActualItems">
            <summary>
            Gets the correct items collection that we are using, abstracting away ItemsSource and Items logic.
            </summary>
            <returns>Returns either Items or ItemsSource.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnItemsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the items collection is changed. This can either be Items or ItemsSource.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
            <remarks>If ItemsSource does not implement INotifyCollectionChanged, this method will not be called on
            changes in the ItemsSource.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Called when ItemsSource has changed.
            Handles setting the selected item.
            </summary>
            <param name="oldItemsSource">The old items source.</param>
            <param name="itemsSource">The items source.</param>
            <remarks>When switching ItemsSource, the selectedIndex will be used (if possible) 
            to select an item in the new collection.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Object})">
            <summary>
            Raises the ValueChanging event when Value property is changing.
            </summary>
            <param name="e">Event args.</param>
            <remarks>Cancels the event when the value is not part of the domain.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
            <remarks>Will set CurrentIndex.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnCurrentIndexChanged(System.Int32,System.Int32)">
            <summary>
            Processes changes to the CurrentIndex property.
            </summary>
            <param name="oldValue">The old value of CurrentIndex.</param>
            <param name="newValue">The new value of CurrentIndex.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.ApplyValue(System.String)">
            <summary>
            Processes user input when the TextBox.TextChanged event occurs.
            </summary>
            <param name="text">User input.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.ParseValue(System.String)">
            <summary>
            Called by ApplyValue to parse user input as a value in the domain.
            </summary>
            <param name="text">User input.</param>
            <returns>Value parsed from user input.</returns>
            <remarks>An empty string will return the currently selected value.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.FormatValue">
            <summary>
            Renders the value property into the textbox text.
            </summary>
            <returns>Formatted Value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnIncrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase. 
            </summary>
            <remarks>If the IsCyclic property is set to true the DomainUpDown 
            control will not increment when the selected item is the last item.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnDecrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Decrease. 
            </summary>
            <remarks>If the IsCyclic property is set to true the DomainUpDown 
            control will not decrement when the selected item is the first item. </remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.SetValidSpinDirection">
            <summary>
            Sets the valid spin direction based on current index, minimum and maximum.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <param name="e">Key event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the GotFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the MouseLeftButtonDown event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the MouseLeftButtonUp event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.TryEnterEditMode">
            <summary>
            Tries the enter edit mode.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.SelectAllText">
            <summary>
            Selects all text.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.UpdateVisualState(System.Boolean)">
            <summary>
            Update current visual state.
            </summary>
            <param name="useTransitions">True to use transitions when updating the visual state, false to
            snap directly to the new visual state.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.GetIndexOf(System.Collections.IEnumerable,System.Object)">
            <summary>
            Gets the index of a sequence.
            </summary>
            <param name="sequence">The sequence that contains the item of interest.</param>
            <param name="item">The item that contained within the sequence.</param>
            <returns>The index of the item in the sequence. -1 if the item was not found.</returns>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.Items">
            <summary>
            Gets a collection of items which represent the domain 
            in the DomainUpDown control.
            </summary>
            <remarks>When ItemsSource is set, will return a copy of the items in ItemsSource.
            When ItemsSource property is not set (set to null) this collection 
            will return an empty writeable colection.</remarks>
            <value>The items.</value>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.IsEditing">
            <summary>
            Gets a value indicating whether the control is in EditMode.
            </summary>
            <value><c>True</c> if currently in edit mode; otherwise, <c>False</c>.</value>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.IsInvalidInput">
            <summary>
            Gets or sets a value indicating whether the last parsed input was invalid.
            </summary>
            <value><c>True</c> if input is currently Invalid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.CurrentIndex">
            <summary>
            Gets or sets the index of the current selected item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.IsCyclic">
            <summary>
            Gets or sets a value indicating whether the DomainUpDown control 
            will cycle through values when trying to spin the first and last item. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.ValueMemberBinding">
            <summary>
            Gets or sets the Binding object used for object to string 
            conversions.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.ValueMemberPath">
            <summary>
            Gets or sets the Binding Path to use for identifying the value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.InvalidInputAction">
            <summary>
            Gets or sets a value determining the DomainUpDown behavior when a 
            user sets a value not included in the domain.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.FallbackItem">
            <summary>
            Gets or sets the item that is used when a user attempts to 
            set a value not included in the domain.
            </summary>
            <remarks>FallbackItem will only be used if it is contained within 
            the Items collection.</remarks>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.ItemsSource">
            <summary>
            Gets or sets a collection of items which represent the 
            domain in the DomainUpDown control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.ItemTemplate">
            <summary>
            Gets or sets the DataTemplate used to display an item from the 
            Domain when the item is selected.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.DomainUpDownAutomationPeer">
            <summary>
            Exposes DomainUpDown types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1">
            <summary>
            Exposes UpDownBase types to UI Automation.
            </summary>
            <typeparam name="T">Type of the items.</typeparam>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.#ctor(System.Windows.Controls.UpDownBase{`0})">
            <summary>
            Initializes a new instance of the UpDownBaseAutomationPeer class.
            </summary>
            <param name="owner">
            The UpDownBase that is associated with this UpDownBaseAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the UpDownBase that is associated
            with this UpDownBaseAutomationPeer.  This method is called by
            GetAutomationControlType.
            </summary>
            <returns>Group AutomationControlType.</returns>
            <remarks>Return AutomationControlType.Spinner per MSDN article.</remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.GetClassNameCore">
            <summary>
            Gets the name of the UpDownBase that is associated with this
            UpDownBaseAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name UpDownBase.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the UpDownBase that is associated
            with this UpDownBaseAutomationPeer.
            </summary>
            <param name="patternInterface">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.SetValue(System.String)">
            <summary>
            Sets the value of a control from a string.
            </summary>
            <param name="value">The value to set.</param>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.OwnerUpDown">
            <summary>
            Gets the UpDownBase that owns this UpDownBaseAutomationPeer.
            </summary>
            <value>The domain up down.</value>
        </member>
        <member name="P:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the value of a control is read-only.
            </summary>
            <value></value>
            <returns>true if the value is read-only; false if it can be modified.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.Value">
            <summary>
            Gets the value of the control.
            </summary>
            <value></value>
            <returns>
            The value of the control as a string.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.DomainUpDownAutomationPeer.#ctor(System.Windows.Controls.DomainUpDown)">
            <summary>
            Initializes a new instance of the DomainUpDownAutomationPeer class.
            </summary>
            <param name="owner">
            The DomainUpDown that is associated with this DomainUpDownAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.DomainUpDownAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the DomainUpDown that is associated with this
            DomainUpDownAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name DomainUpDown.</returns>
        </member>
        <member name="T:System.Windows.Controls.InvalidInputAction">
            <summary>
            Determines the behavior of a DomainUpDown control when a user sets a 
            value not included in the domain.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InvalidInputAction.UseFallbackItem">
            <summary>
            Once a user sets a value not included in the domain, the DomainUpDown 
            control will use the FallbackItem property as the selected item. If 
            FallbackItem is not specified the first item in the DomainUpDown Items 
            collection will be used.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InvalidInputAction.TextBoxCannotLoseFocus">
            <summary>
            Once a user sets a value not included in the domain, the 
            DomainUpDown control cannot lose focus.
            </summary>
            <remarks>There are situations that the control can not regain focus.</remarks>
        </member>
        <member name="T:System.Windows.Controls.ObservableObjectCollection">
            <summary>
            Implements a collection of objects.
            </summary>
            <remarks>
            ObservableObjectCollection is intended to simplify the task of populating an
            ItemsSource property in XAML and allows for readonly collections.
            </remarks>
            <example>
            <code language="XAML">
            <![CDATA[
            <ItemsControl.ItemsSource>
                <controls:ObservableObjectCollection>
                    <TextBlock Text="Object 1" />
                    <TextBlock Text="Object 2" />
                </controls:ObservableObjectCollection>
            </ItemsControl.ItemsSource>
            ]]>
            </code>
            </example>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.ObservableObjectCollection"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.ObservableObjectCollection"/> class.
            </summary>
            <param name="collection">The collection whose items will be copied.</param>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.InsertItem(System.Int32,System.Object)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.SetItem(System.Int32,System.Object)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index.</param>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.ClearItems">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ObservableObjectCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read only.
            </summary>
            <value><c>True</c> if read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Controls.ObservableObjectCollection.System#Collections#Generic#ICollection{System#Object}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.NumericUpDown">
            <summary>
            Represents a control that enables single value selection from a numeric
            range of values through a Spinner and TextBox.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown.MinimumProperty">
            <summary>
            Identifies the Minimum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnMinimumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="d">NumericUpDown that changed its Minimum.</param>
            <param name="e">DependencyPropertyChangedEventArgs for Minimum property.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnMinimumChanged(System.Double,System.Double)">
            <summary>
            Called when the Minimum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Minimum property.</param>
            <param name="newValue">New value of the Minimum property.</param>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown.MaximumProperty">
            <summary>
            Identifies the Maximum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnMaximumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="d">NumericUpDown that changed its Maximum.</param>
            <param name="e">DependencyPropertyChangedEventArgs for Maximum property.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnMaximumChanged(System.Double,System.Double)">
            <summary>
            Called when the Maximum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Maximum property.</param>
            <param name="newValue">New value of the Maximum property.</param>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown.IncrementProperty">
            <summary>
            Identifies the Increment dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnIncrementPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IncrementProperty property changed handler.
            </summary>
            <param name="d">NumericUpDown that changed its Increment property.</param>
            <param name="e">DependencyPropertyChangedEventArgs for Increment property.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnIncrementChanged(System.Double,System.Double)">
            <summary>
            Called when the Increment property value has changed.
            </summary>
            <param name="oldValue">Old value of the Increment property.</param>
            <param name="newValue">New value of the Increment property.</param>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown.DecimalPlacesProperty">
            <summary>
            Identifies the DecimalPlaces dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnDecimalPlacesPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DecimalPlacesProperty property changed handler.
            </summary>
            <param name="d">NumericUpDown that changed its DecimalPlaces.</param>
            <param name="e">DependencyPropertyChangedEventArgs for DecimalPlaces property.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnDecimalPlacesChanged(System.Int32,System.Int32)">
            <summary>
            Called when the DecimalPlaces property value has changed.
            </summary>
            <param name="oldValue">Old value of the DecimalPlaces property.</param>
            <param name="newValue">New value of the DecimalPlaces property.</param>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown.formatString">
            <summary>
            Format string used to display Value property.
            </summary>
            <seealso cref="P:System.Windows.Controls.NumericUpDown.DecimalPlaces"/>
            <seealso cref="M:System.Windows.Controls.NumericUpDown.FormatValue"/>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.#ctor">
            <summary>
            Initializes a new instance of the NumericUpDown class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.SetValidSpinDirection">
            <summary>
            Sets the valid spin direction based on current value, minimum and maximum.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnApplyTemplate">
            <summary>
            Builds the visual tree for the NumericUpDown control when a new
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnCreateAutomationPeer">
            <summary>
            Returns a NumericUpDownAutomationPeer for use by the Silverlight
            automation infrastructure.
            </summary>
            <returns>A NumericUpDownAutomationPeer object for the NumericUpDown.</returns>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Double})">
            <summary>
            Override UpDownBase&lt;T&gt;.OnValueChanging to do validation and coercion.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Override UpDownBase&lt;T&gt;.OnValueChanged to raise value changed automation event and 
            determine if a maximum or minimum has been reached.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.ParseValue(System.String)">
            <summary>
            Called by ApplyValue to parse user input as a decimal number.
            </summary>
            <param name="text">User input.</param>
            <returns>Value parsed from user input.</returns>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.FormatValue">
            <summary>
            Provides decimal specific value formatting for the value property.
            </summary>
            <returns>Formatted Value.</returns>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnIncrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnDecrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Decrease.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._levelsFromRootCall">
            <summary>
            Levels from root call.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._initialInc">
            <summary>
            Initial Increment value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._initialMin">
            <summary>
            Initial Minimum value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._initialMax">
            <summary>
            Initial Maximum value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._initialVal">
            <summary>
            Initial Minimum value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._requestedInc">
            <summary>
            Requested Increment value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._requestedMin">
            <summary>
            Requested Minimum value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._requestedMax">
            <summary>
            Requested Maximum value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._requestedVal">
            <summary>
            Requested Value value.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.CoerceMaximum">
            <summary>
            Ensure the Maximum is greater than or equal to the Minimum.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.CoerceValue">
            <summary>
            Ensure the value falls between the Minimum and Maximum values.
            This function assumes that (Maximum >= Minimum).
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.IsValidDoubleValue(System.Object,System.Double@)">
            <summary>
            Check if an object value is a valid double value.
            </summary>
            <param name="value">The value to be checked.</param>
            <param name="number">The double value to be returned.</param>
            <returns>true if a valid double; false otherwise.</returns>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.EnsureValidDoubleValue(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Ensure the new value of a dependency property change is a valid double value, 
            or revert the change and throw an exception.
            </summary>
            <remarks>
            EnsureValidDoubleValue(DependencyObject d, DependencyPropertyChangedEventArgs e) is simply a wrapper for 
            EnsureValidDoubleValue(DependencyObject d, DependencyProperty property, object oldValue, object newValue).
            </remarks>
            <param name="d">The DependencyObject whose DependencyProperty is changed.</param>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.EnsureValidDoubleValue(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object,System.Object)">
            <summary>
            Ensure the new value of a dependency property change is a valid double value, 
            or revert the change and throw an exception.
            </summary>
            <param name="d">The DependencyObject whose DependencyProperty is changed.</param>
            <param name="property">The DependencyProperty that changed.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.EnsureValidIncrementValue(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Ensure the new value of Increment dependency property change is valid, 
            or revert the change and throw an exception.
            </summary>
            <param name="d">The DependencyObject whose DependencyProperty is changed.</param>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.EnsureValidDecimalPlacesValue(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Ensure the new value of DecimalPlaces dependency property change is valid, 
            or revert the change and throw an exception.
            </summary>
            <param name="d">The DependencyObject whose DecimalPlaces DependencyProperty is changed.</param>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.UpdateVisualState(System.Boolean)">
            <summary>
            Update current visual state.
            </summary>
            <param name="useTransitions">True to use transitions when updating the visual state, false to snap directly to the new visual state.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">A value indicating whether to automatically generate transitions to the new state, or instantly transition to the new state.</param>
        </member>
        <member name="P:System.Windows.Controls.NumericUpDown.Minimum">
            <summary>
            Gets or sets the Minimum possible Value.
            </summary>
            <remarks>
            The default value is zero.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.NumericUpDown.Maximum">
            <summary>
            Gets or sets the Maximum possible Value.
            </summary>
            <remarks>
            The default values is one.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.NumericUpDown.Increment">
            <summary>
            Gets or sets a value added or subtracted from the value property.
             </summary>
            <remarks>
            The default values is one.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.NumericUpDown.DecimalPlaces">
            <summary>
            Gets or sets the number of decimal places that are displayed in the 
            NumericUpDown. 
            </summary>
            <remarks>
            The default value is zero.
            
            DecimalPlaces decides output format of Value property.
            It is implemented via formatString field and FormatValue override.
            </remarks>
        </member>
        <member name="T:System.Windows.Automation.Peers.NumericUpDownAutomationPeer">
            <summary>
            Exposes NumericUpDown types to UI Automation.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.#ctor(System.Windows.Controls.NumericUpDown)">
            <summary>
            Initializes a new instance of the NumericUpDownAutomationPeer class.
            </summary>
            <param name="owner">
            The NumericUpDown that is associated with this NumericUpDownAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the NumericUpDown that is associated with this
            NumericUpDownAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name NumericUpDown.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the NumericUpDown that is associated
            with this NumericUpDownAutomationPeer.
            </summary>
            <param name="patternInterface">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SetValue(System.Double)">
            <summary>
            Sets the value of the NumericUpDown.
            </summary>
            <param name="value">The value to set.</param>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#IsReadOnly">
            <summary>
            Gets a value indicating whether the value of the NumericUpDown is read-only.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#LargeChange">
            <summary>
            Gets the value to be added or subtracted from the Value property of the NumericUpDown.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Maximum">
            <summary>
            Gets the maximum value supported by the NumericUpDown.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Minimum">
            <summary>
            Gets minimum value supported by the NumericUpDown.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SmallChange">
            <summary>
            Gets the value to be added or subtracted from the Value property of the NumericUpDown.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Value">
            <summary>
            Gets the value of the NumericUpDown.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.EnumerableExtensions">
            <summary>
            Extension methods for Enumerable.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EnumerableExtensions.Range(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a sequence from an integer, to an integer, skipping 
            a defined amount of integers.
            </summary>
            <param name="from">The value of the first integer in the sequence.</param>
            <param name="to">The inclusive end of the sequence.</param>
            <param name="by">The amount of integers to skip.</param>
            <returns>A sequence of integers.</returns>
        </member>
        <member name="M:System.Windows.Controls.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Applies an action to each element in an IEnumerable.
            </summary>
            <typeparam name="T">The Type of the elements.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="action">The action applied to all the elements.</param>
            <remarks>See a discussion about the merits on this function here:
            http://blogs.msdn.com/ericlippert/archive/2009/05/18/foreach-vs-foreach.aspx.</remarks>
        </member>
        <member name="T:System.Windows.Controls.Primitives.Clipper">
            <summary>
            Clips a ratio of its content.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Primitives.Clipper.RatioVisibleProperty">
            <summary>
            Identifies the RatioVisible dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.Clipper.OnRatioVisibleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            RatioVisibleProperty property changed handler.
            </summary>
            <param name="d">PartialView that changed its RatioVisible.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.Clipper.OnRatioVisibleChanged(System.Double,System.Double)">
            <summary>
            RatioVisibleProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.Primitives.Clipper.#ctor">
            <summary>
            Initializes a new instance of the Clipper class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.Clipper.ClipContent">
            <summary>
            Updates the clip geometry.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.Clipper.RatioVisible">
            <summary>
            Gets or sets the percentage of the item visible.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.EnumerableFunctions">
            <summary>
            This class contains general purpose functions to manipulate the generic
            IEnumerable type.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EnumerableFunctions.Scan``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1,``0,``1},``1)">
            <summary>
            Applies a function to an accumulated value and an item in the 
            sequence and yields the result as the accumulated value.
            </summary>
            <typeparam name="T">The type of the input sequence.</typeparam>
            <typeparam name="R">The type of the initial value.</typeparam>
            <param name="that">The sequence to scan.</param>
            <param name="func">The function applied to the accumulator and the
            current item.</param>
            <param name="initialValue">The initial value in the output sequence.
            </param>
            <returns>A sequence of computed values.</returns>
        </member>
        <member name="M:System.Windows.Controls.EnumerableFunctions.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Accepts two sequences and applies a function to the corresponding 
            values in the two sequences.
            </summary>
            <typeparam name="T0">The type of the first sequence.</typeparam>
            <typeparam name="T1">The type of the second sequence.</typeparam>
            <typeparam name="R">The return type of the function.</typeparam>
            <param name="enumerable0">The first sequence.</param>
            <param name="enumerable1">The second sequence.</param>
            <param name="func">The function to apply to the corresponding values
            from the two sequences.</param>
            <returns>A sequence of transformed values from both sequences.</returns>
        </member>
        <member name="M:System.Windows.Controls.EnumerableFunctions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the index of an item in a sequence.
            </summary>
            <typeparam name="T">The type of the sequence.</typeparam>
            <param name="that">The sequence.</param>
            <param name="item">The item in the sequence.</param>
            <returns>The index of an item in a sequence.</returns>
        </member>
        <member name="M:System.Windows.Controls.EnumerableFunctions.GetWeightedValues(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Returns a stream of weighted values based on a percentage.
            </summary>
            <param name="values">A sequence of values.</param>
            <param name="percent">The percentage of values.</param>
            <returns>A sequence of percentages.</returns>
        </member>
        <member name="T:System.Windows.Controls.Primitives.LinearClipper">
            <summary>
            Clips the content of the control in a given direction.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Primitives.LinearClipper.ExpandDirectionProperty">
            <summary>
            Identifies the ExpandDirection dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.LinearClipper.OnExpandDirectionChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ExpandDirectionProperty property changed handler.
            </summary>
            <param name="d">ExpandDirectionView that changed its ExpandDirection.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.LinearClipper.OnExpandDirectionChanged(System.Windows.Controls.ExpandDirection,System.Windows.Controls.ExpandDirection)">
            <summary>
            ExpandDirectionProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.Primitives.LinearClipper.ClipContent">
            <summary>
            Updates the clip geometry.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.LinearClipper.ExpandDirection">
            <summary>
            Gets or sets the clipped edge.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.NullableConverter`1">
            <summary>
            Converts a string or base value to a <see cref="T:System.Nullable"/> value.
            </summary>
            <typeparam name="T">The type should be value type.</typeparam>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.NullableConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the 
            specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>
            Returns true if this converter can perform the conversion; 
            otherwise, false.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.NullableConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the 
            specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="destinationType">The type you want to convert to.
            </param>
            <returns>
            Returns true if this converter can perform the conversion; 
            otherwise, false.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.NullableConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="culture">The 
            <see cref="T:System.Globalization.CultureInfo"/> to use as the 
            current culture.</param>
            <param name="value">The value to convert to the type of this 
            converter.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.NullableConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts from the specified value to the a specified type from the
            type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="culture">The 
            <see cref="T:System.Globalization.CultureInfo"/> to use as the 
            current culture.</param>
            <param name="value">The value to convert to the type of this 
            converter.</param>
            <param name="destinationType">The type of convert the value to
            .</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="T:System.Windows.Controls.Rating">
            <summary>
            A control that has a rating.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Rating.DisplayValueProperty">
            <summary>
            Identifies the DisplayValue dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnDisplayValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DisplayValueProperty property changed handler.
            </summary>
            <param name="dependencyObject">Rating that changed its DisplayValue.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnDisplayValueChanged">
            <summary>
            DisplayValueProperty property changed handler.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Rating.ItemCountProperty">
            <summary>
            Identifies the ItemCount dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnItemCountChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemCountProperty property changed handler.
            </summary>
            <param name="d">Rating that changed its ItemCount.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnItemCountChanged(System.Int32)">
            <summary>
            This method is invoked when the items count property is changed.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.Rating.IsReadOnlyProperty">
            <summary>
            Identifies the IsReadOnly dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnIsReadOnlyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsReadOnlyProperty property changed handler.
            </summary>
            <param name="d">Rating that changed its IsReadOnly.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnIsReadOnlyChanged(System.Boolean,System.Boolean)">
            <summary>
            IsReadOnlyProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.Rating.ItemContainerStyleProperty">
            <summary>
            Identifies the ItemContainerStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnItemContainerStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemContainerStyleProperty property changed handler.
            </summary>
            <param name="d">Rating that changed its ItemContainerStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnItemContainerStyleChanged(System.Windows.Style)">
            <summary>
            ItemContainerStyleProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.Rating.SelectionModeProperty">
            <summary>
            Identifies the SelectionMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnSelectionModeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectionModeProperty property changed handler.
            </summary>
            <param name="d">Rating that changed its SelectionMode.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnSelectionModeChanged(System.Windows.Controls.RatingSelectionMode,System.Windows.Controls.RatingSelectionMode)">
            <summary>
            SelectionModeProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.Rating.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValueProperty property changed handler.
            </summary>
            <param name="d">Rating that changed its Value.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnValueChanged(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            ValueProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.Rating.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Updates the control when the items change.
            </summary>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.#ctor">
            <summary>
            Initializes a new instance of the Rating control.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnApplyTemplate">
            <summary>
            Applies control template to the items control.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is invoked when the mouse enters the rating item.
            </summary>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is invoked when the mouse leaves the rating item.
            </summary>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the Rating's MouseLeftButtonDown event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the Rating's MouseLeftButtonUp event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.UpdateValues">
            <summary>
            Updates the values of the rating items.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.UpdateDisplayValues">
            <summary>
            Updates the value and actual value of the rating items.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.UpdateHoverStates">
            <summary>
            Updates the hover states of the rating items.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.GetContainerForItemOverride">
            <summary>
            This method returns a container for the item.
            </summary>
            <returns>A container for the item.</returns>
        </member>
        <member name="M:System.Windows.Controls.Rating.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Gets a value indicating whether the item is its own container.
            </summary>
            <param name="item">The item which may be a container.</param>
            <returns>A value indicating whether the item is its own container.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.Rating.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            This method prepares a container to host an item.
            </summary>
            <param name="element">The container.</param>
            <param name="item">The item hosted in the container.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            This method clears a container used to host an item.
            </summary>
            <param name="element">The container that hosts the item.</param>
            <param name="item">The item hosted in the container.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.RatingItemMouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is invoked when a rating item's mouse enter event is
            invoked.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.RatingItemMouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is invoked when a rating item's mouse leave event is
            invoked.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.GetRatingItems">
            <summary>
            Returns a sequence of rating items.
            </summary>
            <returns>A sequence of rating items.</returns>
        </member>
        <member name="M:System.Windows.Controls.Rating.SelectRatingItem(System.Windows.Controls.RatingItem)">
            <summary>
            Selects a rating item.
            </summary>
            <param name="selectedRatingItem">The selected rating item.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.RatingItemClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is raised when a rating item value is selected.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.GetSelectedRatingItem">
            <summary>
            Returns the selected rating item.
            </summary>
            <returns>The selected rating item.</returns>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnRatingItemValueSelected(System.Windows.Controls.RatingItem,System.Double)">
            <summary>
            This method is invoked when the rating item value is changed.
            </summary>
            <param name="ratingItem">The rating item that has changed.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnCreateAutomationPeer">
            <summary>
            Returns a RatingItemAutomationPeer for use by the Silverlight
            automation infrastructure.
            </summary>
            <returns>A RatingItemAutomationPeer object for the RatingItem.</returns>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.KeyDown" /> event when a key
            is pressed while the control has focus.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains
            the event data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e " />is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.Rating.GetRatingItemAtOffsetFrom(System.Windows.Controls.RatingItem,System.Int32)">
            <summary>
            Gets a rating item at a certain index offset from another 
            rating item.
            </summary>
            <param name="ratingItem">The rating item.</param>
            <param name="offset">The rating item at an offset from the 
            index of the rating item.</param>
            <returns>The rating item at the offset.</returns>
        </member>
        <member name="M:System.Windows.Controls.Rating.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Updates the visual state.
            </summary>
            <param name="useTransitions">A value indicating whether to use transitions.</param>
        </member>
        <member name="P:System.Windows.Controls.Rating.DisplayValue">
            <summary>
            Gets or sets the actual value of the Rating control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.HoveredRatingItem">
            <summary>
            Gets or sets the rating item hovered over.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.Interaction">
            <summary>
            Gets the helper that provides all of the standard
            interaction functionality.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.ItemsControlHelper">
            <summary>
            Gets or sets the items control helper class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.ItemCount">
            <summary>
            Gets or sets the number of rating items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether the Rating is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.ItemContainerStyle">
            <summary>
            Gets or sets the item container style.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.SelectionMode">
            <summary>
            Gets or sets the selection mode.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.Value">
            <summary>
            Gets or sets the rating value.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Rating.ValueChanged">
            <summary>
            This event is raised when the value of the rating is changed.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.RatingAutomationPeer">
            <summary>
            Exposes Rating types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.#ctor(System.Windows.Controls.Rating)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.RatingAutomationPeer"/> class.
            </summary>
            <param name="owner">The Rating that is associated with this
            RatingAutomationPeer.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.GetNameCore">
            <summary>
            Returns a name if no name is set.
            </summary>
            <returns>A name if no name is set.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.GetLocalizedControlTypeCore">
            <summary>
            Returns the localized control type.
            </summary>
            <returns>The localized control type.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the Rating that is associated
            with this RatingAutomationPeer.  This method is called by
            GetAutomationControlType.
            </summary>
            <returns>List AutomationControlType.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the Rating that is associated
            with this RatingAutomationPeer.
            </summary>
            <param name="patternInterface">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.GetChildrenCore">
            <summary>
            Gets the collection of child elements of 
            the <see cref="T:System.Windows.Controls.ItemsControl"/> that is 
            associated with this <see cref="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer"/>.
            </summary>
            <returns>
            A collection of RatingItemAutomationPeer elements, or null if the
            Rating that is associated with this RatingAutomationPeer is
            empty.
            </returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.GetSelection">
            <summary>
            Retrieves a UI Automation provider for each child element that is 
            selected.
            </summary>
            <returns>An array of UI Automation providers.</returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.SetValue(System.String)">
            <summary>
            Sets a rating value.
            </summary>
            <param name="value">The value of the rating.</param>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingAutomationPeer.OwnerRating">
            <summary>
            Gets the Rating that owns this RatingAutomationPeer.
            </summary>
            <value>The Rating.</value>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingAutomationPeer.CanSelectMultiple">
            <summary>
            Gets a value indicating whether the UI Automation provider 
            allows more than one child element to be selected concurrently.
            </summary>
            <returns>true if multiple selection is allowed; otherwise, false.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingAutomationPeer.IsSelectionRequired">
            <summary>
            Gets a value indicating whether the UI Automation provider 
            requires at least one child element to be selected.
            </summary>
            <returns>true if selection is required; otherwise, false.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingAutomationPeer.IsReadOnly">
            <summary>
            Gets a value indicating whether the Rating is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingAutomationPeer.Value">
            <summary>
            Gets the rating value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.RatingItem">
            <summary>
            An item used in a rating control.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.RatingItem.StateFilled">
            <summary>
            The state in which the item is filled.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem.StateEmpty">
            <summary>
            The state in which the item is empty.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem.GroupFill">
            <summary>
            The group that contains fill states.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem.StatePartial">
            <summary>
            The state in which the item is partially filled.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem._interactionHelper">
            <summary>
            The interaction helper used to get the common states working.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem._settingDisplayValue">
            <summary>
            A value indicating whether the actual value is being set.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem.DisplayValueProperty">
            <summary>
            Identifies the DisplayValue dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnDisplayValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DisplayValueProperty property changed handler.
            </summary>
            <param name="d">RatingItem that changed its DisplayValue.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnDisplayValueChanged(System.Double,System.Double)">
            <summary>
            DisplayValueProperty property changed handler.
            </summary> 
            <param name="oldValue">The old value.</param> 
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.RatingItem._settingIsReadOnly">
            <summary>
            A value indicating whether the read only value is being set.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem.IsReadOnlyProperty">
            <summary>
            Identifies the IsReadOnly dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnIsReadOnlyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsReadOnlyProperty property changed handler.
            </summary>
            <param name="d">RatingItem that changed its IsReadOnly.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnIsReadOnlyChanged(System.Boolean,System.Boolean)">
            <summary>
            IsReadOnlyProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.RatingItem.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.SelectValue">
            <summary>
            Selects a value and raises the value selected event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.#ctor">
            <summary>
            Initializes a new instance of the RatingItem class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the RatingItem's MouseLeftButtonDown event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the RatingItem's MouseLeftButtonUp event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is invoked when the mouse enters the rating item.
            </summary>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is invoked when the mouse leaves the rating item.
            </summary>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnClick">
            <summary>
            Sets the value to 1.0 when clicked.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Updates the visual state.
            </summary>
            <param name="useTransitions">A value indicating whether to use 
            transitions.</param>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnCreateAutomationPeer">
            <summary>
            Returns a AccordionItemAutomationPeer for use by the Silverlight
            automation infrastructure.
            </summary>
            <returns>A AccordionItemAutomationPeer object for the AccordionItem.</returns>
        </member>
        <member name="P:System.Windows.Controls.RatingItem.DisplayValue">
            <summary>
            Gets the actual value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RatingItem.IsReadOnly">
            <summary>
            Gets a value indicating whether the control is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RatingItem.ParentRating">
            <summary>
            Gets or sets the parent rating of this rating item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RatingItem.Value">
            <summary>
            Gets or sets the value property.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.RatingItemAutomationPeer">
            <summary>
            Exposes RatingItem types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.#ctor(System.Windows.Controls.RatingItem)">
            <summary>
            Initializes a new instance of the RatingAutomationPeer class.
            </summary>
            <param name="owner">
            The Rating that is associated with this
            RatingAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.GetLocalizedControlTypeCore">
            <summary>
            Returns the localized control type.
            </summary>
            <returns>The localized control type.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the RatingItem that is associated
            with this RatingItemAutomationPeer.  This method is called by
            GetAutomationControlType.
            </summary>
            <returns>Custom AutomationControlType.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the RatingItem that is associated with this
            RatingItemAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name RatingItem.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the RatingItem that is associated
            with this RatingItemAutomationPeer.
            </summary>
            <param name="patternInterface">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.GetNameCore">
            <summary>
            Returns the name of the rating item.  Uses the index of the rating
            item in the list.
            </summary>
            <returns>The name of the rating item.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
            <summary>
            Adds the RatingItem to the collection of selected items.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
            <summary>
            Removes the current Rating from the collection of selected
            items.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
            <summary>
            Clears selection from currently selected items and then proceeds to
            select the current Rating.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingItemAutomationPeer.OwnerRatingItem">
            <summary>
            Gets the RatingItem that owns this RatingItemAutomationPeer.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
            <summary>
            Gets a value indicating whether the Rating is selected.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
            <summary>
            Gets the UI Automation provider that implements ISelectionProvider
            and acts as the container for the calling object.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.RatingSelectionMode">
            <summary>
            This type is used to determine the state of the item selected and the
            previous items.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.RatingSelectionMode.Continuous">
            <summary>
            All items before the selected ones are selected.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingSelectionMode.Individual">
            <summary>
            Only the item selected is visually distinguished.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ButtonSpinner">
            <summary>
            Represents a spinner control that includes two Buttons.
            </summary>
            <remarks>
            ButtonSpinner inherits from Spinner. 
            It adds two button template parts and a content property.
            </remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.Spinner">
            <summary>
            Base class for controls that represents controls that can spin.
            </summary>
            <remarks>
            Spinner abstract class defines and implements common and focused visual state groups.
            Spinner abstract class defines and implements Spin event and OnSpin method.
            </remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Spinner.ValidSpinDirectionProperty">
            <summary>
            Identifies the ValidSpinDirection dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Spinner.OnValidSpinDirectionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValidSpinDirectionProperty property changed handler.
            </summary>
            <param name="d">ButtonSpinner that changed its ValidSpinDirection.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Spinner.#ctor">
            <summary>
            Initializes a new instance of the Spinner class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Spinner.OnSpin(System.Windows.Controls.SpinEventArgs)">
            <summary>
            Raises the OnSpin event when spinning is initiated by the end-user.
            </summary>
            <param name="e">Spin event args.</param>
        </member>
        <member name="M:System.Windows.Controls.Spinner.OnValidSpinDirectionChanged(System.Windows.Controls.ValidSpinDirections,System.Windows.Controls.ValidSpinDirections)">
            <summary>
            Called when valid spin direction changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.Spinner.UpdateVisualState(System.Boolean)">
            <summary>
            Update current visual state.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Spinner.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">A value indicating whether to automatically generate transitions to the new state, or instantly transition to the new state.</param>
        </member>
        <member name="P:System.Windows.Controls.Spinner.ValidSpinDirection">
            <summary>
            Gets or sets the spin direction that is currently valid.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Spinner.Interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality. Making it internal for subclass access.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Spinner.Spin">
            <summary>
            Occurs when spinning is initiated by the end-user.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ButtonSpinner.ElementIncreaseButtonName">
            <summary>
            Name constant of the IncreaseButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ButtonSpinner.ElementDecreaseButtonName">
            <summary>
            Name constant of the DecreaseButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ButtonSpinner._increaseButton">
            <summary>
            Private field for IncreaseButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ButtonSpinner._decreaseButton">
            <summary>
            Private field for DecreaseButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ButtonSpinner.ContentProperty">
            <summary>
            Identifies the Content dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnContentPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ContentProperty property changed handler.
            </summary>
            <param name="d">ButtonSpinner that changed its Content.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.#ctor">
            <summary>
            Initializes a new instance of the ButtonSpinner class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnApplyTemplate">
            <summary>
            Builds the visual tree for the ButtonSpinner control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnContentChanged(System.Object,System.Object)">
            <summary>
            Occurs when the Content property value changed.
            </summary>
            <param name="oldValue">The old value of the Content property.</param>
            <param name="newValue">The new value of the Content property.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle click event of IncreaseButton and DecreaseButton template parts,
            translating Click to appropriate Spin event.
            </summary>
            <param name="sender">Event sender, should be either IncreaseButton or DecreaseButton template part.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Cancel LeftMouseButtonUp events originating from a button that has
            been changed to disabled.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the GotFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" />
            event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that
            contains the event data.
            </param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnValidSpinDirectionChanged(System.Windows.Controls.ValidSpinDirections,System.Windows.Controls.ValidSpinDirections)">
            <summary>
            Called when valid spin direction changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.SetButtonUsage">
            <summary>
            Disables or enables the buttons based on the valid spin direction.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ButtonSpinner.IncreaseButton">
            <summary>
            Gets or sets the IncreaseButton template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ButtonSpinner.DecreaseButton">
            <summary>
            Gets or sets the DecreaseButton template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ButtonSpinner.Content">
            <summary>
            Gets or sets the content that is contained within the button spinner.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.SpinDirection">
            <summary>
            Represents spin directions that could be initiated by the end-user.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.SpinDirection.Increase">
            <summary>
            Represents a spin initiated by the end-user in order to Increase a value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.SpinDirection.Decrease">
            <summary>
            Represents a spin initiated by the end-user in order to Decrease a value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.SpinEventArgs">
            <summary>
            Provides data for the Spinner.Spin event.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.SpinEventArgs.#ctor(System.Windows.Controls.SpinDirection)">
            <summary>
            Initializes a new instance of the SpinEventArgs class.
            </summary>
            <param name="direction">Spin direction.</param>
        </member>
        <member name="P:System.Windows.Controls.SpinEventArgs.Direction">
            <summary>
            Gets the SpinDirection for the spin that has been initiated by the 
            end-user.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ValidSpinDirections">
            <summary>
            Represents spin directions that are valid.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidSpinDirections.None">
            <summary>
            Can not increase nor decrease.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidSpinDirections.Increase">
            <summary>
            Can increase.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidSpinDirections.Decrease">
            <summary>
            Can decrease.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ListTimePickerPopupAutomationPeer">
            <summary>
            Exposes ListTimePickerPopup types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer">
            <summary>
            Exposes TimePickerPopup types to UI Automation.
            </summary>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.#ctor(System.Windows.Controls.TimePickerPopup)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer"/> class.
            </summary>
            <param name="owner">The TimePickerPopup that is associated to this 
            AutomationPeer.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern for the <see cref="T:System.Windows.UIElement"/> 
            that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>.
            </summary>
            <param name="patternInterface">One of the enumeration values.</param>
            <returns>Returns an AutomationPeer that can handle the the pattern,
            or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.SetValue(System.String)">
            <summary>
            Sets the value of a control from a string.
            </summary>
            <param name="value">The value to set.</param>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.RaiseValueAutomationEvent(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Raises the Value automation event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.TimePickerPopupOwner">
            <summary>
            Gets the TimePickerPopup that owns this AutomationPeer.
            </summary>
            <returns>The TimePicker that owns this AutomationPeer.</returns>
        </member>
        <member name="P:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.IsReadOnly">
            <summary>
            Gets a value indicating whether the value of a control is read-only.
            </summary>
            <value></value>
            <returns>true if the value is read-only; false if it can be modified.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.Value">
            <summary>
            Gets the value of the control.
            </summary>
            <value></value>
            <returns>
            The value of the control as a string.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopupAutomationPeer.#ctor(System.Windows.Controls.ListTimePickerPopup)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.ListTimePickerPopupAutomationPeer"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopupAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the type of the automation control.
            </summary>
            <returns>The Calendar AutomationControlType.</returns>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopupAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern for the <see cref="T:System.Windows.UIElement"/>
            that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>.
            </summary>
            <param name="patternInterface">One of the enumeration values.</param>
            <returns>
            Returns an AutomationPeer that can handle the the pattern,
            or null.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopupAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the <see cref="T:System.Windows.UIElement"/> 
            that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. 
            This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName"/>.
            </summary>
            <returns>The string ListTimePickerPopup.</returns>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopupAutomationPeer.GetSelection">
            <summary>
            Retrieves a UI Automation provider for each child element that is 
            selected.
            </summary>
            <returns>An array of UI Automation providers.</returns>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopupAutomationPeer.GetChildrenCore">
            <summary>
            Returns the collection of child elements of the <see cref="T:System.Windows.UIElement"/> 
            that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. 
            This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren"/>.
            </summary>
            <returns>
            A list of child <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> elements.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopupAutomationPeer.TimePickerPopupOwner">
            <summary>
            Gets the ListTimePickerPopup that owns this AutomationPeer.
            </summary>
            <returns>The ListTimePickerPopup that owns this AutomationPeer.</returns>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopupAutomationPeer.OwnerListTimePickerPopup">
            <summary>
            Gets the ListTimePickerPopup that owns this AutomationPeer.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopupAutomationPeer.CanSelectMultiple">
            <summary>
            Gets a value indicating whether the UI Automation provider 
            allows more than one child element to be selected concurrently.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopupAutomationPeer.IsSelectionRequired">
            <summary>
            Gets a value indicating whether the UI Automation provider 
            requires at least one child element to be selected.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="T:System.Windows.Automation.Peers.PickerAutomationPeer">
            <summary>
            Exposes Picker types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.#ctor(System.Windows.Controls.Picker)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:System.Windows.Automation.Peers.PickerAutomationPeer"/> class.
            </summary>
            <param name="owner">The Picker that is associated to this 
            AutomationPeer.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the Picker that is associated
            with this PickerAutomationPeer. This method is called by
            GetAutomationControlType.
            </summary>
            <returns>ComboBox AutomationControlType.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the Picker that is associated with this
            PickerAutomationPeer. This method is called by
            GetClassName.
            </summary>
            <returns>The name Picker.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern for the <see cref="T:System.Windows.UIElement"/> 
            that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>.
            </summary>
            <param name="patternInterface">One of the enumeration values.</param>
            <returns>Returns an AutomationPeer that can handle the the pattern,
            or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.Expand">
            <summary>
            Blocking method that returns after the element has been expanded.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.Collapse">
            <summary>
            Blocking method that returns after the element has been collapsed.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.RaiseExpandCollapseAutomationEvent(System.Boolean,System.Boolean)">
            <summary>
            Raises the ExpandCollapse automation event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:System.Windows.Automation.Peers.PickerAutomationPeer.OwnerPicker">
            <summary>
            Gets the Picker that owns this AutomationPeer.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.PickerAutomationPeer.ExpandCollapseState">
            <summary>
            Gets an element's current Collapsed or Expanded state.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="T:System.Windows.Automation.Peers.RangeTimePickerPopupAutomationPeer">
            <summary>
            Exposes RangeTimePicker types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.RangeTimePickerPopupAutomationPeer.#ctor(System.Windows.Controls.RangeTimePickerPopup)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.RangeTimePickerPopupAutomationPeer"/> class.
            </summary>
            <param name="owner">The owner of this AutomationPeer.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.RangeTimePickerPopupAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the <see cref="T:System.Windows.UIElement"/> that is 
            associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. 
            This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName"/>.
            </summary>
            <returns>The string RangeTimePickerPopupAutomationPeer.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RangeTimePickerPopupAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the type of the automation control.
            </summary>
            <returns>The Calendar control type.</returns>
        </member>
        <member name="P:System.Windows.Automation.Peers.RangeTimePickerPopupAutomationPeer.TimePickerPopupOwner">
            <summary>
            Gets the RangeTimePickerPopup that owns this AutomationPeer.
            </summary>
            <returns>The RangeTimePickerPopup that owns this AutomationPeer.</returns>
        </member>
        <member name="T:System.Windows.Automation.Peers.TimePickerAutomationPeer">
            <summary>
            Exposes TimePicker types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerAutomationPeer.#ctor(System.Windows.Controls.TimePicker)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.TimePickerAutomationPeer"/> class.
            </summary>
            <param name="owner">The TimePicker that is associated to this
            AutomationPeer.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the TimePicker that is associated with this
            PickerAutomationPeer. This method is called by
            GetClassName.
            </summary>
            <returns>The name Picker.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern for the <see cref="T:System.Windows.UIElement"/>
            that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>.
            </summary>
            <param name="patternInterface">One of the enumeration values.</param>
            <returns>Returns an AutomationPeer that can handle the the pattern,
            or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerAutomationPeer.System#Windows#Automation#Provider#IValueProvider#SetValue(System.String)">
            <summary>
            Sets the control's text value.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerAutomationPeer.RaiseValueAutomationEvent(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Raises the Value automation event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:System.Windows.Automation.Peers.TimePickerAutomationPeer.OwnerTimePicker">
            <summary>
            Gets the TimePicker that owns this AutomationPeer.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.TimePickerAutomationPeer.System#Windows#Automation#Provider#IValueProvider#IsReadOnly">
            <summary>
            Gets a value indicating whether the value is read only.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.TimePickerAutomationPeer.System#Windows#Automation#Provider#IValueProvider#Value">
            <summary>
            Gets a string representation of the current text value.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.TimeUpDownAutomationPeer">
            <summary>
            Exposes TimeUpDown types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimeUpDownAutomationPeer.#ctor(System.Windows.Controls.TimeUpDown)">
            <summary>
            Initializes a new instance of the TimeUpDownAutomationPeer class.
            </summary>
            <param name="owner">
            The TimeUpDown that is associated with this TimeUpDownAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimeUpDownAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the TimeUpDown that is associated with this
            TimeUpDownAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name TimeUpDown.</returns>
        </member>
        <member name="T:System.Windows.Controls.Primitives.ItemSelectionHelper`1">
            <summary>
            Exposes an ObservableCollection of T and 
            a SelectedItem property for binding purposes.
            </summary>
            <typeparam name="T">The type of items.</typeparam>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ItemSelectionHelper`1.SelectedItemName">
            <summary>
            Name used for the SelectedItem property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ItemSelectionHelper`1.ItemsName">
            <summary>
            Name used for the Items property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ItemSelectionHelper`1._selectedItem">
            <summary>
            BackingField for the selected item.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ItemSelectionHelper`1._items">
            <summary>
            BackingField for Items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.ItemSelectionHelper`1.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="P:System.Windows.Controls.Primitives.ItemSelectionHelper`1.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="E:System.Windows.Controls.Primitives.ItemSelectionHelper`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ListTimePickerPopup">
            <summary>
            Represents a time picker popup that allows choosing time from a ListBox.
            </summary>
            <remarks>Can also be used independently.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.TimePickerPopup">
            <summary>
            Base class for a control that can be used as the popup portion in a TimePicker.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.ITimeInput">
            <summary>
            Interface describing the common value, maximum and minimum properties
            that a TimeInput control is expected to have.
            </summary>
            <remarks>Used for internal coercion of these properties.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="P:System.Windows.Controls.ITimeInput.Value">
            <summary>
            Gets or sets the current time.
            </summary>
            <value>The current time.</value>
        </member>
        <member name="P:System.Windows.Controls.ITimeInput.Minimum">
            <summary>
            Gets or sets the minimum time.
            </summary>
            <value>The minimum time.</value>
        </member>
        <member name="P:System.Windows.Controls.ITimeInput.Maximum">
            <summary>
            Gets or sets the maximum time.
            </summary>
            <value>The maximum time.</value>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.ContainedStateName">
            <summary>
            The name of the visual state that represents a Popup that is 
            contained by a picker.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.NotContainedStateName">
            <summary>
            The name of the visual state that represent a Popup that is not 
            contained by a picker.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.ContainedByPickerGroupName">
            <summary>
            The name of the ContainedByPicker state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.PopupModeGroupName">
            <summary>
            The name of the PopupMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.AllowSecondsAndDesignatorsSelectionStateName">
            <summary>
            The name of the visual state that represents a PopupMode where
            TimeDesignators, Hours, Minutes and Seconds can be picked.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.AllowTimeDesignatorsSelectionStateName">
            <summary>
            The name of the visual state that represents a PopupMode where
            TimeDesignators, Hours and Minutes can be picked.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.AllowSecondsSelectionStateName">
            <summary>
            The name of the visual state that represents a PopupMode where
            Hours, Minutes and Seconds can be picked.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.HoursAndMinutesOnlyStateName">
            <summary>
            The name of the visual state that represents a PopupMode where
            Hours and Minutes can be picked.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._timeCoercionHelper">
            <summary>
            Helper class that centralizes the coercion logic across all 
            TimeInput controls.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._timePickerParent">
            <summary>
            BackingField of TimePickerParent.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._ignoreValueChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValueProperty property changed handler.
            </summary>
            <param name="d">UpDownBase whose Value changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.MinimumProperty">
            <summary>
            Identifies the Minimum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnMinimumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Minimum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnMinimumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Minimum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Minimum property.</param>
            <param name="newValue">New value of the Minimum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.MaximumProperty">
            <summary>
            Identifies the Maximum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnMaximumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Maximum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnMaximumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Maximum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Maximum property.</param>
            <param name="newValue">New value of the Maximum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.CultureProperty">
            <summary>
            Identifies the Culture dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnCulturePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CultureProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Culture.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnCultureChanged(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Called when the culture changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.TimeGlobalizationInfoProperty">
            <summary>
            Identifies the TimeGlobalizationInfo dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnTimeGlobalizationInfoPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeGlobalizationInfoProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeGlobalizationInfo.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnTimeGlobalizationInfoChanged(System.Windows.Controls.TimeGlobalizationInfo,System.Windows.Controls.TimeGlobalizationInfo)">
            <summary>
            Called when the time globalization info changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._actualTimeGlobalizationInfo">
            <summary>
            BackingField for ActualTimeGlobalizationInfo.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.FormatProperty">
            <summary>
            Identifies the Format dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            FormatProperty property changed handler.
            </summary>
            <param name="d">TimePickerPopup that changed its Format.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnFormatChanged(System.Windows.Controls.ITimeFormat,System.Windows.Controls.ITimeFormat)">
            <summary>
            Called when display format changed.
            </summary>
            <param name="oldValue">The old format.</param>
            <param name="newValue">The new format.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._actualFormat">
            <summary>
            BackingField for ActualFormat.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.PopupSecondsIntervalProperty">
            <summary>
            Identifies the PopupSecondsInterval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupSecondsIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupSecondsIntervalProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupSecondsInterval.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupSecondsIntervalChanged(System.Int32,System.Int32)">
            <summary>
            Called when the popup seconds interval changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.PopupMinutesIntervalProperty">
            <summary>
            Identifies the PopupMinutesInterval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupMinutesIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupMinutesIntervalProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupMinutesInterval.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupMinutesIntervalChanged(System.Int32,System.Int32)">
            <summary>
            Called when the popup minutes interval changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.PopupTimeSelectionModeProperty">
            <summary>
            Identifies the PopupTimeSelectionMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupTimeSelectionModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupTimeSelectionModeProperty property changed handler.
            </summary>
            <param name="d">TimePickerPopup that changed its PopupTimeSelectionMode.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupTimeSelectionModeChanged(System.Windows.Controls.PopupTimeSelectionMode,System.Windows.Controls.PopupTimeSelectionMode)">
            <summary>
            Called when the time selection mode is changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimePickerPopup"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnApplyTemplate">
            <summary>
            Builds the visual tree for the TimePickerPopup control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.DoCancel">
            <summary>
            Raises the Cancel event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.DoCommit">
            <summary>
            Raises the Commit event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnOpened">
            <summary>
            Called when the TimePicker control has opened this popup.
            </summary>
            <remarks>Called before the TimePicker reacts to value changes.
            This is done so that the Popup can 'snap' to a specific value without
            changing the selected value in the TimePicker.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnClosed">
            <summary>
            Called when the TimePicker control has closed this popup.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanging event when Value property is changing.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.UpdateVisualState(System.Boolean)">
            <summary>
            Update the current visual states.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.GetValidPopupTimeSelectionModes">
            <summary>
            Gets the valid popup time selection modes.
            </summary>
            <returns>An array of PopupTimeSelectionModes that are supported by
            the Popup.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnCreateAutomationPeer">
            <summary>
            Returns an AutomationPeer for use by the Silverlight 
            automation infrastructure.
            </summary>
            <returns>An AutomationPeer for the Popup object.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.CreateAutomationPeer">
            <summary>
            Creates the automation peer.
            </summary>
            <returns>An AutomationPeer for this instance.</returns>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.TimePickerParent">
            <summary>
            Gets or sets the container for this Popup.
            </summary>
            <value>The TimePicker that contains this Popup.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.Value">
            <summary>
            Gets or sets the currently selected time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.Minimum">
            <summary>
            Gets or sets the Minimum time considered valid by the control.
            </summary>
            <remarks>Setting the Minimum property will be used to prevent users 
            from choosing values out of range in the TimePickerPopup.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.Maximum">
            <summary>
            Gets or sets the Maximum time considered valid by the control.
            </summary>
            <remarks>Setting the Maximum property will be used to prevent users 
            from choosing values out of range in the TimePickerPopup.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.Culture">
            <summary>
            Gets or sets the culture that will be used by the control for 
            time formatting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.ActualCulture">
            <summary>
            Gets the actual culture used by the control for formatting and parsing.
            </summary>
            <value>The actual culture.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.TimeGlobalizationInfo">
            <summary>
            Gets or sets the strategy object that determines how the control 
            interacts with DateTime and CultureInfo.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.ActualTimeGlobalizationInfo">
            <summary>
            Gets the actual TimeGlobalizationInfo used by the control.
            </summary>
            <remarks>If TimeGlobalizationInfo is not set, will return 
            default TimeGlobalizationInfo instance.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.Format">
            <summary>
            Gets or sets the Format used by the control. 
            From XAML Use either "Short", "Long" or a custom format. 
            Custom formats can only contain "H", "h", "m", "s" or "t". 
            For example: use 'hh:mm:ss' is used to format time as "13:45:30".
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.ActualFormat">
            <summary>
            Gets the actual format that will be used to display Time 
            in the TimePickerPopup. If no format is specified, ShortTimeFormat 
            is used.
            </summary>
            <value>The actual display format.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.PopupSecondsInterval">
            <summary>
            Gets or sets the interval of seconds that can be
            picked in a popup.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.PopupMinutesInterval">
            <summary>
            Gets or sets the interval of minutes that can be
            picked in a popup.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.PopupTimeSelectionMode">
            <summary>
            Gets or sets the whether the TimePickerPopup supports selecting 
            designators and/or seconds.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePickerPopup.ValueChanging">
            <summary>
            Occurs when Value property is changing.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePickerPopup.ValueChanged">
            <summary>
            Occurs when Value property has changed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePickerPopup.Commit">
            <summary>
            Occurs when a selected item is committed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePickerPopup.Cancel">
            <summary>
            Occurs when a selection has been canceled.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.System#Windows#Controls#ITimeInput#Value">
            <summary>
            Gets or sets the Value property.
            </summary>
            <value></value>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.System#Windows#Controls#ITimeInput#Minimum">
            <summary>
            Gets or sets the minimum time.
            </summary>
            <value>The minimum time.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.System#Windows#Controls#ITimeInput#Maximum">
            <summary>
            Gets or sets the maximum time.
            </summary>
            <value>The maximum time.</value>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup.ListBoxPartName">
            <summary>
            The name of the ListBox TemplatePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup._listBoxPart">
            <summary>
            BackingField for ListBoxPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup._isValueChangeCausedBySelection">
            <summary>
            Determines whether the value changed because SelectedItem in the
            ListBox was changed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup.ListBoxStyleProperty">
            <summary>
            Identifies the ListBoxStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnListBoxStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ListBoxStyleProperty property changed handler.
            </summary>
            <param name="d">ListTimePickerPopup that changed its ListBoxStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup.ListBoxItemStyleProperty">
            <summary>
            Identifies the ListBoxItemStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnListBoxItemStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ListBoxItemStyleProperty property changed handler.
            </summary>
            <param name="d">ListTimePickerPopup that changed its ListBoxItemStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup._allowWritingTimeItemsSelection">
            <summary>
            Indicates whether it is allowed to set the TimeItemsSelection property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup.TimeItemsSelectionProperty">
            <summary>
            Identifies the TimeItemsSelection dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnTimeItemsSelectionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeItemsSelectionProperty property changed handler.
            </summary>
            <param name="d">ListTimePickerPopup that changed its TimeItemsSelection.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.ListTimePickerPopup"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnApplyTemplate">
            <summary>
            Builds the visual tree for the ListTimePickerPopup control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnMinimumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Minimum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Minimum property.</param>
            <param name="newValue">New value of the Minimum property.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnMaximumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Maximum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Maximum property.</param>
            <param name="newValue">New value of the Maximum property.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnCultureChanged(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Called when the culture changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnFormatChanged(System.Windows.Controls.ITimeFormat,System.Windows.Controls.ITimeFormat)">
            <summary>
            Called when format changed.
            </summary>
            <param name="oldValue">The old format.</param>
            <param name="newValue">The new format.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnPopupMinutesIntervalChanged(System.Int32,System.Int32)">
            <summary>
            Called when the popup minutes interval changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnPopupSecondsIntervalChanged(System.Int32,System.Int32)">
            <summary>
            Called when the popup seconds interval changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnPopupTimeSelectionModeChanged(System.Windows.Controls.PopupTimeSelectionMode,System.Windows.Controls.PopupTimeSelectionMode)">
            <summary>
            Called when the time selection mode is changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.RegenerateTimeItems">
            <summary>
            Regenerates the time items.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.SelectValue">
            <summary>
            Select a value based on the current value. This will 'snap' the 
            Value to the closest possible Time based on the interval.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.ScrollToSelectedValue">
            <summary>
            Scrolls to a value in the list, or closest.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.TimeItemsSelectionPropertyChanged(System.ComponentModel.INotifyPropertyChanged,System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Called when the TimeItems object is set.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.TimeItemsPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called by any property change on the TimeItems object.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnOpened">
            <summary>
            Called when TimePicker opened the popup.
            </summary>
            <remarks>Called before the TimePicker reacts to value changes.
            This is done so that the Popup can 'snap' to a specific value without
            changing the selected value in the TimePicker.</remarks>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.ItemSelectedByMouse(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the MouseLeftButtonUp event of the ListBoxPart control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.GetValidPopupTimeSelectionModes">
            <summary>
            Gets the valid popup time selection modes.
            </summary>
            <returns>
            An array of PopupTimeSelectionModes that are supported by
            the Popup.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.CreateAutomationPeer">
            <summary>
            Creates the automation peer.
            </summary>
            <returns>The ListTimePickerPopupAutomationPeer for this instance.</returns>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.RaiseAutomationPeerSelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Raises the automation peer selection changed event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.SelectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopup.ListBoxPart">
            <summary>
            Gets the ListBox part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopup.ListBoxStyle">
            <summary>
            Gets or sets the Style applied to the ListBox portion the 
            ListTimePickerPopup control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopup.ListBoxItemStyle">
            <summary>
            Gets or sets the Style applied to the ListBoxItems in the 
            ListTimePickerPopup control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopup.TimeItemsSelection">
            <summary>
            Gets the collection of times used in the ListBox portion of the 
            ListTimePickerPopup control.
            </summary>
            <value>The time items selection.</value>
        </member>
        <member name="T:System.Windows.Controls.RangeTimePickerPopup">
            <summary>
            Represents a time picker popup that allows choosing time through 3 
            sliders: Hours, Minutes and seconds.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.HoursSliderPartName">
            <summary>
            The HoursSliderPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.MinutesSliderPartName">
            <summary>
            The MinutesSliderPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.SecondsSliderPartName">
            <summary>
            The SecondsSliderPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.HoursContainerPartName">
            <summary>
            The HoursLabelsPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.MinutesContainerPartName">
            <summary>
            The MinutesLabelsPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.SecondsContainerPartName">
            <summary>
            The SecondsLabelsPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.CommitButtonPartName">
            <summary>
            The name of the CommitButton TemplatePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.CancelButtonPartName">
            <summary>
            The name of the CancelButton TemplatePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._secondsSlider">
            <summary>
            BackingField for the SecondsSlider.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._minutesSlider">
            <summary>
            BackingField for the MinutesSlider.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._hoursSlider">
            <summary>
            BackingField for the HoursSlider.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._cancelButtonPart">
            <summary>
            BackingField for CancelButtonPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._commitButtonPart">
            <summary>
            BackingField for CommitButtonPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._isOpenedByContainer">
            <summary>
            Is set when opened or closed by a container.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._ignoreSliderChange">
            <summary>
            Determines whether the control should ignore the changes in its 
            sliders.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.SliderStyleProperty">
            <summary>
            Identifies the SliderStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnSliderStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SliderStyleProperty property changed handler.
            </summary>
            <param name="d">RangeTimePickerPopup that changed its SliderStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.TimeButtonStyleProperty">
            <summary>
            Identifies the TimeButtonStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnTimeButtonStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeButtonStyleProperty property changed handler.
            </summary>
            <param name="d">RangeTimePickerPopup that changed its TimeButtonStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.RangeTimePickerPopup"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnApplyTemplate">
            <summary>
            Builds the visual tree for the RangeTimePickerPopup control when a 
            new template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.SliderSizeChange(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Called when a slider changes size.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.SizeChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.SecondsChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Reacts to a change in the Seconds Slider.
            </summary>
            <param name="sender">The Slider that changed its value.</param>
            <param name="e">The instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.MinutesChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Reacts to a change in the Minutes Slider.
            </summary>
            <param name="sender">The Slider that changed its value.</param>
            <param name="e">The instance containing the event data.</param>        
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.HoursChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Reacts to a change in the Hours Slider.
            </summary>
            <param name="sender">The Slider that changed its value.</param>
            <param name="e">The instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnOpened">
            <summary>
            Called when the TimePicker control has opened this popup.
            </summary>
            <remarks>Called before the TimePicker reacts to value changes.
            This is done so that the Popup can 'snap' to a specific value without
            changing the selected value in the TimePicker.</remarks>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnClosed">
            <summary>
            Called when the TimePicker control has closed this popup.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnCommit(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called by the commit button.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnCancel(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called by the cancel button.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance 
            containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.GetValueFromSliders">
            <summary>
            Calculates the value based on the sliders.
            </summary>
            <returns>The DateTime as represented by the current values in the 
            Sliders.</returns>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.SetSlidersToValue(System.DateTime)">
            <summary>
            Sets the sliders to value.
            </summary>
            <param name="value">The DateTime that needs to be reflected by
            the three sliders.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.GenerateLabels">
            <summary>
            Generates the labels.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.SetEnabledStatusOnLabels">
            <summary>
            Sets the enabled status on the labels.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.LayoutLabels">
            <summary>
            Arranges the time labels on the RangeTimePickerPopup control.
            </summary>
            <remarks>Uses a canvas to layout labels vertically.</remarks>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnLabelClicked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when a label is clicked.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.GetCoercedValue(System.DateTime)">
            <summary>
            Gets the value after Minimum and Maximum coercion.
            </summary>
            <param name="time">The input.</param>
            <returns>Time between Minimum and Maximum.</returns>
            <remarks>Done to avoid coercion in containing controls.</remarks>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.GetSnappedValue(System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the coerced value, using interval and a minimum and maximum.
            </summary>
            <param name="value">The value that will be snapped.</param>
            <param name="minimum">The minimum the value may be.</param>
            <param name="maximum">The maximum the value may be.</param>
            <param name="interval">The interval to which the value gets snapped.</param>
            <returns>A value that is within range and snapped to an interval.</returns>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.CreateLabelElement(System.String,System.TimeSpan)">
            <summary>
            Creates the element for a label.
            </summary>
            <param name="text">The text that is set as content.</param>
            <param name="timespan">The TimeSpan that is represented by the Button.</param>
            <returns>A Button representing the label.</returns>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.GetValidPopupTimeSelectionModes">
            <summary>
            Gets the valid popup time selection modes.
            </summary>
            <returns>
            An array of PopupTimeSelectionModes that are supported by
            the Popup.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.CreateAutomationPeer">
            <summary>
            Creates the automation peer.
            </summary>
            <returns>The RangeTimePickerPopupAutomationPeer for this instance.</returns>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.SecondsSlider">
            <summary>
            Gets or sets the seconds slider Part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.MinutesSlider">
            <summary>
            Gets or sets the minutes slider.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.HoursSlider">
            <summary>
            Gets or sets the HoursSlider.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.HoursContainer">
            <summary>
            Gets or sets the hours labels.
            </summary>
            <value>The hours labels.</value>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.MinutesContainer">
            <summary>
            Gets or sets the minute labels.
            </summary>
            <value>The minute labels.</value>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.SecondsContainer">
            <summary>
            Gets or sets the second labels.
            </summary>
            <value>The second labels.</value>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.CancelButtonPart">
            <summary>
            Gets or sets the cancel button part.
            </summary>
            <value>The cancel button part.</value>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.CommitButtonPart">
            <summary>
            Gets or sets the commit button part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.IsCurrentlyOpen">
            <summary>
            Gets a value indicating whether this instance is currently open.
            </summary>
            <value><c>True</c> if this instance is currently open; 
            otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.SliderStyle">
            <summary>
            Gets or sets the Style applied to the sliders in the 
            RangeTimePickerPopup control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.TimeButtonStyle">
            <summary>
            Gets or sets the Style applied to the buttons that represent
            hours, minutes and seconds.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.TimePickerPopupTemplate">
            <summary>
            Describes the template used to instantiate a Popup for TimePicker.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.PopupTimeSelectionMode">
            <summary>
            Determines the granularity of time selection
            by a popup. Hours and minutes are always used.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.PopupTimeSelectionMode.AllowSecondsSelection">
            <summary>
            Hours, Minutes and Seconds.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PopupTimeSelectionMode.HoursAndMinutesOnly">
            <summary>
            Hours and Minutes.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.CustomTimeFormat">
            <summary>
            Represents a single time format used for parsing and formatting.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ITimeFormat">
            <summary>
            Defines time formats used for formatting and parsing DateTime values.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ITimeFormat.GetTimeDisplayFormat(System.Globalization.CultureInfo)">
            <summary>
            Gets the format to use to display a DateTime as a time value.
            </summary>
            <param name="culture">The culture.</param>
            <returns>A format to use during display of a DateTime.</returns>
        </member>
        <member name="M:System.Windows.Controls.ITimeFormat.GetTimeParseFormats(System.Globalization.CultureInfo)">
            <summary>
            Gets the formats to use to parse a string to a DateTime.
            </summary>
            <param name="culture">Culture used to determine formats.</param>
            <returns>An array of formats to be used during parsing.</returns>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.CustomTimeFormat"/> class.
            </summary>
            <param name="format">The format that is used to parse or display
            a String or DateTime.</param>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.CustomTimeFormat"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.GetTimeDisplayFormat(System.Globalization.CultureInfo)">
            <summary>
            Gets the format to use to display a DateTime as a time value.
            </summary>
            <param name="culture">The culture.</param>
            <returns>
            A format to use during display of a DateTime.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.GetTimeParseFormats(System.Globalization.CultureInfo)">
            <summary>
            Gets the format to use to parse a string to a DateTime.
            </summary>
            <param name="culture">Culture used to determine formats.</param>
            <returns>
            An array of formats to be used during parsing.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is 
            equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare 
            with the current <see cref="T:System.Object"/>.</param>
            <returns>
            True if the specified <see cref="T:System.Object"/> is equal 
            to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.op_Equality(System.Windows.Controls.CustomTimeFormat,System.Windows.Controls.CustomTimeFormat)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.op_Inequality(System.Windows.Controls.CustomTimeFormat,System.Windows.Controls.CustomTimeFormat)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.CustomTimeFormat.Format">
            <summary>
            Gets or sets the custom format that is used to parse or display
            a String or DateTime.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.LongTimeFormat">
            <summary>
            Represents the long time format used for parsing and formatting.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.GetTimeDisplayFormat(System.Globalization.CultureInfo)">
            <summary>
            Gets the format to use to display a DateTime as a time value.
            </summary>
            <param name="culture">The culture.</param>
            <returns>
            A format to use during display of a DateTime.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.GetTimeParseFormats(System.Globalization.CultureInfo)">
            <summary>
            Gets the formats to use to parse a string to a DateTime.
            </summary>
            <param name="culture">Culture used to determine formats.</param>
            <returns>
            An array of formats to be used during parsing.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is 
            equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare 
            with the current <see cref="T:System.Object"/>.</param>
            <returns>
            True if the specified <see cref="T:System.Object"/> is equal 
            to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.op_Equality(System.Windows.Controls.LongTimeFormat,System.Windows.Controls.LongTimeFormat)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.op_Inequality(System.Windows.Controls.LongTimeFormat,System.Windows.Controls.LongTimeFormat)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.ShortTimeFormat">
            <summary>
            Represents the short time format used for parsing and formatting.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.GetTimeDisplayFormat(System.Globalization.CultureInfo)">
            <summary>
            Gets the format to use to display a DateTime as a time value.
            </summary>
            <param name="culture">The culture.</param>
            <returns>
            A format to use during display of a DateTime.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.GetTimeParseFormats(System.Globalization.CultureInfo)">
            <summary>
            Gets the formats to use to parse a string to a DateTime.
            </summary>
            <param name="culture">Culture used to determine formats.</param>
            <returns>
            An array of formats to be used during parsing.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is 
            equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare 
            with the current <see cref="T:System.Object"/>.</param>
            <returns>
            True if the specified <see cref="T:System.Object"/> is equal 
            to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.op_Equality(System.Windows.Controls.ShortTimeFormat,System.Windows.Controls.ShortTimeFormat)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.op_Inequality(System.Windows.Controls.ShortTimeFormat,System.Windows.Controls.ShortTimeFormat)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.TimeFormatConverter">
            <summary>
            Converts from a string value to an ITimeFormat instance. Converts "Short" 
            to ShortTimeFormat, "Long" to LongTimeFormat and any other strings to 
            CustomTimeFormat. 
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeFormatConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert from the specified type 
            descriptor context.
            </summary>
            <param name="typeDescriptorContext">The type descriptor context.</param>
            <param name="sourceType">Type of the source.</param>
            <returns>
            	<c>True</c> if this instance can convert from the specified 
            type descriptor context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeFormatConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert to the specified type 
            descriptor context.
            </summary>
            <param name="typeDescriptorContext">The type descriptor context.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns>
            	<c>True</c> if this instance can convert to the specified type 
            descriptor context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeFormatConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts instances of type string to an instance of type ITimeFormat.
            </summary>
            <param name="typeDescriptorContext">
            The type descriptor context.
            </param>
            <param name="cultureInfo">The culture used to convert.</param>
            <param name="source">
            The string that is converted.
            </param>
            <returns>
            An instance of ITimeFormat that is the value of the conversion.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeFormatConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts an known instance of type ITimeFormat to a string.
            </summary>
            <param name="typeDescriptorContext">
            The type descriptor context.
            </param>
            <param name="cultureInfo">The culture used to convert.</param>
            <param name="value">
            The value that is being converted to a specified type.
            </param>
            <param name="destinationType">
            The type to convert the value to.
            </param>
            <returns>
            The value of the conversion to the specified type.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.TimeGlobalizationInfo">
            <summary>
            Strategy object that determines how controls interact with DateTime and 
            CultureInfo.
            </summary>
            <remarks>TimeInput supports only the following formatting characters:
            'h', 'm', 's', 'H', 't'. All other characters are filtered out:
            'd', 'f', 'F', 'g', 'K', 'M', 'y', 'z'.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.TimeGlobalizationInfo.TimeChars">
            <summary>
            The characters that are allowed inside a format.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetTransformedFormat(System.String)">
            <summary>
            Transforms a format to a format that only allows the characters
            h, m, s, t, H and the defined TimeSeparators (: and .).
            Also takes into account the rule that a single TimeCharacter should
            be followed by a space.
            </summary>
            <param name="format">The format that needs to be transformed.</param>
            <returns>A format containing only the expected characters.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.MapDigitToCharacter(System.Int32)">
            <summary>
            Returns the global representation of each integer formatted 
            by the TimeGlobalizationInfo.
            </summary>
            <param name="input">Character that will be mapped to a different
            character.</param>
            <returns>The global version of a character that represents the input.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.MapCharacterToDigit(System.Char)">
            <summary>
            Returns the European number character of each global representation 
            parsed by the TimeGlobalizationInfo.
            </summary>
            <param name="input">The global version of the character that needs 
            to be mapped to a regular character.</param>
            <returns>The character that represents the global version of a character.</returns>
            <remarks>All characters pass through this method (whitespaces and
            TimeDesignators). Return the input character if no logical mapping
            could be made.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetActualTimeParsers(System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser})">
            <summary>
            Gets the actual TimeParsers that will be used for parsing.
            </summary>
            <param name="parsers">The parsers that are currently used by parent.</param>
            <returns>A new collection of parsers that represent the parsers
            this strategy object will use.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.FormatTime(System.Nullable{System.DateTime},System.Windows.Controls.ITimeFormat,System.Char[])">
            <summary>
            Formats the specified DateTime to a time string representation.
            </summary>
            <param name="value">The DateTime that should be formatted.</param>
            <param name="timeFormat">The time format used to describe how value
            should be formatted.</param>
            <param name="timeCharacters">The allowed characters in the format. 
            Leave empty to indicate that all characters are allowed. See remarks.</param>
            <returns>
            A string that represents the time part of a DateTime.
            </returns>
            <remarks>The TimeFormat will contain TimeCharacters in a certain 
            order, like hh:mm:ss. By passing specific TimeCharacters, these
            will get filtered and the method only returns part of the formatted
            string. Example: pass 'h', 't', 'H' to get back 4 AM, if the culture
            was set to en-US.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.ParseTime(System.String,System.Windows.Controls.ITimeFormat,System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser})">
            <summary>
            Parses a string into a DateTime using the specified ITimeFormat instance 
            and TimeParsers.
            </summary>
            <param name="mappedText">The text that was entered by the user.</param>
            <param name="timeFormat">The TimeFormat instance used to supply
            formats.</param>
            <param name="timeParsers">The time parsers.</param>
            <returns>
            A DateTime with a correctly set time part.
            </returns>
            <remarks>The date part of the DateTime is irrelevant and will be
            overwritten by the current date.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.TryParseTime(System.String,System.Windows.Controls.ITimeFormat,System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser},System.Nullable{System.DateTime}@)">
            <summary>
            Parses a string into a DateTime using the specified ITimeFormat instance 
            and TimeParsers and returns a value that indicates whether the conversion 
            succeeded.
            </summary>
            <param name="mappedText">The text that was entered by the user.</param>
            <param name="timeFormat">The TimeFormat instance used to supply
            formats.</param>
            <param name="timeParsers">The time parsers.</param>
            <param name="result">A DateTime with a correctly set time part.</param>
            <returns>
            True, if the time was parsed correctly, false if the time was not 
            parsed.
            </returns>
            <remarks>The date part of the DateTime is irrelevant and will be
            overwritten by the current date.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetTimeUnitAtTextPosition(System.String,System.Int32,System.Windows.Controls.ITimeFormat)">
            <summary>
            Gets the time unit that is represented by a text position.
            </summary>
            <param name="text">The text that represents a DateTime.</param>
            <param name="textPosition">The location in the text.</param>
            <param name="timeFormat">The time format describe how the text 
            can be parsed to a DateTime.</param>
            <returns>
            The TimeSpan that is represented by the character at a
            specific caret position.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetTextPositionForTimeUnit(System.String,System.TimeSpan,System.Windows.Controls.ITimeFormat)">
            <summary>
            Gets the position for a time unit in a string that can be parsed by 
            the specified ITimeFormat.
            </summary>
            <param name="text">The text that represents a DateTime.</param>
            <param name="timeSpan">The time span that is searched for.</param>
            <param name="timeFormat">The time format that describes how this text can be
            parsed to a DateTime.</param>
            <returns>
            The position in the text that corresponds to the TimeSpan or
            -1 if none was found.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.OnIncrement(System.DateTime,System.TimeSpan)">
            <summary>
            Performs addition of a date time and a time span in a global context.
            </summary>
            <param name="value">The value.</param>
            <param name="timeSpan">The time span.</param>
            <returns>The DateTime after incrementing by TimeSpan.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.OnDecrement(System.DateTime,System.TimeSpan)">
            <summary>
            Subtracts a time span from a date time in a global context.
            </summary>
            <param name="value">The value.</param>
            <param name="timeSpan">The time span.</param>
            <returns>The DateTime after decrementing by TimeSpan.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetDesignatorTextPositionStart(System.String)">
            <summary>
            Gets the caret position at the start of the designator.
            </summary>
            <param name="text">The text that might include a designator.</param>
            <returns>Caret position for the end of the designator,
            or -1 if none found.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetDesignatorTextPositionEnd(System.String,System.Int32)">
            <summary>
            Gets the caret position at the end of the designator.
            </summary>
            <param name="text">The text that might include a designator.</param>
            <param name="designatorStartIndex">Start index of the designator.</param>
            <returns>
            Caret position for the end of the designator,
            or -1 if none found.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.TimeGlobalizationInfo.Culture">
            <summary>
            Gets or sets the culture used by the owning TimeInput control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeGlobalizationInfo.ActualCulture">
            <summary>
            Gets the actual culture used by the TimeGlobalizationInfo for formatting 
            and parsing.
            </summary>
            <value>The actual culture.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeGlobalizationInfo.TimeSeparators">
            <summary>
            Gets the characters that may be used to separate components of time,
            that is, hours, minutes and seconds.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeGlobalizationInfo.AMDesignator">
            <summary>
            Gets the string designator for hours that are "ante meridiem" 
            (before noon).
            </summary>
            <value>The AM designator.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeGlobalizationInfo.PMDesignator">
            <summary>
            Gets the string designator for hours that are "post meridiem" 
            (after noon).
            </summary>
            <value>The PM designator.</value>
        </member>
        <member name="T:System.Windows.Controls.Picker">
            <summary>
            Base class for all controls that have popup functionality.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Picker.ElementPopupName">
            <summary>
            Name constant for Popup.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker.ElementDropDownToggleName">
            <summary>
            Name constant for DropDownToggle.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._dropDownPopup">
            <summary>
            BackingField for PopupPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._dropDownToggleButton">
            <summary>
            BackingField for DropDownTogglePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker.IsDropDownOpenProperty">
            <summary>
            Identifies the IsDropDownOpen dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnIsDropDownOpenPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsDropDownOpenProperty property changed handler.
            </summary>
            <param name="d">Picker that changed its IsDropDownOpen.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.Picker.PopupButtonModeProperty">
            <summary>
            Identifies the PopupButtonMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnPopupButtonModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupButtonModeProperty property changed handler.
            </summary>
            <param name="d">Picker that changed its PopupButtonMode.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.Picker.MaxDropDownHeightProperty">
            <summary>
            Identifies the MaxDropDownHeight dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnMaxDropDownHeightPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaxDropDownHeightProperty property changed handler.
            </summary>
            <param name="d">Picker that changed its MaxDropDownHeight.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.Picker._popupChild">
            <summary>
            BackingField for PopupChild.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._outsidePopupCanvas">
            <summary>
            Gets or sets the expansive area outside of the popup.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._popupChildCanvas">
            <summary>
            Gets or sets the canvas for the popup child.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._ignorePropertyChange">
            <summary>
            Gets or sets a value indicating whether to ignore calling a pending 
            change handlers. 
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._popupClosedVisualState">
            <summary>
            Gets or sets a value indicating whether a visual popup state is 
            being used in the current template for the Closed state. Setting 
            this value to true will delay the actual setting of Popup.IsOpen 
            to false until after the visual state's transition for Closed is 
            complete.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._popupHasOpened">
            <summary>
            A value indicating whether the popup has been opened at least once.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.Picker"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnApplyTemplate">
            <summary>
            Builds the visual tree for the Picker control when a new template is 
            applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.GetSelectedValue">
            <summary>
            Gets the selected value represented in the control.
            </summary>
            <returns>The value that is picked.</returns>
        </member>
        <member name="M:System.Windows.Controls.Picker.ArrangePopup">
            <summary>
            Arrange the drop down popup.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.OpenDropDown(System.Boolean,System.Boolean)">
            <summary>
            Private method that directly opens the popup, checks the expander 
            button, and then fires the Opened event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.CloseDropDown(System.Boolean,System.Boolean)">
            <summary>
            Private method that directly closes the popup, flips the Checked 
            value, and then fires the Closed event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.ToggleButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Opens or closes the popup if reacting to button press.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnPopupClosedStateChanged(System.Object,System.Windows.VisualStateChangedEventArgs)">
            <summary>
            Actually closes the popup after the VSM state animation completes.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OutsidePopupMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The mouse has clicked outside of the popup.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.ControlIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle the change of the IsEnabled property.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnMaxDropDownHeightChanged(System.Double)">
            <summary>
            Handles MaxDropDownHeightChanged by re-arranging and updating the 
            popup arrangement.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.PopupChildGotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The popup child has received focus.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.PopupChildLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The popup child has lost focus.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.PopupChildMouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            The popup child has had the mouse enter its bounds.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.PopupChildMouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            The mouse has left the popup child's bounds.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.PopupChildSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            The size of the popup child has changed.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnDropDownOpening(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Boolean})">
            <summary>
            Raises the DropDownOpening event.
            </summary>
            <param name="e">
            Provides any observers the opportunity to cancel the operation and 
            halt opening the drop down.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnDropDownOpened(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Raises the DropDownOpened event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnDropDownClosing(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Boolean})">
            <summary>
            Raises the DropDownClosing event.
            </summary>
            <param name="e">
            Provides any observers the opportunity to cancel the operation 
            and halt closing the drop down.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnDropDownClosed(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Raises the DropDownClosed event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.FocusChanged(System.Boolean)">
            <summary>
            Handles the FocusChanged event.
            </summary>
            <param name="hasFocus">A value indicating whether the control 
            currently has the focus.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.HasFocus">
            <summary>
            Checks to see if the control has focus currently.
            </summary>
            <returns>Returns a value indicating whether the control or its popup
            have focus.</returns>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the GotFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the MouseLeftButtonUp event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the MouseLeftButtonDown event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Picker.UpdateVisualState(System.Boolean)">
            <summary>
            Update the current visual state of the button.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="P:System.Windows.Controls.Picker.DropDownPopup">
            <summary>
            Gets or sets the popup part.
            </summary>
            <value>The popup part.</value>
        </member>
        <member name="P:System.Windows.Controls.Picker.DropDownToggleButton">
            <summary>
            Gets or sets the drop down toggle part.
            </summary>
            <value>The drop down toggle part.</value>
        </member>
        <member name="P:System.Windows.Controls.Picker.IsDropDownOpen">
            <summary>
            Gets or sets a value indicating whether the drop-down portion 
            of the control is open.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Picker.PopupButtonMode">
            <summary>
            Gets or sets the button event that causes the popup portion of the 
            Picker control to open.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Picker.MaxDropDownHeight">
            <summary>
            Gets or sets the maximum height of the drop-down portion of the 
            Picker control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Picker.PopupChild">
            <summary>
            Gets the element shown in the drop down portion of the Picker control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Picker.Interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality. Making it internal for subclass access.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Picker.DropDownOpening">
            <summary>
            Occurs when the value of the IsDropDownOpen property is changing from 
            false to true.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Picker.DropDownOpened">
            <summary>
            Occurs when the value of the IsDropDownOpen property has changed from 
            false to true and the drop-down is open.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Picker.DropDownClosing">
            <summary>
            Occurs when the IsDropDownOpen property is changing from true to false.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Picker.DropDownClosed">
            <summary>
            Occurs when the IsDropDownOpen property was changed from true to false 
            and the drop-down is open.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.TimeCoercionHelper">
            <summary>
            Helper class that centralizes the coercion logic across all 
            TimeInput controls.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.TimeCoercionHelper._timeInputControl">
            <summary>
            The TimeInput control that needs to be coerced.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeCoercionHelper.#ctor(System.Windows.Controls.ITimeInput)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimeCoercionHelper"/> class.
            </summary>
            <param name="timeInput">The time input that this helper will coerce.</param>
            <remarks>Lifetime of this helper class is determined by lifetime
            of control it is coercing.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeCoercionHelper.ProcessMinimumChange(System.Nullable{System.DateTime})">
            <summary>
            Processes the minimum value being set.
            </summary>
            <param name="newMinimum">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeCoercionHelper.ProcessMaximumChange(System.Nullable{System.DateTime})">
            <summary>
            Processes the maximum value being set.
            </summary>
            <param name="newMaximum">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeCoercionHelper.CoerceValue(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Coerces the value.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <returns>
            True if no coercion was needed and the value will not be
            modified, false if the coercion logic will set a different value.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeCoercionHelper.CoerceValueOnRangeMove(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Coerces the value.
            </summary>
            <param name="newMinimum">The new minimum.</param>
            <param name="newMaximum">The new maximum.</param>
            <returns>True if no coercion was needed and the value will not be
            modified, false if the coercion logic will set a different value.</returns>
        </member>
        <member name="T:System.Windows.Controls.TimeParser">
            <summary>
            Converts the specified string representation of a time to its DateTime 
            equivalent.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.TimeParser.TryParse(System.String,System.Globalization.CultureInfo,System.Nullable{System.DateTime}@)">
            <summary>
            Converts the specified string representation of a time to its DateTime 
            equivalent and returns a value that indicates whether the conversion 
            succeeded.
            </summary>
            <param name="text">The text that should be parsed.</param>
            <param name="culture">The culture being used.</param>
            <param name="result">The parsed DateTime.</param>
            <returns>True if the parse was successful, false if it was not.</returns>
        </member>
        <member name="T:System.Windows.Controls.TimeParserCollection">
            <summary>
            Represents a collection of TimeParser objects.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.TimeParserCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimeParserCollection"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeParserCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimeParserCollection"/> class.
            </summary>
            <param name="parsers">A sequence of TimeParser objects that will
            be copied into this collection.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeParserCollection.TryParse(System.String,System.Globalization.CultureInfo,System.Nullable{System.DateTime}@)">
            <summary>
            Tries to parse a string to a DateTime.
            </summary>
            <param name="text">The text that should be parsed.</param>
            <param name="culture">The culture being used.</param>
            <param name="result">The parsed DateTime.</param>
            <returns>True if the parse was successful, false if it was not.</returns>
        </member>
        <member name="T:System.Windows.Controls.CatchallTimeParser">
            <summary>
            TimeParser that will allow very loose time to be entered. It will try
            to parse the first two numbers as hours and the second two numbers as 
            minutes, and will not care about other characters, such as designators,
            separators or non-time related characters.
            If the first character is bigger than 2, it will parse only the first 
            character as an hour and will use the second two characters for minutes.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.CatchallTimeParser.exp">
            <summary>
            Expression used to parse.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CatchallTimeParser.TryParse(System.String,System.Globalization.CultureInfo,System.Nullable{System.DateTime}@)">
            <summary>
            Tries to parse a string to a DateTime.
            </summary>
            <param name="text">The text that should be parsed.</param>
            <param name="culture">The culture being used.</param>
            <param name="result">The parsed DateTime.</param>
            <returns>
            True if the parse was successful, false if it was not.
            </returns>
            <remarks>The parsing is culture insensitive. A user can type 8p to
            indicate 20:00:00, or 20.</remarks>
        </member>
        <member name="T:System.Windows.Controls.TimePicker">
            <summary>
            Represents a control that allows the user to select a time.
            </summary>
            <remarks>TimeInput supports only the following formatting characters:
            'h', 'm', 's', 'H', 't'. All other characters are filtered out:
            'd', 'f', 'F', 'g', 'K', 'M', 'y', 'z'.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.ElementTimeUpDownName">
            <summary>
            The name for the TimeUpDown element.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.TimeUpDownStyleName">
            <summary>
            The name for the TimeUpDownStyle element.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.ElementPopupPlaceHolderPartName">
            <summary>
            The name for the PopupPlaceHolder element.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._timeUpDownPart">
            <summary>
            BackingField for TimeUpDownPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._popupPlaceHolderPart">
            <summary>
            BackingField for PopupPlaceHolderPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._timeCoercionHelper">
            <summary>
            Helper class that centralizes the coercion logic across all 
            TimeInput controls.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._popupSessionValueCache">
            <summary>
            Cache of the value before we open a popup.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._isInitialized">
            <summary>
            Indicates that the control has finished initialization.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._ignoreValueChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValueProperty property changed handler.
            </summary>
            <param name="d">UpDownBase whose Value changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.MinimumProperty">
            <summary>
            Identifies the Minimum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnMinimumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Minimum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnMinimumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Minimum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Minimum property.</param>
            <param name="newValue">New value of the Minimum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.MaximumProperty">
            <summary>
            Identifies the Maximum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnMaximumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Maximum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnMaximumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Maximum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Maximum property.</param>
            <param name="newValue">New value of the Maximum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.TimeUpDownStyleProperty">
            <summary>
            Identifies the TimeUpDownStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnTimeUpDownStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeUpDownStyleProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its TimeUpDownStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.SpinnerStyleProperty">
            <summary>
            Identifies the SpinnerStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnSpinnerStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SpinnerStyleProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its SpinnerStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.TimeParsersProperty">
            <summary>
            Identifies the TimeParsers dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnTimeParsersPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeParsersProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeParsers.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.FormatProperty">
            <summary>
            Identifies the Format dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            FormatProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its Format.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._actualFormat">
            <summary>
            BackingField for ActualFormat.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.CultureProperty">
            <summary>
            Identifies the Culture dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnCulturePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CultureProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Culture.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.TimeGlobalizationInfoProperty">
            <summary>
            Identifies the TimeGlobalizationInfo dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnTimeGlobalizationInfoPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeGlobalizationInfoProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeGlobalizationInfo.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._actualTimeGlobalizationInfo">
            <summary>
            BackingField for ActualTimeGlobalizationInfo.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.PopupProperty">
            <summary>
            Identifies the Popup dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnPopupPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its Popup.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.PopupTemplateProperty">
            <summary>
            Identifies the PopupTemplate dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnPopupTemplatePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupTemplateProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupTemplate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._instantiatedPopupFromTemplate">
            <summary>
            BackingField for InstantiatedPopupFromTemplate.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.PopupSecondsIntervalProperty">
            <summary>
            Identifies the PopupSecondsInterval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnPopupSecondsIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupSecondsIntervalProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupSecondsInterval.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._isPopupSecondsInitialized">
            <summary>
            Determines whether PopupSeconds has been changed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.PopupMinutesIntervalProperty">
            <summary>
            Identifies the PopupMinutesInterval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnPopupMinutesIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupMinutesIntervalProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupMinutesInterval.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._isPopupMinutesInitialized">
            <summary>
            Determines whether PopupMinutes has been changed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.PopupTimeSelectionModeProperty">
            <summary>
            Identifies the PopupTimeSelectionMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnPopupTimeSelectionModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupTimeSelectionModeProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupTimeSelectionMode.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimePicker"/> 
            class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnApplyTemplate">
            <summary>
            Builds the visual tree for the TimePicker control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.GetSelectedValue">
            <summary>
            Gets the selected time  represented in the control.
            </summary>
            <returns>The value that is picked.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanging event when Value property is changing.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.TimeUpDownValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Reacts to a change in value in TimeUpDown.
            </summary>
            <param name="sender">The TimeUpDown that changed its value.</param>
            <param name="e">The instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.TimeUpDownParseError(System.Object,System.Windows.Controls.UpDownParseErrorEventArgs)">
            <summary>
            Raised when TimeUpDown raises this event.
            </summary>
            <param name="sender">The TimeUpDown instance raising this event.</param>
            <param name="e">The instance containing the event data.</param>
            <remarks>Here to make it easier to access
            these events.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.TimeUpDownParsing(System.Object,System.Windows.Controls.UpDownParsingEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raised when TimeUpDown raises this event.
            </summary>
            <param name="sender">The TimeUpDown instance raising this event.</param>
            <param name="e">The instance containing the event data.</param>
            <remarks>Here to make it easier to access
            these events.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnDropDownOpened(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Raises an DropDownOpened event when the IsDropDownOpen property
            changed from false to true.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnDropDownClosed(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Raises an DropDownClosed event when the IsDropDownOpen property
            changed from true to false.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.PopupValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Reacts to a Value change in a popup.
            </summary>
            <param name="sender">The Popup that raised a ValueChange.</param>
            <param name="e">The  instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.PopupCommitted(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The Popup has been committed. Will close the popup.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.PopupCanceled(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The Popup has been canceled. Will close the popup,
            and set the value back to its initial value.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.RegisterPopup(System.Windows.Controls.TimePickerPopup)">
            <summary>
            Called when a new Popup is set.
            </summary>
            <param name="popup">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.UnregisterPopup(System.Windows.Controls.TimePickerPopup)">
            <summary>
            Unregisters the popup.
            </summary>
            <param name="popup">The old value.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.InstantiatePopupFromTemplate">
            <summary>
            Instantiates the template.
            </summary>
            <remarks>Will only use template if Popup is not set.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.PropagateNewValue">
            <summary>
            Propagates the new value to components that are part of
            our template.
            </summary>
            <remarks>Workaround for SL2 inability to do twoway 
            templatebinding. Should remove in SL3.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnCreateAutomationPeer">
            <summary>
            Returns a PickerAutomationPeer for use by the Silverlight 
            automation infrastructure.
            </summary>
            <returns>A PickerAutomationPeer for the Picker object.</returns>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.TimeUpDownPart">
            <summary>
            Gets or sets the time up down part.
            </summary>
            <value>The time up down part.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.PopupPlaceHolderPart">
            <summary>
            Gets or sets the popup place holder part.
            </summary>
            <remarks>This is the ContentControl that is used to display
            Popups.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Value">
            <summary>
            Gets or sets the currently selected time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Minimum">
            <summary>
            Gets or sets the minimum time considered valid by the control.
            </summary>
            <remarks>Setting the minimum property is applicable for the following 
            features: Selecting a value through a popup, Parsing a new value from 
            the textbox, spinning a new value and programmatically specifying a value.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Maximum">
            <summary>
            Gets or sets the maximum time considered valid by the control.
            </summary>
            <remarks>Setting the Maximum property is applicable for the following 
            features: Selecting a value through a popup, Parsing a new value 
            from the textbox, spinning a new value and programmatically specifying 
            a value. </remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.TimeUpDownStyle">
            <summary>
            Gets or sets the Style applied to the TimeUpDown portion of the TimePicker 
            control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.SpinnerStyle">
            <summary>
            Gets or sets the Style that is applied to the spinner.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.TimeParsers">
            <summary>
            Gets or sets a collection of TimeParsers that are used when parsing 
            text to time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.ActualTimeParsers">
            <summary>
            Gets the actual TimeParsers that will be used for parsing by the control.
            </summary>
            <remarks>Includes the TimeParsers introduced in the TimeGlobalizationInfo.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Format">
            <summary>
            Gets or sets the Format used by the control. From XAML Use either 
            "Short", "Long" or a custom format. 
            Custom formats can only contain "H", "h", "m", "s" or "t". 
            For example: use 'hh:mm:ss' is used to format time as "13:45:30".
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.ActualFormat">
            <summary>
            Gets the actual format that will be used to display Time in the 
            TimePicker. If no format is specified, ShortTimeFormat is used.
            </summary>
            <value>The actual display format.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Culture">
            <summary>
            Gets or sets the culture that will be used by the control for 
            parsing and formatting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.ActualCulture">
            <summary>
            Gets the actual culture used by the control for formatting and parsing.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.TimeGlobalizationInfo">
            <summary>
            Gets or sets the strategy object that determines how the control 
            interacts with DateTime and CultureInfo. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.ActualTimeGlobalizationInfo">
            <summary>
            Gets the actual TimeGlobalization info used by the control.
            </summary>
            <remarks>If TimeGlobalizationInfo is not set, will return 
            default TimeGlobalizationInfo instance.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.ActualTimePickerPopup">
            <summary>
            Gets the TimePickerPopup that is used by the TimePicker. This
            can be either a popup created from the PopupTemplate, or a popup
            set directly to the Popup property. When both are set, the Popup
            property will win.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Popup">
            <summary>
            Gets or sets the TimePickerPopup that will be shown to the user by the 
            TimePicker control. This property may not be styled. To style a 
            TimePicker with a Popup, please use the PopupTemplate property.
            When both PopupTemplate and Popup are set, Popup will be used.
            </summary>
            <remark>This property might be null, since a template can be used.</remark>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.PopupTemplate">
            <summary>
            Gets or sets the template used as Popup. A Popup can also be set
            directly on the Popup property. When both PopupTemplate and Popup
            are set, Popup will be used. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.PopupSecondsInterval">
            <summary>
            Gets or sets the seconds interval between time values allowed by 
            the TimePickerPopup.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.PopupMinutesInterval">
            <summary>
            Gets or sets the minutes interval between time values allowed by the 
            TimePickerPopup.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.PopupTimeSelectionMode">
            <summary>
            Gets or sets the whether the TimePickerPopup supports selecting 
            designators and/or seconds.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePicker.ValueChanging">
            <summary>
            Occurs when Value property is changing.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePicker.ValueChanged">
            <summary>
            Occurs when Value property has changed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePicker.Parsing">
            <summary>
            Occurs when a value is being parsed and allows custom parsing.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePicker.ParseError">
            <summary>
            Occurs when there is an error in parsing user input and allows adding parsing logic.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.System#Windows#Controls#ITimeInput#Value">
            <summary>
            Gets or sets the Value property.
            </summary>
            <value></value>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.System#Windows#Controls#ITimeInput#Minimum">
            <summary>
            Gets or sets the minimum time.
            </summary>
            <value>The minimum time.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.System#Windows#Controls#ITimeInput#Maximum">
            <summary>
            Gets or sets the maximum time.
            </summary>
            <value>The maximum time.</value>
        </member>
        <member name="T:System.Windows.Controls.TimeTypeConverter">
            <summary>
            Allows time to be set from xaml.
            </summary>
            <QualityBand>Preview</QualityBand>
            <remarks>This converter is used by xaml and thus uses the 
            English formats.</remarks>
        </member>
        <member name="F:System.Windows.Controls.TimeTypeConverter._timeFormats">
            <summary>
            BackingField for the TimeFormats being used.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeTypeConverter._dateFormats">
            <summary>
            BackingField for the DateFormats being used.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert from 
            the specified type descriptor context.
            </summary>
            <param name="typeDescriptorContext">The type descriptor context.</param>
            <param name="sourceType">Type of the source.</param>
            <returns>
            	<c>True</c> if this instance can convert from the specified type 
            descriptor context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert to the specified 
            type descriptor context.
            </summary>
            <param name="typeDescriptorContext">The type descriptor context.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns>
            	<c>True</c> if this instance can convert to the specified type 
            descriptor context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts instances of other data types into instances of DateTime that
            represent a time.
            </summary>
            <param name="typeDescriptorContext">
            The type descriptor context.
            </param>
            <param name="cultureInfo">The culture used to convert. This culture
            is not used during conversion, but a specific set of formats is used.</param>
            <param name="source">
            The string being converted to the DateTime.
            </param>
            <returns>
            A DateTime that is the value of the conversion.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a DateTime into a string.
            </summary>
            <param name="typeDescriptorContext">
            The type descriptor context.
            </param>
            <param name="cultureInfo">The culture used to convert.</param>
            <param name="value">
            The value that is being converted to a specified type.
            </param>
            <param name="destinationType">
            The type to convert the value to.
            </param>
            <returns>
            The value of the conversion to the specified type.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.TimeUpDown">
            <summary>
            Represents a control that uses a spinner and textbox to allow a user to 
            input time.
            </summary>
            <remarks>TimeInput supports only the following formatting characters:
            'h', 'm', 's', 'H', 't'. All other characters are filtered out:
            'd', 'f', 'F', 'g', 'K', 'M', 'y', 'z'.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeHintFormat">
            <summary>
            StringFormat used in the TimeHint.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.ElementTimeHintPopupName">
            <summary>
            The name for the TimeHint element.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.GroupTimeHint">
            <summary>
            The group name "TimeHintStates".
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.GroupTimeParsingStates">
            <summary>
            The group name "ParsingStates".
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeHintOpenedUpStateName">
            <summary>
            The state name "TimeHintOpenedUp" indicates that the hint is being
            shown on the top of the control.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeHintOpenedDownStateName">
            <summary>
            The state name "TimeHintOpenedDown" indicates that the hint is
            being shown at the bottom of the control.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeHintClosedStateName">
            <summary>
            The state name "TimeHintClosed" indicates that no hint is being 
            shown.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.ValidTimeStateName">
            <summary>
            The state name "ValidTime" that indicates that currently the textbox
            text parses to a valid Time.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.InvalidTimeStateName">
            <summary>
            The state name "InvalidTime" that indicates that currently the textbox 
            text does not allow parsing.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.EmptyTimeStateName">
            <summary>
            The state name "EmptyTime" that indicates that currently the textbox
            text would parse to a Null.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._timeHintPopupPart">
            <summary>
            BackingField for TimeHintPopupPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._timeCoercionHelper">
            <summary>
            Helper class that centralizes the coercion logic across all 
            TimeInput controls.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._lastParsedText">
            <summary>
            The text that was last parsed. Used in comparisons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._timeHintExpandDirection">
            <summary>
            The direction in which the TimeHint will expand.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._isShowTimeHint">
            <summary>
            BackingField for IsShowTimeHint.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._ignoreValueChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.MinimumProperty">
            <summary>
            Identifies the Minimum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMinimumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Minimum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMinimumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Minimum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Minimum property.</param>
            <param name="newValue">New value of the Minimum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.MaximumProperty">
            <summary>
            Identifies the Maximum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMaximumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Maximum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMaximumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Maximum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Maximum property.</param>
            <param name="newValue">New value of the Maximum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeParsersProperty">
            <summary>
            Identifies the TimeParsers dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnTimeParsersPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeParsersProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeParsers.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.FormatProperty">
            <summary>
            Identifies the Format dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            FormatProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its Format.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._actualFormat">
            <summary>
            BackingField for ActualFormat.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.CultureProperty">
            <summary>
            Identifies the Culture dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnCulturePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CultureProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Culture.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeGlobalizationInfoProperty">
            <summary>
            Identifies the TimeGlobalizationInfo dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnTimeGlobalizationInfoPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeGlobalizationInfoProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeGlobalizationInfo.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._actualTimeGlobalizationInfo">
            <summary>
            BackingField for ActualTimeGlobalizationInfo.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.IsCyclicProperty">
            <summary>
            Identifies the IsCyclic dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnIsCyclicPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsCyclicProperty property changed handler.
            </summary>
            <param name="d">DomainUpDown instance that changed its IsCyclic value.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeHintContentProperty">
            <summary>
            Identifies the TimeHintContent dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnTimeHintContentPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeHintContentProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeHintContent.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._timeHintDate">
            <summary>
            Represents the formatted DateTime that is used in the TimeHint hint.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._isIgnoreSelectionOfAllText">
            <summary>
            Indicates whether the control should not proceed with selecting all
            text.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._allowHintContentChange">
            <summary>
            BackingField for AllowHintContentChange.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimeUpDown"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnApplyTemplate">
            <summary>
            Builds the visual tree for the TimeUpDown control when a new
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Provides handling for the ValueChanging event.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.ParseValue(System.String)">
            <summary>
            Called by ApplyValue to parse user input.
            </summary>
            <param name="text">User input.</param>
            <returns>Value parsed from user input.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.FormatValue">
            <summary>
            Renders the value property into the textbox text.
            </summary>
            <returns>Formatted Value.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnIncrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnDecrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.SetValidSpinDirection">
            <summary>
            Sets the valid spin direction based on the position of the caret,
            the value and the minimum and maximum.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.SelectionChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the SelectionChanged event from TextBox.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.InputChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Handles the TextChanged event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.TextChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.DetermineHint">
            <summary>
            Determines the value of the hint property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnTimeHintMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the Left Mouse Button Down event of the TimeHint.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <param name="e">Key event args.</param>
            <remarks>
            Only support up and down arrow keys.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the GotFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the MouseLeftButtonDown event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the MouseLeftButtonUp event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.SelectAllText">
            <summary>
            Selects all text.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnTextLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for Text template part's LostFocus event.
            We use this event to compare current TextBox.Text with cached previous
            value to decide whether user has typed in a new value.
            </summary>
            <param name="sender">The Text template part.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.UpdateVisualState(System.Boolean)">
            <summary>
            Update current visual state.
            </summary>
            <param name="useTransitions">True to use transitions when updating the visual state, false to
            snap directly to the new visual state.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnCreateAutomationPeer">
            <summary>
            When implemented in a derived class, returns class-specific 
            <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementations 
            for the Silverlight automation infrastructure.
            </summary>
            <returns>
            The class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> 
            subclass to return.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.TimeHintPopupPart">
            <summary>
            Gets or sets the time hint popup part.
            </summary>
            <value>The time hint popup part.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.IsShowTimeHint">
            <summary>
            Gets or sets a value indicating whether this instance is showing a
            TimeHint visual.
            </summary>
            <value><c>True</c> if this instance is showing the TimeHint; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualMinimum">
            <summary>
            Gets the actual minimum. If a Minimum is set, use that, otherwise
            use the start of the day.
            </summary>        
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualMaximum">
            <summary>
            Gets the actual maximum. If a Maximum is set, use that, otherwise
            use the end of the day.
            </summary>
            <value>The actual maximum.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.Value">
            <summary>
            Gets or sets the currently selected time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.Minimum">
            <summary>
            Gets or sets the minimum time considered valid by the control.
            </summary>
            <remarks>Setting the minimum property is applicable for the following 
            features: Parsing a new value from the textbox, spinning a new value 
            and programmatically specifying a value.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.Maximum">
            <summary>
            Gets or sets the maximum time considered valid by the control.
            </summary>
            <remarks>Setting the Maximum property is applicable for the following 
            features: Parsing a new value from the textbox, spinning a new value 
            and programmatically specifying a value. </remarks>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.TimeParsers">
            <summary>
            Gets or sets a collection of TimeParsers that are used when parsing 
            text to time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualTimeParsers">
            <summary>
            Gets the actual TimeParsers that will be used for parsing by the control.
            </summary>
            <remarks>Includes the TimeParsers introduced in the TimeGlobalizationInfo.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.Format">
            <summary>
            Gets or sets the Format used by the control. 
            From XAML Use either "Short", "Long" or a custom format. 
            Custom formats can only contain "H", "h", "m", "s" or "t". 
            For example: use 'hh:mm:ss' is used to format time as "13:45:30".
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualFormat">
            <summary>
            Gets the actual format that will be used to display Time  in the 
            TimeUpDown. If no format is specified, ShortTimeFormat is used.
            </summary>
            <value>The actual display format.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.Culture">
            <summary>
            Gets or sets the culture that will be used by the control for 
            parsing and formatting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualCulture">
            <summary>
            Gets the actual culture used by the control for formatting and parsing.
            </summary>
            <value>The actual culture.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.TimeGlobalizationInfo">
            <summary>
            Gets or sets the strategy object that determines how the control 
            interacts with DateTime and CultureInfo.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualTimeGlobalizationInfo">
            <summary>
            Gets the actual TimeGlobalization info used by the control.
            </summary>
            <remarks>If TimeGlobalizationInfo is not set, will return 
            default TimeGlobalizationInfo instance.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.IsCyclic">
            <summary>
            Gets or sets a value indicating whether the TimeUpDown control will 
            cycle through values when trying to spin the first and last item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.TimeHintContent">
            <summary>
            Gets the text used to guide the user when entering time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.System#Windows#Controls#ITimeInput#Value">
            <summary>
            Gets or sets the Value property.
            </summary>
            <value></value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.System#Windows#Controls#ITimeInput#Minimum">
            <summary>
            Gets or sets the minimum time.
            </summary>
            <value>The minimum time.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.System#Windows#Controls#ITimeInput#Maximum">
            <summary>
            Gets or sets the maximum time.
            </summary>
            <value>The maximum time.</value>
        </member>
        <member name="T:System.Windows.Controls.UpDownParseErrorEventArgs">
            <summary>
            Provides data for the UpDownBase.ParseError event.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.UpDownParseErrorEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the UpDownParseErrorEventArgs class.
            </summary>
            <param name="text">The text that caused the parsing error.</param>
            <param name="error">The exception thrown by ParseValue method.</param>
        </member>
        <member name="P:System.Windows.Controls.UpDownParseErrorEventArgs.Text">
            <summary>
            Gets the original string value that failed to parse.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownParseErrorEventArgs.Error">
            <summary>
            Gets the exception that was raised during the initial parsing 
            attempt.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownParseErrorEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the event is handled.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.UpDownParsingEventArgs`1">
            <summary>
            Provides data for the UpDownBase.Parsing event.
            </summary>
            <typeparam name="T">Type of Value property.</typeparam>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.UpDownParsingEventArgs`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:System.Windows.Controls.UpDownParsingEventArgs`1"/> class.
            </summary>
            <param name="text">The text that will be parsed.</param>
        </member>
        <member name="P:System.Windows.Controls.UpDownParsingEventArgs`1.Text">
            <summary>
            Gets the original string value that will be parsed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownParsingEventArgs`1.Value">
            <summary>
            Gets or sets the value to be used.
            </summary>
            <value>The parsed value.</value>
        </member>
        <member name="P:System.Windows.Controls.UpDownParsingEventArgs`1.Handled">
            <summary>
            Gets or sets a value indicating whether 
            this <see cref="T:System.Windows.Controls.UpDownParsingEventArgs`1"/> is handled.
            </summary>
            <value><c>True</c> if handled; otherwise, <c>false</c>.</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Toolkit\Mar10\Bin\System.Windows.Controls.Theming.Toolkit.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Controls.Theming.Toolkit</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Controls.Theming.ResourceNotFoundException">
            <summary>
            Exception thrown when resource is not found.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.Theming.ResourceNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the ResourceNotFoundException class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Theming.ResourceNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ResourceNotFoundException class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:System.Windows.Controls.Theming.ResourceNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ResourceNotFoundException class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:System.Windows.Controls.Theming.ResourceNotFoundException.#ctor(System.String,System.Uri)">
            <summary>
            Initializes a new instance of the ResourceNotFoundException class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="uri">The uri of the resource.</param>
        </member>
        <member name="M:System.Windows.Controls.Theming.ResourceNotFoundException.#ctor(System.String,System.Uri,System.Exception)">
            <summary>
            Initializes a new instance of the ResourceNotFoundException class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="uri">The uri of the resource.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:System.Windows.Controls.Theming.ResourceNotFoundException.Uri">
            <summary>
            Gets the uri of the resource that could not be found.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Theming.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Theming.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Theming.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Theming.Properties.Resources.ResourceParser_CanOnlyParseXAMLFilesWithResourceDictionaryAsTheRootElement">
            <summary>
              Looks up a localized string similar to Cannot parse XAML files which do not have a ResourceDictionary as the root element..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Theming.Properties.Resources.Theme_ResourceNotFound">
            <summary>
              Looks up a localized string similar to Resource not found at &apos;{0}&apos;..
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Theming.ResourceParser">
            <summary>
            Parse streams containing theme resources.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Theming.ResourceParser.OldXamlNamespace">
            <summary>
            The default old XAML namespace.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Theming.ResourceParser.NewXamlNamespace">
            <summary>
            The default new XAML namespace.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Theming.ResourceParser.StyleXaml">
            <summary>
            The XAML markup for an empty Style declaration.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Theming.ResourceParser.StyleXamlWithPrefix">
            <summary>
            The XAML markup for an empty Style declaration with a TargetType
            using an XML prefix.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Theming.ResourceParser.IsXamlElement``1(System.String,System.String)">
            <summary>
            Determines whether an XML element is a type in the core Silverlight
            namespace.
            </summary>
            <typeparam name="T">The type to check for.</typeparam>
            <param name="name">The name of the element.</param>
            <param name="ns">The namespace of the element.</param>
            <returns>
            A value indicating whether an the element is the Silverlight type.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.Theming.ResourceParser.Parse(System.IO.Stream,System.Boolean)">
            <summary>
            Retrieves a resource dictionary from an input stream.
            </summary>
            <param name="stream">
            A stream containing the XAML for a  resource dictionary.
            </param>
            <param name="checkTypes">
            A value indicating whether styles in the resource dictionary should
            be filtered to types that have been loaded by the application.
            </param>
            <returns>A resource dictionary.</returns>
        </member>
        <member name="M:System.Windows.Controls.Theming.ResourceParser.ParseResources(System.Xml.XmlReader,System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Transform a ResourceDictionary.
            </summary>
            <param name="reader">Reader with the resources.</param>
            <param name="writer">Writer with the transformed resources.</param>
            <param name="checkTypes">
            A value indicating whether styles in the resource dictionary should
            be filtered to types that have been loaded by the application.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Theming.ResourceParser.ParseElement(System.Xml.XmlReader,System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Process an element's opening tag.
            </summary>
            <param name="reader">Reader with the resources.</param>
            <param name="writer">Writer with the transformed resources.</param>
            <param name="checkTypes">
            A value indicating whether styles in the resource dictionary should
            be filtered to types that have been loaded by the application.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Theming.ResourceParser.IsStyleTargetTypeLoaded(System.Xml.XmlReader)">
            <summary>
            Determine if the current element in the reader represents a Style
            whose TargetType has been loaded in the assembly.
            </summary>
            <param name="reader">Reader with the resources.</param>
            <returns>
            A value indicating whether the element is not a style or it is a
            Style with a TargetType loaded in this assembly.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.Theming.Theme">
            <summary>
            Implicitly applies a set of styles to all descendent FrameworkElements.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.Theming.Theme.#ctor">
            <summary>
            Initializes a new instance of the Theme class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Theming.Theme.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Initializes a new instance of the Theme class.
            </summary>
            <param name="themeAssembly">
            Assembly with the embedded resource containing the theme to apply.
            </param>
            <param name="themeResourceName">
            Name of the embedded resource containing the theme to apply.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Theming.Theme.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the Theme class.
            </summary>
            <param name="themeResourceStream">
            A resource stream containing the theme to apply.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Theming.Theme.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the Theme class.
            </summary>
            <param name="themeUri">URI of a ResourceDictionary containing a theme.</param>
        </member>
        <member name="M:System.Windows.Controls.Theming.Theme.LoadThemeResources(System.IO.Stream)">
            <summary>
            Load a theme from a Stream.
            </summary>
            <param name="stream">A Stream containing the theme to load.</param>
            <returns>ResourceDictionary corresponding to the loaded theme.</returns>
        </member>
        <member name="M:System.Windows.Controls.Theming.Theme.UnloadThemeResources(System.Windows.ResourceDictionary)">
            <summary>
            Unloads the specified theme ResourceDictionary.
            </summary>
            <param name="theme">ResourceDictionary to unload.</param>
        </member>
        <member name="F:System.Windows.Controls.Theming.Theme.ThemeUriProperty">
            <summary>
            Identifies the ThemeUri DependencyProperty.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Theming.Theme.OnThemeUriPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the ThemeUri DependencyProperty.
            </summary>
            <param name="o">DependencyObject that changed.</param>
            <param name="e">Event data for the DependencyPropertyChangedEvent.</param>
        </member>
        <member name="M:System.Windows.Controls.Theming.Theme.OnThemeUriPropertyChanged(System.Uri,System.Uri)">
            <summary>
            Handles changes to the ThemeUri property.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.Theming.Theme.LoadAndApplyThemeFromStream(System.IO.Stream)">
            <summary>
            Loads and applies a theme from a Stream.
            </summary>
            <param name="stream">Stream containing the theme ResourceDictionary.</param>
        </member>
        <member name="P:System.Windows.Controls.Theming.Theme.ThemeResources">
            <summary>
            Gets the ResourceDictionary corresponding to current theme.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Theming.Theme.ThemeUri">
            <summary>
            Gets or sets the URI of a ResourceDictionary containing a theme.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Toolkit\Mar10\Themes\System.Windows.Controls.Theming.WhistlerBlue.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <assembly>
    <name>System.Windows.Controls.Theming.WhistlerBlue</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.Windows.Controls.Theming.WhistlerBlue.dll</relpath>
    <extension downloadUri="System.Windows.Controls.Theming.WhistlerBlue.zip" />
  </assembly>

</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Toolkit\Mar10\Themes\System.Windows.Controls.Theming.SystemColors.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <assembly>
    <name>System.Windows.Controls.Theming.SystemColors</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.Windows.Controls.Theming.SystemColors.dll</relpath>
    <extension downloadUri="System.Windows.Controls.Theming.SystemColors.zip" />
  </assembly>

</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Toolkit\Mar10\Themes\System.Windows.Controls.Theming.TwilightBlue.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <assembly>
    <name>System.Windows.Controls.Theming.TwilightBlue</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.Windows.Controls.Theming.TwilightBlue.dll</relpath>
    <extension downloadUri="System.Windows.Controls.Theming.TwilightBlue.zip" />
  </assembly>

</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Toolkit\Mar10\Bin\System.Windows.Controls.DataVisualization.Toolkit.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Controls.DataVisualization.Toolkit</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Controls.CollectionHelper">
            <summary>
            A set of extension methods for manipulating collections.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.CollectionHelper.IsReadOnly(System.Collections.IEnumerable)">
            <summary>
            Returns a value indicating whether a collection is read-only.
            </summary>
            <param name="collection">The collection to examine.</param>
            <returns>A value indicating whether a collection is read-only.</returns>
        </member>
        <member name="M:System.Windows.Controls.CollectionHelper.CanInsert(System.Collections.IEnumerable,System.Object)">
            <summary>
            Returns a value Indicating whether an item can be inserted in a 
            collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="item">The item to be inserted.</param>
            <returns>A value Indicating whether an item can be inserted in a 
            collection.</returns>
        </member>
        <member name="M:System.Windows.Controls.CollectionHelper.Insert(System.Collections.IEnumerable,System.Int32,System.Object)">
            <summary>
            Inserts an item into the collection at an index.
            </summary>
            <param name="collection">The collection.</param>
            <param name="index">The index at which to insert the item.</param> 
            <param name="item">The item to be inserted.</param>
        </member>
        <member name="M:System.Windows.Controls.CollectionHelper.Count(System.Collections.IEnumerable)">
            <summary>
            Gets the number of items in the collection.
            </summary>
            <param name="collection">The collection.</param>
            <returns>The number of items in the collection.</returns>
        </member>
        <member name="M:System.Windows.Controls.CollectionHelper.Add(System.Collections.IEnumerable,System.Object)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:System.Windows.Controls.CollectionHelper.Remove(System.Collections.IEnumerable,System.Object)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="item">The item to be removed.</param>
        </member>
        <member name="M:System.Windows.Controls.CollectionHelper.RemoveAt(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Removes an item at a given index from the collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="index">The index of the item to be removed.</param>
        </member>
        <member name="T:System.Windows.Controls.DesignerProperties">
            <summary>
            Provides a custom implementation of DesignerProperties.GetIsInDesignMode
            to work around an issue.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DesignerProperties.GetIsInDesignMode(System.Windows.DependencyObject)">
            <summary>
            Returns whether the control is in design mode (running under Blend
            or Visual Studio).
            </summary>
            <param name="element">The element from which the property value is
            read.</param>
            <returns>True if in design mode.</returns>
        </member>
        <member name="F:System.Windows.Controls.DesignerProperties._isInDesignMode">
            <summary>
            Stores the computed InDesignMode value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.EnumerableExtensions">
            <summary>
            A set of extension methods for the sequence class.
            </summary>;dsf
        </member>
        <member name="M:System.Windows.Controls.EnumerableExtensions.Iterate``1(``0,System.Func{``0,``0})">
            <summary>
            Produces a sequence of items using a seed value and iteration 
            method.
            </summary>
            <typeparam name="T">The type of the sequence.</typeparam>
            <param name="value">The initial value.</param>
            <param name="next">The iteration function.</param>
            <returns>A sequence of items using a seed value and iteration 
            method.</returns>
        </member>
        <member name="M:System.Windows.Controls.EnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Prepend an item to a sequence.
            </summary>
            <typeparam name="T">The type of the sequence.</typeparam>
            <param name="that">The sequence to append the item to.</param>
            <param name="value">The item to append to the sequence.</param>
            <returns>A new sequence.</returns>
        </member>
        <member name="M:System.Windows.Controls.EnumerableExtensions.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Accepts two sequences and applies a function to the corresponding 
            values in the two sequences.
            </summary>
            <typeparam name="T0">The type of the first sequence.</typeparam>
            <typeparam name="T1">The type of the second sequence.</typeparam>
            <typeparam name="R">The return type of the function.</typeparam>
            <param name="enumerable0">The first sequence.</param>
            <param name="enumerable1">The second sequence.</param>
            <param name="func">The function to apply to the corresponding values
            from the two sequences.</param>
            <returns>A sequence of transformed values from both sequences.</returns>
        </member>
        <member name="M:System.Windows.Controls.EnumerableExtensions.MaxOrNull``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.IComparable})">
            <summary>
            Returns the maximum value in the stream based on the result of a
            project function.
            </summary>
            <typeparam name="T">The stream type.</typeparam>
            <param name="that">The stream.</param>
            <param name="projectionFunction">The function that transforms the
            item.</param>
            <returns>The maximum value or null.</returns>
        </member>
        <member name="M:System.Windows.Controls.EnumerableExtensions.MaxOrNullable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the maximum value or null if sequence is empty.
            </summary>
            <typeparam name="T">The type of the sequence.</typeparam>
            <param name="that">The sequence to retrieve the maximum value from.
            </param>
            <returns>The maximum value or null.</returns>
        </member>
        <member name="M:System.Windows.Controls.EnumerableExtensions.MinOrNullable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the minimum value or null if sequence is empty.
            </summary>
            <typeparam name="T">The type of the sequence.</typeparam>
            <param name="that">The sequence to retrieve the minimum value from.
            </param>
            <returns>The minimum value or null.</returns>
        </member>
        <member name="T:System.Windows.Controls.WeakEventListener`3">
            <summary>
            Implements a weak event listener that allows the owner to be garbage
            collected if its only remaining link is an event handler.
            </summary>
            <typeparam name="TInstance">Type of instance listening for the event.</typeparam>
            <typeparam name="TSource">Type of source for the event.</typeparam>
            <typeparam name="TEventArgs">Type of event arguments for the event.</typeparam>
        </member>
        <member name="F:System.Windows.Controls.WeakEventListener`3._weakInstance">
            <summary>
            WeakReference to the instance listening for the event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.#ctor(`0)">
            <summary>
            Initializes a new instances of the WeakEventListener class.
            </summary>
            <param name="instance">Instance subscribing to the event.</param>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.OnEvent(`1,`2)">
            <summary>
            Handler for the subscribed event calls OnEventAction to handle it.
            </summary>
            <param name="source">Event source.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.Detach">
            <summary>
            Detaches from the subscribed event.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.WeakEventListener`3.OnEventAction">
            <summary>
            Gets or sets the method to call when the event fires.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.WeakEventListener`3.OnDetachAction">
            <summary>
            Gets or sets the method to call when detaching from the event.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.AggregatedObservableCollection`1">
            <summary>
            Aggregated observable collection.
            </summary>
            <typeparam name="T">The type of the items in the observable collections.
            </typeparam>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.ReadOnlyObservableCollection`1">
            <summary>
            An observable collection that can only be written to by internal 
            classes.
            </summary>
            <typeparam name="T">The type of object in the observable collection.
            </typeparam>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.NoResetObservableCollection`1">
            <summary>
            An observable collection that cannot be reset.  When clear is called
            items are removed individually, giving listeners the chance to detect
            each remove event and perform operations such as unhooking event 
            handlers.
            </summary>
            <typeparam name="T">The type of item in the collection.</typeparam>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.NoResetObservableCollection`1.#ctor">
            <summary>
            Instantiates a new instance of the NoResetObservableCollection 
            class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.NoResetObservableCollection`1.ClearItems">
            <summary>
            Clears all items in the collection by removing them individually.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ReadOnlyObservableCollection`1.Mutate(System.Action{System.Windows.Controls.DataVisualization.ReadOnlyObservableCollection{`0}})">
            <summary>
            A method that mutates the collection.
            </summary>
            <param name="action">The action to mutate the collection.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ReadOnlyObservableCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes an item from the collection at an index.
            </summary>
            <param name="index">The index to remove.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ReadOnlyObservableCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Sets an item at a particular location in the collection.
            </summary>
            <param name="index">The location to set an item.</param>
            <param name="item">The item to set.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ReadOnlyObservableCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an item in the collection.
            </summary>
            <param name="index">The index at which to insert the item.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ReadOnlyObservableCollection`1.ClearItems">
            <summary>
            Clears the items from the collection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.ReadOnlyObservableCollection`1.IsMutating">
            <summary>
            Gets or sets a value indicating whether the owner is writing to the 
            collection.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.AggregatedObservableCollection`1.#ctor">
            <summary>
            Initializes a new instance of an aggregated observable collection.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.AggregatedObservableCollection`1.ChildCollectionsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Rebuilds the list if a collection changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.AggregatedObservableCollection`1.ChildCollectionCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Synchronizes the collection with changes made in a child collection.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.AggregatedObservableCollection`1.GetStartingIndexOfCollectionAtIndex(System.Int32)">
            <summary>
            Returns the starting index of a collection in the aggregate
            collection.
            </summary>
            <param name="index">The starting index of a collection.</param>
            <returns>The starting index of the collection in the aggregate 
            collection.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.AggregatedObservableCollection`1.Rebuild">
            <summary>
            Rebuild the list in the correct order when a child collection 
            changes.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.AggregatedObservableCollection`1.ChildCollections">
            <summary>
            Gets child collections of the aggregated collection.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IAnchoredToOrigin">
            <summary>
            Range axes look for this interface on series to determine whether to
            anchor the origin to the bottom or top of the screen where possible.
            </summary>
            <remarks>
            Implementing this interface ensures that value margins will not cause
            an origin to float above the bottom or top of the screen if no
            data exists below or above.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.IAnchoredToOrigin.AnchoredAxis">
            <summary>
            Gets the axis to which the data is anchored.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesDragDropTarget">
            <summary>
            A control that enabled drag and drop operations on an Chart.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesDragDropTarget.#ctor">
            <summary>
            Initializes a new instance of the DataPointSeriesDragDropTarget.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesDragDropTarget.OnContentChanged(System.Object,System.Object)">
            <summary>
            Ensures that the content property is set to a Chart object.
            </summary>
            <param name="oldContent">The old value.</param>
            <param name="newContent">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesDragDropTarget.CanAddItem(System.Windows.Controls.DataVisualization.Charting.DataPointSeries,System.Object)">
            <summary>
            Returns a value indicating whether an item can be added to the
            items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="data">The data to be added.</param>
            <returns>A value indicating whether an item can be added to the
            items control.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesDragDropTarget.GetItemCount(System.Windows.Controls.DataVisualization.Charting.DataPointSeries)">
            <summary>
            Gets the number of items in an items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <returns>The number of items in the items control.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesDragDropTarget.ContainerFromIndex(System.Windows.Controls.DataVisualization.Charting.DataPointSeries,System.Int32)">
            <summary>
            Retrieves the item container at a given index.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="index">The index at which to retrieve the container.
            </param>
            <returns>The item container at a given index.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesDragDropTarget.IndexFromContainer(System.Windows.Controls.DataVisualization.Charting.DataPointSeries,System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Retrieves the index of an item container.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="itemContainer">The item container.</param>
            <returns>The index of an item container.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesDragDropTarget.GetItemsHost(System.Windows.Controls.DataVisualization.Charting.DataPointSeries)">
            <summary>
            Retrieves the items host for a given items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <returns>The items host for a given items control.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesDragDropTarget.CanRemove(System.Windows.Controls.DataVisualization.Charting.DataPointSeries)">
            <summary>
            Returns a value indicating whether an item can be removed from the
            items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <returns>A value indicating whether an item can be removed from the
            items control.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesDragDropTarget.AddItem(System.Windows.Controls.DataVisualization.Charting.DataPointSeries,System.Object)">
            <summary>
            Adds an item to an items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="data">The data to be inserted.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesDragDropTarget.RemoveItem(System.Windows.Controls.DataVisualization.Charting.DataPointSeries,System.Object)">
            <summary>
            Removes an item from an items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="data">The data to be removed.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesDragDropTarget.InsertItem(System.Windows.Controls.DataVisualization.Charting.DataPointSeries,System.Int32,System.Object)">
            <summary>
            Inserts an item into an items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="index">The index at which to insert the item.</param>
            <param name="data">The data to be inserted.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesDragDropTarget.IsItemContainerOfItemsControl(System.Windows.Controls.DataVisualization.Charting.DataPointSeries,System.Windows.DependencyObject)">
            <summary>
            Returns a value indicating whether a container belongs to an items 
            control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="itemContainer">The item container.</param>
            <returns>A value indicating whether a container belongs to an items 
            control.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesDragDropTarget.ItemFromContainer(System.Windows.Controls.DataVisualization.Charting.DataPointSeries,System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Gets the item from an item container.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="itemContainer">The item container.</param>
            <returns>The data contained by the item container.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesDragDropTarget.GetDropTarget(Microsoft.Windows.DragEventArgs)">
            <summary>
            Detects whether an item is being dragged over a legend item and
            selects the owner series as the drop target.
            </summary>
            <param name="args">Information about the drag event.</param>
            <returns>The drop target.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesDragDropTarget.GetItemsControlAncestor(System.Windows.DependencyObject)">
            <summary>
            Retrieves the data point series that contains a dependency object.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <returns>The data point series ancestor of a given object.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesDragDropTarget.Chart">
            <summary>
            Gets the chart object.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.AreaDataPoint">
            <summary>
            Represents a data point used for an area series.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DataPoint">
            <summary>
            Represents a control that displays a data point.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.GroupCommonStates">
            <summary>
            Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.StateCommonNormal">
            <summary>
            Normal state of the Common group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.StateCommonMouseOver">
            <summary>
            MouseOver state of the Common group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.GroupSelectionStates">
            <summary>
            Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.StateSelectionUnselected">
            <summary>
            Unselected state of the Selection group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.StateSelectionSelected">
            <summary>
            Selected state of the Selection group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.GroupRevealStates">
            <summary>
            Reveal state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.StateRevealShown">
            <summary>
            Shown state of the Reveal group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.StateRevealHidden">
            <summary>
            Hidden state of the Reveal group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.IsSelectionEnabledProperty">
            <summary>
            Identifies the IsSelectionEnabled dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIsSelectionEnabledPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsSelectionEnabledProperty property changed handler.
            </summary>
            <param name="d">Control that changed its IsSelectionEnabled.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIsSelectionEnabledPropertyChanged(System.Boolean,System.Boolean)">
            <summary>
            IsSelectionEnabledProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint._isHovered">
            <summary>
            A value indicating whether the mouse is hovering over the data 
            point.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIsHoveredPropertyChanged(System.Boolean,System.Boolean)">
            <summary>
            IsHoveredProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.IsSelectedProperty">
            <summary>
            Identifies the IsSelected dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIsSelectedPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsSelectedProperty property changed handler.
            </summary>
            <param name="d">Control that changed its IsSelected.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIsSelectedPropertyChanged(System.Boolean,System.Boolean)">
            <summary>
            IsSelectedProperty property changed handler.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.ActualDependentValueProperty">
            <summary>
            Identifies the ActualDependentValue dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnActualDependentValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the ActualDependentValue property changes.
            </summary>
            <param name="d">Control that changed its ActualDependentValue.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint._isCoercingActualDependentValue">
            <summary>
            A value indicating whether the actual independent value is being
            coerced.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint._oldActualDependentValueBeforeCoercion">
            <summary>
            The preserved previous actual dependent value before coercion.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnActualDependentValuePropertyChanged(System.IComparable,System.IComparable)">
            <summary>
            Called when the value of the ActualDependentValue property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.DependentValueProperty">
            <summary>
            Identifies the DependentValue dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnDependentValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the DependentValue property changes.
            </summary>
            <param name="d">Control that changed its DependentValue.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnDependentValuePropertyChanged(System.IComparable,System.IComparable)">
            <summary>
            Called when the DependentValue property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.DependentValueStringFormatProperty">
            <summary>
            Identifies the DependentValueStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnDependentValueStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when DependentValueStringFormat property changes.
            </summary>
            <param name="d">Control that changed its DependentValueStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnDependentValueStringFormatPropertyChanged(System.String,System.String)">
            <summary>
            Called when DependentValueStringFormat property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.FormattedDependentValueProperty">
            <summary>
            Identifies the FormattedDependentValue dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.FormattedIndependentValueProperty">
            <summary>
            Identifies the FormattedIndependentValue dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.IndependentValueProperty">
            <summary>
            Identifies the IndependentValue dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIndependentValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the IndependentValue property changes.
            </summary>
            <param name="d">Control that changed its IndependentValue.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIndependentValuePropertyChanged(System.Object,System.Object)">
            <summary>
            Called when the IndependentValue property changes.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.IndependentValueStringFormatProperty">
            <summary>
            Identifies the IndependentValueStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIndependentValueStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the IndependentValueStringFormat property changes.
            </summary>
            <param name="d">Control that changed its IndependentValueStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIndependentValueStringFormatPropertyChanged(System.String,System.String)">
            <summary>
            Called when the value of the IndependentValueStringFormat property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint._isCoercingActualIndependentValue">
            <summary>
            A value indicating whether the actual independent value is being
            coerced.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint._oldActualIndependentValueBeforeCoercion">
            <summary>
            The preserved previous actual dependent value before coercion.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.ActualIndependentValueProperty">
            <summary>
            Identifies the ActualIndependentValue dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnActualIndependentValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the ActualIndependentValue property changes.
            </summary>
            <param name="d">Control that changed its ActualIndependentValue.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnActualIndependentValuePropertyChanged(System.Object,System.Object)">
            <summary>
            Called when the ActualIndependentValue property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.StateProperty">
            <summary>
            Identifies the State dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnStatePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the State property changes.
            </summary>
            <param name="d">Control that changed its State.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnStatePropertyChanged(System.Windows.Controls.DataVisualization.Charting.DataPointState,System.Windows.Controls.DataVisualization.Charting.DataPointState)">
            <summary>
            Called when the value of the State property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint._haveStateRevealShown">
            <summary>
            Tracks whether the Reveal/Shown VisualState is available.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint._haveStateRevealHidden">
            <summary>
            Tracks whether the Reveal/Hidden VisualState is available.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint._templateApplied">
            <summary>
            Tracks whether the template has been applied yet.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.#ctor">
            <summary>
            Initializes a new instance of the DataPoint class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.GoToCurrentRevealState">
            <summary>
            Updates the Control's visuals to reflect the current state(s).
            </summary>
            <returns>True if a state transition was started.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnApplyTemplate">
            <summary>
            Builds the visual tree for the DataPoint when a new template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnCurrentStateChanged(System.Object,System.Windows.VisualStateChangedEventArgs)">
            <summary>
            Changes the DataPoint object's state after one of the VSM state animations completes.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Control's Loaded event.
            </summary>
            <param name="sender">The Control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the MouseLeftButtonDown event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.SetFormattedProperty(System.Windows.DependencyProperty,System.String,System.Object)">
            <summary>
            Sets a dependency property with the specified format.
            </summary>
            <param name="property">The DependencyProperty to set.</param>
            <param name="format">The Format string to apply to the value.</param>
            <param name="value">The value of the dependency property to be formatted.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.IsSelectionEnabled">
            <summary>
            Gets or sets a value indicating whether selection is enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.IsActive">
            <summary>
            Gets a value indicating whether the data point is active.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.DataPoint.IsSelectedChanged">
            <summary>
            An event raised when the IsSelected property is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.IsHovered">
            <summary>
            Gets a value indicating whether the mouse is hovering over
            the data point.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.IsSelected">
            <summary>
            Gets or sets a value indicating whether the data point is selected.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.DataPoint.ActualDependentValueChanged">
            <summary>
            Event raised when the actual dependent value of the data point is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.ActualDependentValue">
            <summary>
            Gets or sets the actual dependent value displayed in the chart.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.DataPoint.DependentValueChanged">
            <summary>
            This event is raised when the dependent value of the data point is 
            changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.DependentValue">
            <summary>
            Gets or sets the dependent value of the Control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.DependentValueStringFormat">
            <summary>
            Gets or sets the format string for the FormattedDependentValue property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.FormattedDependentValue">
            <summary>
            Gets the DependentValue as formatted by the DependentValueStringFormat property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.FormattedIndependentValue">
            <summary>
            Gets the IndependentValue as formatted by the IndependentValueStringFormat property.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.DataPoint.IndependentValueChanged">
            <summary>
            Called when the independent value of the data point is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.IndependentValue">
            <summary>
            Gets or sets the independent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.IndependentValueStringFormat">
            <summary>
            Gets or sets the format string for the FormattedIndependentValue property.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.DataPoint.ActualIndependentValueChanged">
            <summary>
            Occurs when the actual independent value of the data point is 
            changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.ActualIndependentValue">
            <summary>
            Gets or sets the actual independent value.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.DataPoint.StateChanged">
            <summary>
            Occurs when the state of a data point is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.IsCoercingState">
            <summary>
            Gets or sets a value indicating whether the State property is being
            coerced to its previous value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.State">
            <summary>
            Gets or sets the state of the data point.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.ImplementationRoot">
            <summary>
            Gets the implementation root of the Control.
            </summary>
            <remarks>
            Implements Silverlight's corresponding internal property on Control.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.DefinitionSeriesIsSelectionEnabledHandling">
            <summary>
            Gets or sets a value indicating whether to handle IsSelectionEnabled in the DefinitionSeries manner.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaDataPoint.#ctor">
            <summary>
            Initializes a new instance of the AreaDataPoint class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.FrameworkElementExtensions">
            <summary>
            A set of extension methods for the DataPoint class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.FrameworkElementExtensions.GetActualMargin(System.Windows.FrameworkElement,System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            Returns the actual margin for a given framework element and axis.
            </summary>
            <param name="element">The framework element.</param>
            <param name="axis">The axis along which to return the margin.
            </param>
            <returns>The margin for a given framework element and axis.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.FrameworkElementExtensions.GetMargin(System.Windows.FrameworkElement,System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            Returns the margin for a given framework element and axis.
            </summary>
            <param name="element">The framework element.</param>
            <param name="axis">The axis along which to return the margin.
            </param>
            <returns>The margin for a given framework element and axis.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.Primitives.Edge">
            <summary>
            Specifies the edge position of a child element that is inside an
            EdgePanel.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.Edge.Center">
            <summary>
            A child element that is positioned in the center of a EdgePanel.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.Edge.Left">
            <summary>
            A child element that is positioned on the left side of the
            EdgePanel.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.Edge.Top">
            <summary>
            A child element that is positioned at the top of the EdgePanel.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.Edge.Right">
            <summary>
            A child element that is positioned on the right side of the
            EdgePanel.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.Edge.Bottom">
            <summary>
            A child element that is positioned at the bottom of the EdgePanel.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel">
            <summary>
            Defines an area where you can arrange child elements either horizontally
            or vertically, relative to each other.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.MaximumIterations">
            <summary>
            The maximum number of iterations.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel._ignorePropertyChange">
            <summary>
            A flag that ignores a property change when set.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.GetEdge(System.Windows.UIElement)">
            <summary>
            Gets the value of the Edge attached property for a specified
            UIElement.
            </summary>
            <param name="element">
            The element from which the property value is read.
            </param>
            <returns>The Edge property value for the element.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.SetEdge(System.Windows.UIElement,System.Windows.Controls.DataVisualization.Charting.Primitives.Edge)">
            <summary>
            Sets the value of the Edge attached property to a specified element.
            </summary>
            <param name="element">
            The element to which the attached property is written.
            </param>
            <param name="edge">The needed Edge value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.EdgeProperty">
            <summary>
            Identifies the Edge dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.OnEdgePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            EdgeProperty property changed handler.
            </summary>
            <param name="d">UIElement that changed its Edge.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.#ctor">
            <summary>
            Initializes a new instance of the EdgePanel class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.EdgePanelSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Invalidate measure when edge panel is resized.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel._leftRect">
            <summary>
            The left rectangle in which to render left elements.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel._rightRect">
            <summary>
            The right rectangle in which to render right elements.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel._topRect">
            <summary>
            The top rectangle in which to render top elements.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel._bottomRect">
            <summary>
            The bottom rectangle in which to render bottom elements.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the children of a EdgePanel in anticipation of arranging
            them during the ArrangeOverride pass.
            </summary>
            <param name="constraint">A maximum Size to not exceed.</param>
            <returns>The desired size of the EdgePanel.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the content (child elements) of a EdgePanel element.
            </summary>
            <param name="arrangeSize">
            The Size the EdgePanel uses to arrange its child elements.
            </param>
            <returns>The arranged size of the EdgePanel.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.SafeCreateRect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a Rect safely by forcing width/height to be valid.
            </summary>
            <param name="left">Rect left parameter.</param>
            <param name="top">Rect top parameter.</param>
            <param name="width">Rect width parameter.</param>
            <param name="height">Rect height parameter.</param>
            <returns>New Rect struct.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.Axis">
            <summary>
            An axis class used to determine the plot area coordinate of values.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IAxis">
            <summary>
            An axis interface used to determine the plot area coordinate of values.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IAxis.CanPlot(System.Object)">
            <summary>
            Returns a value indicating whether the axis can plot a value.
            </summary>
            <param name="value">The value to plot.</param>
            <returns>A value indicating whether the axis can plot a value.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IAxis.GetPlotAreaCoordinate(System.Object)">
            <summary>
            The plot area coordinate of a value.
            </summary>
            <param name="value">The value for which to retrieve the plot area
            coordinate.</param>
            <returns>The plot area coordinate.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.IAxis.Orientation">
            <summary>
            Gets or sets the orientation of the axis.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.IAxis.OrientationChanged">
            <summary>
            This event is raised when the Orientation property is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.IAxis.RegisteredListeners">
            <summary>
            Gets the registered IAxisListeners.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.IAxis.DependentAxes">
            <summary>
            Gets the collection of child axes.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Axis.LocationProperty">
            <summary>
            Identifies the Location dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnLocationPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            LocationProperty property changed handler.
            </summary>
            <param name="d">Axis that changed its Location.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnLocationPropertyChanged(System.Windows.Controls.DataVisualization.Charting.AxisLocation,System.Windows.Controls.DataVisualization.Charting.AxisLocation)">
            <summary>
            LocationProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Axis.OrientationProperty">
            <summary>
            Identifies the Orientation dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnOrientationPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OrientationProperty property changed handler.
            </summary>
            <param name="d">Axis that changed its Orientation.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnOrientationPropertyChanged(System.Windows.Controls.DataVisualization.Charting.AxisOrientation,System.Windows.Controls.DataVisualization.Charting.AxisOrientation)">
            <summary>
            OrientationProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnInvalidated(System.Windows.RoutedEventArgs)">
            <summary>
            Raises the invalidated event.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.CanPlot(System.Object)">
            <summary>
            Returns a value indicating whether the axis can plot a value.
            </summary>
            <param name="value">The value to plot.</param>
            <returns>A value indicating whether the axis can plot a value.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.GetPlotAreaCoordinate(System.Object)">
            <summary>
            The plot area coordinate of a value.
            </summary>
            <param name="value">The value for which to retrieve the plot area
            coordinate.</param>
            <returns>The plot area coordinate.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.#ctor">
            <summary>
            Instantiates a new instance of the Axis class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnChildAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Child axes collection changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnDependentAxesCollectionChanged">
            <summary>
            Child axes collection changed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.RegisteredListenersCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This event is raised when the registered listeners collection is
            changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnObjectRegistered(System.Windows.Controls.DataVisualization.Charting.IAxisListener)">
            <summary>
            This method is invoked when a series is registered.
            </summary>
            <param name="series">The series that has been registered.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnObjectUnregistered(System.Windows.Controls.DataVisualization.Charting.IAxisListener)">
            <summary>
            This method is invoked when a series is unregistered.
            </summary>
            <param name="series">The series that has been unregistered.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Axis.Location">
            <summary>
            Gets or sets the axis location.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.Axis.LocationChanged">
            <summary>
            This event is raised when the location property is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Axis.DependentAxes">
            <summary>
            Gets the list of child axes belonging to this axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Axis.Orientation">
            <summary>
            Gets or sets the orientation of the axis.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.Axis.OrientationChanged">
            <summary>
            This event is raised when the Orientation property is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Axis.RegisteredListeners">
            <summary>
            Gets or the collection of series that are using the Axis.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.AxisLabel">
            <summary>
            A label used to display data in an axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisLabel.StringFormatProperty">
            <summary>
            Identifies the StringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AxisLabel.OnStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            StringFormatProperty property changed handler.
            </summary>
            <param name="d">AxisLabel that changed its StringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AxisLabel.OnStringFormatPropertyChanged(System.String)">
            <summary>
            StringFormatProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisLabel.FormattedContentProperty">
            <summary>
            Identifies the FormattedContent dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AxisLabel.#ctor">
            <summary>
            Instantiates a new instance of the AxisLabel class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AxisLabel.UpdateFormattedContent">
            <summary>
            Updates the formatted text.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.AxisLabel.StringFormat">
            <summary>
            Gets or sets the text string format.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.AxisLabel.FormattedContent">
            <summary>
            Gets the formatted content property.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.AxisLocation">
            <summary>
            Axis position.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisLocation.Auto">
            <summary>
            Location is determined automatically.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisLocation.Left">
            <summary>
            Left in the series host area.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisLocation.Top">
            <summary>
            Top in the series host area.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisLocation.Right">
            <summary>
            Right in the series host area.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisLocation.Bottom">
            <summary>
            Bottom of the series host area.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.CategoryAxis">
            <summary>
            An axis that displays categories.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DisplayAxis">
            <summary>
            An axis that has a range.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IRequireSeriesHost">
            <summary>
            An object that implements this interface requires a series host.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.IRequireSeriesHost.SeriesHost">
            <summary>
            Gets or sets the series host.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.MaximumAxisIntervalsPer200Pixels">
            <summary>
            Maximum intervals per 200 pixels.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.AxisGridName">
            <summary>
            The name of the axis grid template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.AxisTitleName">
            <summary>
            The name of the axis title template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.AxisLabelStyleProperty">
            <summary>
            Identifies the AxisLabelStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnAxisLabelStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            AxisLabelStyleProperty property changed handler.
            </summary>
            <param name="d">DisplayAxis that changed its AxisLabelStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnAxisLabelStylePropertyChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            AxisLabelStyleProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.GetLength(System.Windows.Size)">
            <summary>
            Returns the length of the axis given an available size.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The length of the axis given an available size.</returns>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis._gridLines">
            <summary>
            This field stores the grid lines element.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnGridLinesPropertyChanged(System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines,System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines)">
            <summary>
            GridLinesProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.MajorTickMarkStyleProperty">
            <summary>
            Identifies the MajorTickMarkStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnMajorTickMarkStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MajorTickMarkStyleProperty property changed handler.
            </summary>
            <param name="d">DisplayAxis that changed its MajorTickMarkStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnMajorTickMarkStylePropertyChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            MajorTickMarkStyleProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.TitleProperty">
            <summary>
            Identifies the Title dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnTitlePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TitleProperty property changed handler.
            </summary>
            <param name="d">DisplayAxis that changed its Title.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnTitlePropertyChanged(System.Object,System.Object)">
            <summary>
            TitleProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.TitleStyleProperty">
            <summary>
            Identifies the TitleStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.ShowGridLinesProperty">
            <summary>
            Identifies the ShowGridLines dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnShowGridLinesPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ShowGridLinesProperty property changed handler.
            </summary>
            <param name="d">Axis that changed its ShowGridLines.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnShowGridLinesPropertyChanged(System.Boolean,System.Boolean)">
            <summary>
            ShowGridLinesProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.SetShowGridLines(System.Boolean)">
            <summary>
            Creates and destroys a grid lines element based on the specified
            value.
            </summary>
            <param name="newValue">A value indicating whether to display grid 
            lines or not.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.GridLineStyleProperty">
            <summary>
            Identifies the GridlineStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis._grid">
            <summary>
            The grid used to layout the axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis._axisTitle">
            <summary>
            The control used to display the axis title.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.CreateMajorTickMark">
            <summary>
            Creates a major axis tick mark.
            </summary>
            <returns>A line to used to render a tick mark.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.CreateTickMark(System.Windows.Style)">
            <summary>
            Creates a tick mark and applies a style to it.
            </summary>
            <param name="style">The style to apply.</param>
            <returns>The newly created tick mark.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.InternalGetMajorGridLinePositions">
            <summary>
            This method is used to share the grid line coordinates with the
            internal grid lines control.
            </summary>
            <returns>A sequence of the major grid line coordinates.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.GetMajorGridLineCoordinates(System.Windows.Size)">
            <summary>
            Returns the coordinates to use for the grid line control.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of coordinates at which to draw grid lines.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.#ctor">
            <summary>
            Instantiates a new instance of the DisplayAxis class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.DisplayAxisSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            If display axis has just become visible, invalidate.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.CreateAxisLabel">
            <summary>
            Creates an axis label.
            </summary>
            <returns>The new axis label.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnDependentAxesCollectionChanged">
            <summary>
            Updates the grid lines element if a suitable dependent axis has
            been added to a radial axis.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.PrepareAxisLabel(System.Windows.Controls.Control,System.Object)">
            <summary>
            Prepares an axis label to be plotted.
            </summary>
            <param name="label">The axis label to prepare.</param>
            <param name="dataContext">The data context to use for the axis 
            label.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnApplyTemplate">
            <summary>
            Retrieves template parts and configures layout.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnOrientedPanelSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            When the size of the oriented panel changes invalidate the axis.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnLocationPropertyChanged(System.Windows.Controls.DataVisualization.Charting.AxisLocation,System.Windows.Controls.DataVisualization.Charting.AxisLocation)">
            <summary>
            Arranges the grid when the location property is changed.
            </summary>
            <param name="oldValue">The old location.</param>
            <param name="newValue">The new location.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.ArrangeAxisGrid">
            <summary>
            Arranges the elements in the axis grid.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.MeasureOverride(System.Windows.Size)">
            <summary>
            Renders the axis.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The required size.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnOrientationPropertyChanged(System.Windows.Controls.DataVisualization.Charting.AxisOrientation,System.Windows.Controls.DataVisualization.Charting.AxisOrientation)">
            <summary>
            Reformulates the grid when the orientation is changed.  Grid is
            either separated into two columns or two rows.  The title is 
            inserted with the outermost section from the edge and an oriented
            panel is inserted into the innermost section.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnInvalidated(System.Windows.RoutedEventArgs)">
            <summary>
            Updates the visual appearance of the axis when it is invalidated.
            </summary>
            <param name="args">Information for the invalidated event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.RenderAxis(System.Windows.Size)">
            <summary>
            Renders the axis if there is a valid value for orientation.
            </summary>
            <param name="availableSize">The available size in which to render 
            the axis.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.Render(System.Windows.Size)">
            <summary>
            Renders the axis labels, tick marks, and other visual elements.
            </summary>
            <param name="availableSize">The available size.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.Invalidate">
            <summary>
            Invalidates the axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis._seriesHost">
            <summary>
            The series host.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnSeriesHostPropertyChanged(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            This method is run when the series host property is changed.
            </summary>
            <param name="oldValue">The old series host.</param>
            <param name="newValue">The new series host.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.AxisLabelStyle">
            <summary>
            Gets or sets the style used for the axis labels.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.ActualLength">
            <summary>
            Gets the actual length.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.GridLines">
            <summary>
            Gets or sets the grid lines property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.MajorTickMarkStyle">
            <summary>
            Gets or sets the style applied to the Axis tick marks.
            </summary>
            <value>The Style applied to the Axis tick marks.</value>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.Title">
            <summary>
            Gets or sets the title property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.TitleLayoutTransformControl">
            <summary>
            Gets or sets the LayoutTransformControl used to rotate the title.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.TitleStyle">
            <summary>
            Gets or sets the style applied to the Axis title.
            </summary>
            <value>The Style applied to the Axis title.</value>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.ShowGridLines">
            <summary>
            Gets or sets a value indicating whether grid lines should be shown.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.GridLineStyle">
            <summary>
            Gets or sets the Style of the Axis's gridlines.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.AxisGrid">
            <summary>
            Gets or sets the grid used to layout the axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.DependentAxisGrid">
            <summary>
            Gets or sets a grid to lay out the dependent axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OrientedPanel">
            <summary>
            Gets the oriented panel used to layout the axis labels.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.AxisTitle">
            <summary>
            Gets or sets the title control used to display the title.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.SeriesHost">
            <summary>
            Gets or sets the series host.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ICategoryAxis">
            <summary>
            An axis that is arranged by category.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IDataConsumer">
            <summary>
            An object that consumes data.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IDataConsumer.DataChanged(System.Windows.Controls.DataVisualization.Charting.IDataProvider,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Supplies the consumer with data.
            </summary>
            <param name="dataProvider">The data provider.</param>
            <param name="data">The data used by the consumer.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ICategoryAxis.GetPlotAreaCoordinateRange(System.Object)">
            <summary>
            Accepts a category and returns the coordinate range of that category
            on the axis.
            </summary>
            <param name="category">A category for which to retrieve the 
            coordinate location.</param>
            <returns>The coordinate range of the category on the axis.</returns>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ICategoryAxis.GetCategoryAtPosition(System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Returns the category at a given coordinate.
            </summary>
            <param name="position">The plot are coordinate.</param>
            <returns>The category at the given plot area coordinate.</returns>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.CategoryAxis._majorTickMarkPool">
            <summary>
            A pool of major tick marks.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.CategoryAxis._labelPool">
            <summary>
            A pool of labels.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.SortOrderProperty">
            <summary>
            Identifies the SortOrder dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.OnSortOrderPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SortOrderProperty property changed handler.
            </summary>
            <param name="d">CategoryAxis that changed its SortOrder.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.OnSortOrderPropertyChanged">
            <summary>
            SortOrderProperty property changed handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.#ctor">
            <summary>
            Instantiates a new instance of the CategoryAxis class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.OnObjectRegistered(System.Windows.Controls.DataVisualization.Charting.IAxisListener)">
            <summary>
            Updates categories when a series is registered.
            </summary>
            <param name="series">The series to be registered.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.OnObjectUnregistered(System.Windows.Controls.DataVisualization.Charting.IAxisListener)">
            <summary>
            Updates categories when a series is unregistered.
            </summary>
            <param name="series">The series to be unregistered.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.GetPlotAreaCoordinateRange(System.Object)">
            <summary>
            Returns range of coordinates for a given category.
            </summary>
            <param name="category">The category to return the range for.</param>
            <returns>The range of coordinates corresponding to the category.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.GetCategoryAtPosition(System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Returns the category at a given coordinate.
            </summary>
            <param name="position">The plot area position.</param>
            <returns>The category at the given plot area position.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.DataChanged(System.Windows.Controls.DataVisualization.Charting.IDataProvider,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Updates the categories in response to an update from a registered
            axis data provider.
            </summary>
            <param name="dataProvider">The category axis information
            provider.</param>
            <param name="data">A sequence of categories.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.UpdateCategories">
            <summary>
            Updates the list of categories.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.GetMajorGridLineCoordinates(System.Windows.Size)">
            <summary>
            Returns the major axis grid line coordinates.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of the major grid line coordinates.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.GetPlotAreaCoordinate(System.Object)">
            <summary>
            The plot area coordinate of a value.
            </summary>
            <param name="value">The value for which to retrieve the plot area
            coordinate.</param>
            <returns>The plot area coordinate.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.CreateAndPrepareAxisLabel(System.Object)">
            <summary>
            Creates and prepares a new axis label.
            </summary>
            <param name="value">The axis label value.</param>
            <returns>The axis label content control.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.RenderOriented(System.Windows.Size)">
            <summary>
            Renders as an oriented axis.
            </summary>
            <param name="availableSize">The available size.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.Render(System.Windows.Size)">
            <summary>
            Renders the axis labels, tick marks, and other visual elements.
            </summary>
            <param name="availableSize">The available size.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.CanPlot(System.Object)">
            <summary>
            Returns a value indicating whether a value can be plotted on the
            axis.
            </summary>
            <param name="value">A value which may or may not be able to be
            plotted.</param>
            <returns>A value indicating whether a value can be plotted on the
            axis.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.SortOrder">
            <summary>
            Gets or sets the sort order used for the categories.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.Categories">
            <summary>
            Gets or sets a list of categories to display.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.GridLineCoordinatesToDisplay">
            <summary>
            Gets or sets the grid line coordinates to display.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.CategorySortOrder">
            <summary>
            The sort order to use when sorting categories.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.CategorySortOrder.None">
            <summary>
            No sort order.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.CategorySortOrder.Ascending">
            <summary>
            Ascending sort order.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.CategorySortOrder.Descending">
            <summary>
            Descending sort order.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines">
            <summary>
            This control draws gridlines with the help of an axis.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IAxisListener">
            <summary>
            An object that listens for changes in an axis.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IAxisListener.AxisInvalidated(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            This method is called when the axis is invalidated.
            </summary>
            <param name="axis">The axis that has been invalidated.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines._axis">
            <summary>
            The field that stores the axis that the grid lines are connected to.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines.OnAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.DisplayAxis,System.Windows.Controls.DataVisualization.Charting.DisplayAxis)">
            <summary>
            AxisProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines.#ctor(System.Windows.Controls.DataVisualization.Charting.DisplayAxis)">
            <summary>
            Instantiates a new instance of the DisplayAxisGridLines class.
            </summary>
            <param name="axis">The axis used by the DisplayAxisGridLines.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines.OnSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Redraws grid lines when the size of the control changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines.AxisInvalidated(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            Redraws grid lines when the axis is invalidated.
            </summary>
            <param name="axis">The invalidated axis.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines.Invalidate">
            <summary>
            Draws the grid lines.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines.Axis">
            <summary>
            Gets the axis that the grid lines are connected to.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IRangeConsumer">
            <summary>
            An object that consumes a range.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IRangeConsumer.RangeChanged(System.Windows.Controls.DataVisualization.Charting.IRangeProvider,System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Informs a range consumer that a provider's range has changed.
            </summary>
            <param name="provider">The range provider.</param>
            <param name="range">The range of data.</param>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer">
            <summary>
            Consumes value margins and uses them to lay out objects.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer.ValueMarginsChanged(System.Windows.Controls.DataVisualization.Charting.IValueMarginProvider,System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.ValueMargin})">
            <summary>
            Updates layout to accommodate for value margins.
            </summary>
            <param name="provider">A value margin provider.</param>
            <param name="valueMargins">A sequence of value margins.</param>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IValueMarginProvider">
            <summary>
            Provides information about margins necessary for values.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IValueMarginProvider.GetValueMargins(System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer)">
            <summary>
            Gets the margins required for values.
            </summary>
            <param name="consumer">The axis to retrieve the value margins 
            for.</param>
            <returns>The margins required for values.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ValueMargin">
            <summary>
            A margin specified for a given value.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ValueMargin.#ctor(System.Object,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the ValueMargin class.
            </summary>
            <param name="value">The value the margin is associated with.</param>
            <param name="lowMargin">The lower margin.</param>
            <param name="highMargin">The higher margin.</param> 
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ValueMargin.Equals(System.Object)">
            <summary>
            Determines whether two value margins are equal.
            </summary>
            <param name="obj">The value margin to compare with this one.</param>
            <returns>A value indicating whether the two value margins are equal.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ValueMargin.op_Equality(System.Windows.Controls.DataVisualization.Charting.ValueMargin,System.Windows.Controls.DataVisualization.Charting.ValueMargin)">
            <summary>
            Determines whether two unit value objects are equal.
            </summary>
            <param name="left">The left value margin.</param>
            <param name="right">The right value margin.</param>
            <returns>A value indicating  whether two value margins objects are 
            equal.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ValueMargin.op_Inequality(System.Windows.Controls.DataVisualization.Charting.ValueMargin,System.Windows.Controls.DataVisualization.Charting.ValueMargin)">
            <summary>
            Determines whether two value margin objects are not equal.
            </summary>
            <param name="left">The left value margin.</param>
            <param name="right">The right value margin.</param>
            <returns>A value indicating whether two value margin objects are not
            equal.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ValueMargin.GetHashCode">
            <summary>
            Returns the hash code of the value margin object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ValueMargin.Value">
            <summary>
            Gets the value that the margin is associated with.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ValueMargin.LowMargin">
            <summary>
            Gets the low margin for a value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ValueMargin.HighMargin">
            <summary>
            Gets the high margin for a value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis">
            <summary>
            An axis that displays numeric values.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.RangeAxis">
            <summary>
            An axis that has a range.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IRangeAxis">
            <summary>
            An axis with a range.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IRangeAxis.GetValueAtPosition(System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            The plot area coordinate of a value.
            </summary>
            <param name="position">The position at which to retrieve the plot 
            area coordinate.</param>
            <returns>The plot area coordinate.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.IRangeAxis.Range">
            <summary>
            Gets the range of values displayed on the axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.IRangeAxis.Origin">
            <summary>
            Gets the origin value on the axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.RangeAxis._majorTickMarkPool">
            <summary>
            A pool of major tick marks.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.RangeAxis._minorTickMarkPool">
            <summary>
            A pool of major tick marks.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.RangeAxis._labelPool">
            <summary>
            A pool of labels.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.RangeAxis.MinorTickMarkStyleProperty">
            <summary>
            Identifies the MinorTickMarkStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.RangeAxis._actualRange">
            <summary>
            The actual range of values.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.RangeAxis._protectedMaximum">
            <summary>
            The maximum value displayed in the range axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.RangeAxis._protectedMinimum">
            <summary>
            The minimum value displayed in the range axis.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.#ctor">
            <summary>
            Instantiates a new instance of the RangeAxis class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.CreateMinorTickMark">
            <summary>
            Creates a minor axis tick mark.
            </summary>
            <returns>A line to used to render a tick mark.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.OnActualRangeChanged(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Invalidates axis when the actual range changes.
            </summary>
            <param name="range">The new actual range.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetPlotAreaCoordinate(System.Object)">
            <summary>
            Returns the plot area coordinate of a given value.
            </summary>
            <param name="value">The value to return the plot area coordinate for.</param>
            <returns>The plot area coordinate of the given value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetPlotAreaCoordinate(System.Object,System.Double)">
            <summary>
            Returns the plot area coordinate of a given value.
            </summary>
            <param name="value">The value to return the plot area coordinate for.</param>
            <param name="length">The length of the axis.</param>
            <returns>The plot area coordinate of the given value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetPlotAreaCoordinate(System.Object,System.Windows.Controls.DataVisualization.Range{System.IComparable},System.Double)">
            <summary>
            Returns the plot area coordinate of a given value.
            </summary>
            <param name="value">The value to return the plot area coordinate for.</param>
            <param name="currentRange">The value range to use when calculating the plot area coordinate.</param>
            <param name="length">The length of the axis.</param>
            <returns>The plot area coordinate of the given value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.OverrideDataRange(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Overrides the data range.
            </summary>
            <param name="range">The range to potentially override.</param>
            <returns>The overridden range.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.EnforceMaximumAndMinimum(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Modifies a range to respect the minimum and maximum axis values.
            </summary>
            <param name="range">The range of data.</param>
            <returns>A range modified to  respect the minimum and maximum axis 
            values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.UpdateActualRange">
            <summary>
            Updates the actual range displayed on the axis.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.RenderOriented(System.Windows.Size)">
            <summary>
            Renders the axis as an oriented axis.
            </summary>
            <param name="availableSize">The available size.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.Render(System.Windows.Size)">
            <summary>
            Renders the axis labels, tick marks, and other visual elements.
            </summary>
            <param name="availableSize">The available size.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetMajorGridLineCoordinates(System.Windows.Size)">
            <summary>
            Returns a sequence of the major grid line coordinates.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of the major grid line coordinates.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetMajorGridLineValues(System.Windows.Size)">
            <summary>
            Returns a sequence of the values at which to plot major grid lines.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of the values at which to plot major grid lines.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetMajorTickMarkValues(System.Windows.Size)">
            <summary>
            Returns a sequence of values to plot on the axis.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of values to plot on the axis.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetMinorTickMarkValues(System.Windows.Size)">
            <summary>
            Returns a sequence of values to plot on the axis.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of values to plot on the axis.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetLabelValues(System.Windows.Size)">
            <summary>
            Returns a sequence of values to plot on the axis.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of values to plot on the axis.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetValueAtPosition(System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Returns the value range given a plot area coordinate.
            </summary>
            <param name="value">The plot area coordinate.</param>
            <returns>A range of values at that plot area coordinate.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.System#Windows#Controls#DataVisualization#Charting#IRangeAxis#GetValueAtPosition(System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Returns the value range given a plot area coordinate.
            </summary>
            <param name="value">The plot area coordinate.</param>
            <returns>A range of values at that plot area coordinate.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.System#Windows#Controls#DataVisualization#Charting#IRangeConsumer#RangeChanged(System.Windows.Controls.DataVisualization.Charting.IRangeProvider,System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Updates the axis with information about a provider's data range.
            </summary>
            <param name="usesRangeAxis">The information provider.</param>
            <param name="range">The range of data in the information provider.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.System#Windows#Controls#DataVisualization#Charting#IValueMarginConsumer#ValueMarginsChanged(System.Windows.Controls.DataVisualization.Charting.IValueMarginProvider,System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.ValueMargin})">
            <summary>
            Updates the layout of the axis to accommodate a sequence of value
            margins.
            </summary>
            <param name="provider">A value margin provider.</param>
            <param name="valueMargins">A sequence of value margins.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.OnObjectRegistered(System.Windows.Controls.DataVisualization.Charting.IAxisListener)">
            <summary>
            If a new range provider is registered, update actual range.
            </summary>
            <param name="series">The axis listener being registered.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.OnObjectUnregistered(System.Windows.Controls.DataVisualization.Charting.IAxisListener)">
            <summary>
            If a range provider is unregistered, update actual range.
            </summary>
            <param name="series">The axis listener being unregistered.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.UpdateValueMargins(System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap},System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Create function that when given a range will return the 
            amount in pixels by which the value margin range 
            overlaps.  Positive numbers represent values outside the
            range.
            </summary>
            <param name="valueMargins">The list of value margins, coordinates, and overlaps.</param>
            <param name="comparableRange">The new range to use to calculate coordinates.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetMaxLeftAndRightOverlap(System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap},System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap@,System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap@)">
            <summary>
            Returns the value margin, coordinate, and overlap triples that have the largest left and right overlap.
            </summary>
            <param name="valueMargins">The list of value margin, coordinate, and 
            overlap triples.</param>
            <param name="maxLeftOverlapValueMargin">The value margin, 
            coordinate, and overlap triple that has the largest left overlap.
            </param>
            <param name="maxRightOverlapValueMargin">The value margin, 
            coordinate, and overlap triple that has the largest right overlap.
            </param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.RangeAxis.MinorTickMarkStyle">
            <summary>
            Gets or sets the minor tick mark style.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.RangeAxis.ActualRange">
            <summary>
            Gets or sets the actual range of values.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.RangeAxis.ProtectedMaximum">
            <summary>
            Gets or sets the maximum value displayed in the range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.RangeAxis.ProtectedMinimum">
            <summary>
            Gets or sets the minimum value displayed in the range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.RangeAxis.System#Windows#Controls#DataVisualization#Charting#IRangeAxis#Range">
            <summary>
            Gets the actual maximum value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.RangeAxis.System#Windows#Controls#DataVisualization#Charting#IRangeAxis#Origin">
            <summary>
            Gets the origin value on the axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.RangeAxis.Origin">
            <summary>
            Gets the origin value on the axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ActualMaximumProperty">
            <summary>
            Identifies the ActualMaximum dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ActualMinimumProperty">
            <summary>
            Identifies the ActualMinimum dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.MaximumProperty">
            <summary>
            Identifies the Maximum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnMaximumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxis2 that changed its Maximum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnMaximumPropertyChanged(System.Nullable{System.DateTime})">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.MinimumProperty">
            <summary>
            Identifies the Minimum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnMinimumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxis2 that changed its Minimum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnMinimumPropertyChanged(System.Nullable{System.DateTime})">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.IntervalProperty">
            <summary>
            Identifies the Interval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IntervalProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxis2 that changed its Interval.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnIntervalPropertyChanged">
            <summary>
            IntervalProperty property changed handler.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ActualIntervalProperty">
            <summary>
            Identifies the ActualInterval dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.IntervalTypeProperty">
            <summary>
            Identifies the InternalIntervalType dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnIntervalTypePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IntervalTypeProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxis that changed its InternalIntervalType.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnIntervalTypePropertyChanged(System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType)">
            <summary>
            IntervalTypeProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ActualIntervalTypeProperty">
            <summary>
            Identifies the ActualIntervalType dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.#ctor">
            <summary>
            Instantiates a new instance of the DateTimeAxis2 class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.CreateAxisLabel">
            <summary>
            Creates a new instance of the DateTimeAxisLabel class.
            </summary>
            <returns>Returns  a new instance of the DateTimeAxisLabel class.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.PrepareAxisLabel(System.Windows.Controls.Control,System.Object)">
            <summary>
            Prepares an instance of the DateTimeAxisLabel class by setting its
            IntervalType property.
            </summary>
            <param name="label">An instance of the DateTimeAxisLabel class.
            </param>
            <param name="dataContext">The data context to assign to the label.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnActualRangeChanged(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Updates the typed actual maximum and minimum properties when the
            actual range changes.
            </summary>
            <param name="range">The actual range.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.CanPlot(System.Object)">
            <summary>
            Returns a value indicating whether a value can plot.
            </summary>
            <param name="value">The value to plot.</param>
            <returns>A value indicating whether a value can plot.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.GetPlotAreaCoordinate(System.Object,System.Double)">
            <summary>
            Returns the plot area coordinate of a value.
            </summary>
            <param name="value">The value to plot.</param>
            <param name="length">The length of the axis.</param>
            <returns>The plot area coordinate of a value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.GetPlotAreaCoordinate(System.Object,System.Windows.Controls.DataVisualization.Range{System.IComparable},System.Double)">
            <summary>
            Returns the plot area coordinate of a value.
            </summary>
            <param name="value">The value to plot.</param>
            <param name="currentRange">The range to use determine the coordinate.</param>
            <param name="length">The length of the axis.</param>
            <returns>The plot area coordinate of a value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.GetPlotAreaCoordinate(System.Object,System.Windows.Controls.DataVisualization.Range{System.DateTime},System.Double)">
            <summary>
            Returns the plot area coordinate of a value.
            </summary>
            <param name="value">The value to plot.</param>
            <param name="currentRange">The range to use determine the coordinate.</param>
            <param name="length">The length of the axis.</param>
            <returns>The plot area coordinate of a value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.CalculateActualInterval(System.Windows.Size)">
            <summary>
            Returns the actual interval to use to determine which values are 
            displayed in the axis.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The actual interval to use to determine which values are 
            displayed in the axis.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.GetMajorAxisValues(System.Windows.Size)">
            <summary>
            Returns a sequence of major values.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of major values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.GetMajorTickMarkValues(System.Windows.Size)">
            <summary>
            Returns a sequence of values to create major tick marks for.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of values to create major tick marks for.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.GetLabelValues(System.Windows.Size)">
            <summary>
            Returns a sequence of values to plot on the axis.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of values to plot on the axis.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.IncrementDateTime(System.DateTime,System.Double)">
            <summary>
            This method accepts a date time and increments it.
            </summary>
            <param name="date">A date time.</param>
            <param name="interval">The interval used to increment the date time.
            </param>
            <returns>The new date time.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.AlignIntervalStart(System.DateTime,System.Double,System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType)">
            <summary>
            Adjusts the beginning of the first interval depending on the type and size.
            </summary>
            <param name="start">Original start point.</param>
            <param name="intervalSize">Interval size.</param>
            <param name="type">Type of the interval (Month, Year, ...).</param>
            <returns>
            Adjusted interval start position.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.GetValueAtPosition(System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Returns the value range given a plot area coordinate.
            </summary>
            <param name="value">The position.</param>
            <returns>A range of values at that plot area coordinate.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.CalculateDateTimeInterval(System.DateTime,System.DateTime,System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType@,System.Windows.Size)">
            <summary>
            Recalculates a DateTime interval obtained from maximum and minimum.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
            <param name="type">Date time interval type.</param>
            <param name="availableSize">The available size.</param>
            <returns>Auto Interval.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OverrideDataRange(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Overrides the actual range to ensure that it is never set to an
            empty range.
            </summary>
            <param name="range">The range to override.</param>
            <returns>The overridden range.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ActualMaximum">
            <summary>
            Gets the actual maximum value plotted on the chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ActualMinimum">
            <summary>
            Gets the actual maximum value plotted on the chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.Maximum">
            <summary>
            Gets or sets the maximum value plotted on the axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.Minimum">
            <summary>
            Gets or sets the minimum value to plot on the axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.Interval">
            <summary>
            Gets or sets the axis interval.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ActualInterval">
            <summary>
            Gets the actual interval.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.IntervalType">
            <summary>
            Gets or sets the interval to use for the axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ActualIntervalType">
            <summary>
            Gets or sets the actual interval type.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.Origin">
            <summary>
            Gets the origin value on the axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ActualDateTimeRange">
            <summary>
            Gets the actual range of DateTime values.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel">
            <summary>
            An axis label for displaying DateTime values.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.IntervalTypeProperty">
            <summary>
            Identifies the IntervalType dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnIntervalTypePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IntervalTypeProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its IntervalType.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnIntervalTypePropertyChanged(System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType,System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType)">
            <summary>
            IntervalTypeProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.YearsIntervalStringFormatProperty">
            <summary>
            Identifies the YearsIntervalStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnYearsIntervalStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            YearsIntervalStringFormatProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its YearsIntervalStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnYearsIntervalStringFormatPropertyChanged">
            <summary>
            YearsIntervalStringFormatProperty property changed handler.
            </summary>    
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.MonthsIntervalStringFormatProperty">
            <summary>
            Identifies the MonthsIntervalStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnMonthsIntervalStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MonthsIntervalStringFormatProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its MonthsIntervalStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnMonthsIntervalStringFormatPropertyChanged">
            <summary>
            MonthsIntervalStringFormatProperty property changed handler.
            </summary>    
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.WeeksIntervalStringFormatProperty">
            <summary>
            Identifies the WeeksIntervalStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnWeeksIntervalStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            WeeksIntervalStringFormatProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its WeeksIntervalStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnWeeksIntervalStringFormatPropertyChanged">
            <summary>
            WeeksIntervalStringFormatProperty property changed handler.
            </summary>    
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.DaysIntervalStringFormatProperty">
            <summary>
            Identifies the DaysIntervalStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnDaysIntervalStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DaysIntervalStringFormatProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its DaysIntervalStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnDaysIntervalStringFormatPropertyChanged">
            <summary>
            DaysIntervalStringFormatProperty property changed handler.
            </summary>    
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.HoursIntervalStringFormatProperty">
            <summary>
            Identifies the HoursIntervalStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnHoursIntervalStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            HoursIntervalStringFormatProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its HoursIntervalStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnHoursIntervalStringFormatPropertyChanged">
            <summary>
            HoursIntervalStringFormatProperty property changed handler.
            </summary>    
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.MinutesIntervalStringFormatProperty">
            <summary>
            Identifies the MinutesIntervalStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnMinutesIntervalStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinutesIntervalStringFormatProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its MinutesIntervalStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnMinutesIntervalStringFormatPropertyChanged">
            <summary>
            MinutesIntervalStringFormatProperty property changed handler.
            </summary>    
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.SecondsIntervalStringFormatProperty">
            <summary>
            Identifies the SecondsIntervalStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnSecondsIntervalStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SecondsIntervalStringFormatProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its SecondsIntervalStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnSecondsIntervalStringFormatPropertyChanged">
            <summary>
            SecondsIntervalStringFormatProperty property changed handler.
            </summary>    
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.MillisecondsIntervalStringFormatProperty">
            <summary>
            Identifies the MillisecondsIntervalStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnMillisecondsIntervalStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MillisecondsIntervalStringFormatProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its MillisecondsIntervalStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnMillisecondsIntervalStringFormatPropertyChanged">
            <summary>
            MillisecondsIntervalStringFormatProperty property changed handler.
            </summary>    
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.#ctor">
            <summary>
            Instantiates a new instance of the DateTimeAxisLabel class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.UpdateFormattedContent">
            <summary>
            Updates the formatted text.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.IntervalType">
            <summary>
            Gets or sets the interval type of the DateTimeAxis2.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.YearsIntervalStringFormat">
            <summary>
            Gets or sets the format string to use when the interval is hours.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.MonthsIntervalStringFormat">
            <summary>
            Gets or sets the format string to use when the interval is hours.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.WeeksIntervalStringFormat">
            <summary>
            Gets or sets the format string to use when the interval is hours.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.DaysIntervalStringFormat">
            <summary>
            Gets or sets the format string to use when the interval is hours.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.HoursIntervalStringFormat">
            <summary>
            Gets or sets the format string to use when the interval is hours.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.MinutesIntervalStringFormat">
            <summary>
            Gets or sets the format string to use when the interval is hours.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.SecondsIntervalStringFormat">
            <summary>
            Gets or sets the format string to use when the interval is hours.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.MillisecondsIntervalStringFormat">
            <summary>
            Gets or sets the format string to use when the interval is hours.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType">
            <summary>
            A date time interval.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Auto">
            <summary>
            Automatically determine interval.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Milliseconds">
            <summary>
            Interval type is milliseconds.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Seconds">
            <summary>
            Interval type is seconds.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Minutes">
            <summary>
            Interval type is minutes.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Hours">
            <summary>
            Interval type is hours.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Days">
            <summary>
            Interval type is days.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Weeks">
            <summary>
            Interval type is weeks.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Months">
            <summary>
            Interval type is months.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Years">
            <summary>
            Interval type is years.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.OrientedAxisGridLines">
            <summary>
            This control draws gridlines with the help of an axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.OrientedAxisGridLines._gridLinePool">
            <summary>
            A pool of grid lines.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.OrientedAxisGridLines.#ctor(System.Windows.Controls.DataVisualization.Charting.DisplayAxis)">
            <summary>
            Initializes a new instance of the OrientedAxisGridLines class.
            </summary>
            <param name="displayAxis">The axis to draw grid lines for.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.OrientedAxisGridLines.Invalidate">
            <summary>
            Draws the grid lines.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IDataProvider">
            <summary>
            Provides information to a category axis.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IDataProvider.GetData(System.Windows.Controls.DataVisualization.Charting.IDataConsumer)">
            <summary>
            Retrieves the data to be plotted on the axis.
            </summary>
            <param name="axis">The axis to retrieve the data for.</param>
            <returns>The data to plot on the axis.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IRangeProvider">
            <summary>
            Provides information to a RangeConsumer.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IRangeProvider.GetRange(System.Windows.Controls.DataVisualization.Charting.IRangeConsumer)">
            <summary>
            Returns the range of values.
            </summary>
            <param name="rangeConsumer">The range consumer requesting the data 
            range.</param>
            <returns>A data range.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.LinearAxis">
            <summary>
            An axis that displays numeric values.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.NumericAxis">
            <summary>
            An axis that displays numeric values.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.NumericAxis.ActualMaximumProperty">
            <summary>
            Identifies the ActualMaximum dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.NumericAxis.ActualMinimumProperty">
            <summary>
            Identifies the ActualMinimum dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.NumericAxis.MaximumProperty">
            <summary>
            Identifies the Maximum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.OnMaximumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="d">NumericAxis that changed its Maximum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.OnMaximumPropertyChanged(System.Nullable{System.Double})">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.NumericAxis.MinimumProperty">
            <summary>
            Identifies the Minimum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.OnMinimumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="d">NumericAxis that changed its Minimum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.OnMinimumPropertyChanged(System.Nullable{System.Double})">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.NumericAxis.ExtendRangeToOriginProperty">
            <summary>
            Identifies the ExtendRangeToOrigin dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.OnExtendRangeToOriginPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ExtendRangeToOriginProperty property changed handler.
            </summary>
            <param name="d">NumericAxis that changed its ExtendRangeToOrigin.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.OnExtendRangeToOriginPropertyChanged(System.Boolean,System.Boolean)">
            <summary>
            ExtendRangeToOriginProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.#ctor">
            <summary>
            Instantiates a new instance of the NumericAxis class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.OnActualRangeChanged(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Updates the typed actual maximum and minimum properties when the
            actual range changes.
            </summary>
            <param name="range">The actual range.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.CanPlot(System.Object)">
            <summary>
            Returns a value indicating whether a value can plot.
            </summary>
            <param name="value">The value to plot.</param>
            <returns>A value indicating whether a value can plot.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.CreateAxisLabel">
            <summary>
            Returns a numeric axis label.
            </summary>
            <returns>A numeric axis label.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.OverrideDataRange(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Overrides the data value range and returns a range that takes the
            margins of the values into account.
            </summary>
            <param name="range">The range of data values.</param>
            <returns>A range that can store both the data values and their 
            margins.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.NumericAxis.ActualMaximum">
            <summary>
            Gets the actual maximum value plotted on the chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.NumericAxis.ActualMinimum">
            <summary>
            Gets the actual maximum value plotted on the chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.NumericAxis.Maximum">
            <summary>
            Gets or sets the maximum value plotted on the axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.NumericAxis.Minimum">
            <summary>
            Gets or sets the minimum value to plot on the axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.NumericAxis.ExtendRangeToOrigin">
            <summary>
            Gets or sets a value indicating whether to always show the origin.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.NumericAxis.Origin">
            <summary>
            Gets the origin value on the axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.LinearAxis.IntervalProperty">
            <summary>
            Identifies the Interval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.OnIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IntervalProperty property changed handler.
            </summary>
            <param name="d">LinearAxis that changed its Interval.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.OnIntervalPropertyChanged">
            <summary>
            IntervalProperty property changed handler.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.LinearAxis.ActualIntervalProperty">
            <summary>
            Identifies the ActualInterval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.#ctor">
            <summary>
            Instantiates a new instance of the LinearAxis class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.OnActualRangeChanged(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Updates ActualDoubleRange when ActualRange changes.
            </summary>
            <param name="range">New ActualRange value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.GetPlotAreaCoordinate(System.Object,System.Double)">
            <summary>
            Returns the plot area coordinate of a value.
            </summary>
            <param name="value">The value to plot.</param>
            <param name="length">The length of axis.</param>
            <returns>The plot area coordinate of a value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.GetPlotAreaCoordinate(System.Object,System.Windows.Controls.DataVisualization.Range{System.IComparable},System.Double)">
            <summary>
            Returns the plot area coordinate of a value.
            </summary>
            <param name="value">The value to plot.</param>
            <param name="currentRange">The range of values.</param>
            <param name="length">The length of axis.</param>
            <returns>The plot area coordinate of a value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.GetPlotAreaCoordinate(System.Object,System.Windows.Controls.DataVisualization.Range{System.Double},System.Double)">
            <summary>
            Returns the plot area coordinate of a value.
            </summary>
            <param name="value">The value to plot.</param>
            <param name="currentRange">The range of values.</param>
            <param name="length">The length of axis.</param>
            <returns>The plot area coordinate of a value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.CalculateActualInterval(System.Windows.Size)">
            <summary>
            Returns the actual interval to use to determine which values are 
            displayed in the axis.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>Actual interval to use to determine which values are 
            displayed in the axis.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.GetMajorTickMarkValues(System.Windows.Size)">
            <summary>
            Returns a sequence of values to create major tick marks for.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of values to create major tick marks for.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.GetMajorValues(System.Windows.Size)">
            <summary>
            Returns a sequence of major axis values.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of major axis values.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.GetLabelValues(System.Windows.Size)">
            <summary>
            Returns a sequence of values to plot on the axis.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of values to plot on the axis.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.AlignToInterval(System.Double,System.Double)">
            <summary>
            Aligns a value to the provided interval value.  The aligned value
            should always be smaller than or equal to than the provided value.
            </summary>
            <param name="value">The value to align to the interval.</param>
            <param name="interval">The interval to align to.</param>
            <returns>The aligned value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.GetValueAtPosition(System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Returns the value range given a plot area coordinate.
            </summary>
            <param name="value">The plot area position.</param>
            <returns>The value at that plot area coordinate.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.LengthToRange(System.Double,System.Double)">
            <summary>
            Function that uses the mid point of all the data values
            in the value margins to convert a length into a range
            of data with the mid point as the center of that range.
            </summary>
            <param name="midPoint">The mid point of the range.</param>
            <param name="length">The length of the range.</param>
            <returns>The range object.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.OverrideDataRange(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Overrides the actual range to ensure that it is never set to an
            empty range.
            </summary>
            <param name="range">The range to override.</param>
            <returns>Returns the overridden range.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LinearAxis.Interval">
            <summary>
            Gets or sets the axis interval.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LinearAxis.ActualInterval">
            <summary>
            Gets the actual interval of the axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LinearAxis.ActualDoubleRange">
            <summary>
            Gets the actual range of double values.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.NumericAxisLabel">
            <summary>
            A label used to display numeric axis values.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxisLabel.#ctor">
            <summary>
            Instantiates a new instance of the NumericAxisLabel class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.BarDataPoint">
            <summary>
            Represents a data point used for a bar series.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BarDataPoint.#ctor">
            <summary>
            Initializes a new instance of the BarDataPoint class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint">
            <summary>
            Represents a data point used for a bubble series.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.SizeProperty">
            <summary>
            Identifies the Size dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.OnSizePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SizeProperty property changed handler.
            </summary>
            <param name="d">BubbleDataPoint that changed its Size.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.OnSizePropertyChanged(System.Double,System.Double)">
            <summary>
            SizeProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.ActualSizeProperty">
            <summary>
            Identifies the ActualSize dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.OnActualSizePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ActualSizeProperty property changed handler.
            </summary>
            <param name="d">BubbleDataPoint that changed its ActualSize.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.OnActualSizePropertyChanged(System.Double,System.Double)">
            <summary>
            ActualSizeProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.#ctor">
            <summary>
            Initializes a new instance of the bubble data point.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.Size">
            <summary>
            Gets or sets the size value of the bubble data point.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.SizePropertyChanged">
            <summary>
            This event is raised when the size property is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.ActualSize">
            <summary>
            Gets or sets the actual size of the bubble data point.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.ActualSizePropertyChanged">
            <summary>
            This event is raised when the actual size property is changed.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ColumnDataPoint">
            <summary>
            Represents a data point used for a column series.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnDataPoint.#ctor">
            <summary>
            Initializes a new instance of the ColumnDataPoint class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ISeriesHost">
            <summary>
            Defines properties, methods and events for classes that host a 
            collection of Series objects.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.IResourceDictionaryDispenser">
            <summary>
            Represents a service that dispenses ResourceDictionaries.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.IResourceDictionaryDispenser.GetResourceDictionariesWhere(System.Func{System.Windows.ResourceDictionary,System.Boolean})">
            <summary>
            Returns a rotating enumerator of ResourceDictionaries coordinated with
            the style dispenser object to ensure that no two enumerators are
            currently on the same one if possible.  If the dispenser is reset or
            its collection is changed then the enumerators will also be reset.
            </summary>
            <param name="predicate">A predicate that returns a value
            indicating whether to return a ResourceDictionary.</param>
            <returns>An enumerator of ResourceDictionaries.</returns>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.IResourceDictionaryDispenser.ResourceDictionariesChanged">
            <summary>
            Event that is invoked when the StyleDispenser's ResourceDictionaries have changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ISeriesHost.Axes">
            <summary>
            Gets the collection of axes the series host has available.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ISeriesHost.Series">
            <summary>
            Gets the collection of series the series host has available.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ISeriesHost.ForegroundElements">
            <summary>
            Gets the foreground elements.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ISeriesHost.BackgroundElements">
            <summary>
            Gets the background elements.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ISeriesHostExtensions">
            <summary>
            Extension methods for series hosts.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ISeriesHostExtensions.GetDescendentSeries(System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            Gets all series that track their global indexes recursively.
            </summary>
            <param name="rootSeriesHost">The root series host.</param>
            <returns>A sequence of series.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ISeriesHostExtensions.IsUsedByASeries(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            Gets a value indicating whether an axis is in use by the series 
            host.
            </summary>
            <param name="that">The series host.</param>
            <param name="axis">The axis that may or may not be used by a 
            series.</param>
            <returns>A value indicating whether an axis is in use by the series 
            host.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection">
            <summary>
            An axes collection used by a series host.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.UniqueObservableCollection`1">
            <summary>
            An observable collection that does not allow duplicates.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UniqueObservableCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an item at an index. Throws if the item already exists in the collection.
            </summary>
            <param name="index">The index at which to insert the item.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UniqueObservableCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Sets an item at a given index. Throws if the item already exists at another index.
            </summary>
            <param name="index">The index at which to insert the item.</param>
            <param name="item">The item to be inserted.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UniqueObservableCollection`1.ClearItems">
            <summary>
            Clears all items in the collection by removing them individually.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection.#ctor(System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            Instantiates a new instance of the SeriesHostAxesCollection class.
            </summary>
            <param name="seriesHost">The series host.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection.#ctor(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.UniqueObservableCollection{System.Windows.Controls.DataVisualization.Charting.IAxis})">
            <summary>
            Instantiates a new instance of the SeriesHostAxesCollection class.
            </summary>
            <param name="seriesHost">The series host.</param>
            <param name="persistentAxes">A collection of axes that can never be 
            removed from the chart.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection.ThisCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            A method that attaches and removes listeners to axes added to this
            collection.
            </summary>
            <param name="sender">This object.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection.AxisRegisteredListenersCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Remove an axis from the collection if it is no longer used.
            </summary>
            <param name="sender">The axis that has had its registered 
            listeners collection changed.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection.PersistentAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This method synchronizes the collection with the persistent axes 
            collection when it is changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection.RemoveItem(System.Int32)">
            <summary>
            Removes an item from the axes collection but throws an exception
            if a series in the series host is listening to it.
            </summary>
            <param name="index">The index of the item being removed.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection.SeriesHost">
            <summary>
            Gets or sets the series host field.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection.PersistentAxes">
            <summary>
            Gets or sets a collection of axes cannot be removed under any 
            circumstances.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.AreaSeries">
            <summary>
            Represents a control that contains a data series to be rendered in X/Y 
            line format.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1">
            <summary>
            A base class that contains methods used by both the line and area series.
            </summary>
            <typeparam name="T">The type of data point used by the series.</typeparam>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes">
            <summary>
            A dynamic series with axes and only one legend item and style for all 
            data points.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes">
            <summary>
            Represents a dynamic series that uses axes to display data points.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DataPointSeries">
            <summary>
            Represents a control that contains a dynamic data series.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.Series">
            <summary>
            Represents a control that contains a data series.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ISeries">
            <summary>
            Represents a series in a chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ISeries.LegendItems">
            <summary>
            Gets a list of the legend items associated with the object.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Series.TitleName">
            <summary>
            The name of the Title property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Series._seriesHost">
            <summary>
            Stores the Parent instance the Series belongs to.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Series.OnSeriesHostPropertyChanged(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            Called when the value of the SeriesHost property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new series host value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Series.TitleProperty">
            <summary>
            Identifies the Title dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Series.OnTitleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TitleProperty property changed callback.
            </summary>
            <param name="o">Series for which the Title changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Series.OnTitleChanged(System.Object,System.Object)">
            <summary>
            Called when the Title property changes.
            </summary>
            <param name="oldValue">The old value of the Title property.</param>
            <param name="newValue">The new value of the Title property.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Series.#ctor">
            <summary>
            Initializes a new instance of the Series class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Series.SeriesHost">
            <summary>
            Gets or sets the parent instance the Series belongs to.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Series.LegendItems">
            <summary>
            Gets the legend items to be added to the legend.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Series.Title">
            <summary>
            Gets or sets the title content of the Series.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.PlotAreaName">
            <summary>
            The name of the template part with the plot area.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.DataPointStyleName">
            <summary>
            The name of the DataPointStyle property and ResourceDictionary entry.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.LegendItemStyleName">
            <summary>
            The name of the LegendItemStyle property and ResourceDictionary entry.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.ActualLegendItemStyleName">
            <summary>
            The name of the ActualLegendItemStyle property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries._storyBoardQueue">
            <summary>
            Queue of hide/reveal storyboards to play.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries._dependentValueBinding">
            <summary>
            The binding used to identify the dependent value binding.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries._dataPointsByObject">
            <summary>
            Data points collection sorted by object.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries._independentValueBinding">
            <summary>
            The binding used to identify the independent value binding.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnItemsSourceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemsSourceProperty property changed callback.
            </summary>
            <param name="o">Series for which the ItemsSource changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Called when the ItemsSource property changes.
            </summary>
            <param name="oldValue">Old value of the ItemsSource property.</param>
            <param name="newValue">New value of the ItemsSource property.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.TransitionEasingFunctionProperty">
            <summary>
            Identifies the TransitionEasingFunction dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.IsSelectionEnabledProperty">
            <summary>
            Identifies the IsSelectionEnabled dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnIsSelectionEnabledPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsSelectionEnabledProperty property changed handler.
            </summary>
            <param name="d">DynamicSeries that changed its IsSelectionEnabled.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnIsSelectionEnabledPropertyChanged(System.Boolean,System.Boolean)">
            <summary>
            IsSelectionEnabledProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.AnimationSequenceProperty">
            <summary>
            Identifies the AnimationSequence dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries._weakEventListener">
            <summary>
            WeakEventListener used to handle INotifyCollectionChanged events.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries._plotArea">
            <summary>
            The plot area canvas.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries._processingOnSelectedItemPropertyChanged">
            <summary>
            Tracks whether a call to OnSelectedItemPropertyChanged is already in progress.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.SelectedItemProperty">
            <summary>
            Identifies the SelectedItem dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnSelectedItemPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the SelectedItem property changes.
            </summary>
            <param name="d">DynamicSeries that changed its SelectedItem.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnSelectedItemPropertyChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the SelectedItem property changes.
            </summary>
            <param name="oldValue">The old selected index.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.DataPointStyleProperty">
            <summary>
            Identifies the DataPointStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DataPointStyleProperty property changed handler.
            </summary>
            <param name="d">DataPointSingleSeriesWithAxes that changed its DataPointStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointStylePropertyChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            DataPointStyleProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.LegendItemStyleProperty">
            <summary>
            Identifies the LegendItemStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnLegendItemStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            LegendItemStyleProperty property changed handler.
            </summary>
            <param name="d">DataPointSeries that changed its LegendItemStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnLegendItemStylePropertyChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            Called when the value of the LegendItemStyle property changes.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries._needRefreshWhenSizeChanged">
            <summary>
            Indicates whether a call to Refresh is required when the control's
            size changes.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.TransitionDurationProperty">
            <summary>
            Identifies the TransitionDuration dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.#ctor">
            <summary>
            Initializes a new instance of the DataPointSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.AddObject(System.Object)">
            <summary>
            Adds an object to the series host by creating a corresponding data point
            for it.
            </summary>
            <param name="dataContext">The object to add to the series host.</param>
            <returns>The data point created for the object.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.ShouldCreateDataPoint(System.Object)">
            <summary>
            Returns whether a data point should be created for the data context.
            </summary>
            <param name="dataContext">The data context that will be used for the
            data point.</param>
            <returns>A value indicating whether a data point should be created
            for the data context.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.GetInsertionIndex(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Returns the index at which to insert data point in the plot area
            child collection.
            </summary>
            <param name="dataPoint">The data point to retrieve the insertion
            index for.</param>
            <returns>The insertion index.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.AddDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Adds a data point to the plot area.
            </summary>
            <param name="dataPoint">The data point to add to the plot area.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.GetDataPoint(System.Object)">
            <summary>
            Retrieves the data point corresponding to the object passed as the
            parameter.
            </summary>
            <param name="dataContext">The data context used for the point.
            </param>
            <returns>The data point associated with the object.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.CreateAndPrepareDataPoint(System.Object)">
            <summary>
            Creates and prepares a data point.
            </summary>
            <param name="dataContext">The object to use as the data context
            of the data point.</param>
            <returns>The newly created data point.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.CreateDataPoint">
            <summary>
            Returns a Control suitable for the Series.
            </summary>
            <returns>The DataPoint instance.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.CreateLegendItem(System.Windows.Controls.DataVisualization.Charting.DataPointSeries)">
            <summary>
            Creates a legend item.
            </summary>
            <returns>A legend item for insertion in the legend items collection.
            </returns>
            <param name="owner">The owner of the new LegendItem.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.ItemsSourceCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Method that handles the ObservableCollection.CollectionChanged event for the ItemsSource property.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.LoadDataPoints(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Updates data points collection with items retrieved from items
            source and removes the old items.
            </summary>
            <param name="newItems">The items to load.</param>
            <param name="oldItems">The items to remove.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnApplyTemplate">
            <summary>
            Attaches handler plot area after loading it from XAML.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.InvokeOnLayoutUpdated(System.Action)">
            <summary>
            Invokes an action when the plot area's layout is updated.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnSeriesHostPropertyChanged(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            Handles changes to the SeriesHost property.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointsChanged(System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint},System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Called after data points have been loaded from the items source.
            </summary>
            <param name="newDataPoints">New active data points.</param>
            <param name="oldDataPoints">Old inactive data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnItemsSourceCollectionChanged(System.Collections.IEnumerable,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Method called when the ItemsSource collection changes.
            </summary>
            <param name="collection">New value of the collection.</param>
            <param name="e">Information about the change.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnPlotAreaChanged(System.Windows.Controls.Panel,System.Windows.Controls.Panel)">
            <summary>
            Removes items from the existing plot area and adds items to new
            plot area.
            </summary>
            <param name="oldValue">The previous plot area.</param>
            <param name="newValue">The new plot area.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Updates the visual appearance of all the data points when the size
            changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.Refresh">
            <summary>
            Refreshes data from data source and renders the series.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.RemoveObject(System.Object)">
            <summary>
            Removes an object from the series host by removing its corresponding
            data point.
            </summary>
            <param name="dataContext">The object to remove from the series data
            source.</param>
            <returns>The data point corresponding to the removed object.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.RemoveDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Removes a data point from the plot area.
            </summary>
            <param name="dataPoint">The data point to remove.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.UpdateDataPoints(System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Updates the visual representation of all data points in the plot
            area.
            </summary>
            <param name="dataPoints">A sequence of data points to update.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.AttachEventHandlersToDataPoints(System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Attaches event handlers to the data points.
            </summary>
            <param name="dataPoints">A sequence of data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.DetachEventHandlersFromDataPoints(System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Detaches event handlers from the data points.
            </summary>
            <param name="dataPoints">A sequence of data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.AttachEventHandlersToDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Attaches event handlers to a data point.
            </summary>
            <param name="dataPoint">The data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.Unselect(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Unselects a data point.
            </summary>
            <param name="dataPoint">The data point to unselect.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.Select(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Selects a data point.
            </summary>
            <param name="dataPoint">The data point to select.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointIsSelectedChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Method executed when a data point is either selected or unselected.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.DetachEventHandlersFromDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Detaches event handlers from a data point.
            </summary>
            <param name="dataPoint">The data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnBeforeUpdateDataPoints">
            <summary>
            This method that executes before data points are updated.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnAfterUpdateDataPoints">
            <summary>
            This method that executes after data points are updated.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.UpdateDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Updates the visual representation of a single data point in the plot
            area.
            </summary>
            <param name="dataPoint">The data point to update.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.PrepareDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object)">
            <summary>
            Prepares a data point by extracting binding it to a data context
            object.
            </summary>
            <param name="dataPoint">A data point.</param>
            <param name="dataContext">A data context object.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.StaggeredStateChange(System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.DataPoint},System.Int32,System.Windows.Controls.DataVisualization.Charting.DataPointState)">
            <summary>
            Reveals data points using a storyboard.
            </summary>
            <param name="dataPoints">The data points to change the state of.
            </param>
            <param name="dataPointCount">The number of data points in the sequence.</param>
            <param name="newState">The state to change to.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointStateChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Windows.Controls.DataVisualization.Charting.DataPointState})">
            <summary>
            Handles data point state property change.
            </summary>
            <param name="sender">The data point.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointStateChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Windows.Controls.DataVisualization.Charting.DataPointState,System.Windows.Controls.DataVisualization.Charting.DataPointState)">
            <summary>
            Handles data point state property change.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointActualDependentValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.IComparable})">
            <summary>
            Handles data point actual dependent value property changes.
            </summary>
            <param name="sender">The data point.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointActualDependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.IComparable,System.IComparable)">
            <summary>
            Handles data point actual dependent value property change.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointActualIndependentValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            Handles data point actual independent value property changes.
            </summary>
            <param name="sender">The data point.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointActualIndependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object,System.Object)">
            <summary>
            Handles data point actual independent value property change.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointDependentValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.IComparable})">
            <summary>
            Handles data point dependent value property changes.
            </summary>
            <param name="sender">The data point.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointDependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.IComparable,System.IComparable)">
            <summary>
            Handles data point dependent value property change.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointIndependentValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            Handles data point independent value property changes.
            </summary>
            <param name="sender">The data point.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointIndependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object,System.Object)">
            <summary>
            Handles data point independent value property change.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.GetResourceDictionaryWithTargetType(System.Windows.Controls.DataVisualization.IResourceDictionaryDispenser,System.Type,System.Boolean)">
            <summary>
            Returns a ResourceDictionaryEnumerator that returns ResourceDictionaries with a
            DataPointStyle having the specified TargetType or with a TargetType that is an
            ancestor of the specified type.
            </summary>
            <param name="dispenser">The ResourceDictionaryDispenser.</param>
            <param name="targetType">The TargetType.</param>
            <param name="takeAncestors">A value indicating whether to accept ancestors of the TargetType.</param>
            <returns>A ResourceDictionary enumerator.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.DependentValueBinding">
            <summary>
            Gets or sets the Binding to use for identifying the dependent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.DependentValuePath">
            <summary>
            Gets or sets the Binding Path to use for identifying the dependent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.IndependentValueBinding">
            <summary>
            Gets or sets the Binding to use for identifying the independent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.IndependentValuePath">
            <summary>
            Gets or sets the Binding Path to use for identifying the independent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.ItemsSource">
            <summary>
            Gets or sets a collection used to contain the data points of the Series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.AnimationSequence">
            <summary>
            Gets or sets the animation sequence to use for the DataPoints of the Series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.ActiveDataPoints">
            <summary>
            Gets a stream of the active data points in the plot area.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.ActiveDataPointCount">
            <summary>
            Gets the number of active data points in the plot area.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.TransitionEasingFunction">
            <summary>
            Gets or sets the easing function to use when transitioning the
            data points.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.IsSelectionEnabled">
            <summary>
            Gets or sets a value indicating whether elements in the series can
            be selected.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.PlotArea">
            <summary>
            Gets the plot area canvas.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.PlotAreaSize">
            <summary>
            Gets the size of the plot area.
            </summary>
            <remarks>
            Use this method instead of PlotArea.ActualWidth/ActualHeight
            because the ActualWidth and ActualHeight properties are set after
            the SizeChanged handler runs.
            </remarks>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.SelectionChanged">
            <summary>
            Event raised when selection has changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.TemplateApplied">
            <summary>
            Gets or sets a value indicating whether the template has been
            applied.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.DataPointStyle">
            <summary>
            Gets or sets the style to use for the data points.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.LegendItemStyle">
            <summary>
            Gets or sets the style to use for the legend items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.ClipGeometry">
            <summary>
            Gets or sets the Geometry used to clip DataPoints to the PlotArea bounds.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.TransitionDuration">
            <summary>
            Gets or sets the duration of the value Transition animation.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.UpdatingDataPoints">
            <summary>
            Gets a value indicating whether all data points are being
            updated.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.CreateRangeAxisFromData(System.Object)">
            <summary>
            Creates the correct range axis based on the data.
            </summary>
            <param name="value">The value to evaluate to determine which type of
            axis to create.</param>
            <returns>The range axis appropriate that can plot the provided
            value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.GetActualDataPointAxisValue(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            Retrieves the value for a given access from a data point.
            </summary>
            <param name="dataPoint">The data point to retrieve the value from.</param>
            <param name="axis">The axis to retrieve the value for.</param>
            <returns>A function that returns a value appropriate for the axis
            when provided a DataPoint.</returns>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes._internalDependentAxis">
            <summary>
            Stores the internal dependent axis.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.OnInternalDependentAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IAxis,System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            DependentAxisProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes._internalIndependentAxis">
            <summary>
            The internal independent axis.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.OnInternalIndependentAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IAxis,System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.#ctor">
            <summary>
            Initializes a new instance of the DataPointSeriesWithAxes class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.OnDataPointActualDependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.IComparable,System.IComparable)">
            <summary>
            Update the axes when the specified data point's ActualDependentValue property changes.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.OnDataPointDependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.IComparable,System.IComparable)">
            <summary>
            Update the axes when the specified data point's DependentValue property changes.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.UpdateActualDependentAxis">
            <summary>
            Update axes when the specified data point's effective dependent value changes.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.OnDataPointActualIndependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object,System.Object)">
            <summary>
            Update axes when the specified data point's actual independent value changes.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.OnDataPointIndependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object,System.Object)">
            <summary>
            Update axes when the specified data point's independent value changes.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.UpdateActualIndependentAxis">
            <summary>
            Update axes when a data point's effective independent value changes.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.OnDataPointsChanged(System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint},System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Called after data points have been loaded from the items source.
            </summary>
            <param name="newDataPoints">New active data points.</param>
            <param name="oldDataPoints">Old inactive data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.UpdateDataPoints(System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Only updates all data points if series has axes.
            </summary>
            <param name="dataPoints">A sequence of data points to update.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.GetAxes">
            <summary>
            Method called to get series to acquire the axes it needs.  Acquires
            no axes by default.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.GetAxes(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Method called to get series to acquire the axes it needs.  Acquires
            no axes by default.
            </summary>
            <param name="firstDataPoint">The first data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.GetAxes(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Func{System.Windows.Controls.DataVisualization.Charting.IAxis,System.Boolean},System.Func{System.Windows.Controls.DataVisualization.Charting.IAxis},System.Func{System.Windows.Controls.DataVisualization.Charting.IAxis,System.Boolean},System.Func{System.Windows.Controls.DataVisualization.Charting.IAxis})">
            <summary>
            Method called to get the axes that the series needs.
            </summary>
            <param name="firstDataPoint">The first data point.</param>
            <param name="independentAxisPredicate">A predicate that returns
            a value indicating whether an axis is an acceptable candidate for
            the series independent axis.</param>
            <param name="independentAxisFactory">A function that creates an
            acceptable independent axis.</param>
            <param name="dependentAxisPredicate">A predicate that returns
            a value indicating whether an axis is an acceptable candidate for
            the series dependent axis.</param>
            <param name="dependentAxisFactory">A function that creates an
            acceptable dependent axis.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.System#Windows#Controls#DataVisualization#Charting#IAxisListener#AxisInvalidated(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            Updates data points when the axis is invalidated.
            </summary>
            <param name="axis">The axis that was invalidated.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.GetRange(System.Windows.Controls.DataVisualization.Charting.IRangeConsumer)">
            <summary>
            Returns the actual range of data for a given axis.
            </summary>
            <param name="consumer">The axis to retrieve the range for.</param>
            <returns>The actual range of data.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.GetValueMargins(System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer)">
            <summary>
            Returns the value margins for a given axis.
            </summary>
            <param name="consumer">The axis to retrieve the value margins for.
            </param>
            <returns>A sequence of value margins.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.System#Windows#Controls#DataVisualization#Charting#IDataProvider#GetData(System.Windows.Controls.DataVisualization.Charting.IDataConsumer)">
            <summary>
            Returns data to a data consumer.
            </summary>
            <param name="dataConsumer">The data consumer requesting the data.
            </param>
            <returns>The data for a given data consumer.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.OnSeriesHostPropertyChanged(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            Called when the value of the SeriesHost property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new series host value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.System#Windows#Controls#DataVisualization#Charting#IRangeProvider#GetRange(System.Windows.Controls.DataVisualization.Charting.IRangeConsumer)">
            <summary>
            Returns the data range.
            </summary>
            <param name="rangeConsumer">The consumer requesting the range.</param>
            <returns>The data range.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.System#Windows#Controls#DataVisualization#Charting#IValueMarginProvider#GetValueMargins(System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer)">
            <summary>
            Returns the value margins for a given axis.
            </summary>
            <param name="axis">The axis to retrieve the value margins for.
            </param>
            <returns>A sequence of value margins.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.DataPointsByActualDependentValue">
            <summary>
            Gets or sets the data points by dependent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.InternalActualDependentAxis">
            <summary>
            Gets or sets the actual dependent axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.InternalDependentAxis">
            <summary>
            Gets or sets the value of the internal dependent axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.InternalActualIndependentAxis">
            <summary>
            Gets or sets the actual independent axis value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.InternalIndependentAxis">
            <summary>
            Gets or sets the value of the internal independent axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.UpdatingAllAxes">
            <summary>
            Gets or sets a value indicating whether to the axes are being 
            updated.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.AxesInvalidated">
            <summary>
            Gets or sets a value indicating whether the axes have been 
            invalidated.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IRequireGlobalSeriesIndex">
            <summary>
            Defines methods on classes that contain a global index.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IRequireGlobalSeriesIndex.GlobalSeriesIndexChanged(System.Nullable{System.Int32})">
            <summary>
            Occurs when a global series index changes.
            </summary>
            <param name="globalIndex">The global index that has changed.
            </param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.ActualDataPointStyleName">
            <summary>
            Name of the ActualDataPointStyle property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes._legendItem">
            <summary>
            Stores the LegendItem for the series.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.OnDataPointStylePropertyChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            DataPointStyleProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.ActualDataPointStyleProperty">
            <summary>
            Identifies the ActualDataPointStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.ActualLegendItemStyleProperty">
            <summary>
            Identifies the ActualLegendItemStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.OnLegendItemStylePropertyChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            Called when the value of the LegendItemStyle property changes.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.GlobalSeriesIndexProperty">
            <summary>
            Identifies the GlobalSeriesIndex dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.OnGlobalSeriesIndexPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            GlobalSeriesIndexProperty property changed handler.
            </summary>
            <param name="d">Series that changed its Index.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.OnGlobalSeriesIndexPropertyChanged(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            GlobalSeriesIndexProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.OnTitleChanged(System.Object,System.Object)">
            <summary>
            Called when the Title property changes.
            </summary>
            <param name="oldValue">Old value of the Title property.</param>
            <param name="newValue">New value of the Title property.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.#ctor">
            <summary>
            Initializes a new instance of the DataPointSingleSeriesWithAxes class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.GetResourceDictionaryEnumeratorFromHost">
            <summary>
            Returns the custom ResourceDictionary to use for necessary resources.
            </summary>
            <returns>
            ResourceDictionary to use for necessary resources.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.OnPlotAreaChanged(System.Windows.Controls.Panel,System.Windows.Controls.Panel)">
            <summary>
            Insert grid containing data point used for legend item into the 
            plot area.
            </summary>
            <param name="oldValue">The old plot area.</param>
            <param name="newValue">The new plot area.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.OnSeriesHostPropertyChanged(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            When the series host property is set retrieves a style to use for all the
            data points.
            </summary>
            <param name="oldValue">The old series host value.</param>
            <param name="newValue">The new series host value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.CreateLegendItemDataPoint">
            <summary>
            Creates the LegendItem Control if conditions are right.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.OnDataPointsChanged(System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint},System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Called after data points have been loaded from the items source.
            </summary>
            <param name="newDataPoints">New active data points.</param>
            <param name="oldDataPoints">Old inactive data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.PrepareDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object)">
            <summary>
            Sets the style of the data point to the single style used for all
            data points.
            </summary>
            <param name="dataPoint">The data point to apply the style to.
            </param>
            <param name="dataContext">The object associated with the data point.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.GlobalSeriesIndexChanged(System.Nullable{System.Int32})">
            <summary>
            This method updates the global series index property.
            </summary>
            <param name="globalIndex">The global index of the series.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.SeriesHostResourceDictionariesChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the SeriesHost's ResourceDictionariesChanged event.
            </summary>
            <param name="sender">ISeriesHost instance.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.DispensedResourcesChanging">
            <summary>
            Processes the change of the DispensedResources property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.LegendItem">
            <summary>
            Gets the single legend item associated with the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.PaletteResources">
            <summary>
            Gets the Palette-dispensed ResourceDictionary for the Series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.CustomTitleInUse">
            <summary>
            Gets or sets a value indicating whether a custom title is in use.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.ActualDataPointStyle">
            <summary>
            Gets or sets the actual style used for the data points.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.ActualLegendItemStyle">
            <summary>
            Gets or sets the actual style used for the legend item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.GlobalSeriesIndex">
            <summary>
            Gets the index of the series in the Parent's series collection.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.DependentRangeAxisProperty">
            <summary>
            Identifies the DependentRangeAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.OnDependentRangeAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="d">LineAreaBaseSeries that changed its DependentRangeAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.OnDependentRangeAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IRangeAxis)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.IndependentAxisProperty">
            <summary>
            Identifies the IndependentAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.OnIndependentAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="d">LineAreaBaseSeries that changed its IndependentAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.OnIndependentAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.#ctor">
            <summary>
            Initializes a new instance of the LineAreaBaseSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.OnApplyTemplate">
            <summary>
            Creates a DataPoint for determining the line color.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.OnDataPointsChanged(System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint},System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Called after data points have been loaded from the items source.
            </summary>
            <param name="newDataPoints">New active data points.</param>
            <param name="oldDataPoints">Old inactive data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.OnAfterUpdateDataPoints">
            <summary>
            This method executes after all data points have been updated.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.OnDataPointIndependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object,System.Object)">
            <summary>
            Repositions line data point in the sorted collection if the actual 
            independent axis is a range axis.
            </summary>
            <param name="dataPoint">The data point that has changed.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.CreateDataPoint">
            <summary>
            Creates a new line data point.
            </summary>
            <returns>A line data point.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.GetResourceDictionaryEnumeratorFromHost">
            <summary>
            Returns the custom ResourceDictionary to use for necessary resources.
            </summary>
            <returns>
            ResourceDictionary to use for necessary resources.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.UpdateDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Updates the visual representation of the data point.
            </summary>
            <param name="dataPoint">The data point to update.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.UpdateShape">
            <summary>
            Updates the Series shape object.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.UpdateShapeFromPoints(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Updates the Series shape object from a collection of Points.
            </summary>
            <param name="points">Collection of Points.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.DependentRangeAxis">
            <summary>
            Gets or sets the dependent range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.IndependentAxis">
            <summary>
            Gets or sets the independent range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.DataPointsByIndependentValue">
            <summary>
            Gets data points collection sorted by independent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.ActualIndependentAxis">
            <summary>
            Gets the independent axis as a range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.ActualDependentRangeAxis">
            <summary>
            Gets the dependent axis as a range axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AreaSeries.GeometryProperty">
            <summary>
            Identifies the Geometry dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AreaSeries.PathStyleProperty">
            <summary>
            Identifies the PathStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaSeries.#ctor">
            <summary>
            Initializes a new instance of the AreaSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaSeries.GetAxes(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Acquire a horizontal linear axis and a vertical linear axis.
            </summary>
            <param name="firstDataPoint">The first data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaSeries.UpdateShapeFromPoints(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Updates the Series shape object from a collection of Points.
            </summary>
            <param name="points">Collection of Points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaSeries.GetValueMargins(System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer)">
            <summary>
            Remove value margins from the side of the data points to ensure
            that area chart is flush against the edge of the chart.
            </summary>
            <param name="consumer">The value margin consumer.</param>
            <returns>A sequence of value margins.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.AreaSeries.Geometry">
            <summary>
            Gets the geometry property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.AreaSeries.PathStyle">
            <summary>
            Gets or sets the style of the Path object that follows the data 
            points.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.AreaSeries.System#Windows#Controls#DataVisualization#Charting#IAnchoredToOrigin#AnchoredAxis">
            <summary>
            Gets the axis to which the series is anchored.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.AreaSeries.AnchoredAxis">
            <summary>
            Gets the axis to which the series is anchored.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.ResourceDictionaryDispensedEventArgs">
            <summary>
            Information describing the ResourceDictionary dispensed when a
            ResourceDictionaryDispensed event is raised.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ResourceDictionaryDispensedEventArgs.#ctor(System.Int32,System.Windows.ResourceDictionary)">
            <summary>
            Initializes a new instance of the ResourceDictionaryDispensedEventArgs class.
            </summary>
            <param name="index">The index of the ResourceDictionary dispensed.</param>
            <param name="resourceDictionary">The ResourceDictionary dispensed.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ResourceDictionaryDispensedEventArgs.Equals(System.Object)">
            <summary>
            Returns a value indicating whether two objects are equal.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            A value indicating whether the two objects are equal.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ResourceDictionaryDispensedEventArgs.GetHashCode">
            <summary>
            Returns a hash code.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.ResourceDictionaryDispensedEventArgs.Index">
            <summary>
            Gets the index of the ResourceDictionary dispensed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.ResourceDictionaryDispensedEventArgs.ResourceDictionary">
            <summary>
            Gets the ResourceDictionary dispensed.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryEnumerator">
            <summary>
            An enumerator that dispenses ResourceDictionaries sequentially by coordinating with
            related enumerators.  Enumerators are related through an association
            with a parent ResourceDictionaryDispenser class.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryEnumerator.index">
            <summary>
            The index of current item in the ResourceDictionaryDispenser's list.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryEnumerator._parentEnumerator">
            <summary>
            The parent enumerator.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryEnumerator.#ctor(System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryDispenser,System.Func{System.Windows.ResourceDictionary,System.Boolean})">
            <summary>
            Initializes a new instance of a ResourceDictionaryEnumerator.
            </summary>
            <param name="dispenser">The dispenser that dispensed this
            ResourceDictionaryEnumerator.</param>
            <param name="predicate">A predicate used to determine which
            ResourceDictionaries to return.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryEnumerator.ResourceDictionaryDispenserParentChanged">
            <summary>
            Called when the parent has changed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryEnumerator.GetIndexOfNextSuitableResourceDictionary(System.Int32)">
            <summary>
            Returns the index of the next suitable style in the list.
            </summary>
            <param name="startIndex">The index at which to start looking.</param>
            <returns>The index of the next suitable ResourceDictionary.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryEnumerator.ResourceDictionaryDispenserResetting">
            <summary>
            Resets the dispenser.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryEnumerator.ResourceDictionaryDispenserResourceDictionaryDispensed(System.Object,System.Windows.Controls.DataVisualization.ResourceDictionaryDispensedEventArgs)">
            <summary>
            This method is invoked when one of the related enumerator's
            dispenses.  The enumerator checks to see if the item
            dispensed would've been the next item it would have returned.  If
            so it updates it's index to the position after the previously
            returned item.
            </summary>
            <param name="sender">The ResourceDictionaryDispenser.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryEnumerator.OnStyleDispensed(System.Windows.Controls.DataVisualization.ResourceDictionaryDispensedEventArgs)">
            <summary>
            Raises the EnumeratorResourceDictionaryDispensed.
            </summary>
            <param name="args">Information about the ResourceDictionary dispensed.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryEnumerator.MoveNext">
            <summary>
            Moves to the next ResourceDictionary.
            </summary>
            <returns>A value indicating whether there are any more suitable
            ResourceDictionary.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryEnumerator.Reset">
            <summary>
            Resets the enumerator.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryEnumerator.Dispose">
            <summary>
            Stops listening to the dispenser.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryEnumerator.CurrentResourceDictionary">
            <summary>
            Gets or sets the current ResourceDictionary.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryEnumerator.ParentEnumerator">
            <summary>
            Gets the parent enumerator.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryEnumerator.Predicate">
            <summary>
            Gets or sets a predicate that returns a value indicating whether a 
            ResourceDictionary should be returned by this enumerator.
            </summary>
            <returns>A value indicating whether a ResourceDictionary can be returned by this
            enumerator.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryEnumerator.ResourceDictionaryDispenser">
            <summary>
            Gets the dispenser that dispensed this enumerator.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryEnumerator.Current">
            <summary>
            Gets the current ResourceDictionary.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current ResourceDictionary.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryEnumerator.ShouldRetrieveFromParentEnumerator">
            <summary>
            Gets a value indicating whether a enumerator should return ResourceDictionaries
            from its parent enumerator.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap">
            <summary>
            A class used to calculate axis range. 
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap.#ctor">
            <summary>
            Initializes a new instance of the ValueMarginCoordinateAndOverlap 
            class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap.ValueMargin">
            <summary>
            Gets or sets the value margin object.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap.Coordinate">
            <summary>
            Gets or sets the coordinate.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap.LeftOverlap">
            <summary>
            Gets or sets the left overlap.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap.RightOverlap">
            <summary>
            Gets or sets the right overlap.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2">
            <summary>
            Implements a left-leaning red-black tree.
            </summary>
            <remarks>
            Based on the research paper "Left-leaning Red-Black Trees"
            by Robert Sedgewick. More information available at:
            http://www.cs.princeton.edu/~rs/talks/LLRB/RedBlack.pdf
            http://www.cs.princeton.edu/~rs/talks/LLRB/08Penn.pdf
            </remarks>
            <typeparam name="TKey">Type of keys.</typeparam>
            <typeparam name="TValue">Type of values.</typeparam>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2._keyComparison">
            <summary>
            Stores the key comparison function.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2._valueComparison">
            <summary>
            Stores the value comparison function.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2._rootNode">
            <summary>
            Stores the root node of the tree.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new instance of the LeftLeaningRedBlackTree class implementing a normal dictionary.
            </summary>
            <param name="keyComparison">The key comparison function.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.#ctor(System.Comparison{`0},System.Comparison{`1})">
            <summary>
            Initializes a new instance of the LeftLeaningRedBlackTree class implementing an ordered multi-dictionary.
            </summary>
            <param name="keyComparison">The key comparison function.</param>
            <param name="valueComparison">The value comparison function.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Add(`0,`1)">
            <summary>
            Adds a key/value pair to the tree.
            </summary>
            <param name="key">Key to add.</param>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Remove(`0)">
            <summary>
            Removes a key (and its associated value) from a normal (non-multi) dictionary.
            </summary>
            <param name="key">Key to remove.</param>
            <returns>True if key present and removed.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Remove(`0,`1)">
            <summary>
            Removes a key/value pair from the tree.
            </summary>
            <param name="key">Key to remove.</param>
            <param name="value">Value to remove.</param>
            <returns>True if key/value present and removed.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Clear">
            <summary>
            Removes all nodes in the tree.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.GetKeys">
            <summary>
            Gets a sorted list of keys in the tree.
            </summary>
            <returns>Sorted list of keys.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.GetValueForKey(`0)">
            <summary>
            Gets the value associated with the specified key in a normal (non-multi) dictionary.
            </summary>
            <param name="key">Specified key.</param>
            <returns>Value associated with the specified key.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.GetValuesForKey(`0)">
            <summary>
            Gets a sequence of the values associated with the specified key.
            </summary>
            <param name="key">Specified key.</param>
            <returns>Sequence of values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.GetValuesForAllKeys">
            <summary>
            Gets a sequence of all the values in the tree.
            </summary>
            <returns>Sequence of all values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.IsRed(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node)">
            <summary>
            Returns true if the specified node is red.
            </summary>
            <param name="node">Specified node.</param>
            <returns>True if specified node is red.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Add(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node,`0,`1)">
            <summary>
            Adds the specified key/value pair below the specified root node.
            </summary>
            <param name="node">Specified node.</param>
            <param name="key">Key to add.</param>
            <param name="value">Value to add.</param>
            <returns>New root node.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Remove(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node,`0,`1)">
            <summary>
            Removes the specified key/value pair from below the specified node.
            </summary>
            <param name="node">Specified node.</param>
            <param name="key">Key to remove.</param>
            <param name="value">Value to remove.</param>
            <returns>True if key/value present and removed.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.FlipColor(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node)">
            <summary>
            Flip the colors of the specified node and its direct children.
            </summary>
            <param name="node">Specified node.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.RotateLeft(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node)">
            <summary>
            Rotate the specified node "left".
            </summary>
            <param name="node">Specified node.</param>
            <returns>New root node.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.RotateRight(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node)">
            <summary>
            Rotate the specified node "right".
            </summary>
            <param name="node">Specified node.</param>
            <returns>New root node.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.MoveRedLeft(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node)">
            <summary>
            Moves a red node from the right child to the left child.
            </summary>
            <param name="node">Parent node.</param>
            <returns>New root node.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.MoveRedRight(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node)">
            <summary>
            Moves a red node from the left child to the right child.
            </summary>
            <param name="node">Parent node.</param>
            <returns>New root node.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.DeleteMinimum(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node)">
            <summary>
            Deletes the minimum node under the specified node.
            </summary>
            <param name="node">Specified node.</param>
            <returns>New root node.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.FixUp(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node)">
            <summary>
            Maintains invariants by adjusting the specified nodes children.
            </summary>
            <param name="node">Specified node.</param>
            <returns>New root node.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.GetNodeForKey(`0)">
            <summary>
            Gets the (first) node corresponding to the specified key.
            </summary>
            <param name="key">Key to search for.</param>
            <returns>Corresponding node or null if none found.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.GetExtreme``1(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node,System.Func{System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node,System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node},System.Func{System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node,``0})">
            <summary>
            Gets an extreme (ex: minimum/maximum) value.
            </summary>
            <typeparam name="T">Type of value.</typeparam>
            <param name="node">Node to start from.</param>
            <param name="successor">Successor function.</param>
            <param name="selector">Selector function.</param>
            <returns>Extreme value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Traverse``1(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node,System.Func{System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node,System.Boolean},System.Func{System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node,``0})">
            <summary>
            Traverses a subset of the sequence of nodes in order and selects the specified nodes.
            </summary>
            <typeparam name="T">Type of elements.</typeparam>
            <param name="node">Starting node.</param>
            <param name="condition">Condition method.</param>
            <param name="selector">Selector method.</param>
            <returns>Sequence of selected nodes.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.KeyAndValueComparison(`0,`1,`0,`1)">
            <summary>
            Compares the specified keys (primary) and values (secondary).
            </summary>
            <param name="leftKey">The left key.</param>
            <param name="leftValue">The left value.</param>
            <param name="rightKey">The right key.</param>
            <param name="rightValue">The right value.</param>
            <returns>CompareTo-style results: -1 if left is less, 0 if equal, and 1 if greater than right.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.IsMultiDictionary">
            <summary>
            Gets a value indicating whether the tree is acting as an ordered multi-dictionary.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Count">
            <summary>
            Gets the count of key/value pairs in the tree.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.MinimumKey">
            <summary>
            Gets the minimum key in the tree.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.MaximumKey">
            <summary>
            Gets the maximum key in the tree.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.MinimumValue">
            <summary>
            Gets the minimum key's minimum value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.MaximumValue">
            <summary>
            Gets the maximum key's maximum value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Node">
            <summary>
            Represents a node of the tree.
            </summary>
            <remarks>
            Using fields instead of properties drops execution time by about 40%.
            </remarks>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Node.Key">
            <summary>
            Gets or sets the node's key.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Node.Value">
            <summary>
            Gets or sets the node's value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Node.Left">
            <summary>
            Gets or sets the left node.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Node.Right">
            <summary>
            Gets or sets the right node.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Node.IsBlack">
            <summary>
            Gets or sets the color of the node.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Node.Siblings">
            <summary>
            Gets or sets the number of "siblings" (nodes with the same key/value).
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2">
            <summary>
            Implements a dictionary that can store multiple values for the same key.
            </summary>
            <typeparam name="TKey">Type for keys.</typeparam>
            <typeparam name="TValue">Type for values.</typeparam>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the MultipleDictionary class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2.#ctor(System.Boolean,System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the MultipleDictionary class.
            </summary>
            <param name="allowDuplicateValues">The parameter is not used.</param>
            <param name="keyEqualityComparer">The parameter is not used.</param>
            <param name="valueEqualityComparer">The parameter is not used.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2.Add(`0,`1)">
            <summary>
            Adds a key/value pair to the dictionary.
            </summary>
            <param name="key">Key to add.</param>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2.Remove(`0,`1)">
            <summary>
            Removes a key/value pair from the dictionary.
            </summary>
            <param name="key">Key to remove.</param>
            <param name="value">Value to remove.</param>
            <returns>True if the value was present and removed.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2.Clear">
            <summary>
            Clears the items in the dictionary.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2.BinaryTree">
            <summary>
            Gets or sets the BinaryTree instance used to store the dictionary values.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2.Count">
            <summary>
            Gets the count of values in the dictionary.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2.Item(`0)">
            <summary>
            Returns the collection of values corresponding to a key.
            </summary>
            <param name="key">Specified key.</param>
            <returns>Collection of values.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Collections.OrderedMultipleDictionary`2">
            <summary>
            Implements a dictionary that can store multiple values for the same key and sorts the values.
            </summary>
            <typeparam name="TKey">Type for keys.</typeparam>
            <typeparam name="TValue">Type for values.</typeparam>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.OrderedMultipleDictionary`2.#ctor(System.Boolean,System.Comparison{`0},System.Comparison{`1})">
            <summary>
            Initializes a new instance of the MultipleDictionary class.
            </summary>
            <param name="allowDuplicateValues">The parameter is not used.</param>
            <param name="keyComparison">Key comparison class.</param>
            <param name="valueComparison">Value comparison class.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.OrderedMultipleDictionary`2.GetKeyRange">
            <summary>
            Gets a Range corresponding to the keys in the dictionary.
            </summary>
            <returns>Range of keys.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.OrderedMultipleDictionary`2.GetLargestAndSmallestValues">
            <summary>
            Gets the largest and smallest key's extreme values from the dictionary.
            </summary>
            <returns>Tuple of the largest and smallest values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.OrderedMultipleDictionary`2.GetEnumerator">
            <summary>
            Gets an enumerator for the values in the dictionary.
            </summary>
            <returns>Enumerator for values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.OrderedMultipleDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the values in the dictionary.
            </summary>
            <returns>Enumerator for the values.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.GenericEqualityComparer`1">
            <summary>
            A generic equality comparer.
            </summary>
            <typeparam name="T">The type of the objects being compared.</typeparam>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.GenericEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Initializes a new instance of the GenericEqualityComparer class.
            </summary>
            <param name="equalityFunction">A function which determines whether 
            two items are equal.</param>
            <param name="hashCodeFunction">A function that returns a hash code 
            for an object.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.GenericEqualityComparer`1.Equals(`0,`0)">
            <summary>
            A function which determines whether two items are equal.
            </summary>
            <param name="x">The left object.</param>
            <param name="y">The right object.</param>
            <returns>A value indicating whether the objects. are equal.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.GenericEqualityComparer`1.GetHashCode(`0)">
            <summary>
            A function that returns a hash code for an object.
            </summary>
            <param name="obj">The object to returns a hash code for.</param>
            <returns>The hash code for the object.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.GenericEqualityComparer`1.EqualityFunction">
            <summary>
            Gets or sets a function which determines whether two items are equal.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.GenericEqualityComparer`1.HashCodeFunction">
            <summary>
            Gets or sets a function that returns a hash code for an object.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.BubbleSeries">
            <summary>
            Represents a control that contains a data series to be rendered in X/Y 
            line format.  A third binding determines the size of the data point.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.MaximumBubbleSizeAsRatioOfSmallestDimension">
            <summary>
            The maximum bubble size as a ratio of the smallest dimension.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.BubbleSeries._sizeValueBinding">
            <summary>
            The binding used to identify the size value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.BubbleSeries._rangeOfActualSizeValues">
            <summary>
            Stores the range of ActualSize values for the BubbleDataPoints.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.#ctor">
            <summary>
            Initializes a new instance of the bubble series.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.CreateDataPoint">
            <summary>
            Creates a new instance of bubble data point.
            </summary>
            <returns>A new instance of bubble data point.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.GetResourceDictionaryEnumeratorFromHost">
            <summary>
            Returns the custom ResourceDictionary to use for necessary resources.
            </summary>
            <returns>
            ResourceDictionary to use for necessary resources.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.GetAxes(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Acquire a horizontal linear axis and a vertical linear axis.
            </summary>
            <param name="firstDataPoint">The first data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.PrepareDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object)">
            <summary>
            Prepares a bubble data point by binding the size value binding to
            the size property.
            </summary>
            <param name="dataPoint">The data point to prepare.</param>
            <param name="dataContext">The data context of the data point.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.AttachEventHandlersToDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Attaches size change and actual size change event handlers to the
            data point.
            </summary>
            <param name="dataPoint">The data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.DetachEventHandlersFromDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Detaches size change and actual size change event handlers from the
            data point.
            </summary>
            <param name="dataPoint">The data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.BubbleDataPointActualSizePropertyChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Updates all data points when the actual size property of a data 
            point changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.BubbleDataPointSizePropertyChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Animates the value of the ActualSize property to the size property
            when it changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.OnBeforeUpdateDataPoints">
            <summary>
            Calculates the range of ActualSize values of all active BubbleDataPoints.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.UpdateDataPoints(System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Ensure that if any data points are updated, all data points are 
            updated.
            </summary>
            <param name="dataPoints">The data points to update.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.UpdateDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Updates the data point's visual representation.
            </summary>
            <param name="dataPoint">The data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.OnAfterUpdateDataPoints">
            <summary>
            Updates the value margins after all data points are updated.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.DependentRangeAxisProperty">
            <summary>
            Identifies the DependentRangeAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.OnDependentRangeAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="d">BubbleSeries that changed its DependentRangeAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.OnDependentRangeAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IRangeAxis)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.IndependentAxisProperty">
            <summary>
            Identifies the IndependentAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.OnIndependentAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="d">BubbleSeries that changed its IndependentAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.OnIndependentAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.GetValueMargins(System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer)">
            <summary>
            The margins required for each value.
            </summary>
            <param name="consumer">The consumer to return the value margins for.</param>
            <returns>A sequence of margins for each value.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.SizeValueBinding">
            <summary>
            Gets or sets the Binding to use for identifying the size of the bubble.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.SizeValuePath">
            <summary>
            Gets or sets the Binding Path to use for identifying the size of the bubble.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.ActualDependentRangeAxis">
            <summary>
            Gets the dependent axis as a range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.DependentRangeAxis">
            <summary>
            Gets or sets the dependent range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.ActualIndependentAxis">
            <summary>
            Gets the independent axis as a range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.IndependentAxis">
            <summary>
            Gets or sets independent range axis.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1">
            <summary>
            This series serves as the base class for the column and bar series.
            </summary>
            <typeparam name="T">The type of the data point.</typeparam>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.DependentRangeAxisProperty">
            <summary>
            Identifies the DependentRangeAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.OnDependentRangeAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="d">ColumnBarBaseSeries that changed its DependentRangeAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.OnDependentRangeAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IRangeAxis)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.IndependentAxisProperty">
            <summary>
            Identifies the IndependentAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.OnIndependentAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="d">ColumnBarBaseSeries that changed its IndependentAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.OnIndependentAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1._categoriesWithMultipleDataPoints">
            <summary>
            Keeps a list of DataPoints that share the same category.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.GetDataPointGroup(System.Object)">
            <summary>
            Returns the group of data points in a given category.
            </summary>
            <param name="category">The category for which to return the data
            point group.</param>
            <returns>The group of data points in a given category.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.GetIsDataPointGrouped(System.Object)">
            <summary>
            Returns a value indicating whether a data point corresponding to
            a category is grouped.
            </summary>
            <param name="category">The category.</param>
            <returns>A value indicating whether a data point corresponding to
            a category is grouped.</returns>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1._dataPointlength">
            <summary>
            The length of each data point.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.#ctor">
            <summary>
            Initializes a new instance of the ColumnBarBaseSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.OnBeforeUpdateDataPoints">
            <summary>
            Method run before DataPoints are updated.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.GetResourceDictionaryEnumeratorFromHost">
            <summary>
            Returns the custom ResourceDictionary to use for necessary resources.
            </summary>
            <returns>
            ResourceDictionary to use for necessary resources.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.OnDataPointActualDependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.IComparable,System.IComparable)">
            <summary>
            Updates a data point when its actual dependent value has changed.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.RedrawOtherSeries(System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            Redraws other column series to assure they allocate the right amount
            of space for their columns.
            </summary>
            <param name="seriesHost">The series host to update.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.OnDataPointsChanged(System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint},System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Called after data points have been loaded from the items source.
            </summary>
            <param name="newDataPoints">New active data points.</param>
            <param name="oldDataPoints">Old inactive data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.OnSeriesHostPropertyChanged(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            Redraw other column series when removed from a series host.
            </summary>
            <param name="oldValue">The old value of the series host property.</param>
            <param name="newValue">The new value of the series host property.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.CreateDataPoint">
            <summary>
            Creates the bar data point.
            </summary>
            <returns>A bar data point.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.CalculateDataPointLength">
            <summary>
            Calculates the length of the data points.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.GetValueMargins(System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer)">
            <summary>
            Returns the value margins for a given axis.
            </summary>
            <param name="consumer">The axis to retrieve the value margins for.
            </param>
            <returns>A sequence of value margins.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.GetCategoryRange(System.Object)">
            <summary>
            Gets a range in which to render a data point.
            </summary>
            <param name="category">The category to retrieve the range for.
            </param>
            <returns>The range in which to render a data point.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.DependentRangeAxis">
            <summary>
            Gets or sets the dependent range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.IndependentAxis">
            <summary>
            Gets or sets the independent category axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.ActualDependentRangeAxis">
            <summary>
            Gets the dependent axis as a range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.ActualIndependentAxis">
            <summary>
            Gets the independent axis as a category axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.System#Windows#Controls#DataVisualization#Charting#IAnchoredToOrigin#AnchoredAxis">
            <summary>
            Gets the axis to which the data is anchored.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.ObjectPool`1">
            <summary>
            A pool of objects that can be reused.
            </summary>
            <typeparam name="T">The type of object in the pool.</typeparam>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.ObjectPool`1.DefaultMinimumObjectsInThePool">
            <summary>
            The default minimum number objects to keep in the pool.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.ObjectPool`1._createObject">
            <summary>
            A function which creates objects.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.ObjectPool`1._objects">
            <summary>
            The list of objects.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.ObjectPool`1.currentIndex">
            <summary>
            The index of the current item in the list.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.ObjectPool`1.minimumObjectsInThePool">
            <summary>
            The minimum number of objects to keep in the pool.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObjectPool`1.#ctor(System.Int32,System.Func{`0})">
            <summary>
            Initializes a new instance of the ObjectPool class.
            </summary>
            <param name="minimumObjectsInThePool">The minimum number of objects
            to keep in the pool.</param>
            <param name="createObject">The function that creates the objects.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObjectPool`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the ObjectPool class.
            </summary>
            <param name="createObject">The function that creates the objects.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObjectPool`1.ForEachRemaining(System.Action{`0})">
            <summary>
            Performs an operation on the subsequent, already-created objects
            in the pool.
            </summary>
            <param name="action">The action to perform on the remaining objects.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObjectPool`1.Next">
            <summary>
            Creates a new object or reuses an existing object in the pool.
            </summary>
            <returns>A new or existing object in the pool.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObjectPool`1.Reset">
            <summary>
            Resets the pool of objects.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObjectPool`1.Done">
            <summary>
            Finishes the object creation process.
            </summary>
            <remarks>
            If there are substantially more remaining objects in the pool those
            objects may be removed.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObjectPool`1.Clear">
            <summary>
            Removes the objects from the pool.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.DependencyPropertyAnimationHelper">
            <summary>
            Represents a control that can animate the transitions between its specified
            dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.DependencyPropertyAnimationHelper.KeyFramesPerSecond">
            <summary>
            Number of key frames per second to generate the date time animations.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.DependencyPropertyAnimationHelper.StoryboardKeyPattern">
            <summary>
            The pattern used to ensure unique keys for the storyboards stored in
            a framework element's resource dictionary.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.DependencyPropertyAnimationHelper.GetStoryboardKey(System.String)">
            <summary>
            Returns a unique key for a storyboard.
            </summary>
            <param name="propertyPath">The property path of the property that 
            the storyboard animates.</param>
            <returns>A unique key for a storyboard.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.DependencyPropertyAnimationHelper.BeginAnimation(System.Windows.FrameworkElement,System.Windows.DependencyProperty,System.String,System.Object,System.TimeSpan,System.Windows.Media.Animation.IEasingFunction)">
            <summary>
            Starts animating a dependency property of a framework element to a 
            target value.
            </summary>
            <param name="target">The element to animate.</param>
            <param name="animatingDependencyProperty">The dependency property to
            animate.</param>
            <param name="propertyPath">The path of the dependency property to 
            animate.</param>
            <param name="targetValue">The value to animate the dependency
            property to.</param>
            <param name="timeSpan">The duration of the animation.</param>
            <param name="easingFunction">The easing function to uses to
            transition the data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.DependencyPropertyAnimationHelper.CreateStoryboard(System.Windows.FrameworkElement,System.Windows.DependencyProperty,System.String,System.Object@,System.TimeSpan,System.Windows.Media.Animation.IEasingFunction)">
            <summary>
            Creates a story board that animates a dependency property to a 
            value.
            </summary>
            <param name="target">The element that is the target of the 
            storyboard.</param>
            <param name="animatingDependencyProperty">The dependency property
            to animate.</param>
            <param name="propertyPath">The property path of the dependency
            property to animate.</param>
            <param name="toValue">The value to animate the dependency property
            to.</param>
            <param name="durationTimeSpan">The duration of the animation.
            </param>
            <param name="easingFunction">The easing function to use to
            transition the data points.</param>
            <returns>The story board that animates the property.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.GridExtensions">
            <summary>
            A set of extension methods for the Grid container.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.GridExtensions.Mirror(System.Windows.Controls.Grid,System.Windows.Controls.Orientation)">
            <summary>
            Mirrors the grid either horizontally or vertically.
            </summary>
            <param name="grid">The grid to mirror.</param>
            <param name="orientation">The orientation to mirror the grid along.
            </param>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.LayoutTransformControl">
            <summary>
            Control that implements support for transformations as if applied by
            LayoutTransform (which does not exist in Silverlight).
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.LayoutTransformControl.AcceptableDelta">
            <summary>
            Value used to work around double arithmetic rounding issues in 
            Silverlight.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.LayoutTransformControl.DecimalsAfterRound">
            <summary>
            Value used to work around double arithmetic rounding issues in 
            Silverlight.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.LayoutTransformControl.ContentProperty">
            <summary>
            Identifies the ContentProperty.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.LayoutTransformControl.TransformProperty">
            <summary>
            Identifies the TransformProperty dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.LayoutTransformControl._layoutRoot">
            <summary>
            Host panel for Child element.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.LayoutTransformControl._matrixTransform">
            <summary>
            RenderTransform/MatrixTransform applied to layout root.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.LayoutTransformControl._transformation">
            <summary>
            Transformation matrix corresponding to matrix transform.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.LayoutTransformControl._childActualSize">
            <summary>
            Actual DesiredSize of Child element.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.#ctor">
            <summary>
            Initializes a new instance of the LayoutTransformControl class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.OnApplyTemplate">
            <summary>
            Called whenever the control's template changes.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.ChildChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle changes to the child dependency property.
            </summary>
            <param name="o">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.OnChildChanged(System.Windows.FrameworkElement)">
            <summary>
            Updates content when the child property is changed.
            </summary>
            <param name="newContent">The new child.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.TransformChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the Transform DependencyProperty.
            </summary>
            <param name="o">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.OnTransformChanged(System.Windows.Media.Transform)">
            <summary>
            Processes the transform when the transform is changed.
            </summary>
            <param name="newValue">The transform to process.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.TransformUpdated">
            <summary>
            Notifies the LayoutTransformControl that some aspect of its 
            Transform property has changed.
            </summary>
            <remarks>
            Call this to update the LayoutTransform in cases where 
            LayoutTransformControl wouldn't otherwise know to do so.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.ProcessTransform(System.Windows.Media.Transform)">
            <summary>
            Processes the current transform to determine the corresponding 
            matrix.
            </summary>
            <param name="transform">The transform to use to determine the 
            matrix.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.GetTransformMatrix(System.Windows.Media.Transform)">
            <summary>
            Walks the Transform and returns the corresponding matrix.
            </summary>
            <param name="transform">The transform to create a matrix for.
            </param>
            <returns>The matrix calculated from the transform.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "Measure" pass of layout.
            </summary>
            <param name="availableSize">The available size that this element can
            give to child elements. Infinity can be specified as a value to 
            indicate that the element will size to whatever content is 
            available.</param>
            <returns>The size that this element determines it needs during 
            layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.ArrangeOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "Arrange" pass of layout.
            </summary>
            <param name="finalSize">The final area within the parent that this 
            element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
            <remarks>
            Using the WPF paramater name finalSize instead of Silverlight's 
            finalSize for clarity.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.ComputeLargestTransformedSize(System.Windows.Size)">
            <summary>
            Computes the largest usable size after applying the transformation 
            to the specified bounds.
            </summary>
            <param name="arrangeBounds">The size to arrange within.</param>
            <returns>The size required.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.IsSizeSmaller(System.Windows.Size,System.Windows.Size)">
            <summary>
            Return true if Size a is smaller than Size b in either dimension.
            </summary>
            <param name="a">The left size.</param>
            <param name="b">The right size.</param>
            <returns>A value indicating whether the left size is smaller than
            the right.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.RoundMatrix(System.Windows.Media.Matrix,System.Int32)">
            <summary>
            Rounds the non-offset elements of a matrix to avoid issues due to 
            floating point imprecision.
            </summary>
            <param name="matrix">The matrix to round.</param>
            <param name="decimalsAfterRound">The number of decimals after the
            round.</param>
            <returns>The rounded matrix.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.RectTransform(System.Windows.Rect,System.Windows.Media.Matrix)">
            <summary>
            Implement Windows Presentation Foundation's Rect.Transform on 
            Silverlight.
            </summary>
            <param name="rectangle">The rectangle to transform.</param>
            <param name="matrix">The matrix to use to transform the rectangle.
            </param>
            <returns>The transformed rectangle.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.MatrixMultiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
            <summary>
            Implements Windows Presentation Foundation's Matrix.Multiply on 
            Silverlight.
            </summary>
            <param name="matrix1">The left matrix.</param>
            <param name="matrix2">The right matrix.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.MatrixHasInverse(System.Windows.Media.Matrix)">
            <summary>
            Implements Windows Presentation Foundation's Matrix.HasInverse on
            Silverlight.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>True if matrix has an inverse.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.LayoutTransformControl.Child">
            <summary>
            Gets or sets the single child of the LayoutTransformControl.
            </summary>
            <remarks>
            Corresponds to Windows Presentation Foundation's Decorator.Child 
            property.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.LayoutTransformControl.Transform">
            <summary>
            Gets or sets the Transform of the LayoutTransformControl.
            </summary>
            <remarks>
            Corresponds to UIElement.RenderTransform.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.ObservableCollectionListAdapter`1">
            <summary>
            An object that synchronizes changes in an observable collection to 
            a list.
            </summary>
            <typeparam name="T">The type of the objects in the collection.
            </typeparam>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.ObservableCollectionListAdapter`1._collection">
            <summary>
            The collection to synchronize with a list.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObservableCollectionListAdapter`1.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Method that synchronizes the panel's child collection with the 
            contents of the observable collection when it changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObservableCollectionListAdapter`1.Populate">
            <summary>
            A method that populates a panel with the items in the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObservableCollectionListAdapter`1.ClearItems">
            <summary>
            Removes the items in the adapted list from the target list.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.ObservableCollectionListAdapter`1.Collection">
            <summary>
            Gets or sets the collection to synchronize with a list.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.ObservableCollectionListAdapter`1.TargetList">
            <summary>
            Gets or sets the panel to synchronize with the collection.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.OrientedPanel">
            <summary>
            A panel that plots elements on a one dimensional plane.  In order to 
            minimize collisions it moves elements further and further from the edge 
            of the plane based on their priority.  Elements that have the same
            priority level are always the same distance from the edge.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.ActualMinimumDistanceBetweenChildrenProperty">
            <summary>
            Identifies the ActualMinimumDistanceBetweenChildren dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.MinimumDistanceBetweenChildrenProperty">
            <summary>
            Identifies the MinimumDistanceBetweenChildren dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnMinimumDistanceBetweenChildrenPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumDistanceBetweenChildrenProperty property changed handler.
            </summary>
            <param name="d">OrientedPanel that changed its MinimumDistanceBetweenChildren.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnMinimumDistanceBetweenChildrenPropertyChanged(System.Double,System.Double)">
            <summary>
            MinimumDistanceBetweenChildrenProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.ActualLengthProperty">
            <summary>
            Identifies the ActualLength dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.GetCenterCoordinate(System.Windows.UIElement)">
            <summary>
            Gets the value of the CenterCoordinate attached property for a specified UIElement.
            </summary>
            <param name="element">The UIElement from which the property value is read.</param>
            <returns>The CenterCoordinate property value for the UIElement.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.SetCenterCoordinate(System.Windows.UIElement,System.Double)">
            <summary>
            Sets the value of the CenterCoordinate attached property to a specified UIElement.
            </summary>
            <param name="element">The UIElement to which the attached property is written.</param>
            <param name="value">The needed CenterCoordinate value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.CenterCoordinateProperty">
            <summary>
            Identifies the CenterCoordinate dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnCenterCoordinatePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CenterCoordinateProperty property changed handler.
            </summary>
            <param name="dependencyObject">UIElement that changed its CenterCoordinate.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.OffsetPaddingProperty">
            <summary>
            Identifies the OffsetPadding dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnOffsetPaddingPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OffsetPaddingProperty property changed handler.
            </summary>
            <param name="d">OrientedPanel that changed its OffsetPadding.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnOffsetPaddingPropertyChanged(System.Double,System.Double)">
            <summary>
            OffsetPaddingProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.GetPriority(System.Windows.UIElement)">
            <summary>
            Gets the value of the Priority attached property for a specified UIElement.
            </summary>
            <param name="element">The UIElement from which the property value is read.</param>
            <returns>The Priority property value for the UIElement.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.SetPriority(System.Windows.UIElement,System.Int32)">
            <summary>
            Sets the value of the Priority attached property to a specified UIElement.
            </summary>
            <param name="element">The UIElement to which the attached property is written.</param>
            <param name="value">The needed Priority value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.PriorityProperty">
            <summary>
            Identifies the Priority dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnPriorityPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PriorityProperty property changed handler.
            </summary>
            <param name="dependencyObject">UIElement that changed its Priority.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.IsInvertedProperty">
            <summary>
            Identifies the IsInverted dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnIsInvertedPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsInvertedProperty property changed handler.
            </summary>
            <param name="d">OrientedPanel that changed its IsInverted.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnIsInvertedPropertyChanged(System.Boolean,System.Boolean)">
            <summary>
            IsInvertedProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.IsReversedProperty">
            <summary>
            Identifies the IsReversed dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnIsReversedPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsReversedProperty property changed handler.
            </summary>
            <param name="d">OrientedPanel that changed its IsReversed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnIsReversedPropertyChanged(System.Boolean,System.Boolean)">
            <summary>
            IsReversedProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.OrientationProperty">
            <summary>
            Identifies the Orientation dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnOrientationPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OrientationProperty property changed handler.
            </summary>
            <param name="d">OrientedPanel that changed its Orientation.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnOrientationPropertyChanged(System.Windows.Controls.Orientation)">
            <summary>
            OrientationProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.#ctor">
            <summary>
            Instantiates a new instance of the OrientedPanel class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.UpdateActualLength">
            <summary>
            Updates the actual length property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.GetRanges(System.Collections.Generic.IEnumerable{System.Windows.UIElement},System.Func{System.Windows.UIElement,System.Double})">
            <summary>
            Returns a sequence of ranges for a given sequence of children and a
            length selector.
            </summary>
            <param name="children">A sequence of children.</param>
            <param name="lengthSelector">A function that returns a length given
            a UIElement.</param>
            <returns>A sequence of ranges.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures children and determines necessary size.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The necessary size.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges items according to position and priority.
            </summary>
            <param name="finalSize">The final size of the panel.</param>
            <returns>The final size of the control.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.GetCorrectedDesiredSize(System.Windows.UIElement)">
            <summary>
            Gets the "corrected" DesiredSize (for Line instances); one that is
            more consistent with how the elements actually render.
            </summary>
            <param name="element">UIElement to get the size for.</param>
            <returns>Corrected size.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.OrientedPanel.ActualMinimumDistanceBetweenChildren">
            <summary>
            Gets the actual minimum distance between children.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.OrientedPanel.MinimumDistanceBetweenChildren">
            <summary>
            Gets or sets the minimum distance between children.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.OrientedPanel.ActualLength">
            <summary>
            Gets the actual length of the panel.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.OrientedPanel.OffsetPadding">
            <summary>
            Gets or sets the amount of offset padding to add between items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.OrientedPanel.IsInverted">
            <summary>
            Gets or sets a value indicating whether the panel is inverted.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.OrientedPanel.IsReversed">
            <summary>
            Gets or sets a value indicating whether the direction is reversed. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.OrientedPanel.Orientation">
            <summary>
            Gets or sets the orientation of the panel.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.OrientedPanel.PriorityOffsets">
            <summary>
            Gets or sets the offset of the edge to use for each priority group.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.ResourceDictionaryExtensions">
            <summary>
            Extension methods for the ResourceDictionary class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ResourceDictionaryExtensions.ShallowCopy(System.Windows.ResourceDictionary)">
            <summary>
            Makes a shallow copy of the specified ResourceDictionary.
            </summary>
            <param name="dictionary">ResourceDictionary to copy.</param>
            <returns>Copied ResourceDictionary.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.StoryboardQueue">
            <summary>
            Represents a storyboard queue that plays storyboards in sequence.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.StoryboardQueue._storyBoards">
            <summary>
            A queue of the storyboards.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.StoryboardQueue.Enqueue(System.Windows.Media.Animation.Storyboard,System.EventHandler)">
            <summary>
            Accepts a new storyboard to play in sequence.
            </summary>
            <param name="storyBoard">The storyboard to play.</param>
            <param name="completedAction">An action to execute when the 
            storyboard completes.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.StoryboardQueue.Dequeue">
            <summary>
            Removes the next storyboard in the queue and plays it.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.AxisOrientation">
            <summary>
            Specifies the orientation of an axis.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisOrientation.None">
            <summary>
            Orientation is automatically set.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisOrientation.X">
            <summary>
            Indicates the axis plots along the X axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisOrientation.Y">
            <summary>
            Indicates the axis plots along the Y axis.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType">
            <summary>
            Specifies an interval type.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Auto">
            <summary>
            Automatically determined by the ISeriesHost control.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Number">
            <summary>
            The interval type is numerical.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Years">
            <summary>
            The interval type is years.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Months">
            <summary>
            The interval type is months.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Weeks">
            <summary>
            The interval type is weeks.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Days">
            <summary>
            The interval type is days.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Hours">
            <summary>
            The interval type is hours.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Minutes">
            <summary>
            The interval type is minutes.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Seconds">
            <summary>
            The interval type is seconds.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Milliseconds">
            <summary>
            The interval type is milliseconds.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.NullableConverter`1">
            <summary>
            Converts a string or base value to a <see cref="T:System.Nullable"/> value.
            </summary>
            <typeparam name="T">The type should be value type.</typeparam>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NullableConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the 
            specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>
            Returns true if this converter can perform the conversion; 
            otherwise, false.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NullableConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the 
            specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="destinationType">The type you want to convert to.
            </param>
            <returns>
            Returns true if this converter can perform the conversion; 
            otherwise, false.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NullableConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="culture">The 
            <see cref="T:System.Globalization.CultureInfo"/> to use as the 
            current culture.</param>
            <param name="value">The value to convert to the type of this 
            converter.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NullableConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts from the specified value to the a specified type from the
            type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="culture">The 
            <see cref="T:System.Globalization.CultureInfo"/> to use as the 
            current culture.</param>
            <param name="value">The value to convert to the type of this 
            converter.</param>
            <param name="destinationType">The type of convert the value to
            .</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.Chart">
            <summary>
            Represents a control that displays a Chart.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.ChartAreaName">
            <summary>
            Specifies the name of the ChartArea TemplatePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.LegendName">
            <summary>
            Specifies the name of the legend TemplatePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart._chartAreaChildrenListAdapter">
            <summary>
            An adapter that synchronizes changes to the ChartAreaChildren
            property to the ChartArea panel's children collection.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart._axes">
            <summary>
            Stores the collection of Axes in the Chart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart._foregroundElements">
            <summary>
            The collection of foreground elements.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart._backgroundElements">
            <summary>
            The collection of background elements.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart._edgeAxes">
            <summary>
            Axes arranged along the edges.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart._series">
            <summary>
            Stores the collection of Series displayed by the Chart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.ChartAreaStyleProperty">
            <summary>
            Identifies the ChartAreaStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.LegendStyleProperty">
            <summary>
            Identifies the LegendStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.LegendTitleProperty">
            <summary>
            Identifies the LegendTitle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.PlotAreaStyleProperty">
            <summary>
            Identifies the PlotAreaStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.PaletteProperty">
            <summary>
            Identifies the Palette dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.OnPalettePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the Palette property is changed.
            </summary>
            <param name="d">Chart that contains the changed Palette.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.OnPalettePropertyChanged(System.Collections.ObjectModel.Collection{System.Windows.ResourceDictionary})">
            <summary>
            Called when the value of the Palette property is changed.
            </summary>
            <param name="newValue">The new value for the Palette.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.TitleProperty">
            <summary>
            Identifies the Title dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.TitleStyleProperty">
            <summary>
            Identifies the TitleStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.#ctor">
            <summary>
            Initializes a new instance of the Chart class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.OnResourceDictionariesChanged(System.EventArgs)">
            <summary>
            Invokes the ResourceDictionariesChanged event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.GetAutoAxisLocation(System.Windows.Controls.DataVisualization.Charting.Axis)">
            <summary>
            Determines the location of an axis based on the existing axes in
            the chart.
            </summary>
            <param name="axis">The axis to determine the location of.</param>
            <returns>The location of the axis.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.AddAxisToChartArea(System.Windows.Controls.DataVisualization.Charting.Axis)">
            <summary>
            Adds an axis to the ISeriesHost area.
            </summary>
            <param name="axis">The axis to add to the ISeriesHost area.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.AxisOrientationChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Windows.Controls.DataVisualization.Charting.AxisOrientation})">
            <summary>
            Rebuilds the chart area if an axis orientation is changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.SetEdge(System.Windows.Controls.DataVisualization.Charting.Axis)">
            <summary>
            Sets the Edge property of an axis based on its location and
            orientation.
            </summary>
            <param name="axis">The axis to set the edge property of.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.AxisLocationChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Windows.Controls.DataVisualization.Charting.AxisLocation})">
            <summary>
            Rebuild the chart area if an axis location is changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.AddSeriesToPlotArea(System.Windows.Controls.DataVisualization.Charting.ISeries)">
            <summary>
            Adds a series to the plot area and injects chart services.
            </summary>
            <param name="series">The series to add to the plot area.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.OnApplyTemplate">
            <summary>
            Builds the visual tree for the Chart control when a new template
            is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.ActualAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Ensures that ISeriesHost is in a consistent state when axes collection is
            changed.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.RemoveAxisFromChartArea(System.Windows.Controls.DataVisualization.Charting.Axis)">
            <summary>
            Removes an axis from the Chart area.
            </summary>
            <param name="axis">The axis to remove from the ISeriesHost area.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.RemoveSeriesFromPlotArea(System.Windows.Controls.DataVisualization.Charting.ISeries)">
            <summary>
            Removes a series from the plot area.
            </summary>
            <param name="series">The series to remove from the plot area.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.SeriesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the ObservableCollection.CollectionChanged property
            changes.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.ChildSeriesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles changes to the collections of child ISeries implementing ISeriesHost.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.GetResourceDictionariesWhere(System.Func{System.Windows.ResourceDictionary,System.Boolean})">
            <summary>
            Returns a rotating enumerator of ResourceDictionary objects that coordinates
            with the dispenser object to ensure that no two enumerators are on the same
            item. If the dispenser is reset or its collection is changed then the
            enumerators are also reset.
            </summary>
            <param name="predicate">A predicate that returns a value indicating
            whether to return an item.</param>
            <returns>An enumerator of ResourceDictionaries.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.OnGlobalSeriesIndexesInvalidated(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Updates the global indexes of all descendents that require a global
            index.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.UpdateGlobalIndexes">
            <summary>
            Updates the global index property of all Series that track their
            global index.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.ChartAreaChildren">
            <summary>
            Gets or sets the chart area children collection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.Axes">
            <summary>
            Gets or sets a collection of Axes in the Chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.System#Windows#Controls#DataVisualization#Charting#ISeriesHost#ForegroundElements">
            <summary>
            Gets the collection of foreground elements.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.ForegroundElements">
            <summary>
            Gets the collection of foreground elements.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.System#Windows#Controls#DataVisualization#Charting#ISeriesHost#BackgroundElements">
            <summary>
            Gets the collection of background elements.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.BackgroundElements">
            <summary>
            Gets the collection of background elements.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.InternalActualAxes">
            <summary>
            Gets or sets the axes that are currently in the chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.ActualAxes">
            <summary>
            Gets the actual axes displayed in the chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.ChartArea">
            <summary>
            Gets or sets the reference to the template's ChartArea.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.Legend">
            <summary>
            Gets or sets the reference to the Chart's Legend.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.Series">
            <summary>
            Gets or sets the collection of Series displayed by the Chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.ChartAreaStyle">
            <summary>
            Gets or sets the Style of the ISeriesHost's ChartArea.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.LegendItems">
            <summary>
            Gets the collection of legend items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.LegendStyle">
            <summary>
            Gets or sets the Style of the ISeriesHost's Legend.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.LegendTitle">
            <summary>
            Gets or sets the Title content of the Legend.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.PlotAreaStyle">
            <summary>
            Gets or sets the Style of the ISeriesHost's PlotArea.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.Palette">
            <summary>
            Gets or sets a palette of ResourceDictionaries used by the children of the Chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.ResourceDictionaryDispenser">
            <summary>
            Gets or sets an object that rotates through the palette.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.Chart.ResourceDictionariesChanged">
            <summary>
            Event that is invoked when the ResourceDictionaryDispenser's collection has changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.Title">
            <summary>
            Gets or sets the title displayed for the Chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.TitleStyle">
            <summary>
            Gets or sets the Style of the ISeriesHost's Title.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.System#Windows#Controls#DataVisualization#Charting#IRequireSeriesHost#SeriesHost">
            <summary>
            Gets or sets the Series host of the chart.
            </summary>
            <remarks>This will always return null.</remarks>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.SeriesHost">
            <summary>
            Gets or sets the Series host of the chart.
            </summary>
            <remarks>This will always return null.</remarks>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.System#Windows#Controls#DataVisualization#Charting#ISeriesHost#Axes">
            <summary>
            Gets the axes collection of the chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.System#Windows#Controls#DataVisualization#Charting#ISeriesHost#Series">
            <summary>
            Gets the Series collection of the chart.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.LegendItem">
            <summary>
            Represents an item used by a Series in the Legend of a Chart.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LegendItem.#ctor">
            <summary>
            Initializes a new instance of the LegendItem class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LegendItem.Owner">
            <summary>
            Gets or sets the owner of the LegendItem.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.AnimationSequence">
            <summary>
            Specifies the supported animation sequences.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AnimationSequence.Simultaneous">
            <summary>
            Animates all of the data points simultaneously.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AnimationSequence.FirstToLast">
            <summary>
            Animates the data points from first to last.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AnimationSequence.LastToFirst">
            <summary>
            Animates the data points from last to first.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DataPointState">
            <summary>
            Describes the state a data point is in.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointState.Created">
            <summary>
            Data point has been created.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointState.Showing">
            <summary>
            Data point is in the process of being revealed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointState.Normal">
            <summary>
            Data point is visible in the plot area.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointState.PendingRemoval">
            <summary>
            Data point is in the process of being removed from the plot area.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointState.Hiding">
            <summary>
            Data point is in the process of being hidden.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointState.Hidden">
            <summary>
            Data point is hidden.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.LineDataPoint">
            <summary>
            Represents a data point used for a line series.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineDataPoint.#ctor">
            <summary>
            Initializes a new instance of the LineDataPoint class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.PieDataPoint">
            <summary>
            Represents a data point used for a pie series.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.SliceName">
            <summary>
            The name of the slice template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.ActualDataPointStyleName">
            <summary>
            Name of the ActualDataPointStyle property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.GeometryProperty">
            <summary>
            Identifies the Geometry dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.GeometrySelectionProperty">
            <summary>
            Identifies the GeometrySelection dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.GeometryHighlightProperty">
            <summary>
            Identifies the GeometryHighlight dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.ActualOffsetRatioProperty">
            <summary>
            Identifies the ActualOffsetRatio dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnActualOffsetRatioPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the ActualOffsetRatioProperty property changes.
            </summary>
            <param name="d">PieDataPoint that changed its ActualOffsetRatio.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnActualOffsetRatioPropertyChanged(System.Double,System.Double)">
            <summary>
            Called when the value of the ActualOffsetRatioProperty property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.ActualRatioProperty">
            <summary>
            Identifies the ActualRatio dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnActualRatioPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the ActualRatioProperty property changes.
            </summary>
            <param name="d">PieDataPoint that changed its ActualRatio.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnActualRatioPropertyChanged(System.Double,System.Double)">
            <summary>
            Called when the value of the ActualRatioProperty property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.FormattedRatioProperty">
            <summary>
            Identifies the FormattedRatio dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OffsetRatioProperty">
            <summary>
            Identifies the OffsetRatio dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnOffsetRatioPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the OffsetRatioProperty property changes.
            </summary>
            <param name="d">PieDataPoint that changed its OffsetRatio.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnOffsetRatioPropertyChanged(System.Double,System.Double)">
            <summary>
            Called when the value of the OffsetRatioProperty property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.RatioProperty">
            <summary>
            Identifies the Ratio dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnRatioPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the RatioProperty property changes.
            </summary>
            <param name="d">PieDataPoint that changed its Ratio.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnRatioPropertyChanged(System.Double,System.Double)">
            <summary>
            Called when the value of the RatioProperty property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.RatioStringFormatProperty">
            <summary>
            Identifies the RatioStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnRatioStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the RatioStringFormatProperty property changes.
            </summary>
            <param name="d">PieDataPoint that changed its RatioStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnRatioStringFormatPropertyChanged(System.String)">
            <summary>
            Called when the value of the RatioStringFormatProperty property changes.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.ActualDataPointStyleProperty">
            <summary>
            Identifies the ActualDataPointStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.ActualLegendItemStyleProperty">
            <summary>
            Identifies the ActualLegendItemStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.#ctor">
            <summary>
            Initializes a new instance of the PieDataPoint class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnApplyTemplate">
            <summary>
            Builds the visual tree for the PieDataPoint when a new template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.SliceElement_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.SliceElement_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.Geometry">
            <summary>
            Gets or sets the Geometry property which defines the shape of the
            data point.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.GeometrySelection">
            <summary>
            Gets or sets the Geometry which defines the shape of a point. The 
            GeometrySelection property is a copy of the Geometry property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.GeometryHighlight">
            <summary>
            Gets or sets the GeometryHighlight property which is a clone of the
            Geometry property.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.ActualOffsetRatioChanged">
            <summary>
            Occurs when the actual offset ratio of the pie data point changes.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.ActualOffsetRatio">
            <summary>
            Gets or sets the offset ratio that is displayed on the screen.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.ActualRatioChanged">
            <summary>
            An event raised when the actual ratio of the pie data point is
            changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.ActualRatio">
            <summary>
            Gets or sets the ratio displayed on the screen.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.FormattedRatio">
            <summary>
            Gets the Ratio with the value of the RatioStringFormat property applied.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OffsetRatioChanged">
            <summary>
            An event raised when the offset ratio of the pie data point is
            changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OffsetRatio">
            <summary>
            Gets or sets the offset ratio of the pie data point.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.RatioChanged">
            <summary>
            An event raised when the ratio of the pie data point is
            changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.Ratio">
            <summary>
            Gets or sets the ratio of the total that the data point 
            represents.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.RatioStringFormat">
            <summary>
            Gets or sets the format string for the FormattedRatio property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.ActualDataPointStyle">
            <summary>
            Gets or sets the actual style used for the data points.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.ActualLegendItemStyle">
            <summary>
            Gets or sets the actual style used for the legend item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.PaletteResources">
            <summary>
            Gets the Palette-dispensed ResourceDictionary for the Series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.SliceElement">
            <summary>
            Gets or sets the element that represents the pie slice.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ScatterDataPoint">
            <summary>
            Represents a data point used for a scatter series.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterDataPoint.#ctor">
            <summary>
            Initializes a new instance of the ScatterDataPoint class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.BarSeries">
            <summary>
            Represents a control that contains a data series to be rendered in bar format.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BarSeries.#ctor">
            <summary>
            Initializes a new instance of the BarSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BarSeries.GetAxes(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Acquire a horizontal category axis and a vertical linear axis.
            </summary>
            <param name="firstDataPoint">The first data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BarSeries.UpdateDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Updates each point.
            </summary>
            <param name="dataPoint">The data point to update.</param>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.StringFormatConverter">
            <summary>
            Converts a value to a string using a format string.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.StringFormatConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value to a string by formatting it.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The target type of the conversion.</param>
            <param name="parameter">The format string.</param>
            <param name="culture">The culture to use for conversion.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.StringFormatConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a string to a target type.
            </summary>
            <param name="value">The value to convert to a string.</param>
            <param name="targetType">The target type of the conversion.</param>
            <param name="parameter">A parameter used during the conversion
            process.</param>
            <param name="culture">The culture to use for the conversion.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.BindingExtractor">
            <summary>
            Helper class which can extract the value from a source object using a binding path. It 
            creates a Binding object based on the path, and calls SetBinding to a temporary 
            FrameworkElement (base class) to extract the value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.BindingExtractor.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.BindingExtractor.RetrieveProperty(System.Object,System.Windows.Data.Binding)">
            <summary>
            Returns the value of the given Binding when applied on the given object instance.
            It does that by making a copy of the binding, setting its source to be the object
            instance and the target to be the member Value property.
            </summary>
            <param name="instance">Object instance containing the property.</param>
            <param name="valueBinding">Binding to the property to be retrieved.</param>
            <returns>The value of the binding.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.BindingExtractor.Value">
            <summary>
            Gets or sets a generic Value which will be the target of the binding.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.InterpolationMode">
            <summary>
            Specifies the supported interpolation modes.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.InterpolationMode.LeafNodesOnly">
            <summary>
            Interpolation shall be applied to leaf nodes only in the tree.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.InterpolationMode.AllNodes">
            <summary>
            Interpolation shall be applied to all nodes in the tree.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.SolidColorBrushInterpolator">
            <summary>
            Interpolator which converts a numeric value from its [RangeMinimum, RangeMaximum]
            range to a color in the range [From, To].
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.RangeInterpolator`1">
            <summary>
            Abstract class representing an interpolator which projects values to
            a continuous range defined by the From and To properties.
            </summary>
            <typeparam name="T">The data type of the values in the target range.</typeparam>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Interpolator">
            <summary>
            Abstract base class for Interpolator converters.
            </summary>
            <remarks>
            <para>
            An Interpolator is used to project a value from a source range 
            [ActualDataMinimum, ActualDataMaximum] to a target range [From, To]. 
            The source range can be specified directly by setting the DataMinimum 
            and/or DataMaximum properties, or indirectly by setting DataRangeBinding.
            When the DataRangeBinding property is set,the TreeMap will evaluate the 
            binding for the entire tree, calculating the minimum and maximum values 
            automatically. The custom target range and the actual interpolation 
            logic is defined by sub-classes of this abstract class.
            </para>
            </remarks>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Interpolator._helper">
            <summary>
            Holds a helper object used to extract values using a property path.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Interpolator.DataMinimumProperty">
            <summary>
            Identifies the DataMinimum dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Interpolator.DataMaximumProperty">
            <summary>
            Identifies the DataMaximum dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Interpolator._actualDataMaximum">
            <summary>
            This fields contains the automatically calculated maximal value in 
            the dataset.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Interpolator._actualDataMinimum">
            <summary>
            This fields contains the automatically calculated minimal value in 
            the dataset.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Interpolator.#ctor">
            <summary>
            Initializes a new instance of the Interpolator class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Interpolator.IncludeInRange(System.Object)">
            <summary>
            If the DataRangeBinding property is set then this method updates the minimum/maximum range
            of this object by including the value passed in.
            </summary>
            <param name="data">Object to extract the value from (the Source of the DataRangeBinding).</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Interpolator.Interpolate(System.Double)">
            <summary>
            Called to interpolate the value of the given object between the DataMinimum and DataMaximum
            extremes, and to project it in a specific [From, To] range defined. The target range (and
            therefore the implementation of this method) is defined in a specific sub-class.
            </summary>
            <param name="value">Value to interpolate.</param>
            <returns>An interpolated value.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Interpolator.InterpolationMode">
            <summary>
            Gets or sets a value telling to which tree nodes the interpolation 
            should be applied to. LeafNodesOnly by default.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Interpolator.TargetName">
            <summary>
            Gets or sets a value representing the x:Name of the element to which
            the interpolated value will be applied.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Interpolator.TargetProperty">
            <summary>
            Gets or sets a value representing the path to a property which will 
            receive the interpolated value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Interpolator.DataMinimum">
            <summary>
            Gets or sets a value representing the fixed minimum value across the 
            entire set. If the value is not set directly or is NaN, the 
            ActualDataMaximum will be calculated automatically from the data set 
            by using the DataRangeBinding property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Interpolator.DataMaximum">
            <summary>
            Gets or sets a value representing the fixed maximum value across the 
            entire set. If the value is not set directly or is NaN, the 
            ActualDataMinimum will be calculated automatically from the data set 
            by using the DataRangeBinding property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Interpolator.ActualDataMaximum">
            <summary>
            Gets the value representing the maximal value in the data set. It is
            automatically from the data set by using the DataRangeBinding 
            property if DataMaximum is not set. If it is set, DataMaximum is 
            returned.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Interpolator.ActualDataMinimum">
            <summary>
            Gets the value representing the minimal value in the data set. It is
            automatically from the data set by using the DataRangeBinding 
            property if DataMinimum is not set. If it is set, DataMinimum is 
            returned.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Interpolator.DataRangeBinding">
            <summary>
            Gets or sets a binding to a property which will be examined to retrieve the minimum and maximum range 
            values across the entire data set. If this value is null then the DataMinimum and DataMaximum values
            need be set manually.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.RangeInterpolator`1.From">
            <summary>
            Gets or sets a value representing the start value of the target range.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.RangeInterpolator`1.To">
            <summary>
            Gets or sets a value representing the end value of the target range.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.SolidColorBrushInterpolator.Interpolate(System.Double)">
            <summary>
            Interpolates the given value between its [RangeMinimum, RangeMaximum] range
            and returns a color in the range [From, To].
            </summary>
            <param name="value">Value to interpolate.</param>
            <returns>An interpolated color in the range [From, To].</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.DoubleInterpolator">
            <summary>
            Interpolator which converts a numeric value from its [RangeMinimum, RangeMaximum]
            range to another value in the range [From, To].
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.DoubleInterpolator.Interpolate(System.Double)">
            <summary>
            Interpolates the given value between its [RangeMinimum, RangeMaximum] range
            and returns an interpolated value in the range [From, To].
            </summary>
            <param name="value">Value to interpolate.</param>
            <returns>An interpolated value in the range [From, To].</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.SquaringAlgorithm">
            <summary>
            Class encapsulating the logic of sub-dividing a parent rectangular area into child rectangles.
            It implements the squaring tree map algorithm where all child nodes are allocated
            areas proportional to their values, but the aspect ratio of each rectangle is kept 
            as close as possible to a square.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.SquaringAlgorithm._areas">
            <summary>
            Holds the list of nodes being considered by the algorithm.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.SquaringAlgorithm._currentRectangle">
            <summary>
            The current rectangle being divided.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.SquaringAlgorithm._currentStart">
            <summary>
            Internal index in the list of nodes being divided.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.SquaringAlgorithm._factor">
            <summary>
            Temporary variable used during the algorithm. Represents the ratio between 
            the real area of the rectangle and the virtual value associated with the node.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.SquaringAlgorithm.Split(System.Windows.Rect,System.Windows.Controls.DataVisualization.TreeMapNode,System.Windows.Thickness)">
            <summary>
            Subdivides the parent rectangle using squaring tree map algorithm into
            rectangles with areas specified by the children. The areas must add up 
            to at most the area of the rectangle.
            </summary>
            <param name="parentRectangle">Total area being split.</param>
            <param name="parentNode">The node associated with the total area. The 
            children of this node will be allocated small chunks of the parent rectangle.</param>
            <param name="margin">How much of a gap should be left between the parent rectangle and the children.</param>
            <returns>A list of RectangularArea objects describing areas associated with each of the children of parentNode.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.SquaringAlgorithm.BuildTreeMap">
            <summary>
            This function returns an IEnumerable over the rectangles associated with the children,
            as divided using the tree map algorithm.
            </summary>
            <returns>A list of RectangularArea objects describing areas associated with each of the children.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.SquaringAlgorithm.BuildTreeMapStep">
            <summary>
            Performs one step of the body of the squaring tree map algorithm.
            </summary>
            <returns>List of rectangles calculated by this step.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.SquaringAlgorithm.GetArea(System.Int32)">
            <summary>
            Returns the calculated area of the node at the given index.
            </summary>
            <param name="i">Index of the node to consider.</param>
            <returns>Area of the node, calculated based on the node's value multiplied by the current factor.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.SquaringAlgorithm.GetAspect(System.Int32,System.Double)">
            <summary>
            Returns the aspect ratio of the area associated with the node at the given index.
            </summary>
            <param name="i">Index of the node to consider.</param>
            <param name="wh">Width of the area.</param>
            <returns>Positive supra-unitary ratio of the given area.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.TreeMapNode">
            <summary>
            Holds the information needed by the tree map layout algorithm, such as the area
            associated with this node and the list of children. The class also contains
            an DataContext object which is the real user context, and a reference to the UI
            container associated with this node.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMapNode.Area">
            <summary>
            Gets or sets a value representing the area associated with this node.
            This value is relative to all the other values in the hierarchy; the layout
            algorithm will allocated a real area proportional to this value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMapNode.Children">
            <summary>
            Gets or sets the list of children under this node.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMapNode.WeakEventListener">
            <summary>
            Gets or sets a value representing the WeakEventListener associated with the
            ItemsSource that created the children of this node.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMapNode.DataContext">
            <summary>
            Gets or sets a value representing a reference to the user's custom data object.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMapNode.Element">
            <summary>
            Gets or sets a value representing the associated Silverlight UI element.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMapNode.ItemDefinition">
            <summary>
            Gets or sets a value representing the TreeMapItemDefinition used to describe 
            properties of this item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMapNode.ChildItemPadding">
            <summary>
            Gets or sets a value representing the padding between this node and its children.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMapNode.Level">
            <summary>
            Gets or sets a value representing the level of this node in the tree (the
            root node is at level 0).
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.TreeMap">
            <summary>
            Represents a control which can display hierarchical data as a set of nested rectangles. 
            Each item in the hierarchy is laid out in a rectangular area of a size proportional to 
            the value associated with the item.
            </summary>
            <remarks>
            You populate a TreeMap by setting its ItemsSource property to the root of the hierarchy 
            you would like to display. The ItemDefinition property must be set to an instance of a 
            TreeMapItemDefinition with appropriate bindings for Value (identifying the value to be used
            when calculating relative item sizes) and ItemsSource (identifying the collection of 
            children for each item).
            </remarks>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMap.ContainerName">
            <summary>
            The name of the Container template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMap.InterpolatorValueProperty">
            <summary>
            Identifies the InterpolatorValue dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMap._helper">
            <summary>
            Holds a helper object used to extract values using a property path.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMap._nodeRoots">
            <summary>
            The roots of the pre-calculated parallel tree of TreeMapNodes.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMap._getTreeMapNodesCache">
            <summary>
            Cached sequence of all TreeMapNodes used by GetTreeMapNodes.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMap.ItemDefinitionSelectorProperty">
            <summary>
            Identifies the ItemDefinitionSelector dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.OnItemDefinitionSelectorPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the TreeMapItemDefinitionSelectorProperty property changes.
            </summary>
            <param name="d">Reference to the TreeMap object.</param>
            <param name="e">Event handler arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.OnItemDefinitionSelectorPropertyChanged(System.Windows.Controls.DataVisualization.TreeMapItemDefinitionSelector,System.Windows.Controls.DataVisualization.TreeMapItemDefinitionSelector)">
            <summary>
            Called when the value of the ItemDefinitionSelectorProperty property changes.
            Triggers a recalculation of the layout.
            </summary>
            <param name="oldValue">The old selector.</param>
            <param name="newValue">The new selector.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMap.ItemDefinitionProperty">
            <summary>
            Identifies the ItemDefinition dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.OnItemDefinitionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the ItemDefinitionProperty property changes.
            </summary>
            <param name="d">Reference to the TreeMap object.</param>
            <param name="e">Event handler arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.OnItemDefinitionPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            This callback ensures that any change in TreeMapItemDefinition.
            </summary>
            <param name="sender">Source TreeMapItemDefinition object.</param>
            <param name="e">Event handler arguments (parameter name).</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.OnItemDefinitionPropertyChanged(System.Windows.Controls.DataVisualization.TreeMapItemDefinition,System.Windows.Controls.DataVisualization.TreeMapItemDefinition)">
            <summary>
            Called when the value of the ItemDefinitionProperty property changes.
            Triggers a recalculation of the layout.
            </summary>
            <param name="oldValue">The old item definition.</param>
            <param name="newValue">The new item definition.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMap.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.OnItemsSourcePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the ItemsSourceProperty property changes.
            </summary>
            <param name="d">Reference to the TreeMap object.</param>
            <param name="e">Event handler arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.OnItemsSourcePropertyChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Called when the value of the ItemsSourceProperty property changes.
            </summary>
            <param name="oldValue">The old ItemsSource collection.</param>
            <param name="newValue">The new ItemsSource collection.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMap._weakEventListener">
            <summary>
            WeakEventListener used to handle INotifyCollectionChanged events.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.ItemsSourceCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Method that handles the ObservableCollection.CollectionChanged event for the ItemsSource property.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMap.InterpolatorsProperty">
            <summary>
            Identifies the Interpolators dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.OnInterpolatorsPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the InterpolatorsProperty property changes.
            </summary>
            <param name="d">Reference to the TreeMap object.</param>
            <param name="e">Event handler arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.OnInterpolatorsPropertyChanged(System.Collections.ObjectModel.Collection{System.Windows.Controls.DataVisualization.Interpolator},System.Collections.ObjectModel.Collection{System.Windows.Controls.DataVisualization.Interpolator})">
            <summary>
            Called when the value of the InterpolatorsProperty property changes.
            Triggers a recalculation of the layout.
            </summary>
            <param name="oldValue">The old Interpolators collection.</param>
            <param name="newValue">The new Interpolators collection.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMap._containerElement">
            <summary>
            The Container template part is used to hold all the items inside
            a TreeMap.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.#ctor">
            <summary>
            Initializes a new instance of the TreeMap class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.OnApplyTemplate">
            <summary>
            Invoked whenever application code or internal processes call ApplyTemplate. Gets references
            to the template parts required by this control.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.GetContainerForItemOverride(System.Object,System.Int32)">
            <summary>
            Constructs a new instance of an element used to display an item in the tree. 
            </summary>
            <remarks>
            By default TreeMap will use the template set in its ItemDefinition property, or the value 
            returned from GetTemplateForItemOverride if overridden. Override this method to build a 
            custom element.
            </remarks>
            <param name="data">One of the items in the ItemsSource hierarchy.</param>
            <param name="level">The level of the item in the hierarchy.</param>
            <returns>A new FrameworkElement which will be added to the TreeMap control. If this
            method returns null the TreeMap will create the item using the ItemDefinition property,
            or the value returned by TreeMapItemDefinitionSelector if specified.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.ArrangeOverride(System.Windows.Size)">
            <summary>
            Performs the Arrange pass of the layout.
            </summary>
            <remarks>
            We round rectangles to snap to nearest pixels. We do that to avoid 
            anti-aliasing which results in better appearance. Moreover to get
            correct layout we would need to use UseLayoutRounding=false which
            is Silverlight specific. A side effect is that areas for rectangles 
            in the visual tree no longer can be used to compare them as dimensions
            are not rounded and therefore not precise. 
            </remarks>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.OnInterpolatorsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Triggers a recalculation of the layout when items are added/removed from the Interpolators collection.
            </summary>
            <param name="sender">Reference to the Interpolators collection.</param>
            <param name="e">Event handler arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.GetTreeMapNodes">
            <summary>
            Returns a sequence of TreeMapNodes in breadth-first order.
            </summary>
            <returns>Sequence of TreeMapNodes.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.ComputeRectangles(System.Windows.Controls.DataVisualization.TreeMapNode,System.Windows.Rect)">
            <summary>
            Recursively computes TreeMap rectangles given the root node and the bounding rectangle as start.
            </summary>
            <param name="root">Root of the TreeMapNode tree.</param>
            <param name="boundingRectangle">Bounding rectangle which will be sub-divided.</param>
            <returns>A list of RectangularAreas containing a rectangle for each node in the tree.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.BuildTreeMapTree(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Builds the parallel trees of TreeMapNodes with references to the original user's trees.
            </summary>
            <param name="nodes">The list of roots of the user hierarchies (whatever was passed through ItemsSource).</param>
            <param name="level">Level being processed at this recursive call (the root node is at level 0).</param>
            <returns>The list of roots of the internal trees of TreeMapNodes.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.CreateChildren">
            <summary>
            Extracts all children from the user's trees (ItemsSource) into a flat list, and 
            creates UI elements for them.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.RebuildTree">
            <summary>
            Called internally whenever a property of TreeMap is changed and the internal 
            structures need to be rebuilt in order to recalculate the layout.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMap.InterpolatorValue">
            <summary>
            Gets or sets a generic value used as a temporary storage used as a source for TargetName/TargetProperty binding.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMap.ItemDefinitionSelector">
            <summary>
            Gets or sets the selector used to choose the item template dynamically.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMap.ItemDefinition">
            <summary>
            Gets or sets a value representing the template used to display each item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMap.ItemsSource">
            <summary>
            Gets or sets a value representing the list of hierarchies used to generate
            content for the TreeMap.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMap.Interpolators">
            <summary>
            Gets or sets a value representing a collection of interpolators to use in TreeMap.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMap.ContainerElement">
            <summary>
            Gets the Container template part that is used to hold all the items inside
            a TreeMap.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.TreeMapItemDefinition">
            <summary>
            Represents a class that defines various aspects of TreeMap items.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMapItemDefinition._itemTemplate">
            <summary>
            A value representing the DataTemplate to instantiate in 
            order to create a representation of each TreeMap item.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMapItemDefinition._valueBinding">
            <summary>
            A value representing a binding which can be used 
            to retrieve the value associated with each item, needed to calculate 
            relative areas of TreeMap items.        
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMapItemDefinition._itemsSource">
            <summary>
            The binding that indicates where to find the collection
            that represents the next level in the data hierarchy.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMapItemDefinition._childItemPadding">
            <summary>
            A property representing the amount of space to leave 
            between a parent item and its children.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMapItemDefinition.#ctor">
            <summary>
            Initializes a new instance of the TreeMapItemDefinition class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMapItemDefinition.NotifyPropertyChanged(System.String)">
            <summary>
            Updates the TreeMap if one of properties changes.
            </summary>
            <param name="parameterName">The parameter name.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMapItemDefinition.ItemTemplate">
            <summary>
            Gets or sets a value representing the DataTemplate to instantiate in 
            order to create a representation of each TreeMap item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMapItemDefinition.ValueBinding">
            <summary>
            Gets or sets a value representing a binding which can be used 
            to retrieve the value associated with each item, needed to calculate 
            relative areas of TreeMap items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMapItemDefinition.ValuePath">
            <summary>
            Gets or sets the Value Path used to set ValueBinding for retrieving 
            the value associated with each item, needed to calculate relative 
            areas of TreeMap items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMapItemDefinition.ItemsSource">
            <summary>
            Gets or sets the binding that indicates where to find the collection
            that represents the next level in the data hierarchy.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMapItemDefinition.ChildItemPadding">
            <summary>
            Gets or sets a property representing the amount of space to leave 
            between a parent item and its children.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.TreeMapItemDefinition.PropertyChanged">
            <summary>
            PropertyChanged event required by INotifyPropertyChanged.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.TreeMapItemDefinitionSelector">
            <summary>
            Provides a way to choose a TreeMapItemDefinition based on the data item and 
            the level of the item in the tree.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMapItemDefinitionSelector.#ctor">
            <summary>
            Initializes a new instance of the TreeMapItemDefinitionSelector class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMapItemDefinitionSelector.SelectItemDefinition(System.Windows.Controls.DataVisualization.TreeMap,System.Object,System.Int32)">
            <summary>
            Returns an instance of a TreeMapItemDefinition class used to specify properties for the
            current item.
            </summary>
            <param name="treeMap">Reference to the TreeMap class.</param>
            <param name="item">One of the nodes in the ItemsSource hierarchy.</param>
            <param name="level">The level of the node in the hierarchy.</param>
            <returns>The TreeMapItemDefinition to be used for this node. If this method returns null
            the TreeMap will use the value of its ItemDefinition property.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Unit">
            <summary>
            Units of measure.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Unit.Pixels">
            <summary>
            The corresponding value is in pixels.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Unit.Degrees">
            <summary>
            The corresponding value is in degrees.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.UnitValue">
            <summary>
            A value in units.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UnitValue.NaN">
            <summary>
            Returns a UnitValue representing an invalid value.
            </summary>
            <returns>UnitValue instance.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UnitValue.#ctor(System.Double,System.Windows.Controls.DataVisualization.Unit)">
            <summary>
            Instantiates a new instance of the UnitValue struct.
            </summary>
            <param name="value">The value associated with the units.</param>
            <param name="unit">The units associated with the value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UnitValue.CompareTo(System.Object)">
            <summary>
            Compares two unit values to determine if they are equal or not.
            </summary>
            <param name="obj">The object being compared.</param>
            <returns>A number smaller than zero if the obj is larger than this
            object.  A number equal to 0 if they are equal.  A number greater 
            than zero if this unit value is greater than obj.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UnitValue.Equals(System.Object)">
            <summary>
            Determines if two values are equal.
            </summary>
            <param name="obj">The other value.</param>
            <returns>A value indicating whether values are equal.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UnitValue.op_Equality(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Determines whether two unit value objects are equal.
            </summary>
            <param name="left">The left unit value.</param>
            <param name="right">The right unit value.</param>
            <returns>A value indicating  whether two unit value objects are 
            equal.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UnitValue.op_Inequality(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Determines whether two unit value objects are not equal.
            </summary>
            <param name="left">The left unit value.</param>
            <param name="right">The right unit value.</param>
            <returns>A value indicating whether two unit value objects are not
            equal.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UnitValue.op_LessThan(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Determines whether the left value is smaller than the right.
            </summary>
            <param name="left">The left unit value.</param>
            <param name="right">The right unit value.</param>
            <returns>A value indicating whether the left value is smaller than
            the right.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UnitValue.op_GreaterThan(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Determines whether the left value is larger than the right.
            </summary>
            <param name="left">The left unit value.</param>
            <param name="right">The right unit value.</param>
            <returns>A value indicating whether the left value is larger than
            the right.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UnitValue.GetHashCode">
            <summary>
            Returns the hash code of the unit value object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.UnitValue.Value">
            <summary>
            Gets the value associated with the units.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.UnitValue.Unit">
            <summary>
            Gets the units associated with the value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.ValueHelper">
            <summary>
            A set of functions for data conversion operations.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.ValueHelper.Radian">
            <summary>
            The value of a single radian.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.CanGraph(System.Double)">
            <summary>
            Returns a value indicating whether this value can be graphed on a 
            linear axis.
            </summary>
            <param name="value">The value to evaluate.</param>
            <returns>A value indicating whether this value can be graphed on a 
            linear axis.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.TryConvert(System.Object,System.Double@)">
            <summary>
            Attempts to convert an object into a double.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="doubleValue">The double value.</param>
            <returns>A value indicating whether the value can be converted to a 
            double.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.TryConvert(System.Object,System.DateTime@)">
            <summary>
            Attempts to convert an object into a date time.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="dateTimeValue">The double value.</param>
            <returns>A value indicating whether the value can be converted to a 
            date time.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.ToDouble(System.Object)">
            <summary>
            Converts an object into a double.
            </summary>
            <param name="value">The value to convert to a double.</param>
            <returns>The converted double value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.ToDateTime(System.Object)">
            <summary>
            Converts a value to a date.
            </summary>
            <param name="value">The value to convert to a date.</param>
            <returns>The converted date value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.GetDateTimesBetweenInclusive(System.DateTime,System.DateTime,System.Int64)">
            <summary>
            Returns a sequence of date time values from a start and end date 
            time inclusive.
            </summary>
            <param name="start">The start date time.</param>
            <param name="end">The end date time.</param>
            <param name="count">The number of values to return.</param>
            <returns>A sequence of date time values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.GetTimeSpanIntervalsInclusive(System.TimeSpan,System.Int64)">
            <summary>
            Returns a sequence of time span values within a time span inclusive.
            </summary>
            <param name="timeSpan">The time span to split.</param>
            <param name="count">The number of time spans to return.</param>
            <returns>A sequence of time spans.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.GetIntervalsInclusive(System.Int64,System.Int64,System.Int64)">
            <summary>
            Returns that intervals between a start and end value, including those
            start and end values.
            </summary>
            <param name="start">The start value.</param>
            <param name="end">The end value.</param>
            <param name="count">The total number of intervals.</param>
            <returns>A sequence of intervals.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.RemoveNoiseFromDoubleMath(System.Double)">
            <summary>
            Removes the noise from double math.
            </summary>
            <param name="value">The value.</param>
            <returns>A double without a noise.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.ToDoubleRange(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Converts a range into a double range.
            </summary>
            <param name="range">The range to convert.</param>
            <returns>A range with its members converted to doubles.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.ToDateTimeRange(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Converts a range into a date time range.
            </summary>
            <param name="range">The range to convert.</param>
            <returns>A range with its members converted to date times.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.Compare(System.IComparable,System.IComparable)">
            <summary>
            Compares two IComparables returning -1 if the left is null and 1 if
            the right is null.
            </summary>
            <param name="left">The left comparable.</param>
            <param name="right">The right comparable.</param>
            <returns>A value indicating which is larger.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.Translate(System.Windows.Point,System.Windows.Point)">
            <summary>
            Applies the translate transform to a point.
            </summary>
            <param name="origin">The origin point.</param>
            <param name="offset">The offset point.</param>
            <returns>The translated point.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.ToComparableRange(System.Windows.Controls.DataVisualization.Range{System.Double})">
            <summary>
            Converts any range to a range of IComparable.
            </summary>
            <param name="range">The range to be converted.</param>
            <returns>The new range type.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.LeftOrDefault(System.Windows.Rect,System.Double)">
            <summary>
            Returns the left value of the rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="value">The default value.</param>
            <returns>The left value of the rectangle.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.RightOrDefault(System.Windows.Rect,System.Double)">
            <summary>
            Returns the right value of the rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="value">The default value.</param>
            <returns>The right value of the rectangle.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.WidthOrDefault(System.Windows.Rect,System.Double)">
            <summary>
            Returns the width value of the rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="value">The default value.</param>
            <returns>The width value of the rectangle.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.HeightOrDefault(System.Windows.Rect,System.Double)">
            <summary>
            Returns the height value of the rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="value">The default value.</param>
            <returns>The height value of the rectangle.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.BottomOrDefault(System.Windows.Rect,System.Double)">
            <summary>
            Returns the bottom value of the rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="value">The default value.</param>
            <returns>The bottom value of the rectangle.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.TopOrDefault(System.Windows.Rect,System.Double)">
            <summary>
            Returns the top value of the rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="value">The default value.</param>
            <returns>The top value of the rectangle.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.ToComparableRange(System.Windows.Controls.DataVisualization.Range{System.DateTime})">
            <summary>
            Converts any range to a range of IComparable.
            </summary>
            <param name="range">The range to be converted.</param>
            <returns>The new range type.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.GetLength(System.Windows.Controls.DataVisualization.Range{System.DateTime})">
            <summary>
            Returns the time span of a date range.
            </summary>
            <param name="range">The range of values.</param>
            <returns>The length of the range.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.GetLength(System.Windows.Controls.DataVisualization.Range{System.Double})">
            <summary>
            Returns the time span of a date range.
            </summary>
            <param name="range">The range of values.</param>
            <returns>The length of the range.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.IsEmptyOrHasNoSize(System.Windows.Rect)">
            <summary>
            Returns a value indicating whether a rectangle is empty or has
            no width or height.
            </summary>
            <param name="rect">The rectangle.</param>
            <returns>A value indicating whether a rectangle is empty or has
            no width or height.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.SetStyle(System.Windows.FrameworkElement,System.Windows.Style)">
            <summary>
            Sets the style property of an element.
            </summary>
            <param name="element">The element.</param>
            <param name="style">The style.</param>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Range`1">
            <summary>
            A range of values.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Range`1._hasData">
            <summary>
            A flag that determines whether the range is empty or not.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Range`1._maximum">
            <summary>
            The maximum value in the range.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Range`1._minimum">
            <summary>
            The minimum value in the range.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the Range class.
            </summary>
            <param name="minimum">The minimum value.</param>
            <param name="maximum">The maximum value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.op_Equality(System.Windows.Controls.DataVisualization.Range{`0},System.Windows.Controls.DataVisualization.Range{`0})">
            <summary>
            Compare two ranges and return a value indicating whether they are
            equal.
            </summary>
            <param name="leftRange">Left-hand side range.</param>
            <param name="rightRange">Right-hand side range.</param>
            <returns>A value indicating whether the ranges are equal.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.op_Inequality(System.Windows.Controls.DataVisualization.Range{`0},System.Windows.Controls.DataVisualization.Range{`0})">
            <summary>
            Compare two ranges and return a value indicating whether they are
            not equal.
            </summary>
            <param name="leftRange">Left-hand side range.</param>
            <param name="rightRange">Right-hand side range.</param>
            <returns>A value indicating whether the ranges are not equal.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.Add(System.Windows.Controls.DataVisualization.Range{`0})">
            <summary>
            Adds a range to the current range.
            </summary>
            <param name="range">A range to add to the current range.</param>
            <returns>A new range that encompasses the instance range and the
            range parameter.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.Equals(System.Windows.Controls.DataVisualization.Range{`0})">
            <summary>
            Compares the range to another range.
            </summary>
            <param name="range">A different range.</param>
            <returns>A value indicating whether the ranges are equal.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.Equals(System.Object)">
            <summary>
            Compares the range to an object.
            </summary>
            <param name="obj">Another object.</param>
            <returns>A value indicating whether the other object is a range,
            and if so, whether that range is equal to the instance range.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.Contains(`0)">
            <summary>
            Returns a value indicating whether a value is within a range.
            </summary>
            <param name="value">The value.</param>
            <returns>Whether the value is within the range.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.IntersectsWith(System.Windows.Controls.DataVisualization.Range{`0})">
            <summary>
            Returns a value indicating whether two ranges intersect.
            </summary>
            <param name="range">The range to compare against this range.</param>
            <returns>A value indicating whether the ranges intersect.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.GetHashCode">
            <summary>
            Computes a hash code value.
            </summary>
            <returns>A hash code value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.ToString">
            <summary>
            Returns the string representation of the range.
            </summary>
            <returns>The string representation of the range.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Range`1.HasData">
            <summary>
            Gets a value indicating whether the range is empty or not.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Range`1.Maximum">
            <summary>
            Gets the maximum value in the range.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Range`1.Minimum">
            <summary>
            Gets the minimum value in the range.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ColumnSeries">
            <summary>
            Represents a control that contains a data series to be rendered in column format.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnSeries.#ctor">
            <summary>
            Initializes a new instance of the ColumnSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnSeries.GetAxes(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Acquire a horizontal category axis and a vertical linear axis.
            </summary>
            <param name="firstDataPoint">The first data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnSeries.UpdateDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Updates each point.
            </summary>
            <param name="dataPoint">The data point to update.</param>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.LineSeries">
            <summary>
            Represents a control that contains a data series to be rendered in X/Y 
            line format.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.LineSeries.PointsProperty">
            <summary>
            Identifies the Points dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.LineSeries.PolylineStyleProperty">
            <summary>
            Identifies the PolylineStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineSeries.#ctor">
            <summary>
            Initializes a new instance of the LineSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineSeries.GetAxes(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Acquire a horizontal linear axis and a vertical linear axis.
            </summary>
            <param name="firstDataPoint">The first data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineSeries.UpdateShapeFromPoints(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Updates the Series shape object from a collection of Points.
            </summary>
            <param name="points">Collection of Points.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LineSeries.Points">
            <summary>
            Gets the collection of points that make up the line.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LineSeries.PolylineStyle">
            <summary>
            Gets or sets the style of the Polyline object that follows the data 
            points.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ScatterSeries">
            <summary>
            Represents a control that contains a data series to be rendered in X/Y scatter format.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.#ctor">
            <summary>
            Initializes a new instance of the ScatterSeries class.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.DependentRangeAxisProperty">
            <summary>
            Identifies the DependentRangeAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.OnDependentRangeAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="d">ScatterSeries that changed its DependentRangeAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.OnDependentRangeAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IRangeAxis)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.IndependentAxisProperty">
            <summary>
            Identifies the IndependentAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.OnIndependentAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="d">ScatterSeries that changed its IndependentAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.OnIndependentAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.GetAxes(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Acquire a horizontal linear axis and a vertical linear axis.
            </summary>
            <param name="firstDataPoint">The first data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.CreateDataPoint">
            <summary>
            Creates a new scatter data point.
            </summary>
            <returns>A scatter data point.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.GetResourceDictionaryEnumeratorFromHost">
            <summary>
            Returns the custom ResourceDictionary to use for necessary resources.
            </summary>
            <returns>
            ResourceDictionary to use for necessary resources.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.UpdateDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            This method updates a single data point.
            </summary>
            <param name="dataPoint">The data point to update.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.ActualDependentRangeAxis">
            <summary>
            Gets the dependent axis as a range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.DependentRangeAxis">
            <summary>
            Gets or sets the dependent range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.ActualIndependentAxis">
            <summary>
            Gets the independent axis as a range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.IndependentAxis">
            <summary>
            Gets or sets the independent range axis.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.PieSeries">
            <summary>
            Represents a control that contains a data series to be rendered in pie
            format.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieSeries.PaletteProperty">
            <summary>
            Identifies the Palette dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnPalettePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PaletteProperty property changed handler.
            </summary>
            <param name="d">Parent that changed its Palette.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnPalettePropertyChanged(System.Collections.ObjectModel.Collection{System.Windows.ResourceDictionary})">
            <summary>
            PaletteProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieSeries._resourceDictionaryEnumerator">
            <summary>
            The pie data point style enumerator.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.#ctor">
            <summary>
            Initializes a new instance of the PieSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnResourceDictionariesChanged(System.EventArgs)">
            <summary>
            Invokes the ResourceDictionariesChanged event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieSeries._dataPointLegendItems">
            <summary>
            A dictionary that links data points to their legend items.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.ConvertRatioOfRotationToPoint(System.Double,System.Double,System.Double)">
            <summary>
            Accepts a ratio of a full rotation, the x and y length and returns
            the 2D point using trigonometric functions.
            </summary>
            <param name="ratio">The ratio of a full rotation [0..1].</param>
            <param name="radiusX">The x radius.</param>
            <param name="radiusY">The y radius.</param>
            <returns>The corresponding 2D point.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.AddDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Creates a legend item for each data point.
            </summary>
            <param name="dataPoint">The data point added.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.RemoveDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Removes data point's legend item when the data point is removed.
            </summary>
            <param name="dataPoint">The data point to remove.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.CreateDataPoint">
            <summary>
            Creates a data point.
            </summary>
            <returns>A data point.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnBeforeUpdateDataPoints">
            <summary>
            Updates all ratios before data points are updated.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnDataPointsChanged(System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint},System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Called after data points have been loaded from the items source.
            </summary>
            <param name="newDataPoints">New active data points.</param>
            <param name="oldDataPoints">Old inactive data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.UpdateLegendItemIndexes">
            <summary>
            Updates the indexes of all legend items when a change is made to the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.UpdateRatios">
            <summary>
            Updates the ratios of each data point.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.UpdateDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Updates a data point.
            </summary>
            <param name="dataPoint">The data point to update.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.UpdatePieDataPointGeometry(System.Windows.Controls.DataVisualization.Charting.PieDataPoint,System.Double,System.Double)">
            <summary>
            Updates the PieDataPoint's Geometry property.
            </summary>
            <param name="pieDataPoint">PieDataPoint instance.</param>
            <param name="plotAreaWidth">PlotArea width.</param>
            <param name="plotAreaHeight">PlotArea height.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.CreatePieLegendItem(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Int32)">
            <summary>
            Creates a legend item from a data point.
            </summary>
            <param name="dataPoint">The data point to use to create the legend item.</param>
            <param name="index">The 1-based index of the Control.</param>
            <returns>The series host legend item.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.AttachEventHandlersToDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Attach event handlers to a data point.
            </summary>
            <param name="dataPoint">The data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.DetachEventHandlersFromDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Detaches event handlers from a data point.
            </summary>
            <param name="dataPoint">The data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.GlobalSeriesIndexChanged(System.Nullable{System.Int32})">
            <summary>
            This method updates the global series index property.
            </summary>
            <param name="globalIndex">The global index of the series.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnDataPointDependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.IComparable,System.IComparable)">
            <summary>
            Updates the data point when the dependent value is changed.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnDataPointIndependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object,System.Object)">
            <summary>
            Updates the data point when the independent value is changed.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnPieDataPointActualRatioChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Updates the data point when the pie data point's actual ratio is
            changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnPieDataPointActualOffsetRatioChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Updates the data point when the pie data point's actual offset ratio
            is changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnPieDataPointRatioChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Updates the data point when the pie data point's ratio is changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnPieDataPointOffsetRatioChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Updates the data point when the pie data point's offset ratio is 
            changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.GetResourceDictionariesWhere(System.Func{System.Windows.ResourceDictionary,System.Boolean})">
            <summary>
            Returns a rotating enumerator of ResourceDictionary objects that coordinates
            with the dispenser object to ensure that no two enumerators are on the same
            item. If the dispenser is reset or its collection is changed then the
            enumerators are also reset.
            </summary>
            <param name="predicate">A predicate that returns a value indicating
            whether to return an item.</param>
            <returns>An enumerator of ResourceDictionaries.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnSeriesHostPropertyChanged(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            Called when the value of the SeriesHost property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new series host value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.SeriesHostResourceDictionariesChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the SeriesHost's ResourceDictionariesChanged event.
            </summary>
            <param name="sender">ISeriesHost instance.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnDataPointStylePropertyChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            DataPointStyleProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnLegendItemStylePropertyChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            Called when the value of the LegendItemStyle property changes.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieSeries.Palette">
            <summary>
            Gets or sets a palette of ResourceDictionaries used by the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieSeries.ActivePieDataPoints">
            <summary>
            Gets the active pie data points.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieSeries.ResourceDictionaryDispenser">
            <summary>
            Gets or sets an object used to dispense styles from the style 
            palette.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.PieSeries.ResourceDictionariesChanged">
            <summary>
            Event that is invoked when the ResourceDictionaryDispenser's collection has changed.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryDispenser">
            <summary>
            A class that rotates through a list of ResourceDictionaries.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryDispenser._resourceDictionariesDispensed">
            <summary>
            A linked list of ResourceDictionaries dispensed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryDispenser._resourceDictionaryEnumerators">
            <summary>
            A bag of weak references to connected style enumerators.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryDispenser._ignoreResourceDictionaryDispensedByEnumerator">
            <summary>
            Value indicating whether to ignore that the enumerator has 
            dispensed a ResourceDictionary.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryDispenser._resourceDictionaries">
            <summary>
            The list of ResourceDictionaries of rotate.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryDispenser.ResourceDictionariesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This method is raised when the ResourceDictionaries collection is changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryDispenser._parent">
            <summary>
            The parent of the ResourceDictionaryDispenser.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryDispenser.#ctor">
            <summary>
            Initializes a new instance of the ResourceDictionaryDispenser class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryDispenser.Reset">
            <summary>
            Resets the state of the ResourceDictionaryDispenser and its enumerators.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryDispenser.Unregister(System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryEnumerator)">
            <summary>
            Unregisters an enumerator so that it can be garbage collected.
            </summary>
            <param name="enumerator">The enumerator.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryDispenser.GetResourceDictionariesWhere(System.Func{System.Windows.ResourceDictionary,System.Boolean})">
            <summary>
            Returns a rotating enumerator of ResourceDictionary objects that coordinates
            with the dispenser object to ensure that no two enumerators are on the same
            item. If the dispenser is reset or its collection is changed then the
            enumerators are also reset.
            </summary>
            <param name="predicate">A predicate that returns a value indicating
            whether to return an item.</param>
            <returns>An enumerator of ResourceDictionaries.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryDispenser.EnumeratorResourceDictionaryDispensed(System.Object,System.Windows.Controls.DataVisualization.ResourceDictionaryDispensedEventArgs)">
            <summary>
            This method is raised when an enumerator dispenses a ResourceDictionary.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryDispenser.OnParentChanged">
            <summary>
            Raises the ParentChanged event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryDispenser.OnEnumeratorResourceDictionaryDispensed(System.Object,System.Windows.Controls.DataVisualization.ResourceDictionaryDispensedEventArgs)">
            <summary>
            Raises the EnumeratorResourceDictionaryDispensed event.
            </summary>
            <param name="source">The source of the event.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryDispenser.OnResetting">
            <summary>
            This method raises the EnumeratorsResetting event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryDispenser.ParentResourceDictionariesChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the Parent's ResourceDictionariesChanged event.
            </summary>
            <param name="sender">Parent instance.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryDispenser.ResourceDictionaries">
            <summary>
            Gets or sets the list of ResourceDictionaries to rotate.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryDispenser.ResourceDictionariesChanged">
            <summary>
            Event that is invoked when the ResourceDictionaryDispenser's contents have changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ResourceDictionaryDispenser.Parent">
            <summary>
            Gets or sets the parent of the ResourceDictionaryDispenser.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.EnumerableFunctions">
            <summary>
            This class contains general purpose functions to manipulate the generic
            IEnumerable type.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.FastCount(System.Collections.IEnumerable)">
            <summary>
            Attempts to cast IEnumerable to a list in order to retrieve a count 
            in order one.  It attempts to cast fail the sequence is enumerated.
            </summary>
            <param name="that">The sequence.</param>
            <returns>The number of elements in the sequence.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.MinOrNull``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.IComparable})">
            <summary>
            Returns the minimum value in the stream based on the result of a
            project function.
            </summary>
            <typeparam name="T">The stream type.</typeparam>
            <param name="that">The stream.</param>
            <param name="projectionFunction">The function that transforms the
            item.</param>
            <returns>The minimum value or null.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.SumOrDefault(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the sum of all values in the sequence or the default value.
            </summary>
            <param name="that">The stream.</param>
            <returns>The sum of all values or the default value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.MaxOrNull``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.IComparable})">
            <summary>
            Returns the maximum value in the stream based on the result of a
            project function.
            </summary>
            <typeparam name="T">The stream type.</typeparam>
            <param name="that">The stream.</param>
            <param name="projectionFunction">The function that transforms the
            item.</param>
            <returns>The maximum value or null.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Accepts two sequences and applies a function to the corresponding 
            values in the two sequences.
            </summary>
            <typeparam name="T0">The type of the first sequence.</typeparam>
            <typeparam name="T1">The type of the second sequence.</typeparam>
            <typeparam name="R">The return type of the function.</typeparam>
            <param name="enumerable0">The first sequence.</param>
            <param name="enumerable1">The second sequence.</param>
            <param name="func">The function to apply to the corresponding values
            from the two sequences.</param>
            <returns>A sequence of transformed values from both sequences.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.Iterate``1(``0,System.Func{``0,``0})">
            <summary>
            Creates a sequence of values by accepting an initial value, an 
            iteration function, and apply the iteration function recursively.
            </summary>
            <typeparam name="T">The type of the sequence.</typeparam>
            <param name="value">The initial value.</param>
            <param name="nextFunction">The function to apply to the value.
            </param>
            <returns>A sequence of the iterated values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.IndexOf(System.Collections.IEnumerable,System.Object)">
            <summary>
            Returns the index of an item in a sequence.
            </summary>
            <param name="that">The sequence.</param>
            <param name="value">The item to search for.</param>
            <returns>The index of the item or -1 if not found.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.ForEachWithIndex``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Executes an action for each item and a sequence, passing in the 
            index of that item to the action procedure.
            </summary>
            <typeparam name="T">The type of the sequence.</typeparam>
            <param name="that">The sequence.</param>
            <param name="action">A function that accepts a sequence item and its
            index in the sequence.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.FastElementAt``1(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Attempts to retrieve an element at an index by testing whether a 
            sequence is randomly accessible.  If not, performance degrades to a 
            linear search.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="that">The sequence.</param>
            <param name="index">The index of the element in the sequence.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.Scan``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Applies an accumulator function over a sequence and returns each intermediate result.
            </summary>
            <typeparam name="T">Type of elements in source sequence.</typeparam>
            <typeparam name="S">Type of elements in result sequence.</typeparam>
            <param name="that">Sequence to scan.</param>
            <param name="seed">Initial accumulator value.</param>
            <param name="accumulator">Function used to generate the result sequence.</param>
            <returns>Sequence of intermediate results.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.CastWrapper``1(System.Collections.IEnumerable)">
            <summary>
            Converts the elements of an System.Collections.IEnumerable to the specified type.
            </summary>
            <remarks>
            A wrapper for the Enumerable.Cast(T) method that works around a limitation on some platforms.
            </remarks>
            <typeparam name="TResult">The type to convert the elements of source to.</typeparam>
            <param name="source">The System.Collections.IEnumerable that contains the elements to be converted.</param>
            <returns>
            An System.Collections.Generic.IEnumerable(T) that contains each element of the source sequence converted to the specified type.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Legend">
            <summary>
            Represents a control that displays a list of items and has a title.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Legend.#ctor">
            <summary>
            Initializes a new instance of the Legend class.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Legend.TitleStyleProperty">
            <summary>
            Identifies the TitleStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Legend.ContentVisibilityProperty">
            <summary>
            Identifies the ContentVisibility dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Legend.OnHeaderChanged(System.Object,System.Object)">
            <summary>
            Handles the OnHeaderChanged event for HeaderedItemsControl.
            </summary>
            <param name="oldHeader">Old header.</param>
            <param name="newHeader">New header.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Legend.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event for HeaderedItemsControl's ItemsSource.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Legend.UpdateContentVisibility">
            <summary>
            Updates the ContentVisibility property to reflect the presence of content.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Legend.TitleStyle">
            <summary>
            Gets or sets the Style of the ISeriesHost's Title.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Legend.ContentVisibility">
            <summary>
            Gets the Visibility of the Legend's content (title and items).
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.RangeEnumerableExtensions">
            <summary>
            Collection of functions that manipulate streams of ranges.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.RangeEnumerableExtensions.GetRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the minimum and maximum values in a stream.
            </summary>
            <typeparam name="T">The type of the stream.</typeparam>
            <param name="that">The stream.</param>
            <returns>The range of values in the stream.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.RangeEnumerableExtensions.Sum``1(System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Range{``0}})">
            <summary>
            Returns a range encompassing all ranges in a stream.
            </summary>
            <typeparam name="T">The type of the minimum and maximum values.
            </typeparam>
            <param name="that">The stream.</param>
            <returns>A range encompassing all ranges in a stream.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.ResourceDictionaryCollection">
            <summary>
            Represents a collection of ResourceDictionary objects.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ResourceDictionaryCollection.#ctor">
            <summary>
            Initializes a new instance of the ResourceDictionaryCollection class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Title">
            <summary>
            Represents the title of a data visualization control.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Title.#ctor">
            <summary>
            Initializes a new instance of the Title class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.Primitives.DelegatingListBox">
            <summary>
            Subclasses ListBox to provide an easy way for a consumer of
            ListBox to hook into the four standard ListBox *Container*
            overrides.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.DelegatingListBox.#ctor">
            <summary>
            Initializes a new instance of the DelegatingListBox class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.DelegatingListBox.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item">The item to check.</param>
            <returns>True if the item is (or is eligible to be) its own container; otherwise, false.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.DelegatingListBox.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>The element that is used to display the given item.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.DelegatingListBox.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">The element used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.DelegatingListBox.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Undoes the effects of the PrepareContainerForItemOverride method.
            </summary>
            <param name="element">The container element.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Primitives.DelegatingListBox.IsItemItsOwnContainer">
            <summary>
            Gets or sets a function to call when the
            IsItemItsOwnContainerOverride method executes.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Primitives.DelegatingListBox.GetContainerForItem">
            <summary>
            Gets or sets a function to call when the
            GetContainerForItem method executes.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Primitives.DelegatingListBox.PrepareContainerForItem">
            <summary>
            Gets or sets an action to call when the
            PrepareContainerForItem method executes.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Primitives.DelegatingListBox.ClearContainerForItem">
            <summary>
            Gets or sets an action to call when the
            ClearContainerForItem method executes.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries">
            <summary>
            Implements a series that is defined by one or more instances of the DefinitionSeries class.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SeriesAreaName">
            <summary>
            Name of the SeriesArea property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.ItemContainerName">
            <summary>
            Name of the ItemContainer property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries._legendItems">
            <summary>
            Stores an aggregated collection of legend items from the series definitions.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries._seriesDefinitions">
            <summary>
            Stores the collection of SeriesDefinitions that define the series.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries._seriesDefinitionsAsISeries">
            <summary>
            Stores a mirror collection of ISeries corresponding directly to the collection of SeriesDefinitions.
            </summary>
            <remarks>
            Not using ObservableCollectionListAdapter because of race condition on ItemsChanged event
            </remarks>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries._seriesAreaChildrenListAdapter">
            <summary>
            Keeps the SeriesDefinitions collection synchronized with the Children collection of the SeriesArea.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries._clipGeometry">
            <summary>
            Stores the clip geometry for the ItemContainer.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries._itemContainer">
            <summary>
            Stores a reference to the ItemContainer template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries._queueUpdateDataItemPlacement_DataItems">
            <summary>
            Tracks the collection of DataItem that are queued for update.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries._queueUpdateDataItemPlacement_DependentAxisValuesChanged">
            <summary>
            Tracks whether the dependent axis values changed for the next update.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries._queueUpdateDataItemPlacement_IndependentAxisValuesChanged">
            <summary>
            Tracks whether the independent axis values changed for the next update.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries._selectedItems">
            <summary>
            Stores a reference to the backing collection for the SelectedItems property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries._synchronizingSelectedItems">
            <summary>
            Tracks whether the SelectedItems collection is being synchronized (to prevent reentrancy).
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.#ctor">
            <summary>
            Initializes a new instance of the DefinitionSeries class.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DependentAxisProperty">
            <summary>
            Identifies the DependentAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.OnDependentAxisChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the DependentAxis dependency property.
            </summary>
            <param name="o">DependencyObject that changed.</param>
            <param name="e">Event data for the DependencyPropertyChangedEvent.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.OnDependentAxisChanged(System.Windows.Controls.DataVisualization.Charting.IAxis,System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            Handles changes to the DependentAxis property.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.IndependentAxisProperty">
            <summary>
            Identifies the IndependentAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.OnIndependentAxisChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the IndependentAxis dependency property.
            </summary>
            <param name="o">DependencyObject that changed.</param>
            <param name="e">Event data for the DependencyPropertyChangedEvent.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.OnIndependentAxisChanged(System.Windows.Controls.DataVisualization.Charting.IAxis,System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            Handles changes to the IndependentAxis property.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.ActualDependentAxisProperty">
            <summary>
            Identifies the ActualDependentAxis dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.ActualIndependentAxisProperty">
            <summary>
            Identifies the ActualIndependentAxis dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries._seriesHost">
            <summary>
            Stores the SeriesHost for the series.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SelectionModeProperty">
            <summary>
            Identifies the SelectionMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.OnSelectionModeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the SelectionMode dependency property.
            </summary>
            <param name="o">DependencyObject that changed.</param>
            <param name="e">Event data for the DependencyPropertyChangedEvent.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.OnSelectionModeChanged(System.Windows.Controls.DataVisualization.Charting.SeriesSelectionMode,System.Windows.Controls.DataVisualization.Charting.SeriesSelectionMode)">
            <summary>
            Handles changes to the SelectionMode property.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SelectedIndexProperty">
            <summary>
            Identifies the SelectedIndex dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SelectedItemProperty">
            <summary>
            Identifies the SelectedItem dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SelectedItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event of the SelectedItems collection.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.ItemContainerSelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles the SelectionChanged event of the ItemContainer class.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.OnApplyTemplate">
            <summary>
            Builds the visual tree for the control when a new template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.PrepareContainerForItem(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">The element used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.ClearContainerForItem(System.Windows.DependencyObject,System.Object)">
            <summary>
            Undoes the effects of the PrepareContainerForItemOverride method.
            </summary>
            <param name="element">The container element.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.PrepareDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Prepares a DataPoint for use.
            </summary>
            <param name="dataPoint">DataPoint instance.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.CreateDataPoint">
            <summary>
            Creates a DataPoint for the series.
            </summary>
            <returns>Series-appropriate DataPoint instance.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.InternalCreateDataPoint">
            <summary>
            Provides an internally-accessible wrapper for calling CreateDataPoint.
            </summary>
            <returns>Series-appropriate DataPoint instance.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.ItemContainerSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Handles the SizeChanged event of the ItemContainer.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DataItemFromDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Returns the DataItem corresponding to the specified DataPoint.
            </summary>
            <param name="dataPoint">Specified DataPoint.</param>
            <returns>Corresponding DataItem.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DataPointDependentValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.IComparable})">
            <summary>
            Handles the DependentValueChanged event of a DataPoint.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DataPointActualDependentValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.IComparable})">
            <summary>
            Handles the ActualDependentValueChanged event of a DataPoint.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DataPointIndependentValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            Handles the IndependentValueChanged event of a DataPoint.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DataPointActualIndependentValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            Handles the ActualIndependentValueChanged event of a DataPoint.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DataPointStateChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Windows.Controls.DataVisualization.Charting.DataPointState})">
            <summary>
            Handles the StateChanged event of a DataPoint.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.NotifyAxisValuesChanged(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            Notifies the specified axis of changes to values plotting against it.
            </summary>
            <param name="axis">Specified axis.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.NotifyValueMarginsChanged(System.Windows.Controls.DataVisualization.Charting.IAxis,System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.ValueMargin})">
            <summary>
            Notifies the specified axis of changes to value margins plotting against it.
            </summary>
            <param name="axis">Specified axis.</param>
            <param name="valueMargins">Sequence of value margins that have changed.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SeriesDefinitionsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event of the SeriesDefinitions collection.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SeriesDefinitionsCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Collections.IList,System.Int32)">
            <summary>
            Handles the CollectionChanged event of the SeriesDefinitions collection.
            </summary>
            <param name="action">Type of change.</param>
            <param name="oldItems">Sequence of old items.</param>
            <param name="oldStartingIndex">Starting index of old items.</param>
            <param name="newItems">Sequence of new items.</param>
            <param name="newStartingIndex">Starting index of new items.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.UpdatePaletteProperties(System.Windows.Controls.DataVisualization.Charting.SeriesDefinition)">
            <summary>
            Updates the palette properties of the specified SeriesDefinition.
            </summary>
            <param name="definition">Specified SeriesDefinition.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SeriesDefinitionItemsSourceChanged(System.Windows.Controls.DataVisualization.Charting.SeriesDefinition,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Handles changes to the ItemsSource of a SeriesDefinition.
            </summary>
            <param name="definition">SeriesDefinition owner.</param>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SeriesDefinitionItemsSourceCollectionChanged(System.Windows.Controls.DataVisualization.Charting.SeriesDefinition,System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Collections.IList,System.Int32)">
            <summary>
            Handles changes to the ItemsSource collection  of a SeriesDefinition.
            </summary>
            <param name="definition">SeriesDefinition owner.</param>
            <param name="action">Type of change.</param>
            <param name="oldItems">Sequence of old items.</param>
            <param name="oldStartingIndex">Starting index of old items.</param>
            <param name="newItems">Sequence of new items.</param>
            <param name="newStartingIndex">Starting index of new items.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SeriesHostResourceDictionariesChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the ResourceDictionariesChanged event of the SeriesHost owner.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.AddDataItems(System.Windows.Controls.DataVisualization.Charting.SeriesDefinition,System.Collections.Generic.IEnumerable{System.Object},System.Int32)">
            <summary>
            Creates and adds DataItems for the specified SeriesDefinition's items.
            </summary>
            <param name="definition">Specified SeriesDefinition.</param>
            <param name="items">Sequence of items.</param>
            <param name="startingIndex">Starting index.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.AddedDataItems">
            <summary>
            Updates the axes after DataItems have been added.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.RemovedDataItems">
            <summary>
            Notifies the axes after DataItems have been removed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.EnsureAxes(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Ensures that suitable axes are present and registered.
            </summary>
            <param name="updateDependentAxis">True if the dependent axis needs to be updated.</param>
            <param name="updateIndependentAxis">True if the independent axis needs to be updated.</param>
            <param name="unconditionallyNotifyAxes">True if both axis are to be notified unconditionally.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.AcquireDependentAxis">
            <summary>
            Acquires a dependent axis suitable for use with the data values of the series.
            </summary>
            <returns>Axis instance.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.AcquireIndependentAxis">
            <summary>
            Acquires an independent axis suitable for use with the data values of the series.
            </summary>
            <returns>Axis instance.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.System#Windows#Controls#DataVisualization#Charting#IAxisListener#AxisInvalidated(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            Handles notification of the invalidation of an axis.
            </summary>
            <param name="axis">Invalidated axis.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.QueueUpdateDataItemPlacement(System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DataItem})">
            <summary>
            Queues an update of DataItem placement for the next update opportunity.
            </summary>
            <param name="dependentAxisValuesChanged">True if the dependent axis values have changed.</param>
            <param name="independentAxisValuesChanged">True if the independent axis values have changed.</param>
            <param name="dataItems">Sequence of DataItems to update.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.ArrangeOverride(System.Windows.Size)">
            <summary>
            Called when the control needs to arrange its children.
            </summary>
            <param name="arrangeBounds">Bounds to arrange within.</param>
            <returns>Arranged size.</returns>
            <remarks>
            Used as a good place to dequeue queued work.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.UpdateDataItemPlacement(System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DataItem})">
            <summary>
            Updates the placement of the DataItems (data points) of the series.
            </summary>
            <param name="dataItems">DataItems in need of an update.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.System#Windows#Controls#DataVisualization#Charting#IRangeProvider#GetRange(System.Windows.Controls.DataVisualization.Charting.IRangeConsumer)">
            <summary>
            Returns the range for the data points of the series.
            </summary>
            <param name="rangeConsumer">Consumer of the range.</param>
            <returns>Range of values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.IRangeProviderGetRange(System.Windows.Controls.DataVisualization.Charting.IRangeConsumer)">
            <summary>
            Returns the range for the data points of the series.
            </summary>
            <param name="rangeConsumer">Consumer of the range.</param>
            <returns>Range of values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.System#Windows#Controls#DataVisualization#Charting#IValueMarginProvider#GetValueMargins(System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer)">
            <summary>
            Returns the value margins for the data points of the series.
            </summary>
            <param name="valueMarginConsumer">Consumer of the value margins.</param>
            <returns>Sequence of value margins.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.IValueMarginProviderGetValueMargins(System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer)">
            <summary>
            Returns the value margins for the data points of the series.
            </summary>
            <param name="valueMarginConsumer">Consumer of the value margins.</param>
            <returns>Sequence of value margins.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.System#Windows#Controls#DataVisualization#Charting#IDataProvider#GetData(System.Windows.Controls.DataVisualization.Charting.IDataConsumer)">
            <summary>
            Returns the data for the data points of the series.
            </summary>
            <param name="dataConsumer">Consumer of the data.</param>
            <returns>Sequence of data.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.IDataProviderGetData(System.Windows.Controls.DataVisualization.Charting.IDataConsumer)">
            <summary>
            Returns the data for the data points of the series.
            </summary>
            <param name="dataConsumer">Consumer of the data.</param>
            <returns>Sequence of data.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.System#Windows#Controls#DataVisualization#IResourceDictionaryDispenser#GetResourceDictionariesWhere(System.Func{System.Windows.ResourceDictionary,System.Boolean})">
            <summary>
            Gets a IResourceDictionaryDispenser for the series as a series host.
            </summary>
            <param name="predicate">Predicate function.</param>
            <returns>Sequence of ResourceDictionaries.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.IsStacked100">
            <summary>
            Gets or sets a value indicating whether the series is 100% stacked (versus normally stacked).
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DataItems">
            <summary>
            Gets the collection of DataItems representing the data of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SeriesArea">
            <summary>
            Gets the SeriesArea template part instance.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DependentAxis">
            <summary>
            Gets or sets the dependent axis of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.IndependentAxis">
            <summary>
            Gets or sets the independent axis of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.ActualDependentAxis">
            <summary>
            Gets the rendered dependent axis of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.ActualIndependentAxis">
            <summary>
            Gets the rendered independent axis of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.ActualDependentRangeAxis">
            <summary>
            Gets the ActualDependentAxis as an IRangeAxis instance.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.LegendItems">
            <summary>
            Gets the collection of legend items for the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SeriesHost">
            <summary>
            Gets or sets the SeriesHost for the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SeriesDefinitions">
            <summary>
            Gets or sets the collection of SeriesDefinitions that define the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SelectionMode">
            <summary>
            Gets or sets the SelectionMode property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SelectedIndex">
            <summary>
            Gets or sets the SelectedIndex property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SelectedItem">
            <summary>
            Gets or sets the SelectedItem property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SelectedItems">
            <summary>
            Gets the currently selected items.
            </summary>
            <remarks>
            This property is meant to be used when SelectionMode is Multiple. If the selection mode is Single the correct property to use is SelectedItem.
            </remarks>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SelectionChanged">
            <summary>
            Occurs when the selection of a DefinitionSeries changes.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.IndependentValueGroups">
            <summary>
            Gets a sequence of IndependentValueGroups.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.IndependentValueGroupsOrderedByIndependentValue">
            <summary>
            Gets a sequence of IndependentValueGroups ordered by independent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.IndependentValueDependentValues">
            <summary>
            Gets a sequence of sequences of the dependent values associated with each independent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.System#Windows#Controls#DataVisualization#Charting#ISeriesHost#Axes">
            <summary>
            Gets the axes for the series as a series host.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.System#Windows#Controls#DataVisualization#Charting#ISeriesHost#Series">
            <summary>
            Gets the series for the series as a series host.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.System#Windows#Controls#DataVisualization#Charting#ISeriesHost#ForegroundElements">
            <summary>
            Gets the foreground elements for the series as a series host.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.System#Windows#Controls#DataVisualization#Charting#ISeriesHost#BackgroundElements">
            <summary>
            Gets the background elements for the series as a series host.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.System#Windows#Controls#DataVisualization#IResourceDictionaryDispenser#ResourceDictionariesChanged">
            <summary>
            Event that is triggered when the available ResourceDictionaries change.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.IndependentValueGroup">
            <summary>
            Represents an independent value and the dependent values that are associated with it.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.IndependentValueGroup.#ctor(System.Object,System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DataItem})">
            <summary>
            Initializes a new instance of the IndependentValueGroup class.
            </summary>
            <param name="independentValue">Independent value.</param>
            <param name="dataItems">Associated DataItems.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.IndependentValueGroup.IndependentValue">
            <summary>
            Gets the independent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.IndependentValueGroup.DataItems">
            <summary>
            Gets a sequence of DataItems associated with the independent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.IndependentValueGroup.Denominator">
            <summary>
            Gets or sets the denominator to use when computing with this instance.
            </summary>
            <remarks>
            Exists here purely to simplify the the corresponding algorithm.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DataItem">
            <summary>
            Represents a single data value from a SeriesDefinition's ItemsSource.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DataItem._bindingHelper">
            <summary>
            Stores a reference to a shared BindingHelper instance.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DataItem.#ctor(System.Windows.Controls.DataVisualization.Charting.SeriesDefinition)">
            <summary>
            Initializes a new instance of the DataItem class.
            </summary>
            <param name="seriesDefinition">SeriesDefinition owner.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DataItem._value">
            <summary>
            Stores the value of the DataItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DataItem.SeriesDefinition">
            <summary>
            Gets the SeriesDefinition owner of the DataItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DataItem.Value">
            <summary>
            Gets or sets the value of the DataItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DataItem.Index">
            <summary>
            Gets or sets the index of the DataItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DataItem.DataPoint">
            <summary>
            Gets or sets the DataPoint associated with the DataItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DataItem.Container">
            <summary>
            Gets or sets the container for the DataPoint within its parent ItemsControl.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DataItem.ActualDependentValue">
            <summary>
            Gets the ActualDependentValue of the DataPoint (or its equivalent).
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DataItem.ActualIndependentValue">
            <summary>
            Gets the ActualIndependentValue of the DataPoint (or its equivalent).
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DataItem.ActualStackedDependentValue">
            <summary>
            Gets or sets the ActualDependentValue of the DataPoint after adjusting for applicable stacking.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DataItem.CenterPoint">
            <summary>
            Gets or sets the center-point of the DataPoint in plot area coordinates (if relevant).
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.BindingHelper">
            <summary>
            Provides an easy way to evaluate a Binding against a source instance.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.BindingHelper.#ctor">
            <summary>
            Initializes a new instance of the BindingHelper class.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.BindingHelper.ResultProperty">
            <summary>
            Identifies the Result dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.BindingHelper.EvaluateBinding(System.Windows.Data.Binding,System.Object)">
            <summary>
            Evaluates a Binding against a source instance.
            </summary>
            <param name="binding">Binding to evaluate.</param>
            <param name="instance">Source instance.</param>
            <returns>Result of Binding on source instance.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SelectedItemToDataItemConverter">
            <summary>
            Converts from a selected item to the corresponding DataItem.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SelectedItemToDataItemConverter._dataItems">
            <summary>
            Stores a reference to the DataItem collection.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SelectedItemToDataItemConverter.#ctor(System.Collections.ObjectModel.ObservableCollection{System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DataItem})">
            <summary>
            Initializes a new instance of the SelectedItemToDataItemConverter class.
            </summary>
            <param name="dataItems">Collection of DataItems.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SelectedItemToDataItemConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SelectedItemToDataItemConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value back.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SelectionModeToSelectionEnabledConverter">
            <summary>
            Converts from a SeriesSelectionMode to a true/false value indicating whether selection is enabled.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SelectionModeToSelectionEnabledConverter.#ctor">
            <summary>
            Initializes a new instance of the SelectionModeToSelectionEnabledConverter class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SelectionModeToSelectionEnabledConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.SelectionModeToSelectionEnabledConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value back.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition">
            <summary>
            Defines the attributes of a series that is to be rendered by the DefinitionSeries class.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.DataPointStyleName">
            <summary>
            Name of the DataPointStyle property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.LegendItemStyleName">
            <summary>
            Name of the LegendItemStyle property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.DataShapeStyleName">
            <summary>
            Name of the DataShapeStyle property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition._legendItems">
            <summary>
            Provides the store for the ISeries.LegendItems property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition._legendItem">
            <summary>
            Represents the single LegendItem corresponding to the SeriesDefinition.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition._weakEventListener">
            <summary>
            Keeps a reference to the WeakEventListener used to prevent leaks of collections assigned to the ItemsSource property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.#ctor">
            <summary>
            Initializes a new instance of the SeriesDefinition class.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.OnItemsSourceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the ItemsSource dependency property.
            </summary>
            <param name="o">DependencyObject that changed.</param>
            <param name="e">Event data for the DependencyPropertyChangedEvent.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Handles changes to the ItemsSource property.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.ItemsSourceCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event for the ItemsSource property.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments..</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition._automaticTitle">
            <summary>
            Stores the automatic title of the series definition.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.TitleProperty">
            <summary>
            Identifies the Title dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.OnTitleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the Title dependency property.
            </summary>
            <param name="o">DependencyObject that changed.</param>
            <param name="e">Event data for the DependencyPropertyChangedEvent.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.OnTitleChanged(System.Object,System.Object)">
            <summary>
            Handles changes to the Title property.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.ActualTitleProperty">
            <summary>
            Identifies the ActualTitle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition._paletteDataPointStyle">
            <summary>
            Stores the DataPoint Style from the SeriesHost's Palette.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.DataPointStyleProperty">
            <summary>
            Identifies the DataPointStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.OnDataPointStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the DataPointStyle dependency property.
            </summary>
            <param name="o">DependencyObject that changed.</param>
            <param name="e">Event data for the DependencyPropertyChangedEvent.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.OnDataPointStyleChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            Handles changes to the DataPointStyle property.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.ActualDataPointStyleProperty">
            <summary>
            Identifies the ActualDataPointStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition._paletteLegendItemStyle">
            <summary>
            Stores the LegendItem Style from the SeriesHost's Palette.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.LegendItemStyleProperty">
            <summary>
            Identifies the LegendItemStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.OnLegendItemStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the LegendItemStyle dependency property.
            </summary>
            <param name="o">DependencyObject that changed.</param>
            <param name="e">Event data for the DependencyPropertyChangedEvent.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.OnLegendItemStyleChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            Handles changes to the LegendItemStyle property.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.ActualLegendItemStyleProperty">
            <summary>
            Identifies the ActualDataPointStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition._paletteDataShapeStyle">
            <summary>
            Stores the DataShape Style from the SeriesHost's Palette.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.DataShapeStyleProperty">
            <summary>
            Identifies the DataShapeStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.OnDataShapeStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the DataShapeStyle dependency property.
            </summary>
            <param name="o">DependencyObject that changed.</param>
            <param name="e">Event data for the DependencyPropertyChangedEvent.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.OnDataShapeStyleChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            Handles changes to the DataShapeStyle property.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.ActualDataShapeStyleProperty">
            <summary>
            Identifies the ActualDataShapeStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition._dependentValueBinding">
            <summary>
            The binding used to identify the dependent value binding.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition._independentValueBinding">
            <summary>
            The binding used to identify the independent value binding.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.Reset">
            <summary>
            Resets the display of the series definition.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition._seriesHost">
            <summary>
            Stores the SeriesHost for the series definition.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.System#Windows#Controls#DataVisualization#Charting#IRequireGlobalSeriesIndex#GlobalSeriesIndexChanged(System.Nullable{System.Int32})">
            <summary>
            Handles changes to the global series index of the series definition.
            </summary>
            <param name="globalIndex">New index.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.TransitionDurationProperty">
            <summary>
            Identifies the TransitionDuration dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.TransitionEasingFunctionProperty">
            <summary>
            Identifies the TransitionEasingFunction dependency property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.Index">
            <summary>
            Gets or sets the index of the series definition.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.ItemsSource">
            <summary>
            Gets or sets a sequence that provides the content of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.AutomaticTitle">
            <summary>
            Gets or sets the automatic title of the series definition.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.Title">
            <summary>
             Gets or sets the Title of the series definition.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.ActualTitle">
            <summary>
            Gets the rendered Title of the series definition.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.PaletteDataPointStyle">
            <summary>
            Gets or sets the DataPoint Style from the SeriesHost's Palette.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.DataPointStyle">
            <summary>
            Gets or sets the DataPoint Style for the series definition.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.ActualDataPointStyle">
            <summary>
            Gets the rendered DataPoint Style for the series definition.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.PaletteLegendItemStyle">
            <summary>
            Gets or sets the LegendItem Style from the SeriesHost's Palette.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.LegendItemStyle">
            <summary>
            Gets or sets the LegendItem Style for the series definition.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.ActualLegendItemStyle">
            <summary>
            Gets the rendered LegendItem Style for the series definition.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.PaletteDataShapeStyle">
            <summary>
            Gets or sets the DataShape Style from the SeriesHost's Palette.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.DataShapeStyle">
            <summary>
            Gets or sets the DataShape Style for the series definition.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.ActualDataShapeStyle">
            <summary>
            Gets the rendered DataShape Style for the series definition.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.DependentValueBinding">
            <summary>
            Gets or sets the Binding to use for identifying the dependent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.DependentValuePath">
            <summary>
            Gets or sets the Binding Path to use for identifying the dependent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.IndependentValueBinding">
            <summary>
            Gets or sets the Binding to use for identifying the independent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.IndependentValuePath">
            <summary>
            Gets or sets the Binding Path to use for identifying the independent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.ParentDefinitionSeries">
            <summary>
            Gets the SeriesHost as a DefinitionSeries instance.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.System#Windows#Controls#DataVisualization#Charting#ISeries#LegendItems">
            <summary>
            Gets the collection of legend items for the series definition.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.System#Windows#Controls#DataVisualization#Charting#IRequireSeriesHost#SeriesHost">
            <summary>
            Gets or sets the SeriesHost for the series definition.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.TransitionDuration">
            <summary>
            Gets or sets the TimeSpan to use for the duration of data transitions.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesDefinition.TransitionEasingFunction">
            <summary>
            Gets or sets the IEasingFunction to use for data transitions.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.SeriesSelectionMode">
            <summary>
            Defines the selection behavior for a series.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesSelectionMode.None">
            <summary>
            Selection is disabled.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesSelectionMode.Single">
            <summary>
            The user can select only one item at a time.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.SeriesSelectionMode.Multiple">
            <summary>
            The user can select multiple items without holding down a modifier key.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.Stacked100AreaSeries">
            <summary>
            Control that displays values as a 100% stacked area chart visualization.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.StackedAreaSeries">
            <summary>
            Control that displays values as a stacked area chart visualization.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.StackedAreaLineSeries">
            <summary>
            Control base class for displaying values as a stacked area/line chart visualization.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedAreaLineSeries.#ctor">
            <summary>
            Initializes a new instance of the StackedAreaLineSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedAreaLineSeries.OnApplyTemplate">
            <summary>
            Builds the visual tree for the control when a new template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedAreaLineSeries.SeriesDefinitionsCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Collections.IList,System.Int32)">
            <summary>
            Called when the SeriesDefinitions collection changes.
            </summary>
            <param name="action">Type of change.</param>
            <param name="oldItems">Sequence of old items.</param>
            <param name="oldStartingIndex">Starting index of old items.</param>
            <param name="newItems">Sequence of new items.</param>
            <param name="newStartingIndex">Starting index of new items.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedAreaLineSeries.AcquireDependentAxis">
            <summary>
            Acquires a dependent axis suitable for use with the data values of the series.
            </summary>
            <returns>Axis instance.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedAreaLineSeries.AcquireIndependentAxis">
            <summary>
            Acquires an independent axis suitable for use with the data values of the series.
            </summary>
            <returns>Axis instance.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedAreaLineSeries.PrepareDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Prepares a DataPoint for use.
            </summary>
            <param name="dataPoint">DataPoint instance.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedAreaLineSeries.DataPointSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Handles the SizeChanged event of a DataPoint to update the value margins for the series.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedAreaLineSeries.CreateDataShape">
            <summary>
            Creates a series-appropriate Shape for connecting the points of the series.
            </summary>
            <returns>Shape instance.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedAreaLineSeries.SynchronizeSeriesDefinitionShapes(System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.SeriesDefinition},System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.SeriesDefinition})">
            <summary>
            Synchronizes the SeriesDefinitionShapes dictionary with the contents of the SeriesArea Panel.
            </summary>
            <param name="oldDefinitions">SeriesDefinition being removed.</param>
            <param name="newDefinitions">SeriesDefinition being added.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedAreaLineSeries.IRangeProviderGetRange(System.Windows.Controls.DataVisualization.Charting.IRangeConsumer)">
            <summary>
            Returns the range for the data points of the series.
            </summary>
            <param name="rangeConsumer">Consumer of the range.</param>
            <returns>Range of values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedAreaLineSeries.IValueMarginProviderGetValueMargins(System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer)">
            <summary>
            Returns the value margins for the data points of the series.
            </summary>
            <param name="valueMarginConsumer">Consumer of the value margins.</param>
            <returns>Sequence of value margins.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedAreaLineSeries.UpdateDataItemPlacement(System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DataItem})">
            <summary>
            Updates the placement of the DataItems (data points) of the series.
            </summary>
            <param name="dataItems">DataItems in need of an update.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedAreaLineSeries.UpdateShape(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{System.Windows.Point}})">
            <summary>
            Updates the Shape for the series.
            </summary>
            <param name="definitionPoints">Locations of the points of each SeriesDefinition in the series.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.StackedAreaLineSeries.SeriesDefinitionShapes">
            <summary>
            Gets the Shapes corresponding to each SeriesDefinition.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedAreaSeries.#ctor">
            <summary>
            Initializes a new instance of the StackedAreaSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedAreaSeries.CreateDataPoint">
            <summary>
            Creates a DataPoint for the series.
            </summary>
            <returns>Series-appropriate DataPoint instance.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedAreaSeries.CreateDataShape">
            <summary>
            Creates a series-appropriate Shape for connecting the points of the series.
            </summary>
            <returns>Shape instance.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedAreaSeries.UpdateShape(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{System.Windows.Point}})">
            <summary>
            Updates the Shape for the series.
            </summary>
            <param name="definitionPoints">Locations of the points of each SeriesDefinition in the series.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedAreaSeries.SetPolygonPointsProperty(System.Windows.Shapes.Polygon,System.Windows.Media.PointCollection)">
            <summary>
            Sets the Points property of a Polygon to the specified PointCollection.
            </summary>
            <param name="polygon">Polygon to set the Points property of.</param>
            <param name="pointCollection">Specified PointCollection.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedAreaSeries.IValueMarginProviderGetValueMargins(System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer)">
            <summary>
            Returns the value margins for the data points of the series.
            </summary>
            <param name="valueMarginConsumer">Consumer of the value margins.</param>
            <returns>Sequence of value margins.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.StackedAreaSeries.System#Windows#Controls#DataVisualization#Charting#IAnchoredToOrigin#AnchoredAxis">
            <summary>
            Gets the anchored axis for the series.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Stacked100AreaSeries.#ctor">
            <summary>
            Initializes a new instance of the Stacked100AreaSeries class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.Stacked100BarSeries">
            <summary>
            Control that displays values as a 100% stacked bar chart visualization.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.StackedBarSeries">
            <summary>
            Control that displays values as a stacked bar chart visualization.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.StackedBarColumnSeries">
            <summary>
            Control base class for displaying values as a stacked bar/column chart visualization.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedBarColumnSeries.#ctor">
            <summary>
            Initializes a new instance of the StackedBarColumnSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedBarColumnSeries.AcquireDependentAxis">
            <summary>
            Acquires a dependent axis suitable for use with the data values of the series.
            </summary>
            <returns>Axis instance.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedBarColumnSeries.AcquireIndependentAxis">
            <summary>
            Acquires an independent axis suitable for use with the data values of the series.
            </summary>
            <returns>Axis instance.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedBarColumnSeries.IRangeProviderGetRange(System.Windows.Controls.DataVisualization.Charting.IRangeConsumer)">
            <summary>
            Returns the range for the data points of the series.
            </summary>
            <param name="rangeConsumer">Consumer of the range.</param>
            <returns>Range of values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedBarColumnSeries.IValueMarginProviderGetValueMargins(System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer)">
            <summary>
            Returns the value margins for the data points of the series.
            </summary>
            <param name="valueMarginConsumer">Consumer of the value margins.</param>
            <returns>Sequence of value margins.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedBarColumnSeries.UpdateDataItemPlacement(System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.DefinitionSeries.DataItem})">
            <summary>
            Updates the placement of the DataItems (data points) of the series.
            </summary>
            <param name="dataItems">DataItems in need of an update.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedBarColumnSeries.GetMarginForNonCategoryAxis(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            Gets the margin to use for an independent axis that does not implement ICategoryAxis.
            </summary>
            <param name="axis">Axis to get the margin for.</param>
            <returns>Margin for axis.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.StackedBarColumnSeries.DependentAxisOrientation">
            <summary>
            Gets or sets the orientation of the dependent axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.StackedBarColumnSeries.IndependentAxisOrientation">
            <summary>
            Gets or sets the orientation of the independent axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.StackedBarColumnSeries.System#Windows#Controls#DataVisualization#Charting#IAnchoredToOrigin#AnchoredAxis">
            <summary>
            Gets the anchored axis for the series.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedBarSeries.#ctor">
            <summary>
            Initializes a new instance of the StackedBarSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedBarSeries.CreateDataPoint">
            <summary>
            Creates a DataPoint for the series.
            </summary>
            <returns>Series-appropriate DataPoint instance.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Stacked100BarSeries.#ctor">
            <summary>
            Initializes a new instance of the Stacked100BarSeries class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.Stacked100ColumnSeries">
            <summary>
            Control that displays values as a 100% stacked column chart visualization.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.StackedColumnSeries">
            <summary>
            Control that displays values as a stacked column chart visualization.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedColumnSeries.#ctor">
            <summary>
            Initializes a new instance of the StackedColumnSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedColumnSeries.CreateDataPoint">
            <summary>
            Creates a DataPoint for the series.
            </summary>
            <returns>Series-appropriate DataPoint instance.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Stacked100ColumnSeries.#ctor">
            <summary>
            Initializes a new instance of the Stacked100ColumnSeries class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.Stacked100LineSeries">
            <summary>
            Control that displays values as a 100% stacked line chart visualization.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.StackedLineSeries">
            <summary>
            Control that displays values as a stacked line chart visualization.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedLineSeries.#ctor">
            <summary>
            Initializes a new instance of the StackedLineSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedLineSeries.CreateDataPoint">
            <summary>
            Creates a DataPoint for the series.
            </summary>
            <returns>Series-appropriate DataPoint instance.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedLineSeries.CreateDataShape">
            <summary>
            Creates a series-appropriate Shape for connecting the points of the series.
            </summary>
            <returns>Shape instance.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedLineSeries.UpdateShape(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{System.Windows.Point}})">
            <summary>
            Updates the shape for the series.
            </summary>
            <param name="definitionPoints">Locations of the points of each SeriesDefinition in the series.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StackedLineSeries.SetPolylinePointsProperty(System.Windows.Shapes.Polyline,System.Windows.Media.PointCollection)">
            <summary>
            Sets the Points property of a Polyline to the specified PointCollection.
            </summary>
            <param name="polyline">Polyline to set the Points property of.</param>
            <param name="pointCollection">Specified PointCollection.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Stacked100LineSeries.#ctor">
            <summary>
            Initializes a new instance of the Stacked100LineSeries class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries">
            <summary>
            Control that displays values as an area chart visualization.
            </summary>
            <remarks>
            Based on the DefinitionSeries hierarchy.
            </remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries.DataPointStyleName">
            <summary>
            Name of the DataPointStyle property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries.LegendItemStyleName">
            <summary>
            Name of the LegendItemStyle property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries.PathStyleName">
            <summary>
            Name of the PathStyle property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries._definition">
            <summary>
            Field storing the single SeriesDefinition used by the series.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries.#ctor">
            <summary>
            Initializes a new instance of the AreaSeries class.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries.DependentRangeAxisProperty">
            <summary>
            Identifies the DependentRangeAxis dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries.TitleProperty">
            <summary>
            Identifies the Title dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries.DataPointStyleProperty">
            <summary>
            Identifies the DataPointStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries.LegendItemStyleProperty">
            <summary>
            Identifies the LegendItemStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries.PathStyleProperty">
            <summary>
            Identifies the PathStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries.TransitionDurationProperty">
            <summary>
            Identifies the TransitionDuration dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries.TransitionEasingFunctionProperty">
            <summary>
            Identifies the TransitionEasingFunction dependency property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries.IndependentValueGroups">
            <summary>
            Gets a sequence of IndependentValueGroups.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries.ItemsSource">
            <summary>
            Gets or sets a sequence that provides the content of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries.DependentValueBinding">
            <summary>
            Gets or sets the Binding that identifies the dependent values of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries.DependentValuePath">
            <summary>
            Gets or sets the Binding path that identifies the dependent values of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries.IndependentValueBinding">
            <summary>
            Gets or sets the Binding that identifies the independent values of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries.IndependentValuePath">
            <summary>
            Gets or sets the Binding path that identifies the independent values of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries.DependentRangeAxis">
            <summary>
            Gets or sets the IRangeAxis to use as the dependent axis of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries.Title">
            <summary>
            Gets or sets the title of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries.DataPointStyle">
            <summary>
            Gets or sets the Style to use for the DataPoints of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries.LegendItemStyle">
            <summary>
            Gets or sets the Style to use for the LegendItem of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries.PathStyle">
            <summary>
            Gets or sets the Style to use for the Path of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries.TransitionDuration">
            <summary>
            Gets or sets the TimeSpan to use for the duration of data transitions.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.AreaSeries.TransitionEasingFunction">
            <summary>
            Gets or sets the IEasingFunction to use for data transitions.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.Compatible.BarSeries">
            <summary>
            Control that displays values as a bar chart visualization.
            </summary>
            <remarks>
            Based on the DefinitionSeries hierarchy.
            </remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.BarSeries.DataPointStyleName">
            <summary>
            Name of the DataPointStyle property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.BarSeries.LegendItemStyleName">
            <summary>
            Name of the LegendItemStyle property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.BarSeries._definition">
            <summary>
            Field storing the single SeriesDefinition used by the series.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Compatible.BarSeries.#ctor">
            <summary>
            Initializes a new instance of the BarSeries class.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.BarSeries.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.BarSeries.DependentRangeAxisProperty">
            <summary>
            Identifies the DependentRangeAxis dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.BarSeries.TitleProperty">
            <summary>
            Identifies the Title dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.BarSeries.DataPointStyleProperty">
            <summary>
            Identifies the DataPointStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.BarSeries.LegendItemStyleProperty">
            <summary>
            Identifies the LegendItemStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.BarSeries.TransitionDurationProperty">
            <summary>
            Identifies the TransitionDuration dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.BarSeries.TransitionEasingFunctionProperty">
            <summary>
            Identifies the TransitionEasingFunction dependency property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.BarSeries.ItemsSource">
            <summary>
            Gets or sets a sequence that provides the content of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.BarSeries.DependentValueBinding">
            <summary>
            Gets or sets the Binding that identifies the dependent values of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.BarSeries.DependentValuePath">
            <summary>
            Gets or sets the Binding path that identifies the dependent values of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.BarSeries.IndependentValueBinding">
            <summary>
            Gets or sets the Binding that identifies the independent values of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.BarSeries.IndependentValuePath">
            <summary>
            Gets or sets the Binding path that identifies the independent values of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.BarSeries.DependentRangeAxis">
            <summary>
            Gets or sets the IRangeAxis to use as the dependent axis of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.BarSeries.Title">
            <summary>
            Gets or sets the title of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.BarSeries.DataPointStyle">
            <summary>
            Gets or sets the Style to use for the DataPoints of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.BarSeries.LegendItemStyle">
            <summary>
            Gets or sets the Style to use for the LegendItem of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.BarSeries.TransitionDuration">
            <summary>
            Gets or sets the TimeSpan to use for the duration of data transitions.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.BarSeries.TransitionEasingFunction">
            <summary>
            Gets or sets the IEasingFunction to use for data transitions.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.Compatible.ColumnSeries">
            <summary>
            Control that displays values as a column chart visualization.
            </summary>
            <remarks>
            Based on the DefinitionSeries hierarchy.
            </remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.ColumnSeries.DataPointStyleName">
            <summary>
            Name of the DataPointStyle property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.ColumnSeries.LegendItemStyleName">
            <summary>
            Name of the LegendItemStyle property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.ColumnSeries._definition">
            <summary>
            Field storing the single SeriesDefinition used by the series.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Compatible.ColumnSeries.#ctor">
            <summary>
            Initializes a new instance of the ColumnSeries class.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.ColumnSeries.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.ColumnSeries.DependentRangeAxisProperty">
            <summary>
            Identifies the DependentRangeAxis dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.ColumnSeries.TitleProperty">
            <summary>
            Identifies the Title dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.ColumnSeries.DataPointStyleProperty">
            <summary>
            Identifies the DataPointStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.ColumnSeries.LegendItemStyleProperty">
            <summary>
            Identifies the LegendItemStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.ColumnSeries.TransitionDurationProperty">
            <summary>
            Identifies the TransitionDuration dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.ColumnSeries.TransitionEasingFunctionProperty">
            <summary>
            Identifies the TransitionEasingFunction dependency property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.ColumnSeries.ItemsSource">
            <summary>
            Gets or sets a sequence that provides the content of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.ColumnSeries.DependentValueBinding">
            <summary>
            Gets or sets the Binding that identifies the dependent values of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.ColumnSeries.DependentValuePath">
            <summary>
            Gets or sets the Binding path that identifies the dependent values of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.ColumnSeries.IndependentValueBinding">
            <summary>
            Gets or sets the Binding that identifies the independent values of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.ColumnSeries.IndependentValuePath">
            <summary>
            Gets or sets the Binding path that identifies the independent values of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.ColumnSeries.DependentRangeAxis">
            <summary>
            Gets or sets the IRangeAxis to use as the dependent axis of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.ColumnSeries.Title">
            <summary>
            Gets or sets the title of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.ColumnSeries.DataPointStyle">
            <summary>
            Gets or sets the Style to use for the DataPoints of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.ColumnSeries.LegendItemStyle">
            <summary>
            Gets or sets the Style to use for the LegendItem of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.ColumnSeries.TransitionDuration">
            <summary>
            Gets or sets the TimeSpan to use for the duration of data transitions.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.ColumnSeries.TransitionEasingFunction">
            <summary>
            Gets or sets the IEasingFunction to use for data transitions.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries">
            <summary>
            Control that displays values as an line chart visualization.
            </summary>
            <remarks>
            Based on the DefinitionSeries hierarchy.
            </remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries.DataPointStyleName">
            <summary>
            Name of the DataPointStyle property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries.LegendItemStyleName">
            <summary>
            Name of the LegendItemStyle property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries.PolylineStyleName">
            <summary>
            Name of the PolylineStyle property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries._definition">
            <summary>
            Field storing the single SeriesDefinition used by the series.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries.#ctor">
            <summary>
            Initializes a new instance of the LineSeries class.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries.DependentRangeAxisProperty">
            <summary>
            Identifies the DependentRangeAxis dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries.TitleProperty">
            <summary>
            Identifies the Title dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries.DataPointStyleProperty">
            <summary>
            Identifies the DataPointStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries.LegendItemStyleProperty">
            <summary>
            Identifies the LegendItemStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries.PolylineStyleProperty">
            <summary>
            Identifies the PolylineStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries.TransitionDurationProperty">
            <summary>
            Identifies the TransitionDuration dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries.TransitionEasingFunctionProperty">
            <summary>
            Identifies the TransitionEasingFunction dependency property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries.IndependentValueGroups">
            <summary>
            Gets a sequence of IndependentValueGroups.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries.ItemsSource">
            <summary>
            Gets or sets a sequence that provides the content of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries.DependentValueBinding">
            <summary>
            Gets or sets the Binding that identifies the dependent values of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries.DependentValuePath">
            <summary>
            Gets or sets the Binding path that identifies the dependent values of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries.IndependentValueBinding">
            <summary>
            Gets or sets the Binding that identifies the independent values of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries.IndependentValuePath">
            <summary>
            Gets or sets the Binding path that identifies the independent values of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries.DependentRangeAxis">
            <summary>
            Gets or sets the IRangeAxis to use as the dependent axis of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries.Title">
            <summary>
            Gets or sets the title of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries.DataPointStyle">
            <summary>
            Gets or sets the Style to use for the DataPoints of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries.LegendItemStyle">
            <summary>
            Gets or sets the Style to use for the LegendItem of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries.PolylineStyle">
            <summary>
            Gets or sets the Style to use for the Path of the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries.TransitionDuration">
            <summary>
            Gets or sets the TimeSpan to use for the duration of data transitions.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Compatible.LineSeries.TransitionEasingFunction">
            <summary>
            Gets or sets the IEasingFunction to use for data transitions.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Chart_Axes_SetterNotSupported">
            <summary>
              Looks up a localized string similar to Changing the Chart&apos;s Axes property is not supported; changes to the collection should be made with its .Add/.Remove methods instead..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Chart_AxisLocationChanged_CantBeChangedToAutoWhenHostedInsideOfASeriesHost">
            <summary>
              Looks up a localized string similar to Axis location cannot be changed to auto when hosted inside of a series host..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Chart_Series_SetterNotSupported">
            <summary>
              Looks up a localized string similar to Changing the Chart&apos;s Series property is not supported; changes to the collection should be made with its .Add/.Remove methods instead..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.DataPointSeriesDropTarget_set_Content_ContentMustBeAChart">
            <summary>
              Looks up a localized string similar to The content property must be set to a Chart object..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.DataPointSeriesWithAxes_GetAxes_AssignedDependentAxisCannotBeUsed">
            <summary>
              Looks up a localized string similar to Assigned dependent axis cannot be used. This may be due to an unset Orientation property for the axis or a type mismatch between the values being plotted and those supported by the axis..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.DataPointSeriesWithAxes_GetAxes_AssignedIndependentAxisCannotBeUsed">
            <summary>
              Looks up a localized string similar to Assigned independent axis cannot be used. This may be due to an unset Orientation property for the axis..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.DataPointSeriesWithAxes_NoSuitableAxisAvailableForPlottingDependentValue">
            <summary>
              Looks up a localized string similar to No suitable axis is available for plotting the dependent value..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.DataPointSeriesWithAxes_ThisSeriesDoesNotSupportRadialAxes">
            <summary>
              Looks up a localized string similar to This series does not support radial axes..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.DefinitionSeries_EnsureAxes_MissingDependentValueBinding">
            <summary>
              Looks up a localized string similar to A SeriesDefinition does not have its DependentValueBinding or DependentValuePath properties set; unable to determine the source for dependent values. Please use either of these properties to identify the data model property corresponding to the dependent values..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.DefinitionSeries_EnsureAxes_MissingIndependentValueBinding">
            <summary>
              Looks up a localized string similar to A SeriesDefinition does not have its IndependentValueBinding or IndependentValuePath properties set; unable to determine the source for independent values. Please use either of these properties to identify the data model property corresponding to the independent values..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.DefinitionSeries_SeriesDefinitions_SetterNotSupported">
            <summary>
              Looks up a localized string similar to Changing the SeriesDefinitions property of a DefinitionSeries is not supported; changes to the collection should be made with its .Add/.Remove methods instead..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.DisplayAxis_GetLength_CannotDetermineTheLengthOfAnAxisWithAnOrientationOfNone">
            <summary>
              Looks up a localized string similar to Cannot determine the size of an axis without an orientation..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.EdgePanel_OnEdgePropertyChanged">
            <summary>
              Looks up a localized string similar to Attempt to set Edge property to an invalid value..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Interpolator_IncludeInRange_DataRangeBindingNotIConvertible">
            <summary>
              Looks up a localized string similar to The DataRangeBinding property of the Interpolator must be bound to an IConvertible object..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Range_ctor_MaximumValueMustBeLargerThanOrEqualToMinimumValue">
            <summary>
              Looks up a localized string similar to The maximum value must be larger than or equal to the minimum value..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Range_get_Maximum_CannotReadTheMaximumOfAnEmptyRange">
            <summary>
              Looks up a localized string similar to &quot;Cannot read the Maximum of an empty range.&quot;.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Range_get_Minimum_CannotReadTheMinimumOfAnEmptyRange">
            <summary>
              Looks up a localized string similar to &quot;Cannot read the Minimum of an empty range.&quot;.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Range_ToString_Data">
            <summary>
              Looks up a localized string similar to [{0},{1}].
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Range_ToString_NoData">
            <summary>
              Looks up a localized string similar to No Data..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.RangeAxis_MaximumValueMustBeLargerThanOrEqualToMinimumValue">
            <summary>
              Looks up a localized string similar to The maximum value must be larger than or equal to the minimum value..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.RangeAxis_MinimumValueMustBeLargerThanOrEqualToMaximumValue">
            <summary>
              Looks up a localized string similar to The minimum value must be smaller than or equal to the maximum value..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.ReadOnlyObservableCollection_CollectionIsReadOnly">
            <summary>
              Looks up a localized string similar to Collection is read-only..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.ResourceDictionaryEnumerator_CantResetEnumeratorResetDispenserInstead">
            <summary>
              Looks up a localized string similar to Cannot reset a ResourceDictionaryEnumerator; reset the ResourceDictionaryDispenser instead..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Series_OnGlobalSeriesIndexPropertyChanged_UntitledSeriesFormatString">
            <summary>
              Looks up a localized string similar to Series {0}.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Series_SeriesHost_SeriesHostPropertyNotNull">
            <summary>
              Looks up a localized string similar to A series cannot be added to more than one series host..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.SeriesDefinition_SeriesHost_InvalidParent">
            <summary>
              Looks up a localized string similar to A SeriesDefinition instance&apos;s SeriesHost property may only be set to an instance of the DefinitionSeries class; other SeriesHost types are not supported..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.SeriesHostAxesCollection_InvalidAttemptToRemovePermanentAxisFromSeriesHost">
            <summary>
              Looks up a localized string similar to Invalid attempt to remove permanent axis from axis collection..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.SeriesHostAxesCollection_RemoveItem_AxisCannotBeRemovedFromASeriesHostWhenOneOrMoreSeriesAreListeningToIt">
            <summary>
              Looks up a localized string similar to An axis cannot be removed from a series host when one or more hosted series is listening to it..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.TreeMap_BuildTreeMapTree_TemplateNotSet">
            <summary>
              Looks up a localized string similar to Either ItemTemplate must be set or TreeMapItemDefinitionSelector must return a non-null template..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.TreeMap_CreateChildren_InterpolatorBindingNotSet">
            <summary>
              Looks up a localized string similar to The value of PropertyBinding property of an interpolator cannot be null..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.TreeMap_Interpolators_SetterNotSupported">
            <summary>
              Looks up a localized string similar to Changing the TreeMap&apos;s Interpolators Property is not supported; changes to the collection should be made with its .Add/.Remove methods instead..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.UniqueObservableCollection_InvalidAttemptToInsertADuplicateItem">
            <summary>
              Looks up a localized string similar to Invalid attempt to insert a duplicate item..
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.WeakReferenceBag`1">
            <summary>
            A bag of weak references to items.
            </summary>
            <typeparam name="T">The type of the item.</typeparam>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.WeakReferenceBag`1.#ctor">
            <summary>
            Initializes a new instance of the WeakEvent class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.WeakReferenceBag`1.Add(`0)">
            <summary>
            Adds an item to the bag.
            </summary>
            <param name="item">The item to add to the bag.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.WeakReferenceBag`1.Remove(`0)">
            <summary>
            Removes an item from the bag.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.WeakReferenceBag`1.GetEnumerator">
            <summary>
            Returns a sequence of the elements in the bag.
            </summary>
            <returns>A sequence of the elements in the bag.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.WeakReferenceBag`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns a sequence of the elements in the bag.
            </summary>
            <returns>A sequence of the elements in the bag.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.WeakReferenceBag`1.Items">
            <summary>
            Gets or sets the list of event listeners.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\Microsoft.Expression.Effects.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Effects</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Media.Effects.BlindOrientation">
            <summary>
            Determine the orientation of the blinds
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.BlindsTransitionEffect">
            <summary>
            Transition shader that simulates blinds opening when transitioning
            from one visual to another. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.OrientationProperty">
            <summary>
            Gets or sets the orientation of the blinds
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.CountProperty">
            <summary>
            Gets or sets the number of blinds
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.ShaderOrientationProperty">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the BlindsTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of BlindsTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.Orientation">
            <summary>
            Gets or sets orientatio of the blinds.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.Count">
            <summary>
            Gets or sets the number of blinds to display.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.ShaderOrientation">
            <summary>
            Gets or sets orientation of the blinds.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.BloomEffect">
            <summary>
            Effect that implements a bloom illumination of a visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
            
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BloomIntensityProperty">
            <summary>
            This property is mapped to the BloomIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseIntensityProperty">
            <summary>
            This property is mapped to the BaseIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BloomSaturationProperty">
            <summary>
            This property is mapped to the BloomSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseSaturationProperty">
            <summary>
            This property is mapped to the BaseSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomIntensityProperty">
            <summary>
            This property is mapped to the BloomIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomSaturationProperty">
            <summary>
            This property is mapped to the BloomSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.ThresholdProperty">
            <summary>
            This property is mapped to the BaseSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BloomEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.Threshold">
            <summary>
            Gets or sets the minimum intensity that will be used for the bloom
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseIntensity">
            <summary>
            Gets or sets the base intensity
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BloomIntensity">
            <summary>
            Gets or sets the bloom intensity
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseSaturation">
            <summary>
            Gets or sets the base saturation
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BloomSaturation">
            <summary>
            Gets or sets the bloom saturation
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomIntensity">
            <summary>
            Gets or sets the Base/BloomIntensity variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomSaturation">
            <summary>
            Gets or sets the BaseBloomSaturation variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect">
            <summary>
            Transition effect that reveals two visuals through a growing/shrinking circle. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.FeatherAmountProperty">
            <summary>
            Dependency property which modifies the Feather amount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseProperty">
            <summary>
            Dependency property which modifies the circle movement.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseShaderProperty">
            <summary>
            Dependency property which modifies the reverseShader variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the CircleRevealTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of CircleRevealTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.FeatherAmount">
            <summary>
            Gets or sets the FuzzyAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.Reverse">
            <summary>
            Gets or sets playing the circle reveal backward
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseShader">
            <summary>
            Gets or sets playing the circle reveal backward into the shader
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect">
            <summary>
            Transition effect that transitions two visuals using a cloud 
            texture as the sampler threshold.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CloudyTransitionEffect">
            <summary>
            Defines a transition shader effect that uses an image as a sampler threshold
            for interpolating pixel value between two visuals. 
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect">
            <summary>
            Defines a transition shader effect that provides a random value
            allowing the effect to provide variance each time the effect is run.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.RandomSeedProperty">
            <summary>
            Dependency property which modifies the RandomSeed variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.#ctor">
            <summary>
            Updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.RandomSeed">
            <summary>
            Gets or sets the RandomSeed variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.CloudImageProperty">
            <summary>
            Dependency property which modifies the CloudImage variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.CloudImage">
            <summary>
            Gets or sets the CloudImage variable within the shader used for sampling. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the CloudRevealTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of CloudRevealTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.ColorToneEffect">
            <summary>
            Effects that modifies the color tone of a visual using
            two colors as the sampling.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.DesaturationProperty">
            <summary>
            This property is mapped to the Desaturation variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.ToneAmountProperty">
            <summary>
            This property is mapped to the Toned variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.LightColorProperty">
            <summary>
            This property is mapped to the LightColor variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.DarkColorProperty">
            <summary>
            This property is mapped to the DarkColor variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.ColorToneEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.Desaturation">
            <summary>
            Gets or sets the Desaturation variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.ToneAmount">
            <summary>
            Gets or sets the Toned variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.LightColor">
            <summary>
            Gets or sets the LightColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.DarkColor">
            <summary>
            Gets or sets the DarkColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.EmbossedEffect">
            <summary>
            Effect that simulates an embossed look to the visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.AmountProperty">
            <summary>
            This property is mapped to the Amount variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.HeightProperty">
            <summary>
            This property is mapped to the Height variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.ColorProperty">
            <summary>
            This property is mapped to the Color variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.EmbossedEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Amount">
            <summary>
            Gets or sets the Amount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Height">
            <summary>
            Gets or sets the Height variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Color">
            <summary>
            Gets or sets the Color variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.FadeTransitionEffect">
            <summary>
            Transition effect that gradually transitions from one visual to another.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.FadeTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.FadeTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the FadeTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of FadeTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MagnifyEffect">
            <summary>
            Effect that simulates a magnifying lens.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.InnerRadiusProperty">
            <summary>
            Gets or sets the InnerRadius variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.OuterRadiusProperty">
            <summary>
            Gets or sets the OuterRadius variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.CenterProperty">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.AmountProperty">
            <summary>
            Gets or sets the amount variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.InputProperty">
            <summary>
            Gets or sets the input used in the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.generalTransform">
            <summary>
            The transform used for this shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.InnerRadius">
            <summary>
            Gets or sets the inner radius variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.OuterRadius">
            <summary>
            Gets or sets the outer radius variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Center">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Amount">
            <summary>
            Gets or sets the ShrinkFactor: 
            The higher the shrink factor the "smaller" the content inside the ellipse will appear. 
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.EffectMapping">
            <summary>
            Gets the EffectMapping.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform">
            <summary>
            The GeneralTransform corrosponding to the Magnify effect.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.biasValue">
            <summary>
            Attempt to transform a point based on the effect.
            </summary>
            <param name="targetPoint">The point to transform.</param>
            <param name="result">The result if available.</param>
            <returns>Return true if successful.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.effect">
            <summary>
            The effect instance.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.IsInverse">
            <summary>
            If the transform is an inverse.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.inverseTransform">
            <summary>
            The transform specific to this Effect.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.#ctor(Microsoft.Expression.Media.Effects.MagnifyEffect)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fx">The source effect.</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.TransformBounds(System.Windows.Rect)">
            <summary>
            This particular effect keeps axis aligned lines axis aligned, so transformation of the rect is just
            transformation of its corner points.
            </summary>
            <param name="rect">The input rect.</param>
            <returns>The output rect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.OutToIn(System.Windows.Point,System.Double,System.Double,System.Windows.Point,System.Double)">
            <summary>
            For the inverse of the shader, we need to find Pin which is the Pixel Ouput, given Pout the texture input (is the reverse of the shader)
            However, the shader algorithm is dependant on the radius of the pixel output from the center, which is a variable that we don't
            have when computing the inverse. We need to perform bisection in order to converge using the equation below
            PHatout = PHat_in*Scalar where
            PHatout = Pout - Pcenter  
            pHatin = Pin -Pcenter
            
            Scalar is dependent on the radius of Pin (which we don't have). 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.InToOut(System.Windows.Point,System.Double,System.Double,System.Windows.Point,System.Double)">
            <summary>
            Given a pixel output (Pin) find the texture input (Pout)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.CreateInstanceCore">
            <summary>
            Creats a new instance.
            </summary>
            <returns>A new instance of this.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.PointIsInCircle(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Determines if a point is within an ellipse.
            </summary>
            <param name="pt">The test point.</param>
            <param name="center">The center point of the ellipse.</param>
            <param name="radius">The radius of the ellipse.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.Inverse">
            <summary>
            Gets the inverse transform.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MonochromeEffect">
             <summary>
            Effect that turns a visual into a monochrom color
             </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MonochromeEffect.ColorProperty">
            <summary>
            Gets or sets the FilterColor variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MonochromeEffect.InputProperty">
            <summary>
            Gets or sets the Input of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MonochromeEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MonochromeEffect.Color">
            <summary>
            Gets or sets the FilterColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MonochromeEffect.Input">
            <summary>
            Gets or sets the input used in the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.PixelateEffect">
            <summary>
            Effect that pixelates a visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.PixelateEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.PixelateEffect.PixelationProperty">
            <summary>
            This property is mapped to the pixelation amount variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.PixelateEffect.Pixelation">
            <summary>
            Gets or sets the amount of pixelation inside the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.PixelateEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.PixelateTransitionEffect">
            <summary>
            Transition effect that increase/decrease pixelation between two visuals.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the PixelateTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of PixelateTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect">
            <summary>
            Transition effects that performs a radial blur of the current visual  as the new visual is introduced.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the RadialBlurTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of RadialBlurTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RippleEffect">
            <summary>
            Effect that simulates water ripples on the visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.CenterProperty">
            <summary>
            Gets or sets the Center variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.MagnitudeProperty">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.FrequencyProperty">
            <summary>
            Gets or sets the Frequency variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.PhaseProperty">
            <summary>
            Gets or sets the Phase variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.InputProperty">
            <summary>
            Gets or sets the input brush used in the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Center">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Magnitude">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Frequency">
            <summary>
            Gets or sets the frequency variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Phase">
            <summary>
            Gets or sets the Phase variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RippleTransitionEffect">
            <summary>
            Transition effect that simulate water ripple during transition. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the RippleTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of RippleTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SharpenEffect">
            <summary>
            Effects that makes a visual more crisp and sharper. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.AmountProperty">
            <summary>
            This property is mapped to the Amount variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.HeightProperty">
            <summary>
            This property is mapped to the Width variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SharpenEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Amount">
            <summary>
            Gets or sets the Amount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Height">
            <summary>
            Gets or sets the Height variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SlideDirection">
            <summary>
            Define the slide orientation
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SlideInTransitionEffect">
            <summary>
            Transition effect that slide the current visual away, revealing the new visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideDirectionProperty">
            <summary>
            Dependency property which modifies the SlideAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideNormalProperty">
            <summary>
            Dependency property which modifies the SlideAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the SlideInTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of SlideInTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideDirection">
            <summary>
            Gets or sets the SlideAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideNormal">
            <summary>
            Gets or sets the SlideAmount variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect">
             <summary>
            Transition effect that swirl the current visual while introducing the new visual.
             </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.TwistAmountProperty">
            <summary>
            Dependency property which modifies the TwistAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.CellCountProperty">
            <summary>
            Dependency property which modifies the number of cell where pixels will be twisted.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.#ctor(System.Double)">
            <summary>
            Creates an instance and sets the shader's twist variable to the specified values.
            </summary>
            <param name="twist">level of swirl twist</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the SmoothSwirlGridTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of SmoothSwirlGridTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.TwistAmount">
            <summary>
            Gets or sets the TwistAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.CellCount">
            <summary>
            Gets or sets the CellCount variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SwirlEffect">
            <summary>
            Effect that swirls the current visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.CenterProperty">
            <summary>
            This property is mapped to the Center variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.TwistAmountProperty">
            <summary>
            This property is mapped to the SwirlStrength variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.AngleFrequencyProperty">
            <summary>
            This property is mapped to the AngleFrequency variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.generalTransform">
            <summary>
            The transform used when this Effect is applied.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.Center">
            <summary>
            Gets or sets the Center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.TwistAmount">
            <summary>
            Gets or sets the SwirlStrength variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.AngleFrequency">
            <summary>
            Gets or sets the AngleFrequency variable within the shader.
            We do not expose this property. 
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.EffectMapping">
            <summary>
            Gets the GeneralTransform for this effect.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform">
            <summary>
            For transforming input and tree transformations.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.theEffect">
            <summary>
            The instance of the Effect.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.thisIsInverse">
            <summary>
            The inverse of the transform.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.inverseTransform">
            <summary>
            The inverse of this GeneralTransform.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.#ctor(Microsoft.Expression.Media.Effects.SwirlEffect)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="eff">The effect itself.</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.TransformBounds(System.Windows.Rect)">
            <summary>
            For this operation, the bounds is the bounding box of the 4 transformed points. 
            Need to transform each of them, and then circumscribe.  This is true for both the 
            forward and the inverse.
            </summary>
            <param name="rect">The input rect.</param>
            <returns>The transformed rect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.TryTransform(System.Windows.Point,System.Windows.Point@)">
            <summary>
            Attempt to transform inPoint with the Swirl effect.
            </summary>
            <param name="targetPoint">The input point.</param>
            <param name="result">The output point after transformed using the Swirl effect.</param>
            <returns>True and throws if false.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.CreateInstanceCore">
            <summary>
            Returns a new instance of this.
            </summary>
            <returns>A new instance.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.Inverse">
            <summary>
            Gets a clone of the inverse of the current transform.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WaveTransitionEffect">
            <summary>
            Transition effect that waves the current visual while introducing the new visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.MagnitudeProperty">
            <summary>
            Dependency property which modifies the Magnitude variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.PhaseProperty">
            <summary>
            Dependency property which modifies the Phase variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.FrequencyProperty">
            <summary>
            Dependency property which modifies the Phase variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WaveTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WaveTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the WaveTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of WaveTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Magnitude">
            <summary>
            Gets or sets the magnitude of the wave
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Phase">
            <summary>
            Gets or sets the phase of the wave
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Frequency">
            <summary>
            Gets or sets the magnitude of the wave
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WipeDirection">
            <summary>
            Define the wipe direction.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WipeTransitionEffect">
            <summary>
            Transition effect that wipes the current visual introducing the new visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.WipeDirectionProperty">
            <summary>
            Dependency property which modifies the preset of the wipe
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.FeatherAmountProperty">
            <summary>
            Dependency property which modifies the FuzzyAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOriginProperty">
            <summary>
            Dependency property which modifies the LineOrigin variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineNormalProperty">
            <summary>
            Dependency property which modifies the LineNormal variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOffsetProperty">
            <summary>
            Dependency property which modifies the LineOffset variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WipeTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WipeTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the WipeTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of WipeTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.WipeDirection">
            <summary>
            Gets or sets the direction of the wipe.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.FeatherAmount">
            <summary>
            Gets or sets the FuzzyAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOrigin">
            <summary>
            Gets or sets the LineOrigin variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineNormal">
            <summary>
            Gets or sets the LineNormal variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOffset">
            <summary>
            Gets or sets the LineOffset variable within the shader.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\de\Microsoft.Expression.Controls.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Controls</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.Initialize">
            <summary>
            Called before we loop over the polylines.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.ShouldBreak(System.Int32)">
            <summary>
            Checks whether or not we should continue looping over the polylines.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnPolylineBegin(Microsoft.Expression.Drawing.Core.PolylineData)">
            <summary>
            Called before we begin marching a new polyline.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnPolylineCompleted(System.Double)">
            <summary>
            Called when we walk off the end of a polyline.
            </summary>
            <param name="remaingLength">The remaining arclength in the polyline.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnStepCompleted(System.Double)">
            <summary>
            Called when we sucessfully complete a step.
            </summary>
            <param name="actualStepDistance">The actual step distance.
            This may be different than Step if we have wrapped to another polyline.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.Distribute(Microsoft.Expression.Controls.PathPanel,System.Int32,System.Int32)">
            <summary>
            Distributes the children of a path panel along a given layout path.
            </summary>
            <param name="pathPanel">The path panel.</param>
            <param name="pathIndex">The index of the path in pathPanel.LayoutPaths.</param>
            <param name="childIndex">The index of the first child to be laid out on this path.</param>
            <returns>The index of the next child to be distributed. If childIndex is returned, this function has done nothing.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.ChildIndex">
            <summary>
            The index of the next child to be arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Span">
            <summary>
            The distance in arclength that we want to use for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Step">
            <summary>
            The distance in arclength to walk along the current polyline.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Capacity">
            <summary>
            The total number of elements to be arranged on the LayoutPath.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.EvenDistributionStrategy">
            <summary>
            Distributes the children of a path panel along a layout path.
            Even distribution means that there is equal arclength between the centers of all
            the elements on the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.ChangedPathLayoutProperties">
            <summary>
            Specifies which path layout properties have changed.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs.#ctor(Microsoft.Expression.Controls.ChangedPathLayoutProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs"/> class.
            </summary>
            <param name="changedProperties">The data for the event.</param>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs.ChangedProperties">
            <summary>
            Gets the properties changed in a <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathLayoutData">
            <summary>
            Encapsulates the data needed to update a <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LayoutPathIndex">
            <summary>
            Gets or sets the index of the path on which an element is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.GlobalIndex">
            <summary>
            Gets or sets the index of an element in a collection of elements.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LocalIndex">
            <summary>
            Gets or sets the index of an element on a path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.GlobalOffset">
            <summary>
            Gets or sets the offset of an element proportional to the total length of a collection of paths.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LocalOffset">
            <summary>
            Gets or sets the offset of an element proportional to the length of path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.NormalAngle">
            <summary>
            Gets or sets the angle perpendicular to the path at an element's location.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.OrientationAngle">
            <summary>
            Gets or sets the angle perpendicular to the path at an element's location if the element is oriented to the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.IPathLayoutItem">
            <summary>
            Represents an element that is arranged by a <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </summary>
            <remarks>
            Implementing this interface enables <see cref="T:Microsoft.Expression.Controls.PathPanel"/> to set these properties when the element is arranged.
            This interface is not intended for general implementation.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.IPathLayoutItem.Update(Microsoft.Expression.Controls.PathLayoutData)">
            <summary>
            Updates the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/> properties based on the given <see cref="T:Microsoft.Expression.Controls.PathLayoutData"/> and raises the <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
            <param name="data">The data needed to update the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/>.</param>
        </member>
        <member name="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated">
            <summary>
            Occurs when one or more of the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/> properties change.
            </summary>
            <remarks>
            This event is raised whenever the item’s position along the path is updated. This can occur due to changes in the properties on the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> or changes to <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LayoutPathIndex">
            <summary>
            Gets the index of the path on which the item is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalIndex">
            <summary>
            Gets the index of the item in a collection of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalIndex">
            <summary>
            Gets the index of the item on the path on which it is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalOffset">
            <summary>
            Gets the offset of the item proportional to the total length of a collection of paths.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalOffset">
            <summary>
            Gets the offset of the item proportional to the length of the path on which it is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.NormalAngle">
            <summary>
            Gets the angle perpendicular to the path at the item's location.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.OrientationAngle">
            <summary>
            Gets the angle perpendicular to the path at the items's location if the item is oriented to the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.Distribution">
            <summary>
            Specifies the distribution of a <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.Orientation">
            <summary>
            Specifies the orientation of elements on a <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.FillBehavior">
            <summary>
            Specifies the method for altering the <see cref="P:Microsoft.Expression.Controls.LayoutPath.Span"/> on an open path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.LayoutPath">
            <summary>
            Describes a path along which elements are arranged.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Controls.LayoutPath.transformedPolylines">
            <summary>
            Ideally, we want to cache the Bezier curves before flattening, because transform will affect flattening.
            That requires us to cache curves that we don't support very well yet.  Instead, we cache the flatten points
            in distribution strategy and transform them on demand.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.SourceElement">
            <summary>
            Gets or sets the element that defines the path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Distribution">
            <summary>
            Gets or sets whether items are laid out evenly or with a fixed padding.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Capacity">
            <summary>
            Gets or sets the maximum number of items displayed on the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Padding">
            <summary>
            Gets or sets the distance in pixels along the arc length of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> between two items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Orientation">
            <summary>
            Gets or sets the orientation of the items.
            </summary>
            <remarks>
            This property is supported on <see cref="T:Microsoft.Expression.Controls.PathListBox"/>, but not <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Start">
            <summary>
            Gets or sets the distance from the start of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> to place the first item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Span">
            <summary>
            Gets or sets the percentage of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> that participates in layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.FillBehavior">
            <summary>
            Gets or set the method to alter <see cref="P:Microsoft.Expression.Controls.LayoutPath.Span"/> on an open path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.ActualCapacity">
            <summary>
            Gets the computed Capacity.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.IsValid">
            <summary>
            Gets whether or not the <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/> is valid in the context.
            A <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/> is invalid if it is a descendant of the <see cref="T:Microsoft.Expression.Controls.PathPanel"/> in which it used.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PaddedDistributionStrategy">
            <summary>
            Distributes the children of a layout path based on the size of the children and a given padding between the children.
            The distance in arclength between children is determined by the padding plus the sum of the radii of the children's bounding boxes.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathListBox">
            <summary>
            Contains a list of items that are laid out along one or more paths.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathListBox"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.GetContainerForItemOverride">
            <summary>
            Creates the element used to display a specified item.
            </summary>
            <returns>A <see cref="T:Microsoft.Expression.Controls.PathListBoxItem"/> corresponding to a specified item.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own item container.
            </summary>
            <returns>true if the item is its own item container; otherwise, false.</returns>
            <param name="item">The specified item.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements.
            </summary>
            <param name="finalSize">The size that this object should use to arrange its child elements.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.LayoutPaths">
            <summary>
            Gets or sets a collection of objects that define the path(s) used for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.StartItemIndex">
            <summary>
            Gets or sets the index to use within the list of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.WrapItems">
            <summary>
            Gets or sets whether the item index wraps to the beginning of the collection when StartItemIndex is greater than 0.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathListBoxItem">
            <summary>
            Represents an item in a <see cref="T:Microsoft.Expression.Controls.PathListBox"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBoxItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathListBoxItem"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBoxItem.Update(Microsoft.Expression.Controls.PathLayoutData)">
            <summary>
            For a description of this member, see <see cref="M:Microsoft.Expression.Controls.IPathLayoutItem.Update(Microsoft.Expression.Controls.PathLayoutData)"/>.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.PathListBoxItem.PathLayoutUpdated">
            <summary>
            For a description of this member, see <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LayoutPathIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LayoutPathIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.GlobalIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LocalIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.GlobalOffset">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalOffset"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LocalOffset">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalOffset"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.NormalAngle">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.NormalAngle"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.OrientationAngle">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.OrientationAngle"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathPanel">
            <summary>
            Arranges child elements along one or more path.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Expression.Controls.PathPanel"/> can be used as an alternative to <see cref="T:Microsoft.Expression.Controls.PathListBox"/> when selection is not necessary.
            The <see cref="P:Microsoft.Expression.Controls.LayoutPath.Orientation"/> property is not supported on <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathPanel"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the size required for child elements.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. </param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements.
            </summary>
            <param name="finalSize">The size that this object should use to arrange its child elements.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.ArrangeChild(System.Int32,System.Int32,Microsoft.Expression.Drawing.Core.PolylineData,Microsoft.Expression.Drawing.Core.MarchLocation,System.Int32)">
            <summary>
            Arranges the child at the given index at a particular location on a LayoutPath.
            </summary>
            <param name="indirectIndex">An index from the range 0 to PathPanel.Count.</param>
            <param name="pathIndex">The index of the layout path on which to arrange the child.</param>
            <param name="polyline">The polyline in the layout path.</param>
            <param name="location">The location on the polyline.</param>
            <param name="localIndex">The index of the child on the LayoutPath.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.GetChildRadius(System.Int32)">
            <summary>
            Calculates the radius of the bounding circle for the child at the given index.
            </summary>
            <param name="indirectIndex">An index from the range 0 to PathPanel.Count.</param>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.LayoutPaths">
            <summary>
            Gets or sets a collection of objects that define the path(s) used for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.StartItemIndex">
            <summary>
            Gets or sets the index to use within the list of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.WrapItems">
            <summary>
            Gets or sets whether the item index wraps to the beginning of the collection when StartItemIndex is greater than 0.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.ValidPaths">
            <summary>
            The subset of LayoutPaths that are attached and not Collapsed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.Count">
            <summary>
            Count is the number of Children that the PathPanel will layout.
            If StartItemIndex > 0 and WrapItems is false, this can be less than PathPanel.Children.Count
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetItemsHost(System.Windows.Controls.ItemsControl)">
            <summary>
            Gets the Panel that contains the containers of an ItemsControl.
            </summary>
            <param name="control">The ItemsControl.</param>
            <returns>
            The Panel that contains the containers of an ItemsControl, or null
            if the Panel could not be found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.TraverseBreadthFirst``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Traverses a tree by accepting an initial value and a function that 
            retrieves the child nodes of a node.
            </summary>
            <typeparam name="T">The type of the stream.</typeparam>
            <param name="initialNode">The initial node.</param>
            <param name="getChildNodes">A function that retrieves the child
            nodes of a node.</param>
            <param name="traversePredicate">A predicate that evaluates a node
            and returns a value indicating whether that node and it's children
            should be traversed.</param>
            <returns>A stream of nodes.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree children of an element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetVisualChildrenAndSelfIterator(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree children of an element and the element itself.
            </returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetLogicalChildren(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical children of a framework element using a 
            breadth-first search. For performance reasons this method manually 
            manages the stack instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetLogicalDescendents(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical descendents of a framework element using a 
            breadth-first search. For performance reasons this method manually 
            manages the stack instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\System.Windows.Interactivity.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Interactivity</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Interactivity.AttachableCollection`1">
            <summary>
            Represents a collection of IAttachedObject with a shared AssociatedObject and provides change notifications to its contents when that AssociatedObject changes.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.IAttachedObject">
            <summary>
            An interface for an object that can be attached to another object.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.IAttachedObject.Attach(System.Windows.DependencyObject)">
            <summary>
            Attaches to the specified object.
            </summary>
            <param name="dependencyObject">The object to attach to.</param>
        </member>
        <member name="M:System.Windows.Interactivity.IAttachedObject.Detach">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.IAttachedObject.AssociatedObject">
            <summary>
            Gets the associated object.
            </summary>
            <value>The associated object.</value>
            <remarks>Represents the object the instance is attached to.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.AttachableCollection`1"/> class.
            </summary>
            <remarks>Internal, because this should not be inherited outside this assembly.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.OnAttached">
            <summary>
            Called immediately after the collection is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.OnDetaching">
            <summary>
            Called when the collection is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.ItemAdded(`0)">
            <summary>
            Called when a new item is added to the collection.
            </summary>
            <param name="item">The new item.</param>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.ItemRemoved(`0)">
            <summary>
            Called when an item is removed from the collection.
            </summary>
            <param name="item">The removed item.</param>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.VerifyAdd(`0)">
            <exception cref="T:System.InvalidOperationException">Cannot add the instance to a collection more than once.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.Attach(System.Windows.DependencyObject)">
            <summary>
            Attaches to the specified object.
            </summary>
            <param name="dependencyObject">The object to attach to.</param>
            <exception cref="T:System.InvalidOperationException">The IAttachedObject is already attached to a different object.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.Detach">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.AttachableCollection`1.AssociatedObject">
            <summary>
            The object on which the collection is hosted.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.AttachableCollection`1.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            Gets the associated object.
            </summary>
            <value>The associated object.</value>
        </member>
        <member name="T:System.Windows.Interactivity.Behavior`1">
            <summary>
            Encapsulates state information and zero or more ICommands into an attachable object.
            </summary>
            <typeparam name="T">The type the <see cref="T:System.Windows.Interactivity.Behavior`1"/> can be attached to.</typeparam>
            <remarks>
            	Behavior is the base class for providing attachable state and commands to an object.
            	The types the Behavior can be attached to can be controlled by the generic parameter.
            	Override OnAttached() and OnDetaching() methods to hook and unhook any necessary handlers
            	from the AssociatedObject.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.Behavior">
            <summary>
            Encapsulates state information and zero or more ICommands into an attachable object.
            </summary>
            <remarks>This is an infrastructure class. Behavior authors should derive from Behavior&lt;T&gt; instead of from this class.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
            <remarks>Override this to hook up functionality to the AssociatedObject.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.OnDetaching">
            <summary>
            Called when the behavior is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
            <remarks>Override this to unhook functionality from the AssociatedObject.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.Attach(System.Windows.DependencyObject)">
            <summary>
            Attaches to the specified object.
            </summary>
            <param name="dependencyObject">The object to attach to.</param>
            <exception cref="T:System.InvalidOperationException">The Behavior is already hosted on a different element.</exception>
            <exception cref="T:System.InvalidOperationException">dependencyObject does not satisfy the Behavior type constraint.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.Detach">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior.AssociatedType">
            <summary>
            The type to which this behavior can be attached.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior.AssociatedObject">
            <summary>
            Gets the object to which this behavior is attached.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            Gets the associated object.
            </summary>
            <value>The associated object.</value>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.Behavior`1"/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior`1.AssociatedObject">
            <summary>
            Gets the object to which this <see cref="T:System.Windows.Interactivity.Behavior`1"/> is attached.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.BehaviorCollection">
            <summary>
            Represents a collection of behaviors with a shared AssociatedObject and provides change notifications to its contents when that AssociatedObject changes.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.BehaviorCollection"/> class.
            </summary>
            <remarks>Internal, because this should not be inherited outside this assembly.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.OnAttached">
            <summary>
            Called immediately after the collection is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.OnDetaching">
            <summary>
            Called when the collection is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.ItemAdded(System.Windows.Interactivity.Behavior)">
            <summary>
            Called when a new item is added to the collection.
            </summary>
            <param name="item">The new item.</param>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.ItemRemoved(System.Windows.Interactivity.Behavior)">
            <summary>
            Called when an item is removed from the collection.
            </summary>
            <param name="item">The removed item.</param>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.CreateInstanceCore">
            <summary>
            Creates a new instance of the BehaviorCollection.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="T:System.Windows.Interactivity.CustomPropertyValueEditor">
            <summary>
            Enumerates possible values for reusable property value editors.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.Element">
            <summary>
            Uses the element picker, if supported, to edit this property at design time.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.Storyboard">
            <summary>
            Uses the storyboard picker, if supported, to edit this property at design time.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.StateName">
            <summary>
            Uses the state picker, if supported, to edit this property at design time.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.ElementBinding">
            <summary>
            Use the element binding picker, if supported, to edit this property at design time.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.PropertyBinding">
            <summary>
            Use the property binding picker, if supported, to edit this property at design time.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.CustomPropertyValueEditorAttribute">
            <summary>
            Associates the given editor type with the property on which the CustomPropertyValueEditor is applied.
            </summary>
            <remarks>Use this attribute to get improved design-time editing for properties that denote element (by name), storyboards, or states (by name).</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.CustomPropertyValueEditorAttribute.#ctor(System.Windows.Interactivity.CustomPropertyValueEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.CustomPropertyValueEditorAttribute"/> class.
            </summary>
            <param name="customPropertyValueEditor">The custom property value editor.</param>
        </member>
        <member name="P:System.Windows.Interactivity.CustomPropertyValueEditorAttribute.CustomPropertyValueEditor">
            <summary>
            Gets or sets the custom property value editor.
            </summary>
            <value>The custom property value editor.</value>
        </member>
        <member name="T:System.Windows.Interactivity.DefaultTriggerAttribute">
            <summary>
            Provides design tools information about what <see cref="T:System.Windows.Interactivity.TriggerBase"/> to instantiate for a given action or command.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.DefaultTriggerAttribute.#ctor(System.Type,System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.DefaultTriggerAttribute"/> class.
            </summary>
            <param name="targetType">The type this attribute applies to.</param>
            <param name="triggerType">The type of <see cref="T:System.Windows.Interactivity.TriggerBase"/> to instantiate.</param>
            <param name="parameters">A single argument for the specified <see cref="T:System.Windows.Interactivity.TriggerBase"/>.</param>
            <exception cref="T:System.ArgumentException"><c cref="F:System.Windows.Interactivity.DefaultTriggerAttribute.triggerType"/> is not derived from TriggerBase.</exception>
            <remarks>This constructor is useful if the specifed <see cref="T:System.Windows.Interactivity.TriggerBase"/> has a single argument. The
            resulting code will be CLS compliant.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.DefaultTriggerAttribute.#ctor(System.Type,System.Type,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.DefaultTriggerAttribute"/> class.
            </summary>
            <param name="targetType">The type this attribute applies to.</param>
            <param name="triggerType">The type of <see cref="T:System.Windows.Interactivity.TriggerBase"/> to instantiate.</param>
            <param name="parameters">The constructor arguments for the specified <see cref="T:System.Windows.Interactivity.TriggerBase"/>.</param>
            <exception cref="T:System.ArgumentException"><c cref="F:System.Windows.Interactivity.DefaultTriggerAttribute.triggerType"/> is not derived from TriggerBase.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.DefaultTriggerAttribute.Instantiate">
            <summary>
            Instantiates this instance.
            </summary>
            <returns>The <see cref="T:System.Windows.Interactivity.TriggerBase"/> specified by the DefaultTriggerAttribute.</returns>
        </member>
        <member name="P:System.Windows.Interactivity.DefaultTriggerAttribute.TargetType">
            <summary>
            Gets the type that this DefaultTriggerAttribute applies to.
            </summary>
            <value>The type this DefaultTriggerAttribute applies to.</value>
        </member>
        <member name="P:System.Windows.Interactivity.DefaultTriggerAttribute.TriggerType">
            <summary>
            Gets the type of the <see cref="T:System.Windows.Interactivity.TriggerBase"/> to instantiate.
            </summary>
            <value>The type of the <see cref="T:System.Windows.Interactivity.TriggerBase"/> to instantiate.</value>
        </member>
        <member name="P:System.Windows.Interactivity.DefaultTriggerAttribute.Parameters">
            <summary>
            Gets the parameters to pass to the <see cref="T:System.Windows.Interactivity.TriggerBase"/> constructor.
            </summary>
            <value>The parameters to pass to the <see cref="T:System.Windows.Interactivity.TriggerBase"/> constructor.</value>
        </member>
        <member name="M:System.Windows.Interactivity.DependencyObjectHelper.GetSelfAndAncestors(System.Windows.DependencyObject)">
            <summary>
            This method will use the VisualTreeHelper.GetParent method to do a depth first walk up 
            the visual tree and return all ancestors of the specified object, including the object itself.
            </summary>
            <param name="dependencyObject">The object in the visual tree to find ancestors of.</param>
            <returns>Returns itself an all ancestors in the visual tree.</returns>
        </member>
        <member name="T:System.Windows.Interactivity.EventObserver">
            <summary>
            EventObserver is designed to help manage event handlers by detatching when disposed. Creating this object will also attach in the constructor.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventObserver.#ctor(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            Creates an instance of EventObserver and attaches to supplied event on supplied target. Call dispose to detach.
            </summary>
            <param name="eventInfo">The event to attach and detach from.</param>
            <param name="target">The target object the event is defined on. null if the method is static.</param>
            <param name="handler">The delegate to attach to the event.</param>
        </member>
        <member name="M:System.Windows.Interactivity.EventObserver.Dispose">
            <summary>
            Detaches the handler from the event.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.EventTrigger">
            <summary>
            A trigger that listens for a specified event on its source and fires when that event is fired.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.EventTriggerBase`1">
            <summary>
            Represents a trigger that can listen to an element other than its AssociatedObject.
            </summary>
            <typeparam name="T">The type that this trigger can be associated with.</typeparam>
            <remarks>
            	EventTriggerBase extends TriggerBase to add knowledge of another object than the one it is attached to. 
            	This allows a user to attach a Trigger/Action pair to one element and invoke the Action in response to a 
            	change in another object somewhere else. Override OnSourceChanged to hook or unhook handlers on the source 
            	element, and OnAttached/OnDetaching for the associated element. The type of the Source element can be 
            	constrained by the generic type parameter. If you need control over the type of the 
            	AssociatedObject, set a TypeConstraintAttribute on your derived type.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.EventTriggerBase">
            <summary>
            Represents a trigger that can listen to an object other than its AssociatedObject.
            </summary>
            <remarks>This is an infrastructure class. Trigger authors should derive from EventTriggerBase&lt;T&gt; instead of this class.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerBase">
            <summary>
            Represents an object that can invoke Actions conditionally.
            </summary>
            <remarks>This is an infrastructure class. Trigger authors should derive from Trigger&lt;T&gt; instead of this class.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.InvokeActions(System.Object)">
            <summary>
            Invoke all Actions associated with this trigger.
            </summary>
            <remarks>Derived classes should call this to fire the trigger.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.OnAttached">
            <summary>
            Called after the trigger is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.OnDetaching">
            <summary>
            Called when the trigger is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.CreateInstanceCore">
            <summary>
            Creates a new instance of the TriggerBase derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.Attach(System.Windows.DependencyObject)">
            <summary>
            Attaches to the specified object.
            </summary>
            <param name="dependencyObject">The object to attach to.</param>
            <exception cref="T:System.InvalidOperationException">Cannot host the same Trigger on more than one object at a time.</exception>
            <exception cref="T:System.InvalidOperationException">dependencyObject does not satisfy the Trigger type constraint.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.Detach">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.AssociatedObject">
            <summary>
            Gets the object to which the trigger is attached.
            </summary>
            <value>The associated object.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.AssociatedObjectTypeConstraint">
            <summary>
            Gets the type constraint of the associated object.
            </summary>
            <value>The associated object type constraint.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.Actions">
            <summary>
            Gets the actions associated with this trigger.
            </summary>
            <value>The actions associated with this trigger.</value>
        </member>
        <member name="E:System.Windows.Interactivity.TriggerBase.PreviewInvoke">
            <summary>
            Event handler for registering to PreviewInvoke
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            Gets the associated object.
            </summary>
            <value>The associated object.</value>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.GetEventName">
            <summary>
            Specifies the name of the Event this EventTriggerBase is listening for.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnEvent(System.EventArgs)">
            <summary>
            Called when the event associated with this EventTriggerBase is fired. By default, this will invoke all actions on the trigger.
            </summary>
            <param name="eventArgs">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <remarks>Override this to provide more granular control over when actions associated with this trigger will be invoked.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnSourceChangedImpl(System.Object,System.Object)">
            <summary>
            Called when the source changes.
            </summary>
            <param name="oldSource">The old source.</param>
            <param name="newSource">The new source.</param>
            <remarks>This function should be overridden in derived classes to hook functionality to and unhook functionality from the changing source objects.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnAttached">
            <summary>
            Called after the trigger is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnDetaching">
            <summary>
            Called when the trigger is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.RegisterEvent(System.Object,System.String)">
            <exception cref="T:System.ArgumentException">Could not find eventName on the Target.</exception>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.AssociatedObjectTypeConstraint">
            <summary>
            Gets the type constraint of the associated object.
            </summary>
            <value>The associated object type constraint.</value>
            <remarks>Define a TypeConstraintAttribute on a derived type to constrain the types it may be attached to.</remarks>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.SourceTypeConstraint">
            <summary>
            Gets the source type constraint.
            </summary>
            <value>The source type constraint.</value>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.SourceObject">
            <summary>
            Gets or sets the target object. If TargetObject is unset, the target will look for the object specified by TargetName. If an element referred to by TargetName cannot be found, the target will default to the AssociatedObject. This is a dependency property.
            </summary>
            <value>The target object.</value>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.SourceName">
            <summary>
            Gets or sets the name of the element this EventTriggerBase listens for as a source. If the name is unset or cannot be resolved, the AssociatedObject will be used.  This is a dependency property.
            </summary>
            <value>The name of the source element.</value>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.Source">
            <summary>
            Gets the resolved source. If <c ref="SourceName"/> is unset or cannot be resolved, defaults to AssociatedObject.
            </summary>
            <value>The resolved source object.</value>
            <remarks>In general, this property should be used in place of AssociatedObject in derived classes.</remarks>
            <exception cref="T:System.InvalidOperationException">The element pointed to by <c cref="P:System.Windows.Interactivity.EventTriggerBase.Source"/> does not satisify the type constraint.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.EventTriggerBase`1"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase`1.OnSourceChanged(`0,`0)">
            <summary>
            Called when the source property changes.
            </summary>
            <remarks>Override this to hook functionality to and unhook functionality from the specified Source, rather than the AssociatedObject.</remarks>
            <param name="oldSource">The old source.</param>
            <param name="newSource">The new source.</param>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase`1.Source">
            <summary>
            Gets the resolved source. If <c ref="SourceName"/> is not set or cannot be resolved, defaults to AssociatedObject.
            </summary>
            <value>The resolved source object.</value>
            <remarks>In general, this property should be used in place of AssociatedObject in derived classes.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.EventTrigger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.EventTrigger"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTrigger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.EventTrigger"/> class.
            </summary>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="P:System.Windows.Interactivity.EventTrigger.EventName">
            <summary>
            Gets or sets the name of the event to listen for. This is a dependency property.
            </summary>
            <value>The name of the event.</value>
        </member>
        <member name="T:System.Windows.Interactivity.Interaction">
            <summary>
            Static class that owns the Triggers and Behaviors attached properties. Handles propagation of AssociatedObject change notifications.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.Interaction.TriggersProperty">
            <summary>
            This property is used as the internal backing store for the public Triggers attached property.
            </summary>
            <remarks>
            This property is not exposed publicly. This forces clients to use the GetTriggers and SetTriggers methods to access the
            collection, ensuring the collection exists and is set before it is used.
            </remarks>
        </member>
        <member name="F:System.Windows.Interactivity.Interaction.BehaviorsProperty">
            <summary>
            This property is used as the internal backing store for the public Behaviors attached property.
            </summary>
            <remarks>
            This property is not exposed publicly. This forces clients to use the GetBehaviors and SetBehaviors methods to access the
            collection, ensuring the collection exists and is set before it is used.
            </remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.GetTriggers(System.Windows.DependencyObject)">
            <summary>
            Gets the TriggerCollection containing the triggers associated with the specified object.
            </summary>
            <param name="obj">The object from which to retrieve the triggers.</param>
            <returns>A TriggerCollection containing the triggers associated with the specified object.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.GetBehaviors(System.Windows.DependencyObject)">
            <summary>
            Gets the <see cref="T:System.Windows.Interactivity.BehaviorCollection"/> associated with a specified object.
            </summary>
            <param name="obj">The object from which to retrieve the <see cref="T:System.Windows.Interactivity.BehaviorCollection"/>.</param>
            <returns>A <see cref="T:System.Windows.Interactivity.BehaviorCollection"/> containing the behaviors associated with the specified object.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.OnBehaviorsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <exception cref="T:System.InvalidOperationException">Cannot host the same BehaviorCollection on more than one object at a time.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.OnTriggersChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <exception cref="T:System.InvalidOperationException">Cannot host the same TriggerCollection on more than one object at a time.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.IsElementLoaded(System.Windows.FrameworkElement)">
            <summary>
            A helper function to take the place of FrameworkElement.IsLoaded, as Silverlight doesn't have a property like that.
            </summary>
            <param name="element">The element of interest.</param>
            <returns>True if the element has been loaded; otherwise, false</returns>
        </member>
        <member name="P:System.Windows.Interactivity.Interaction.ShouldRunInDesignMode">
            <summary>
            Gets or sets a value indicating whether to run as if in design mode.
            </summary>
            <value>
            	<c>true</c> if [should run in design mode]; otherwise, <c>false</c>.
            </value>
            <remarks>Not to be used outside unit tests.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.InvokeCommandAction">
            <summary>
            Executes a specified ICommand when invoked.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerAction`1">
            <summary>
            Represents an attachable object that encapsulates a unit of functionality.
            </summary>
            <typeparam name="T">The type to which this action can be attached.</typeparam>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerAction">
            <summary>
            Represents an attachable object that encapsulates a unit of functionality.
            </summary>
            <remarks>This is an infrastructure class. Action authors should derive from TriggerAction&lt;T&gt; instead of this class.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.CallInvoke(System.Object)">
            <summary>
            Attempts to invoke the action.
            </summary>
            <param name="parameter">The parameter to the action. If the Action does not require a parameter, the parameter may be set to a null reference.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.Invoke(System.Object)">
            <summary>
            Invokes the action.
            </summary>
            <param name="parameter">The parameter to the action. If the Action does not require a parameter, the parameter may be set to a null reference.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.OnAttached">
            <summary>
            Called after the action is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.OnDetaching">
            <summary>
            Called when the action is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable"/> derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.Attach(System.Windows.DependencyObject)">
            <summary>
            Attaches to the specified object.
            </summary>
            <param name="dependencyObject">The object to attach to.</param>
            <exception cref="T:System.InvalidOperationException">Cannot host the same TriggerAction on more than one object at a time.</exception>
            <exception cref="T:System.InvalidOperationException">dependencyObject does not satisfy the TriggerAction type constraint.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.Detach">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this action will run when invoked. This is a dependency property.
            </summary>
            <value>
            	<c>true</c> if this action will be run when invoked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.AssociatedObject">
            <summary>
            Gets the object to which this Action is attached.
            </summary>
            <value>The associated object.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.AssociatedObjectTypeConstraint">
            <summary>
            Gets the associated object type constraint.
            </summary>
            <value>The associated object type constraint.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.IsHosted">
            <summary>
            Gets or sets a value indicating whether this instance is attached.
            </summary>
            <value><c>true</c> if this instance is attached; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            Gets the associated object.
            </summary>
            <value>The associated object.</value>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.TriggerAction`1"/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObject">
            <summary>
            Gets the object to which this <see cref="T:System.Windows.Interactivity.TriggerAction`1"/> is attached.
            </summary>
            <value>The associated object.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObjectTypeConstraint">
            <summary>
            Gets the associated object type constraint.
            </summary>
            <value>The associated object type constraint.</value>
        </member>
        <member name="M:System.Windows.Interactivity.InvokeCommandAction.Invoke(System.Object)">
            <summary>
            Invokes the action.
            </summary>
            <param name="parameter">The parameter to the action. If the Action does not require a parameter, the parameter may be set to a null reference.</param>
        </member>
        <member name="P:System.Windows.Interactivity.InvokeCommandAction.CommandName">
            <summary>
            Gets or sets the name of the command this action should invoke.
            </summary>
            <value>The name of the command this action should invoke.</value>
            <remarks>This property will be superseded by the Command property if both are set.</remarks>
        </member>
        <member name="P:System.Windows.Interactivity.InvokeCommandAction.Command">
            <summary>
            Gets or sets the command this action should invoke. This is a dependency property.
            </summary>
            <value>The command to execute.</value>
            <remarks>This property will take precedence over the CommandName property if both are set.</remarks>
        </member>
        <member name="P:System.Windows.Interactivity.InvokeCommandAction.CommandParameter">
            <summary>
            Gets or sets the command parameter. This is a dependency property.
            </summary>
            <value>The command parameter.</value>
            <remarks>This is the value passed to ICommand.CanExecute and ICommand.Execute.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.NameResolvedEventArgs">
            <summary>
            Provides data about which objects were affected when resolving a name change.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.NameResolver">
            <summary>
            Helper class to handle the logic of resolving a TargetName into a Target element
            based on the context provided by a host element.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.NameResolver.UpdateObjectFromName(System.Windows.DependencyObject)">
            <summary>
            Attempts to update the resolved object from the name within the context of the namescope reference element.
            </summary>
            <param name="oldObject">The old resolved object.</param>
            <remarks>
            Resets the existing target and attempts to resolve the current TargetName from the
            context of the current Host. If it cannot resolve from the context of Host, it will
            continue up the visual tree until it resolves. If it has not resolved it when it reaches
            the root, it will set the Target to null and write a warning message to Debug output.
            </remarks>
        </member>
        <member name="E:System.Windows.Interactivity.NameResolver.ResolvedElementChanged">
            <summary>
            Occurs when the resolved element has changed.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.Name">
            <summary>
            Gets or sets the name of the element to attempt to resolve.
            </summary>
            <value>The name to attempt to resolve.</value>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.Object">
            <summary>
            The resolved object. Will return the reference element is TargetName is null or empty, or if a resolve has not been attempted.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.NameScopeReferenceElement">
            <summary>
            Gets or sets the reference element from which to perform the name resolution.
            </summary>
            <value>The reference element.</value>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.PendingReferenceElementLoad">
            <summary>
            Gets or sets a value indicating whether the reference element load is pending.
            </summary>
            <value>
            	<c>true</c> if [pending reference element load]; otherwise, <c>false</c>.
            </value>
            <remarks>
            If the Host has not been loaded, the name will not be resolved.
            In that case, delay the resolution and track that fact with this property.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TargetedTriggerAction`1">
            <summary>
            Represents an action that can be targeted to affect an object other than its AssociatedObject.
            </summary>
            <typeparam name="T">The type constraint on the target.</typeparam>
            <remarks>
            	TargetedTriggerAction extends TriggerAction to add knowledge of another element than the one it is attached to. 
            	This allows a user to invoke the Action on an element other than the one it is attached to in response to a 
            	Trigger firing. Override OnTargetChanged to hook or unhook handlers on the target element, and OnAttached/OnDetaching 
            	for the associated element. The type of the Target element can be constrained by the generic type parameter. If 
            	you need control over the type of the AssociatedObject, set a TypeConstraintAttribute on your derived type.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TargetedTriggerAction">
            <summary>
            Represents an action that can be targeted to affect an object other than its AssociatedObject.
            </summary>
            <remarks>This is an infrastructure class. Action authors should derive from TargetedTriggerAction&lt;T&gt; instead of this class.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction.OnTargetChangedImpl(System.Object,System.Object)">
            <summary>
            Called when the target changes.
            </summary>
            <param name="oldTarget">The old target.</param>
            <param name="newTarget">The new target.</param>
            <remarks>This function should be overriden in derived classes to hook and unhook functionality from the changing source objects.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction.OnAttached">
            <summary>
            Called after the action is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction.OnDetaching">
            <summary>
            Called when the action is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.TargetObject">
            <summary>
            Gets or sets the target object. If TargetObject is unset, the target will look for the object specified by TargetName. If an element referred to by TargetName cannot be found, the target will default to the AssociatedObject. This is a dependency property.
            </summary>
            <value>The target object.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.TargetName">
            <summary>
            Gets or sets the name of the object this action targets. If Target is set, this property is ignored. If Target is not set and TargetName is unset or cannot be resolved, the target will default to the AssociatedObject. This is a dependency property.
            </summary>
            <value>The name of the target object.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.Target">
            <summary>
            Gets the target object. If TargetObject is set, returns TargetObject. Else, if TargetName is unset or cannot be resolved, defaults to the AssociatedObject.
            </summary>
            <value>The target object.</value>
            <remarks>In general, this property should be used in place of AssociatedObject in derived classes.</remarks>
            <exception cref="T:System.InvalidOperationException">The Target element does not satisfy the type constraint.</exception>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.AssociatedObjectTypeConstraint">
            <summary>
            Gets the associated object type constraint.
            </summary>
            <value>The associated object type constraint.</value>
            <remarks>Define a TypeConstraintAttribute on a derived type to constrain the types it may be attached to.</remarks>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.TargetTypeConstraint">
            <summary>
            Gets the target type constraint.
            </summary>
            <value>The target type constraint.</value>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.TargetedTriggerAction`1"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction`1.OnTargetChanged(`0,`0)">
            <summary>
            Called when the target property changes.
            </summary>
            <remarks>Override this to hook and unhook functionality on the specified Target, rather than the AssociatedObject.</remarks>
            <param name="oldTarget">The old target.</param>
            <param name="newTarget">The new target.</param>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction`1.Target">
            <summary>
            Gets the target object. If TargetName is unset or cannot be resolved, defaults to the AssociatedObject.
            </summary>
            <value>The target.</value>
            <remarks>In general, this property should be used in place of AssociatedObject in derived classes.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerActionCollection">
            <summary>
            Represents a collection of actions with a shared AssociatedObject and provides change notifications to its contents when that AssociatedObject changes.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.TriggerActionCollection"/> class.
            </summary>
            <remarks>Internal, because this should not be inherited outside this assembly.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.OnAttached">
            <summary>
            Called immediately after the collection is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.OnDetaching">
            <summary>
            Called when the collection is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.ItemAdded(System.Windows.Interactivity.TriggerAction)">
            <summary>
            Called when a new item is added to the collection.
            </summary>
            <param name="item">The new item.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.ItemRemoved(System.Windows.Interactivity.TriggerAction)">
            <summary>
            Called when an item is removed from the collection.
            </summary>
            <param name="item">The removed item.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.CreateInstanceCore">
            <summary>
            Creates a new instance of the TriggerActionCollection.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerBase`1">
            <summary>
            Represents an object that can invoke Actions conditionally.
            </summary>
            <typeparam name="T">The type to which this trigger can be attached.</typeparam>
            <remarks>
            	TriggerBase is the base class for controlling Actions. Override OnAttached() and 
            	OnDetaching() to hook and unhook handlers on the AssociatedObject. You may 
            	constrain the types that a derived TriggerBase may be attached to by specifying 
            	the generic parameter. Call InvokeActions() to fire all Actions associated with 
            	this TriggerBase.
            </remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.TriggerBase`1"/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObject">
            <summary>
            Gets the object to which the trigger is attached.
            </summary>
            <value>The associated object.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObjectTypeConstraint">
            <summary>
            Gets the type constraint of the associated object.
            </summary>
            <value>The associated object type constraint.</value>
        </member>
        <member name="T:System.Windows.Interactivity.PreviewInvokeEventArgs">
            <summary>
            Argument pass to PreviewInvoke event. Assigning Cancelling to true, will cancel the invoke from the trigger.  
            </summary>
            <remarks>This is an infrastructure class. Behavior attached to a trigger base object can add their behavior as a listener to TriggerBase.PreviewInvoke</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerCollection">
            <summary>
             Represents a collection of triggers with a shared AssociatedObject and provides change notifications to its contents when that AssociatedObject changes.
             </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.TriggerCollection"/> class.
            </summary>
            <remarks>Internal, because this should not be inherited outside this assembly.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.OnAttached">
            <summary>
            Called immediately after the collection is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.OnDetaching">
            <summary>
            Called when the collection is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.ItemAdded(System.Windows.Interactivity.TriggerBase)">
            <summary>
            Called when a new item is added to the collection.
            </summary>
            <param name="item">The new item.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.ItemRemoved(System.Windows.Interactivity.TriggerBase)">
            <summary>
            Called when an item is removed from the collection.
            </summary>
            <param name="item">The removed item.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.CreateInstanceCore">
            <summary>
            Creates a new instance of the <see cref="T:System.Windows.Interactivity.TriggerCollection"/>.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="T:System.Windows.Interactivity.TypeConstraintAttribute">
            <summary>
            Specify type constraints on the AssociatedObject of TargetedTriggerAction and EventTriggerBase.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TypeConstraintAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.TypeConstraintAttribute"/> class.
            </summary>
            <param name="constraint">The constraint type.</param>
        </member>
        <member name="P:System.Windows.Interactivity.TypeConstraintAttribute.Constraint">
            <summary>
            Gets the constraint type.
            </summary>
            <value>The constraint type.</value>
        </member>
        <member name="T:ExceptionStringTable">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostBehaviorCollectionMultipleTimesExceptionMessage">
            <summary>
              Looks up a localized string similar to Cannot set the same BehaviorCollection on multiple objects..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostBehaviorMultipleTimesExceptionMessage">
            <summary>
              Looks up a localized string similar to An instance of a Behavior cannot be attached to more than one object at a time..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostTriggerActionMultipleTimesExceptionMessage">
            <summary>
              Looks up a localized string similar to Cannot host an instance of a TriggerAction in multiple TriggerCollections simultaneously. Remove it from one TriggerCollection before adding it to another..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostTriggerCollectionMultipleTimesExceptionMessage">
            <summary>
              Looks up a localized string similar to Cannot set the same TriggerCollection on multiple objects..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostTriggerMultipleTimesExceptionMessage">
            <summary>
              Looks up a localized string similar to An instance of a trigger cannot be attached to more than one object at a time..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CommandDoesNotExistOnBehaviorWarningMessage">
            <summary>
              Looks up a localized string similar to The command &quot;{0}&quot; does not exist or is not publicly exposed on {1}..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.DefaultTriggerAttributeInvalidTriggerTypeSpecifiedExceptionMessage">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; is not a valid type for the TriggerType parameter. Make sure &quot;{0}&quot; derives from TriggerBase..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.DuplicateItemInCollectionExceptionMessage">
            <summary>
              Looks up a localized string similar to Cannot add the same instance of &quot;{0}&quot; to a &quot;{1}&quot; more than once..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.EventTriggerBaseInvalidEventExceptionMessage">
            <summary>
              Looks up a localized string similar to The event &quot;{0}&quot; on type &quot;{1}&quot; has an incompatible signature. Ensure the event is public and satisfies the EventHandler delegate..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.EventTriggerCannotFindEventNameExceptionMessage">
            <summary>
              Looks up a localized string similar to Cannot find an event named &quot;{0}&quot; on type &quot;{1}.&quot;.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.RetargetedTypeConstraintViolatedExceptionMessage">
            <summary>
              Looks up a localized string similar to An object of type &quot;{0}&quot; cannot have a {3} property of type &quot;{1}&quot;. Instances of type &quot;{0}&quot; can have only a {3} property of type &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.TypeConstraintViolatedExceptionMessage">
            <summary>
              Looks up a localized string similar to Cannot attach type &quot;{0}&quot; to type &quot;{1}&quot;. Instances of type &quot;{0}&quot; can only be attached to objects of type &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.UnableToResolveTargetNameWarningMessage">
            <summary>
              Looks up a localized string similar to Unable to resolve TargetName &quot;{0}.&quot;.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\Microsoft.Expression.Drawing.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Drawing</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Controls.Callout">
            <summary>
            Renders a callout shape supporting several shapes combined with a callout arrow.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.CompositeContentShape">
             <summary>
             Provides a base class of a composite shape that derives from <see cref="T:System.Windows.Controls.ContentControl"/> and implements <see cref="T:Microsoft.Expression.Media.IShape"/>.
             </summary>
             <remarks>
             <see cref="T:Microsoft.Expression.Controls.CompositeContentShape"/> implements <see cref="T:Microsoft.Expression.Media.IShape"/> interface,
             and supports rendering a geometry similar to <see cref="T:System.Windows.Shapes.Shape"/>, but the geometry can be rendered outside of layout boundary.
             
             A typical implementation will have a customized default template in generic.xaml which template-binds most shape properties to a <see cref="T:System.Windows.Shapes.Path"/>.
             It should also extend the <see cref="P:GeometrySource"/> property to customize the appearance of the <see cref="T:System.Windows.Shapes.Path"/>.
            
             This class also supports showing content together with the shape.
             </remarks>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySourceParameters">
            <summary>
            Provides an interface to discribe the parameters of a Shape.
            </summary>
            <remarks>
            This interface is the data for communication between Shape and GeometrySource.
            Typically a concrete implementation of IShape will implements this interface and pass it into
            GeometrySource.UpdateGeometry(), who will consume the shape as readonly data provider.
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Media.IShape">
            <summary>
            Provides the necessary interface to define a Shape.
            Both primitive and composite shapes need to match this interface, although they might derive from different type of FrameworkElement.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.IShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Fill">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how to paint the interior of the shape.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that describes how the shape's interior is painted. The default is null. See Remarks.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values. The default value at run time depends on the type of <see cref="T:System.Windows.Shapes.Shape" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.RenderedGeometry">
            <summary>
            Gets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.GeometryMargin">
            <summary>
            Gets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Media.IShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.CreateGeometrySource">
            <summary>
            Extends how the shape is drawn with creating geometry source.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Controls.CompositeContentShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.OnContentChanged(System.Object,System.Object)">
            <summary>
            Transforms a string content into <see cref="T:TextBlock"/> with center alignment and mulitple line support.
            </summary>
            <remarks>
            Use template binding to <see cref="P:Microsoft.Expression.Controls.CompositeContentShape.InternalContent"/> instead of <see cref="P:Content"/> to enable this method.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Fill">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> that specifies how to paint the interior of the shape.
            </summary>
            <returns>A <see cref="T:System.Windows.Media.Brush"/> that describes how the shape's interior is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeStartLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />. </summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineCap" /> enumeration that specifies the shape at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeEndLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the end of a line. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeLineJoin">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration value that specifies the type of join that is used at the vertices of a <see cref="T:System.Windows.Shapes.Shape" />.</summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration that specifies the join appearance. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeMiterLimit">
            <summary>Gets or sets a limit on the ratio of the miter length to half the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. </summary>
            <returns>The limit on the ratio of the miter length to the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. This value is always a positive number that is greater than or equal to 1.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashArray">
            <summary>Gets or sets a collection of <see cref="T:System.Double" /> values that indicate the pattern of dashes and gaps that is used to outline shapes. </summary>
            <returns>A collection of <see cref="T:System.Double" /> values that specify the pattern of dashes and gaps. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that specifies how the ends of a dash are drawn. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. The default is <see cref="F:System.Windows.Media.PenLineCap.Flat" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashOffset">
            <summary>Gets or sets a <see cref="T:System.Double" /> that specifies the distance within the dash pattern where a dash begins.</summary>
            <returns>A <see cref="T:System.Double" /> that represents the distance within the dash pattern where a dash begins. The default value is 0.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.RenderedGeometry">
            <summary>
            Gets or sets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.GeometryMargin">
            <summary>
            Gets or sets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.InternalContent">
            <summary>
            Gets or sets the internal content that converts string into center aligned multiple line textblock.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.CompositeContentShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.Callout.AnchorPoint">
            <summary>
            Gets or sets the position of the callout relative to the top and left corner.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.Callout.CalloutStyle">
            <summary>
            Gets or sets the callout style.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.CompositeShape">
            <summary>
            Provides a base class of a composite shape that derives from <see cref="T:System.Windows.Controls.Control"/> and implements <see cref="T:Microsoft.Expression.Media.IShape"/>.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Expression.Controls.CompositeShape"/> implements <see cref="T:Microsoft.Expression.Media.IShape"/> interface,
            and supports rendering a geometry similar to <see cref="T:System.Windows.Shapes.Shape"/>, but the geometry can be rendered outside of layout boundary.
            
            A typical implementation will have a customized default template in generic.xaml which template-binds most shape properties to a <see cref="T:System.Windows.Shapes.Path"/>.
            It should also extend the <see cref="P:GeometrySource"/> property to customize the appearance of the <see cref="T:System.Windows.Shapes.Path"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.CreateGeometrySource">
            <summary>
            Extends how the shape is drawn with creating geometry source.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Controls.CompositeShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Fill">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> that specifies how to paint the interior of the shape.
            </summary>
            <returns>A <see cref="T:System.Windows.Media.Brush"/> that describes how the shape's interior is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeStartLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />. </summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineCap" /> enumeration that specifies the shape at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeEndLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the end of a line. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeLineJoin">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration value that specifies the type of join that is used at the vertices of a <see cref="T:System.Windows.Shapes.Shape" />.</summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration that specifies the join appearance. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeMiterLimit">
            <summary>Gets or sets a limit on the ratio of the miter length to half the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. </summary>
            <returns>The limit on the ratio of the miter length to the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. This value is always a positive number that is greater than or equal to 1.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashArray">
            <summary>Gets or sets a collection of <see cref="T:System.Double" /> values that indicate the pattern of dashes and gaps that is used to outline shapes. </summary>
            <returns>A collection of <see cref="T:System.Double" /> values that specify the pattern of dashes and gaps. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that specifies how the ends of a dash are drawn. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. The default is <see cref="F:System.Windows.Media.PenLineCap.Flat" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashOffset">
            <summary>Gets or sets a <see cref="T:System.Double" /> that specifies the distance within the dash pattern where a dash begins.</summary>
            <returns>A <see cref="T:System.Double" /> that represents the distance within the dash pattern where a dash begins. The default value is 0.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.RenderedGeometry">
            <summary>
            Gets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.GeometryMargin">
            <summary>
            Gets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.CompositeShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.LineArrow">
            <summary>
            Renders a bended line segment with optional arrowhead on both end.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.LineArrow.MeasureOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.</summary>
            <returns>The size that this object determines it needs during layout, based on its calculations of child object allotted sizes, or possibly on other considerations such as fixed container size.</returns>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity" />) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <remarks>
            A default <see cref="T:LineArrow"/> can render at anysize.
            The <see cref="P:RenderedGeometry"/> will stretch to layout boundary and render to outside if necessary.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.BendAmount">
            <summary>
            Gets or sets the amount of bend for the arrow.
            </summary>
            <value>The bend amount between 0 to 1.</value>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.StartArrow">
            <summary>
            Gets or sets how the arrow head is rendered at the start of the line.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.EndArrow">
            <summary>
            Gets or sets how the arrow head is rendered at the end of the line.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.StartCorner">
            <summary>
            Gets or sets from which corner to start drawing the arrow.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.ArrowSize">
            <summary>
            Gets or sets the length of the arrow in pixels.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PanningItems">
            <summary>
            Provides an items control that displays one selected item, and allows panning between items using touch gestures.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PanningItems.#ctor">
            <summary>
            The constructor for PanningItems.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PanningItems.OnApplyTemplate">
            <summary>
            Called when the PanningItems template is applied.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.ScrollDirection">
            <summary>
            Gets or sets the orientation of items in the control.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.FlickTolerance">
            <summary>
            Gets or sets the flick tolerance.  This can be a value between 0 and 1.  
            It represents the percentage of the size of the PanningItems needed to be covered by the flick gesture to trigger an items change.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.PreviousItem">
            <summary>
            Gets or sets the item before the selected item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.NextItem">
            <summary>
            Gets or sets the item after the selected item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.LoopContents">
            <summary>
            Gets or sets whether the contents of the items control will loop, so that the first item will follow the last item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.SliderValue">
            <summary>
            Gets or sets the value of the slider controlling the panning motion.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathGeometryHelper">
            <summary>
            Helper class to work with PathGeometry
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.ConvertToPathGeometry(System.String)">
            <summary>
            Converts a string in the path mini-langauge into a PathGeometry.
            </summary>
            <param name="abbreviatedGeometry">A string in the path mini-langauge.</param>
            <remarks>
            Algorithm is modified from WPF: MS.Internal.Parsers.ParseStringToStreamGeometryContext.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.AsPathGeometry(System.Windows.Media.Geometry)">
            <summary>
            Convert the given geometry into a single PathGeometry.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.SyncPolylineGeometry(System.Windows.Media.Geometry@,System.Collections.Generic.IList{System.Windows.Point},System.Boolean)">
            <summary>
            Update the given geometry as PathGeometry with polyline matching given point list.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathGeometryHelper.AbbreviatedGeometryParser">
            <summary>
            Parses abbreviated geometry sytax.
            </summary>
            <remarks>
            The algorithm is modified from WPF: MS.Internal.AbbreviatedGeometryParser
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathSegmentHelper">
            <summary>
            Helper class to Convert ArcSegment to BezierSegment(s)
            </summary>
            <summary>
            Helper class to work with PathSegment and all variations.
            </summary>
            <summary>
            Strategy classes to handle different types of PathSegment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierSegments(System.Windows.Media.ArcSegment,System.Windows.Point)">
            <summary>
            Convert an Arc segment into Bezier format
            Return BezierSegment, PolyBezierSegment, LineSegment, or null
            When returning null, the Arc degenerated into start point.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SetIsStroked(System.Windows.Media.PathSegment,System.Boolean)">
            <summary>
            Avoid calling the three-parameter constructor, since it always sets a local value for IsStroked.
            </summary>
            <param name="segment"></param>
            <param name="isStroked"></param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SyncPolylineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Collections.Generic.IList{System.Windows.Point},System.Int32,System.Int32)">
            <summary>
            Update the SegmentCollection with given polyline matching given point list.
            Try to keep changes minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SyncPolyBezierSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Collections.Generic.IList{System.Windows.Point},System.Int32,System.Int32)">
            <summary>
            Update the collection[index] segment with poly bezier segment matching given point list.
            givne point list must contain 3*N points for N Bezier segments.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.IsEmpty(System.Windows.Media.PathSegment)">
            <summary>
            Test if given path segment is empty.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetPointCount(System.Windows.Media.PathSegment)">
            <summary>
            Get the point count in given path segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetLastPoint(System.Windows.Media.PathSegment)">
            <summary>
            Get the last point of given path segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetPoint(System.Windows.Media.PathSegment,System.Int32)">
            <summary>
            Get the point of given index in given segment.
            If input is (-1), return the last point.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.FlattenSegment(System.Windows.Media.PathSegment,System.Collections.Generic.IList{System.Windows.Point},System.Windows.Point,System.Double)">
            <summary>
            Flatten given segment and add result points into given point list.
            </summary>
            <param name="segment">The segment to be flatten</param>
            <param name="points">The result point list</param>
            <param name="start">The start point of the segment</param>
            <param name="tolerance">The error tolerance. Must be possitive. Can be 0, fallback to default tolerance.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.ArcToBezier(System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Double,System.Double,System.Windows.Point[]@,System.Int32@)">
            <summary>
            ArcToBezier, Compute the Bezier approximation of an arc
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            </summary>
            <remarks>
            This utility computes the Bezier approximation for an elliptical arc as
            it is defined in the SVG arc spec. The ellipse from which the arc is
            carved is axis-aligned in its own coordinates, and defined there by its
            x and y radii. The rotation angle defines how the ellipse's axes are
            rotated relative to our x axis. The start and end points define one of 4
            possible arcs; the sweep and large-arc flags determine which one of
            these arcs will be chosen. See SVG spec for details.
            
            Returning cPieces = 0 indicates a line instead of an arc
                      cPieces = -1 indicates that the arc degenerates to a point 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.GetArcAngle(System.Windows.Point,System.Windows.Point,System.Boolean,System.Boolean,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Get the number of Bezier arcs, and sine/cosine of each.
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            </summary>
            <remarks>
            This is a private utility used by ArcToBezier.  We break the arc into
            pieces so that no piece will span more than 90 degrees.  The input
            points are on the unit circle.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.GetBezierDistance(System.Double,System.Double)">
             <summary>
             GetBezierDistance, return the distance as a fraction of the radius
             Adopted from MIL:Graphics\core\geometry\utils.cpp
             </summary>
            <remarks>
                  Get the distance from a circular arc's endpoints to the control points
                  of the Bezier arc that approximates it, as a fraction of the arc's
                  radius.
            
                  Since the result is relative to the arc's radius, it depends strictly on
                  the arc's angle. The arc is assumed to be of 90 degrees of less, so the
                  angle is determined by the cosine of that angle, which is derived from
                  rDot = the dot product of two radius vectors.  We need the Bezier curve
                  that agrees with the arc's points and tangents at the ends and midpoint. 
                  Here we compute the distance from the curve's endpoints to its control
                  points.
            
                  Since we are looking for the relative distance, we can work on the unit
                  circle. Place the center of the circle at the origin, and put the X axis
                  as the bisector between the 2 vectors.  Let a be the angle between the
                  vectors.  Then the X coordinates of the 1st and last points are cos(a/2). 
                  Let x be the X coordinate of the 2nd and 3rd points.  At t=1/2 we have a
                  point at (1,0). But the terms of the polynomial there are all equal:
            
                            (1-t)^3 = t*(1-t)^2 = t^2*(1-t) = t^3 = 1/8,
            
                  so from the Bezier formula there we have:
            
                            1 = (1/8) * (cos(a/2) + 3x + 3x + cos(a/2)), 
            
                  hence
            
                            x = (4 - cos(a/2)) / 3
            
                  The X difference between that and the 1st point is:
                  
                            DX = x - cos(a/2) = 4(1 - cos(a/2)) / 3.
            
                  But DX = distance / sin(a/2), hence the distance is
            
                            dist = (4/3)*(1 - cos(a/2)) / sin(a/2).
            
                  Rather than the angle a, we are given rDot = R^2 * cos(a), so we
                  multiply top and bottom by R:
             
                            dist = (4/3)*(R - Rcos(a/2)) / Rsin(a/2)
             
                  and use some trig:
                                           ________________
                            cos(a/2)   = \/(1 + cos(a)) / 2
                                           ______________________
                            R*cos(a/2) = \/(R^2 + R^2 cos(a)) / 2 
                                           ________________
                                       = \/(R^2 + rDot) / 2
            
                  Let A = (R^2 + rDot)/2.
                                           ____________________
                            R*sin(a/2) = \/R^2 - R^2 cos^2(a/2)
                                           _______
                                       = \/R^2 - A
            
                  so:
                                                      _
                                         4      R - \/A
                                  dist = - * ------------
                                         3      _______
                                              \/R^2 - A
            
              History:
                  5/29/2001 MichKa
                      Created it.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.AcceptRadius(System.Double,System.Double,System.Double@)">
            <summary>
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            Return false if the radius is too small compared to the chord length (returns true on NaNs)
            radius is modified to the value that's accepted.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.BezierCurveFlattener">
            <summary>
            A utility class to flatten Bezier curves.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.BezierCurveFlattener.FlattenCubic(System.Windows.Point[],System.Double,System.Collections.Generic.ICollection{System.Windows.Point},System.Boolean,System.Collections.Generic.ICollection{System.Double})">
            <summary>
            Flattens a Bezier cubic curve and adds the result polyline to the third parameter.
            </summary>
            <param name="controlPoints">The 4 Bezier cubic control points.</param>
            <param name="errorTolerance">The maximum distance between two corresponding points on the true curve 
            and on the flattened polyline. Must be strictly positive.</param>
            <param name="resultPolyline">Where to add the flattened polyline.</param>
            <param name="skipFirstPoint">True to skip the first control point when adding the flattened polyline.
            <param name="resultParameters">Where to add the value of the Bezier curve parameter associated to 
            each of the polyline vertices</param> 
            If <paramref name="resultPolyline"/> is empty, the first control point 
            and its associated parameter are always added.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.BezierCurveFlattener.FlattenQuadratic(System.Windows.Point[],System.Double,System.Collections.Generic.ICollection{System.Windows.Point},System.Boolean,System.Collections.Generic.ICollection{System.Double})">
            <summary>
            Flattens a Bezier quadratic curve and adds the result polyline to the third parameter.
            We use degree elevation for Bezier curves to reuse the code for the cubic case.
            </summary>
            <param name="controlPoints">The 3 Bezier quadratic control points.</param>
            <param name="errorTolerance">The maximum distance between two corresponding points on the true curve 
            and on the flattened polyline. Must be strictly positive.</param>
            <param name="resultPolyline">Where to add the flattened polyline.</param>
            <param name="skipFirstPoint">Whether to skip the first control point when adding the flattened polyline. 
            <param name="resultParameters">Where to add the value of the Bezier curve parameter associated to
            each of the polyline vertices</param>
            If <paramref name="resultPolyline"/> is empty, the first control point and 
            its associated parameter are always added.</param>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.CommonExtensions">
            <summary>
            Extension methods supporting non-geometry types
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach(System.Collections.IEnumerable,System.Action{System.Object})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Int32})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence with the index of each item.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.EnsureListCount``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Ensure the count of list to given count.  Create default(T) or remove items when necessary.
            If Input IList is a List, AddRange or RemoveRange is used.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.EnsureListCount``1(System.Collections.Generic.IList{``0},System.Int32,System.Func{``0})">
            <summary>
            Ensure the count of list to given count.  Create with given fatory or remove items when necessary.
            If Input IList is a List, AddRange or RemoveRange is used when there's no factory.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a range of items to the end of a collection.
            If collection is list, List.AddRange is used.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.Last``1(System.Collections.Generic.IList{``0})">
            <summary>
            Get the last item of given list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.RemoveLast``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove the last item from the given list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.DeepCopy``1(``0)">
            <summary>
            Make a copy of obj and all it's public properties, including all collection properties.
            Possible perf optimization: this is used only for Transform and Geometry.
            We should develope a copier for them instead of using reflection.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.SetIfDifferent(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object)">
            <summary>
            Set the value if different.  Avoid setting local value if possible.
            return true when the value has been changed
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ClearIfSet(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Clears the dependency property when it is locally set on the given dependency object.
            Return false if the dependeny property is not locally set.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.FindVisualDesendent``1(System.Windows.DependencyObject,System.Func{``0,System.Boolean})">
            <summary>
            Find all visual desendent of given type and condition using breath first search.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Get all visual children in IEnumerable
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.DrawingPropertyMetadata">
            <summary>
            Unify the interface of PropertyMetadata in WPF and Silverlight.
            Providing the necessary notification about render, arrange or measure.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.#ctor(Microsoft.Expression.Media.DrawingPropertyMetadataOptions,System.Object)">
            <summary>
            This private Ctor should only be used by AttachCallback.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.AttachCallback(System.Object,Microsoft.Expression.Media.DrawingPropertyMetadataOptions,System.Windows.PropertyChangedCallback)">
            <summary>
            Chain InternalCallback() to attach the instance of DrawingPropertyMetadata on property callback.
            In Silverlight4-, the property metadata is thrown away after setting. Use callback to remember it.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.InternalCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Before chaining the original callback, trigger DrawingPropertyChangedEvent
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.GeometryHelper">
            <summary>
            Extension methods for Geometry related data structures (Point/Vector/Size/Rect)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Resize(System.Windows.Rect,System.Double)">
            <summary>
            Resize the rectangle to relative size while keeping center invariant.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Subtract(System.Windows.Point,System.Windows.Point)">
            <summary>
            Get the difference Vector between two Points
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Plus(System.Windows.Point,System.Windows.Point)">
            <summary>
            Memberwise plus for Point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Minus(System.Windows.Point,System.Windows.Point)">
            <summary>
            Memberwise minus for Point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.ConvertToPathGeometry(System.String)">
            <summary>
            Converts a string of mini-languages to a <see cref="T:PathGeometry"/>.
            </summary>
            <remarks>See: Path Markup Syntax(http://msdn.microsoft.com/en-us/library/cc189041(VS.95).aspx)</remarks>
            <param name="abbreviatedGeometry">The string of path mini-languages for describing geometric paths.</param>
            <returns>A <see cref="T:PathGeometry"/> converted from the the path mini-languages/></returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.FlattenFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Double)">
            <summary>
            Flattens a <see cref="T:PathFigure"/> and adds result points to given <paramref name="points"/>.
            </summary>
            <param name="figure">The input <see cref="T:PathFigure"/>.</param>
            <param name="points">The point list to which result points will append.</param>
            <param name="tolerance">A positive number specifying the maximum allowed error from result points to input path figure.  Value 0 allows algorithm to pick the tolerance automatically.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcPoint(System.Double)">
            <summary>
            Get the normalized arc in (0,0)(1,1) box.
            Zero degree is mapped to [0.5, 0] (up), and clockwise
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcPoint(System.Double,System.Windows.Rect)">
            <summary>
            Get the absolute arc point in given bound with given relative radius.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcAngle(System.Windows.Point)">
            <summary>
            Get the angle on arc relative to (0,0)(1,1) box.
            Zero degree is mapped to [0.5, 0] (up), and clockwise
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcAngle(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Get the angle on arc from given absolute point relative to bound
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeTransform(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Compute the transform that moves Rect from to Rect to.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeTransform(System.Windows.UIElement,System.Windows.UIElement)">
            <summary>
            Computes the transform from the coordinate space of one <c>UIElement</c> to another.
            </summary>
            <param name="from">The source element.</param>
            <param name="to">The destination element.</param>
            <returns>The transform between the <c>UIElement</c>s, or null if it cannot be computed.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeToAbsolutePoint(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Map relative point to absolute using the mapping from given bound to (0,0)(1,1) box.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.AbsoluteToRelativePoint(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Map absolute point to relative using the mapping from (0,0)(1,1) box to given bound.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetStretchBound(System.Windows.Rect,System.Windows.Media.Stretch,System.Windows.Size)">
            <summary>
            Compute the bound after stretch within given logical bound.
            If stretch to uniform, use given aspectRatio.
            If aspectRatio is empty, it's equivalent to Fill.
            If stretch is None, equivalent to Fill or Uniform.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Midpoint(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the mid point of given 2 points
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The mid point between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Dot(System.Windows.Vector,System.Windows.Vector)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="lhs">The first vector.</param>
            <param name="rhs">The second vector.</param>
            <returns>The dot product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Dot(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the dot product of two Points.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Distance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the distance between two points.
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The distance between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.SquaredDistance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the square of the distance between two points.
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The square of the distance between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Determinant(System.Windows.Point,System.Windows.Point)">
            <summary>
            Determinant of cross product.  Equivalent to directional area
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Normal(System.Windows.Point,System.Windows.Point)">
            <summary>
            Compute the normal direction vector of given line segments
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Perpendicular(System.Windows.Vector)">
            <summary>
            Compute perpendicular vector, 90 degrees counter-clockwise.
            Vector to right perpendicular result a vector to up.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GeometryEquals(System.Windows.Media.Geometry,System.Windows.Media.Geometry)">
            <summary>
            Returns whether the two geometries are identical.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureGeometryType``1(``0@,System.Windows.Media.Geometry@,System.Func{``0})">
            <summary>
            Ensure the value is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureGeometryType``1(``0@,System.Collections.Generic.IList{System.Windows.Media.Geometry},System.Int32,System.Func{``0})">
            <summary>
            Ensure the list[index] is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureSegmentType``1(``0@,System.Collections.Generic.IList{System.Windows.Media.PathSegment},System.Int32,System.Func{``0})">
            <summary>
            Ensure the list[index] is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.ComputeBSpline(System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Double)">
            <summary>
            de'Boor algorithm to subdevide BSpline into poly Bezier segments.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.MathHelper">
            <summary>
            Helper class providing static properties and methods related to floating point arithmetic.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.Epsilon">
            <summary>
            The minimum distance to consider two values are same.
            Note: internal floating point in MIL/SL is float, not double.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.TwoPI">
            <summary>
            The value of angle of a full circle.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.PentagramInnerRadius">
            <summary>
            The inner radius for pentagram polygon shape, at precision of 3 digits in percentage.
            (1 - Sin36 * Sin72 / Sin54) / (Cos36) ^ 2, which is 0.47210998990512996761913067272407
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.IsVerySmall(System.Double)">
            <summary>
            Determines whether a <c>System.Double</c> value is small enough to be considered
            equivalent to zero.
            </summary>
            <param name="value"></param>
            <returns><c>true</c> if value is smaller than <c>DoubleTolerance</c>;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.EnsureRange(System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Return the value that's within the given range
            Given min/max is null means no limit.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.Hypotenuse(System.Double,System.Double)">
            <summary>
            Computes the Euclidean norm of the vector (x, y).
            </summary>
            <param name="x">The first component.</param>
            <param name="y">The second component.</param>
            <returns>The Euclidean norm of the vector (x, y).</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.DoubleFromMantissaAndExponent(System.Double,System.Int32)">
            <summary>
            Computes a real number from the mantissa and exponent.
            </summary>
            <param name="x"></param>
            <param name="exp"></param>
            <returns>The value of x * 2^exp if successful.</returns>
            <remarks>See ::ldexp in any decent C language runtime library.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.IsFiniteDouble(System.Double)">
            <summary>
            Tests a double.
            </summary>
            <param name="x">The double to test.</param>
            <returns><c>true</c> if x is not a NaN and is not equal to plus or minus infinity;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathFigureHelper">
            <summary>
            Helper class to work with PathFigure
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.FlattenFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Double,System.Boolean)">
            <summary>
            Flatten the given figure and add to the point list.
            </summary>
            <param name="tolerance">The error tolerance. Must be possitive. Can be 0, fallback to default tolerance.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.AllSegments(System.Windows.Media.PathFigure)">
            <summary>
            Iterate all segments inside given figure, and returns correct start point for each segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncPolylineFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Boolean)">
            <summary>
            Synchronize the figure to the given list of points as a single polyline segment.
            Try to keep the change minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncPolyBezierFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Boolean)">
            <summary>
            Synchronize the figure to the given list of points as a single PolyBezierSegment.
            Try to keep the change minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncEllipseFigure(System.Windows.Media.PathFigure,System.Windows.Rect,System.Windows.Media.SweepDirection,System.Boolean)">
            <summary>
            Synchronize the given figure to be a closed ellipse with 2 arc segments.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathSegmentData">
            <summary>
            A Tuple data structure for PathSegment and corresponding StartPoint.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PolylineData">
            <summary>
            Represent a polyline consist with a list of connecting points.
            A closed polygon is represented by repeating the first point at the end.
            The differences, normals, angles, and lengths are computed on Demand.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.#ctor(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Construct a polyline with two or more points.
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.Difference(System.Int32)">
            The forward difference vector of polyline.
            Points[i] + Differences[i] = Points[i+1]
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.SmoothNormal(System.Int32,System.Double,System.Double)">
            <summary>
            Compute the normal vector of given location (lerp(index, index+1, fraction).
            If the location is within range of cornerRadius, interpolate the normal direction.
            </summary>
            <param name="cornerRadius">The range of normal smoothless.  If zero, no smoothness and return the exact normal on index.</param>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.IsClosed">
            <summary>
            The polyline is closed when first and last point is repeated.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Count">
            <summary>
            The count of points in this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.TotalLength">
            <summary>
            The total arc length of this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Points">
            <summary>
            The point array of this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Lengths">
            <summary>
            The length between line segments, Points[i] to Points[i+1]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Normals">
            <summary>
            The list of normal vectors for each segment.
            Normals[i] is the normal of segment p[i] to p[i + 1].
            Normals[N-1] == Normals[N-2].
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Angles">
            <summary>
            The list of Cos(angle) between 2 line segments on point p[i]
            Note: The value is cos(angle) = Dot(u, v). It's not in degree.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.AccumulatedLength">
            <summary>
            The list of accumulated length from points[i] to points[0]
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.MarchLocation">
            <summary>
            The data structure to communicate with PathMarch algorithm.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetPoint(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Get the interpolated position of this this MarchLocation on given point list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetNormal(Microsoft.Expression.Drawing.Core.PolylineData,System.Double)">
            <summary>
            Get the interpolated normal direction of this this MarchLocation on given normal vector list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetArcLength(System.Collections.Generic.IList{System.Double})">
            <summary>
            Get the arc length of this MarchLocation to the start of the entire polyline.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Reason">
            <summary>
            The reason why this location is sampled.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Index">
            <summary>
            The index of the point on polyline point list.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Ratio">
            <summary>
            Ratio: [0, 1], which is always before / (before + after)
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Before">
            <summary>
            Arc length before stop point.  It's non-negative, and less than Length[index]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.After">
            <summary>
            Arc length after the stop point.  It's non-negative, and less than Length[index]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Remain">
            <summary>
            Remaining length within a step to hit next stop.  Positive to go forward. Negative to go backward.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PolylineHelper">
            <summary>
            Helper class to work with list of points
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineHelper.PathMarch(Microsoft.Expression.Drawing.Core.PolylineData,System.Double,System.Double,System.Func{Microsoft.Expression.Drawing.Core.MarchLocation,System.Double})">
            <summary>
            March the given polyline with given interval and output each stop through callback
            </summary>
            <param name="polyline">The polyline points to march on</param>
            <param name="startArcLength">The arc length to march before stopping at the first point.</param>
            <param name="cornerThreshold">The max angle between edges to be considered a corner vertex</param>
            <param name="stopCallback">Callback when marching algorithm stop at a point.  The callback returns the arc length for next stop.
            If the asked length is negative, march backwards. If callback returns NaN, finish marching.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineHelper.GetWrappedPolylines(System.Collections.Generic.IList{Microsoft.Expression.Drawing.Core.PolylineData},System.Double@)">
            <summary>
            Reorders the given list of polylines so that the polyline a given arclength into the list is the first.
            Polylines that preceded this line are concatenated to the end of the list, with the first polyline at the very end. 
            </summary>
            <param name="lines">A list of polylines.</param>
            <param name="startArcLength">The arclength into the entire list of polylines at which to find the start line.
            The arc length into that line is returned in this variable.</param>
            <returns>The reordered and wrapped list.</returns>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.RandomEngine">
            <summary>
            A random generator support uniform and gaussian distributions.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.RandomEngine.Gaussian">
            <summary>
            Generate a pair of independent standard normally distributed random numbers,
            zero expectation, unit variance, using polar form of the Box-Muller transformation.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.#ctor">
            <summary>
            Private constructor. Force to use factory methods.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a line segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a cubic bezier segment from quatratic curve (3 control points)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a cubic bezier segment with 4 control points.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.SimpleSegment.Points">
            <summary>
            Control points of path segment.  Length is variant.
            Line segment has 2 points, Cubic bezier has 4 points.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.TransformExtensions.TransformEquals(System.Windows.Media.Transform,System.Windows.Media.Transform)">
            <summary>
            Compares two transforms for an exact match.  Transforms with the same value but different structure(e.g. Translate(0,0) and Rotate(0) are not considered equivalent).
            </summary>
            <param name="firstTransform">The first transform.</param>
            <param name="secondTransform">The second transform.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Expression.Media.UnitType">
            <summary>
            Specifies the unit of thickness.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.UnitType.Pixel">
            <summary>
            Unit in pixels.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.UnitType.Percent">
            <summary>
            Unit in percentage relative to bounding box.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometrySource`1">
            <summary>
            Provides the base class of a source of geometry.
            It generate and cache the geometry based on input parameters and layout bounds.
            </summary>
            <remarks>
            A typical implementation will extend the UpdateCachedGeometry() to update this.cachedGeometry.
            This base class will then handle the invalidation, pipeline to geometry effects and caching realtive to layout bounds.
            An implementation should try to reuse the cached geometry as much as possible to avoid reconstruction in rendering thread.
            An implementation can extend the ComputeLogicalBounds to handle Stretch differently.
            </remarks>
            <typeparam name="TParameters">The type of geometry source parameter on which the base class is working on.</typeparam>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySource">
            <summary>
            Provides an interface to describe the source of a geometry.
            </summary>
            <remarks>
            This interface is designed to expose geometry source in a non-generic way.
            Typical implementation should subclass GeometrySource&lt;&gt; instead of implementing this interface directly.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.IGeometrySource.InvalidateGeometry">
            <summary>
            Notify the geometry is invalidated because of external changes.
            </summary>
            <remarks>
            Typically geometry is invalidated when parameters are changed.
            If any geometry has been invalidated externally, geometry will be recomputed regardless bounds' change.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.IGeometrySource.UpdateGeometry(Microsoft.Expression.Media.IGeometrySourceParameters,System.Windows.Rect)">
            <summary>
            Update the geometry using given parameter and layout bounds.
            Returns false if nothing has been updated.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.Geometry">
            <summary>
            Gets or sets the result geometry after the latest UpdateGeometry()
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.LogicalBounds">
            <summary>
            Gets the bounding box where geometry should stretch to.
            The actual geometry might be smaller or larger than this.
            <see cref="P:Microsoft.Expression.Media.IGeometrySource.LogicalBounds"/> should already take stroke thickness and stretch into consideration.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.LayoutBounds">
            <summary>
            Gets the actuall bound of FrameworkElement.
            <see cref="P:Microsoft.Expression.Media.IGeometrySource.LayoutBounds"/> includes logical bounds, stretch and stroke thickness.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometrySource`1.cachedGeometry">
            <summary>
            Specifics the geometry from the previous geometry effect process.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.InvalidateGeometry">
            <summary>
            Notify the geometry is invalidated because of external changes.
            </summary>
            <remarks>
            Typically geometry is invalidated when parameters are changed.
            If any geometry has been invalidated externally, geometry will be recomputed regardless bounds' change.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.UpdateGeometry(Microsoft.Expression.Media.IGeometrySourceParameters,System.Windows.Rect)">
            <summary>
            Update the geometry based on given parameters and layoutBounds.
            Returns false if geometry hasn't been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.UpdateCachedGeometry(`0)">
            <summary>
            Extend the way to provide geometry by implementing this function.
            Return true when any of the geometry is changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Extend the way to handle stretch mode.
            Default is to always use Stretch.Fill and center stroke.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.ApplyGeometryEffect(Microsoft.Expression.Media.IGeometrySourceParameters,System.Boolean)">
            <summary>
            Apply geometry effect when dirty or forced, update this.Geometry.
            Otherwise, keep this.Geometry as this.cachedGeometry.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.Geometry">
            <summary>
            Gets or sets the result geometry after the latest UpdateGeometry()
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.LogicalBounds">
            <summary>
            Gets the bounding box where geometry should stretch to.
            The actual geometry might be smaller or larger than this.
            <see cref="P:Microsoft.Expression.Media.GeometrySource`1.LogicalBounds"/> should already take stroke thickness and stretch into consideration.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.LayoutBounds">
            <summary>
            Gets the actuall bound of FrameworkElement.
            <see cref="P:Microsoft.Expression.Media.GeometrySource`1.LayoutBounds"/> includes logical bounds, stretch and stroke thickness.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Expression.Media.ArcGeometrySource.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Arc think Stretch.None is same as Stretch.Fill, assuming aspect ratio = 1:1
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.ArcGeometrySource.NormalizeThickness(Microsoft.Expression.Media.IArcGeometrySourceParameters)">
            <summary>
            Normalize thickness, both relative to bounding box and absolute pixel.
            realtive thickness = 0 -> full circle radius or clamped.
            realtive thickness = 1 -> shrinked to a dot, or degenerated.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.ArrowOrientation">
            <summary>
            Specifies the direction the arrow points.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Left">
            <summary>
            The arrow points to left.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Right">
            <summary>
            The arrow points to right.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Up">
            <summary>
            The arrow points up.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Down">
            <summary>
            The arrow points down.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.BlockArrowGeometrySource.ArrowBuilder">
            <summary>
                 B
                /|
               / C--D
              A     |
               \ C--D
                \|
                 B
            Algorithm only use Width/Height assuming top-left at 0,0
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.CalloutStyle">
            <summary>
            Specifies the rendering style of a Callout shape
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Rectangle">
            <summary>
            A rectangle shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.RoundedRectangle">
            <summary>
            A rounded rectangle shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Oval">
            <summary>
            A oval shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Cloud">
            <summary>
            A cloud shaped callout.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateEdge(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double,System.Boolean)">
            <summary>
            Update the edge line, and connect to anchor point if necessary
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdatePolylineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Update polyline segment, connecting start, anchor and end point with Callout style
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateLineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point)">
            <summary>
            Update the line segment to given point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.ComputeCorners(System.Double)">
            <summary>
            Compute the corner points, clockwise, 8 points for 4 corners
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateCornerArc(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point)">
            <summary>
            Corner Arc is always smaller arc with 90 degree
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometryEffect">
            <summary>
            Provides the base class of GeometryEffect that transform a geometry into another geometry.
            </summary>
            <remarks>
            This class provides the basic implementation of processing the rendered geometry of a IShape before it's passed to rendering.
            A typical implementation will extend the virtual function <see cref="F:ProcessGeometry"/> to transform input geometry.
            <see cref="T:GeometryEffect"/> is typically attached to <see cref="T:IShape"/> as an attached property and activated when <see cref="T:IShape"/> geometry is updated.
            The <see cref="P:OutputGeometry"/> of a <see cref="T:GeometryEffect"/> will replace the rendered geometry in <see cref="T:IShape"/>
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.GetGeometryEffect(System.Windows.DependencyObject)">
            <summary>
            Gets the geometry effect as attached property on given dependency object.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.SetGeometryEffect(System.Windows.DependencyObject,Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Sets the geometry effect as attached property on given dependency object.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.CloneCurrentValue">
            <summary>
            Creates a modifiable clone (deep copy) of the <see cref="T:GeometryEffect"/> using its current values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.DeepCopy">
            <summary>
            Makes a deep copy of the geometry effect. Implements CloneCurrentValue in Silverlight.
            </summary>
            <returns>A clone of current instance of geometry effect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Equals(Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Tests if given geometry effect is equivalent to the current instance.
            </summary>
            <param name="geometryEffect">a geometry effect compare with.</param>
            <returns>Returns true when two effects renders a same appearance.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometryEffect.cachedGeometry">
            <summary>
            Specifics the geometry from the previous geometry effect process.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.InvalidateGeometry">
            <summary>
            Invalidate the geometry effect without actually compute the geometry.
            It will notify all parent shapes or effects to invalidate accordingly.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.ProcessGeometry(System.Windows.Media.Geometry)">
            <summary>
            Process geometry effect on given input geometry.
            Result is stored in GeometryEffect.OutputGeometry.
            </summary>
            <returns>Return false if nothing has been changed.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.UpdateCachedGeometry(System.Windows.Media.Geometry)">
            <summary>
            Extend the way of updating cachedGeometry based on given input geometry.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Detach">
            <summary>
            Notified when detached from parent chain.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Attach(System.Windows.DependencyObject)">
            <summary>
            Notified when attached to a parent chain.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.InvalidateParent(System.Windows.DependencyObject)">
            <summary>
            Invalidate the geometry on given dependency object when
            the object is a valid parent type (IShape or GeometryEffect).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.CreateInstanceCore">
            <summary>
            Implement the Freezable in WPF.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.DefaultGeometryEffect">
            <summary>
            The default geometry effect that does nothing but passing through the input geometry.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.OutputGeometry">
            <summary>
            Gets the output geometry of this geometry effect.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.Parent">
            <summary>
            Parent can be either IShape or GeometryEffectGroup.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometryEffectConverter">
            <summary>
            Provides the conversion between string and geometry effect
            </summary>
            <remarks>
            This class enables the brief sytax in xaml like <code>GeometryEffect="Sketch"</code>
            It will create a clone of instance of geometry effect so it can be used as resources.
            </remarks>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometryEffectConverter.registeredEffects">
            <summary>
            Build a preset list of supported geometry effects.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            A GeometryEffect can be converted from string type.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            A GeometryEffect can be converted to string type.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts a string to a geometry effect.  Fallback value is null.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a geometry effect into a string.  Fallback value is null.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySourceExtensions">
            <summary>
            Provides helper extension methods to work with IGeometrySource and parameters.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.ArrowType">
            <summary>
            Specifies the Arrow head type.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.NoArrow">
            <summary>
            No arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.Arrow">
            <summary>
            A triagle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.StealthArrow">
            <summary>
            A stealth triangle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.OpenArrow">
            <summary>
            An open triangle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.OvalArrow">
            <summary>
            An oval head.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.CornerType">
            <summary>
            Specifies the corner location.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.TopLeft">
            <summary>
            On top left of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.TopRight">
            <summary>
            On top right of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.BottomRight">
            <summary>
            On bottom right of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.BottomLeft">
            <summary>
            On bottom left of bounding box.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.PolygonGeometrySource.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Polygon think Stretch.None is same as Stretch.Fill
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.SketchGeometryEffect">
            <summary>
            A geometry effect to transform any geometry into a Sketch style as in SketchFlow.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.DeepCopy">
            <summary>
            Makes a deep copy of the geometry effect
            </summary>
            <returns>A clone of current instance of geometry effect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.Equals(Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Tests if given geometry effect is equivalent to the current instance.
            </summary>
            <param name="geometryEffect">a geometry effect compare with.</param>
            <returns>Returns true when two effects renders a same appearance.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.UpdateCachedGeometry(System.Windows.Media.Geometry)">
            <summary>
            Updating cachedGeometry based on given input geometry.
            </summary>
            <param name="input">A input geometry</param>
            <returns>Returns true when anything on cachedGeometry has been updated.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.SketchGeometryEffect.randomSeed">
            <summary>
            Use the same random seed on creation to keep visual flickering minimum
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.GetEffectiveSegments(System.Windows.Media.PathFigure)">
            <summary>
            Iterates all simple segments in given path figure including the closing chord.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Shapes.Arc">
            <summary>
            Renderes an Arc shape supporting Arc, Ring and Pie mode controled by ArcThickness.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Shapes.PrimitiveShape">
            <summary>
            Platform neutral implementation of Shape deriving from WPF:Shape or SL:Path
            </summary>
            <summary>
            Provides WPF implementation of Shap who derives from platform Shape.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.CreateGeometrySource">
            <summary>
            Extend how the shape is drawn with creating geometry source
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.MeasureOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.</summary>
            <returns>The size that this object determines it needs during layout, based on its calculations of child object allotted sizes, or possibly on other considerations such as fixed container size.</returns>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity" />) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <remarks>
            In WPF, measure override works from Shape.DefiningGeometry which is not always as expected
            see bug 99497 for details where WPF is not having correct measure by default.
            
            In Silverlight, measure override on Path does not work the same as primitive shape works.
            
            We should return the smallest size this shape can correctly render without clipping.
            By default a shape can render as small as a dot, therefore returning the strokethickness.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Shapes.PrimitiveShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Shapes.PrimitiveShape.GeometryMargin">
            <summary>
            Gets or sets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Shapes.PrimitiveShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.PrimitiveShape.RenderedGeometry">
            <summary>
            Gets a value that represents the final rendered <see cref="T:System.Windows.Media.Geometry"/> of a <see cref="T:System.Windows.Shapes.Shape"/>.
            </summary>
            <returns>The final rendered <see cref="T:System.Windows.Media.Geometry"/> of a <see cref="T:System.Windows.Shapes.Shape"/>.</returns>
            <remarks>The WPF primitive shape hides base class RenderedGeometry to provide a local storage and matches Silverlight primitive shape interface.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.StartAngle">
            <summary>
            Gets or sets the start angle.
            </summary>
            <value>The start angle in degrees. 0 degree is pointing up.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.EndAngle">
            <summary>
            Gets or sets the end angle.
            </summary>
            <value>The end angle in degree. 0 degree is pointing up.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.ArcThickness">
            <summary>
            Gets or sets the arc thickness.
            </summary>
            <value>The arc thickness in pixels or percentage depending on "ArcThicnessUnit"/>.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.ArcThicknessUnit">
            <summary>
            Gets or sets the arc thickness unit.
            </summary>
            <value>The arc thickness unit, either pixel or percentage.</value>
        </member>
        <member name="T:Microsoft.Expression.Shapes.BlockArrow">
            <summary>
            Renders a block arrow shape supporting resizable arrow head and body.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>The orientation where the arrow is pointing to.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.ArrowheadAngle">
            <summary>
            Gets or sets the arrowhead angle.
            </summary>
            <value>The arrowhead angle in degrees.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.ArrowBodySize">
            <summary>
            Gets or sets the size of the arrow body.
            </summary>
            <value>The size of the arrow body in pixels.</value>
        </member>
        <member name="T:Microsoft.Expression.Shapes.RegularPolygon">
            <summary>
            Renders a regular polygon shape or corresponding star shape with variable number of points.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.RegularPolygon.PointCount">
            <summary>
            Gets or sets the number of points of the <see cref="T:Microsoft.Expression.Shapes.RegularPolygon"/>
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.RegularPolygon.InnerRadius">
            <summary>
            Gets or sets the the distance between the center and the innermost point.
            </summary>
            <value>The distance between the center and the innermost point.</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\Microsoft.Expression.Controls.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Controls</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.Initialize">
            <summary>
            Called before we loop over the polylines.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.ShouldBreak(System.Int32)">
            <summary>
            Checks whether or not we should continue looping over the polylines.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnPolylineBegin(Microsoft.Expression.Drawing.Core.PolylineData)">
            <summary>
            Called before we begin marching a new polyline.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnPolylineCompleted(System.Double)">
            <summary>
            Called when we walk off the end of a polyline.
            </summary>
            <param name="remaingLength">The remaining arclength in the polyline.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnStepCompleted(System.Double)">
            <summary>
            Called when we sucessfully complete a step.
            </summary>
            <param name="actualStepDistance">The actual step distance.
            This may be different than Step if we have wrapped to another polyline.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.Distribute(Microsoft.Expression.Controls.PathPanel,System.Int32,System.Int32)">
            <summary>
            Distributes the children of a path panel along a given layout path.
            </summary>
            <param name="pathPanel">The path panel.</param>
            <param name="pathIndex">The index of the path in pathPanel.LayoutPaths.</param>
            <param name="childIndex">The index of the first child to be laid out on this path.</param>
            <returns>The index of the next child to be distributed. If childIndex is returned, this function has done nothing.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.ChildIndex">
            <summary>
            The index of the next child to be arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Span">
            <summary>
            The distance in arclength that we want to use for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Step">
            <summary>
            The distance in arclength to walk along the current polyline.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Capacity">
            <summary>
            The total number of elements to be arranged on the LayoutPath.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.EvenDistributionStrategy">
            <summary>
            Distributes the children of a path panel along a layout path.
            Even distribution means that there is equal arclength between the centers of all
            the elements on the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.ChangedPathLayoutProperties">
            <summary>
            Specifies which path layout properties have changed.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs.#ctor(Microsoft.Expression.Controls.ChangedPathLayoutProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs"/> class.
            </summary>
            <param name="changedProperties">The data for the event.</param>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs.ChangedProperties">
            <summary>
            Gets the properties changed in a <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathLayoutData">
            <summary>
            Encapsulates the data needed to update a <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LayoutPathIndex">
            <summary>
            Gets or sets the index of the path on which an element is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.GlobalIndex">
            <summary>
            Gets or sets the index of an element in a collection of elements.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LocalIndex">
            <summary>
            Gets or sets the index of an element on a path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.GlobalOffset">
            <summary>
            Gets or sets the offset of an element proportional to the total length of a collection of paths.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LocalOffset">
            <summary>
            Gets or sets the offset of an element proportional to the length of path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.NormalAngle">
            <summary>
            Gets or sets the angle perpendicular to the path at an element's location.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.OrientationAngle">
            <summary>
            Gets or sets the angle perpendicular to the path at an element's location if the element is oriented to the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.IPathLayoutItem">
            <summary>
            Represents an element that is arranged by a <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </summary>
            <remarks>
            Implementing this interface enables <see cref="T:Microsoft.Expression.Controls.PathPanel"/> to set these properties when the element is arranged.
            This interface is not intended for general implementation.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.IPathLayoutItem.Update(Microsoft.Expression.Controls.PathLayoutData)">
            <summary>
            Updates the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/> properties based on the given <see cref="T:Microsoft.Expression.Controls.PathLayoutData"/> and raises the <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
            <param name="data">The data needed to update the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/>.</param>
        </member>
        <member name="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated">
            <summary>
            Occurs when one or more of the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/> properties change.
            </summary>
            <remarks>
            This event is raised whenever the item’s position along the path is updated. This can occur due to changes in the properties on the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> or changes to <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LayoutPathIndex">
            <summary>
            Gets the index of the path on which the item is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalIndex">
            <summary>
            Gets the index of the item in a collection of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalIndex">
            <summary>
            Gets the index of the item on the path on which it is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalOffset">
            <summary>
            Gets the offset of the item proportional to the total length of a collection of paths.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalOffset">
            <summary>
            Gets the offset of the item proportional to the length of the path on which it is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.NormalAngle">
            <summary>
            Gets the angle perpendicular to the path at the item's location.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.OrientationAngle">
            <summary>
            Gets the angle perpendicular to the path at the items's location if the item is oriented to the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.Distribution">
            <summary>
            Specifies the distribution of a <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.Orientation">
            <summary>
            Specifies the orientation of elements on a <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.FillBehavior">
            <summary>
            Specifies the method for altering the <see cref="P:Microsoft.Expression.Controls.LayoutPath.Span"/> on an open path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.LayoutPath">
            <summary>
            Describes a path along which elements are arranged.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Controls.LayoutPath.transformedPolylines">
            <summary>
            Ideally, we want to cache the Bezier curves before flattening, because transform will affect flattening.
            That requires us to cache curves that we don't support very well yet.  Instead, we cache the flatten points
            in distribution strategy and transform them on demand.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.SourceElement">
            <summary>
            Gets or sets the element that defines the path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Distribution">
            <summary>
            Gets or sets whether items are laid out evenly or with a fixed padding.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Capacity">
            <summary>
            Gets or sets the maximum number of items displayed on the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Padding">
            <summary>
            Gets or sets the distance in pixels along the arc length of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> between two items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Orientation">
            <summary>
            Gets or sets the orientation of the items.
            </summary>
            <remarks>
            This property is supported on <see cref="T:Microsoft.Expression.Controls.PathListBox"/>, but not <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Start">
            <summary>
            Gets or sets the distance from the start of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> to place the first item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Span">
            <summary>
            Gets or sets the percentage of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> that participates in layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.FillBehavior">
            <summary>
            Gets or set the method to alter <see cref="P:Microsoft.Expression.Controls.LayoutPath.Span"/> on an open path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.ActualCapacity">
            <summary>
            Gets the computed Capacity.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.IsValid">
            <summary>
            Gets whether or not the <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/> is valid in the context.
            A <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/> is invalid if it is a descendant of the <see cref="T:Microsoft.Expression.Controls.PathPanel"/> in which it used.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PaddedDistributionStrategy">
            <summary>
            Distributes the children of a layout path based on the size of the children and a given padding between the children.
            The distance in arclength between children is determined by the padding plus the sum of the radii of the children's bounding boxes.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathListBox">
            <summary>
            Contains a list of items that are laid out along one or more paths.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathListBox"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.GetContainerForItemOverride">
            <summary>
            Creates the element used to display a specified item.
            </summary>
            <returns>A <see cref="T:Microsoft.Expression.Controls.PathListBoxItem"/> corresponding to a specified item.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own item container.
            </summary>
            <returns>true if the item is its own item container; otherwise, false.</returns>
            <param name="item">The specified item.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements.
            </summary>
            <param name="finalSize">The size that this object should use to arrange its child elements.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.LayoutPaths">
            <summary>
            Gets or sets a collection of objects that define the path(s) used for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.StartItemIndex">
            <summary>
            Gets or sets the index to use within the list of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.WrapItems">
            <summary>
            Gets or sets whether the item index wraps to the beginning of the collection when StartItemIndex is greater than 0.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathListBoxItem">
            <summary>
            Represents an item in a <see cref="T:Microsoft.Expression.Controls.PathListBox"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBoxItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathListBoxItem"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBoxItem.Update(Microsoft.Expression.Controls.PathLayoutData)">
            <summary>
            For a description of this member, see <see cref="M:Microsoft.Expression.Controls.IPathLayoutItem.Update(Microsoft.Expression.Controls.PathLayoutData)"/>.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.PathListBoxItem.PathLayoutUpdated">
            <summary>
            For a description of this member, see <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LayoutPathIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LayoutPathIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.GlobalIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LocalIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.GlobalOffset">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalOffset"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LocalOffset">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalOffset"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.NormalAngle">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.NormalAngle"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.OrientationAngle">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.OrientationAngle"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathPanel">
            <summary>
            Arranges child elements along one or more path.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Expression.Controls.PathPanel"/> can be used as an alternative to <see cref="T:Microsoft.Expression.Controls.PathListBox"/> when selection is not necessary.
            The <see cref="P:Microsoft.Expression.Controls.LayoutPath.Orientation"/> property is not supported on <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathPanel"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the size required for child elements.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. </param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements.
            </summary>
            <param name="finalSize">The size that this object should use to arrange its child elements.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.ArrangeChild(System.Int32,System.Int32,Microsoft.Expression.Drawing.Core.PolylineData,Microsoft.Expression.Drawing.Core.MarchLocation,System.Int32)">
            <summary>
            Arranges the child at the given index at a particular location on a LayoutPath.
            </summary>
            <param name="indirectIndex">An index from the range 0 to PathPanel.Count.</param>
            <param name="pathIndex">The index of the layout path on which to arrange the child.</param>
            <param name="polyline">The polyline in the layout path.</param>
            <param name="location">The location on the polyline.</param>
            <param name="localIndex">The index of the child on the LayoutPath.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.GetChildRadius(System.Int32)">
            <summary>
            Calculates the radius of the bounding circle for the child at the given index.
            </summary>
            <param name="indirectIndex">An index from the range 0 to PathPanel.Count.</param>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.LayoutPaths">
            <summary>
            Gets or sets a collection of objects that define the path(s) used for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.StartItemIndex">
            <summary>
            Gets or sets the index to use within the list of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.WrapItems">
            <summary>
            Gets or sets whether the item index wraps to the beginning of the collection when StartItemIndex is greater than 0.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.ValidPaths">
            <summary>
            The subset of LayoutPaths that are attached and not Collapsed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.Count">
            <summary>
            Count is the number of Children that the PathPanel will layout.
            If StartItemIndex > 0 and WrapItems is false, this can be less than PathPanel.Children.Count
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetItemsHost(System.Windows.Controls.ItemsControl)">
            <summary>
            Gets the Panel that contains the containers of an ItemsControl.
            </summary>
            <param name="control">The ItemsControl.</param>
            <returns>
            The Panel that contains the containers of an ItemsControl, or null
            if the Panel could not be found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.TraverseBreadthFirst``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Traverses a tree by accepting an initial value and a function that 
            retrieves the child nodes of a node.
            </summary>
            <typeparam name="T">The type of the stream.</typeparam>
            <param name="initialNode">The initial node.</param>
            <param name="getChildNodes">A function that retrieves the child
            nodes of a node.</param>
            <param name="traversePredicate">A predicate that evaluates a node
            and returns a value indicating whether that node and it's children
            should be traversed.</param>
            <returns>A stream of nodes.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree children of an element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetVisualChildrenAndSelfIterator(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree children of an element and the element itself.
            </returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetLogicalChildren(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical children of a framework element using a 
            breadth-first search. For performance reasons this method manually 
            manages the stack instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetLogicalDescendents(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical descendents of a framework element using a 
            breadth-first search. For performance reasons this method manually 
            manages the stack instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\de\Microsoft.Expression.Drawing.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Drawing</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Controls.Callout">
            <summary>
            Renders a callout shape supporting several shapes combined with a callout arrow.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.CompositeContentShape">
             <summary>
             Provides a base class of a composite shape that derives from <see cref="T:System.Windows.Controls.ContentControl"/> and implements <see cref="T:Microsoft.Expression.Media.IShape"/>.
             </summary>
             <remarks>
             <see cref="T:Microsoft.Expression.Controls.CompositeContentShape"/> implements <see cref="T:Microsoft.Expression.Media.IShape"/> interface,
             and supports rendering a geometry similar to <see cref="T:System.Windows.Shapes.Shape"/>, but the geometry can be rendered outside of layout boundary.
             
             A typical implementation will have a customized default template in generic.xaml which template-binds most shape properties to a <see cref="T:System.Windows.Shapes.Path"/>.
             It should also extend the <see cref="P:GeometrySource"/> property to customize the appearance of the <see cref="T:System.Windows.Shapes.Path"/>.
            
             This class also supports showing content together with the shape.
             </remarks>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySourceParameters">
            <summary>
            Provides an interface to discribe the parameters of a Shape.
            </summary>
            <remarks>
            This interface is the data for communication between Shape and GeometrySource.
            Typically a concrete implementation of IShape will implements this interface and pass it into
            GeometrySource.UpdateGeometry(), who will consume the shape as readonly data provider.
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Media.IShape">
            <summary>
            Provides the necessary interface to define a Shape.
            Both primitive and composite shapes need to match this interface, although they might derive from different type of FrameworkElement.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.IShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Fill">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how to paint the interior of the shape.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that describes how the shape's interior is painted. The default is null. See Remarks.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values. The default value at run time depends on the type of <see cref="T:System.Windows.Shapes.Shape" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.RenderedGeometry">
            <summary>
            Gets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.GeometryMargin">
            <summary>
            Gets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Media.IShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.CreateGeometrySource">
            <summary>
            Extends how the shape is drawn with creating geometry source.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Controls.CompositeContentShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.OnContentChanged(System.Object,System.Object)">
            <summary>
            Transforms a string content into <see cref="T:TextBlock"/> with center alignment and mulitple line support.
            </summary>
            <remarks>
            Use template binding to <see cref="P:Microsoft.Expression.Controls.CompositeContentShape.InternalContent"/> instead of <see cref="P:Content"/> to enable this method.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Fill">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> that specifies how to paint the interior of the shape.
            </summary>
            <returns>A <see cref="T:System.Windows.Media.Brush"/> that describes how the shape's interior is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeStartLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />. </summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineCap" /> enumeration that specifies the shape at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeEndLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the end of a line. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeLineJoin">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration value that specifies the type of join that is used at the vertices of a <see cref="T:System.Windows.Shapes.Shape" />.</summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration that specifies the join appearance. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeMiterLimit">
            <summary>Gets or sets a limit on the ratio of the miter length to half the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. </summary>
            <returns>The limit on the ratio of the miter length to the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. This value is always a positive number that is greater than or equal to 1.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashArray">
            <summary>Gets or sets a collection of <see cref="T:System.Double" /> values that indicate the pattern of dashes and gaps that is used to outline shapes. </summary>
            <returns>A collection of <see cref="T:System.Double" /> values that specify the pattern of dashes and gaps. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that specifies how the ends of a dash are drawn. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. The default is <see cref="F:System.Windows.Media.PenLineCap.Flat" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashOffset">
            <summary>Gets or sets a <see cref="T:System.Double" /> that specifies the distance within the dash pattern where a dash begins.</summary>
            <returns>A <see cref="T:System.Double" /> that represents the distance within the dash pattern where a dash begins. The default value is 0.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.RenderedGeometry">
            <summary>
            Gets or sets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.GeometryMargin">
            <summary>
            Gets or sets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.InternalContent">
            <summary>
            Gets or sets the internal content that converts string into center aligned multiple line textblock.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.CompositeContentShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.Callout.AnchorPoint">
            <summary>
            Gets or sets the position of the callout relative to the top and left corner.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.Callout.CalloutStyle">
            <summary>
            Gets or sets the callout style.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.CompositeShape">
            <summary>
            Provides a base class of a composite shape that derives from <see cref="T:System.Windows.Controls.Control"/> and implements <see cref="T:Microsoft.Expression.Media.IShape"/>.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Expression.Controls.CompositeShape"/> implements <see cref="T:Microsoft.Expression.Media.IShape"/> interface,
            and supports rendering a geometry similar to <see cref="T:System.Windows.Shapes.Shape"/>, but the geometry can be rendered outside of layout boundary.
            
            A typical implementation will have a customized default template in generic.xaml which template-binds most shape properties to a <see cref="T:System.Windows.Shapes.Path"/>.
            It should also extend the <see cref="P:GeometrySource"/> property to customize the appearance of the <see cref="T:System.Windows.Shapes.Path"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.CreateGeometrySource">
            <summary>
            Extends how the shape is drawn with creating geometry source.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Controls.CompositeShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Fill">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> that specifies how to paint the interior of the shape.
            </summary>
            <returns>A <see cref="T:System.Windows.Media.Brush"/> that describes how the shape's interior is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeStartLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />. </summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineCap" /> enumeration that specifies the shape at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeEndLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the end of a line. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeLineJoin">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration value that specifies the type of join that is used at the vertices of a <see cref="T:System.Windows.Shapes.Shape" />.</summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration that specifies the join appearance. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeMiterLimit">
            <summary>Gets or sets a limit on the ratio of the miter length to half the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. </summary>
            <returns>The limit on the ratio of the miter length to the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. This value is always a positive number that is greater than or equal to 1.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashArray">
            <summary>Gets or sets a collection of <see cref="T:System.Double" /> values that indicate the pattern of dashes and gaps that is used to outline shapes. </summary>
            <returns>A collection of <see cref="T:System.Double" /> values that specify the pattern of dashes and gaps. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that specifies how the ends of a dash are drawn. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. The default is <see cref="F:System.Windows.Media.PenLineCap.Flat" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashOffset">
            <summary>Gets or sets a <see cref="T:System.Double" /> that specifies the distance within the dash pattern where a dash begins.</summary>
            <returns>A <see cref="T:System.Double" /> that represents the distance within the dash pattern where a dash begins. The default value is 0.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.RenderedGeometry">
            <summary>
            Gets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.GeometryMargin">
            <summary>
            Gets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.CompositeShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.LineArrow">
            <summary>
            Renders a bended line segment with optional arrowhead on both end.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.LineArrow.MeasureOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.</summary>
            <returns>The size that this object determines it needs during layout, based on its calculations of child object allotted sizes, or possibly on other considerations such as fixed container size.</returns>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity" />) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <remarks>
            A default <see cref="T:LineArrow"/> can render at anysize.
            The <see cref="P:RenderedGeometry"/> will stretch to layout boundary and render to outside if necessary.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.BendAmount">
            <summary>
            Gets or sets the amount of bend for the arrow.
            </summary>
            <value>The bend amount between 0 to 1.</value>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.StartArrow">
            <summary>
            Gets or sets how the arrow head is rendered at the start of the line.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.EndArrow">
            <summary>
            Gets or sets how the arrow head is rendered at the end of the line.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.StartCorner">
            <summary>
            Gets or sets from which corner to start drawing the arrow.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.ArrowSize">
            <summary>
            Gets or sets the length of the arrow in pixels.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PanningItems">
            <summary>
            Provides an items control that displays one selected item, and allows panning between items using touch gestures.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PanningItems.#ctor">
            <summary>
            The constructor for PanningItems.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PanningItems.OnApplyTemplate">
            <summary>
            Called when the PanningItems template is applied.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.ScrollDirection">
            <summary>
            Gets or sets the orientation of items in the control.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.FlickTolerance">
            <summary>
            Gets or sets the flick tolerance.  This can be a value between 0 and 1.  
            It represents the percentage of the size of the PanningItems needed to be covered by the flick gesture to trigger an items change.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.PreviousItem">
            <summary>
            Gets or sets the item before the selected item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.NextItem">
            <summary>
            Gets or sets the item after the selected item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.LoopContents">
            <summary>
            Gets or sets whether the contents of the items control will loop, so that the first item will follow the last item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.SliderValue">
            <summary>
            Gets or sets the value of the slider controlling the panning motion.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathGeometryHelper">
            <summary>
            Helper class to work with PathGeometry
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.ConvertToPathGeometry(System.String)">
            <summary>
            Converts a string in the path mini-langauge into a PathGeometry.
            </summary>
            <param name="abbreviatedGeometry">A string in the path mini-langauge.</param>
            <remarks>
            Algorithm is modified from WPF: MS.Internal.Parsers.ParseStringToStreamGeometryContext.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.AsPathGeometry(System.Windows.Media.Geometry)">
            <summary>
            Convert the given geometry into a single PathGeometry.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.SyncPolylineGeometry(System.Windows.Media.Geometry@,System.Collections.Generic.IList{System.Windows.Point},System.Boolean)">
            <summary>
            Update the given geometry as PathGeometry with polyline matching given point list.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathGeometryHelper.AbbreviatedGeometryParser">
            <summary>
            Parses abbreviated geometry sytax.
            </summary>
            <remarks>
            The algorithm is modified from WPF: MS.Internal.AbbreviatedGeometryParser
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathSegmentHelper">
            <summary>
            Helper class to Convert ArcSegment to BezierSegment(s)
            </summary>
            <summary>
            Helper class to work with PathSegment and all variations.
            </summary>
            <summary>
            Strategy classes to handle different types of PathSegment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierSegments(System.Windows.Media.ArcSegment,System.Windows.Point)">
            <summary>
            Convert an Arc segment into Bezier format
            Return BezierSegment, PolyBezierSegment, LineSegment, or null
            When returning null, the Arc degenerated into start point.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SetIsStroked(System.Windows.Media.PathSegment,System.Boolean)">
            <summary>
            Avoid calling the three-parameter constructor, since it always sets a local value for IsStroked.
            </summary>
            <param name="segment"></param>
            <param name="isStroked"></param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SyncPolylineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Collections.Generic.IList{System.Windows.Point},System.Int32,System.Int32)">
            <summary>
            Update the SegmentCollection with given polyline matching given point list.
            Try to keep changes minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SyncPolyBezierSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Collections.Generic.IList{System.Windows.Point},System.Int32,System.Int32)">
            <summary>
            Update the collection[index] segment with poly bezier segment matching given point list.
            givne point list must contain 3*N points for N Bezier segments.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.IsEmpty(System.Windows.Media.PathSegment)">
            <summary>
            Test if given path segment is empty.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetPointCount(System.Windows.Media.PathSegment)">
            <summary>
            Get the point count in given path segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetLastPoint(System.Windows.Media.PathSegment)">
            <summary>
            Get the last point of given path segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetPoint(System.Windows.Media.PathSegment,System.Int32)">
            <summary>
            Get the point of given index in given segment.
            If input is (-1), return the last point.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.FlattenSegment(System.Windows.Media.PathSegment,System.Collections.Generic.IList{System.Windows.Point},System.Windows.Point,System.Double)">
            <summary>
            Flatten given segment and add result points into given point list.
            </summary>
            <param name="segment">The segment to be flatten</param>
            <param name="points">The result point list</param>
            <param name="start">The start point of the segment</param>
            <param name="tolerance">The error tolerance. Must be possitive. Can be 0, fallback to default tolerance.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.ArcToBezier(System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Double,System.Double,System.Windows.Point[]@,System.Int32@)">
            <summary>
            ArcToBezier, Compute the Bezier approximation of an arc
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            </summary>
            <remarks>
            This utility computes the Bezier approximation for an elliptical arc as
            it is defined in the SVG arc spec. The ellipse from which the arc is
            carved is axis-aligned in its own coordinates, and defined there by its
            x and y radii. The rotation angle defines how the ellipse's axes are
            rotated relative to our x axis. The start and end points define one of 4
            possible arcs; the sweep and large-arc flags determine which one of
            these arcs will be chosen. See SVG spec for details.
            
            Returning cPieces = 0 indicates a line instead of an arc
                      cPieces = -1 indicates that the arc degenerates to a point 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.GetArcAngle(System.Windows.Point,System.Windows.Point,System.Boolean,System.Boolean,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Get the number of Bezier arcs, and sine/cosine of each.
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            </summary>
            <remarks>
            This is a private utility used by ArcToBezier.  We break the arc into
            pieces so that no piece will span more than 90 degrees.  The input
            points are on the unit circle.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.GetBezierDistance(System.Double,System.Double)">
             <summary>
             GetBezierDistance, return the distance as a fraction of the radius
             Adopted from MIL:Graphics\core\geometry\utils.cpp
             </summary>
            <remarks>
                  Get the distance from a circular arc's endpoints to the control points
                  of the Bezier arc that approximates it, as a fraction of the arc's
                  radius.
            
                  Since the result is relative to the arc's radius, it depends strictly on
                  the arc's angle. The arc is assumed to be of 90 degrees of less, so the
                  angle is determined by the cosine of that angle, which is derived from
                  rDot = the dot product of two radius vectors.  We need the Bezier curve
                  that agrees with the arc's points and tangents at the ends and midpoint. 
                  Here we compute the distance from the curve's endpoints to its control
                  points.
            
                  Since we are looking for the relative distance, we can work on the unit
                  circle. Place the center of the circle at the origin, and put the X axis
                  as the bisector between the 2 vectors.  Let a be the angle between the
                  vectors.  Then the X coordinates of the 1st and last points are cos(a/2). 
                  Let x be the X coordinate of the 2nd and 3rd points.  At t=1/2 we have a
                  point at (1,0). But the terms of the polynomial there are all equal:
            
                            (1-t)^3 = t*(1-t)^2 = t^2*(1-t) = t^3 = 1/8,
            
                  so from the Bezier formula there we have:
            
                            1 = (1/8) * (cos(a/2) + 3x + 3x + cos(a/2)), 
            
                  hence
            
                            x = (4 - cos(a/2)) / 3
            
                  The X difference between that and the 1st point is:
                  
                            DX = x - cos(a/2) = 4(1 - cos(a/2)) / 3.
            
                  But DX = distance / sin(a/2), hence the distance is
            
                            dist = (4/3)*(1 - cos(a/2)) / sin(a/2).
            
                  Rather than the angle a, we are given rDot = R^2 * cos(a), so we
                  multiply top and bottom by R:
             
                            dist = (4/3)*(R - Rcos(a/2)) / Rsin(a/2)
             
                  and use some trig:
                                           ________________
                            cos(a/2)   = \/(1 + cos(a)) / 2
                                           ______________________
                            R*cos(a/2) = \/(R^2 + R^2 cos(a)) / 2 
                                           ________________
                                       = \/(R^2 + rDot) / 2
            
                  Let A = (R^2 + rDot)/2.
                                           ____________________
                            R*sin(a/2) = \/R^2 - R^2 cos^2(a/2)
                                           _______
                                       = \/R^2 - A
            
                  so:
                                                      _
                                         4      R - \/A
                                  dist = - * ------------
                                         3      _______
                                              \/R^2 - A
            
              History:
                  5/29/2001 MichKa
                      Created it.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.AcceptRadius(System.Double,System.Double,System.Double@)">
            <summary>
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            Return false if the radius is too small compared to the chord length (returns true on NaNs)
            radius is modified to the value that's accepted.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.BezierCurveFlattener">
            <summary>
            A utility class to flatten Bezier curves.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.BezierCurveFlattener.FlattenCubic(System.Windows.Point[],System.Double,System.Collections.Generic.ICollection{System.Windows.Point},System.Boolean,System.Collections.Generic.ICollection{System.Double})">
            <summary>
            Flattens a Bezier cubic curve and adds the result polyline to the third parameter.
            </summary>
            <param name="controlPoints">The 4 Bezier cubic control points.</param>
            <param name="errorTolerance">The maximum distance between two corresponding points on the true curve 
            and on the flattened polyline. Must be strictly positive.</param>
            <param name="resultPolyline">Where to add the flattened polyline.</param>
            <param name="skipFirstPoint">True to skip the first control point when adding the flattened polyline.
            <param name="resultParameters">Where to add the value of the Bezier curve parameter associated to 
            each of the polyline vertices</param> 
            If <paramref name="resultPolyline"/> is empty, the first control point 
            and its associated parameter are always added.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.BezierCurveFlattener.FlattenQuadratic(System.Windows.Point[],System.Double,System.Collections.Generic.ICollection{System.Windows.Point},System.Boolean,System.Collections.Generic.ICollection{System.Double})">
            <summary>
            Flattens a Bezier quadratic curve and adds the result polyline to the third parameter.
            We use degree elevation for Bezier curves to reuse the code for the cubic case.
            </summary>
            <param name="controlPoints">The 3 Bezier quadratic control points.</param>
            <param name="errorTolerance">The maximum distance between two corresponding points on the true curve 
            and on the flattened polyline. Must be strictly positive.</param>
            <param name="resultPolyline">Where to add the flattened polyline.</param>
            <param name="skipFirstPoint">Whether to skip the first control point when adding the flattened polyline. 
            <param name="resultParameters">Where to add the value of the Bezier curve parameter associated to
            each of the polyline vertices</param>
            If <paramref name="resultPolyline"/> is empty, the first control point and 
            its associated parameter are always added.</param>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.CommonExtensions">
            <summary>
            Extension methods supporting non-geometry types
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach(System.Collections.IEnumerable,System.Action{System.Object})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Int32})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence with the index of each item.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.EnsureListCount``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Ensure the count of list to given count.  Create default(T) or remove items when necessary.
            If Input IList is a List, AddRange or RemoveRange is used.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.EnsureListCount``1(System.Collections.Generic.IList{``0},System.Int32,System.Func{``0})">
            <summary>
            Ensure the count of list to given count.  Create with given fatory or remove items when necessary.
            If Input IList is a List, AddRange or RemoveRange is used when there's no factory.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a range of items to the end of a collection.
            If collection is list, List.AddRange is used.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.Last``1(System.Collections.Generic.IList{``0})">
            <summary>
            Get the last item of given list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.RemoveLast``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove the last item from the given list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.DeepCopy``1(``0)">
            <summary>
            Make a copy of obj and all it's public properties, including all collection properties.
            Possible perf optimization: this is used only for Transform and Geometry.
            We should develope a copier for them instead of using reflection.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.SetIfDifferent(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object)">
            <summary>
            Set the value if different.  Avoid setting local value if possible.
            return true when the value has been changed
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ClearIfSet(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Clears the dependency property when it is locally set on the given dependency object.
            Return false if the dependeny property is not locally set.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.FindVisualDesendent``1(System.Windows.DependencyObject,System.Func{``0,System.Boolean})">
            <summary>
            Find all visual desendent of given type and condition using breath first search.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Get all visual children in IEnumerable
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.DrawingPropertyMetadata">
            <summary>
            Unify the interface of PropertyMetadata in WPF and Silverlight.
            Providing the necessary notification about render, arrange or measure.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.#ctor(Microsoft.Expression.Media.DrawingPropertyMetadataOptions,System.Object)">
            <summary>
            This private Ctor should only be used by AttachCallback.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.AttachCallback(System.Object,Microsoft.Expression.Media.DrawingPropertyMetadataOptions,System.Windows.PropertyChangedCallback)">
            <summary>
            Chain InternalCallback() to attach the instance of DrawingPropertyMetadata on property callback.
            In Silverlight4-, the property metadata is thrown away after setting. Use callback to remember it.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.InternalCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Before chaining the original callback, trigger DrawingPropertyChangedEvent
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.GeometryHelper">
            <summary>
            Extension methods for Geometry related data structures (Point/Vector/Size/Rect)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Resize(System.Windows.Rect,System.Double)">
            <summary>
            Resize the rectangle to relative size while keeping center invariant.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Subtract(System.Windows.Point,System.Windows.Point)">
            <summary>
            Get the difference Vector between two Points
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Plus(System.Windows.Point,System.Windows.Point)">
            <summary>
            Memberwise plus for Point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Minus(System.Windows.Point,System.Windows.Point)">
            <summary>
            Memberwise minus for Point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.ConvertToPathGeometry(System.String)">
            <summary>
            Converts a string of mini-languages to a <see cref="T:PathGeometry"/>.
            </summary>
            <remarks>See: Path Markup Syntax(http://msdn.microsoft.com/en-us/library/cc189041(VS.95).aspx)</remarks>
            <param name="abbreviatedGeometry">The string of path mini-languages for describing geometric paths.</param>
            <returns>A <see cref="T:PathGeometry"/> converted from the the path mini-languages/></returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.FlattenFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Double)">
            <summary>
            Flattens a <see cref="T:PathFigure"/> and adds result points to given <paramref name="points"/>.
            </summary>
            <param name="figure">The input <see cref="T:PathFigure"/>.</param>
            <param name="points">The point list to which result points will append.</param>
            <param name="tolerance">A positive number specifying the maximum allowed error from result points to input path figure.  Value 0 allows algorithm to pick the tolerance automatically.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcPoint(System.Double)">
            <summary>
            Get the normalized arc in (0,0)(1,1) box.
            Zero degree is mapped to [0.5, 0] (up), and clockwise
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcPoint(System.Double,System.Windows.Rect)">
            <summary>
            Get the absolute arc point in given bound with given relative radius.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcAngle(System.Windows.Point)">
            <summary>
            Get the angle on arc relative to (0,0)(1,1) box.
            Zero degree is mapped to [0.5, 0] (up), and clockwise
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcAngle(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Get the angle on arc from given absolute point relative to bound
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeTransform(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Compute the transform that moves Rect from to Rect to.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeTransform(System.Windows.UIElement,System.Windows.UIElement)">
            <summary>
            Computes the transform from the coordinate space of one <c>UIElement</c> to another.
            </summary>
            <param name="from">The source element.</param>
            <param name="to">The destination element.</param>
            <returns>The transform between the <c>UIElement</c>s, or null if it cannot be computed.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeToAbsolutePoint(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Map relative point to absolute using the mapping from given bound to (0,0)(1,1) box.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.AbsoluteToRelativePoint(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Map absolute point to relative using the mapping from (0,0)(1,1) box to given bound.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetStretchBound(System.Windows.Rect,System.Windows.Media.Stretch,System.Windows.Size)">
            <summary>
            Compute the bound after stretch within given logical bound.
            If stretch to uniform, use given aspectRatio.
            If aspectRatio is empty, it's equivalent to Fill.
            If stretch is None, equivalent to Fill or Uniform.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Midpoint(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the mid point of given 2 points
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The mid point between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Dot(System.Windows.Vector,System.Windows.Vector)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="lhs">The first vector.</param>
            <param name="rhs">The second vector.</param>
            <returns>The dot product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Dot(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the dot product of two Points.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Distance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the distance between two points.
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The distance between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.SquaredDistance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the square of the distance between two points.
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The square of the distance between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Determinant(System.Windows.Point,System.Windows.Point)">
            <summary>
            Determinant of cross product.  Equivalent to directional area
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Normal(System.Windows.Point,System.Windows.Point)">
            <summary>
            Compute the normal direction vector of given line segments
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Perpendicular(System.Windows.Vector)">
            <summary>
            Compute perpendicular vector, 90 degrees counter-clockwise.
            Vector to right perpendicular result a vector to up.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GeometryEquals(System.Windows.Media.Geometry,System.Windows.Media.Geometry)">
            <summary>
            Returns whether the two geometries are identical.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureGeometryType``1(``0@,System.Windows.Media.Geometry@,System.Func{``0})">
            <summary>
            Ensure the value is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureGeometryType``1(``0@,System.Collections.Generic.IList{System.Windows.Media.Geometry},System.Int32,System.Func{``0})">
            <summary>
            Ensure the list[index] is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureSegmentType``1(``0@,System.Collections.Generic.IList{System.Windows.Media.PathSegment},System.Int32,System.Func{``0})">
            <summary>
            Ensure the list[index] is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.ComputeBSpline(System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Double)">
            <summary>
            de'Boor algorithm to subdevide BSpline into poly Bezier segments.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.MathHelper">
            <summary>
            Helper class providing static properties and methods related to floating point arithmetic.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.Epsilon">
            <summary>
            The minimum distance to consider two values are same.
            Note: internal floating point in MIL/SL is float, not double.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.TwoPI">
            <summary>
            The value of angle of a full circle.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.PentagramInnerRadius">
            <summary>
            The inner radius for pentagram polygon shape, at precision of 3 digits in percentage.
            (1 - Sin36 * Sin72 / Sin54) / (Cos36) ^ 2, which is 0.47210998990512996761913067272407
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.IsVerySmall(System.Double)">
            <summary>
            Determines whether a <c>System.Double</c> value is small enough to be considered
            equivalent to zero.
            </summary>
            <param name="value"></param>
            <returns><c>true</c> if value is smaller than <c>DoubleTolerance</c>;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.EnsureRange(System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Return the value that's within the given range
            Given min/max is null means no limit.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.Hypotenuse(System.Double,System.Double)">
            <summary>
            Computes the Euclidean norm of the vector (x, y).
            </summary>
            <param name="x">The first component.</param>
            <param name="y">The second component.</param>
            <returns>The Euclidean norm of the vector (x, y).</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.DoubleFromMantissaAndExponent(System.Double,System.Int32)">
            <summary>
            Computes a real number from the mantissa and exponent.
            </summary>
            <param name="x"></param>
            <param name="exp"></param>
            <returns>The value of x * 2^exp if successful.</returns>
            <remarks>See ::ldexp in any decent C language runtime library.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.IsFiniteDouble(System.Double)">
            <summary>
            Tests a double.
            </summary>
            <param name="x">The double to test.</param>
            <returns><c>true</c> if x is not a NaN and is not equal to plus or minus infinity;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathFigureHelper">
            <summary>
            Helper class to work with PathFigure
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.FlattenFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Double,System.Boolean)">
            <summary>
            Flatten the given figure and add to the point list.
            </summary>
            <param name="tolerance">The error tolerance. Must be possitive. Can be 0, fallback to default tolerance.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.AllSegments(System.Windows.Media.PathFigure)">
            <summary>
            Iterate all segments inside given figure, and returns correct start point for each segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncPolylineFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Boolean)">
            <summary>
            Synchronize the figure to the given list of points as a single polyline segment.
            Try to keep the change minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncPolyBezierFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Boolean)">
            <summary>
            Synchronize the figure to the given list of points as a single PolyBezierSegment.
            Try to keep the change minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncEllipseFigure(System.Windows.Media.PathFigure,System.Windows.Rect,System.Windows.Media.SweepDirection,System.Boolean)">
            <summary>
            Synchronize the given figure to be a closed ellipse with 2 arc segments.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathSegmentData">
            <summary>
            A Tuple data structure for PathSegment and corresponding StartPoint.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PolylineData">
            <summary>
            Represent a polyline consist with a list of connecting points.
            A closed polygon is represented by repeating the first point at the end.
            The differences, normals, angles, and lengths are computed on Demand.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.#ctor(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Construct a polyline with two or more points.
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.Difference(System.Int32)">
            The forward difference vector of polyline.
            Points[i] + Differences[i] = Points[i+1]
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.SmoothNormal(System.Int32,System.Double,System.Double)">
            <summary>
            Compute the normal vector of given location (lerp(index, index+1, fraction).
            If the location is within range of cornerRadius, interpolate the normal direction.
            </summary>
            <param name="cornerRadius">The range of normal smoothless.  If zero, no smoothness and return the exact normal on index.</param>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.IsClosed">
            <summary>
            The polyline is closed when first and last point is repeated.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Count">
            <summary>
            The count of points in this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.TotalLength">
            <summary>
            The total arc length of this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Points">
            <summary>
            The point array of this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Lengths">
            <summary>
            The length between line segments, Points[i] to Points[i+1]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Normals">
            <summary>
            The list of normal vectors for each segment.
            Normals[i] is the normal of segment p[i] to p[i + 1].
            Normals[N-1] == Normals[N-2].
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Angles">
            <summary>
            The list of Cos(angle) between 2 line segments on point p[i]
            Note: The value is cos(angle) = Dot(u, v). It's not in degree.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.AccumulatedLength">
            <summary>
            The list of accumulated length from points[i] to points[0]
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.MarchLocation">
            <summary>
            The data structure to communicate with PathMarch algorithm.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetPoint(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Get the interpolated position of this this MarchLocation on given point list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetNormal(Microsoft.Expression.Drawing.Core.PolylineData,System.Double)">
            <summary>
            Get the interpolated normal direction of this this MarchLocation on given normal vector list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetArcLength(System.Collections.Generic.IList{System.Double})">
            <summary>
            Get the arc length of this MarchLocation to the start of the entire polyline.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Reason">
            <summary>
            The reason why this location is sampled.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Index">
            <summary>
            The index of the point on polyline point list.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Ratio">
            <summary>
            Ratio: [0, 1], which is always before / (before + after)
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Before">
            <summary>
            Arc length before stop point.  It's non-negative, and less than Length[index]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.After">
            <summary>
            Arc length after the stop point.  It's non-negative, and less than Length[index]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Remain">
            <summary>
            Remaining length within a step to hit next stop.  Positive to go forward. Negative to go backward.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PolylineHelper">
            <summary>
            Helper class to work with list of points
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineHelper.PathMarch(Microsoft.Expression.Drawing.Core.PolylineData,System.Double,System.Double,System.Func{Microsoft.Expression.Drawing.Core.MarchLocation,System.Double})">
            <summary>
            March the given polyline with given interval and output each stop through callback
            </summary>
            <param name="polyline">The polyline points to march on</param>
            <param name="startArcLength">The arc length to march before stopping at the first point.</param>
            <param name="cornerThreshold">The max angle between edges to be considered a corner vertex</param>
            <param name="stopCallback">Callback when marching algorithm stop at a point.  The callback returns the arc length for next stop.
            If the asked length is negative, march backwards. If callback returns NaN, finish marching.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineHelper.GetWrappedPolylines(System.Collections.Generic.IList{Microsoft.Expression.Drawing.Core.PolylineData},System.Double@)">
            <summary>
            Reorders the given list of polylines so that the polyline a given arclength into the list is the first.
            Polylines that preceded this line are concatenated to the end of the list, with the first polyline at the very end. 
            </summary>
            <param name="lines">A list of polylines.</param>
            <param name="startArcLength">The arclength into the entire list of polylines at which to find the start line.
            The arc length into that line is returned in this variable.</param>
            <returns>The reordered and wrapped list.</returns>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.RandomEngine">
            <summary>
            A random generator support uniform and gaussian distributions.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.RandomEngine.Gaussian">
            <summary>
            Generate a pair of independent standard normally distributed random numbers,
            zero expectation, unit variance, using polar form of the Box-Muller transformation.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.#ctor">
            <summary>
            Private constructor. Force to use factory methods.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a line segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a cubic bezier segment from quatratic curve (3 control points)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a cubic bezier segment with 4 control points.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.SimpleSegment.Points">
            <summary>
            Control points of path segment.  Length is variant.
            Line segment has 2 points, Cubic bezier has 4 points.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.TransformExtensions.TransformEquals(System.Windows.Media.Transform,System.Windows.Media.Transform)">
            <summary>
            Compares two transforms for an exact match.  Transforms with the same value but different structure(e.g. Translate(0,0) and Rotate(0) are not considered equivalent).
            </summary>
            <param name="firstTransform">The first transform.</param>
            <param name="secondTransform">The second transform.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Expression.Media.UnitType">
            <summary>
            Specifies the unit of thickness.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.UnitType.Pixel">
            <summary>
            Unit in pixels.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.UnitType.Percent">
            <summary>
            Unit in percentage relative to bounding box.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometrySource`1">
            <summary>
            Provides the base class of a source of geometry.
            It generate and cache the geometry based on input parameters and layout bounds.
            </summary>
            <remarks>
            A typical implementation will extend the UpdateCachedGeometry() to update this.cachedGeometry.
            This base class will then handle the invalidation, pipeline to geometry effects and caching realtive to layout bounds.
            An implementation should try to reuse the cached geometry as much as possible to avoid reconstruction in rendering thread.
            An implementation can extend the ComputeLogicalBounds to handle Stretch differently.
            </remarks>
            <typeparam name="TParameters">The type of geometry source parameter on which the base class is working on.</typeparam>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySource">
            <summary>
            Provides an interface to describe the source of a geometry.
            </summary>
            <remarks>
            This interface is designed to expose geometry source in a non-generic way.
            Typical implementation should subclass GeometrySource&lt;&gt; instead of implementing this interface directly.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.IGeometrySource.InvalidateGeometry">
            <summary>
            Notify the geometry is invalidated because of external changes.
            </summary>
            <remarks>
            Typically geometry is invalidated when parameters are changed.
            If any geometry has been invalidated externally, geometry will be recomputed regardless bounds' change.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.IGeometrySource.UpdateGeometry(Microsoft.Expression.Media.IGeometrySourceParameters,System.Windows.Rect)">
            <summary>
            Update the geometry using given parameter and layout bounds.
            Returns false if nothing has been updated.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.Geometry">
            <summary>
            Gets or sets the result geometry after the latest UpdateGeometry()
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.LogicalBounds">
            <summary>
            Gets the bounding box where geometry should stretch to.
            The actual geometry might be smaller or larger than this.
            <see cref="P:Microsoft.Expression.Media.IGeometrySource.LogicalBounds"/> should already take stroke thickness and stretch into consideration.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.LayoutBounds">
            <summary>
            Gets the actuall bound of FrameworkElement.
            <see cref="P:Microsoft.Expression.Media.IGeometrySource.LayoutBounds"/> includes logical bounds, stretch and stroke thickness.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometrySource`1.cachedGeometry">
            <summary>
            Specifics the geometry from the previous geometry effect process.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.InvalidateGeometry">
            <summary>
            Notify the geometry is invalidated because of external changes.
            </summary>
            <remarks>
            Typically geometry is invalidated when parameters are changed.
            If any geometry has been invalidated externally, geometry will be recomputed regardless bounds' change.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.UpdateGeometry(Microsoft.Expression.Media.IGeometrySourceParameters,System.Windows.Rect)">
            <summary>
            Update the geometry based on given parameters and layoutBounds.
            Returns false if geometry hasn't been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.UpdateCachedGeometry(`0)">
            <summary>
            Extend the way to provide geometry by implementing this function.
            Return true when any of the geometry is changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Extend the way to handle stretch mode.
            Default is to always use Stretch.Fill and center stroke.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.ApplyGeometryEffect(Microsoft.Expression.Media.IGeometrySourceParameters,System.Boolean)">
            <summary>
            Apply geometry effect when dirty or forced, update this.Geometry.
            Otherwise, keep this.Geometry as this.cachedGeometry.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.Geometry">
            <summary>
            Gets or sets the result geometry after the latest UpdateGeometry()
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.LogicalBounds">
            <summary>
            Gets the bounding box where geometry should stretch to.
            The actual geometry might be smaller or larger than this.
            <see cref="P:Microsoft.Expression.Media.GeometrySource`1.LogicalBounds"/> should already take stroke thickness and stretch into consideration.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.LayoutBounds">
            <summary>
            Gets the actuall bound of FrameworkElement.
            <see cref="P:Microsoft.Expression.Media.GeometrySource`1.LayoutBounds"/> includes logical bounds, stretch and stroke thickness.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Expression.Media.ArcGeometrySource.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Arc think Stretch.None is same as Stretch.Fill, assuming aspect ratio = 1:1
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.ArcGeometrySource.NormalizeThickness(Microsoft.Expression.Media.IArcGeometrySourceParameters)">
            <summary>
            Normalize thickness, both relative to bounding box and absolute pixel.
            realtive thickness = 0 -> full circle radius or clamped.
            realtive thickness = 1 -> shrinked to a dot, or degenerated.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.ArrowOrientation">
            <summary>
            Specifies the direction the arrow points.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Left">
            <summary>
            The arrow points to left.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Right">
            <summary>
            The arrow points to right.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Up">
            <summary>
            The arrow points up.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Down">
            <summary>
            The arrow points down.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.BlockArrowGeometrySource.ArrowBuilder">
            <summary>
                 B
                /|
               / C--D
              A     |
               \ C--D
                \|
                 B
            Algorithm only use Width/Height assuming top-left at 0,0
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.CalloutStyle">
            <summary>
            Specifies the rendering style of a Callout shape
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Rectangle">
            <summary>
            A rectangle shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.RoundedRectangle">
            <summary>
            A rounded rectangle shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Oval">
            <summary>
            A oval shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Cloud">
            <summary>
            A cloud shaped callout.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateEdge(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double,System.Boolean)">
            <summary>
            Update the edge line, and connect to anchor point if necessary
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdatePolylineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Update polyline segment, connecting start, anchor and end point with Callout style
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateLineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point)">
            <summary>
            Update the line segment to given point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.ComputeCorners(System.Double)">
            <summary>
            Compute the corner points, clockwise, 8 points for 4 corners
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateCornerArc(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point)">
            <summary>
            Corner Arc is always smaller arc with 90 degree
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometryEffect">
            <summary>
            Provides the base class of GeometryEffect that transform a geometry into another geometry.
            </summary>
            <remarks>
            This class provides the basic implementation of processing the rendered geometry of a IShape before it's passed to rendering.
            A typical implementation will extend the virtual function <see cref="F:ProcessGeometry"/> to transform input geometry.
            <see cref="T:GeometryEffect"/> is typically attached to <see cref="T:IShape"/> as an attached property and activated when <see cref="T:IShape"/> geometry is updated.
            The <see cref="P:OutputGeometry"/> of a <see cref="T:GeometryEffect"/> will replace the rendered geometry in <see cref="T:IShape"/>
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.GetGeometryEffect(System.Windows.DependencyObject)">
            <summary>
            Gets the geometry effect as attached property on given dependency object.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.SetGeometryEffect(System.Windows.DependencyObject,Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Sets the geometry effect as attached property on given dependency object.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.CloneCurrentValue">
            <summary>
            Creates a modifiable clone (deep copy) of the <see cref="T:GeometryEffect"/> using its current values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.DeepCopy">
            <summary>
            Makes a deep copy of the geometry effect. Implements CloneCurrentValue in Silverlight.
            </summary>
            <returns>A clone of current instance of geometry effect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Equals(Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Tests if given geometry effect is equivalent to the current instance.
            </summary>
            <param name="geometryEffect">a geometry effect compare with.</param>
            <returns>Returns true when two effects renders a same appearance.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometryEffect.cachedGeometry">
            <summary>
            Specifics the geometry from the previous geometry effect process.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.InvalidateGeometry">
            <summary>
            Invalidate the geometry effect without actually compute the geometry.
            It will notify all parent shapes or effects to invalidate accordingly.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.ProcessGeometry(System.Windows.Media.Geometry)">
            <summary>
            Process geometry effect on given input geometry.
            Result is stored in GeometryEffect.OutputGeometry.
            </summary>
            <returns>Return false if nothing has been changed.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.UpdateCachedGeometry(System.Windows.Media.Geometry)">
            <summary>
            Extend the way of updating cachedGeometry based on given input geometry.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Detach">
            <summary>
            Notified when detached from parent chain.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Attach(System.Windows.DependencyObject)">
            <summary>
            Notified when attached to a parent chain.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.InvalidateParent(System.Windows.DependencyObject)">
            <summary>
            Invalidate the geometry on given dependency object when
            the object is a valid parent type (IShape or GeometryEffect).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.CreateInstanceCore">
            <summary>
            Implement the Freezable in WPF.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.DefaultGeometryEffect">
            <summary>
            The default geometry effect that does nothing but passing through the input geometry.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.OutputGeometry">
            <summary>
            Gets the output geometry of this geometry effect.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.Parent">
            <summary>
            Parent can be either IShape or GeometryEffectGroup.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometryEffectConverter">
            <summary>
            Provides the conversion between string and geometry effect
            </summary>
            <remarks>
            This class enables the brief sytax in xaml like <code>GeometryEffect="Sketch"</code>
            It will create a clone of instance of geometry effect so it can be used as resources.
            </remarks>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometryEffectConverter.registeredEffects">
            <summary>
            Build a preset list of supported geometry effects.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            A GeometryEffect can be converted from string type.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            A GeometryEffect can be converted to string type.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts a string to a geometry effect.  Fallback value is null.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a geometry effect into a string.  Fallback value is null.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySourceExtensions">
            <summary>
            Provides helper extension methods to work with IGeometrySource and parameters.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.ArrowType">
            <summary>
            Specifies the Arrow head type.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.NoArrow">
            <summary>
            No arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.Arrow">
            <summary>
            A triagle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.StealthArrow">
            <summary>
            A stealth triangle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.OpenArrow">
            <summary>
            An open triangle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.OvalArrow">
            <summary>
            An oval head.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.CornerType">
            <summary>
            Specifies the corner location.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.TopLeft">
            <summary>
            On top left of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.TopRight">
            <summary>
            On top right of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.BottomRight">
            <summary>
            On bottom right of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.BottomLeft">
            <summary>
            On bottom left of bounding box.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.PolygonGeometrySource.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Polygon think Stretch.None is same as Stretch.Fill
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.SketchGeometryEffect">
            <summary>
            A geometry effect to transform any geometry into a Sketch style as in SketchFlow.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.DeepCopy">
            <summary>
            Makes a deep copy of the geometry effect
            </summary>
            <returns>A clone of current instance of geometry effect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.Equals(Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Tests if given geometry effect is equivalent to the current instance.
            </summary>
            <param name="geometryEffect">a geometry effect compare with.</param>
            <returns>Returns true when two effects renders a same appearance.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.UpdateCachedGeometry(System.Windows.Media.Geometry)">
            <summary>
            Updating cachedGeometry based on given input geometry.
            </summary>
            <param name="input">A input geometry</param>
            <returns>Returns true when anything on cachedGeometry has been updated.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.SketchGeometryEffect.randomSeed">
            <summary>
            Use the same random seed on creation to keep visual flickering minimum
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.GetEffectiveSegments(System.Windows.Media.PathFigure)">
            <summary>
            Iterates all simple segments in given path figure including the closing chord.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Shapes.Arc">
            <summary>
            Renderes an Arc shape supporting Arc, Ring and Pie mode controled by ArcThickness.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Shapes.PrimitiveShape">
            <summary>
            Platform neutral implementation of Shape deriving from WPF:Shape or SL:Path
            </summary>
            <summary>
            Provides WPF implementation of Shap who derives from platform Shape.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.CreateGeometrySource">
            <summary>
            Extend how the shape is drawn with creating geometry source
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.MeasureOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.</summary>
            <returns>The size that this object determines it needs during layout, based on its calculations of child object allotted sizes, or possibly on other considerations such as fixed container size.</returns>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity" />) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <remarks>
            In WPF, measure override works from Shape.DefiningGeometry which is not always as expected
            see bug 99497 for details where WPF is not having correct measure by default.
            
            In Silverlight, measure override on Path does not work the same as primitive shape works.
            
            We should return the smallest size this shape can correctly render without clipping.
            By default a shape can render as small as a dot, therefore returning the strokethickness.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Shapes.PrimitiveShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Shapes.PrimitiveShape.GeometryMargin">
            <summary>
            Gets or sets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Shapes.PrimitiveShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.PrimitiveShape.RenderedGeometry">
            <summary>
            Gets a value that represents the final rendered <see cref="T:System.Windows.Media.Geometry"/> of a <see cref="T:System.Windows.Shapes.Shape"/>.
            </summary>
            <returns>The final rendered <see cref="T:System.Windows.Media.Geometry"/> of a <see cref="T:System.Windows.Shapes.Shape"/>.</returns>
            <remarks>The WPF primitive shape hides base class RenderedGeometry to provide a local storage and matches Silverlight primitive shape interface.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.StartAngle">
            <summary>
            Gets or sets the start angle.
            </summary>
            <value>The start angle in degrees. 0 degree is pointing up.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.EndAngle">
            <summary>
            Gets or sets the end angle.
            </summary>
            <value>The end angle in degree. 0 degree is pointing up.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.ArcThickness">
            <summary>
            Gets or sets the arc thickness.
            </summary>
            <value>The arc thickness in pixels or percentage depending on "ArcThicnessUnit"/>.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.ArcThicknessUnit">
            <summary>
            Gets or sets the arc thickness unit.
            </summary>
            <value>The arc thickness unit, either pixel or percentage.</value>
        </member>
        <member name="T:Microsoft.Expression.Shapes.BlockArrow">
            <summary>
            Renders a block arrow shape supporting resizable arrow head and body.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>The orientation where the arrow is pointing to.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.ArrowheadAngle">
            <summary>
            Gets or sets the arrowhead angle.
            </summary>
            <value>The arrowhead angle in degrees.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.ArrowBodySize">
            <summary>
            Gets or sets the size of the arrow body.
            </summary>
            <value>The size of the arrow body in pixels.</value>
        </member>
        <member name="T:Microsoft.Expression.Shapes.RegularPolygon">
            <summary>
            Renders a regular polygon shape or corresponding star shape with variable number of points.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.RegularPolygon.PointCount">
            <summary>
            Gets or sets the number of points of the <see cref="T:Microsoft.Expression.Shapes.RegularPolygon"/>
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.RegularPolygon.InnerRadius">
            <summary>
            Gets or sets the the distance between the center and the innermost point.
            </summary>
            <value>The distance between the center and the innermost point.</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Toolkit\Mar10\Bin\System.Windows.Controls.Toolkit.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Controls.Toolkit</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Controls.InteractionHelper">
            <summary>
            The InteractionHelper provides controls with support for all of the
            common interactions like mouse movement, mouse clicks, key presses,
            etc., and also incorporates proper event semantics when the control is
            disabled.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper.SequentialClickThresholdInMilliseconds">
            <summary>
            The threshold used to determine whether two clicks are temporally
            local and considered a double click (or triple, quadruple, etc.).
            500 milliseconds is the default double click value on Windows.
            This value would ideally be pulled form the system settings.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper.SequentialClickThresholdInPixelsSquared">
            <summary>
            The threshold used to determine whether two clicks are spatially
            local and considered a double click (or triple, quadruple, etc.)
            in pixels squared.  We use pixels squared so that we can compare to
            the distance delta without taking a square root.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper._updateVisualState">
            <summary>
            Reference used to call UpdateVisualState on the base class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.#ctor(System.Windows.Controls.Control)">
            <summary>
            Initializes a new instance of the InteractionHelper class.
            </summary>
            <param name="control">Control receiving interaction.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
            <remarks>
            UpdateVisualState works differently than the rest of the injected
            functionality.  Most of the other events are overridden by the
            calling class which calls Allow, does what it wants, and then calls
            Base.  UpdateVisualState is the opposite because a number of the
            methods in InteractionHelper need to trigger it in the calling
            class.  We do this using the IUpdateVisualState internal interface.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.UpdateVisualStateBase(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the control's Loaded event.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle changes to the control's IsEnabled property.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnIsReadOnlyChanged(System.Boolean)">
            <summary>
            Handles changes to the control's IsReadOnly property.
            </summary>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnApplyTemplateBase">
            <summary>
            Update the visual state of the control when its template is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's GotFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnGotFocusBase">
            <summary>
            Base implementation of the virtual GotFocus event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's LostFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnLostFocusBase">
            <summary>
            Base implementation of the virtual LostFocus event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseEnter event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseEnterBase">
            <summary>
            Base implementation of the virtual MouseEnter event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseLeave event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeaveBase">
            <summary>
            Base implementation of the virtual MouseLeave event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeftButtonDownBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonDown event
            handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeftButtonUpBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonUp event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.GetLogicalKey(System.Windows.FlowDirection,System.Windows.Input.Key)">
            <summary>
            Translates keys for proper RightToLeft mode support.
            </summary>
            <param name="flowDirection">Control's flow direction mode.</param>
            <param name="originalKey">Original key.</param>
            <returns>
            A translated key code, indicating how the original key should be interpreted.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.Control">
            <summary>
            Gets the control the InteractionHelper is targeting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsFocused">
            <summary>
            Gets a value indicating whether the control has focus.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsMouseOver">
            <summary>
            Gets a value indicating whether the mouse is over the control.
            </summary> 
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsReadOnly">
            <summary>
            Gets a value indicating whether the read-only property is set.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsPressed">
            <summary>
            Gets a value indicating whether the mouse button is pressed down
            over the control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.LastClickTime">
            <summary>
            Gets or sets the last time the control was clicked.
            </summary>
            <remarks>
            The value is stored as Utc time because it is slightly more
            performant than converting to local time.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.LastClickPosition">
            <summary>
            Gets or sets the mouse position of the last click.
            </summary>
            <remarks>The value is relative to the control.</remarks>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.ClickCount">
            <summary>
            Gets the number of times the control was clicked.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.IUpdateVisualState">
            <summary>
            The IUpdateVisualState interface is used to provide the
            InteractionHelper with access to the type's UpdateVisualState method.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.IUpdateVisualState.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="T:System.Windows.Controls.BusyIndicator">
            <summary>
            A control to provide a visual indicator when an application is busy.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.BusyIndicator._displayAfterTimer">
            <summary>
            Timer used to delay the initial display and avoid flickering.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.BusyIndicator.#ctor">
            <summary>
            Instantiates a new instance of the BusyIndicator control.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.BusyIndicator.OnApplyTemplate">
            <summary>
            Overrides the OnApplyTemplate method.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.BusyIndicator.DisplayAfterTimerElapsed(System.Object,System.EventArgs)">
            <summary>
            Handler for the DisplayAfterTimer.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.BusyIndicator.ChangeVisualState(System.Boolean)">
            <summary>
            Changes the control's visual state(s).
            </summary>
            <param name="useTransitions">True if state transitions should be used.</param>
        </member>
        <member name="F:System.Windows.Controls.BusyIndicator.IsBusyProperty">
            <summary>
            Identifies the IsBusy dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.BusyIndicator.OnIsBusyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsBusyProperty property changed handler.
            </summary>
            <param name="d">BusyIndicator that changed its IsBusy.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.BusyIndicator.OnIsBusyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsBusyProperty property changed handler.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.BusyIndicator.BusyContentProperty">
            <summary>
            Identifies the BusyContent dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.BusyIndicator.BusyContentTemplateProperty">
            <summary>
            Identifies the BusyTemplate dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.BusyIndicator.DisplayAfterProperty">
            <summary>
            Identifies the DisplayAfter dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.BusyIndicator.OverlayStyleProperty">
            <summary>
            Identifies the OverlayStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.BusyIndicator.ProgressBarStyleProperty">
            <summary>
            Identifies the ProgressBarStyle dependency property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.BusyIndicator.IsContentVisible">
            <summary>
            Gets or sets a value indicating whether the BusyContent is visible.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.BusyIndicator.IsBusy">
            <summary>
            Gets or sets a value indicating whether the busy indicator should show.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.BusyIndicator.BusyContent">
            <summary>
            Gets or sets a value indicating the busy content to display to the user.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.BusyIndicator.BusyContentTemplate">
            <summary>
            Gets or sets a value indicating the template to use for displaying the busy content to the user.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.BusyIndicator.DisplayAfter">
            <summary>
            Gets or sets a value indicating how long to delay before displaying the busy content.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.BusyIndicator.OverlayStyle">
            <summary>
            Gets or sets a value indicating the style to use for the overlay.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.BusyIndicator.ProgressBarStyle">
            <summary>
            Gets or sets a value indicating the style to use for the progress bar.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.EnumerableExtensions">
            <summary>
            A set of extension methods for the sequence class.
            </summary>;dsf
        </member>
        <member name="M:System.Windows.Controls.EnumerableExtensions.Iterate``1(``0,System.Func{``0,``0})">
            <summary>
            Produces a sequence of items using a seed value and iteration 
            method.
            </summary>
            <typeparam name="T">The type of the sequence.</typeparam>
            <param name="value">The initial value.</param>
            <param name="next">The iteration function.</param>
            <returns>A sequence of items using a seed value and iteration 
            method.</returns>
        </member>
        <member name="M:System.Windows.Controls.EnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Prepend an item to a sequence.
            </summary>
            <typeparam name="T">The type of the sequence.</typeparam>
            <param name="that">The sequence to append the item to.</param>
            <param name="value">The item to append to the sequence.</param>
            <returns>A new sequence.</returns>
        </member>
        <member name="M:System.Windows.Controls.EnumerableExtensions.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Accepts two sequences and applies a function to the corresponding 
            values in the two sequences.
            </summary>
            <typeparam name="T0">The type of the first sequence.</typeparam>
            <typeparam name="T1">The type of the second sequence.</typeparam>
            <typeparam name="R">The return type of the function.</typeparam>
            <param name="enumerable0">The first sequence.</param>
            <param name="enumerable1">The second sequence.</param>
            <param name="func">The function to apply to the corresponding values
            from the two sequences.</param>
            <returns>A sequence of transformed values from both sequences.</returns>
        </member>
        <member name="M:System.Windows.Controls.EnumerableExtensions.MaxOrNull``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.IComparable})">
            <summary>
            Returns the maximum value in the stream based on the result of a
            project function.
            </summary>
            <typeparam name="T">The stream type.</typeparam>
            <param name="that">The stream.</param>
            <param name="projectionFunction">The function that transforms the
            item.</param>
            <returns>The maximum value or null.</returns>
        </member>
        <member name="M:System.Windows.Controls.EnumerableExtensions.MaxOrNullable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the maximum value or null if sequence is empty.
            </summary>
            <typeparam name="T">The type of the sequence.</typeparam>
            <param name="that">The sequence to retrieve the maximum value from.
            </param>
            <returns>The maximum value or null.</returns>
        </member>
        <member name="M:System.Windows.Controls.EnumerableExtensions.MinOrNullable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the minimum value or null if sequence is empty.
            </summary>
            <typeparam name="T">The type of the sequence.</typeparam>
            <param name="that">The sequence to retrieve the minimum value from.
            </param>
            <returns>The minimum value or null.</returns>
        </member>
        <member name="T:System.Windows.LengthConverter">
            <summary>
            Converts instances of other types to and from instances of a double that
            represent an object measurement such as a height or width.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.LengthConverter.UnitToPixelConversions">
            <summary>
            Conversions from units to pixels.
            </summary>
        </member>
        <member name="M:System.Windows.LengthConverter.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.LengthConverter" /> class.
            </summary>
        </member>
        <member name="M:System.Windows.LengthConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether conversion is possible from a specified type to a
            <see cref="T:System.Double" /> that represents an object
            measurement.
            </summary>
            <param name="typeDescriptorContext">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type" /> that represents the type you want to
            convert from.
            </param>
            <returns>
            True if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Windows.LengthConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to values of the
            <see cref="T:System.Double" /> type.
            </summary>
            <param name="typeDescriptorContext">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
            that provides a format context.
            </param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo" /> to use as the
            current culture.
            </param>
            <param name="source">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Windows.LengthConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert a measurement to the
            specified type.
            </summary>
            <param name="typeDescriptorContext">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
            that provides a format context.
            </param>
            <param name="destinationType">
            A <see cref="T:System.Type" /> that represents the type you want to
            convert to.
            </param>
            <returns>
            True if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Windows.LengthConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified measurement to the specified type.
            </summary>
            <param name="typeDescriptorContext">
            An object that provides a format context.
            </param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo" /> to use as the
            current culture.
            </param>
            <param name="value">The value to convert.</param>
            <param name="destinationType">
            A <see cref="T:System.Type" /> that represents the type you want to
            convert to.
            </param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:System.Windows.Controls.NumericExtensions">
            <summary>
            Numeric utility methods used by controls.  These methods are similar in
            scope to the WPF DoubleUtil class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericExtensions.IsZero(System.Double)">
            <summary>
            Check if a number is zero.
            </summary>
            <param name="value">The number to check.</param>
            <returns>True if the number is zero, false otherwise.</returns>
        </member>
        <member name="M:System.Windows.Controls.NumericExtensions.IsNaN(System.Double)">
            <summary>
            Check if a number isn't really a number.
            </summary>
            <param name="value">The number to check.</param>
            <returns>
            True if the number is not a number, false if it is a number.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.NumericExtensions.IsGreaterThan(System.Double,System.Double)">
            <summary>
            Determine if one number is greater than another.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is greater than the second, false
            otherwise.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.NumericExtensions.IsLessThanOrClose(System.Double,System.Double)">
            <summary>
            Determine if one number is less than or close to another.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is less than or close to the second, false
            otherwise.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.NumericExtensions.AreClose(System.Double,System.Double)">
            <summary>
            Determine if two numbers are close in value.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is close in value to the second, false
            otherwise.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.NumericExtensions.NanUnion">
            <summary>
            NanUnion is a C++ style type union used for efficiently converting
            a double into an unsigned long, whose bits can be easily
            manipulated.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericExtensions.NanUnion.FloatingValue">
            <summary>
            Floating point representation of the union.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericExtensions.NanUnion.IntegerValue">
            <summary>
            Integer representation of the union.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.TypeConverters">
            <summary>
            Common TypeConverter functionality.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.CanConvertFrom``1(System.Type)">
            <summary>
            Returns a value indicating whether this converter can convert an
            object of the given type to an instance of the expected type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="sourceType">
            The type of the source that is being evaluated for conversion.
            </param>
            <returns>
            A value indicating whether the converter can convert the provided
            type.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.ConvertFrom``1(System.ComponentModel.TypeConverter,System.Object)">
            <summary>
            Attempts to convert a specified object to an instance of the
            expected type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="converter">TypeConverter instance.</param>
            <param name="value">The object being converted.</param>
            <returns>
            The instance of the expected type created from the converted object.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.CanConvertTo``1(System.Type)">
            <summary>
            Determines whether conversion is possible to a specified type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="destinationType">
            Identifies the data type to evaluate for conversion.
            </param>
            <returns>
            A value indicating whether conversion is possible.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.ConvertTo(System.ComponentModel.TypeConverter,System.Object,System.Type)">
            <summary>
            Attempts to convert a specified object to an instance of the
            desired type.
            </summary>
            <param name="converter">TypeConverter instance.</param>
            <param name="value">The object being converted.</param>
            <param name="destinationType">
            The type to convert the value to.
            </param>
            <returns>
            The value of the conversion to the specified type.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.VisualStates">
            <summary>
            Names and helpers for visual states in the controls.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupCommon">
            <summary>
            Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateNormal">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateReadOnly">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateMouseOver">
            <summary>
            MouseOver state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePressed">
            <summary>
            Pressed state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDisabled">
            <summary>
            Disabled state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupFocus">
            <summary>
            Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnfocused">
            <summary>
            Unfocused state of the Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateFocused">
            <summary>
            Focused state of the Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupSelection">
            <summary>
            Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateSelected">
            <summary>
            Selected state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnselected">
            <summary>
            Unselected state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateSelectedInactive">
            <summary>
            Selected inactive state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupExpansion">
            <summary>
            Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpanded">
            <summary>
            Expanded state of the Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCollapsed">
            <summary>
            Collapsed state of the Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupPopup">
            <summary>
            Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePopupOpened">
            <summary>
            Opened state of the Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePopupClosed">
            <summary>
            Closed state of the Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupValidation">
            <summary>
            ValidationStates state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateValid">
            <summary>
            The valid state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInvalidFocused">
            <summary>
            Invalid, focused state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInvalidUnfocused">
            <summary>
            Invalid, unfocused state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupExpandDirection">
            <summary>
            ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandDown">
            <summary>
            Down expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandUp">
            <summary>
            Up expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandLeft">
            <summary>
            Left expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandRight">
            <summary>
            Right expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupHasItems">
            <summary>
            HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateHasItems">
            <summary>
            HasItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateNoItems">
            <summary>
            NoItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupIncrease">
            <summary>
            Increment state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateIncreaseEnabled">
            <summary>
            State enabled for increment group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateIncreaseDisabled">
            <summary>
            State disabled for increment group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupDecrease">
            <summary>
            Decrement state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDecreaseEnabled">
            <summary>
            State enabled for decrement group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDecreaseDisabled">
            <summary>
            State disabled for decrement group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupInteractionMode">
            <summary>
            InteractionMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateEdit">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDisplay">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupLocked">
            <summary>
            DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateLocked">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnlocked">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateActive">
            <summary>
            Active state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInactive">
            <summary>
            Inactive state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupActive">
            <summary>
            Active state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnwatermarked">
            <summary>
            Non-watermarked state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateWatermarked">
            <summary>
            Watermarked state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupWatermark">
            <summary>
            Watermark state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCalendarButtonUnfocused">
            <summary>
            Unfocused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCalendarButtonFocused">
            <summary>
            Focused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupCalendarButtonFocus">
            <summary>
            CalendarButtons Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateBusy">
            <summary>
            Busy state for BusyIndicator.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateIdle">
            <summary>
            Idle state for BusyIndicator.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupBusyStatus">
            <summary>
            Busyness group name.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateVisible">
            <summary>
            Visible state name for BusyIndicator.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateHidden">
            <summary>
            Hidden state name for BusyIndicator.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupVisibility">
            <summary>
            BusyDisplay group.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.GoToState(System.Windows.Controls.Control,System.Boolean,System.String[])">
            <summary>
            Use VisualStateManager to change the visual state of the control.
            </summary>
            <param name="control">
            Control whose visual state is being changed.
            </param>
            <param name="useTransitions">
            A value indicating whether to use transitions when updating the
            visual state, or to snap directly to the new visual state.
            </param>
            <param name="stateNames">
            Ordered list of state names and fallback states to transition into.
            Only the first state to be found will be used.
            </param>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.GetImplementationRoot(System.Windows.DependencyObject)">
            <summary>
            Gets the implementation root of the Control.
            </summary>
            <param name="dependencyObject">The DependencyObject.</param>
            <remarks>
            Implements Silverlight's corresponding internal property on Control.
            </remarks>
            <returns>Returns the implementation root or null.</returns>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.TryGetVisualStateGroup(System.Windows.DependencyObject,System.String)">
            <summary>
            This method tries to get the named VisualStateGroup for the 
            dependency object. The provided object's ImplementationRoot will be 
            looked up in this call.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="groupName">The visual state group's name.</param>
            <returns>Returns null or the VisualStateGroup object.</returns>
        </member>
        <member name="T:System.Windows.Controls.Primitives.VisualTreeExtensions">
            <summary>
            Provides useful extensions for working with the visual tree.
            </summary>
            <remarks>
            Since many of these extension methods are declared on types like
            DependencyObject high up in the class hierarchy, we've placed them in
            the Primitives namespace which is less likely to be imported for normal
            scenarios.
            </remarks>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.GetVisualAncestors(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree ancestors of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree ancestors of the element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.GetVisualAncestorsAndSelf(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree ancestors of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree ancestors of an element and the element itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.GetVisualAncestorsAndSelfIterator(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree ancestors of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree ancestors of an element and the element itself.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree children of an element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.GetVisualChildrenAndSelf(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree children of an element and the element itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.GetVisualChildrenAndSelfIterator(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree children of an element and the element itself.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.GetVisualDescendants(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree descendants of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree descendants of an element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.GetVisualDescendantsAndSelf(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree descendants of an element and the element
            itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree descendants of an element and the element itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.GetVisualDescendantsAndSelfIterator(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree descendants of an element and the element
            itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree descendants of an element and the element itself.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.GetVisualSiblings(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree siblings of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree siblings of an element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.GetVisualSiblingsAndSelf(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree siblings of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree siblings of an element and the element itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.GetBoundsRelativeTo(System.Windows.FrameworkElement,System.Windows.UIElement)">
            <summary>
            Get the bounds of an element relative to another element.
            </summary>
            <param name="element">The element.</param>
            <param name="otherElement">
            The element relative to the other element.
            </param>
            <returns>
            The bounds of the element relative to another element, or null if
            the elements are not related.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="otherElement"/> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.InvokeOnLayoutUpdated(System.Windows.FrameworkElement,System.Action)">
            <summary>
            Perform an action when the element's LayoutUpdated event fires.
            </summary>
            <param name="element">The element.</param>
            <param name="action">The action to perform.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action"/> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.GetLogicalChildren(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical children of a framework element using a 
            breadth-first search. For performance reasons this method manually 
            manages the stack instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.GetLogicalDescendents(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical descendents of a framework element using a 
            breadth-first search. For performance reasons this method manually 
            manages the stack instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
        <member name="T:System.Windows.Controls.DockPanel">
            <summary>
            Arranges child elements around the edges of the panel.  Optionally, 
            last added child element can occupy the remaining space.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DockPanel._ignorePropertyChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DockPanel.LastChildFillProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.DockPanel.LastChildFill" />
            dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DockPanel.OnLastChildFillPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            LastChildFillProperty property changed handler.
            </summary>
            <param name="d">DockPanel that changed its LastChildFill.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DockPanel.GetDock(System.Windows.UIElement)">
            <summary>
            Gets the value of the
            <see cref="P:System.Windows.Controls.DockPanel.Dock" /> attached
            property for the specified element.
            </summary>
            <param name="element">
            The element from which the property value is read.
            </param>
            <returns>
            The <see cref="P:System.Windows.Controls.DockPanel.Dock" /> property
            value for the element.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DockPanel.SetDock(System.Windows.UIElement,System.Windows.Controls.Dock)">
            <summary>
            Sets the value of the
            <see cref="P:System.Windows.Controls.DockPanel.Dock" /> attached
            property for the specified element to the specified dock value.
            </summary>
            <param name="element">
            The element to which the attached property is assigned.
            </param>
            <param name="dock">
            The dock value to assign to the specified element.
            </param>
        </member>
        <member name="F:System.Windows.Controls.DockPanel.DockProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.DockPanel.Dock" />
            attached property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DockPanel.OnDockPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DockProperty property changed handler.
            </summary>
            <param name="d">UIElement that changed its Dock.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DockPanel.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.DockPanel" /> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DockPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the child elements of a
            <see cref="T:System.Windows.Controls.DockPanel" /> in preparation
            for arranging them during the
            <see cref="M:System.Windows.Controls.DockPanel.ArrangeOverride(System.Windows.Size)" />
            pass.
            </summary>
            <param name="constraint">
            The area available to the
            <see cref="T:System.Windows.Controls.DockPanel" />.
            </param>
            <returns>
            The desired size of the
            <see cref="T:System.Windows.Controls.DockPanel" />.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DockPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the child elements of the
            <see cref="T:System.Windows.Controls.DockPanel" /> control.
            </summary>
            <param name="arrangeSize">
            The area in the parent element that the
            <see cref="T:System.Windows.Controls.DockPanel" /> should use to
            arrange its child elements.
            </param>
            <returns>
            The actual size of the
            <see cref="T:System.Windows.Controls.DockPanel" /> after the child
            elements are arranged. The actual size should always equal
            <paramref name="arrangeSize" />.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.DockPanel.LastChildFill">
            <summary>
            Gets or sets a value indicating whether the last child element
            added to a <see cref="T:System.Windows.Controls.DockPanel" />
            resizes to fill the remaining space.
            </summary>
            <value>
            True if the last element added resizes to fill the remaining space,
            false to indicate the last element does not resize. The default is
            true.
            </value>
        </member>
        <member name="T:System.AnonymousDisposable">
            <summary>
            A class that facilitates the creation of anonymous IDisposable objects.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:System.AnonymousDisposable._dispose">
            <summary>
            The action to execute when the Dispose method is called.
            </summary>
        </member>
        <member name="M:System.AnonymousDisposable.#ctor(System.Action)">
            <summary>
            Creates a new instance of the GenericDispose class.
            </summary>
            <param name="dispose">The action to execute when the Dispose method
            is called.</param>
        </member>
        <member name="M:System.AnonymousDisposable.Dispose">
            <summary>
            Executes the dispose action.
            </summary>
        </member>
        <member name="T:System.Linq.AnonymousObservable`1">
            <summary>
            A class that facilitates the creation of anonymous IObservable objects.
            </summary>
            <typeparam name="T">The type of the items in the sequence.</typeparam>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:System.Linq.AnonymousObservable`1._subscribe">
            <summary>
            The function to invoke when the subscribe method is called.
            </summary>
        </member>
        <member name="M:System.Linq.AnonymousObservable`1.#ctor(System.Func{System.IObserver{`0},System.IDisposable})">
            <summary>
            Initializes a new instance of the AnonymousObservable class.
            </summary>
            <param name="subscribe">The method to invoke when the subscribe 
            method is called.</param>
        </member>
        <member name="M:System.Linq.AnonymousObservable`1.Subscribe(System.IObserver{`0})">
            <summary>
            This method ensures that an observer is subscribing to the 
            information in the observable.
            </summary>
            <param name="observer">The observer that is subscribing to the 
            information in the observable.</param>
            <returns>An disposable object used to unsubscribe from the 
            observable.</returns>
        </member>
        <member name="T:System.Windows.Controls.CollectionHelper">
            <summary>
            A set of extension methods for manipulating collections.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.CollectionHelper.IsReadOnly(System.Collections.IEnumerable)">
            <summary>
            Returns a value indicating whether a collection is read-only.
            </summary>
            <param name="collection">The collection to examine.</param>
            <returns>A value indicating whether a collection is read-only.</returns>
        </member>
        <member name="M:System.Windows.Controls.CollectionHelper.CanInsert(System.Collections.IEnumerable,System.Object)">
            <summary>
            Returns a value Indicating whether an item can be inserted in a 
            collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="item">The item to be inserted.</param>
            <returns>A value Indicating whether an item can be inserted in a 
            collection.</returns>
        </member>
        <member name="M:System.Windows.Controls.CollectionHelper.Insert(System.Collections.IEnumerable,System.Int32,System.Object)">
            <summary>
            Inserts an item into the collection at an index.
            </summary>
            <param name="collection">The collection.</param>
            <param name="index">The index at which to insert the item.</param> 
            <param name="item">The item to be inserted.</param>
        </member>
        <member name="M:System.Windows.Controls.CollectionHelper.Count(System.Collections.IEnumerable)">
            <summary>
            Gets the number of items in the collection.
            </summary>
            <param name="collection">The collection.</param>
            <returns>The number of items in the collection.</returns>
        </member>
        <member name="M:System.Windows.Controls.CollectionHelper.Add(System.Collections.IEnumerable,System.Object)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:System.Windows.Controls.CollectionHelper.Remove(System.Collections.IEnumerable,System.Object)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="item">The item to be removed.</param>
        </member>
        <member name="M:System.Windows.Controls.CollectionHelper.RemoveAt(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Removes an item at a given index from the collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="index">The index of the item to be removed.</param>
        </member>
        <member name="T:System.Windows.Controls.CardPanel">
            <summary>
            Lays out elements by overlapping each successive item on top of the other.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.CardPanel.HorizontalMarginProperty">
            <summary>
            Identifies the HorizontalMargin dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CardPanel.OnHorizontalMarginPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the HorizontalMargin property changes.
            </summary>
            <param name="d">Control that changed its HorizontalMargin.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.CardPanel.OnHorizontalMarginPropertyChanged(System.Double,System.Double)">
            <summary>
            Called when the value of the HorizontalMargin property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.CardPanel.VerticalMarginProperty">
            <summary>
            Identifies the VerticalMargin dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CardPanel.OnVerticalMarginPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the VerticalMargin property changes.
            </summary>
            <param name="d">Control that changed its VerticalMargin.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.CardPanel.OnVerticalMarginPropertyChanged(System.Double,System.Double)">
            <summary>
            Called when the value of the VerticalMargin property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.CardPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the children of the panel.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The size required by the children.</returns>
        </member>
        <member name="M:System.Windows.Controls.CardPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the children of the panel.
            </summary>
            <param name="finalSize">The final size.</param>
            <returns>The size required by the children.</returns>
        </member>
        <member name="P:System.Windows.Controls.CardPanel.HorizontalMargin">
            <summary>
            Gets or sets the horizontal margin between items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.CardPanel.VerticalMargin">
            <summary>
            Gets or sets the horizontal margin between items.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.DataObject">
            <summary>
            Provides a basic implementation of the System.Windows.IDataObject interface,
            which defines a format-independent mechanism for transferring data.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="T:Microsoft.Windows.IDataObject">
            <summary>
            Provides a format-independent mechanism for transferring data.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:Microsoft.Windows.IDataObject.GetData(System.String)">
            <summary>
            Retrieves a data object in a specified format; the data format is specified
            by a string.
            </summary>
            <param name="format">A string that specifies what format to retrieve
            the data as.</param>
            <returns>A data object with the data in the specified format, or null if the data
            is not available in the specified format.</returns>
        </member>
        <member name="M:Microsoft.Windows.IDataObject.GetData(System.Type)">
            <summary>
            Retrieves a data object in a specified format; the data format is specified
            by a System.Type object.
            </summary>
            <param name="format">A System.Type object that specifies what format
            to retrieve the data as.</param>
            <returns>A data object with the data in the specified format, or null if the data
            is not available in the specified format.</returns>
        </member>
        <member name="M:Microsoft.Windows.IDataObject.GetData(System.String,System.Boolean)">
            <summary>
            Retrieves a data object in a specified format, optionally converting the data to the specified format.
            </summary>
            <param name="format">A string that specifies what format to retrieve
            the data as. See the System.Windows.DataFormats class for a set of predefined data formats.</param>
            <param name="autoConvert">True to attempt to automatically convert the data to the specified format;
            false for no data format conversion.    If this parameter is false, the method
            returns data in the specified format if available, or null if the data is
            not available in the specified format.</param>
            <returns>A data object with the data in the specified format, or null if the data is not available in the specified format.</returns>
        </member>
        <member name="M:Microsoft.Windows.IDataObject.GetDataPresent(System.String)">
            <summary>
            Checks to see whether the data is available in, or can be converted 
            to, a specified format; the data format is specified by a string.
            </summary>
            <param name="format">A string that specifies what format to check for.</param>
            <returns>True if the data is in, or can be converted to, the specified format; otherwise,
            false.</returns>
        </member>
        <member name="M:Microsoft.Windows.IDataObject.GetDataPresent(System.Type)">
            <summary>
            Checks to see whether the data is available in, or can be converted 
            to, a specified format. The data format is specified by a 
            System.Type object.
            </summary>
            <param name="format">A System.Type that specifies what format to 
            check for. See the System.Windows.DataFormats class for a set of 
            predefined data formats.</param>
            <returns>True if the data is in, or can be converted to, the 
            specified format; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Windows.IDataObject.GetDataPresent(System.String,System.Boolean)">
            <summary>
            Determines whether the data is available in, or can be converted to, a format
            specified by a System.Type object.
            </summary>
            <param name="format">A System.Type that specifies the format for the data.</param>
            <param name="autoConvert">True to attempt to automatically convert 
            the data to the specified format; false for no data format conversion.</param>
            <returns>An object that contains the data in the specified format, 
            or null if the data is unavailable in the specified format.</returns>
        </member>
        <member name="M:Microsoft.Windows.IDataObject.GetFormats">
            <summary>
            Returns a list of formats in which the data in this data object is stored,
            or can be converted to.
            </summary>
            <returns>An array of strings, with each string specifying the name of a format that
            this data object supports.</returns>
        </member>
        <member name="M:Microsoft.Windows.IDataObject.GetFormats(System.Boolean)">
            <summary>
            Returns a list of formats in which the data in this data object is stored.
            A flag indicates whether to also include formats that the data can
            be automatically converted to.
            </summary>
            <param name="autoConvert">True to attempt to automatically convert 
            the data to the specified format; false for no data format conversion.</param>
            <returns>An array of strings, with each string specifying the name of a format that
            this data object supports.</returns>
        </member>
        <member name="M:Microsoft.Windows.IDataObject.SetData(System.Object)">
            <summary>
            Stores the specified data in this data object, automatically determining
            the data format from the source object type.
            </summary>
            <param name="data">An object that represents the data to store in this data object.</param>
        </member>
        <member name="M:Microsoft.Windows.IDataObject.SetData(System.String,System.Object)">
            <summary>
            Stores the specified data in this data object, automatically determining
            the data format from the source object type.
            </summary>
            <param name="format">A string that specifies the format for the data.</param>
            <param name="data">An object that represents the data to store in this data object.</param>
        </member>
        <member name="M:Microsoft.Windows.IDataObject.SetData(System.Type,System.Object)">
            <summary>
            Stores the specified data in this data object, automatically determining
            the data format from the source object type.
            </summary>
            <param name="format">A System.Type that specifies the format for the data.</param>
            <param name="data">An object that represents the data to store in this data object.</param>
        </member>
        <member name="M:Microsoft.Windows.IDataObject.SetData(System.String,System.Object,System.Boolean)">
            <summary>
            Stores the specified data in this data object, automatically determining
            the data format from the source object type.
            </summary>
            <param name="format">A string that specifies the format for the data.</param>
            <param name="data">An object that represents the data to store in this data object.</param>
            <param name="autoConvert">True to attempt to automatically convert 
            the data to the specified format; false for no data format conversion.</param>
        </member>
        <member name="M:Microsoft.Windows.DataObject.#ctor">
            <summary>
            Initializes a new instance of the DataObject class.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.DataObject.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the DataObject class.
            </summary>
            <param name="data">An object that represents the data to store in this data object.</param>
        </member>
        <member name="M:Microsoft.Windows.DataObject.GetData(System.String)">
            <summary>
            Returns data in a format specified by a string.
            </summary>
            <param name="format">A string that specifies the format for the 
            data.</param>
            <returns>An object that contains the data in the specified format, 
            or null if the data is unavailable in the specified format.</returns>
        </member>
        <member name="M:Microsoft.Windows.DataObject.GetData(System.Type)">
            <summary>
            Returns a data object in a format specified by a System.Type object.
            </summary>
            <param name="format">A System.Type that specifies the format for the data.</param>
            <returns>A data object with the data in the specified format, or null if the data
            is unavailable in the specified format.</returns>
        </member>
        <member name="M:Microsoft.Windows.DataObject.GetData(System.String,System.Boolean)">
            <summary>
            Returns data in a format specified by a string.
            </summary>
            <param name="format">A string that specifies the format for the 
            data.</param>
            <param name="autoConvert">True to attempt to automatically convert 
            the data to the specified format; false for no data format conversion.</param>
            <returns>An object that contains the data in the specified format, 
            or null if the data is unavailable in the specified format.</returns>
        </member>
        <member name="M:Microsoft.Windows.DataObject.GetDataPresent(System.String)">
            <summary>
            Determines whether the data is available in, or can be converted to, a format
            specified by a string.
            </summary>
            <param name="format">A string that specifies the format for the data.</param>
            <returns>True if the data is in, or can be converted to, the specified format; otherwise,
            false.</returns>
        </member>
        <member name="M:Microsoft.Windows.DataObject.GetDataPresent(System.Type)">
            <summary>
            Determines whether the data is available in, or can be converted to, a format
            specified by a System.Type object.
            </summary>
            <param name="format">A System.Type that specifies the format for the data.</param>
            <returns>True if the data is in, or can be converted to, the specified format; otherwise,
            false.</returns>
        </member>
        <member name="M:Microsoft.Windows.DataObject.GetDataPresent(System.String,System.Boolean)">
            <summary>
            Determines whether the data is available in, or can be converted to, a format
            specified by a System.Type object.
            </summary>
            <param name="format">A System.Type that specifies the format for the data.</param>
            <param name="autoConvert">True to attempt to automatically convert 
            the data to the specified format; false for no data format conversion.</param>
            <returns>An object that contains the data in the specified format, 
            or null if the data is unavailable in the specified format.</returns>
        </member>
        <member name="M:Microsoft.Windows.DataObject.GetFormats">
            <summary>
            Returns a list of formats in which the data in this data object is stored,
            or can be converted to.
            </summary>
            <returns>An array of strings, with each string specifying the name of a format that
            this data object supports.</returns>
        </member>
        <member name="M:Microsoft.Windows.DataObject.GetFormats(System.Boolean)">
            <summary>
            Returns a list of formats in which the data in this data object is stored.
            A Boolean flag indicates whether to also include formats that the data can
            be automatically converted to.
            </summary>
            <param name="autoConvert">True to attempt to automatically convert 
            the data to the specified format; false for no data format conversion.</param>
            <returns>An array of strings, with each string specifying the name of a format that
            this data object supports.</returns>
        </member>
        <member name="M:Microsoft.Windows.DataObject.SetData(System.Object)">
            <summary>
            Stores the specified data in this data object, automatically determining
            the data format from the source object type.
            </summary>
            <param name="data">An object that represents the data to store in this data object.</param>
        </member>
        <member name="M:Microsoft.Windows.DataObject.SetData(System.String,System.Object)">
            <summary>
            Stores the specified data in this data object, automatically determining
            the data format from the source object type.
            </summary>
            <param name="format">A string that specifies the format for the data.</param>
            <param name="data">An object that represents the data to store in this data object.</param>
        </member>
        <member name="M:Microsoft.Windows.DataObject.SetData(System.Type,System.Object)">
            <summary>
            Stores the specified data in this data object, automatically determining
            the data format from the source object type.
            </summary>
            <param name="format">A System.Type that specifies the format for the data.</param>
            <param name="data">An object that represents the data to store in this data object.</param>
        </member>
        <member name="M:Microsoft.Windows.DataObject.SetData(System.String,System.Object,System.Boolean)">
            <summary>
            Stores the specified data in this data object, automatically determining
            the data format from the source object type.
            </summary>
            <param name="format">A string that specifies the format for the data.</param>
            <param name="data">An object that represents the data to store in this data object.</param>
            <param name="autoConvert">True to attempt to automatically convert 
            the data to the specified format; false for no data format conversion.</param>
        </member>
        <member name="P:Microsoft.Windows.DataObject.Data">
            <summary>
            Gets or sets the data.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.DependencyObjectExtensions">
            <summary>
            A set of extension methods for DependencyObjects.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:Microsoft.Windows.DependencyObjectExtensions.RaiseRoutedEvent``1(System.Windows.DependencyObject,``0,System.Action{System.Windows.DependencyObject,``0})">
            <summary>
            Raises a routed event by executing an operation on an element and
            all of its ancestors.
            </summary>
            <typeparam name="T">The type of the event arguments.</typeparam>
            <param name="that">The element to raise the event on.</param>
            <param name="eventArgs">Information about the event.</param>
            <param name="action">An action that raises the event on a given
            element.</param>
            <returns>The event args after the event has been raised.</returns>
        </member>
        <member name="M:Microsoft.Windows.DependencyObjectExtensions.OnDragEnter(System.Windows.DependencyObject,Microsoft.Windows.DragEventArgs)">
            <summary>
            Raises the attached DragEnter event on a element.
            </summary>
            <param name="element">The element to raise the event on.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:Microsoft.Windows.DependencyObjectExtensions.OnDragOver(System.Windows.DependencyObject,Microsoft.Windows.DragEventArgs)">
            <summary>
            Raises the attached DragOver event on a element.
            </summary>
            <param name="element">The element to raise the event on.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:Microsoft.Windows.DependencyObjectExtensions.OnDragLeave(System.Windows.DependencyObject,Microsoft.Windows.DragEventArgs)">
            <summary>
            Raises the attached DragLeave event on a element.
            </summary>
            <param name="element">The element to raise the event on.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:Microsoft.Windows.DependencyObjectExtensions.OnDrop(System.Windows.DependencyObject,Microsoft.Windows.DragEventArgs)">
            <summary>
            Raises the attached Drop event on a element.
            </summary>
            <param name="element">The element to raise the event on.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:Microsoft.Windows.DependencyObjectExtensions.OnGiveFeedback(System.Windows.DependencyObject,Microsoft.Windows.GiveFeedbackEventArgs)">
            <summary>
            Raises the attached GiveFeedback event on a element.
            </summary>
            <param name="element">The element to raise the event on.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:Microsoft.Windows.DependencyObjectExtensions.OnQueryContinueDrag(System.Windows.DependencyObject,Microsoft.Windows.QueryContinueDragEventArgs)">
            <summary>
            Raises the attached QueryContinueDrag event on a element.
            </summary>
            <param name="element">The element to raise the event on.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="T:Microsoft.Windows.DragAction">
            <summary>
            Specifies how and if a drag-and-drop operation should continue.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:Microsoft.Windows.DragAction.Continue">
            <summary>
            The operation will continue.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragAction.Drop">
            <summary>
            The operation will stop with a drop.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragAction.Cancel">
            <summary>
            The operation is canceled with no drop message.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DragDecorator">
            <summary>
            A content control that visually indicates what actions are available
            during a drag operation.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DragDecorator.IconPositionProperty">
            <summary>
            Identifies the icon position dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DragDecorator.EffectsProperty">
            <summary>
            Identifies the Effects dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DragDecorator.OnEffectsPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            EffectsProperty property changed handler.
            </summary>
            <param name="d">DragContainer that changed its Effects.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DragDecorator.OnEffectsPropertyChanged">
            <summary>
            Changes the appearance of the DragDecorator when the effects 
            property is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DragDecorator.Update">
            <summary>
            Updates the visual state of the DragContainer.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DragDecorator.#ctor">
            <summary>
            Initializes a new instance of the DragDecorator.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DragDecorator.IconPosition">
            <summary>
            Gets or sets the icon position.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DragDecorator.Effects">
            <summary>
            Gets or sets the drag drop effects.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.DragDrop">
            <summary>
            Provides helper methods and fields for initiating drag-and-drop operations,
            including a method to begin a drag-and-drop operation, and facilities for
            adding and removing drag-and-drop related event handlers.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:Microsoft.Windows.DragDrop.DragEnterEvent">
            <summary>
            Identifies the System.Windows.DragDrop.DragEnter attached event.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragDrop.DragLeaveEvent">
            <summary>
            Identifies the System.Windows.UIElement.DragLeave attached event.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragDrop.DragOverEvent">
            <summary>
            Identifies the System.Windows.UIElement.DragOver attached event.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragDrop.DropEvent">
            <summary>
            Identifies the System.Windows.UIElement.Drop attached event.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragDrop.GiveFeedbackEvent">
            <summary>
            Identifies the System.Windows.UIElement.GiveFeedback attached event.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragDrop.QueryContinueDragEvent">
            <summary>
            Identifies the System.Windows.UIElement.QueryContinueDrag attached event.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragDrop._dragOperationInProgress">
            <summary>
            The drag operation in progress.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.OnDragCompleted(System.Windows.DragDropCompletedEventArgs)">
            <summary>
            Raises the DragCompleted event.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.GetDragCompleted">
            <summary>
            Returns an observable that wraps the DragCompleted event.
            </summary>
            <returns>An observable that wraps the DragCompleted event.</returns>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.RemoveDragEnterHandler(System.Windows.DependencyObject,Microsoft.Windows.DragEventHandler)">
            <summary>
            Removes a handler from the attached DragEnter event.
            </summary>
            <param name="element">The DependencyObject to attach an event handler for.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.AddDragEnterHandler(System.Windows.DependencyObject,Microsoft.Windows.DragEventHandler,System.Boolean)">
            <summary>
            Adds a handler to the attached DragEnter event.
            </summary>
            <param name="element">The DependencyObject to attach an event handler for.</param>
            <param name="handler">The event handler.</param>
            <param name="handledEventsToo">A value Indicating whether to invoke the handler if the event is handled.</param>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.AddDragEnterHandler(System.Windows.DependencyObject,Microsoft.Windows.DragEventHandler)">
            <summary>
            Adds a handler to the attached DragEnter event.
            </summary>
            <param name="element">The DependencyObject to attach an event handler for.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.GetDragEnterHandlers(System.Windows.DependencyObject)">
            <summary>
            Gets the drag enter handler.
            </summary>
            <param name="element">The element to attach the event handler to.</param>
            <returns>The event handler.</returns>
        </member>
        <member name="F:Microsoft.Windows.DragDrop.DragEnterHandlerProperty">
            <summary>
            Identifies the DragEnterHandler dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.RemoveDragOverHandler(System.Windows.DependencyObject,Microsoft.Windows.DragEventHandler)">
            <summary>
            Removes a handler from the attached DragOver event.
            </summary>
            <param name="element">The DependencyObject to attach an event handler for.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.AddDragOverHandler(System.Windows.DependencyObject,Microsoft.Windows.DragEventHandler,System.Boolean)">
            <summary>
            Adds a handler to the attached DragOver event.
            </summary>
            <param name="element">The DependencyObject to attach an event handler for.</param>
            <param name="handler">The event handler.</param>
            <param name="handledEventsToo">A value Indicating whether to invoke the handler if the event is handled.</param>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.AddDragOverHandler(System.Windows.DependencyObject,Microsoft.Windows.DragEventHandler)">
            <summary>
            Adds a handler to the attached DragOver event.
            </summary>
            <param name="element">The DependencyObject to attach an event handler for.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.GetDragOverHandlers(System.Windows.DependencyObject)">
            <summary>
            Gets the drag Over handler.
            </summary>
            <param name="element">The element to attach the event handler to.</param>
            <returns>The event handler.</returns>
        </member>
        <member name="F:Microsoft.Windows.DragDrop.DragOverHandlerProperty">
            <summary>
            Identifies the DragOverHandler dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.RemoveDragLeaveHandler(System.Windows.DependencyObject,Microsoft.Windows.DragEventHandler)">
            <summary>
            Removes a handler from the attached DragLeave event.
            </summary>
            <param name="element">The DependencyObject to attach an event handler for.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.AddDragLeaveHandler(System.Windows.DependencyObject,Microsoft.Windows.DragEventHandler,System.Boolean)">
            <summary>
            Adds a handler to the attached DragLeave event.
            </summary>
            <param name="element">The DependencyObject to attach an event handler for.</param>
            <param name="handler">The event handler.</param>
            <param name="handledEventsToo">A value Indicating whether to invoke the handler if the event is handled.</param>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.AddDragLeaveHandler(System.Windows.DependencyObject,Microsoft.Windows.DragEventHandler)">
            <summary>
            Adds a handler to the attached DragLeave event.
            </summary>
            <param name="element">The DependencyObject to attach an event handler for.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.GetDragLeaveHandlers(System.Windows.DependencyObject)">
            <summary>
            Gets the drag Leave handler.
            </summary>
            <param name="element">The element to attach the event handler to.</param>
            <returns>The event handler.</returns>
        </member>
        <member name="F:Microsoft.Windows.DragDrop.DragLeaveHandlerProperty">
            <summary>
            Identifies the DragLeaveHandler dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.RemoveDropHandler(System.Windows.DependencyObject,Microsoft.Windows.DragEventHandler)">
            <summary>
            Removes a handler from the attached Drop event.
            </summary>
            <param name="element">The DependencyObject to attach an event handler for.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.AddDropHandler(System.Windows.DependencyObject,Microsoft.Windows.DragEventHandler,System.Boolean)">
            <summary>
            Adds a handler to the attached Drop event.
            </summary>
            <param name="element">The DependencyObject to attach an event handler for.</param>
            <param name="handler">The event handler.</param>
            <param name="handledEventsToo">A value Indicating whether to invoke the handler if the event is handled.</param>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.AddDropHandler(System.Windows.DependencyObject,Microsoft.Windows.DragEventHandler)">
            <summary>
            Adds a handler to the attached Drop event.
            </summary>
            <param name="element">The DependencyObject to attach an event handler for.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.GetDropHandlers(System.Windows.DependencyObject)">
            <summary>
            Gets the drag Leave handler.
            </summary>
            <param name="element">The element to attach the event handler to.</param>
            <returns>The event handler.</returns>
        </member>
        <member name="F:Microsoft.Windows.DragDrop.DropHandlerProperty">
            <summary>
            Identifies the DropHandler dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.RemoveGiveFeedbackHandler(System.Windows.DependencyObject,Microsoft.Windows.GiveFeedbackEventHandler)">
            <summary>
            Removes a handler from the attached GiveFeedback event.
            </summary>
            <param name="element">The DependencyObject to attach an event handler for.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.AddGiveFeedbackHandler(System.Windows.DependencyObject,Microsoft.Windows.GiveFeedbackEventHandler,System.Boolean)">
            <summary>
            Adds a handler to the attached GiveFeedback event.
            </summary>
            <param name="element">The DependencyObject to attach an event handler for.</param>
            <param name="handler">The event handler.</param>
            <param name="handledEventsToo">A value Indicating whether to invoke the 
            handler if the event has been handled.</param>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.AddGiveFeedbackHandler(System.Windows.DependencyObject,Microsoft.Windows.GiveFeedbackEventHandler)">
            <summary>
            Adds a handler to the attached GiveFeedback event.
            </summary>
            <param name="element">The DependencyObject to attach an event handler for.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.GetGiveFeedbackHandlers(System.Windows.DependencyObject)">
            <summary>
            Gets the GiveFeedback Leave handler.
            </summary>
            <param name="element">The element to attach the event handler to.</param>
            <returns>The event handler.</returns>
        </member>
        <member name="F:Microsoft.Windows.DragDrop.GiveFeedbackHandlerProperty">
            <summary>
            Identifies the GiveFeedbackHandler dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.RemoveQueryContinueDragHandler(System.Windows.DependencyObject,Microsoft.Windows.QueryContinueDragEventHandler)">
            <summary>
            Removes a handler from the attached QueryContinueDrag event.
            </summary>
            <param name="element">The DependencyObject to attach an event handler for.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.AddQueryContinueDragHandler(System.Windows.DependencyObject,Microsoft.Windows.QueryContinueDragEventHandler,System.Boolean)">
            <summary>
            Adds a handler to the attached QueryContinueDrag event.
            </summary>
            <param name="element">The DependencyObject to attach an event handler for.</param>
            <param name="handler">The event handler.</param>
            <param name="handledEventsToo">A value Indicating whether to invoke the 
            handler if the event has been handled.</param>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.AddQueryContinueDragHandler(System.Windows.DependencyObject,Microsoft.Windows.QueryContinueDragEventHandler)">
            <summary>
            Adds a handler to the attached QueryContinueDrag event.
            </summary>
            <param name="element">The DependencyObject to attach an event handler for.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.GetQueryContinueDragHandlers(System.Windows.DependencyObject)">
            <summary>
            Gets the QueryContinueDrag Leave handler.
            </summary>
            <param name="element">The element to attach the event handler to.</param>
            <returns>The event handler.</returns>
        </member>
        <member name="F:Microsoft.Windows.DragDrop.QueryContinueDragHandlerProperty">
            <summary>
            Identifies the QueryContinueDragHandler dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.DragDrop.DoDragDrop(System.Windows.DependencyObject,System.Object,Microsoft.Windows.DragDropEffects,Microsoft.Windows.DragDropKeyStates)">
            <summary>
            Initiates a drag-and-drop operation.
            </summary>
            <param name="dragSource">A reference to the dependency object that is the source of the data being
            dragged.</param>
            <param name="data">A data object that contains the data being dragged.</param>
            <param name="allowedEffects">One of the System.Windows.DragDropEffects values that specifies permitted
            effects of the drag-and-drop operation.</param>
            <param name="initialKeyState">The initial key state when the drag operation begins.</param>
        </member>
        <member name="P:Microsoft.Windows.DragDrop.IsDragInProgress">
            <summary>
            Gets a value indicating whether a drag is in progress.
            </summary>
        </member>
        <member name="E:Microsoft.Windows.DragDrop.DragDropCompleted">
            <summary>
            An event that is raised when a drag operation is completed.
            </summary>
        </member>
        <member name="T:System.Windows.DragDropCompletedEventArgs">
            <summary>
            Information about the SW.DragDropCompleted event.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.DragDropCompletedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the DragCompletedEventArgs class.
            </summary>
        </member>
        <member name="P:System.Windows.DragDropCompletedEventArgs.Effects">
            <summary>
            Gets the effect of the drag operation.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.DragDropEffects">
            <summary>
            Specifies the effects of a drag-and-drop operation.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:Microsoft.Windows.DragDropEffects.Scroll">
            <summary>
            Scrolling is about to start or is currently occurring in the drop target.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragDropEffects.All">
            <summary>
            The data is copied, removed from the drag source, and scrolled in the drop
            target.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragDropEffects.None">
            <summary>
            The drop target does not accept the data.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragDropEffects.Copy">
            <summary>
            The data is copied to the drop target.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragDropEffects.Move">
            <summary>
            The data from the drag source is moved to the drop target.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragDropEffects.Link">
            <summary>
            The data from the drag source is linked to the drop target.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.DragDropKeyStates">
            <summary>
            Specifies the current state of the modifier keys (SHIFT, CTRL, and ALT),
            as well as the state of the mouse buttons.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:Microsoft.Windows.DragDropKeyStates.None">
            <summary>
            No modifier keys or mouse buttons are pressed.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragDropKeyStates.LeftMouseButton">
            <summary>
            The left mouse button is pressed.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragDropKeyStates.RightMouseButton">
            <summary>
            The right mouse button is pressed.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragDropKeyStates.ShiftKey">
            <summary>
            The shift (SHIFT) key is pressed.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragDropKeyStates.ControlKey">
            <summary>
            The control (CTRL) key is pressed.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragDropKeyStates.MiddleMouseButton">
            <summary>
            The middle mouse button is pressed.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragDropKeyStates.AltKey">
            <summary>
            The ALT key is pressed.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DragDropTarget`2">
            <summary>
            A control that enabled drag and drop operations on an ItemsControl.
            </summary>
            <typeparam name="TItemsControlType">The type of the items control.</typeparam>
            <typeparam name="TItemContainerType">The type of the item container.</typeparam>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="T:Microsoft.Windows.IAcceptDrop">
            <summary>
            An object that can handle routed drag and drop events.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:Microsoft.Windows.IAcceptDrop.OnDragEnter(Microsoft.Windows.DragEventArgs)">
            <summary>
            Initiates a DragEnter event.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:Microsoft.Windows.IAcceptDrop.OnDragOver(Microsoft.Windows.DragEventArgs)">
            <summary>
            Initiates a DragOver event.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:Microsoft.Windows.IAcceptDrop.OnDragLeave(Microsoft.Windows.DragEventArgs)">
            <summary>
            Initiates a DragLeave event.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:Microsoft.Windows.IAcceptDrop.OnDrop(Microsoft.Windows.DragEventArgs)">
            <summary>
            Initiates a Drop event.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:Microsoft.Windows.IAcceptDrop.OnGiveFeedback(Microsoft.Windows.GiveFeedbackEventArgs)">
            <summary>
            Initiates a GiveFeedback event.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:Microsoft.Windows.IAcceptDrop.OnQueryContinueDrag(Microsoft.Windows.QueryContinueDragEventArgs)">
            <summary>
            Initiates a QueryContinueDrag event.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2.DragPopupName">
            <summary>
            The name of the DragPopup template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2.DragContainerName">
            <summary>
            The name of the DragContainer template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2.DragDecoratorName">
            <summary>
            The name of the DragDecorator template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2.InsertionIndicatorName">
            <summary>
            The name of the insertion indicator template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2.InsertionIndicatorContainerName">
            <summary>
            The name of the insertion indicator container.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2.mouseCursorSize">
            <summary>
            The size of the mouse cursor.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2._currentItemDragEventArgs">
            <summary>
            Information about an ongoing item drag event.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2._keyStates">
            <summary>
            The state of the keys relevant to drag and drop operation.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2._lastGiveFeedbackEffects">
            <summary>
            The effects specified in the last give feed back event.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2._itemsControlChanged">
            <summary>
            An event raised when the ItemsControl is changed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2._itemDragStarted">
            <summary>
            An event raised when an item drag is started.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2._itemDragCompleted">
            <summary>
            An event raised when an item drag is completed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2._itemWasDroppedOnSource">
            <summary>
            A value indicating whether an item was dropped on the drag source.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2._dragPopup">
            <summary>
            Gets or sets the popup used to move the drag decorator with the 
            mouse.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2._dragContainer">
            <summary>
            Gets or sets the canvas used to move the drag decorator with the
            mouse.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2._dragDecorator">
            <summary>
            Gets or sets the drag decorator that moves with the mouse during a 
            drag operation.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2._insertionIndicator">
            <summary>
            Gets or sets the insertion indicator path used to indicate where an item
            will be inserted.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2._insertionIndicatorContainer">
            <summary>
            Gets or sets the insertion indicator container.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2._adjustedDropTargetInsertionIndex">
            <summary>
            A drop target insertion index that is adjusted when items are being
            moved within the source to the location of one of the selected items.  
            It is necessary to adjust the insertion index in this case because the selected items 
            are removed from the items control before being added again, and when added the
            insertion index will be null because it wont be able to be retrieved using the
            visual tree.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2.AllowedSourceEffectsProperty">
            <summary>
            Identifies the AllowedSourceEffects dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2._itemDragStarting">
            <summary>
            A list of ItemDragStarting event handlers.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.OnItemDragStarting(System.Windows.Controls.ItemDragEventArgs)">
            <summary>
            A method that raises the item drag starting event.
            </summary>
            <param name="eventArgs">Information about the drag starting event.
            </param>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2._itemDroppedOnTargetHandlers">
            <summary>
            A list of ItemDragCompleted event handlers.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.OnItemDroppedOnTarget(System.Windows.Controls.ItemDragEventArgs)">
            <summary>
            Raises the ItemDragCompleted event.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2._itemDroppedOnSource">
            <summary>
            A list of event handles for the ItemDroppedOnSource event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.OnItemDroppedOnSource(Microsoft.Windows.DragEventArgs)">
            <summary>
            Raises the ItemDroppedOnSource event.
            </summary>
            <param name="args">Information about the ItemDroppedOnSource event.
            </param>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2._IndicatingInsertionLocation">
            <summary>
            A list of IndicatingInsertionLocation handlers.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.OnIndicatingInsertionLocation(System.Windows.Controls.IndicatingInsertionLocationEventArgs{`0})">
            <summary>
            A method which raises the IndicatingInsertionLocation event.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.GetOrientation(`0)">
            <summary>
            Retrieves the orientation of the items host in the items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <returns>The orientation of the items host in the items control.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.Microsoft#Windows#IAcceptDrop#OnDragEnter(Microsoft.Windows.DragEventArgs)">
            <summary>
            Raises the DragEnter event.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.Microsoft#Windows#IAcceptDrop#OnDragOver(Microsoft.Windows.DragEventArgs)">
            <summary>
            Raises the DragOver event.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.Microsoft#Windows#IAcceptDrop#OnDragLeave(Microsoft.Windows.DragEventArgs)">
            <summary>
            Raises the DragLeave event.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.Microsoft#Windows#IAcceptDrop#OnDrop(Microsoft.Windows.DragEventArgs)">
            <summary>
            Raises the Drop event.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.Microsoft#Windows#IAcceptDrop#OnGiveFeedback(Microsoft.Windows.GiveFeedbackEventArgs)">
            <summary>
            Raises the GiveFeedback event.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.Microsoft#Windows#IAcceptDrop#OnQueryContinueDrag(Microsoft.Windows.QueryContinueDragEventArgs)">
            <summary>
            Raises the QueryContinueDrag event.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.OnDragEnter(Microsoft.Windows.DragEventArgs)">
            <summary>
            Raises the DragEnter event.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2._dragEnter">
            <summary>
            A list of event handles for the DragEnter event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.OnDragOver(Microsoft.Windows.DragEventArgs)">
            <summary>
            Raises the DragOver event.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2._dragOver">
            <summary>
            A list of event handles for the DragOver event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.OnDragLeave(Microsoft.Windows.DragEventArgs)">
            <summary>
            Raises the DragLeave event.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2._dragLeave">
            <summary>
            A list of event handles for the DragLeave event.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2._drop">
            <summary>
            A list of event handles for the Drop event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.OnDrop(Microsoft.Windows.DragEventArgs)">
            <summary>
            An method that invokes the Drop event.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.OnGiveFeedback(Microsoft.Windows.GiveFeedbackEventArgs)">
            <summary>
            Raises the GiveFeedback event.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2._giveFeedback">
            <summary>
            A list of event handles for the GiveFeedback event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.OnQueryContinueDrag(Microsoft.Windows.QueryContinueDragEventArgs)">
            <summary>
            Raises the QueryContinueDrag event.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2._queryContinueDrag">
            <summary>
            A list of event handles for the QueryContinueDrag event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.#ctor">
            <summary>
            Initializes a new instance of the ItemsControlDragAdorner class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.IsDragWithinDragSource(Microsoft.Windows.DragEventArgs)">
            <summary>
            Returns a value indicating whether an item is being dragged within
            the drag source.
            </summary>
            <param name="args">Information about the drag event.</param>
            <returns>A value indicating whether an item is being dragged within
            the drag source.</returns>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.GetDropTargetInsertionIndex(`0,Microsoft.Windows.DragEventArgs)">
            <summary>
            Gets the adjusted insertion index within a drop target given information about a drag event.
            </summary>
            <param name="dropTarget">The drop target.</param>
            <param name="args">Information about a drag event.</param>
            <returns>The insertion index within the drop target.</returns>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.GetKeyStatesChanged">
            <summary>
            Gets an event that is raised whenever the drag and drop key states
            are changed.
            </summary>
            <returns>An event that is raised whenever the drag and drop key 
            states are changed.</returns>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.GetOffset(System.Windows.Input.MouseEventArgs,System.Windows.UIElement)">
            <summary>
            Retrieves the offset of a mouse position relative to an element.
            </summary>
            <param name="args">The mouse event arguments.</param>
            <param name="source">The element to use as the origin.</param>
            <returns>The offset of a mouse position relative to an element.</returns>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.GetItemDragStarting">
            <summary>
            Returns an observable that raises whenever a drag operation begins
            on an item.
            </summary>
            <returns>An observable that raises whenever a drag operation begins
            on an item.</returns>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.GetAllowedEffects(`0)">
            <summary>
            Returns the allowed effects for an item drag operation.  Excludes
            move if an item cannot be removed from the items control.
            </summary>
            <param name="itemsControl">The items control to examine to 
            determine the allowed effects.</param>
            <returns>The allowed effects for an item drag operation.</returns>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.OnApplyTemplate">
            <summary>
            This method is invoked when the template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.OnDragging(System.Windows.Input.MouseEventArgs)">
            <summary>
            This method moves the drag decorator with the mouse when the mouse
            position changes during a drag operation.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.OnItemDragStarted(System.Windows.Controls.ItemDragEventArgs)">
            <summary>
            This method initializes graphical elements when an item drag 
            operation begins.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="F:System.Windows.Controls.DragDropTarget`2._itemDragCompletedHandlers">
            <summary>
            A list of event handles for the ItemDragCompleted event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.InternalOnItemDragCompleted(System.Windows.Controls.ItemDragEventArgs)">
            <summary>
            This method hides graphical elements when a drag operation 
            completes.  
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.OnItemDragCompleted(System.Windows.Controls.ItemDragEventArgs)">
            <summary>
            This method is invoked when an item drag is completed.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.OnDragEvent(Microsoft.Windows.DragEventArgs)">
            <summary>
            Updates the drag event information whenever a drag event occurs.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.GetSelectionCollection(System.Object)">
            <summary>
            Gets a selection collection from the data in a drag operation.
            </summary>
            <param name="data">The data being transferred by the drag
            operation.</param>
            <returns>A selection collection containing the data.</returns>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.OnDropOverride(Microsoft.Windows.DragEventArgs)">
            <summary>
            Adds data to the drop target.
            </summary>
            <param name="args">Information about the Drop event.</param>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.RemoveDataFromItemsControl(`0,System.Object)">
            <summary>
            Removes data from an ItemsControl.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="data">The data to remove from the ItemsControl.</param>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.InsertItem(`0,System.Int32,System.Object)">
            <summary>
            Inserts an item into an items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="index">The index at which to insert the item.</param>
            <param name="data">The data to be inserted.</param>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.AddItem(`0,System.Object)">
            <summary>
            Adds an item to an items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="data">The data to be inserted.</param>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.RemoveItem(`0,System.Object)">
            <summary>
            Removes an item from an items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="data">The data to be removed.</param>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.RemoveItemAtIndex(`0,System.Int32)">
            <summary>
            Removes an item from an items control by index.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="index">The index of the item to be removed.</param>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.GetItemCount(`0)">
            <summary>
            Gets the number of items in an items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <returns>The number of items in the items control.</returns>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.ContainerFromIndex(`0,System.Int32)">
            <summary>
            Retrieves the item container at a given index.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="index">The index at which to retrieve the container.
            </param>
            <returns>The item container at a given index.</returns>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.GetItemsHost(`0)">
            <summary>
            Retrieves the items host for a given items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <returns>The items host for a given items control.</returns>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.IndexFromContainer(`0,`1)">
            <summary>
            Retrieves the index of an item container.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="itemContainer">The item container.</param>
            <returns>The index of an item container.</returns>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.ItemFromContainer(`0,`1)">
            <summary>
            Gets the item from an item container.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="itemContainer">The item container.</param>
            <returns>The data contained by the item container.</returns>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.CanRemove(`0)">
            <summary>
            Returns a value indicating whether an item can be removed from the
            items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <returns>A value indicating whether an item can be removed from the
            items control.</returns>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.CanAddItem(`0,System.Object)">
            <summary>
            Returns a value indicating whether an item can be added to the
            items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="data">The data to be added.</param>
            <returns>A value indicating whether an item can be added to the
            items control.</returns>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.IsItemContainerOfItemsControl(`0,System.Windows.DependencyObject)">
            <summary>
            Returns a value indicating whether a container belongs to an items 
            control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="itemContainer">The item container.</param>
            <returns>A value indicating whether a container belongs to an items 
            control.</returns>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.GetItemsControlAncestor(System.Windows.DependencyObject)">
            <summary>
            Returns the items control ancestor of a dependency object.
            </summary>
            <param name="dependencyObject">The dependency object to retrieve the
            element for.</param>
            <returns>The items control ancestor of the dependency object.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.GetItemContainerAncestor(`0,System.Windows.DependencyObject)">
            <summary>
            Returns the item container ancestor of a dependency object.
            </summary>
            <param name="itemsControl">The items control that contains the
            item container.</param>
            <param name="dependencyObject">The dependency object.</param>
            <returns>The item container ancestor of the dependency object.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.GetInsertionIndicatorGeometry(`0,System.Int32,Microsoft.Windows.DragEventArgs)">
            <summary>
            Returns a geometry to use for the insertion indicator given 
            an item container, the orientation of the items host panel, and a 
            value indicating whether to insert before or after the item 
            container.
            </summary>
            <param name="dropTarget">The drop target.</param>
            <param name="insertionIndex">The index at which to insert the item.
            </param>
            <param name="dragEventArgs">Information about the drag event.
            </param>
            <returns>The geometry to use for the insertion indicator given 
            information about an IndicatingInsertionLocation event.</returns>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.CanScroll(`0)">
            <summary>
            Returns a value indicating whether a given items control
            can scroll.
            </summary>
            <param name="itemsControl">The items control.</param>
            <returns>The value indicating whether the given items control
            can scroll.</returns>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.ScrollIntoView(`0,`1)">
            <summary>
            Scrolls a given item container into the view.
            </summary>
            <param name="itemsControl">The items control that contains
            the item container.</param>
            <param name="itemContainer">The item container to scroll into
            view.</param>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.GetDropTarget(Microsoft.Windows.DragEventArgs)">
            <summary>
            Retrieves the drop target of a drag event.
            </summary>
            <param name="args">Information about the drag event.</param>
            <returns>The drop target of a drag event.</returns>
        </member>
        <member name="M:System.Windows.Controls.DragDropTarget`2.GetDropTargetInsertionIndexOverride(`0,Microsoft.Windows.DragEventArgs)">
            <summary>
            Gets the insertion index within a drop target given information about a drag event.
            </summary>
            <param name="dropTarget">The drop target.</param>
            <param name="args">Information about a drag event.</param>
            <returns>The insertion index within the drop target.</returns>
        </member>
        <member name="P:System.Windows.Controls.DragDropTarget`2.CurrentItemDragEventArgs">
            <summary>
            Gets information about an ongoing item drag event.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DragDropTarget`2.AllowedSourceEffects">
            <summary>
            Gets or sets the allowed effects when this DragDropTarget is the drag source.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DragDropTarget`2.ItemDragStarting">
            <summary>
            An event raised when a drag operation is starting on an item.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DragDropTarget`2.ItemDroppedOnTarget">
            <summary>
            This event is raised when an item is dropped on a target.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DragDropTarget`2.ItemDroppedOnSource">
            <summary>
            An event raised when the an item is dropped onto the adorner.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DragDropTarget`2.DragEnter">
            <summary>
            An event raised when the an item is dragged into the adorner.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DragDropTarget`2.DragOver">
            <summary>
            An event raised when the an item is dragged over the adorner.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DragDropTarget`2.DragLeave">
            <summary>
            An event raised when the an item is dragged out of the adorner.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DragDropTarget`2.Drop">
            <summary>
            An event raised when the an item is dropped onto the adorner.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DragDropTarget`2.GiveFeedback">
            <summary>
            An event raised when the feedback about the drag operations is 
            requested from the adorner.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DragDropTarget`2.QueryContinueDrag">
            <summary>
            An event raised when the adorner is queries regarding the drag 
            operation.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DragDropTarget`2.ItemDragCompleted">
            <summary>
            An event raised when the an item drag is completed.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.DragEventArgs">
            <summary>
            Contains arguments relevant to all drag-and-drop events (System.Windows.DragDrop.DragEnter,
            System.Windows.DragDrop.DragLeave, System.Windows.DragDrop.DragOver, and
            System.Windows.DragDrop.Drop).
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="T:Microsoft.Windows.ExtendedRoutedEventArgs">
            <summary>
            Contains state information and event data associated with a routed event.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:Microsoft.Windows.ExtendedRoutedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the ExtendedRoutedEventArgs class.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.ExtendedRoutedEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the present state of the 
            event handling for a routed event as it travels the route.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.ExtendedRoutedEventArgs.OriginalSource">
            <summary>
            Gets the original reporting source as determined by pure hit testing, before
            any possible System.Windows.RoutedEventArgs.Source adjustment by a parent
            class.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.DragEventArgs.#ctor">
            <summary>
            Initializes a new instance of the DragEventArgs class.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.DragEventArgs.#ctor(Microsoft.Windows.DragEventArgs)">
            <summary>
            Initializes a new instance of the DragEventArgs class.
            </summary>
            <param name="args">The DragEventArgs object to use as the base for
            this DragEventArgs.</param>
        </member>
        <member name="M:Microsoft.Windows.DragEventArgs.GetPosition(System.Windows.UIElement)">
            <summary>
            Returns a drop point that is relative to a specified System.Windows.UIElement.
            </summary>
            <param name="relativeTo">A UIElement object for which to get a relative drop point.</param>
            <returns>A drop point that is relative to the element specified in relativeTo.</returns>
        </member>
        <member name="P:Microsoft.Windows.DragEventArgs.AllowedEffects">
            <summary>
            Gets a member of the System.Windows.DragDropEffects enumeration that specifies
            which operations are allowed by the originator of the drag event.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.DragEventArgs.Data">
            <summary>
            Gets a data object that contains the data associated with the corresponding
            drag event.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.DragEventArgs.Effects">
            <summary>
            Gets or sets the target drop-and-drop operation.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.DragEventArgs.MouseEventArgs">
            <summary>
            Gets or sets the MouseEventArgs related to the DragEventArgs.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.DragEventHandler">
            <summary>
            Represents a method that will handle drag-and-drop routed events, for example
            System.Windows.UIElement.DragEnter.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="T:Microsoft.Windows.DragOperation">
            <summary>
            An asynchronous drag operation.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:Microsoft.Windows.DragOperation.MouseOverPulseIntervalInMilliseconds">
            <summary>
            The interval at which to pulse DragOver events when the mouse
            isn't moving.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragOperation._dragStartEventArgs">
            <summary>
            Information retrieved when the drag operation began.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragOperation._allowedEffects">
            <summary>
            The effects authorized by the drag source.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragOperation._lastDragEventArgs">
            <summary>
            Information about the last drag event.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragOperation._lastGiveFeedbackEventArgs">
            <summary>
            Information about the last give feedback event.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragOperation._dragStarted">
            <summary>
            An event that is raised when a drag operations is started.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragOperation._dragStarting">
            <summary>
            An event that is raised when a drag operations is starting.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragOperation._dragSourceQueryContinueDrag">
            <summary>
            An event that is raised when the drag source should be queried 
            whether to continue the drag operation.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragOperation._dragCompleted">
            <summary>
            An event that is raised when the drag operation is completed.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragOperation._dragSource">
            <summary>
            The source of the data being dragged.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragOperation._keyStates">
            <summary>
            The state of the input keys relevant to drag operations.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragOperation._currentDragOverElement">
            <summary>
            The element currently being dragged over.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.DragOperation._escapePressed">
            <summary>
            A value indicating whether the escape key is pressed.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.DragOperation.#ctor(System.Windows.DependencyObject,System.Object,Microsoft.Windows.DragDropEffects,Microsoft.Windows.DragDropKeyStates)">
            <summary>
            Initializes a new instance of the DragOperation class.
            </summary>
            <param name="dragSource">The source of the drag operation.</param>
            <param name="data">The data associated with the drag operation.
            </param>
            <param name="allowedEffects">The allowed effects of the drag 
            operation.
            </param>
            <param name="initialKeyState">The initial state of the keys relevant 
            to drag operations.</param>
        </member>
        <member name="M:Microsoft.Windows.DragOperation.Subscribe(System.IObserver{Microsoft.Windows.DragDropEffects})">
            <summary>
            This method starts the drag operation and sends the results to 
            an observer.
            </summary>
            <param name="observer">The observer listening for the result of
            the drag operation.</param>
            <returns>A disposable object used to detach from a drag operation.
            </returns>
        </member>
        <member name="M:Microsoft.Windows.DragOperation.GetDragOverOriginalSource(Microsoft.Windows.DragEventArgs)">
            <summary>
            Retrieves the original source of a new DragOver event.  Attempts to
            determine the original source by finding the the deepest element
            in the tree that the mouse is over.
            </summary>
            <param name="args">Information about the drag event.</param>
            <returns>The original source of a new DragOver event.</returns>
        </member>
        <member name="M:Microsoft.Windows.DragOperation.RaiseRoutedDragEvent(System.Windows.DependencyObject,Microsoft.Windows.DragEventArgs,System.Action{System.Windows.DependencyObject,Microsoft.Windows.DragEventArgs})">
            <summary>
            Raises a routed drag event and stores information about the drag
            event.
            </summary>
            <param name="element">An element that accepts a drop.</param>
            <param name="eventArgs">Information about the drag event.</param>
            <param name="raiseAction">An action that raises the specific drag event.
            </param>
            <returns>Information about the drag event that may have been
            modified by handlers.</returns>
        </member>
        <member name="M:Microsoft.Windows.DragOperation.RaiseDragSourceEvents(Microsoft.Windows.DragEventArgs)">
            <summary>
            Raises the GiveFeedback and QueryContinueDrag events on the drag
            source.
            </summary>
            <param name="args">Information about the last drag event.</param>
        </member>
        <member name="M:Microsoft.Windows.DragOperation.GetDragDropEffects(Microsoft.Windows.DragDropEffects)">
            <summary>
            Returns the allowed effects by analyzing the state of the keys 
            pressed.  If the control key is pressed the user is requesting a 
            copy. If copy is available the effect will be only copy, if not 
            available the effect will be None.
            </summary>
            <param name="allowedEffects">The allowed effects.</param>
            <returns>The effects of the drag operation.</returns>
        </member>
        <member name="M:Microsoft.Windows.DragOperation.OnDragSourceGiveFeedback(Microsoft.Windows.DragEventArgs)">
            <summary>
            Raises the GiveFeedback event on the drag source.
            </summary>
            <param name="args">Information about the GiveFeedback event.
            </param>
        </member>
        <member name="M:Microsoft.Windows.DragOperation.OnDragSourceQueryContinueDrag">
            <summary>
            Raises the QueryContinueDragEvent on the drag source.
            </summary>
            <returns>Information about the QueryContinueDrag event.</returns>
        </member>
        <member name="M:Microsoft.Windows.DragOperation.OnCancel">
            <summary>
            This method is invoked when the drag operation is cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.DragOperation.OnTargetDrop">
            <summary>
            This method raises the Drop event.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.DragOperation.GetMouseMoveDragOver">
            <summary>
            Gets an event raised when an item is dragged over any object in the 
            visual tree.
            </summary>
            <returns>An event raised when an item is dragged over any object in the 
            visual tree.</returns>
        </member>
        <member name="M:Microsoft.Windows.DragOperation.OnDragEnter(System.Object,Microsoft.Windows.DragEventArgs)">
            <summary>
            Raises the DragEnter event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="eventArgs">Information about the event.</param>
        </member>
        <member name="M:Microsoft.Windows.DragOperation.OnDragOver(System.Object,Microsoft.Windows.DragEventArgs)">
            <summary>
            Raises the DragOver event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="eventArgs">Information about the event.</param>
        </member>
        <member name="M:Microsoft.Windows.DragOperation.OnDragLeave">
            <summary>
            Raises the DragLeave event.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.DragOperation.IsDragging">
            <summary>
            Gets or sets a value indicating whether a drag operation is in 
            process.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.DragOperation.KeyStates">
            <summary>
            Gets or sets the state of the input keys relevant to drag 
            operations.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.ExtendedRoutedEvent">
            <summary>
            Represents and identifies a routed event and declares its characteristics.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:Microsoft.Windows.ExtendedRoutedEvent.#ctor">
            <summary>
            Creates a new instance of the ExtendedRoutedEvent class.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.ExtendedRoutedEventHandlerCollection`2">
            <summary>
            Stores a collection of routed event handlers.
            </summary>
            <typeparam name="THandler">The type of the event handler.</typeparam>
            <typeparam name="TEventArgs">The type of the event arguments.
            </typeparam>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:Microsoft.Windows.ExtendedRoutedEventHandlerCollection`2._handlers">
            <summary>
            A collection of handlers and flags indicating whether to raise 
            invoke the handler if the event has already been handled.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.ExtendedRoutedEventHandlerCollection`2.#ctor(System.Action{`0,`1})">
            <summary>
            Initializes a new instance of the ExtendedRoutedEventHandlerCollection class.
            </summary>
            <param name="raiseAction">The action invoked when the event is
            raised.</param>
        </member>
        <member name="M:Microsoft.Windows.ExtendedRoutedEventHandlerCollection`2.Add(`0)">
            <summary>
            Adds a handler to the collection.
            </summary>
            <param name="handler">The handler to add to the collection.</param>
        </member>
        <member name="M:Microsoft.Windows.ExtendedRoutedEventHandlerCollection`2.Add(`0,System.Boolean)">
            <summary>
            Adds a handler to the collection.
            </summary>
            <param name="handler">The handler to add to the collection.</param>
            <param name="handledEventsToo">A value indicating whether to invoke
            the handler if the event has been handled.</param>
        </member>
        <member name="M:Microsoft.Windows.ExtendedRoutedEventHandlerCollection`2.Remove(`0)">
            <summary>
            Removes a handler from the collection.
            </summary>
            <param name="handler">The handler to remove from the collection.
            </param>
        </member>
        <member name="M:Microsoft.Windows.ExtendedRoutedEventHandlerCollection`2.Raise(`1)">
            <summary>
            Raises the event.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="P:Microsoft.Windows.ExtendedRoutedEventHandlerCollection`2.RaiseAction">
            <summary>
            Gets an action invoked when the event is raised.
            </summary>
        </member>
        <member name="T:System.Linq.FunctionalProgramming">
            <summary>
            Collection of functions for functional programming tasks.
            </summary>
        </member>
        <member name="M:System.Linq.FunctionalProgramming.TraverseBreadthFirst``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Traverses a tree by accepting an initial value and a function that 
            retrieves the child nodes of a node.
            </summary>
            <typeparam name="T">The type of the stream.</typeparam>
            <param name="initialNode">The initial node.</param>
            <param name="getChildNodes">A function that retrieves the child
            nodes of a node.</param>
            <param name="traversePredicate">A predicate that evaluates a node
            and returns a value indicating whether that node and it's children
            should be traversed.</param>
            <returns>A stream of nodes.</returns>
        </member>
        <member name="T:Microsoft.Windows.GiveFeedbackEventArgs">
            <summary>
            Contains arguments for the System.Windows.DragDrop.GiveFeedback event.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:Microsoft.Windows.GiveFeedbackEventArgs.#ctor">
            <summary>
            Initializes a new instance of the GiveFeedbackEventArgs class.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.GiveFeedbackEventArgs.Effects">
            <summary>
            Gets a value that indicates the effects of drag-and-drop operation.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.GiveFeedbackEventHandler">
            <summary>
            Represents a method that will handle the feedback routed event from in-process
            drag-and-drop operations, for instance System.Windows.UIElement.GiveFeedback.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="T:System.Windows.IDataObjectExtensions">
            <summary>
            A collection of extension methods for the SW.IDataObject type.
            </summary>
        </member>
        <member name="M:System.Windows.IDataObjectExtensions.GetData(Microsoft.Windows.IDataObject)">
            <summary>
            Retrieves the data based using the first acceptable format.
            </summary>
            <param name="that">The data object.</param>
            <returns>The data retrieved from the data object.</returns>
        </member>
        <member name="T:System.Windows.Controls.IndicatingInsertionLocationEventArgs`1">
            <summary>
            Information about the IndicatingInsertionLocation event.
            </summary>
            <typeparam name="TItemsControlType">The type of the control that 
            contains the items that can be dragged.</typeparam>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.IndicatingInsertionLocationEventArgs`1.GetPosition(System.Windows.UIElement)">
            <summary>
            Returns a drop point that is relative to a specified System.Windows.UIElement.
            </summary>
            <param name="relativeTo">A UIElement object for which to get a relative drop point.</param>
            <returns>A drop point that is relative to the element specified in relativeTo.</returns>
        </member>
        <member name="M:System.Windows.Controls.IndicatingInsertionLocationEventArgs`1.#ctor">
            <summary>
            Initializes a new instance of the IndicationInsertionLocationEventArgs class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.IndicatingInsertionLocationEventArgs`1.DragEventArgs">
            <summary>
            Gets or sets the SW.DragEventArgs related to the event.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.IndicatingInsertionLocationEventArgs`1.DropTarget">
            <summary>
            Gets the drop target.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.IndicatingInsertionLocationEventArgs`1.InsertionIndex">
            <summary>
            Gets the insertion index.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.IndicatingInsertionLocationEventArgs`1.InsertionIndicatorGeometry">
            <summary>
            Gets or sets the geometry to use to indicate the insertion point.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ItemDragEventArgs">
            <summary>
            Information describing a drag event on a UIElement.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.ItemDragEventArgs.RemoveDataFromDragSource">
            <summary>
            This method removes the data from the drag source.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ItemDragEventArgs.#ctor">
            <summary>
            Initializes a new instance of the ItemDragEventArgs class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ItemDragEventArgs.#ctor(System.Windows.Controls.ItemDragEventArgs)">
            <summary>
            Initializes a new instance of the ItemDragEventArgs class using an
            existing instance.
            </summary>
            <param name="args">The instance to use as the template when creating
            the new instance.</param>
        </member>
        <member name="P:System.Windows.Controls.ItemDragEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether an item drag
            operation was handled.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ItemDragEventArgs.DataRemovedFromDragSource">
            <summary>
            Gets a value indicating whether removing data
            from the source is handled by the target.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ItemDragEventArgs.RemoveDataFromDragSourceAction">
            <summary>
            Gets or sets an action that removes data from the drag source.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ItemDragEventArgs.KeyStates">
            <summary>
            Gets the key states.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ItemDragEventArgs.AllowedEffects">
            <summary>
            Gets or sets the allowed effects.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ItemDragEventArgs.Effects">
            <summary>
            Gets or sets the effects of the completed drag operation.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ItemDragEventArgs.DragSource">
            <summary>
            Gets or sets the control that is the source of the drag.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ItemDragEventArgs.Data">
            <summary>
            Gets or sets the data associated with the item container being dragged.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ItemDragEventArgs.DragDecoratorContentMouseOffset">
            <summary>
            Gets or sets the mouse offset from the item being dragged at the 
            beginning of the drag operation.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ItemDragEventArgs.DragDecoratorContent">
            <summary>
            Gets or sets the content to insert into the DragDecorator.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ItemDragEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the action.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ItemsControlDragDropTarget`2">
            <summary>
            A control that enabled drag and drop operations on an TItemsControl.
            </summary>
            <QualityBand>Experimental</QualityBand>
            <typeparam name="TItemsControl">The type of the control that contains 
            the items that can be dragged.</typeparam>
            <typeparam name="TItemContainerType">The type of the item container.</typeparam>
        </member>
        <member name="F:System.Windows.Controls.ItemsControlDragDropTarget`2.ScrollItemAnimationDurationProperty">
            <summary>
            Identifies the ScrollItemIntoViewAnimationDuration dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlDragDropTarget`2.CanAddItem(`0,System.Object)">
            <summary>
            Returns a value indicating whether an item can be added to the
            items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="data">The data to be added.</param>
            <returns>A value indicating whether an item can be added to the
            items control.</returns>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlDragDropTarget`2.GetItemCount(`0)">
            <summary>
            Retrieves the number of items in an items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <returns>The number of items in the items control.</returns>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlDragDropTarget`2.ContainerFromIndex(`0,System.Int32)">
            <summary>
            Retrieves the item container at a given index.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="index">The index at which to retrieve the container.
            </param>
            <returns>The item container at a given index.</returns>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlDragDropTarget`2.IndexFromContainer(`0,`1)">
            <summary>
            Retrieves the index of an item container.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="itemContainer">The item container.</param>
            <returns>The index of an item container.</returns>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlDragDropTarget`2.GetItemsHost(`0)">
            <summary>
            Retrieves the items host for a given items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <returns>The items host for a given items control.</returns>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlDragDropTarget`2.CanRemove(`0)">
            <summary>
            Returns a value indicating whether an item can be removed from the
            items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <returns>A value indicating whether an item can be removed from the
            items control.</returns>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlDragDropTarget`2.AddItem(`0,System.Object)">
            <summary>
            Adds an item to an items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="data">The data to be inserted.</param>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlDragDropTarget`2.RemoveItem(`0,System.Object)">
            <summary>
            Removes an item from an items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="data">The data to be removed.</param>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlDragDropTarget`2.RemoveItemAtIndex(`0,System.Int32)">
            <summary>
            Removes an item from an items control by index.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="index">The index of the item to be removed.</param>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlDragDropTarget`2.InsertItem(`0,System.Int32,System.Object)">
            <summary>
            Inserts an item into an items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="index">The index at which to insert the item.</param>
            <param name="data">The data to be inserted.</param>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlDragDropTarget`2.IsItemContainerOfItemsControl(`0,System.Windows.DependencyObject)">
            <summary>
            Returns a value indicating whether a container belongs to an items 
            control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="itemContainer">The item container.</param>
            <returns>A value indicating whether a container belongs to an items 
            control.</returns>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlDragDropTarget`2.ItemFromContainer(`0,`1)">
            <summary>
            Gets the item from an item container.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="itemContainer">The item container.</param>
            <returns>The data contained by the item container.</returns>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlDragDropTarget`2.CanScroll(`0)">
            <summary>
            Returns a value indicating whether a given items control
            can scroll.
            </summary>
            <param name="itemsControl">The items control.</param>
            <returns>The value indicating whether the given items control
            can scroll.</returns>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlDragDropTarget`2.ScrollIntoView(`0,`1)">
            <summary>
            Scrolls a given item container into the view.
            </summary>
            <param name="itemsControl">The items control that contains
            the item container.</param>
            <param name="itemContainer">The item container to scroll into
            view.</param>
        </member>
        <member name="P:System.Windows.Controls.ItemsControlDragDropTarget`2.ScrollItemAnimationDuration">
            <summary>
            Gets or sets the duration to use to animate an item into view.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ListBoxDragDropTarget">
            <summary>
            A control that enables drag and drop operations on ListBox.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.ListBoxDragDropTarget.#ctor">
            <summary>
            Initializes a new instance of the ListBoxDragDropTarget class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListBoxDragDropTarget.OnItemDragStarting(System.Windows.Controls.ItemDragEventArgs)">
            <summary>
            Adds all selected items when drag operation begins.
            </summary>
            <param name="eventArgs">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.ListBoxDragDropTarget.OnContentChanged(System.Object,System.Object)">
            <summary>
            Ensures the content of control is a ListBox.
            </summary>
            <param name="oldContent">The old content.</param>
            <param name="newContent">The new content.</param>
        </member>
        <member name="P:System.Windows.Controls.ListBoxDragDropTarget.ListBox">
            <summary>
            Gets the ListBox that is the drag drop target.
            </summary>
        </member>
        <member name="T:System.Linq.ObservableExtensions">
            <summary>
            A set of extension methods for IObservable objects.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Linq.ObservableExtensions.IgnoreAll``1(System.IObservable{``0})">
            <summary>
            Converts an observable sequence of values into unit values.
            </summary>
            <typeparam name="T">The type of the observable sequence.</typeparam>
            <param name="that">The sequence to convert.</param>
            <returns>A sequence of unit values.</returns>
        </member>
        <member name="T:System.Windows.Input.MouseEventArgsExtensions">
            <summary>
            Contains extension methods for the MouseEventArgs class.
            </summary>
        </member>
        <member name="M:System.Windows.Input.MouseEventArgsExtensions.GetSafePosition(System.Windows.Input.MouseEventArgs,System.Windows.UIElement)">
            <summary>
            Returns the position of mouse relative to an object.
            </summary>
            <param name="mouseEventArgs">Information about a mouse event.</param>
            <param name="relativeTo">The element relative to which the position
            is returned.</param>
            <returns>The position of the mouse relative to the object.</returns>
        </member>
        <member name="T:System.Windows.Controls.PanelDragDropTarget">
            <summary>
            A control that enables drag and drop operations on a Panel.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.PanelDragDropTarget.#ctor">
            <summary>
            Initializes a new instance of the PanelDragDropTarget class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PanelDragDropTarget.RemoveItemAtIndex(System.Windows.Controls.Panel,System.Int32)">
            <summary>
            Removes data from an ItemsControl.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="index">The index at which to remove an item.</param>
        </member>
        <member name="M:System.Windows.Controls.PanelDragDropTarget.AddItem(System.Windows.Controls.Panel,System.Object)">
            <summary>
            Adds an item to an items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="data">The data to be inserted.</param>
        </member>
        <member name="M:System.Windows.Controls.PanelDragDropTarget.CanAddItem(System.Windows.Controls.Panel,System.Object)">
            <summary>
            Returns a value indicating whether an item can be added to the
            items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="data">The data to be added.</param>
            <returns>A value indicating whether an item can be added to the
            items control.</returns>
        </member>
        <member name="M:System.Windows.Controls.PanelDragDropTarget.CanRemove(System.Windows.Controls.Panel)">
            <summary>
            Returns a value indicating whether an item can be removed from the
            items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <returns>A value indicating whether an item can be removed from the
            items control.</returns>
        </member>
        <member name="M:System.Windows.Controls.PanelDragDropTarget.ContainerFromIndex(System.Windows.Controls.Panel,System.Int32)">
            <summary>
            Retrieves the item container at a given index.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="index">The index at which to retrieve the container.
            </param>
            <returns>The item container at a given index.</returns>
        </member>
        <member name="M:System.Windows.Controls.PanelDragDropTarget.GetItemCount(System.Windows.Controls.Panel)">
            <summary>
            Gets the number of items in an items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <returns>The number of items in the items control.</returns>
        </member>
        <member name="M:System.Windows.Controls.PanelDragDropTarget.GetItemsHost(System.Windows.Controls.Panel)">
            <summary>
            Retrieves the items host for a given items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <returns>The items host for a given items control.</returns>
        </member>
        <member name="M:System.Windows.Controls.PanelDragDropTarget.IndexFromContainer(System.Windows.Controls.Panel,System.Windows.UIElement)">
            <summary>
            Retrieves the index of an item container.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="itemContainer">The item container.</param>
            <returns>The index of an item container.</returns>
        </member>
        <member name="M:System.Windows.Controls.PanelDragDropTarget.InsertItem(System.Windows.Controls.Panel,System.Int32,System.Object)">
            <summary>
            Inserts an item into an items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="index">The index at which to insert the item.</param>
            <param name="data">The data to be inserted.</param>
        </member>
        <member name="M:System.Windows.Controls.PanelDragDropTarget.IsItemContainerOfItemsControl(System.Windows.Controls.Panel,System.Windows.DependencyObject)">
            <summary>
            Returns a value indicating whether a container belongs to an items 
            control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="itemContainer">The item container.</param>
            <returns>A value indicating whether a container belongs to an items 
            control.</returns>
        </member>
        <member name="M:System.Windows.Controls.PanelDragDropTarget.ItemFromContainer(System.Windows.Controls.Panel,System.Windows.UIElement)">
            <summary>
            Gets the item from an item container.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="itemContainer">The item container.</param>
            <returns>The data contained by the item container.</returns>
        </member>
        <member name="M:System.Windows.Controls.PanelDragDropTarget.RemoveItem(System.Windows.Controls.Panel,System.Object)">
            <summary>
            Removes an item from an items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="data">The data to be removed.</param>
        </member>
        <member name="M:System.Windows.Controls.PanelDragDropTarget.OnContentChanged(System.Object,System.Object)">
            <summary>
            Confirms that the Content property is set to an object
            of type Panel.
            </summary>
            <param name="oldContent">The old content value.</param>
            <param name="newContent">The new content value.</param>
        </member>
        <member name="T:Microsoft.Windows.QueryContinueDragEventArgs">
            <summary>
            Contains arguments for the System.Windows.DragDrop.QueryContinueDrag event.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:Microsoft.Windows.QueryContinueDragEventArgs.#ctor">
            <summary>
            Initializes a new instance of the QueryContinueDragEventArgs class.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.QueryContinueDragEventArgs.Action">
            <summary>
            Gets or sets the current status of the associated drag-and-drop operation.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.QueryContinueDragEventArgs.EscapePressed">
            <summary>
            Gets a value indicating whether the ESC key has been pressed.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.QueryContinueDragEventArgs.KeyStates">
            <summary>
            Gets a flag enumeration Indicating the current state of the SHIFT, CTRL,
            and ALT keys, as well as the state of the mouse buttons.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.QueryContinueDragEventHandler">
            <summary>
            Represents a method that will handle the routed events that enables a drag-and-drop
            operation to be canceled by the drag source, for example System.Windows.UIElement.QueryContinueDrag.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="T:System.Collections.ObjectModel.Selection">
            <summary>
            A class that holds a selected item.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.Selection.#ctor(System.Nullable{System.Int32},System.Object)">
            <summary>
            Initializes an instance of the Selection class.
            </summary>
            <param name="index">The index of the selected item within the 
            source collection.</param>
            <param name="item">The selected item.</param>
        </member>
        <member name="M:System.Collections.ObjectModel.Selection.#ctor(System.Object)">
            <summary>
            Initializes an instance of the Selection class.
            </summary>
            <param name="item">The selected item.</param>
        </member>
        <member name="P:System.Collections.ObjectModel.Selection.Index">
            <summary>
            Gets the index of the selection within the source collection.
            </summary>
        </member>
        <member name="P:System.Collections.ObjectModel.Selection.Item">
            <summary>
            Gets the selected item.
            </summary>
        </member>
        <member name="T:System.Collections.ObjectModel.SelectionCollection">
            <summary>
            A collection of selected items.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.SelectionCollection.ToSelectionCollection(System.Object)">
            <summary>
            Returns data as a SelectionCollection.
            </summary>
            <param name="data">The data object.</param>
            <returns>A selection collection.</returns>
        </member>
        <member name="M:System.Collections.ObjectModel.SelectionCollection.#ctor">
            <summary>
            Initializes a new instance of a SelectionCollection.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.SelectionCollection.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of a SelectionCollection.
            </summary>
            <param name="items">The items to include in the selection 
            collection.</param>
        </member>
        <member name="P:System.Collections.ObjectModel.SelectionCollection.SelectedItems">
            <summary>
            Gets a sequence of the items in the selection collection.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.SystemParameters">
            <summary>
            Contains properties that you can use to query system settings.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="P:Microsoft.Windows.SystemParameters.MinimumHorizontalDragDistance">
            <summary>
            Gets the minimum amount of horizontal drag distance before a drag operation occurs.
            </summary>
            <returns>The minimum amount of horizontal drag distance before a drag operation occurs.</returns>
        </member>
        <member name="P:Microsoft.Windows.SystemParameters.MinimumVerticalDragDistance">
            <summary>
            Gets the minimum amount of vertical drag distance before a drag operation occurs.
            </summary>
            <returns>The minimum amount of vertical drag distance before a drag operation occurs.</returns>
        </member>
        <member name="T:System.Windows.Controls.TreeViewDragDropTarget">
            <summary>
            A drag drop target for the TreeView control.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.TreeViewDragDropTarget._dragEnter">
            <summary>
            An event raised when a drag enter operation occurs.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TreeViewDragDropTarget._dragLeave">
            <summary>
            An event raised when a drag leave operation occurs.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TreeViewDragDropTarget._drop">
            <summary>
            An event raised when a drop operation occurs.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewDragDropTarget.OnContentChanged(System.Object,System.Object)">
            <summary>
            Throws an exception if the content is not a TreeView.
            </summary>
            <param name="oldContent">The old content value.</param>
            <param name="newContent">The new content value.</param>
        </member>
        <member name="F:System.Windows.Controls.TreeViewDragDropTarget.ExpandNodeDelayProperty">
            <summary>
            Identifies the ExpandNodeDelay dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewDragDropTarget.#ctor">
            <summary>
            Initializes a new instance of the TreeViewDragDropTarget class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewDragDropTarget.GetTreeViewItem(Microsoft.Windows.DragEventArgs)">
            <summary>
            Retrieves the tree view item hovered over in a drag event.
            </summary>
            <param name="args">Information about a drag event.</param>
            <returns>The tree view item hovered over in a drag event.</returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewDragDropTarget.GetItemsControlAncestor(System.Windows.DependencyObject)">
            <summary>
            Returns the items control ancestor of a dependency object.
            </summary>
            <param name="dependencyObject">The dependency object to retrieve the
            element for.</param>
            <returns>The items control ancestor of the dependency object.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewDragDropTarget.OnDragEnter(Microsoft.Windows.DragEventArgs)">
            <summary>
            Prevents Move, Copy, or Link actions if an item is dragged into its
            descendent.
            </summary>
            <param name="args">Information about the drag event.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewDragDropTarget.OnDragLeave(Microsoft.Windows.DragEventArgs)">
            <summary>
            Prevents Move, Copy, or Link actions if an item is dragged into its
            descendent.
            </summary>
            <param name="args">Information about the drag event.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewDragDropTarget.OnDragEvent(Microsoft.Windows.DragEventArgs)">
            <summary>
            This method is called whenever a target event is raised.
            </summary>
            <param name="args">Information about the drag target event.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewDragDropTarget.OnDrop(Microsoft.Windows.DragEventArgs)">
            <summary>
            Prevents Move, Copy, or Link actions if an item is dragged into its
            descendent.
            </summary>
            <param name="args">Information about the drag event.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewDragDropTarget.SetEffects(Microsoft.Windows.DragEventArgs)">
            <summary>
            Prevents Move, Copy, or Link actions if an item is dragged into its
            descendent.
            </summary>
            <param name="args">Information about the drag event.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewDragDropTarget.IsTreeViewItemDraggedDirectlyAboveOrBelowSelf(Microsoft.Windows.DragEventArgs)">
            <summary>
            Returns a value indicating whether a TreeViewItem being dragged 
            directly above or below itself.  If there are no indices in the
            selection the answer is result is always true.
            </summary>
            <param name="args">Information about a drag event.</param>
            <returns>A value indicating whether the TreeViewItem being dragged 
            directly above or below itself.</returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewDragDropTarget.IsTreeViewItemDraggedInDescendent(Microsoft.Windows.DragEventArgs)">
            <summary>
            Returns a value indicating whether an item is being dragged into its 
            own descendent.
            </summary>
            <param name="args">Information about the drag event.</param>
            <returns>A value indicating whether an item is being dragged into 
            its own descendent.  If there is no index information the answer
            is always assumed to be true.</returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewDragDropTarget.GetDropTarget(Microsoft.Windows.DragEventArgs)">
            <summary>
            Retrieves the drop target of a drag event.
            </summary>
            <param name="args">Information about the drag event.</param>
            <returns>The drop target of a drag event.</returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewDragDropTarget.GetTreeViewItemRectExcludingChildren(System.Windows.Controls.TreeViewItem)">
            <summary>
            Retrieves the location and dimensions of a TreeViewItem excluding
            its children.
            </summary>
            <param name="treeViewItem">The tree view item.</param>
            <returns>The location and dimensions of the TreeViewItem excluding
            its children.</returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewDragDropTarget.GetInsertionIndicatorGeometry(System.Windows.Controls.ItemsControl,System.Int32,Microsoft.Windows.DragEventArgs)">
            <summary>
            Returns a geometry for the insertion indicator.
            </summary>
            <param name="dropTarget">The drop target.</param>
            <param name="insertionIndex">The insertion index within the drop 
            target.</param>
            <param name="dragEventArgs">Information about the drag event.
            </param>
            <returns>The geometry for the insertion indicator.</returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewDragDropTarget.GetDropTargetInsertionIndexOverride(System.Windows.Controls.ItemsControl,Microsoft.Windows.DragEventArgs)">
            <summary>
            Gets the insertion index within a drop target given information 
            about a drag event.
            </summary>
            <param name="dropTarget">The drop target.</param>
            <param name="args">Information about a drag event.</param>
            <returns>The insertion index within the drop target.</returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewDragDropTarget.CanScroll(System.Windows.Controls.ItemsControl)">
            <summary>
            Returns a value indicating whether a given items control
            can scroll.
            </summary>
            <param name="itemsControl">The items control.</param>
            <returns>The value indicating whether the given items control
            can scroll.</returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewDragDropTarget.ScrollIntoView(System.Windows.Controls.ItemsControl,System.Windows.Controls.TreeViewItem)">
            <summary>
            Scrolls a given item container into the view.
            </summary>
            <param name="itemsControl">The items control that contains
            the item container.</param>
            <param name="itemContainer">The item container to scroll into
            view.</param>
        </member>
        <member name="P:System.Windows.Controls.TreeViewDragDropTarget.ExpandNodeDelay">
            <summary>
            Gets or sets the delay before expanding a node that is being 
            hovered over during a drag operation.
            </summary>
        </member>
        <member name="T:System.Windows.UIElementExtendedRoutedEventExtensions">
            <summary>
            This class contains extension methods that mimic the 
            AddHandler/RemoveHandler methods for routed events.
            </summary>
            <remarks>
            These methods are in the System.Windows namespace so that they can be
            used as extension methods without bringing the Microsoft.Windows
            namespace into the scope.
            </remarks>
        </member>
        <member name="F:System.Windows.UIElementExtendedRoutedEventExtensions.targetEvents">
            <summary>
            A list of all the target events.
            </summary>
        </member>
        <member name="M:System.Windows.UIElementExtendedRoutedEventExtensions.AddHandler(System.Windows.UIElement,Microsoft.Windows.ExtendedRoutedEvent,System.Delegate,System.Boolean)">
            <summary>
            Adds a routed event handler for a specified routed event, adding the handler
            to the handler collection on the current element.
            </summary>
            <param name="that">The element to add a handler for.</param>
            <param name="routedEvent">An identifier for the routed event to be handled.</param>
            <param name="handler">A reference to the handler implementation.</param>
            <param name="handledEventsToo">True to register the handler such that it is invoked even when the routed
            event is marked handled in its event data; false to register the handler
            with the default condition that it will not be invoked if the routed event
            is already marked handled. The default is false.</param>
        </member>
        <member name="M:System.Windows.UIElementExtendedRoutedEventExtensions.RemoveHandler(System.Windows.UIElement,Microsoft.Windows.ExtendedRoutedEvent,System.Delegate)">
            <summary>
            Removes a routed event handler for a specified routed event, removing the handler
            from the handler collection on the current element.
            </summary>
            <param name="that">The element to remove the handler from.</param>
            <param name="routedEvent">An identifier for the routed event to be handled.</param>
            <param name="handler">A reference to the handler implementation.</param>
        </member>
        <member name="T:System.Windows.UIElementExtensions">
            <summary>
            A collection of extension methods for the UIElement class.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.UIElementExtensions.GetSize(System.Windows.UIElement)">
            <summary>
            Returns the size of an element.
            </summary>
            <remarks>
            Note that this method only exists because there is a Silverlight bug that
            causes elements inside of a Canvas to return (0,0) for their RenderSize.
            This is a workaround that attempts to downcast to a FrameworkElement and
            if the cast is successful it uses the ActualWidth and ActualHeight 
            properties.
            </remarks>
            <param name="that">The element for which to retrieve the size.</param>
            <returns>The size of the element.</returns>
        </member>
        <member name="M:System.Windows.UIElementExtensions.GetMouseMove(System.Windows.UIElement)">
            <summary>
            Returns an observable that wraps the MouseMove event.
            </summary>
            <param name="that">The instance to retrieve the event for.</param>
            <returns>An observable that wraps the MouseMove event.</returns>	
        </member>
        <member name="M:System.Windows.UIElementExtensions.GetMouseMoveWithOriginalSource(System.Windows.UIElement)">
            <summary>
            Returns an observable that wraps the MouseMove event and only
            returns when there a mouse event has an original source.
            </summary>
            <param name="that">The instance to retrieve the event for.</param>
            <returns>An observable that wraps the MouseMove event.</returns>	
        </member>
        <member name="M:System.Windows.UIElementExtensions.GetMouseMoveOnSelfAndSiblings(System.Windows.UIElement)">
            <summary>
            Returns an observable that wraps the MouseMove event on an instance 
            and all of it's siblings.
            </summary>
            <param name="that">The instance to retrieve the event for.</param>
            <returns>An observable that wraps the MouseMove event on an instance 
            and all of it's siblings.</returns>
        </member>
        <member name="M:System.Windows.UIElementExtensions.GetMouseLeftButtonDownAlways(System.Windows.UIElement)">
            <summary>
            Returns an observable that wraps the MouseLeftButtonDown event and
            returns even if one of the events involved is handled.
            </summary>
            <param name="that">The element to listen to.</param>
            <returns>An observable that that wraps the MouseLeftButtonDown event 
            and returns even if one of the events involved is handled.</returns>
        </member>
        <member name="M:System.Windows.UIElementExtensions.GetMouseLeftButtonUpOnSelfAndSiblingsAlways(System.Windows.UIElement)">
            <summary>
            Returns an observable that wraps the MouseLeftButtonUp event of the
            root visual and all of it's siblings and returns even if one of the 
            events involved is handled.
            </summary>
            <param name="that">The element to listen to.</param>
            <returns>An observable that that wraps the MouseLeftButtonUp event 
            and returns even if one of the events involved is handled.</returns>
        </member>
        <member name="M:System.Windows.UIElementExtensions.GetMouseLeftButtonUpAlways(System.Windows.UIElement)">
            <summary>
            Returns an observable that wraps the MouseLeftButtonUp event and
            returns even if one of the events involved is handled.
            </summary>
            <param name="that">The element to listen to.</param>
            <returns>An observable that that wraps the MouseLeftButtonUp event 
            and returns even if one of the events involved is handled.</returns>
        </member>
        <member name="M:System.Windows.UIElementExtensions.GetKeyDownAlways(System.Windows.UIElement)">
            <summary>
            Returns an observable that wraps the KeyDown event and
            returns even if one of the events involved is handled.
            </summary>
            <param name="that">The element to listen to.</param>
            <returns>An observable that that wraps the KeyDown event 
            and returns even if one of the events involved is handled.</returns>
        </member>
        <member name="M:System.Windows.UIElementExtensions.GetKeyUpAlways(System.Windows.UIElement)">
            <summary>
            Returns an observable that wraps the KeyUp event and
            returns even if one of the events involved is handled.
            </summary>
            <param name="that">The element to listen to.</param>
            <returns>An observable that that wraps the KeyUp event 
            and returns even if one of the events involved is handled.</returns>
        </member>
        <member name="M:System.Windows.UIElementExtensions.GetKeyUpOnSelfAndSiblingsAlways(System.Windows.UIElement)">
            <summary>
            Returns an observable that wraps the KeyUp event and returns even if 
            one of the events involved is handled or occurs in a sibling.
            </summary>
            <param name="that">The element to listen to.</param>
            <returns>An observable that wraps the KeyUp event and returns even if 
            one of the events involved is handled or occurs in a sibling.</returns>
        </member>
        <member name="M:System.Windows.UIElementExtensions.GetKeyStateChanged(System.IObservable{System.Collections.Generic.IEvent{System.Windows.Input.MouseButtonEventArgs}},System.IObservable{System.Collections.Generic.IEvent{System.Windows.Input.MouseButtonEventArgs}},System.IObservable{System.Collections.Generic.IEvent{System.Windows.Input.KeyEventArgs}},System.IObservable{System.Collections.Generic.IEvent{System.Windows.Input.KeyEventArgs}},Microsoft.Windows.DragDropKeyStates)">
            <summary>
            Returns an observable that returns a SW.DragDropKeyStates value.  The
            observable is composed of mouse down and up observables and key down
            and up observables.
            </summary>
            <param name="mouseDownObservable">An event raised when a mouse 
            button is depressed.</param>
            <param name="mouseUpObservable">An event raised when a mouse button
            is released.</param>
            <param name="keyDownObservable">An event raised when a key is
            pressed down.</param> 
            <param name="keyUpObservable">An event raised when a key is 
            released.</param>
            <param name="initialState">The initial state of the drag and
            drop keys.</param>
            <returns>An observable that returns a SW.DragDropKeyStates value
            whenever it changes, even if one of the events involved
            is handled.</returns>
        </member>
        <member name="M:System.Windows.UIElementExtensions.GetKeyStateChangedAlways(System.Windows.UIElement,Microsoft.Windows.DragDropKeyStates)">
            <summary>
            Returns an observable that returns a SW.DragDropKeyStates value
            whenever it changes, even if one of the events involved
            is handled.
            </summary>
            <param name="that">The element to listen to.</param>
            <param name="initialState">The initial state SW.DragDropKeyStates.
            </param>
            <returns>An observable that returns a SW.DragDropKeyStates value
            whenever it changes, even if one of the events involved
            is handled.</returns>
        </member>
        <member name="M:System.Windows.UIElementExtensions.GetKeyStateChangedOnSelfAndSiblingsAlways(System.Windows.UIElement,Microsoft.Windows.DragDropKeyStates)">
            <summary>
            Returns an observable that returns a SW.DragDropKeyStates value
            whenever it changes, even if one of the events involved
            is handled or occurs in a sibling.
            </summary>
            <param name="that">The element to listen to.</param>
            <param name="initialState">The initial state SW.DragDropKeyStates.
            </param>
            <returns>An observable that returns a SW.DragDropKeyStates value
            whenever it changes, even if one of the events involved
            is handled.</returns>
        </member>
        <member name="M:System.Windows.UIElementExtensions.GetEscapePressedChangedOnSelfAndSiblingsAlways(System.Windows.UIElement)">
            <summary>
            Returns an observable that returns a value indicating 
            whether escape is pressed, even if one of the events involved
            is handled or occurs in a sibling.
            </summary>
            <param name="that">The element to listen to.</param>
            <returns>An observable that returns a value indicating 
            whether escape is pressed, even if one of the events involved
            is handled or occurs in a sibling.</returns>
        </member>
        <member name="M:System.Windows.UIElementExtensions.ToDragDropKeyStates(System.Windows.Input.Key)">
            <summary>
            Converts the key enumeration into the appropriate DragDropKeyStates
            value.
            </summary>
            <param name="key">The key value.</param>
            <returns>The appropriate SW.DragDropKeyStates value.</returns>
        </member>
        <member name="M:System.Windows.UIElementExtensions.SafeTransformToVisual(System.Windows.UIElement,System.Windows.UIElement)">
            <summary>
            This method performs a transform to visual operation but traps exceptions that occur.
            </summary>
            <param name="that">The element to transform to.</param>
            <param name="element">The element to transform from.</param>
            <returns>A general transform.</returns>
        </member>
        <member name="T:System.Windows.Controls.ExpandDirection">
            <summary>
            Specifies the direction in which an
            <see cref="T:System.Windows.Controls.Expander" /> control opens.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.ExpandDirection.Down">
            <summary>
            Specifies that the <see cref="T:System.Windows.Controls.Expander" />
            control opens in the down direction.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ExpandDirection.Up">
            <summary>
            Specifies that the <see cref="T:System.Windows.Controls.Expander" />
            control opens in the up direction.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ExpandDirection.Left">
            <summary>
            Specifies that the <see cref="T:System.Windows.Controls.Expander" />
            control opens in the left direction.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ExpandDirection.Right">
            <summary>
            Specifies that the <see cref="T:System.Windows.Controls.Expander" />
            control opens in the right direction.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Expander">
            <summary>
            Represents a control that displays a header and has a collapsible
            content window.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.HeaderedContentControl">
            <summary>
            Provides the base implementation for controls that contain a single
            content element and a header.
            </summary>
            <remarks>
            HeaderedContentControl adds Header and HeaderTemplatefeatures to a
            ContentControl. HasHeader and HeaderTemplateSelector are removed for
            lack of support and consistency with other Silverlight controls.
            </remarks>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.HeaderedContentControl.HeaderProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.Header" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.Header" />
            dependency property.
            </value>
        </member>
        <member name="M:System.Windows.Controls.HeaderedContentControl.OnHeaderPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            HeaderProperty property changed handler.
            </summary>
            <param name="d">HeaderedContentControl whose Header property is changed.</param>
            <param name="e">DependencyPropertyChangedEventArgs, which contains the old and new value.</param>
        </member>
        <member name="F:System.Windows.Controls.HeaderedContentControl.HeaderTemplateProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate" />
            dependency property.
            </value>
        </member>
        <member name="M:System.Windows.Controls.HeaderedContentControl.OnHeaderTemplatePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            HeaderTemplateProperty property changed handler.
            </summary>
            <param name="d">HeaderedContentControl whose HeaderTemplate property is changed.</param>
            <param name="e">DependencyPropertyChangedEventArgs, which contains the old and new value.</param>
        </member>
        <member name="M:System.Windows.Controls.HeaderedContentControl.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.HeaderedContentControl" />
            class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.HeaderedContentControl.OnHeaderChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.Header" />
            property changes.
            </summary>
            <param name="oldHeader">
            The old value of the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.Header" />
            property.
            </param>
            <param name="newHeader">
            The new value of the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.Header" />
            property.
            </param>
        </member>
        <member name="M:System.Windows.Controls.HeaderedContentControl.OnHeaderTemplateChanged(System.Windows.DataTemplate,System.Windows.DataTemplate)">
            <summary>
            Called when the value of the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate" />
            property changes.
            </summary>
            <param name="oldHeaderTemplate">
            The old value of the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate" />
            property.
            </param>
            <param name="newHeaderTemplate">
            The new value of the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate" />
            property.
            </param>
        </member>
        <member name="P:System.Windows.Controls.HeaderedContentControl.Header">
            <summary>
            Gets or sets the content for the header of the control.
            </summary>
            <value>
            The content for the header of the control. The default value is
            null.
            </value>
        </member>
        <member name="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate">
            <summary>
            Gets or sets the template that is used to display the content of the
            control's header.
            </summary>
            <value>
            The template that is used to display the content of the control's
            header. The default is null.
            </value>
        </member>
        <member name="F:System.Windows.Controls.Expander.ElementExpanderButtonName">
            <summary>
            The name of the ExpanderButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Expander._expanderButton">
            <summary>
            The ExpanderButton template part is a templated ToggleButton that's used 
            to expand and collapse the ExpandSite, which hosts the content.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Expander.ExpandDirectionProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.Expander.ExpandDirection" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.Expander.ExpandDirection" />
            dependency property.
            </value>
        </member>
        <member name="M:System.Windows.Controls.Expander.OnExpandDirectionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ExpandDirectionProperty PropertyChangedCallback call back static function.
            This function validates the new value before calling virtual function OnExpandDirectionChanged.
            </summary>
            <param name="d">Expander object whose ExpandDirection property is changed.</param>
            <param name="e">DependencyPropertyChangedEventArgs which contains the old and new values.</param>
        </member>
        <member name="M:System.Windows.Controls.Expander.IsValidExpandDirection(System.Object)">
            <summary>
            Check whether the passed in value o is a valid ExpandDirection enum value.
            </summary>
            <param name="o">The value to be checked.</param>
            <returns>True if o is a valid ExpandDirection enum value, false o/w.</returns>
        </member>
        <member name="F:System.Windows.Controls.Expander.IsExpandedProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.Expander.IsExpanded" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.Expander.IsExpanded" />
            dependency property.
            </value>
        </member>
        <member name="M:System.Windows.Controls.Expander.OnIsExpandedPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ExpandedProperty PropertyChangedCallback static function.
            </summary>
            <param name="d">Expander object whose Expanded property is changed.</param>
            <param name="e">DependencyPropertyChangedEventArgs which contains the old and new values.</param>
        </member>
        <member name="M:System.Windows.Controls.Expander.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.Expander" /> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Expander.OnApplyTemplate">
            <summary>
            Builds the visual tree for the
            <see cref="T:System.Windows.Controls.Expander" /> control when a new
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Expander.OnCreateAutomationPeer">
            <summary>
            Returns a
            <see cref="T:System.Windows.Automation.Peers.ExpanderAutomationPeer" />
            for use by the Silverlight automation infrastructure.
            </summary>
            <returns>
            A
            <see cref="T:System.Windows.Automation.Peers.ExpanderAutomationPeer" />
            object for the <see cref="T:System.Windows.Controls.Expander" />.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.Expander.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.KeyDown" /> event.
            </summary>
            <param name="e">Key event args.</param>
        </member>
        <member name="M:System.Windows.Controls.Expander.OnExpanded">
            <summary>
            Raises the
            <see cref="E:System.Windows.Controls.Expander.Expanded" /> event
            when the
            <see cref="P:System.Windows.Controls.Expander.IsExpanded" />
            property changes from false to true.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Expander.OnCollapsed">
            <summary>
            Raises the
            <see cref="E:System.Windows.Controls.Expander.Collapsed" /> event
            when the
            <see cref="P:System.Windows.Controls.Expander.IsExpanded" />
            property changes from true to false.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Expander.ToggleExpanded(System.Windows.RoutedEventHandler,System.Windows.RoutedEventArgs)">
            <summary>
            Handle changes to the IsExpanded property.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Expander.RaiseEvent(System.Windows.RoutedEventHandler,System.Windows.RoutedEventArgs)">
            <summary>
            Raise a RoutedEvent.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Expander.OnExpanderButtonClicked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle ExpanderButton's click event.
            </summary>
            <param name="sender">The ExpanderButton in template.</param>
            <param name="e">Routed event arg.</param>
        </member>
        <member name="M:System.Windows.Controls.Expander.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Expander.UpdateVisualState(System.Boolean)">
            <summary>
            Update the current visual state of the button.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="P:System.Windows.Controls.Expander.ExpanderButton">
            <summary>
            Gets or sets the ExpanderButton template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Expander.ExpandDirection">
            <summary>
            Gets or sets the direction in which the
            <see cref="T:System.Windows.Controls.Expander" /> content window
            opens.
            </summary>
            <value>
            One of the <see cref="T:System.Windows.Controls.ExpandDirection" />
            values that define which direction the content window opens.  The
            default is
            <see cref="F:System.Windows.Controls.ExpandDirection.Down" />.
            </value>
        </member>
        <member name="P:System.Windows.Controls.Expander.IsExpanded">
            <summary>
            Gets or sets a value indicating whether the
            <see cref="T:System.Windows.Controls.Expander" /> content window is
            visible.
            </summary>
            <value>
            True if the content window is expanded; otherwise, false. The
            default is false.
            </value>
        </member>
        <member name="E:System.Windows.Controls.Expander.Expanded">
            <summary>
            Occurs when the content window of an
            <see cref="T:System.Windows.Controls.Expander" /> control opens to
            display both its header and content.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Expander.Collapsed">
            <summary>
            Occurs when the content window of an
            <see cref="T:System.Windows.Controls.Expander" /> control closes and
            only the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.Header" />
            is visible.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Expander.Interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.ExpanderAutomationPeer">
            <summary>
            Exposes <see cref="T:System.Windows.Controls.Expander" /> types to UI
            automation.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.ExpanderAutomationPeer.#ctor(System.Windows.Controls.Expander)">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Automation.Peers.ExpanderAutomationPeer" />
            class.
            </summary>
            <param name="owner">
            The element associated with this automation peer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.ExpanderAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the
            <see cref="T:System.Windows.Controls.Expander" /> that is associated
            with this
            <see cref="T:System.Windows.Automation.Peers.ExpanderAutomationPeer" />.
            This method is called by
            <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.
            </summary>
            <returns>
            The
            <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Group" />
            enumeration value.
            </returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.ExpanderAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the
            <see cref="T:System.Windows.Controls.Expander" /> that is associated
            with this
            <see cref="T:System.Windows.Automation.Peers.ExpanderAutomationPeer" />.
            This method is called by
            <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.
            </summary>
            <returns>A string that contains Expander.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.ExpanderAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the
            <see cref="T:System.Windows.Controls.Expander" /> that is associated
            with this
            <see cref="T:System.Windows.Automation.Peers.ExpanderAutomationPeer" />.
            </summary>
            <param name="pattern">One of the enumeration values.</param>
            <returns>
            The object that implements the pattern interface, or null if the
            specified pattern interface is not implemented by this peer.
            </returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.ExpanderAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Expand">
            <summary>
            Displays all child nodes, controls, or content of the control.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.ExpanderAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Collapse">
            <summary>
            Hides all nodes, controls, or content that are descendants of the
            control.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.ExpanderAutomationPeer.RaiseExpandCollapseAutomationEvent(System.Boolean,System.Boolean)">
            <summary>
            Raise an automation event when a Expander is expanded or collapsed.
            </summary>
            <param name="oldValue">
            A value indicating whether the Expander was expanded.
            </param>
            <param name="newValue">
            A value indicating whether the Expander is expanded.
            </param>
        </member>
        <member name="P:System.Windows.Automation.Peers.ExpanderAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#ExpandCollapseState">
            <summary>
            Gets the state (expanded or collapsed) of the control.
            </summary>
            <value>
            The state (expanded or collapsed) of the control.
            </value>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.BindingSourceEvaluator`1">
            <summary>
            A framework element that permits a binding to be evaluated in a new data
            context leaf node. Uses the BindingSource to do the evaluation.
            </summary>
            <typeparam name="T">The type of dynamic binding to return.</typeparam>
            <remarks>Mimicks the class BindingEvaluator that uses DataContext
            to do evaluation.</remarks>
        </member>
        <member name="F:System.Windows.Controls.BindingSourceEvaluator`1.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.BindingSourceEvaluator`1.#ctor(System.Windows.Data.Binding)">
            <summary>
            Initializes a new instance of the BindingSourceEvaluator class.
            </summary>
            <param name="binding">The binding.</param>
        </member>
        <member name="M:System.Windows.Controls.BindingSourceEvaluator`1.GetDynamicValue(System.Object)">
            <summary>
            Evaluates the specified source.
            </summary>
            <param name="source">The object used as a source for the
            evaluation.</param>
            <returns>The evaluated binding.</returns>
            <remarks>Only uses Path, Converter, ConverterCulture and
            ConverterParameter.</remarks>
        </member>
        <member name="P:System.Windows.Controls.BindingSourceEvaluator`1.Value">
            <summary>
            Gets the data item string value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.BindingSourceEvaluator`1.ValueBinding">
            <summary>
            Gets the value binding that is used as a template
            for the actual evaluation.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DesignerProperties">
            <summary>
            Provides a custom implementation of DesignerProperties.GetIsInDesignMode
            to work around an issue.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DesignerProperties.GetIsInDesignMode(System.Windows.DependencyObject)">
            <summary>
            Returns whether the control is in design mode (running under Blend
            or Visual Studio).
            </summary>
            <param name="element">The element from which the property value is
            read.</param>
            <returns>True if in design mode.</returns>
        </member>
        <member name="F:System.Windows.Controls.DesignerProperties._isInDesignMode">
            <summary>
            Stores the computed InDesignMode value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.WeakEventListener`3">
            <summary>
            Implements a weak event listener that allows the owner to be garbage
            collected if its only remaining link is an event handler.
            </summary>
            <typeparam name="TInstance">Type of instance listening for the event.</typeparam>
            <typeparam name="TSource">Type of source for the event.</typeparam>
            <typeparam name="TEventArgs">Type of event arguments for the event.</typeparam>
        </member>
        <member name="F:System.Windows.Controls.WeakEventListener`3._weakInstance">
            <summary>
            WeakReference to the instance listening for the event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.#ctor(`0)">
            <summary>
            Initializes a new instances of the WeakEventListener class.
            </summary>
            <param name="instance">Instance subscribing to the event.</param>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.OnEvent(`1,`2)">
            <summary>
            Handler for the subscribed event calls OnEventAction to handle it.
            </summary>
            <param name="source">Event source.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.Detach">
            <summary>
            Detaches from the subscribed event.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.WeakEventListener`3.OnEventAction">
            <summary>
            Gets or sets the method to call when the event fires.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.WeakEventListener`3.OnDetachAction">
            <summary>
            Gets or sets the method to call when detaching from the event.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ItemsControlExtensions">
            <summary>
            Provides useful extensions to ItemsControl instances.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlExtensions.GetItemsHost(System.Windows.Controls.ItemsControl)">
            <summary>
            Gets the Panel that contains the containers of an ItemsControl.
            </summary>
            <param name="control">The ItemsControl.</param>
            <returns>
            The Panel that contains the containers of an ItemsControl, or null
            if the Panel could not be found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlExtensions.GetScrollHost(System.Windows.Controls.ItemsControl)">
            <summary>
            Gets the ScrollViewer that contains the containers of an
            ItemsControl.
            </summary>
            <param name="control">The ItemsControl.</param>
            <returns>
            The ScrollViewer that contains the containers of an ItemsControl, or
            null if a ScrollViewer could not be found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlExtensions.GetContainers(System.Windows.Controls.ItemsControl)">
            <summary>
            Get the item containers of an ItemsControl.
            </summary>
            <param name="control">The ItemsControl.</param>
            <returns>The item containers of an ItemsControl.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlExtensions.GetContainers``1(System.Windows.Controls.ItemsControl)">
            <summary>
            Get the item containers of an ItemsControl.
            </summary>
            <typeparam name="TContainer">
            The type of the item containers.
            </typeparam>
            <param name="control">The ItemsControl.</param>
            <returns>The item containers of an ItemsControl.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlExtensions.GetContainersIterator``1(System.Windows.Controls.ItemsControl)">
            <summary>
            Get the item containers of an ItemsControl.
            </summary>
            <typeparam name="TContainer">
            The type of the item containers.
            </typeparam>
            <param name="control">The ItemsControl.</param>
            <returns>The item containers of an ItemsControl.</returns>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlExtensions.GetItemsAndContainers(System.Windows.Controls.ItemsControl)">
            <summary>
            Get the items and item containers of an ItemsControl.
            </summary>
            <param name="control">The ItemsControl.</param>
            <returns>The items and item containers of an ItemsControl.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlExtensions.GetItemsAndContainers``1(System.Windows.Controls.ItemsControl)">
            <summary>
            Get the items and item containers of an ItemsControl.
            </summary>
            <typeparam name="TContainer">
            The type of the item containers.
            </typeparam>
            <param name="control">The ItemsControl.</param>
            <returns>The items and item containers of an ItemsControl.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlExtensions.GetItemsAndContainersIterator``1(System.Windows.Controls.ItemsControl)">
            <summary>
            Get the items and item containers of an ItemsControl.
            </summary>
            <typeparam name="TContainer">
            The type of the item containers.
            </typeparam>
            <param name="control">The ItemsControl.</param>
            <returns>The items and item containers of an ItemsControl.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlExtensions.CanAddItem(System.Windows.Controls.ItemsControl,System.Object)">
            <summary>
            Returns a value indicating whether an item can be added to an
            ItemsControl.
            </summary>
            <param name="that">The ItemsControl instance.</param>
            <param name="item">The item to be added.</param>
            <returns>A value Indicating whether an item can be added to an
            ItemsControl.</returns>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlExtensions.CanRemoveItem(System.Windows.Controls.ItemsControl)">
            <summary>
            Returns a value indicating whether an item can be removed from the
            ItemsControl.
            </summary>
            <param name="that">The items control.</param>
            <returns>A value indicating whether an item can be removed from the
            ItemsControl.</returns>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlExtensions.InsertItem(System.Windows.Controls.ItemsControl,System.Int32,System.Object)">
            <summary>
            Inserts an item into an ItemsControl.
            </summary>
            <param name="that">The ItemsControl instance.</param>
            <param name="index">The index at which to insert the item.</param>
            <param name="item">The item to be inserted.</param>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlExtensions.AddItem(System.Windows.Controls.ItemsControl,System.Object)">
            <summary>
            Adds an item to an ItemsControl.
            </summary>
            <param name="that">The ItemsControl instance.</param>
            <param name="item">The item to be inserted.</param>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlExtensions.RemoveItem(System.Windows.Controls.ItemsControl,System.Object)">
            <summary>
            Removes an item from an ItemsControl.
            </summary>
            <param name="that">The ItemsControl instance.</param>
            <param name="item">The item to be removed.</param>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlExtensions.RemoveItemAtIndex(System.Windows.Controls.ItemsControl,System.Int32)">
            <summary>
            Removes an item from an ItemsControl.
            </summary>
            <param name="that">The ItemsControl instance.</param>
            <param name="index">The index of the item to be removed.</param>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlExtensions.GetItemCount(System.Windows.Controls.ItemsControl)">
            <summary>
            Gets the number of items in an ItemsControl.
            </summary>
            <param name="that">The ItemsControl instance.</param>
            <returns>The number of items in the ItemsControl.</returns>
        </member>
        <member name="T:System.Windows.Controls.ScrollViewerExtensions">
            <summary>
            Provides useful extensions to ScrollViewer instances.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.ScrollViewerExtensions.LineChange">
            <summary>
            The amount to scroll a ScrollViewer for a line change.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.GetIsMouseWheelScrollingEnabled(System.Windows.Controls.ScrollViewer)">
            <summary>
            Gets a value indicating whether the ScrollViewer has enabled
            scrolling via the mouse wheel.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <returns>
            A value indicating whether the ScrollViewer has enabled scrolling
            via the mouse wheel.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.SetIsMouseWheelScrollingEnabled(System.Windows.Controls.ScrollViewer,System.Boolean)">
            <summary>
            Sets a value indicating whether the ScrollViewer will enable
            scrolling via the mouse wheel.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <param name="value">
            A value indicating whether the ScrollViewer will enable scrolling
            via the mouse wheel.
            </param>
        </member>
        <member name="F:System.Windows.Controls.ScrollViewerExtensions.IsMouseWheelScrollingEnabledProperty">
            <summary>
            Identifies the IsMouseWheelScrollingEnabled dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.OnIsMouseWheelScrollingEnabledPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsMouseWheelScrollingEnabledProperty property changed handler.
            </summary>
            <param name="d">ScrollViewerExtensions that changed its IsMouseWheelScrollingEnabled.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.OnMouseWheel(System.Object,System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Handles the mouse wheel event.
            </summary>
            <param name="sender">The ScrollViewer.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.GetVerticalOffset(System.Windows.Controls.ScrollViewer)">
            <summary>
            Gets the value of the VerticalOffset attached property for a specified ScrollViewer.
            </summary>
            <param name="element">The ScrollViewer from which the property value is read.</param>
            <returns>The VerticalOffset property value for the ScrollViewer.</returns>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.SetVerticalOffset(System.Windows.Controls.ScrollViewer,System.Double)">
            <summary>
            Sets the value of the VerticalOffset attached property to a specified ScrollViewer.
            </summary>
            <param name="element">The ScrollViewer to which the attached property is written.</param>
            <param name="value">The needed VerticalOffset value.</param>
        </member>
        <member name="F:System.Windows.Controls.ScrollViewerExtensions.VerticalOffsetProperty">
            <summary>
            Identifies the VerticalOffset dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.OnVerticalOffsetPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            VerticalOffsetProperty property changed handler.
            </summary>
            <param name="dependencyObject">ScrollViewer that changed its VerticalOffset.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.GetHorizontalOffset(System.Windows.Controls.ScrollViewer)">
            <summary>
            Gets the value of the HorizontalOffset attached property for a specified ScrollViewer.
            </summary>
            <param name="element">The ScrollViewer from which the property value is read.</param>
            <returns>The HorizontalOffset property value for the ScrollViewer.</returns>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.SetHorizontalOffset(System.Windows.Controls.ScrollViewer,System.Double)">
            <summary>
            Sets the value of the HorizontalOffset attached property to a specified ScrollViewer.
            </summary>
            <param name="element">The ScrollViewer to which the attached property is written.</param>
            <param name="value">The needed HorizontalOffset value.</param>
        </member>
        <member name="F:System.Windows.Controls.ScrollViewerExtensions.HorizontalOffsetProperty">
            <summary>
            Identifies the HorizontalOffset dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.OnHorizontalOffsetPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            HorizontalOffsetProperty property changed handler.
            </summary>
            <param name="dependencyObject">ScrollViewer that changed its HorizontalOffset.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.CoerceVerticalOffset(System.Windows.Controls.ScrollViewer,System.Double)">
            <summary>
            Coerce a vertical offset to fall within the vertical bounds of a
            ScrollViewer.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <param name="offset">The vertical offset to coerce.</param>
            <returns>
            The coerced vertical offset that falls within the ScrollViewer's
            vertical bounds.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.CoerceHorizontalOffset(System.Windows.Controls.ScrollViewer,System.Double)">
            <summary>
            Coerce a horizontal offset to fall within the horizontal bounds of a
            ScrollViewer.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <param name="offset">The horizontal offset to coerce.</param>
            <returns>
            The coerced horizontal offset that falls within the ScrollViewer's
            horizontal bounds.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.ScrollByVerticalOffset(System.Windows.Controls.ScrollViewer,System.Double)">
            <summary>
            Scroll a ScrollViewer vertically by a given offset.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <param name="offset">The vertical offset to scroll.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.ScrollByHorizontalOffset(System.Windows.Controls.ScrollViewer,System.Double)">
            <summary>
            Scroll a ScrollViewer horizontally by a given offset.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <param name="offset">The horizontal offset to scroll.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.LineUp(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer up by a line.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewer" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.LineDown(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer down by a line.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewer" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.LineLeft(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer left by a line.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewer" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.LineRight(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer right by a line.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewer" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.PageUp(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer up by a page.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewer" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.PageDown(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer down by a page.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewer" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.PageLeft(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer left by a page.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewer" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.PageRight(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer right by a page.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewer" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.ScrollToTop(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer to the top.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewer" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.ScrollToBottom(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer to the bottom.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewer" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.ScrollToLeft(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer to the left.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewer" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.ScrollToRight(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer to the right.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewer" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.ScrollIntoView(System.Windows.Controls.ScrollViewer,System.Windows.FrameworkElement)">
            <summary>
            Scroll the desired element into the ScrollViewer's viewport.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <param name="element">The element to scroll into view.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewer" /> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.ScrollIntoView(System.Windows.Controls.ScrollViewer,System.Windows.FrameworkElement,System.Double,System.Double,System.Windows.Duration)">
            <summary>
            Scroll the desired element into the ScrollViewer's viewport.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <param name="element">The element to scroll into view.</param>
            <param name="horizontalMargin">The margin to add on the left or right.
            </param>
            <param name="verticalMargin">The margin to add on the top or bottom.
            </param>
            <param name="duration">The duration of the animation.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewer" /> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element" /> is null.
            </exception>
        </member>
        <member name="T:System.Windows.Controls.CalendarExtensions">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.CalendarExtensions._suspendedHandlers">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CalendarExtensions.IsHandlerSuspended(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="obj">Inherited code: Requires comment 1.</param>
            <param name="dependencyProperty">Inherited code: Requires comment 2.</param>
            <returns>Inherited code: Requires comment 3.</returns>
        </member>
        <member name="M:System.Windows.Controls.CalendarExtensions.SetValueNoCallback(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="obj">Inherited code: Requires comment 1.</param>
            <param name="property">Inherited code: Requires comment 2.</param>
            <param name="value">Inherited code: Requires comment 3.</param>
        </member>
        <member name="M:System.Windows.Controls.CalendarExtensions.SuspendHandler(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Boolean)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="obj">Inherited code: Requires comment 1.</param>
            <param name="dependencyProperty">Inherited code: Requires comment 2.</param>
            <param name="suspend">Inherited code: Requires comment 3.</param>
        </member>
        <member name="M:System.Windows.Controls.CalendarExtensions.GetMetaKeyState(System.Boolean@)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="ctrl">Inherited code: Requires comment 1.</param>
        </member>
        <member name="M:System.Windows.Controls.CalendarExtensions.GetMetaKeyState(System.Boolean@,System.Boolean@)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="ctrl">Inherited code: Requires comment 2.</param>
            <param name="shift">Inherited code: Requires comment 3.</param>
        </member>
        <member name="M:System.Windows.Controls.CalendarExtensions.ContainsAny(System.Windows.Controls.CalendarDateRange,System.Windows.Controls.CalendarDateRange,System.Windows.Controls.CalendarInfo)">
            <summary>
            Returns true if any day in the given DateTime range is contained in
            the current CalendarDateRange.
            </summary>
            <param name="value">The current range.</param>
            <param name="range">The range to compare.</param>
            <param name="info">The CalendarInfo.</param>
            <returns>
            A value indicating whether any day in the given DateTime range is\
            contained in the current CalendarDateRange.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.CalendarExtensions.GetDate(System.Windows.Controls.Primitives.GlobalCalendarDayButton)">
            <summary>
            Get the date of a GlobalCalendarDayButton.
            </summary>
            <param name="button">The button.</param>
            <returns>The date of the button.</returns>
        </member>
        <member name="M:System.Windows.Controls.CalendarExtensions.GetDateNullable(System.Windows.Controls.Primitives.GlobalCalendarDayButton)">
            <summary>
            Get the date of a GlobalCalendarDayButton.
            </summary>
            <param name="button">The button.</param>
            <returns>The date of the button.</returns>
        </member>
        <member name="M:System.Windows.Controls.CalendarExtensions.SetDate(System.Windows.Controls.Primitives.GlobalCalendarDayButton,System.DateTime)">
            <summary>
            Set the date of a GlobalCalendarDayButton.
            </summary>
            <param name="button">The button.</param>
            <param name="date">The date of the button.</param>
        </member>
        <member name="T:System.Windows.Controls.CalendarInfo">
            <summary>
            Provides globalized calendar operations.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.CalendarInfo.#ctor">
            <summary>
            Initializes a new instance of the CalendarInfo class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CalendarInfo.EnsureDateFormatInfo">
            <summary>
            Get the DateFormatInfo and ensure it's not null.
            </summary>
            <returns>The DateFormatInfo.</returns>
        </member>
        <member name="M:System.Windows.Controls.CalendarInfo.Compare(System.DateTime,System.DateTime)">
            <summary>
            Compares two instances of DateTime and returns an integer that
            indicates whether the first instance is earlier than, the same as,
            or later than the second instance.
            </summary>
            <param name="first">The first DateTime.</param>
            <param name="second">The second DateTime.</param>
            <returns>
            Less than zero indicates that first is less than second, zero
            indicates that first equals second, and greater than zero indicated
            that second is greater than first.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.CalendarInfo.CompareDays(System.DateTime,System.DateTime)">
            <summary>
            Compares the days of two instances of DateTime and returns an
            integer that indicates whether the first instance is earlier than,
            the same as, or later than the second instance.
            </summary>
            <param name="first">The first DateTime.</param>
            <param name="second">The second DateTime.</param>
            <returns>
            Less than zero indicates that first is less than second, zero
            indicates that first equals second, and greater than zero indicated
            that second is greater than first.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.CalendarInfo.AddDays(System.DateTime,System.Int32)">
            <summary>
            Returns a DateTime that is the specified number of days away from
            the specified DateTime.
            </summary>
            <param name="day">The DateTime to which to add days.</param>
            <param name="days">The number of days to add.</param>
            <returns>
            The DateTime that results from adding the specified number of days
            to the specified DateTime.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.CalendarInfo.AddMonths(System.DateTime,System.Int32)">
            <summary>
            Returns a DateTime that is the specified number of months away from
            the specified DateTime.
            </summary>
            <param name="day">The DateTime to which to add months.</param>
            <param name="months">The number of months to add.</param>
            <returns>
            The DateTime that results from adding the specified number of months
            to the specified DateTime.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.CalendarInfo.AddYears(System.DateTime,System.Int32)">
            <summary>
            Returns a DateTime that is the specified number of years away from
            the specified DateTime.
            </summary>
            <param name="day">The DateTime to which to add years.</param>
            <param name="years">The number of years to add.</param>
            <returns>
            The DateTime that results from adding the specified number of years
            to the specified DateTime.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.CalendarInfo.GetMonthDifference(System.DateTime,System.DateTime)">
            <summary>
            Get the number of months between two dates.
            </summary>
            <param name="first">The first date.</param>
            <param name="second">The second date.</param>
            <returns>The number of months between the two dates.</returns>
        </member>
        <member name="M:System.Windows.Controls.CalendarInfo.GetDecadeStart(System.DateTime)">
            <summary>
            Get the start of the DateTime's decade.
            </summary>
            <param name="day">The DateTime.</param>
            <returns>The start of the DateTime's decade.</returns>
        </member>
        <member name="M:System.Windows.Controls.CalendarInfo.GetDecadeEnd(System.DateTime)">
            <summary>
            Get the end of the DateTime's decade.
            </summary>
            <param name="day">The DateTime.</param>
            <returns>The end of the DateTime's decade.</returns>
        </member>
        <member name="M:System.Windows.Controls.CalendarInfo.GetDayOfWeek(System.DateTime)">
            <summary>
            Get the day of the week of a DateTime.
            </summary>
            <param name="day">The DateTime.</param>
            <returns>The day of the week of a DateTime.</returns>
        </member>
        <member name="M:System.Windows.Controls.CalendarInfo.GetFirstDayInYear(System.DateTime)">
            <summary>
            Get the first day in the year of a DateTime.
            </summary>
            <param name="day">The DateTime.</param>
            <returns>The first day in the year of a DateTime.</returns>
        </member>
        <member name="M:System.Windows.Controls.CalendarInfo.GetFirstDayInMonth(System.DateTime)">
            <summary>
            Get the first day in the month of a DateTime.
            </summary>
            <param name="day">The DateTime.</param>
            <returns>The first day in the month of a DateTime.</returns>
        </member>
        <member name="M:System.Windows.Controls.CalendarInfo.GetShortestDayName(System.Int32)">
            <summary>
            Get the shortest day name for a given day of week.
            </summary>
            <param name="dayOfWeekIndex">Index of the day of week.</param>
            <returns>The shortest day name for a given day of week.</returns>
        </member>
        <member name="M:System.Windows.Controls.CalendarInfo.GetAbbreviatedMonthName(System.Int32)">
            <summary>
            Get the abbreviated month name for a given month.
            </summary>
            <param name="monthIndex">Index of the month.</param>
            <returns>The abbreviated month name for a given month.</returns>
        </member>
        <member name="M:System.Windows.Controls.CalendarInfo.DayToString(System.DateTime)">
            <summary>
            Convert the day of a DateTime to a string.
            </summary>
            <param name="day">The DateTime.</param>
            <returns>String representation of the day of a DateTime.</returns>
        </member>
        <member name="M:System.Windows.Controls.CalendarInfo.MonthAndYearToString(System.DateTime)">
            <summary>
            Convert the year and month of a DateTime to a string.
            </summary>
            <param name="day">The DateTime.</param>
            <returns>
            String representation of the year and month of a DateTime.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.CalendarInfo.YearToString(System.DateTime)">
            <summary>
            Convert the year of a DateTime to a string.
            </summary>
            <param name="day">The DateTime.</param>
            <returns>String representation of the year of a DateTime.</returns>
        </member>
        <member name="M:System.Windows.Controls.CalendarInfo.DecadeToString(System.Int32,System.Int32)">
            <summary>
            Convert a decade range to a string.
            </summary>
            <param name="decadeStart">The start of the decade.</param>
            <param name="decadeEnd">The end of the decade.</param>
            <returns>String representation of the decade range.</returns>
        </member>
        <member name="M:System.Windows.Controls.CalendarInfo.DateToString(System.DateTime)">
            <summary>
            Convert a DateTime to a string.
            </summary>
            <param name="day">The DateTime.</param>
            <returns>String representation of the date.</returns>
        </member>
        <member name="M:System.Windows.Controls.CalendarInfo.DateToLongString(System.DateTime)">
            <summary>
            Convert a DateTime to a long format string.
            </summary>
            <param name="day">The DateTime.</param>
            <returns>Long format string representation of the date.</returns>
        </member>
        <member name="P:System.Windows.Controls.CalendarInfo.DateFormatInfo">
            <summary>
            Gets the DateTimeFormatInfo to use for formatting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.CalendarInfo.DaysInWeek">
            <summary>
            Gets the number of days in a week.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.CalendarInfo.FirstDayOfWeek">
            <summary>
            Gets the first day of the week.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.CultureCalendarInfo">
            <summary>
            Provides globalized calendar operations based on a specific culture.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.CultureCalendarInfo.#ctor">
            <summary>
            Initializes a new instance of the CultureCalendarInfo class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CultureCalendarInfo.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the CultureCalendarInfo class.
            </summary>
            <param name="culture">
            The culture used to provide the calendar operations.
            </param>
        </member>
        <member name="M:System.Windows.Controls.CultureCalendarInfo.AddDays(System.DateTime,System.Int32)">
            <summary>
            Returns a DateTime that is the specified number of days away from
            the specified DateTime.
            </summary>
            <param name="day">The DateTime to which to add days.</param>
            <param name="days">The number of days to add.</param>
            <returns>
            The DateTime that results from adding the specified number of days
            to the specified DateTime.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.CultureCalendarInfo.AddMonths(System.DateTime,System.Int32)">
            <summary>
            Returns a DateTime that is the specified number of months away from
            the specified DateTime.
            </summary>
            <param name="day">The DateTime to which to add months.</param>
            <param name="months">The number of months to add.</param>
            <returns>
            The DateTime that results from adding the specified number of months
            to the specified DateTime.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.CultureCalendarInfo.AddYears(System.DateTime,System.Int32)">
            <summary>
            Returns a DateTime that is the specified number of years away from
            the specified DateTime.
            </summary>
            <param name="day">The DateTime to which to add years.</param>
            <param name="years">The number of years to add.</param>
            <returns>
            The DateTime that results from adding the specified number of years
            to the specified DateTime.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.CultureCalendarInfo.Culture">
            <summary>
            Gets the culture used to provide the calendar operations.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.CultureCalendarInfo.DateFormatInfo">
            <summary>
            Gets the DateTimeFormatInfo to use for formatting.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.GregorianCalendarInfo">
            <summary>
            Provides globalized calendar operations based on the GregorianCalendar.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.GregorianCalendarInfo._calendar">
            <summary>
            The Calendar that provides our date operations.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.GregorianCalendarInfo._formatInfo">
            <summary>
            The DateTimeFormatInfo to use for formatting.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.GregorianCalendarInfo.#ctor">
            <summary>
            Initializes a new instance of the GregorianCalendarInfo class.
            </summary>
            <remarks>
            Uses the most appropriate GregorianCalendar for
            CultureInfo.CurrentCulture.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.GregorianCalendarInfo.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the GregorianCalendarInfo class.
            </summary>
            <param name="culture">
            The culture used to provide the GregorianCalendar and date
            formatting information.
            </param>
        </member>
        <member name="M:System.Windows.Controls.GregorianCalendarInfo.AddDays(System.DateTime,System.Int32)">
            <summary>
            Returns a DateTime that is the specified number of days away from
            the specified DateTime.
            </summary>
            <param name="day">The DateTime to which to add days.</param>
            <param name="days">The number of days to add.</param>
            <returns>
            The DateTime that results from adding the specified number of days
            to the specified DateTime.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.GregorianCalendarInfo.AddMonths(System.DateTime,System.Int32)">
            <summary>
            Returns a DateTime that is the specified number of months away from
            the specified DateTime.
            </summary>
            <param name="day">The DateTime to which to add months.</param>
            <param name="months">The number of months to add.</param>
            <returns>
            The DateTime that results from adding the specified number of months
            to the specified DateTime.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.GregorianCalendarInfo.AddYears(System.DateTime,System.Int32)">
            <summary>
            Returns a DateTime that is the specified number of years away from
            the specified DateTime.
            </summary>
            <param name="day">The DateTime to which to add years.</param>
            <param name="years">The number of years to add.</param>
            <returns>
            The DateTime that results from adding the specified number of years
            to the specified DateTime.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.GregorianCalendarInfo.DateFormatInfo">
            <summary>
            Gets the DateTimeFormatInfo to use for formatting.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.CalendarDayButtonStyleSelector">
            <summary>
            Provides a way to apply GlobalCalendarDayButton Styles based on custom
            logic. 
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.CalendarDayButtonStyleSelector.#ctor">
            <summary>
            Initializes a new instance of the CalendarDayButtonStyleSelector
            class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CalendarDayButtonStyleSelector.SelectStyle(System.DateTime,System.Windows.Controls.Primitives.GlobalCalendarDayButton)">
            <summary>
            When overridden in a derived class, returns a
            GlobalCalendarDayButton Style based on custom logic.
            </summary>
            <param name="day">The day to select a Style for.</param>
            <param name="container">The GlobalCalendarDayButton.</param>
            <returns>A Style for the GlobalCalendarDayButton.</returns>
        </member>
        <member name="T:System.Windows.Controls.GlobalCalendar">
            <summary>
            Represents a control that enables a user to select a date by using a
            visual calendar display.
            </summary>
            <remarks>
            <para>
            A GlobalCalendar control can be used on its own, or as a drop-down part of a
            DatePicker control. For more information, see DatePicker.  A GlobalCalendar
            displays either the days of a month, the months of a year, or the years
            of a decade, depending on the value of the DisplayMode property.  When
            displaying the days of a month, the user can select a date, a range of
            dates, or multiple ranges of dates.  The kinds of selections that are
            allowed are controlled by the SelectionMode property.
            </para>
            <para>
            The range of dates displayed is governed by the DisplayDateStart and
            DisplayDateEnd properties.  If DisplayMode is Year or Decade, only
            months or years that contain displayable dates will be displayed.
            Setting the displayable range to a range that does not include the
            current DisplayDate will throw an ArgumentOutOfRangeException.
            </para>
            <para>
            The BlackoutDates property can be used to specify dates that cannot be
            selected. These dates will be displayed as dimmed and disabled.
            </para>
            <para>
            By default, Today is highlighted.  This can be disabled by setting
            IsTodayHighlighted to false.
            </para>
            <para>
            The GlobalCalendar control provides basic navigation using either the mouse or
            keyboard. The following table summarizes keyboard navigation.
            
                Key Combination     DisplayMode     Action
                ARROW               Any             Change focused date, unselect
                                                    all selected dates, and select
                                                    new focused date.
                                                    
                SHIFT+ARROW         Any             If SelectionMode is not set to
                                                    SingleDate or None begin
                                                    selecting a range of dates.
                                                    
                CTRL+UP ARROW       Any             Switch to the next larger
                                                    DisplayMode.  If DisplayMode is
                                                    already Decade, no action.
                                                    
                CTRL+DOWN ARROW     Any             Switch to the next smaller
                                                    DisplayMode.  If DisplayMode is
                                                    already Month, no action.
                                                    
                SPACEBAR            Month           Select focused date.
                
                SPACEBAR            Year or Decade  Switch DisplayMode to the Month
                                                    or Year represented by focused
                                                    item.
                                                    
                CTRL+HOME           Any             Switch DisplayMode to Month,
                                                    show today's date, and try to
                                                    select the date if allowed.
            </para>
            <para>
            XAML Usage for Classes Derived from GlobalCalendar
            If you define a class that derives from GlobalCalendar, the class can be used
            as an object element in XAML, and all of the inherited properties and
            events that show a XAML usage in the reference for the GlobalCalendar members
            can have the same XAML usage for the derived class. However, the object
            element itself must have a different prefix mapping than the controls:
            mapping shown in the usages, because the derived class comes from an
            assembly and namespace that you create and define.  You must define your
            own prefix mapping to an XML namespace to use the class as an object
            element in XAML.
            </para>
            </remarks>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.GlobalCalendar.RowsPerMonth">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.GlobalCalendar.ColumnsPerMonth">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.GlobalCalendar.RowsPerYear">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.GlobalCalendar.ColumnsPerYear">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.GlobalCalendar.ElementRoot">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.GlobalCalendar.ElementMonth">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.GlobalCalendar.DefaultCalendarInfo">
            <summary>
            The default CalendarInfo used to provide globalized date operations.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.GlobalCalendar.CalendarInfoProperty">
            <summary>
            Identifies the CalendarInfo dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnCalendarInfoPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CalendarInfoProperty property changed handler.
            </summary>
            <param name="d">GlobalCalendar that changed its CalendarInfo.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.GlobalCalendar.CalendarButtonStyleProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.GlobalCalendar.CalendarButtonStyle" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.GlobalCalendar.CalendarButtonStyle" />
            dependency property.
            </value>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnCalendarButtonStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="d">Inherited code: Requires comment 1.</param>
            <param name="e">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.EnsureCalendarButtonStyle(System.Windows.Controls.Primitives.GlobalCalendarButton,System.Windows.Style)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="calendarButton">Inherited code: Requires comment 1.</param>
            <param name="calendarButtonStyle">Inherited code: Requires comment 2.</param>
        </member>
        <member name="F:System.Windows.Controls.GlobalCalendar.CalendarDayButtonStyleProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.GlobalCalendar.CalendarDayButtonStyle" />
            dependency property.
            </summary>
            <remarks>
            The identifier for the
            <see cref="P:System.Windows.Controls.GlobalCalendar.CalendarDayButtonStyle" />
            dependency property.
            </remarks>
        </member>
        <member name="F:System.Windows.Controls.GlobalCalendar.CalendarDayButtonStyleSelectorProperty">
            <summary>
            Identifies the CalendarDayButtonStyleSelector dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnCalendarDayButtonStyleOrSelectorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="d">Inherited code: Requires comment 1.</param>
            <param name="e">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.ApplyDayButtonStyle(System.Windows.Controls.Primitives.GlobalCalendarDayButton)">
            <summary>
            Apply a Style to a GlobalCalendarDayButton.
            </summary>
            <param name="button">The button.</param>
        </member>
        <member name="F:System.Windows.Controls.GlobalCalendar.CalendarItemStyleProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.GlobalCalendar.CalendarItemStyle" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.GlobalCalendar.CalendarItemStyle" />
            dependency property.
            </value>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnCalendarItemStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="d">Inherited code: Requires comment 1.</param>
            <param name="e">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.EnsureMonthStyle(System.Windows.Controls.Primitives.GlobalCalendarItem,System.Windows.Style)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="month">Inherited code: Requires comment 1 .</param>
            <param name="monthStyle">Inherited code: Requires comment 2 .</param>
        </member>
        <member name="F:System.Windows.Controls.GlobalCalendar.IsTodayHighlightedProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.GlobalCalendar.IsTodayHighlighted" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.GlobalCalendar.IsTodayHighlighted" />
            dependency property.
            </value>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnIsTodayHighlightedChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsTodayHighlightedProperty property changed handler.
            </summary>
            <param name="d">
            GlobalCalendar that changed its IsTodayHighlighted.
            </param>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="F:System.Windows.Controls.GlobalCalendar.DisplayModeProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.GlobalCalendar.DisplayMode" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.GlobalCalendar.DisplayMode" />
            dependency property.
            </value>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnDisplayModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DisplayModeProperty property changed handler.
            </summary>
            <param name="d">GlobalCalendar that changed its DisplayMode.</param>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.IsValidDisplayMode(System.Windows.Controls.CalendarMode)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="mode">Inherited code: Requires comment 1.</param>
            <returns>Inherited code: Requires comment 2.</returns>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnDisplayModeChanged(System.Windows.Controls.CalendarModeChangedEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="args">Inherited code: Requires comment 1.</param>
        </member>
        <member name="F:System.Windows.Controls.GlobalCalendar.FirstDayOfWeekProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.GlobalCalendar.FirstDayOfWeek" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.GlobalCalendar.FirstDayOfWeek" />
            dependency property.
            </value>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnFirstDayOfWeekChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            FirstDayOfWeekProperty property changed handler.
            </summary>
            <param name="d">GlobalCalendar that changed its FirstDayOfWeek.</param>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.IsValidFirstDayOfWeek(System.Object)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="value">Inherited code: Requires comment 1.</param>
            <returns>Inherited code: Requires comment 2.</returns>
        </member>
        <member name="F:System.Windows.Controls.GlobalCalendar.SelectionModeProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.GlobalCalendar.SelectionMode" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.GlobalCalendar.SelectionMode" />
            dependency property.
            </value>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnSelectionModeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="d">Inherited code: Requires comment 1.</param>
            <param name="e">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.IsValidSelectionMode(System.Object)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="value">Inherited code: Requires comment 1.</param>
            <returns>Inherited code: Requires comment 2.</returns>
        </member>
        <member name="F:System.Windows.Controls.GlobalCalendar.SelectedDateProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.GlobalCalendar.SelectedDate" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.GlobalCalendar.SelectedDate" />
            dependency property.
            </value>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnSelectedDateChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectedDateProperty property changed handler.
            </summary>
            <param name="d">GlobalCalendar that changed its SelectedDate.</param>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.IsSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="e">Inherited code: Requires comment 1.</param>
            <returns>Inherited code: Requires comment 2.</returns>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnSelectedDatesCollectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="e">Inherited code: Requires comment 1.</param>
        </member>
        <member name="F:System.Windows.Controls.GlobalCalendar._selectedMonth">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.GlobalCalendar._selectedYear">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.GlobalCalendar.DisplayDateProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.GlobalCalendar.DisplayDate" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.GlobalCalendar.DisplayDate" />
            dependency property.
            </value>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnDisplayDateChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DisplayDateProperty property changed handler.
            </summary>
            <param name="d">GlobalCalendar that changed its DisplayDate.</param>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnDisplayDate(System.Windows.Controls.GlobalCalendarDateChangedEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="e">Inherited code: Requires comment 1.</param>
        </member>
        <member name="F:System.Windows.Controls.GlobalCalendar.DisplayDateStartProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.GlobalCalendar.DisplayDateStart" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.GlobalCalendar.DisplayDateStart" />
            dependency property.
            </value>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnDisplayDateStartChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DisplayDateStartProperty property changed handler.
            </summary>
            <param name="d">GlobalCalendar that changed its DisplayDateStart.</param>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.SelectedDateMin(System.Windows.Controls.GlobalCalendar)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="cal">Inherited code: Requires comment 1.</param>
            <returns>Inherited code: Requires comment 2.</returns>
        </member>
        <member name="F:System.Windows.Controls.GlobalCalendar.DisplayDateEndProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.GlobalCalendar.DisplayDateEnd" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.GlobalCalendar.DisplayDateEnd" />
            dependency property.
            </value>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnDisplayDateEndChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DisplayDateEndProperty property changed handler.
            </summary>
            <param name="d">GlobalCalendar that changed its DisplayDateEnd.</param>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.SelectedDateMax(System.Windows.Controls.GlobalCalendar)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="cal">Inherited code: Requires comment 1.</param>
            <returns>Inherited code: Requires comment 2.</returns>
        </member>
        <member name="F:System.Windows.Controls.GlobalCalendar._isShiftPressed">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.GlobalCalendar" /> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnApplyTemplate">
            <summary>
            Builds the visual tree for the
            <see cref="T:System.Windows.Controls.GlobalCalendar" /> when a new
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.Calendar_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="sender">Inherited code: Requires comment 1.</param>
            <param name="e">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.ResetStates">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.ToString">
            <summary>
            Provides a text representation of the selected date.
            </summary>
            <returns>
            A text representation of the selected date, or an empty string if
            <see cref="P:System.Windows.Controls.GlobalCalendar.SelectedDate" /> is
            null.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnCreateAutomationPeer">
            <summary>
            Returns a
            <see cref="T:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer" />
            for use by the Silverlight automation infrastructure.
            </summary>
            <returns>
            A
            <see cref="T:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer" />
            for the <see cref="T:System.Windows.Controls.GlobalCalendar" /> object.
            </returns>
            <remarks>
            <para>
            This method creates a new GlobalCalendarAutomationPeer instance if one has
            not been created for the control instance; otherwise, it returns the
            GlobalCalendarAutomationPeer previously created.
            </para>
            <para>
            Classes that participate in the Silverlight automation
            infrastructure must implement this method to return a class-specific
            derived class of AutomationPeer that reports information for
            automation behavior.
            </para>
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
             Called when the IsEnabled property changes.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Property changed args.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.FindDayButtonFromDay(System.DateTime)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="day">Inherited code: Requires comment 1.</param>
            <returns>Inherited code: Requires comment 2.</returns>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.UpdateMonths">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnSelectedMonthChanged(System.Nullable{System.DateTime})">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="selectedMonth">Inherited code: Requires comment 1.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnSelectedYearChanged(System.Nullable{System.DateTime})">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="selectedYear">Inherited code: Requires comment 1.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.IsValidDateSelection(System.Windows.Controls.GlobalCalendar,System.Object)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="cal">Inherited code: Requires comment 1.</param>
            <param name="value">Inherited code: Requires comment 2.</param>
            <returns>Inherited code: Requires comment 3.</returns>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.IsValidKeyboardSelection(System.Windows.Controls.GlobalCalendar,System.Object)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="cal">Inherited code: Requires comment 1.</param>
            <param name="value">Inherited code: Requires comment 2.</param>
            <returns>Inherited code: Requires comment 3.</returns>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.AddSelection">
            <summary>
            This method adds the days that were selected by Keyboard to the
            SelectedDays Collection.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.ProcessSelection(System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="shift">Inherited code: Requires comment 1.</param>
            <param name="lastSelectedDate">Inherited code: Requires comment 2.</param>
            <param name="index">Inherited code: Requires comment 3.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.HighlightDays">
            <summary>
            This method highlights the days in MultiSelection mode without
            adding them to the SelectedDates collection.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.UnHighlightDays">
            <summary>
            This method un-highlights the days that were hovered over but not
            added to the SelectedDates collection or un-highlighted the
            previously selected days in SingleRange Mode.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.SortHoverIndexes(System.Int32@,System.Int32@)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="startIndex">Inherited code: Requires comment 1.</param>
            <param name="endIndex">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.Calendar_MouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="sender">Inherited code: Requires comment 1.</param>
            <param name="e">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnHeaderClick">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnNextClick">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnPreviousClick">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnDayClick(System.DateTime)">
            <summary>
            If the day is a trailing day, Update the DisplayDate.
            </summary>
            <param name="selectedDate">Inherited code: Requires comment.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnMonthClick">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnDayButtonMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="e">Inherited code: Requires comment 1.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Mouse wheel handler simulates (Ctrl+)PageUp/Down.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.Calendar_KeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="sender">Inherited code: Requires comment 1.</param>
            <param name="e">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.ProcessCalendarKey(System.Windows.Input.KeyEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="e">Inherited code: Requires comment 1.</param>
            <returns>Inherited code: Requires comment 2.</returns>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.ProcessUpKey(System.Boolean,System.Boolean)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="ctrl">Inherited code: Requires comment 1.</param>
            <param name="shift">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.ProcessDownKey(System.Boolean,System.Boolean)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="ctrl">Inherited code: Requires comment 1.</param>
            <param name="shift">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.ProcessLeftKey(System.Boolean)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="shift">Inherited code: Requires comment 1.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.ProcessRightKey(System.Boolean)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="shift">Inherited code: Requires comment 1.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.ProcessEnterKey">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <returns>Inherited code: Requires comment 1.</returns>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.ProcessHomeKey(System.Boolean,System.Boolean)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="ctrl">
            A value indicating whether the Control key is pressed.
            </param>
            <param name="shift">
            A value indicating whether the Shift key is pressed.
            </param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.ProcessEndKey(System.Boolean)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="shift">Inherited code: Requires comment 1.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.ProcessPageDownKey(System.Boolean)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="shift">Inherited code: Requires comment 1.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.ProcessPageUpKey(System.Boolean)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="shift">Inherited code: Requires comment 1.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.Calendar_KeyUp(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="sender">Inherited code: Requires comment 1.</param>
            <param name="e">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.ProcessShiftKeyUp">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.Calendar_GotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="sender">Inherited code: Requires comment 1.</param>
            <param name="e">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendar.Calendar_LostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="sender">Inherited code: Requires comment1 .</param>
            <param name="e">Inherited code: Requires comment 2.</param>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.Root">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.CalendarInfo">
            <summary>
            Gets or sets the CalendarInfo that provides globalized date
            operations.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.Info">
            <summary>
            Gets the CalendarInfo that provides globalized date operations.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.MonthControl">
            <summary>
            Gets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.FocusButton">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.FocusCalendarButton">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.CalendarButtonStyle">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> associated
            with the control's internal
            <see cref="T:System.Windows.Controls.Primitives.GlobalCalendarButton" />
            object.
            </summary>
            <value>
            The current style of the
            <see cref="T:System.Windows.Controls.Primitives.GlobalCalendarButton" />
            object.
            </value>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.CalendarDayButtonStyle">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> associated
            with the control's internal
            <see cref="T:System.Windows.Controls.Primitives.GlobalCalendarDayButton" />
            object.
            </summary>
            <value>
            The current style of the
            <see cref="T:System.Windows.Controls.Primitives.GlobalCalendarDayButton" />
            object.
            </value>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.CalendarDayButtonStyleSelector">
            <summary>
            Gets or sets a CalendarDayButtonStyleSelector that enables an application writer
            to provide custom style-selection logic for the day buttons.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.CalendarItemStyle">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> associated
            with the control's internal
            <see cref="T:System.Windows.Controls.Primitives.GlobalCalendarItem" />
            object.
            </summary>
            <value>
            The current style of the
            <see cref="T:System.Windows.Controls.Primitives.GlobalCalendarItem" />
            object.
            </value>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.IsTodayHighlighted">
            <summary>
            Gets or sets a value indicating whether the current date is
            highlighted.
            </summary>
            <value>
            True if the current date is highlighted; otherwise, false. The
            default is true.
            </value>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.DisplayMode">
            <summary>
            Gets or sets a value indicating whether the calendar is displayed in
            months, years, or decades.
            </summary>
            <value>
            A value indicating what length of time the
            <see cref="T:System.Windows.Controls.GlobalCalendar" /> should display.
            </value>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.FirstDayOfWeek">
            <summary>
            Gets or sets the day that is considered the beginning of the week.
            </summary>
            <value>
            A <see cref="T:System.DayOfWeek" /> representing the beginning of
            the week. The default is <see cref="F:System.DayOfWeek.Sunday" />.
            </value>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.FirstDay">
            <summary>
            Gets the day that is considered the beginning of the week.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.SelectionMode">
            <summary>
            Gets or sets a value that indicates what kind of selections are
            allowed.
            </summary>
            <value>
            A value that indicates the current selection mode. The default is
            <see cref="F:System.Windows.Controls.CalendarSelectionMode.SingleDate" />.
            </value>
            <remarks>
            <para>
            This property determines whether the GlobalCalendar allows no selection,
            selection of a single date, or selection of multiple dates.  The
            selection mode is specified with the CalendarSelectionMode
            enumeration.
            </para>
            <para>
            When this property is changed, all selected dates will be cleared.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.SelectedDate">
            <summary>
            Gets or sets the currently selected date.
            </summary>
            <value>The date currently selected. The default is null.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The given date is outside the range specified by
            <see cref="P:System.Windows.Controls.GlobalCalendar.DisplayDateStart" />
            and <see cref="P:System.Windows.Controls.GlobalCalendar.DisplayDateEnd" />
            -or-
            The given date is in the
            <see cref="P:System.Windows.Controls.GlobalCalendar.BlackoutDates" />
            collection.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If set to anything other than null when
            <see cref="P:System.Windows.Controls.GlobalCalendar.SelectionMode" /> is
            set to
            <see cref="F:System.Windows.Controls.CalendarSelectionMode.None" />.
            </exception>
            <remarks>
            Use this property when SelectionMode is set to SingleDate.  In other
            modes, this property will always be the first date in SelectedDates.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.SelectedDates">
            <summary>
            Gets a collection of selected dates.
            </summary>
            <value>
            A <see cref="T:System.Windows.Controls.GlobalSelectedDatesCollection" />
            object that contains the currently selected dates. The default is an
            empty collection.
            </value>
            <remarks>
            Dates can be added to the collection either individually or in a
            range using the AddRange method.  Depending on the value of the
            SelectionMode property, adding a date or range to the collection may
            cause it to be cleared.  The following table lists how
            CalendarSelectionMode affects the SelectedDates property.
            
                CalendarSelectionMode   Description
                None                    No selections are allowed.  SelectedDate
                                        cannot be set and no values can be added
                                        to SelectedDates.
                                        
                SingleDate              Only a single date can be selected,
                                        either by setting SelectedDate or the
                                        first value in SelectedDates.  AddRange
                                        cannot be used.
                                        
                SingleRange             A single range of dates can be selected.
                                        Setting SelectedDate, adding a date
                                        individually to SelectedDates, or using
                                        AddRange will clear all previous values
                                        from SelectedDates.
                MultipleRange           Multiple non-contiguous ranges of dates
                                        can be selected. Adding a date
                                        individually to SelectedDates or using
                                        AddRange will not clear SelectedDates.
                                        Setting SelectedDate will still clear
                                        SelectedDates, but additional dates or
                                        range can then be added.  Adding a range
                                        that includes some dates that are
                                        already selected or overlaps with
                                        another range results in the union of
                                        the ranges and does not cause an
                                        exception.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.RemovedItems">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.LastSelectedDateInternal">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.LastSelectedDate">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.SelectedMonth">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.SelectedYear">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.BlackoutDates">
            <summary>
            Gets a collection of dates that are marked as not selectable.
            </summary>
            <value>
            A collection of dates that cannot be selected. The default value is
            an empty collection.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Adding a date to this collection when it is already selected or
            adding a date outside the range specified by DisplayDateStart and
            DisplayDateEnd.
            </exception>
            <remarks>
            <para>
            Dates in this collection will appear as disabled on the calendar.
            </para>
            <para>
            To make all past dates not selectable, you can use the
            AddDatesInPast method provided by the collection returned by this
            property.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.DisplayDate">
            <summary>
            Gets or sets the date to display.
            </summary>
            <value>The date to display.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The given date is not in the range specified by
            <see cref="P:System.Windows.Controls.GlobalCalendar.DisplayDateStart" />
            and
            <see cref="P:System.Windows.Controls.GlobalCalendar.DisplayDateEnd" />.
            </exception>
            <remarks>
            <para>
            This property allows the developer to specify a date to display.  If
            this property is a null reference (Nothing in Visual Basic),
            SelectedDate is displayed.  If SelectedDate is also a null reference
            (Nothing in Visual Basic), Today is displayed.  The default is
            Today.
            </para>
            <para>
            To set this property in XAML, use a date specified in the format
            yyyy/mm/dd.  The mm and dd components must always consist of two
            characters, with a leading zero if necessary.  For instance, the
            month of May should be specified as 05.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.DisplayDateInternal">
            <summary>
            Gets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.DisplayDateStart">
            <summary>
            Gets or sets the first date to be displayed.
            </summary>
            <value>The first date to display.</value>
            <remarks>
            To set this property in XAML, use a date specified in the format
            yyyy/mm/dd.  The mm and dd components must always consist of two
            characters, with a leading zero if necessary.  For instance, the
            month of May should be specified as 05.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.DisplayDateRangeStart">
            <summary>
            Gets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.DisplayDateEnd">
            <summary>
            Gets or sets the last date to be displayed.
            </summary>
            <value>The last date to display.</value>
            <remarks>
            To set this property in XAML, use a date specified in the format
            yyyy/mm/dd.  The mm and dd components must always consist of two
            characters, with a leading zero if necessary.  For instance, the
            month of May should be specified as 05.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.DisplayDateRangeEnd">
            <summary>
            Gets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.HoverStart">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.HoverStartIndex">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.HoverEndInternal">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.HoverEnd">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.HoverEndIndex">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.HasFocusInternal">
            <summary>
            Gets or sets a value indicating whether Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.IsMouseSelection">
            <summary>
            Gets or sets a value indicating whether Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendar.DatePickerDisplayDateFlag">
            <summary>
            Gets or sets a value indicating whether DatePicker should change its 
            DisplayDate because of a SelectedDate change on its GlobalCalendar.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.GlobalCalendar.SelectedDatesChanged">
            <summary>
            Occurs when the collection returned by the
            <see cref="P:System.Windows.Controls.GlobalCalendar.SelectedDates" />
            property is changed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.GlobalCalendar.DisplayDateChanged">
            <summary>
            Occurs when the
            <see cref="P:System.Windows.Controls.GlobalCalendar.DisplayDate" />
            property is changed.
            </summary>
            <remarks>
            This event occurs after DisplayDate is assigned its new value.
            </remarks>
        </member>
        <member name="E:System.Windows.Controls.GlobalCalendar.DisplayModeChanged">
            <summary>
            Occurs when the
            <see cref="P:System.Windows.Controls.GlobalCalendar.DisplayMode" />
            property is changed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.GlobalCalendar.DayButtonMouseUp">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer">
            <summary>
            Exposes <see cref="T:System.Windows.Controls.GlobalCalendar" /> types to UI automation.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer.#ctor(System.Windows.Controls.GlobalCalendar)">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer" />
            class.
            </summary>
            <param name="owner">
            The <see cref="T:System.Windows.Controls.GlobalCalendar" /> instance to
            associate with the
            <see cref="T:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer" />.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for this
            <see cref="T:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer" />.
            </summary>
            <param name="patternInterface">
            One of the enumeration values.
            </param>
            <returns>
            The object that implements the pattern interface, or null if the
            specified pattern interface is not implemented by this peer.
            </returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Returns the control type for the GlobalCalendar that is associated with
            this GlobalCalendarAutomationPeer.  This method is called by
            GetAutomationControlType.
            </summary>
            <returns>A value of the AutomationControlType enumeration.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the UIElement that is associated with this
            FrameworkElementAutomationPeer.  This method is called by
            GetClassName.
            </summary>
            <returns>
            The name of the owner type that is associated with this
            GlobalCalendarAutomationPeer. 
            </returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer.GetNameCore">
            <summary>
            Returns the text label of the GlobalCalendar that is associated with this
            GlobalCalendarAutomationPeer.  This method is called by GetName.
            </summary>
            <returns>
            The text label of the element that is associated with this
            automation peer.
            </returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer.System#Windows#Automation#Provider#IGridProvider#GetItem(System.Int32,System.Int32)">
            <summary>
            Retrieves the UI automation provider for the specified cell.
            </summary>
            <param name="row">
            The ordinal number of the row.
            </param>
            <param name="column">
            The ordinal number of the column.
            </param>
            <returns>
            The UI automation provider for the specified cell.
            </returns>
            <remarks>
            <para>
            Grid coordinates are zero-based. The upper-left cell (or upper-right
            cell, depending on locale) has coordinates (0,0).
            </para>
            <para>
            If a cell is empty, a UI Automation provider must still be returned
            in order to support the ContainingGrid property for that cell.  This
            is possible when the layout of child elements in the grid is similar
            to a ragged array.
            </para>
            <para>
            Hidden rows and columns can be loaded in the tree, depending on the
            provider implementation.  Therefore, they will be reflected in the
            RowCount and ColumnCount properties.  If the hidden rows and columns
            have not yet been loaded, they should not be counted.
            </para>
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer.System#Windows#Automation#Provider#IMultipleViewProvider#GetSupportedViews">
            <summary>
            Retrieves a collection of control-specific view identifiers.
            </summary>
            <returns>
            A collection of values that identifies the views that are available
            for a UI automation element.
            </returns>
            <remarks>
            The collection of view identifiers must be identical across
            instances.  View identifier values can be passed to GetViewName.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer.System#Windows#Automation#Provider#IMultipleViewProvider#GetViewName(System.Int32)">
            <summary>
            Retrieves the name of a control-specific view.
            </summary>
            <param name="viewId">The view identifier.</param>
            <returns>A localized name for the view.</returns>
            <remarks>
            View identifiers can be retrieved by using GetSupportedViews.  The
            collection of view identifiers must be identical across instances.
            View names must be suitable for use in text-to-speech, Braille, and
            other accessible applications.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer.System#Windows#Automation#Provider#IMultipleViewProvider#SetCurrentView(System.Int32)">
            <summary>
            Sets the current control-specific view.
            </summary>
            <param name="viewId">A view identifier.</param>
            <remarks>
            View identifiers can be retrieved by using GetSupportedViews.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#GetSelection">
            <summary>
            Retrieves a UI automation provider for each child element that is
            selected.
            </summary>
            <returns>
            A collection of UI automation providers.
            </returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer.RaiseSelectionEvents(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Raise selection AutomationEvents when the GlobalCalendar's SelectedDates
            collection changes.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer.RaiseDayButtonSelectionEvent(System.Windows.Controls.GlobalCalendar,System.DateTime,System.Windows.Automation.Peers.AutomationEvents)">
            <summary>
            Raise an automation peer event for the selection of a day button.
            </summary>
            <param name="calendar">
            The GlobalCalendar associated with this automation peer.
            </param>
            <param name="date">The selected date.</param>
            <param name="eventToRaise">The selection event to raise.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer.System#Windows#Automation#Provider#ITableProvider#GetColumnHeaders">
            <summary>
            Gets a collection of UI automation providers that represents all the
            column headers in a table.
            </summary>
            <returns>A collection of UI automation providers.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer.System#Windows#Automation#Provider#ITableProvider#GetRowHeaders">
            <summary>
            Retrieves a collection of UI automation providers that represents
            all row headers in the table.
            </summary>
            <returns>A collection of UI automation providers.</returns>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer.OwningCalendar">
            <summary>
            Gets the GlobalCalendar associated with the GlobalCalendarAutomationPeer.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer.OwningGrid">
            <summary>
            Gets the current top-level Grid of with the GlobalCalendar.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer.System#Windows#Automation#Provider#IGridProvider#ColumnCount">
            <summary>
            Gets the total number of columns in a grid.
            </summary>
            <value>
            The total number of columns in a grid.
            </value>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer.System#Windows#Automation#Provider#IGridProvider#RowCount">
            <summary>
            Gets the total number of rows in a grid.
            </summary>
            <value>
            The total number of rows in a grid.
            </value>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer.System#Windows#Automation#Provider#IMultipleViewProvider#CurrentView">
            <summary>
            Gets the current control-specific view.
            </summary>
            <value>
            The value for the current view of the UI automation element.
            </value>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#CanSelectMultiple">
            <summary>
            Gets a value indicating whether the UI automation provider allows
            more than one child element to be selected at the same time.
            </summary>
            <value>
            True if multiple selection is allowed; otherwise, false.
            </value>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#IsSelectionRequired">
            <summary>
            Gets a value indicating whether the UI automation provider
            requires at least one child element to be selected.
            </summary>
            <value>
            True if selection is required; otherwise, false.
            </value>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarAutomationPeer.System#Windows#Automation#Provider#ITableProvider#RowOrColumnMajor">
            <summary>
            Gets the primary direction of traversal for the table.
            </summary>
            <value>
            The primary direction of traversal.
            </value>
        </member>
        <member name="T:System.Windows.Controls.GlobalCalendarBlackoutDatesCollection">
            <summary>
            Represents a collection of non-selectable dates in a
            <see cref="T:System.Windows.Controls.GlobalCalendar" />.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.GlobalCalendarBlackoutDatesCollection._owner">
            <summary>
            The GlobalCalendar whose dates this object represents.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.GlobalCalendarBlackoutDatesCollection._dispatcherThread">
            <summary>
            The dispatcher thread.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendarBlackoutDatesCollection.#ctor(System.Windows.Controls.GlobalCalendar)">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.GlobalCalendarBlackoutDatesCollection" />
            class.
            </summary>
            <param name="owner">
            The <see cref="T:System.Windows.Controls.GlobalCalendar" /> whose dates
            this object represents.
            </param>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendarBlackoutDatesCollection.AddDatesInPast">
            <summary>
            Adds all dates before <see cref="P:System.DateTime.Today" /> to the
            collection.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendarBlackoutDatesCollection.Contains(System.DateTime)">
            <summary>
            Returns a value that represents whether this collection contains the
            specified date.
            </summary>
            <param name="date">The date to search for.</param>
            <returns>
            True if the collection contains the specified date; otherwise,
            false.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendarBlackoutDatesCollection.Contains(System.DateTime,System.DateTime)">
            <summary>
            Returns a value that represents whether this collection contains the
            specified range of dates.
            </summary>
            <param name="start">The start of the date range.</param>
            <param name="end">The end of the date range.</param>
            <returns>
            True if all dates in the range are contained in the collection;
            otherwise, false.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendarBlackoutDatesCollection.ContainsAny(System.Windows.Controls.CalendarDateRange)">
            <summary>
            Returns a value that represents whether this collection contains any
            date in the specified range.
            </summary>
            <param name="range">The range of dates to search for.</param>
            <returns>
            True if any date in the range is contained in the collection;
            otherwise, false.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendarBlackoutDatesCollection.ClearItems">
            <summary>
            Removes all items from the collection.
            </summary>
            <remarks>
            This implementation raises the CollectionChanged event.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendarBlackoutDatesCollection.InsertItem(System.Int32,System.Windows.Controls.CalendarDateRange)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which item should be inserted.
            </param>
            <param name="item">The object to insert.</param>
            <remarks>
            This implementation raises the CollectionChanged event.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendarBlackoutDatesCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">
            The zero-based index of the element to remove.
            </param>
            <remarks>
            This implementation raises the CollectionChanged event.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendarBlackoutDatesCollection.SetItem(System.Int32,System.Windows.Controls.CalendarDateRange)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the element to replace.
            </param>
            <param name="item">
            The new value for the element at the specified index.
            </param>
            <remarks>
            This implementation raises the CollectionChanged event.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendarBlackoutDatesCollection.InRange(System.Windows.Controls.CalendarDateRange,System.DateTime)">
            <summary>
            Returns a value indicating whether a date is included in the range.
            </summary>
            <param name="range">The range to check.</param>
            <param name="day">The date to check.</param>
            <returns>
            A value indicating whether a date is included in the range.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendarBlackoutDatesCollection.IsValid(System.Windows.Controls.CalendarDateRange)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="item">Inherited code: Requires comment 1.</param>
            <returns>Inherited code: Requires comment 2.</returns>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendarBlackoutDatesCollection.EnsureValidThread">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Primitives.GlobalCalendarButton">
            <summary>
            Represents a button on a
            <see cref="T:System.Windows.Controls.GlobalCalendar" />.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarButton._isCalendarButtonFocused">
            <summary>
            A value indicating whether the button is focused.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarButton._isInactive">
            <summary>
            A value indicating whether the button is inactive.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarButton._isSelected">
            <summary>
            A value indicating whether the button is selected.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarButton.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.Primitives.GlobalCalendarButton" />
            class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarButton.OnLoad(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the Loaded event.
            </summary>
            <param name="sender">The GlobalCalendarButton.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarButton.OnApplyTemplate">
            <summary>
            Builds the visual tree for the
            <see cref="T:System.Windows.Controls.Primitives.GlobalCalendarButton" />
            when a new template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarButton.OnCreateAutomationPeer">
            <summary>
            Returns a GlobalCalendarButtonAutomationPeer for use by the Silverlight
            automation infrastructure.
            </summary>
            <returns>
            GlobalCalendarButtonAutomationPeer for the Button object.
            </returns>
            <remarks>
            <para>
            This method creates a new GlobalCalendarButtonAutomationPeer instance if
            one has not been created for the GlobalCalendarButton; otherwise, it
            returns the GlobalCalendarButtonAutomationPeer previously created.
            </para>
            <para>
            Classes that participate in the Silverlight automation
            infrastructure must implement this method to return a class-specific
            derived class of AutomationPeer that reports information for
            automation behavior.
            </para>
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarButton.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides class handling for the MouseLeftButtonDown event that
            occurs when the left mouse button is pressed while the mouse pointer
            is over this control.
            </summary>
            <param name="e">The event data. </param>
            <exception cref="T:System.ArgumentNullException">
            e is a null reference (Nothing in Visual Basic).
            </exception>
            <remarks>
            This method marks the MouseLeftButtonDown event as handled by
            setting the MouseButtonEventArgs.Handled property of the event data
            to true when the button is enabled and its ClickMode is not set to
            Hover.  Since this method marks the MouseLeftButtonDown event as
            handled in some situations, you should use the Click event instead
            to detect a button click.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarButton.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the MouseLeftButtonUp event that occurs when
            the left mouse button is released while the mouse pointer is over
            this control. 
            </summary>
            <param name="e">The event data.</param>
            <exception cref="T:System.ArgumentNullException">
            e is a null reference (Nothing in Visual Basic).
            </exception>
            <remarks>
            This method marks the MouseLeftButtonUp event as handled by setting
            the MouseButtonEventArgs.Handled property of the event data to true
            when the button is enabled and its ClickMode is not set to Hover.
            Since this method marks the MouseLeftButtonUp event as handled in
            some situations, you should use the Click event instead to detect a
            button click.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarButton.SendMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            We need to simulate the MouseLeftButtonUp event for the
            GlobalCalendarButton that stays in Pressed state after MouseCapture is
            released since there is no actual MouseLeftButtonUp event for the
            release.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarButton.ChangeVisualState(System.Boolean)">
            <summary>
            Change to the correct visual state for the button.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="P:System.Windows.Controls.Primitives.GlobalCalendarButton.Owner">
            <summary>
            Gets or sets the GlobalCalendar associated with this button.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.GlobalCalendarButton.IsCalendarButtonFocused">
            <summary>
            Gets or sets a value indicating whether the button is focused.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.GlobalCalendarButton.IsInactive">
            <summary>
            Gets or sets a value indicating whether the button is inactive.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.GlobalCalendarButton.IsSelected">
            <summary>
            Gets or sets a value indicating whether the button is selected.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Primitives.GlobalCalendarButton.CalendarButtonMouseDown">
            <summary>
            Occurs when the left mouse button is pressed (or when the tip of the
            stylus touches the tablet PC) while the mouse pointer is over a
            UIElement.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Primitives.GlobalCalendarButton.CalendarButtonMouseUp">
            <summary>
            Occurs when the left mouse button is released (or the tip of the
            stylus is removed from the tablet PC) while the mouse (or the
            stylus) is over a UIElement (or while a UIElement holds mouse
            capture).
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.GlobalCalendarButtonAutomationPeer">
            <summary>
            Exposes
            <see cref="T:System.Windows.Controls.Primitives.GlobalCalendarButton" /> types
            to UI automation.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarButtonAutomationPeer.#ctor(System.Windows.Controls.Primitives.GlobalCalendarButton)">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Automation.Peers.GlobalCalendarButtonAutomationPeer" />
            class.
            </summary>
            <param name="owner">
            The
            <see cref="T:System.Windows.Controls.Primitives.GlobalCalendarButton" />
            to associate with this
            <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarButtonAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for this
            <see cref="T:System.Windows.Automation.Peers.GlobalCalendarButtonAutomationPeer" />.
            </summary>
            <param name="patternInterface">
            One of the enumeration values.
            </param>
            <returns>
            The object that implements the pattern interface, or null if the
            specified pattern interface is not implemented by this peer.
            </returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarButtonAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Returns the control type for the GlobalCalendarButton that is associated
            with this GlobalCalendarButtonAutomationPeer.  This method is called by
            GetAutomationControlType.
            </summary>
            <returns>A value of the AutomationControlType enumeration.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarButtonAutomationPeer.GetLocalizedControlTypeCore">
            <summary>
            Returns the localized version of the control type for the owner type
            that is associated with this GlobalCalendarButtonAutomationPeer.
            </summary>
            <returns>The string that contains the type of control.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarButtonAutomationPeer.GetHelpTextCore">
            <summary>
            Returns the string that describes the functionality of the
            GlobalCalendarButton that is associated with this
            GlobalCalendarButtonAutomationPeer.  This method is called by GetHelpText.
            </summary>
            <returns>
            The help text, or String.Empty if there is no help text.
            </returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarButtonAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the GlobalCalendarButton that is associated with this
            GlobalCalendarButtonAutomationPeer.  This method is called by
            GetClassName.
            </summary>
            <returns>
            The name of the owner type that is associated with this
            GlobalCalendarButtonAutomationPeer.
            </returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarButtonAutomationPeer.GetNameCore">
            <summary>
            Returns the text label of the GlobalCalendarButton that is associated with
            this GlobalCalendarButtonAutomationPeer. This method is called by GetName.
            </summary>
            <returns>
            The text label of the element that is associated with this
            automation peer.
            </returns>
            <remarks>
            The name property can be thought of as the string of text that a
            user would use to explain which control is being referred to.  It is
            important to have a textual representation for all controls in the
            graphical user interface (GUI) so that you can programmatically
            refer to the control in a localized manner.  The value is settable
            on control instances through the AutomationProperties.Name attached
            property.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarButtonAutomationPeer.System#Windows#Automation#Provider#IInvokeProvider#Invoke">
            <summary>
            Sends a request to activate the control and initiate its single,
            unambiguous action.
            </summary>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
            <summary>
            Adds the current element to the collection of selected items.
            </summary>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
            <summary>
            Removes the current element from the collection of selected items.
            </summary>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
            <summary>
            Clears any existing selection and then selects the current element.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarButtonAutomationPeer.OwningCalendarButton">
            <summary>
            Gets the GlobalCalendarButton to associate with this AutomationPeer.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarButtonAutomationPeer.OwningCalendar">
            <summary>
            Gets the GlobalCalendar associated with the button.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarButtonAutomationPeer.OwningCalendarAutomationPeer">
            <summary>
            Gets the automation peer for the GlobalCalendar associated with the
            button.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#Column">
            <summary>
            Gets the ordinal number of the column that contains the cell or
            item.
            </summary>
            <value>
            A zero-based ordinal number that identifies the column that contains
            the cell or item.
            </value>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#ColumnSpan">
            <summary>
            Gets the number of columns that are spanned by a cell or item.
            </summary>
            <value>
            The number of columns spanned.
            </value>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#ContainingGrid">
            <summary>
            Gets a UI Automation provider that implements
            <see cref="T:System.Windows.Automation.Provider.IGridProvider" />
            and that represents the container of the cell or item.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#Row">
            <summary>
            Gets the ordinal number of the row that contains the cell or item.
            </summary>
            <value>
            A zero-based ordinal number that identifies the row that contains
            the cell or item.
            </value>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#RowSpan">
            <summary>
            Gets the number of rows that are spanned by a cell or item.
            </summary>
            <value>
            The number of rows that are spanned.
            </value>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
            <summary>
            Gets a value indicating whether an item is selected.
            </summary>
            <value>
            True if the element is selected; otherwise, false.
            </value>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
            <summary>
            Gets the UI Automation provider that implements
            <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />
            and that acts as the container for the calling object.
            </summary>
            <value>
            The provider that supports
            <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />.
            </value>
        </member>
        <member name="T:System.Windows.Controls.GlobalCalendarDateChangedEventArgs">
            <summary>
            Provides data for the
            <see cref="E:System.Windows.Controls.Calendar.DisplayDateChanged" />
            event.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.GlobalCalendarDateChangedEventArgs.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the GlobalCalendarDateChangedEventArgs
            class.
            </summary>
            <param name="removedDate">
            The date that was previously displayed.
            </param>
            <param name="addedDate">The date to be newly displayed.</param>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendarDateChangedEventArgs.RemovedDate">
            <summary>
            Gets the date that was previously displayed.
            </summary>
            <value>
            The date previously displayed.
            </value>
        </member>
        <member name="P:System.Windows.Controls.GlobalCalendarDateChangedEventArgs.AddedDate">
            <summary>
            Gets the date to be newly displayed.
            </summary>
            <value>The new date to display.</value>
        </member>
        <member name="T:System.Windows.Controls.Primitives.GlobalCalendarDayButton">
            <summary>
            Represents a day on a <see cref="T:System.Windows.Controls.GlobalCalendar" />.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarDayButton.StateToday">
            <summary>
            Identifies the Today state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarDayButton.StateRegularDay">
            <summary>
            Identifies the RegularDay state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarDayButton.GroupDay">
            <summary>
            Name of the Day state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarDayButton.StateBlackoutDay">
            <summary>
            Identifies the BlackoutDay state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarDayButton.StateNormalDay">
            <summary>
            Identifies the NormalDay state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarDayButton.GroupBlackout">
            <summary>
            Name of the BlackoutDay state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarDayButton.DefaultContent">
            <summary>
            Default content for the GlobalCalendarDayButton.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarDayButton._ignoringMouseOverState">
            <summary>
            A value indicating whether the button should ignore the MouseOver
            visual state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarDayButton._isBlackout">
            <summary>
            A value indicating whether this is a blackout date.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarDayButton._isToday">
            <summary>
            A value indicating whether this button represents today.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarDayButton._isCurrent">
            <summary>
            A value indicating whether the button is the focused element on the
            GlobalCalendar control.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarDayButton._isInactive">
            <summary>
            A value indicating whether the button is inactive.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarDayButton._isSelected">
            <summary>
            A value indicating whether the button is selected.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarDayButton.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.Primitives.GlobalCalendarDayButton" />
            class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarDayButton.OnLoad(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the Loaded event.
            </summary>
            <param name="sender">The GlobalCalendarButton.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarDayButton.OnApplyTemplate">
            <summary>
            Builds the visual tree for the
            <see cref="T:System.Windows.Controls.Primitives.GlobalCalendarDayButton" />
            when a new template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarDayButton.OnCreateAutomationPeer">
            <summary>
            Returns a CalendarDayButtonAutomationPeer for use by the Silverlight
            automation infrastructure.
            </summary>
            <returns>
            CalendarDayButtonAutomationPeer for the Button object.
            </returns>
            <remarks>
            <para>
            This method creates a new CalendarDayButtonAutomationPeer instance
            if one has not been created for the GlobalCalendarButton; otherwise, it
            returns the CalendarDayButtonAutomationPeer previously created.
            </para>
            <para>
            Classes that participate in the Silverlight automation
            infrastructure must implement this method to return a class-specific
            derived class of AutomationPeer that reports information for
            automation behavior.
            </para>
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarDayButton.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides class handling for the MouseLeftButtonDown event that
            occurs when the left mouse button is pressed while the mouse pointer
            is over this control.
            </summary>
            <param name="e">The event data. </param>
            <exception cref="T:System.ArgumentNullException">
            e is a null reference (Nothing in Visual Basic).
            </exception>
            <remarks>
            This method marks the MouseLeftButtonDown event as handled by
            setting the MouseButtonEventArgs.Handled property of the event data
            to true when the button is enabled and its ClickMode is not set to
            Hover.  Since this method marks the MouseLeftButtonDown event as
            handled in some situations, you should use the Click event instead
            to detect a button click.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarDayButton.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the MouseLeftButtonUp event that occurs when
            the left mouse button is released while the mouse pointer is over
            this control. 
            </summary>
            <param name="e">The event data.</param>
            <exception cref="T:System.ArgumentNullException">
            e is a null reference (Nothing in Visual Basic).
            </exception>
            <remarks>
            This method marks the MouseLeftButtonUp event as handled by setting
            the MouseButtonEventArgs.Handled property of the event data to true
            when the button is enabled and its ClickMode is not set to Hover.
            Since this method marks the MouseLeftButtonUp event as handled in
            some situations, you should use the Click event instead to detect a
            button click.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarDayButton.SendMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            We need to simulate the MouseLeftButtonUp event for the
            GlobalCalendarDayButton that stays in Pressed state after MouseCapture is
            released since there is no actual MouseLeftButtonUp event for the
            release.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarDayButton.IgnoreMouseOverState">
            <summary>
            Ensure the button is not in the MouseOver state.
            </summary>
            <remarks>
            If a button is in the MouseOver state when a Popup is closed (as is
            the case when you select a date in the DatePicker control), it will
            continue to think it's in the mouse over state even when the Popup
            opens again and it's not.  This method is used to forcibly clear the
            state by changing the CommonStates state group.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarDayButton.ChangeVisualState(System.Boolean)">
            <summary>
            Change to the correct visual state for the button.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="P:System.Windows.Controls.Primitives.GlobalCalendarDayButton.Owner">
            <summary>
            Gets or sets the GlobalCalendar associated with this button.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.GlobalCalendarDayButton.Index">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.GlobalCalendarDayButton.IsBlackout">
            <summary>
            Gets or sets a value indicating whether this is a blackout date.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.GlobalCalendarDayButton.IsToday">
            <summary>
            Gets or sets a value indicating whether this button represents
            today.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.GlobalCalendarDayButton.IsCurrent">
            <summary>
            Gets or sets a value indicating whether the button is the focused
            element on the GlobalCalendar control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.GlobalCalendarDayButton.IsInactive">
            <summary>
            Gets or sets a value indicating whether the button is inactive.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.GlobalCalendarDayButton.IsSelected">
            <summary>
            Gets or sets a value indicating whether the button is selected.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Primitives.GlobalCalendarDayButton.CalendarDayButtonMouseDown">
            <summary>
            Occurs when the left mouse button is pressed (or when the tip of the
            stylus touches the tablet PC) while the mouse pointer is over a
            UIElement.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Primitives.GlobalCalendarDayButton.CalendarDayButtonMouseUp">
            <summary>
            Occurs when the left mouse button is released (or the tip of the
            stylus is removed from the tablet PC) while the mouse (or the
            stylus) is over a UIElement (or while a UIElement holds mouse
            capture).
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer">
            <summary>
            Exposes
            <see cref="T:System.Windows.Controls.Primitives.GlobalCalendarDayButton" />
            types to UI Automation.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer.#ctor(System.Windows.Controls.Primitives.GlobalCalendarDayButton)">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer" />
            class.
            </summary>
            <param name="owner">
            The
            <see cref="T:System.Windows.Controls.Primitives.GlobalCalendarDayButton" />
            instance that is associated with this
            <see cref="T:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer" />.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern implementation for this
            <see cref="T:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer" />.
            </summary>
            <param name="patternInterface">
            One of the enumeration values.
            </param>
            <returns>
            The object that implements the pattern interface, or null if the
            specified pattern interface is not implemented by this peer.
            </returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Returns the control type for the GlobalCalendarDayButton that is
            associated with this GlobalCalendarDayButtonAutomationPeer.  This method
            is called by GetAutomationControlType.
            </summary>
            <returns>A value of the AutomationControlType enumeration.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer.GetLocalizedControlTypeCore">
            <summary>
            Returns the localized version of the control type for the owner type
            that is associated with this GlobalCalendarDayButtonAutomationPeer.
            </summary>
            <returns>The string that contains the type of control.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer.GetHelpTextCore">
            <summary>
            Returns the string that describes the functionality of the
            GlobalCalendarDayButton that is associated with this
            GlobalCalendarDayButtonAutomationPeer.  This method is called by
            GetHelpText.
            </summary>
            <returns>
            The help text, or String.Empty if there is no help text.
            </returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the GlobalCalendarDayButton that is associated with
            this GlobalCalendarDayButtonAutomationPeer.  This method is called by
            GetClassName.
            </summary>
            <returns>
            The name of the owner type that is associated with this
            GlobalCalendarDayButtonAutomationPeer.
            </returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer.GetNameCore">
            <summary>
            Returns the text label of the GlobalCalendarDayButton that is associated
            with this GlobalCalendarDayButtonAutomationPeer. This method is called by
            GetName.
            </summary>
            <returns>
            The text label of the element that is associated with this
            automation peer.
            </returns>
            <remarks>
            The name property can be thought of as the string of text that a
            user would use to explain which control is being referred to.  It is
            important to have a textual representation for all controls in the
            graphical user interface (GUI) so that you can programmatically
            refer to the control in a localized manner.  The value is settable
            on control instances through the AutomationProperties.Name attached
            property.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#IInvokeProvider#Invoke">
            <summary>
            Sends a request to activate the control and to initiate its single,
            unambiguous action.
            </summary>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
            <summary>
            Adds the current element to the collection of selected items.
            </summary>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
            <summary>
            Removes the current element from the collection of selected items.
            </summary>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
            <summary>
            Clear any existing selection and then selects the current element.
            </summary>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer.EnsureSelection">
            <summary>
            Ensure selection of the GlobalCalendarDayButton is possible.
            </summary>
            <returns>
            A value indicating whether selection of the GlobalCalendarDayButton is
            possible.
            </returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#ITableItemProvider#GetColumnHeaderItems">
            <summary>
            Retrieves a collection of UI Automation providers that represent all
            the column headers that are associated with a table item or cell.
            </summary>
            <returns>A collection of UI Automation providers.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#ITableItemProvider#GetRowHeaderItems">
            <summary>
            Retrieves a collection of UI Automation providers that represent all
            the row headers that are associated with a table item or cell.
            </summary>
            <returns>A collection of UI Automation providers.</returns>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer.OwningCalendarDayButton">
            <summary>
            Gets the GlobalCalendarDayButton instance that is associated with this
            GlobalCalendarDayButtonAutomationPeer.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer.OwningCalendar">
            <summary>
            Gets the GlobalCalendar associated with the button.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer.OwningCalendarAutomationPeer">
            <summary>
            Gets the automation peer for the GlobalCalendar associated with the
            button.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#Column">
            <summary>
            Gets the ordinal number of the column that contains the cell or
            item.
            </summary>
            <value>
            A zero-based ordinal number that identifies the column that contains
            the cell or item.
            </value>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#ColumnSpan">
            <summary>
            Gets the number of columns that are spanned by a cell or item.
            </summary>
            <value>
            The number of columns.
            </value>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#ContainingGrid">
            <summary>
            Gets a UI Automation provider that implements
            <see cref="T:System.Windows.Automation.Provider.IGridProvider" />
            and that represents the container of the cell or item.
            </summary>
            <value>
            The UI Automation provider.
            </value>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#Row">
            <summary>
            Gets the ordinal number of the row that contains the cell or item.
            </summary>
            <value>
            A zero-based ordinal number that identifies the row that contains
            the cell or item.
            </value>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#RowSpan">
            <summary>
            Gets the number of rows that are spanned by a cell or item.
            </summary>
            <value>The number of rows.</value>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
            <summary>
            Gets a value indicating whether an item is selected.
            </summary>
            <value>True if the element is selected; otherwise, false.</value>
        </member>
        <member name="P:System.Windows.Automation.Peers.GlobalCalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
            <summary>
            Gets the UI Automation provider that implements
            <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />
            and that acts as the container for the calling object.
            </summary>
            <value>The UI Automation provider.</value>
        </member>
        <member name="T:System.Windows.Controls.Primitives.GlobalCalendarItem">
            <summary>
            Represents the currently displayed month or year on a
            <see cref="T:System.Windows.Controls.GlobalCalendar" />.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarItem.ElementRoot">
            <summary>
            The name of the Root template part.
            </summary>
            <remarks>
            TODO: It appears this template part is no longer used.  Verify with
            compat whether we can remove the attribute.
            </remarks>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarItem.ElementHeaderButton">
            <summary>
            The name of the HeaderButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarItem.ElementPreviousButton">
            <summary>
            The name of the PreviousButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarItem.ElementNextButton">
            <summary>
            The name of the NextButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarItem.ElementDayTitleTemplate">
            <summary>
            The name of the DayTitleTemplate template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarItem.ElementMonthView">
            <summary>
            The name of the MonthView template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarItem.ElementYearView">
            <summary>
            The name of the YearView template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarItem.ElementDisabledVisual">
            <summary>
            The name of the DisabledVisual template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarItem._headerButton">
            <summary>
            The button that allows switching between month mode, year mode, and
            decade mode. 
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarItem._nextButton">
            <summary>
            The button that displays the next page of the calendar when it is
            clicked.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarItem._previousButton">
            <summary>
            The button that displays the previous page of the calendar when it
            is clicked.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarItem._dayTitleTemplate">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarItem._monthView">
            <summary>
            Hosts the content when in month mode.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarItem._yearView">
            <summary>
            Hosts the content when in year or decade mode.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarItem._disabledVisual">
            <summary>
            The overlay for the disabled state.
            </summary>
            <remarks>
            The disabled visual isn't necessary given that we also have a
            Disabled visual state.  It's only being left in for compatability
            with existing templates.
            </remarks>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarItem._lastCalendarButton">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarItem._lastCalendarDayButton">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarItem._downEventArg">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarItem._downEventArgYearView">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarItem._isMouseLeftButtonDown">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarItem._isMouseLeftButtonDownYearView">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarItem._isTopLeftMostMonth">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarItem._isTopRightMostMonth">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.GlobalCalendarItem._currentMonth">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.Primitives.GlobalCalendarItem" />
            class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.OnApplyTemplate">
            <summary>
            Builds the visual tree for the
            <see cref="T:System.Windows.Controls.Primitives.GlobalCalendarItem" />
            when a new template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.PopulateGrids">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.UpdateDisabledGrid(System.Boolean)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="isEnabled">Inherited code: Requires comment 1.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.UpdateMonthMode">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.SetDayTitles">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.PreviousMonthDays(System.DateTime)">
            <summary>
            How many days of the previous month need to be displayed.
            </summary>
            <param name="firstOfMonth">Inherited code: Requires comment.</param>
            <returns>Inherited code: Requires comment 1.</returns>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.SetButtonState(System.Windows.Controls.Primitives.GlobalCalendarDayButton,System.DateTime)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="childButton">Inherited code: Requires comment 1.</param>
            <param name="dateToAdd">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.SetCalendarDayButtons(System.DateTime)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="firstDayOfMonth">Inherited code: Requires comment 1.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.SetMonthButtonsForYearMode">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.SetMonthModeHeaderButton">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.SetMonthModeNextButton(System.DateTime)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="firstDayOfMonth">Inherited code: Requires comment 1.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.SetMonthModePreviousButton(System.DateTime)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="firstDayOfMonth">Inherited code: Requires comment 1.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.UpdateYearMode">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.SetYearButtons(System.Int32,System.Int32)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="decade">Inherited code: Requires comment 1.</param>
            <param name="decadeEnd">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.SetYearModeHeaderButton">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.SetYearModePreviousButton">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.SetYearModeNextButton">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.UpdateYearViewSelection(System.Windows.Controls.Primitives.GlobalCalendarButton)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="calendarButton">Inherited code: Requires comment 1.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.UpdateDecadeMode">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.SetDecadeModeHeaderButton(System.Int32,System.Int32)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="decade">Inherited code: Requires comment 1.</param>
            <param name="decadeEnd">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.SetDecadeModeNextButton(System.Int32)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="decadeEnd">Inherited code: Requires comment 1.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.SetDecadeModePreviousButton(System.Int32)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="decade">Inherited code: Requires comment 1.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.Cell_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="sender">Inherited code: Requires comment 1.</param>
            <param name="e">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.Cell_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="sender">Inherited code: Requires comment 1.</param>
            <param name="e">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.Cell_MouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="sender">Inherited code: Requires comment 1.</param>
            <param name="e">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.AddSelection(System.Windows.Controls.Primitives.GlobalCalendarDayButton)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="b">Inherited code: Requires comment 1.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.Cell_MouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="sender">Inherited code: Requires comment 1.</param>
            <param name="e">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.Cell_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="sender">Inherited code: Requires comment 1.</param>
            <param name="e">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.HeaderButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="sender">Inherited code: Requires comment 1.</param>
            <param name="e">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.PreviousButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="sender">Inherited code: Requires comment 1.</param>
            <param name="e">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.NextButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="sender">Inherited code: Requires comment 1.</param>
            <param name="e">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.Month_CalendarButtonMouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="sender">Inherited code: Requires comment 1.</param>
            <param name="e">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.Month_CalendarButtonMouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="sender">Inherited code: Requires comment 1.</param>
            <param name="e">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.Month_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="sender">Inherited code: Requires comment 1.</param>
            <param name="e">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.Month_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="sender">Inherited code: Requires comment 1.</param>
            <param name="e">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.MonthView_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="sender">Inherited code: Requires comment 1.</param>
            <param name="e">Inherited code: Requires comment 2.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.GlobalCalendarItem.YearView_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="sender">Inherited code: Requires comment 1.</param>
            <param name="e">Inherited code: Requires comment 2.</param>
        </member>
        <member name="P:System.Windows.Controls.Primitives.GlobalCalendarItem.HeaderButton">
            <summary>
            Gets the button that allows switching between month mode, year mode,
            and decade mode. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.GlobalCalendarItem.NextButton">
            <summary>
            Gets the button that displays the next page of the calendar when it
            is clicked.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.GlobalCalendarItem.PreviousButton">
            <summary>
            Gets the button that displays the previous page of the calendar when
            it is clicked.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.GlobalCalendarItem.MonthView">
            <summary>
            Gets the Grid that hosts the content when in month mode.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.GlobalCalendarItem.YearView">
            <summary>
            Gets the Grid that hosts the content when in year or decade mode.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.GlobalCalendarItem.Owner">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.GlobalCalendarItem.Info">
            <summary>
            Gets the CalendarInfo that provides globalized date operations.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.GlobalCalendarItem.CurrentButton">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.GlobalSelectedDatesCollection">
            <summary>
            Represents a set of selected dates in a
            <see cref="T:System.Windows.Controls.GlobalCalendar" />.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.GlobalSelectedDatesCollection._addedItems">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.GlobalSelectedDatesCollection._dispatcherThread">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.GlobalSelectedDatesCollection._isCleared">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.GlobalSelectedDatesCollection._isRangeAdded">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.GlobalSelectedDatesCollection._owner">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.GlobalSelectedDatesCollection.#ctor(System.Windows.Controls.GlobalCalendar)">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.GlobalSelectedDatesCollection" />
            class.
            </summary>
            <param name="owner">
            The <see cref="T:System.Windows.Controls.GlobalCalendar" />
            associated with this object.
            </param>
        </member>
        <member name="M:System.Windows.Controls.GlobalSelectedDatesCollection.AddRange(System.DateTime,System.DateTime)">
            <summary>
            Adds all the dates in the specified range, which includes the first
            and last dates, to the collection.
            </summary>
            <param name="start">The first date to add to the collection.</param>
            <param name="end">The last date to add to the collection.</param>
        </member>
        <member name="M:System.Windows.Controls.GlobalSelectedDatesCollection.ClearItems">
            <summary>
            Removes all items from the collection.
            </summary>
            <remarks>
            This implementation raises the CollectionChanged event.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.GlobalSelectedDatesCollection.InsertItem(System.Int32,System.DateTime)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which item should be inserted.
            </param>
            <param name="item">The object to insert.</param>
            <remarks>
            This implementation raises the CollectionChanged event.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.GlobalSelectedDatesCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">
            The zero-based index of the element to remove.
            </param>
            <remarks>
            This implementation raises the CollectionChanged event.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.GlobalSelectedDatesCollection.SetItem(System.Int32,System.DateTime)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the element to replace.
            </param>
            <param name="item">
            The new value for the element at the specified index.
            </param>
            <remarks>
            This implementation raises the CollectionChanged event.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.GlobalSelectedDatesCollection.ClearInternal">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.GlobalSelectedDatesCollection.CheckSelectionMode">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <returns>Inherited code: Requires comment 1.</returns>
        </member>
        <member name="M:System.Windows.Controls.GlobalSelectedDatesCollection.IsValidThread">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <returns>Inherited code: Requires comment 1.</returns>
        </member>
        <member name="T:System.Windows.Controls.TreeViewItemConnectingLineInfo">
            <summary>
            Represents the necessary information to draw connecting lines in a
            TreeViewItem.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItemConnectingLineInfo.#ctor(System.Windows.Controls.TreeViewItem)">
            <summary>
            Initializes a new instance of the TreeViewItemConnectingLineInfo
            class.
            </summary>
            <param name="item">The TreeViewItem.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItemConnectingLineInfo.PositionConnectingLines">
            <summary>
            Position the connecting lines in the TreeViewItem.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItemConnectingLineInfo.PositionVerticalConnectingLine">
            <summary>
            Position the vertical connecting line in the TreeViewItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItemConnectingLineInfo.Item">
            <summary>
            Gets the TreeViewItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItemConnectingLineInfo.VerticalConnectingLine">
            <summary>
            Gets or sets the vertical connecting line of the TreeViewItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItemConnectingLineInfo.HorizontalConnectingLine">
            <summary>
            Gets or sets the horizontal connecting line of the TreeViewItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItemConnectingLineInfo.ExpanderButton">
            <summary>
            Gets or sets the expander button of the TreeViewItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItemConnectingLineInfo.Header">
            <summary>
            Gets or sets the header of the TreeViewItem.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.TreeViewConnectingLines">
            <summary>
            Provides the necessary infrastructure to enable drawing connecting
            lines between the TreeViewItems in a TreeView.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.TreeViewConnectingLines.GetConnectingLineInfo(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the value of the ConnectingLineInfo attached property for a
            specified TreeViewItem.
            </summary>
            <param name="element">
            The TreeViewItem from which the property value is read.
            </param>
            <returns>
            The ConnectingLineInfo property value for the TreeViewItem.
            </returns>
        </member>
        <member name="F:System.Windows.Controls.TreeViewConnectingLines.ConnectingLineInfoProperty">
            <summary>
            Identifies the ConnectingLineInfo dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewConnectingLines.GetIsVerticalConnectingLineOf(System.Windows.Shapes.Line)">
            <summary>
            Gets the value of the IsVerticalConnectingLineOf attached property
            for a specified Line.
            </summary>
            <param name="element">The Line from which the property value is read.</param>
            <returns>The IsVerticalConnectingLineOf property value for the Line.</returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewConnectingLines.SetIsVerticalConnectingLineOf(System.Windows.Shapes.Line,System.Windows.Controls.TreeViewItem)">
            <summary>
            Sets the value of the IsVerticalConnectingLineOf attached property to a specified Line.
            </summary>
            <param name="element">The Line to which the attached property is written.</param>
            <param name="value">The needed IsVerticalConnectingLineOf value.</param>
        </member>
        <member name="F:System.Windows.Controls.TreeViewConnectingLines.IsVerticalConnectingLineOfProperty">
            <summary>
            Identifies the IsVerticalConnectingLineOf dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewConnectingLines.OnIsVerticalConnectingLineOfPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsVerticalConnectingLineOfProperty property changed handler.
            </summary>
            <param name="d">
            Line that changed its IsVerticalConnectingLineOf TreeViewItem.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewConnectingLines.GetIsHorizontalConnectingLineOf(System.Windows.Shapes.Line)">
            <summary>
            Gets the value of the IsHorizontalConnectingLineOf attached property
            for a specified Line.
            </summary>
            <param name="element">
            The Line from which the property value is read.
            </param>
            <returns>
            The IsHorizontalConnectingLineOf property value for the Line.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewConnectingLines.SetIsHorizontalConnectingLineOf(System.Windows.Shapes.Line,System.Windows.Controls.TreeViewItem)">
            <summary>
            Sets the value of the IsHorizontalConnectingLineOf attached property
            to a specified Line.
            </summary>
            <param name="element">
            The Line to which the attached property is written.
            </param>
            <param name="value">
            The needed IsHorizontalConnectingLineOf value.
            </param>
        </member>
        <member name="F:System.Windows.Controls.TreeViewConnectingLines.IsHorizontalConnectingLineOfProperty">
            <summary>
            Identifies the IsHorizontalConnectingLineOf dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewConnectingLines.OnIsHorizontalConnectingLineOfPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsHorizontalConnectingLineOfProperty property changed handler.
            </summary>
            <param name="d">
            Line that changed its IsHorizontalConnectingLineOf TreeViewItem.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewConnectingLines.GetIsExpanderButtonOf(System.Windows.Controls.Primitives.ToggleButton)">
            <summary>
            Gets the value of the IsExpanderButtonOf attached property for a
            specified ToggleButton.
            </summary>
            <param name="element">
            The ToggleButton from which the property value is read.
            </param>
            <returns>
            The IsExpanderButtonOf property value for the ToggleButton.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewConnectingLines.SetIsExpanderButtonOf(System.Windows.Controls.Primitives.ToggleButton,System.Windows.Controls.TreeViewItem)">
            <summary>
            Sets the value of the IsExpanderButtonOf attached property to a
            specified ToggleButton.
            </summary>
            <param name="element">
            The ToggleButton to which the attached property is written.
            </param>
            <param name="value">The needed IsExpanderButtonOf value.</param>
        </member>
        <member name="F:System.Windows.Controls.TreeViewConnectingLines.IsExpanderButtonOfProperty">
            <summary>
            Identifies the IsExpanderButtonOf dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewConnectingLines.OnIsExpanderButtonOfPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsExpanderButtonOfProperty property changed handler.
            </summary>
            <param name="d">
            ToggleButton that changed its IsExpanderButtonOf TreeViewItem.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewConnectingLines.GetIsHeaderOf(System.Windows.FrameworkElement)">
            <summary>
            Gets the value of the IsHeaderOf attached property for a specified
            FrameworkElement.
            </summary>
            <param name="element">
            The FrameworkElement from which the property value is read.
            </param>
            <returns>
            The IsHeaderOf property value for the FrameworkElement.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewConnectingLines.SetIsHeaderOf(System.Windows.FrameworkElement,System.Windows.Controls.TreeViewItem)">
            <summary>
            Sets the value of the IsHeaderOf attached property to a specified
            FrameworkElement.
            </summary>
            <param name="element">
            The FrameworkElement to which the attached property is written.
            </param>
            <param name="value">The needed IsHeaderOf value.</param>
        </member>
        <member name="F:System.Windows.Controls.TreeViewConnectingLines.IsHeaderOfProperty">
            <summary>
            Identifies the IsHeaderOf dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewConnectingLines.OnIsHeaderOfPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsHeaderOfProperty property changed handler.
            </summary>
            <param name="d">
            FrameworkElement that changed its IsHeaderOf TreeViewItem.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:System.Windows.Controls.TreeViewItemCheckBox">
            <summary>
            Represents a CheckBox whose value is associated with the
            TreeViewExtensions.IsChecked attached property of TreeViewItems.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.TreeViewItemCheckBox._parent">
            <summary>
            The parent TreeViewItem of the CheckBox.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItemCheckBox.#ctor">
            <summary>
            Initializes a new instance of the TreeViewItemCheckBox class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItemCheckBox.AssociateParentTreeViewItem">
            <summary>
            Associate the parent TreeViewItem with the CheckBox.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItemCheckBox.OnIsCheckedChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Update the TreeViewItem's IsChecked property when this IsChecked
            property is changed.
            </summary>
            <param name="sender">The CheckBox.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItemCheckBox.ParentTreeViewItem">
            <summary>
            Gets the parent TreeViewItem of the CheckBox.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.TreeViewExtensions">
            <summary>
            Provides useful extensions to TreeView and TreeViewItem instances.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetParentItemsControl(System.Windows.DependencyObject)">
            <summary>
            Get the parent ItemsControl of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The parent ItemsControl of an element, or null if not found.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetAncestorItemsControls(System.Windows.DependencyObject)">
            <summary>
            Get the ancestor ItemsControls of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The ancestor ItemsControls of an element.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetParentTreeViewItem(System.Windows.Controls.TreeViewItem)">
            <summary>
            Get the parent TreeViewItem of a TreeViewItem.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            The parent TreeViewItem if found, otherwise null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetParentTreeView(System.Windows.Controls.TreeViewItem)">
            <summary>
            Get the parent TreeView of a TreeViewItem.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>The parent TreeView if found, otherwise null.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetContainers(System.Windows.Controls.TreeView)">
            <summary>
            Get the TreeViewItem containers of a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <returns>The TreeViewItem containers of a TreeView.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetContainers(System.Windows.Controls.TreeViewItem)">
            <summary>
            Get the child TreeViewItem containers of a TreeViewItem.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            The child TreeViewItem containers of a TreeViewItem.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetItemsAndContainers(System.Windows.Controls.TreeView)">
            <summary>
            Get the items and TreeViewItem containers of a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <returns>
            The items and TreeViewItem containers of a TreeView.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetItemsAndContainers(System.Windows.Controls.TreeViewItem)">
            <summary>
            Get the items and TreeViewItem containers of a TreeViewItem.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            The items and TreeViewItem containers of a TreeViewItem.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetDescendantContainers(System.Windows.Controls.TreeView)">
            <summary>
            Get the TreeViewItem containers of a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <returns>The TreeViewItem containers of a TreeView.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetDescendantContainers(System.Windows.Controls.TreeViewItem)">
            <summary>
            Get the descendant TreeViewItem containers of a TreeViewItem.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            The descendant TreeViewItem containers of a TreeViewItem.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetDescendantItemsAndContainers(System.Windows.Controls.TreeView)">
            <summary>
            Get the descendant items and TreeViewItem containers of a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <returns>
            The descendant items and TreeViewItem containers of a TreeView.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetDescendantItemsAndContainers(System.Windows.Controls.TreeViewItem)">
            <summary>
            Get the descendant items and TreeViewItem containers of a
            TreeViewItem.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            The descendant items and TreeViewItem containers of a TreeViewItem.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetDescendantItemsAndContainersIterator(System.Windows.Controls.ItemsControl)">
            <summary>
            Get the items and TreeViewItem containers of a TreeView or
            TreeViewItem.
            </summary>
            <param name="control">The TreeView or TreeViewItem.</param>
            <returns>
            The items and TreeViewItem containers of a TreeView or TreeViewItem.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetSiblingItemsAndContainers(System.Windows.Controls.TreeViewItem)">
            <summary>
            Get the sibling items and containers of the item.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>The sibling items and containers of the item.</returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetContainersFromItem(System.Windows.Controls.TreeView,System.Object)">
            <summary>
            Get the TreeViewItems already created that are used to represent the
            given item.
            </summary>
            <param name="view">The TreeView.</param>
            <param name="item">The item being represented.</param>
            <returns>
            A sequence of TreeViewItems that represent the given item, or an
            empty sequence if none were found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetContainerFromItem(System.Windows.Controls.TreeView,System.Object)">
            <summary>
            Get the TreeViewItem already created that is used to represent the
            given item.
            </summary>
            <param name="view">The TreeView.</param>
            <param name="item">The item being represented.</param>
            <returns>
            The TreeViewItems that represents the given item, or null if no
            container was found.
            </returns>
            <remarks>
            If multiple TreeViewItems represent the same item, the first item
            found via a breadth-first search will be used.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetPath(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets a path of items and TreeViewItem containers from the
            TreeViewItem to the root of the TreeView.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            A path of items and TreeViewItem containers from the TreeViewItem to
            the root of the TreeView.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetPathIterator(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets a path of items and TreeViewItem containers from the
            TreeViewItem to the root of the TreeView.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            A path of items and TreeViewItem containers from the TreeViewItem to
            the root of the TreeView.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetItem(System.Windows.Controls.TreeViewItem)">
            <summary>
            Get the item wrapped by this container.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            The item wrapped by the container, or null if not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetParentItem(System.Windows.Controls.TreeView,System.Object)">
            <summary>
            Get the item of the parent container for a specified
            <paramref name="item" />.
            </summary>
            <param name="view">
            The TreeView containing the <paramref name="item" />.
            </param>
            <param name="item">The child item.</param>
            <returns>
            The item of the parent container for the specified
            <paramref name="item" />, or null if not found.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetIsRoot(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets a value indicating whether the TreeViewItem is a root of its
            TreeView.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            A value indicating whether the TreeViewItem is a root of its
            TreeView.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetIsLeaf(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets a value indicating whether the TreeViewItem is a leaf in its
            TreeView.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            A value indicating whether the TreeViewItem is a leaf in its
            TreeView.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetDepth(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the depth of a TreeViewItem in its TreeView (using a zero-based
            index).
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            The depth of a TreeViewItem in its TreeView (using a zero-based
            index).
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="item" /> is not in a TreeView.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetSelectedContainer(System.Windows.Controls.TreeView)">
            <summary>
            Get the selected TreeViewItem in a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <returns>
            The selected TreeViewItem, or null if no selected item found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.SetSelectedContainer(System.Windows.Controls.TreeView,System.Windows.Controls.TreeViewItem)">
            <summary>
            Sets the selected TreeViewItem of a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <param name="item">The TreeViewItem to select.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.ClearSelection(System.Windows.Controls.TreeView)">
            <summary>
            Clear the selection of the TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.SelectItem(System.Windows.Controls.TreeView,System.Object)">
            <summary>
            Select an item in the TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <param name="item">The item to select.</param>
            <returns>
            A value indicating whether the item was successfully set as the
            TreeView's SelectedItem.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetSelectedPath(System.Windows.Controls.TreeView)">
            <summary>
            Gets the path to the TreeView's selected item.
            </summary>
            <param name="view">The TreeView.</param>
            <returns>The path to the TreeView's selected item.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.ExpandOrCollapseAll(System.Windows.Controls.TreeViewItem,System.Boolean,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Recursively expand or collapse the TreeViewItem and all of its
            descendants.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <param name="expand">
            A value indicating whether to expand or collapse.
            </param>
            <param name="depth">
            The number of levels that have already been collapsed or expanded.
            This is used in conjunction with the optional maximumDepth to only
            expand a specified number of layers.
            </param>
            <param name="maximumDepth">
            An optional depth that defines the number of layers to expand or
            collapse.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.ExpandOrCollapseAll(System.Windows.Controls.TreeView,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Expand or collapse all of the descendants of the TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <param name="expand">
            A value indicating whether to expand or collapse.
            </param>
            <param name="maximumDepth">
            An optional depth that defines the number of layers to expand or
            collapse.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.ExpandAll(System.Windows.Controls.TreeView)">
            <summary>
            Expand all of the items in a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.CollapseAll(System.Windows.Controls.TreeView)">
            <summary>
            Collapse all of the items in a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.ExpandToDepth(System.Windows.Controls.TreeView,System.Int32)">
            <summary>
            Expand a specified number of layers in a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <param name="depth">The number of layers to expand.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.ExpandPathToRoot(System.Windows.Controls.TreeViewItem,System.Boolean)">
            <summary>
            Expand a path from the given item to the root of it's TreeView.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <param name="collapseSiblings">
            A value indicating whether to collapse siblings while expanding the
            path.  This will result in only the path from the item to the root
            being expanded.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.ExpandPath(System.Windows.Controls.TreeViewItem)">
            <summary>
            Expand a path from the TreeViewItem to the root of the TreeView.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.ExpandSelectedPath(System.Windows.Controls.TreeView)">
            <summary>
            Expand the path from the SelectedItem to the root of the TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.CollapseAllButSelectedPath(System.Windows.Controls.TreeView)">
            <summary>
            Collapse all TreeViewItems except those along the path from the
            TreeView's SelectedItem to the root of the TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.ExpandPath(System.Windows.Controls.TreeView,System.Object[])">
            <summary>
            Expand the given path of items starting from the TreeView's root.
            </summary>
            <param name="view">The TreeView.</param>
            <param name="items">
            The sequence of items corresponding to the path to expand.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="items" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.ExpandPath``1(System.Windows.Controls.TreeView,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Expand the given path of items starting from the TreeView's root.
            </summary>
            <typeparam name="T">
            The type of items provided in <paramref name="items" />.
            </typeparam>
            <param name="view">The TreeView.</param>
            <param name="items">
            The sequence of items corresponding to the path to expand.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="items" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.ExpandPath``1(System.Windows.Controls.TreeView,System.Func{System.Object,``0},``0[])">
            <summary>
            Expand the given path of items starting from the TreeView's root.
            </summary>
            <typeparam name="T">
            The type of items provided in <paramref name="items" />.
            </typeparam>
            <param name="view">The TreeView.</param>
            <param name="comparisonSelector">
            A function that takes a TreeViewItem's item and returns a value to
            compare against elements of the given <paramref name="items" />.
            The item itself will be used if 
            <paramref name="comparisonSelector" /> is null.
            </param>
            <param name="items">
            The sequence of items corresponding to the path to expand.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="items" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.ExpandPath``1(System.Windows.Controls.TreeView,System.Func{System.Object,``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Expand the given path of items starting from the TreeView's root.
            </summary>
            <typeparam name="T">
            The type of items provided in <paramref name="items" />.
            </typeparam>
            <param name="view">The TreeView.</param>
            <param name="comparisonSelector">
            A function that takes a TreeViewItem's item and returns a value to
            compare against elements of the given <paramref name="items" />.
            The item itself will be used if 
            <paramref name="comparisonSelector" /> is null.
            </param>
            <param name="items">
            The sequence of items corresponding to the path to expand.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="items" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetIsChecked(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the value of the IsChecked attached property for a specified
            TreeViewItem.
            </summary>
            <param name="element">
            The TreeViewItem from which the property value is read.
            </param>
            <returns>
            The IsChecked property value for the TreeViewItem.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.SetIsChecked(System.Windows.Controls.TreeViewItem,System.Nullable{System.Boolean})">
            <summary>
            Sets the value of the IsChecked attached property to a specified
            TreeViewItem.
            </summary>
            <param name="element">
            The TreeViewItem to which the attached property is written.
            </param>
            <param name="value">The needed IsChecked value.</param>
        </member>
        <member name="F:System.Windows.Controls.TreeViewExtensions.IsCheckedProperty">
            <summary>
            Identifies the IsChecked dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.OnIsCheckedPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsCheckedProperty property changed handler.
            </summary>
            <param name="d">The TreeViewItem that changed IsChecked.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetAssociatedCheckBox(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the value of the AssociatedCheckBox attached property for a
            specified TreeViewItem.
            </summary>
            <param name="element">
            The TreeViewItem from which the property value is read.
            </param>
            <returns>
            The AssociatedCheckBox property value for the TreeViewItem.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.SetAssociatedCheckBox(System.Windows.Controls.TreeViewItem,System.Windows.Controls.TreeViewItemCheckBox)">
            <summary>
            Sets the value of the AssociatedCheckBox attached property to a
            specified TreeViewItem.
            </summary>
            <param name="element">
            The TreeViewItem to which the attached property is written.
            </param>
            <param name="value">The needed AssociatedCheckBox value.</param>
        </member>
        <member name="F:System.Windows.Controls.TreeViewExtensions.AssociatedCheckBoxProperty">
            <summary>
            Identifies the AssociatedCheckBox dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.OnAssociatedCheckBoxPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            AssociatedCheckBoxProperty property changed handler.
            </summary>
            <param name="d">
            The TreeViewItem that changed its AssociatedCheckBox.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetCheckedItemsAndContainers(System.Windows.Controls.TreeView)">
            <summary>
            Get the sequence of items and containers with their IsChecked
            property set to True.
            </summary>
            <param name="view">The TreeView.</param>
            <returns>
            The sequence of items and containers with their IsChecked property
            set to True.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view"/> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetCheckedItemsAndContainers(System.Windows.Controls.TreeView,System.Boolean)">
            <summary>
            Get the sequence of items and containers with their IsChecked
            property set to True.
            </summary>
            <param name="view">The TreeView.</param>
            <param name="includeIndeterminate">
            A value indicating whether to include TreeViewItems with an
            indeterminate IsChecked value.
            </param>
            <returns>
            The sequence of items and containers with their IsChecked property
            set to True or also set to null if indeterminate values are
            included.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view"/> is null.
            </exception>
        </member>
        <member name="P:System.Windows.Controls.TreeViewExtensions.CancelIsCheckedChangedBubbling">
            <summary>
            Gets or sets a value indicating whether recursive calls to
            OnIsCheckedPropertyChanged should ignore their notifications or
            process them accordingly.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeViewExtensions.CancelIsCheckedChangedChildNotifications">
            <summary>
            Gets or sets a value indicating whether recursive calls to
            OnIsCheckedPropertyChanged should update their children when their
            IsChecked value has changed.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ObjectCollection">
            <summary>
            Implements a collection of objects.
            </summary>
            <remarks>
            ObjectCollection is intended to simplify the task of populating an
            ItemsSource property in XAML.
            </remarks>
            <example>
            <code language="XAML">
            <![CDATA[
            <ItemsControl.ItemsSource>
                <controls:ObjectCollection>
                    <TextBlock Text="Object 1" />
                    <TextBlock Text="Object 2" />
                </controls:ObjectCollection>
            </ItemsControl.ItemsSource>
            ]]>
            </code>
            </example>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.ObjectCollection.#ctor">
            <summary>
            Initializes a new instance of the ObjectCollection class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ObjectCollection.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the ObjectCollection class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new ObjectCollection.</param>
        </member>
        <member name="T:System.Windows.Controls.TreeViewItemIndentationConverter">
            <summary>
            Used to convert TreeViewItems into a value based on their depth in
            the TreeView.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItemIndentationConverter.#ctor">
            <summary>
            Initializes a new instance of the TreeViewItemIndentationConverter
            class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItemIndentationConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a TreeViewItem into a value based on the depth of the item
            in the TreeView.
            </summary>
            <param name="value">The TreeViewItem.</param>
            <param name="targetType">
            The indentation type to convert to (such as Thickness or double).
            </param>
            <param name="parameter">
            The number of pixels to indent each level of the TreeView.  A
            default value of 15.0 will be used if no parameter is provided.
            </param>
            <param name="culture">
            The culture used to convert the TreeViewItem.
            </param>
            <returns>
            A value based on the depth of the item in the TreeView.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItemIndentationConverter.WrapIndentation(System.Double,System.Type)">
            <summary>
            Wrap the indentation in the desired type.
            </summary>
            <param name="indentation">
            The number of pixels to indent the TreeViewItem.
            </param>
            <param name="targetType">
            The indentation type to convert to (such as Thickness or double).
            </param>
            <returns>
            A value based on the depth of the item in the TreeView.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItemIndentationConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert an indentation back into a TreeViewItem.  This always throws
            a NotSupportedException.
            </summary>
            <param name="value">The indentation.</param>
            <param name="targetType">The type of the indentation.</param>
            <param name="parameter">
            The number of pixels to indent each level of the TreeView.
            </param>
            <param name="culture">
            The culture used to convert the TreeViewItem.
            </param>
            <returns>Always throws a NotSupportedException.</returns>
        </member>
        <member name="T:System.Windows.Controls.OrientedSize">
            <summary>
            The OrientedSize structure is used to abstract the growth direction from
            the layout algorithms of WrapPanel.  When the growth direction is
            oriented horizontally (ex: the next element is arranged on the side of
            the previous element), then the Width grows directly with the placement
            of elements and Height grows indirectly with the size of the largest
            element in the row.  When the orientation is reversed, so is the
            directional growth with respect to Width and Height.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.OrientedSize._orientation">
            <summary>
            The orientation of the structure.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.OrientedSize._direct">
            <summary>
            The size dimension that grows directly with layout placement.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.OrientedSize._indirect">
            <summary>
            The size dimension that grows indirectly with the maximum value of
            the layout row or column.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.OrientedSize.#ctor(System.Windows.Controls.Orientation)">
            <summary>
            Initializes a new OrientedSize structure.
            </summary>
            <param name="orientation">Orientation of the structure.</param>
        </member>
        <member name="M:System.Windows.Controls.OrientedSize.#ctor(System.Windows.Controls.Orientation,System.Double,System.Double)">
            <summary>
            Initializes a new OrientedSize structure.
            </summary>
            <param name="orientation">Orientation of the structure.</param>
            <param name="width">Un-oriented width of the structure.</param>
            <param name="height">Un-oriented height of the structure.</param>
        </member>
        <member name="P:System.Windows.Controls.OrientedSize.Orientation">
            <summary>
            Gets the orientation of the structure.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.OrientedSize.Direct">
            <summary>
            Gets or sets the size dimension that grows directly with layout
            placement.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.OrientedSize.Indirect">
            <summary>
            Gets or sets the size dimension that grows indirectly with the
            maximum value of the layout row or column.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.OrientedSize.Width">
            <summary>
            Gets or sets the width of the size.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.OrientedSize.Height">
            <summary>
            Gets or sets the height of the size.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.WrapPanel">
            <summary>
            Positions child elements sequentially from left to right or top to
            bottom.  When elements extend beyond the panel edge, elements are
            positioned in the next row or column.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.WrapPanel._ignorePropertyChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.WrapPanel.ItemHeightProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.WrapPanel.ItemHeight" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.WrapPanel.ItemHeight" />
            dependency property
            </value>
        </member>
        <member name="F:System.Windows.Controls.WrapPanel.ItemWidthProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.WrapPanel.ItemWidth" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.WrapPanel.ItemWidth" />
            dependency property.
            </value>
        </member>
        <member name="F:System.Windows.Controls.WrapPanel.OrientationProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.WrapPanel.Orientation" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.WrapPanel.Orientation" />
            dependency property.
            </value>
        </member>
        <member name="M:System.Windows.Controls.WrapPanel.OnOrientationPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OrientationProperty property changed handler.
            </summary>
            <param name="d">WrapPanel that changed its Orientation.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.WrapPanel.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.WrapPanel" /> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.WrapPanel.OnItemHeightOrWidthPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed handler for ItemHeight and ItemWidth.
            </summary>
            <param name="d">
            WrapPanel that changed its ItemHeight or ItemWidth.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.WrapPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the child elements of a
            <see cref="T:System.Windows.Controls.WrapPanel" /> in anticipation
            of arranging them during the
            <see cref="M:System.Windows.Controls.WrapPanel.ArrangeOverride(System.Windows.Size)" />
            pass.
            </summary>
            <param name="constraint">
            The size available to child elements of the wrap panel.
            </param>
            <returns>
            The size required by the
            <see cref="T:System.Windows.Controls.WrapPanel" /> and its 
            elements.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.WrapPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges and sizes the
            <see cref="T:System.Windows.Controls.WrapPanel" /> control and its
            child elements.
            </summary>
            <param name="finalSize">
            The area within the parent that the
            <see cref="T:System.Windows.Controls.WrapPanel" /> should use 
            arrange itself and its children.
            </param>
            <returns>
            The actual size used by the
            <see cref="T:System.Windows.Controls.WrapPanel" />.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.WrapPanel.ArrangeLine(System.Int32,System.Int32,System.Nullable{System.Double},System.Double,System.Double)">
            <summary>
            Arrange a sequence of elements in a single line.
            </summary>
            <param name="lineStart">
            Index of the first element in the sequence to arrange.
            </param>
            <param name="lineEnd">
            Index of the last element in the sequence to arrange.
            </param>
            <param name="directDelta">
            Optional fixed growth in the primary direction.
            </param>
            <param name="indirectOffset">
            Offset of the line in the indirect direction.
            </param>
            <param name="indirectGrowth">
            Shared indirect growth of the elements on this line.
            </param>
        </member>
        <member name="P:System.Windows.Controls.WrapPanel.ItemHeight">
            <summary>
            Gets or sets the height of the layout area for each item that is
            contained in a <see cref="T:System.Windows.Controls.WrapPanel" />.
            </summary>
            <value>
            The height applied to the layout area of each item that is contained
            within a <see cref="T:System.Windows.Controls.WrapPanel" />.  The
            default value is <see cref="F:System.Double.NaN" />.
            </value>
        </member>
        <member name="P:System.Windows.Controls.WrapPanel.ItemWidth">
            <summary>
            Gets or sets the width of the layout area for each item that is
            contained in a <see cref="T:System.Windows.Controls.WrapPanel" />.
            </summary>
            <value>
            The width that applies to the layout area of each item that is
            contained in a <see cref="T:System.Windows.Controls.WrapPanel" />.
            The default value is <see cref="F:System.Double.NaN" />.
            </value>
        </member>
        <member name="P:System.Windows.Controls.WrapPanel.Orientation">
            <summary>
            Gets or sets the direction in which child elements are arranged.
            </summary>
            <value>
            One of the <see cref="T:System.Windows.Controls.Orientation" />
            values.  The default is
            <see cref="F:System.Windows.Controls.Orientation.Horizontal" />.
            </value>
        </member>
        <member name="T:System.Windows.Controls.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Automation_OperationCannotBePerformed">
            <summary>
              Looks up a localized string similar to Cannot perform operation..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Calendar_CheckSelectionMode_InvalidOperation">
            <summary>
              Looks up a localized string similar to The SelectedDates collection can be changed only in a multiple selection mode. Use the SelectedDate in a single selection mode..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Calendar_NextButtonName">
            <summary>
              Looks up a localized string similar to next button.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Calendar_OnDisplayModePropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to DisplayMode value is not valid..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Calendar_OnFirstDayOfWeekChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to FirstDayOfWeek value is not valid..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Calendar_OnSelectedDateChanged_InvalidOperation">
            <summary>
              Looks up a localized string similar to The SelectedDate property cannot be set when the selection mode is None..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Calendar_OnSelectedDateChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to SelectedDate value is not valid..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Calendar_OnSelectionModeChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to SelectionMode value is not valid..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Calendar_PreviousButtonName">
            <summary>
              Looks up a localized string similar to previous button.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Calendar_UnSelectableDates">
            <summary>
              Looks up a localized string similar to Value is not valid..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.CalendarAutomationPeer_BlackoutDayHelpText">
            <summary>
              Looks up a localized string similar to Blackout Day - {0}.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.CalendarAutomationPeer_CalendarButtonLocalizedControlType">
            <summary>
              Looks up a localized string similar to calendar button.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.CalendarAutomationPeer_DayButtonLocalizedControlType">
            <summary>
              Looks up a localized string similar to day button.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.CalendarAutomationPeer_DecadeMode">
            <summary>
              Looks up a localized string similar to Decade.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.CalendarAutomationPeer_MonthMode">
            <summary>
              Looks up a localized string similar to Month.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.CalendarAutomationPeer_YearMode">
            <summary>
              Looks up a localized string similar to Year.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.CalendarCollection_MultiThreadedCollectionChangeNotSupported">
            <summary>
              Looks up a localized string similar to This type of Collection does not support changes to its SourceCollection from a thread different from the Dispatcher thread..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.CalendarInfo_DateFormatInfoRequired">
            <summary>
              Looks up a localized string similar to DateFormatInfo cannot be null..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.DateTimeTypeConverter_FormatException">
            <summary>
              Looks up a localized string similar to DateTime value is in the wrong format..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.DockPanel_OnDockPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid Dock value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.DragDropTarget_RemoveItemAtIndex_RemovalByIndexNotSupported">
            <summary>
              Looks up a localized string similar to Removal by index is not supported..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Expander_OnExpandDirectionPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid ExpandDirection value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ItemDragEventArgs_RemoveDataFromSource_CannotRemoveDataBecauseMoveIsNotAnAllowedEffect">
            <summary>
              Looks up a localized string similar to This operation should only be invoked when a Move operation is in progress and Move is not an allowed effect..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ItemDragEventArgs_RemoveDataFromSource_DataHasAlreadyBeenRemovedFromSource">
            <summary>
              Looks up a localized string similar to Data has already been removed from the drag source..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ListBoxDragDropTarget_OnContentChanged_ContentMustBeAListBox">
            <summary>
              Looks up a localized string similar to The content property must be a ListBox..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.PanelDragDropTarget_OnContentChanged_ContentMustBePanel">
            <summary>
              Looks up a localized string similar to Content must be a Panel..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ParameterCollection_EnsureCanChangeCollection_IsReadOnly">
            <summary>
              Looks up a localized string similar to ConstructorParameters cannot be changed because ObjectDataProvider is using a user-assigned ObjectInstance..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ResolveElementNameEventArgs_ctor_ElementNameEmpty">
            <summary>
              Looks up a localized string similar to The elementName should not be empty..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TreeViewDragDropTarget_set_Content_ContentMustBeATreeView">
            <summary>
              Looks up a localized string similar to The content property must of type TreeView..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TreeViewExtensions_GetDepth_NotInTreeView">
            <summary>
              Looks up a localized string similar to The item is not in a TreeView..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TypeConverters_Convert_CannotConvert">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is unable to convert &apos;{1}&apos; to &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TypeConverters_ConvertFrom_CannotConvertFromType">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; cannot convert from &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.UIElementExtendedRoutedEventExtensions_TypeOfHandlerMustBeDragEventHandler">
            <summary>
              Looks up a localized string similar to Type of the event handler must be DragEventHandler..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.UIElementExtendedRoutedEventExtensions_TypeOfHandlerMustBeGiveFeedbackEventHandler">
            <summary>
              Looks up a localized string similar to Type of the event handler must be GiveFeedbackEventHandler..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.UIElementExtendedRoutedEventExtensions_TypeOfHandlerMustBeQueryContinueDragEventHandler">
            <summary>
              Looks up a localized string similar to Type of the event handler must be QueryContinueDragEventHandler..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.WrapPanel_OnItemHeightOrWidthPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid length value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.WrapPanel_OnOrientationPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid Orientation value &apos;{0}&apos;..
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\Microsoft.Expression.Interactions.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Interactions</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Interactivity.Core.ActionCommand">
            <summary>
            A basic implementation of ICommand that wraps a method that takes no parameters or a method that takes one parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Interactivity.Core.ActionCommand"/> class.
            </summary>
            <param name="action">The action.</param>
            <remarks>Use this constructor to provide an action that ignores the ICommand parameter.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor(System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Interactivity.Core.ActionCommand"/> class.
            </summary>
            <param name="objectAction">An action that takes an object parameter.</param>
            <remarks>Use this constructor to provide an action that uses the object parameter passed by the Execute method.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            Always returns true.
            </returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether the command should execute. Will not be fired by ActionCommand.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.CallMethodAction">
            <summary>
            Calls a method on a specified object when invoked.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.CallMethodAction.Invoke(System.Object)">
            <summary>
            Invokes the action.
            </summary>
            <param name="parameter">The parameter to the action. If the Action does not require a parameter, the parameter may be set to a null reference.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.CallMethodAction.OnAttached">
            <summary>
            Called after the action is attached to an AssociatedObject.
            </summary>
            <remarks>Override this to hook up functionality to the AssociatedObject.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.CallMethodAction.OnDetaching">
            <summary>
            Called when the action is getting detached from its AssociatedObject, but before it has actually occurred.
            </summary>
            <remarks>Override this to unhook functionality from the AssociatedObject.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.CallMethodAction.TargetObject">
            <summary>
            The object that exposes the method of interest. This is a dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.CallMethodAction.MethodName">
            <summary>
            The name of the method to invoke. This is a dependency property.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ChangePropertyAction">
            <summary>
            An action that will change a specified property to a specified value when invoked.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Interactivity.Core.ChangePropertyAction"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Invoke(System.Object)">
            <summary>
            Invokes the action.
            </summary>
            <param name="parameter">The parameter to the action. If the Action does not require a parameter, the parameter may be set to a null reference.</param>
            <exception cref="T:System.ArgumentException">A property with <c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName"/> could not be found on the Target.</exception>
            <exception cref="T:System.ArgumentException">Could not set <c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName"/> to the value specified by <c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Value"/>.</exception>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName">
            <summary>
            Gets or sets the name of the property to change. This is a dependency property.
            </summary>
            <value>The name of the property to change.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Value">
            <summary>
            Gets or sets the value to set. This is a dependency property.
            </summary>
            <value>The value to set.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Duration">
            <summary>
            Gets or sets the duration of the animation that will occur when the ChangePropertyAction is invoked.  This is a dependency property.
            If the duration is unset, no animation will be applied.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Increment">
            <summary>
            Increment by Value if true; otherwise, set the value directly. If the property cannot be incremented, it will instead try to set the value directly.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ComparisonCondition">
            <summary>
            Represent one ternary condition
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ComparisonCondition.Evaluate">
            <summary>
            Method that evaluate the condition. Note that this method can throw ArgumentException if the operator is
            incompatible with the type. For instance, operator LessThan, LessThanOrEqual, GreaterThan, GreaterThanOrEqual
            require both operators to implement IComparable. 
            </summary>
            <returns>return true if the condition has been met, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ComparisonCondition.EnsureBindingUpToDate">
            <summary>
            Ensure that any binding on DP operands are up to date.  
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ComparisonCondition.LeftOperand">
            <summary>
            Get or Set the left operand
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ComparisonCondition.RightOperand">
            <summary>
            Get or Set the right operand
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ComparisonCondition.Operator">
            <summary>
            Get or Set the comparison operator. 
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ComparisonConditionType">
            <summary>
            enumeration of different comparison operator
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.ComparisonLogic.EvaluateImpl(System.Object,Microsoft.Expression.Interactivity.Core.ComparisonConditionType,System.Object)">
            <summary>
            This method evaluates operands 
            </summary>
            <param name="leftOperand">left operand from the LeftOperand property</param>
            <param name="operatorType">operator from Operator property</param>
            <param name="rightOperand">right operand from the RightOperand property</param>
            <returns>return true if the condition is met, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.ComparisonLogic.EvaluateComparable(System.IComparable,Microsoft.Expression.Interactivity.Core.ComparisonConditionType,System.IComparable)">
            <summary>
            Evalute operands that both implement IComparable interface
            </summary>
            <param name="leftOperand">left operand from the LeftOperand property</param>
            <param name="operatorType">operator from Operator property</param>
            <param name="rightOperand">right operand from the LeftOperand property</param>
            <returns>true if the condition is met, false otherwise</returns>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ForwardChaining">
            <summary>
            Forward chaining
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ConditionalExpression">
            <summary>
            Represent a conditional expression that we set on a ConditionBehavior.Condition property. 
            Contains a list of conditions that gets evaluated in order return true or false for ICondition.Evaluate(). 
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ICondition">
            <summary>
            Interface that a given object must implement in order to be 
            set on a ConditionBehavior.Condition property. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ConditionalExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Interactivity.Core.ConditionalExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ConditionalExpression.Evaluate">
            <summary>
            Goes through the Conditions collection and evalute each condition based on 
            ForwardChaining property.
            </summary>
            <returns>true, conditions are met, false conditions are not met</returns>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ConditionalExpression.ForwardChaining">
            <summary>
            Get or set forward chaining for the conditions
            If forward chaining is set to ForwardChaining.And, all conditions must be met.
            If forward chaining is set to ForwardChaining.or, only one condition must be met.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ConditionalExpression.Conditions">
            <summary>
            Return the Condition collections
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ConditionBehavior">
            <summary>
            A behavior that attach to a trigger and control the conditions
            to fire the actions. 
            </summary>
            
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ConditionBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Interactivity.Core.ConditionBehavior"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ConditionBehavior.OnPreviewInvoke(System.Object,System.Windows.Interactivity.PreviewInvokeEventArgs)">
            <summary>
            Event handler listening to the preview invoke event fired by 
            the trigger. Setting PreviewInvokeEventArgs.Cancelling to true will
            cancel the invocation.
            </summary>
            <param name="sender">the trigger base objec</param>
            <param name="e">object of type PreviewInvokeEventArgs where e.Cancelling can be set to true</param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ConditionBehavior.Condition">
            <summary>
            Get or Set the IConditon object on behavior
            </summary>
            <value>The name of the condition to change.</value>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.DataBindingHelper">
            <summary>
            Helper class for managing binding expression on dependency objects
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.DataBindingHelper.EnsureDataBindingUpToDateOnMembers(System.Windows.DependencyObject)">
            <summary>
            Ensure that all DP on an action with binding expression are
            up to date. DataTrigger fires during data binding phase. Since
            actions are children of the trigger, any bindings on the action
            may not be up to date. This routine is called before the action
            is invoked in order to guarantee that all bindings are up to date
            with the most current data. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.DataBindingHelper.EnsureDataBindingOnActionsUpToDate(System.Windows.Interactivity.TriggerBase{System.Windows.DependencyObject})">
            <summary>
            Ensures that all binding expression on actions are up to date
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.DataBindingHelper.EnsureBindingUpToDate(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
             This helper function ensures that if a dependency property on a dependency object
             has a binding expression, the binding expression is up to date. 
            </summary>
            <param name="target"></param>
            <param name="dp"></param>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.DataStateBehavior">
            <summary>
            Toggles between two states based on a conditional statement.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.DataStateBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
            <remarks>Override this to hook up functionality to the AssociatedObject.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.DataStateBehavior.IsElementLoaded(System.Windows.FrameworkElement)">
            <summary>
            A helper function to take the place of FrameworkElement.IsLoaded, as Silverlight doesn't have a property like that.
            </summary>
            <param name="element">The element of interest.</param>
            <returns>True if the element has been loaded; otherwise, false</returns>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.DataStateBehavior.Binding">
            <summary>
            Gets or sets the binding that produces the property value of the data object. This is a dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.DataStateBehavior.Value">
            <summary>
            Gets or sets the value to be compared with the property value of the data object. This is a dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.DataStateBehavior.TrueState">
            <summary>
            Gets or sets the name of the visual state to transition to when the condition is met. This is a dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.DataStateBehavior.FalseState">
            <summary>
            Gets or sets the name of the visual state to transition to when the condition is not met. This is a dependency property.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.DataStoreChangedTrigger">
            <summary>
            Trigger designed to be binded on a data store property. Fires when the property changes
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.PropertyChangedTrigger">
             <summary>
             Represents a trigger that performs actions when the bound data have changed. 
             </summary>
            UA_REVIEW:chabiss
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.PropertyChangedTrigger.EvaluateBindingChange(System.Object)">
            <summary>
            Called when the binding property has changed. 
            UA_REVIEW:chabiss
            </summary>
            <param name="args"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> argument.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.PropertyChangedTrigger.OnAttached">
            <summary>
            Called after the trigger is attached to an AssociatedObject.
            UA_REVIEW:chabiss
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.PropertyChangedTrigger.OnDetaching">
            <summary>
            Called when the trigger is being detached from its AssociatedObject, but before it has actually occurred.
            UA_REVIEW:chabiss
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.PropertyChangedTrigger.Binding">
             <summary>
             Binding object the trigger will listen to and fire on change.  
             </summary>
            UA_REVIEW:chabiss
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.DataTrigger">
            <summary>
            Represents a trigger that performs actions when the bound data meets a specified condition.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.DataTrigger.EvaluateBindingChange(System.Object)">
            <summary>
            Called when the binding property has changed. 
            UA_REVIEW:chabiss
            </summary>
            <param name="args"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> argument.</param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.DataTrigger.Value">
            <summary>
            Gets or sets the value to be compared with the property value of the data object. This is a dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.DataTrigger.Comparison">
            <summary>
            Gets or sets the type of comparison to be performed between the specified values. This is a dependency property.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager">
            <summary>
            ExtendedVisualStateManager is a custom VisualStateManager that can smooth out the animation of layout properties.
            With this custom VisualStateManager, states can include changes to properties like Grid.Column, can change element heights to or from Auto, and so on.
            These changes will be smoothed out over time using the GeneratedDuration and GeneratedEasingFunction of the appropriate transition.
            See the "VisualStateManager overrides" region below for a general description of the algorithm.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.UseFluidLayoutProperty">
            <summary>
            A VisualStateGroup can use Fluid Layout or not.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.RuntimeVisibilityPropertyProperty">
            <summary>
            Visibility is shadowed by a custom attached property at runtime.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValuesProperty">
            <summary>
            A VisualStateGroup keeps a list of these original values in an attached property.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutStoryboardProperty">
            <summary>
            For every state, the layout-specific properties get extracted and then are attached to the state. These properties are removed from the state itself.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CurrentStateProperty">
            <summary>
            Remember the current state.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.TransitionEffectProperty">
            <summary>
            The TransitionEffect to use when the state changes.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.TransitionEffectStoryboardProperty">
            <summary>
            The TransitionEffectStoryboard in use during the state change.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.DidCacheBackgroundProperty">
            <summary>
            The cached background in use during the state change.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CachedBackgroundProperty">
            <summary>
            The cached background in use during the state change.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.MovingElements">
            <summary>
            This is the set of elements that are currently in motion.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutTransitionStoryboard">
            <summary>
            This is the storyboard that is animating the transition.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutProperties">
            <summary>
            This list contains all the known layout properties.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.StopAnimations">
            <summary>
            Stop the animation and replace the layout changes that were made to support that animation.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.FindTransition(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState)">
            <summary>
            Locate the transition that VisualStateManager will use to animate the change, so that the layout animation can match the duration and ease.
            </summary>
            <param name="group">The group in which the transition is taking place</param>
            <param name="previousState">The state that you are coming from</param>
            <param name="state">The state you are going to</param>
            <returns>The transition</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.ExtractLayoutStoryboard(System.Windows.VisualState)">
            <summary>
            Remove all layout-affecting properties from the Storyboard for the state and cache them in an attached property.
            </summary>
            <param name="state">The state you are moving to</param>
            <returns>A Storyboard containing the layout properties in that state</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.FindTargetElements(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            The set of target elements is the set of all elements that might have moved in a layout transition. This set is the closure of:
             - Elements with layout properties animated in the state.
             - Siblings of elements in the set.
             - Parents of elements in the set.
             
            Subsequent code will check these rectangles both before and after the layout change.
            </summary>
            <param name="control">The control whose layout is changing state</param>
            <param name="layoutStoryboard">The storyboard containing the layout changes</param>
            <param name="originalValueRecords">Any previous values from previous state navigations that might be reverted</param>
            <param name="movingElements">The set of elements currently in motion, if there is a state change transition ongoing</param>
            <returns>The full set of elements whose layout may have changed</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetRectsOfTargets(System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            Get a set of rectangles for all the elements in the target list.
            </summary>
            <param name="targets">The set of elements to consider</param>
            <param name="movingElements">The set of elements currently in motion</param>
            <returns>A Dictionary mapping elements to their rects</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetLayoutRect(System.Windows.FrameworkElement)">
            <summary>
            Get the layout rectangle of an element, by getting the layout slot and then computing which portion of the slot is being used.
            </summary>
            <param name="element">The element whose rect we want to get</param>
            <returns>The layout rect of that element</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetOldOpacities(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            Get the opacities of elements at the time of the state change, instead of visibilities, because the state change may be in process and the current value is the most important.
            </summary>
            <param name="control">The control whose state is changing</param>
            <param name="layoutStoryboard">The storyboard with the layout properties</param>
            <param name="originalValueRecords">The set of original values</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.SetLayoutStoryboardProperties(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord})">
            <summary>
            Go through the layout Storyboard and set all the properties by using SetValue to enable calling UpdateLayout without
            ticking the timeline, which would cause a render.
            All values that are overwritten will be stored in the collection of OriginalValueRecords so that they can be replaced later.
            </summary>
            <param name="control">The control whose state is changing</param>
            <param name="layoutStoryboard">The storyboard holding the layout properties</param>
            <param name="originalValueRecords">The store of original values</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.WrapMovingElementsInCanvases(System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Windows.Rect},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Windows.Rect})">
            <summary>
            Take all the elements that will be moving as a result of the layout animation, and wrap them in Canvases so that
            they do not affect their sibling elements.
            </summary>
            <param name="movingElements">The set of elements that will be moving</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.UnwrapMovingElementsFromCanvases(System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            Take all the elements that have been moving as a result of the layout animation, and unwrap them from their Canvases.
            </summary>
            <param name="movingElements">The set of elements that have been moving</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CopyLayoutProperties(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Copy the layout properties from the source element to the target element, clearing them from the source.
            </summary>
            <param name="source">The source of the layout properties</param>
            <param name="target">The destination of the layout properties</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CreateLayoutTransitionStoryboard(System.Windows.VisualTransition,System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Double})">
            <summary>
            Create the actual storyboard that will be used to animate the transition. Use all previously calculated results.
            </summary>
            <param name="duration">The duration of the animation</param>
            <param name="ease">The easing function to be used in the animation</param>
            <param name="movingElements">The set of elements that will be moving</param>
            <param name="oldOpacities">The old opacities of the elements whose viisibility is changing</param>
            <returns>The storyboard</returns>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord">
            <summary>
            OriginalValueRecord remembers the original value of a property that was changed in a state.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.FluidMoveScope">
            <summary>
            This enumerated type indicates whether a FluidMoveBehavior applies to the element to which it is attached, or to the children of that element.
            "Self" is useful when there is a single element that should behave in a special manner; "Children" is useful when the same behavior should apply to all
            children of a WrapPanel or to the ItemsHost Panel of an ItemsControl.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.TagType">
            <summary>
            This enumerated type indicates whether an element is identified by itself, or by its DataContext.
            DataContext identification allows movement from one data-driven location to another.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehaviorBase.AppliesToProperty">
            <summary>
            DependencyProperty for the scope of the behavior. See FluidMoveScope for more details.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehaviorBase.IsActiveProperty">
            <summary>
            DependencyProperty for the active state of the behavior.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehaviorBase.TagProperty">
            <summary>
            DependencyProperty for ability to use the element as its own tag, or the binding on the element.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehaviorBase.TagPathProperty">
            <summary>
            DependencyProperty for the extra path to add to the binding when UsaBindingAsTag is true.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehaviorBase.IdentityTagProperty">
            <summary>
            Identity tag used to detect element motion between containers.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehaviorBase.AppliesTo">
            <summary>
            Indicates whether the behavior applies just to this element, or to all children of the element (if the element is a Panel).
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehaviorBase.IsActive">
            <summary>
            Indicates whether the behavior is currently active.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehaviorBase.Tag">
            <summary>
            Indicates whether to use the element as its own tag, or use the binding on the element as the tag.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehaviorBase.TagPath">
            <summary>
            Extra path to add to the binding when TagType is specified.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.FluidMoveBehaviorBase.TagData">
            <summary>
            Private structure that stores all relevant data pertaining to a tagged item
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior">
            <summary>
            Behavior that watches an element (or a set of elements) for layout changes, and moves the element smoothly to the new position when needed.
            This behavior does not animate the size or visibility of an element; it only animates the offset of that element within its parent container.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.DurationProperty">
            <summary>
            DependencyProperty for the duration of the move.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.InitialTagProperty">
            <summary>
            DependencyProperty for the tag type to use just before the object is loaded.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.InitialTagPathProperty">
            <summary>
            DependencyProperty for the extra path to add to the binding when UsaBindingAsTag is true.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.InitialIdentityTagProperty">
            <summary>
            Identity tag used to detect element motion between containers.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.FloatAboveProperty">
            <summary>
            DependencyProperty for the FloatAbove flag.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.EaseXProperty">
            <summary>
            DependencyProperty for the EasingFunction to use for the horizontal component of the move.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.EaseYProperty">
            <summary>
            DependencyProperty for the EasingFunction to use for the vertical component of the move.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.OverlayProperty">
            <summary>
            Remember the popup/adorner being used, in case of element motion between containers with FloatAbove = true.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.CacheDuringOverlayProperty">
            <summary>
            Opacity cache used when floating a popup.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.HasTransformWrapperProperty">
            <summary>
            Marks the animation transform.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.Duration">
            <summary>
            The duration of the move.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.InitialTag">
            <summary>
            Spawning point for this item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.InitialTagPath">
            <summary>
            Extra path to add to the binding when TagType is specified.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.FloatAbove">
            <summary>
            Flag that says whether elements are allowed to float above their containers (in a Popup or Adorner) when changing containers.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.EaseX">
            <summary>
            EasingFunction to use for the horizontal component of the move.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.EaseY">
            <summary>
            EasingFunction to use for the vertical component of the move.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.AdornerContainer">
            <summary>
            Simple helper class to allow any UIElements to be used as an Adorner.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.GoToStateAction">
            <summary>
            An action that will transition a FrameworkElement to a specified VisualState when invoked.
            </summary>
            <remarks>
            If the TargetName property is set, this action will attempt to change the state of the targeted element. If not, it walks
            the element tree in an attempt to locate an alternative target that defines states. ControlTemplate and UserControl are 
            two common possibilities.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.GoToStateAction.OnTargetChanged(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
            Called when the target changes. If the TargetName property isn't set, this action has custom behavior.
            </summary>
            <param name="oldTarget"></param>
            <param name="newTarget"></param>
            <exception cref="T:System.InvalidOperationException">Could not locate an appropriate FrameworkElement with states.</exception>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.GoToStateAction.Invoke(System.Object)">
            <summary>
            This method is called when some criteria is met and the action is invoked.
            </summary>
            <param name="parameter"></param>
            <exception cref="T:System.InvalidOperationException">Could not change the target to the specified StateName.</exception>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.GoToStateAction.UseTransitions">
            <summary>
            Whether or not to use a VisualTransition to transition between states.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.GoToStateAction.StateName">
            <summary>
            The name of the VisualState.  
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Input.KeyTrigger">
            <summary>
            A Trigger that is triggered by a keyboard event.  If the target Key and Modifiers are detected, it fires.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.Key">
            <summary>
            The Key that must be pressed for the Trigger to fire.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.Modifiers">
            <summary>
            The Modifiers that must be active for the Trigger to fire (the default is no modifiers pressed).
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.ActiveOnFocus">
            <summary>
            If true, the Trigger only listens to its trigger Source object, which means that element must have focus for the trigger to fire.
            If false, the Trigger listens at the root, so any unhandled KeyDown/Up messages will be caught.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.FiredOn">
            <summary>
            Whether to listen to the KeyDown or KeyUp event.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.LaunchUriOrFileAction">
            <summary>
            An action that will launch a process to open a file or Uri. For files, this action will launch the default program 
            for the given file extension. A Uri will open in a web browser.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.LaunchUriOrFileAction.Invoke(System.Object)">
            <summary>
            This method is called when some criteria is met and the action is invoked.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.LaunchUriOrFileAction.Path">
            <summary>
            The file or Uri to open. 
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior">
            <summary>
            Repositions the attached element in response to mouse drag gestures on the element.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.XProperty">
            <summary>
            DependencyProperty for the X position of the dragged element, relative to the left of the root element.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.YProperty">
            <summary>
            DependencyProperty for the Y position of the dragged element, relative to the top of the root element.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ConstrainToParentBoundsProperty">
            <summary>
            DependencyProperty for the ConstrainToParentBounds property. If true, the dragged element will be constrained to stay within the bounds of its parent container.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.UpdatePosition(System.Windows.Point)">
            <summary>
            Attempts to update the position of the associated element to the specified coordinates.
            </summary>
            <param name="point">The desired position of the element in root coordinates.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ApplyTranslation(System.Double,System.Double)">
            <summary>
            Applies a relative position translation to the associated element.
            </summary>
            <param name="x">The X component of the desired translation in root coordinates.</param>
            <param name="y">The Y component of the desired translation in root coordinates.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ApplyTranslationTransform(System.Double,System.Double)">
            <summary>
            Applies the given translation to the RenderTransform of the associated element.
            </summary>
            <param name="x">The X component of the translation in parent coordinates.</param>
            <param name="y">The Y component of the translation in parent coordinates.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.CloneTransform(System.Windows.Media.Transform)">
            <summary>
            Does a recursive deep copy of the specified transform.
            </summary>
            <param name="transform">The transform to clone.</param>
            <returns>A deep copy of the specified transform, or null if the specified transform is null.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the type of the Transform is not recognized.</exception>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.UpdatePosition">
            <summary>
            Updates the X and Y properties based on the current rendered position of the associated element.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.RectContainsRect(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Check if one Rect is contained by another.
            </summary>
            <param name="rect1">The containing Rect.</param>
            <param name="rect2">The contained Rect.</param>
            <returns><c>true</c> if rect1 contains rect2; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.TransformAsVector(System.Windows.Media.GeneralTransform,System.Double,System.Double)">
            <summary>
            Transforms as vector.
            </summary>
            <param name="transform">The transform.</param>
            <param name="x">The X component of the vector.</param>
            <param name="y">The Y component of the vector.</param>
            <returns>A Point containing the values of X and Y transformed by transform as a Vector.</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.GetTransformOffset(System.Windows.Media.GeneralTransform)">
            <summary>
            Gets the transform offset.
            </summary>
            <param name="transform">The transform.</param>
            <returns>The offset of the transform.</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
            <remarks>Override this to hook up functionality to the AssociatedObject.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.OnDetaching">
            <summary>
            Called when the behavior is getting detached from its AssociatedObject, but before it has actually occurred.
            </summary>
            <remarks>Override this to unhook functionality from the AssociatedObject.</remarks>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.DragBegun">
            <summary>
            Occurs when a drag gesture is initiated.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.Dragging">
            <summary>
            Occurs when a drag gesture update is processed.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.DragFinished">
            <summary>
            Occurs when a drag gesture is finished.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.X">
            <summary>
            Gets or sets the X position of the dragged element, relative to the left of the root element. This is a dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.Y">
            <summary>
            Gets or sets the Y position of the dragged element, relative to the top of the root element. This is a dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ConstrainToParentBounds">
            <summary>
            Gets or sets a value indicating whether the dragged element is constrained to stay within the bounds of its parent container. This is a dependency property.
            </summary>
            <value>
            	<c>true</c> if the dragged element should be constrained to its parents bounds; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ActualPosition">
            <summary>
            Gets the on-screen position of the associated element in root coordinates.
            </summary>
            <value>The on-screen position of the associated element in root coordinates.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ElementBounds">
            <summary>
            Gets the element bounds in element coordinates.
            </summary>
            <value>The element bounds in element coordinates.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ParentElement">
            <summary>
            Gets the parent element of the associated object.
            </summary>
            <value>The parent element of the associated object.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.RootElement">
            <summary>
            Gets the root element of the scene in which the associated object is located.
            </summary>
            <value>The root element of the scene in which the associated object is located.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.RenderTransform">
            <summary>
            Gets and sets the RenderTransform of the associated element.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.PlaySoundAction">
            <summary>
            An Action that will play a sound to completion.
            </summary>
            <remarks>
            This Action is intended for use with short sound effects that don't need to be stopped or controlled. If you're trying 
            to create a music player or game, it may not meet your needs.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Interactivity.Media.PlaySoundAction"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.SetMediaElementProperties(System.Windows.Controls.MediaElement)">
            <summary>
            When the Action is invoked, this method is used to customize the dynamically created MediaElement.
            </summary>
            <remarks>
            This method may be useful for Action authors who wish to extend PlaySoundAction. If you wanted to control the 
            MediaElement Balance property, you could inherit from PlaySoundAction and override this method.
            </remarks>
            <param name="mediaElement"></param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Invoke(System.Object)">
            <summary>
            This method is called when some criteria are met and the action should be invoked. 
            </summary>
            <remarks>
            Each invocation of the Action plays a new sound.  Although the implementation is subject-to-change, the caller should 
            anticipate that this will create a new MediaElement, which will be cleaned up when the sound completes or if the media 
            fails to play.
            </remarks>
            <param name="parameter"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Source">
            <summary>
            A Uri defining the location of the sound file.  This is used to set the source property of the MediaElement. This is a dependency property.
            </summary>
            <remarks>
            The sound can be any file format supported by MediaElement.  In the case of a video, it will only play the
            audio portion.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Volume">
            <summary>
            Control the volume of the sound.  This is used to set the Volume property of the MediaElement.  This is a dependency property.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.RemoveElementAction">
            <summary>
            An Action that will remove the targeted element from the tree when invoked.
            </summary>
            <remarks>
            This Action may fail. The Action understands how to remove elements from common parents but not from custom collections or direct manipulation
            of the visual tree.
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.SetDataStoreValueAction">
            <summary>
            An action that will change the value of a property from a data store object.
            This class is identical to ChangePropertyAction. The only difference is that we load the data store picker
            for this action.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardAction">
            <summary>
            An abstract class that provides the ability to target a Storyboard.
            </summary>
            <remarks>
            For Action authors, this class provides a standard way to target a Storyboard.  Design tools may choose to provide a 
            special editing experience for classes that inherit from this Action, thereby improving the designer experience. 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardAction.OnStoryboardChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            This method is called when the Storyboard property is changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.StoryboardAction.Storyboard">
            <summary>
            The targeted Storyboard.  This is a dependency property.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.ControlStoryboardAction">
            <summary>
            An action that will change the state of a targeted storyboard when invoked.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.ControlStoryboardAction.Invoke(System.Object)">
            <summary>
            This method is called when some criteria is met and the action should be invoked. This method will attempt to 
            change the targeted storyboard in a way defined by the ControlStoryboardOption.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardTrigger">
            <summary>
            An abstract class that provides the ability to target a Storyboard.
            </summary>
            <remarks>
            For Trigger authors, this class provides a standard way to target a Storyboard.  Design tools may choose to provide a 
            special editing experience for classes that inherit from this Trigger, thereby improving the designer experience. 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardTrigger.OnStoryboardChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            This method is called when the Storyboard property is changed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.StoryboardTrigger.Storyboard">
            <summary>
            The targeted Storyboard.  This is a dependency property.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger">
            <summary>
            A trigger that listens for the completion of a Storyboard.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.TimerTrigger">
            <summary>
            A Trigger that is triggered by a specified event occurring on its source and fires after a delay when that event is fired.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.TimerTrigger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Interactivity.Core.TimerTrigger"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.TimerTrigger.MillisecondsPerTick">
            <summary>
            Gets or sets the number of milliseconds to wait between ticks. This is a dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.TimerTrigger.TotalTicks">
            <summary>
            Gets or sets the total number of ticks to be fired before the Trigger is finished.  This is a dependency property.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.TransitionEffect">
            <summary>
            Defines a transition effect shader that transitions from one visual to another visual
            using an interpolated value between 0 and 1
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.TransitionEffect.InputProperty">
            <summary>
            Brush-valued properties turn into sampler-property in the shader.
            Represents the image present in the final state of the transition
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.TransitionEffect.OldImageProperty">
            <summary>
            Brush-valued properties turn into sampler-property in the shader.
            Represents the image present in the initial state of the transition
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.TransitionEffect.ProgressProperty">
            <summary>
            Using a DependencyProperty as the backing store for Progress.  This enables animation, styling, binding, etc...
            Double used to represent state of Transition from start to finish (range between 0 and 1)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.TransitionEffect.CloneCurrentValue">
            <summary>
            Creates a modifiable clone (deep copy) of the <see cref="T:TransitionEffect"/> using its current values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.TransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the transition effect. Implements CloneCurrentValue in Silverlight.
            </summary>
            <returns>A clone of current instance of transition effect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.TransitionEffect.#ctor">
            <summary>
            Updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.TransitionEffect.Input">
            <summary>
            Gets or sets the Input variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.TransitionEffect.OldImage">
            <summary>
            Gets or sets the OldImage variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.TransitionEffect.Progress">
            <summary>
            Gets or sets the Progress variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Input.TranslateZoomRotateBehavior">
            <summary>
            Allows the user to use common touch gestures to translate, zoom, and rotate the attached object.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Input.TranslateZoomRotateBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
            <remarks>Override this to hook up functionality to the AssociatedObject.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Input.TranslateZoomRotateBehavior.OnDetaching">
            <summary>
            Called when the behavior is getting detached from its AssociatedObject, but before it has actually occurred.
            </summary>
            <remarks>Override this to unhook functionality from the AssociatedObject.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.TranslateZoomRotateBehavior.SupportedGestures">
            <summary>
            Gets or sets a value specifying which zooming and translation variants to support.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.TranslateZoomRotateBehavior.TranslateFriction">
            <summary>
            Gets or sets a number describing the rate at which the translation will decrease.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.TranslateZoomRotateBehavior.RotationalFriction">
            <summary>
            Gets or sets a number describing the rate at which the rotation will decrease.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.TranslateZoomRotateBehavior.ConstrainToParentBounds">
            <summary>
            Gets or sets the value indicating whether the zoom and translate position of the attached object is limited by the bounds of the parent object.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.TranslateZoomRotateBehavior.MinimumScale">
            <summary>
            Gets or sets a number indicating the minimum zoom value allowed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.TranslateZoomRotateBehavior.MaximumScale">
            <summary>
            Gets or sets a number indicating the maximum zoom value allowed.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.VisualStateUtilities">
            <summary>
            This class provides various platform agnostic standard operations for working with the visual state manager.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.VisualStateUtilities.GoToState(System.Windows.FrameworkElement,System.String,System.Boolean)">
            <summary>
            Transitions the control between two states.
            </summary>
            <param name="element">The element to transition between states.</param>
            <param name="stateName">The state to transition to.</param>
            <param name="useTransitions">true to use a System.Windows.VisualTransition to transition between states; otherwise, false.</param>
            <returns>true if the control successfully transitioned to the new state; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">control is null</exception>
            <exception cref="T:System.ArgumentNullException">stateName is null</exception>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.VisualStateUtilities.GetVisualStateGroups(System.Windows.FrameworkElement)">
            <summary>
            Gets the value of the VisualStateManager.VisualStateGroups attached property.
            </summary>
            <param name="targetObject">The element from which to get the VisualStateManager.VisualStateGroups.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.VisualStateUtilities.TryFindNearestStatefulControl(System.Windows.FrameworkElement,System.Windows.FrameworkElement@)">
            <summary>
            Find the nearest parent which contains visual states.
            </summary>
            <param name="contextElement">The element from which to find the nearest stateful control.</param>
            <param name="resolvedControl">The nearest stateful control if true; else null.</param>
            <returns>True if a parent contains visual states; else false.</returns>
        </member>
        <member name="T:ExceptionStringTable">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CallMethodActionValidMethodNotFoundExceptionMessage">
            <summary>
              Looks up a localized string similar to Could not find method named &apos;{0}&apos; on object of type &apos;{1}&apos; that matches the expected signature..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionAmbiguousAdditionOperationExceptionMessage">
            <summary>
              Looks up a localized string similar to More than one potential addition operator was found on type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionCannotAnimateTargetTypeExceptionMessage">
            <summary>
              Looks up a localized string similar to Cannot animate a property change on a type &apos;{0}&apos; Target. Property changes can only be animated on types derived from DependencyObject..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionCannotFindPropertyNameExceptionMessage">
            <summary>
              Looks up a localized string similar to Cannot find a property named &quot;{0}&quot; on type &quot;{1}.&quot;.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionCannotIncrementAnimatedPropertyChangeExceptionMessage">
            <summary>
              Looks up a localized string similar to The Increment property cannot be set to True if the Duration property is set..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionCannotIncrementWriteOnlyPropertyExceptionMessage">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; property cannot be incremented because its value cannot be read..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionCannotSetValueExceptionMessage">
            <summary>
              Looks up a localized string similar to Cannot assign value of type &quot;{0}&quot; to property &quot;{1}&quot; of type &quot;{2}&quot;. The &quot;{1}&quot; property can be assigned only values of type &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionPropertyIsReadOnlyExceptionMessage">
            <summary>
              Looks up a localized string similar to Property &quot;{0}&quot; defined by type &quot;{1}&quot; does not expose a set method and therefore cannot be modified..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.DataStateBehaviorStateNameNotFoundExceptionMessage">
            <summary>
              Looks up a localized string similar to Cannot find state named &apos;{0}&apos; on type &apos;{1}.&apos; Ensure that the state exists and that it can be accessed from this context..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.GoToStateActionTargetHasNoStateGroups">
            <summary>
              Looks up a localized string similar to Target {0} does not define any VisualStateGroups. .
            </summary>
        </member>
        <member name="P:ExceptionStringTable.InvalidLeftOperand">
            <summary>
              Looks up a localized string similar to LeftOperand of type &quot;{0}&quot; cannot be used with operator &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.InvalidOperands">
            <summary>
              Looks up a localized string similar to LeftOperand of type &quot;{1}&quot;  and RightOperand of type &quot;{0}&quot; cannot be used with operator &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.InvalidRightOperand">
            <summary>
              Looks up a localized string similar to RightOperand of type &quot;{0}&quot; cannot be used with operator &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.UnsupportedRemoveTargetExceptionMessage">
            <summary>
              Looks up a localized string similar to The target of the RemoveElementAction is not supported..
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\de\Microsoft.Expression.Effects.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Effects</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Media.Effects.BlindOrientation">
            <summary>
            Determine the orientation of the blinds
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.BlindsTransitionEffect">
            <summary>
            Transition shader that simulates blinds opening when transitioning
            from one visual to another. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.OrientationProperty">
            <summary>
            Gets or sets the orientation of the blinds
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.CountProperty">
            <summary>
            Gets or sets the number of blinds
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.ShaderOrientationProperty">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the BlindsTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of BlindsTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.Orientation">
            <summary>
            Gets or sets orientatio of the blinds.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.Count">
            <summary>
            Gets or sets the number of blinds to display.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.ShaderOrientation">
            <summary>
            Gets or sets orientation of the blinds.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.BloomEffect">
            <summary>
            Effect that implements a bloom illumination of a visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
            
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BloomIntensityProperty">
            <summary>
            This property is mapped to the BloomIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseIntensityProperty">
            <summary>
            This property is mapped to the BaseIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BloomSaturationProperty">
            <summary>
            This property is mapped to the BloomSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseSaturationProperty">
            <summary>
            This property is mapped to the BaseSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomIntensityProperty">
            <summary>
            This property is mapped to the BloomIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomSaturationProperty">
            <summary>
            This property is mapped to the BloomSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.ThresholdProperty">
            <summary>
            This property is mapped to the BaseSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BloomEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.Threshold">
            <summary>
            Gets or sets the minimum intensity that will be used for the bloom
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseIntensity">
            <summary>
            Gets or sets the base intensity
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BloomIntensity">
            <summary>
            Gets or sets the bloom intensity
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseSaturation">
            <summary>
            Gets or sets the base saturation
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BloomSaturation">
            <summary>
            Gets or sets the bloom saturation
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomIntensity">
            <summary>
            Gets or sets the Base/BloomIntensity variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomSaturation">
            <summary>
            Gets or sets the BaseBloomSaturation variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect">
            <summary>
            Transition effect that reveals two visuals through a growing/shrinking circle. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.FeatherAmountProperty">
            <summary>
            Dependency property which modifies the Feather amount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseProperty">
            <summary>
            Dependency property which modifies the circle movement.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseShaderProperty">
            <summary>
            Dependency property which modifies the reverseShader variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the CircleRevealTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of CircleRevealTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.FeatherAmount">
            <summary>
            Gets or sets the FuzzyAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.Reverse">
            <summary>
            Gets or sets playing the circle reveal backward
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseShader">
            <summary>
            Gets or sets playing the circle reveal backward into the shader
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect">
            <summary>
            Transition effect that transitions two visuals using a cloud 
            texture as the sampler threshold.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CloudyTransitionEffect">
            <summary>
            Defines a transition shader effect that uses an image as a sampler threshold
            for interpolating pixel value between two visuals. 
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect">
            <summary>
            Defines a transition shader effect that provides a random value
            allowing the effect to provide variance each time the effect is run.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.RandomSeedProperty">
            <summary>
            Dependency property which modifies the RandomSeed variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.#ctor">
            <summary>
            Updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.RandomSeed">
            <summary>
            Gets or sets the RandomSeed variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.CloudImageProperty">
            <summary>
            Dependency property which modifies the CloudImage variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.CloudImage">
            <summary>
            Gets or sets the CloudImage variable within the shader used for sampling. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the CloudRevealTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of CloudRevealTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.ColorToneEffect">
            <summary>
            Effects that modifies the color tone of a visual using
            two colors as the sampling.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.DesaturationProperty">
            <summary>
            This property is mapped to the Desaturation variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.ToneAmountProperty">
            <summary>
            This property is mapped to the Toned variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.LightColorProperty">
            <summary>
            This property is mapped to the LightColor variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.DarkColorProperty">
            <summary>
            This property is mapped to the DarkColor variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.ColorToneEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.Desaturation">
            <summary>
            Gets or sets the Desaturation variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.ToneAmount">
            <summary>
            Gets or sets the Toned variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.LightColor">
            <summary>
            Gets or sets the LightColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.DarkColor">
            <summary>
            Gets or sets the DarkColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.EmbossedEffect">
            <summary>
            Effect that simulates an embossed look to the visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.AmountProperty">
            <summary>
            This property is mapped to the Amount variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.HeightProperty">
            <summary>
            This property is mapped to the Height variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.ColorProperty">
            <summary>
            This property is mapped to the Color variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.EmbossedEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Amount">
            <summary>
            Gets or sets the Amount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Height">
            <summary>
            Gets or sets the Height variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Color">
            <summary>
            Gets or sets the Color variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.FadeTransitionEffect">
            <summary>
            Transition effect that gradually transitions from one visual to another.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.FadeTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.FadeTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the FadeTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of FadeTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MagnifyEffect">
            <summary>
            Effect that simulates a magnifying lens.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.InnerRadiusProperty">
            <summary>
            Gets or sets the InnerRadius variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.OuterRadiusProperty">
            <summary>
            Gets or sets the OuterRadius variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.CenterProperty">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.AmountProperty">
            <summary>
            Gets or sets the amount variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.InputProperty">
            <summary>
            Gets or sets the input used in the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.generalTransform">
            <summary>
            The transform used for this shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.InnerRadius">
            <summary>
            Gets or sets the inner radius variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.OuterRadius">
            <summary>
            Gets or sets the outer radius variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Center">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Amount">
            <summary>
            Gets or sets the ShrinkFactor: 
            The higher the shrink factor the "smaller" the content inside the ellipse will appear. 
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.EffectMapping">
            <summary>
            Gets the EffectMapping.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform">
            <summary>
            The GeneralTransform corrosponding to the Magnify effect.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.biasValue">
            <summary>
            Attempt to transform a point based on the effect.
            </summary>
            <param name="targetPoint">The point to transform.</param>
            <param name="result">The result if available.</param>
            <returns>Return true if successful.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.effect">
            <summary>
            The effect instance.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.IsInverse">
            <summary>
            If the transform is an inverse.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.inverseTransform">
            <summary>
            The transform specific to this Effect.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.#ctor(Microsoft.Expression.Media.Effects.MagnifyEffect)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fx">The source effect.</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.TransformBounds(System.Windows.Rect)">
            <summary>
            This particular effect keeps axis aligned lines axis aligned, so transformation of the rect is just
            transformation of its corner points.
            </summary>
            <param name="rect">The input rect.</param>
            <returns>The output rect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.OutToIn(System.Windows.Point,System.Double,System.Double,System.Windows.Point,System.Double)">
            <summary>
            For the inverse of the shader, we need to find Pin which is the Pixel Ouput, given Pout the texture input (is the reverse of the shader)
            However, the shader algorithm is dependant on the radius of the pixel output from the center, which is a variable that we don't
            have when computing the inverse. We need to perform bisection in order to converge using the equation below
            PHatout = PHat_in*Scalar where
            PHatout = Pout - Pcenter  
            pHatin = Pin -Pcenter
            
            Scalar is dependent on the radius of Pin (which we don't have). 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.InToOut(System.Windows.Point,System.Double,System.Double,System.Windows.Point,System.Double)">
            <summary>
            Given a pixel output (Pin) find the texture input (Pout)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.CreateInstanceCore">
            <summary>
            Creats a new instance.
            </summary>
            <returns>A new instance of this.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.PointIsInCircle(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Determines if a point is within an ellipse.
            </summary>
            <param name="pt">The test point.</param>
            <param name="center">The center point of the ellipse.</param>
            <param name="radius">The radius of the ellipse.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.Inverse">
            <summary>
            Gets the inverse transform.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MonochromeEffect">
             <summary>
            Effect that turns a visual into a monochrom color
             </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MonochromeEffect.ColorProperty">
            <summary>
            Gets or sets the FilterColor variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MonochromeEffect.InputProperty">
            <summary>
            Gets or sets the Input of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MonochromeEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MonochromeEffect.Color">
            <summary>
            Gets or sets the FilterColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MonochromeEffect.Input">
            <summary>
            Gets or sets the input used in the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.PixelateEffect">
            <summary>
            Effect that pixelates a visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.PixelateEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.PixelateEffect.PixelationProperty">
            <summary>
            This property is mapped to the pixelation amount variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.PixelateEffect.Pixelation">
            <summary>
            Gets or sets the amount of pixelation inside the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.PixelateEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.PixelateTransitionEffect">
            <summary>
            Transition effect that increase/decrease pixelation between two visuals.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the PixelateTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of PixelateTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect">
            <summary>
            Transition effects that performs a radial blur of the current visual  as the new visual is introduced.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the RadialBlurTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of RadialBlurTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RippleEffect">
            <summary>
            Effect that simulates water ripples on the visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.CenterProperty">
            <summary>
            Gets or sets the Center variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.MagnitudeProperty">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.FrequencyProperty">
            <summary>
            Gets or sets the Frequency variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.PhaseProperty">
            <summary>
            Gets or sets the Phase variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.InputProperty">
            <summary>
            Gets or sets the input brush used in the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Center">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Magnitude">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Frequency">
            <summary>
            Gets or sets the frequency variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Phase">
            <summary>
            Gets or sets the Phase variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RippleTransitionEffect">
            <summary>
            Transition effect that simulate water ripple during transition. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the RippleTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of RippleTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SharpenEffect">
            <summary>
            Effects that makes a visual more crisp and sharper. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.AmountProperty">
            <summary>
            This property is mapped to the Amount variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.HeightProperty">
            <summary>
            This property is mapped to the Width variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SharpenEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Amount">
            <summary>
            Gets or sets the Amount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Height">
            <summary>
            Gets or sets the Height variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SlideDirection">
            <summary>
            Define the slide orientation
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SlideInTransitionEffect">
            <summary>
            Transition effect that slide the current visual away, revealing the new visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideDirectionProperty">
            <summary>
            Dependency property which modifies the SlideAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideNormalProperty">
            <summary>
            Dependency property which modifies the SlideAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the SlideInTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of SlideInTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideDirection">
            <summary>
            Gets or sets the SlideAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideNormal">
            <summary>
            Gets or sets the SlideAmount variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect">
             <summary>
            Transition effect that swirl the current visual while introducing the new visual.
             </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.TwistAmountProperty">
            <summary>
            Dependency property which modifies the TwistAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.CellCountProperty">
            <summary>
            Dependency property which modifies the number of cell where pixels will be twisted.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.#ctor(System.Double)">
            <summary>
            Creates an instance and sets the shader's twist variable to the specified values.
            </summary>
            <param name="twist">level of swirl twist</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the SmoothSwirlGridTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of SmoothSwirlGridTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.TwistAmount">
            <summary>
            Gets or sets the TwistAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.CellCount">
            <summary>
            Gets or sets the CellCount variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SwirlEffect">
            <summary>
            Effect that swirls the current visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.CenterProperty">
            <summary>
            This property is mapped to the Center variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.TwistAmountProperty">
            <summary>
            This property is mapped to the SwirlStrength variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.AngleFrequencyProperty">
            <summary>
            This property is mapped to the AngleFrequency variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.generalTransform">
            <summary>
            The transform used when this Effect is applied.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.Center">
            <summary>
            Gets or sets the Center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.TwistAmount">
            <summary>
            Gets or sets the SwirlStrength variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.AngleFrequency">
            <summary>
            Gets or sets the AngleFrequency variable within the shader.
            We do not expose this property. 
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.EffectMapping">
            <summary>
            Gets the GeneralTransform for this effect.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform">
            <summary>
            For transforming input and tree transformations.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.theEffect">
            <summary>
            The instance of the Effect.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.thisIsInverse">
            <summary>
            The inverse of the transform.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.inverseTransform">
            <summary>
            The inverse of this GeneralTransform.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.#ctor(Microsoft.Expression.Media.Effects.SwirlEffect)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="eff">The effect itself.</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.TransformBounds(System.Windows.Rect)">
            <summary>
            For this operation, the bounds is the bounding box of the 4 transformed points. 
            Need to transform each of them, and then circumscribe.  This is true for both the 
            forward and the inverse.
            </summary>
            <param name="rect">The input rect.</param>
            <returns>The transformed rect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.TryTransform(System.Windows.Point,System.Windows.Point@)">
            <summary>
            Attempt to transform inPoint with the Swirl effect.
            </summary>
            <param name="targetPoint">The input point.</param>
            <param name="result">The output point after transformed using the Swirl effect.</param>
            <returns>True and throws if false.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.CreateInstanceCore">
            <summary>
            Returns a new instance of this.
            </summary>
            <returns>A new instance.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.Inverse">
            <summary>
            Gets a clone of the inverse of the current transform.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WaveTransitionEffect">
            <summary>
            Transition effect that waves the current visual while introducing the new visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.MagnitudeProperty">
            <summary>
            Dependency property which modifies the Magnitude variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.PhaseProperty">
            <summary>
            Dependency property which modifies the Phase variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.FrequencyProperty">
            <summary>
            Dependency property which modifies the Phase variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WaveTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WaveTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the WaveTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of WaveTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Magnitude">
            <summary>
            Gets or sets the magnitude of the wave
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Phase">
            <summary>
            Gets or sets the phase of the wave
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Frequency">
            <summary>
            Gets or sets the magnitude of the wave
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WipeDirection">
            <summary>
            Define the wipe direction.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WipeTransitionEffect">
            <summary>
            Transition effect that wipes the current visual introducing the new visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.WipeDirectionProperty">
            <summary>
            Dependency property which modifies the preset of the wipe
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.FeatherAmountProperty">
            <summary>
            Dependency property which modifies the FuzzyAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOriginProperty">
            <summary>
            Dependency property which modifies the LineOrigin variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineNormalProperty">
            <summary>
            Dependency property which modifies the LineNormal variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOffsetProperty">
            <summary>
            Dependency property which modifies the LineOffset variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WipeTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WipeTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the WipeTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of WipeTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.WipeDirection">
            <summary>
            Gets or sets the direction of the wipe.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.FeatherAmount">
            <summary>
            Gets or sets the FuzzyAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOrigin">
            <summary>
            Gets or sets the LineOrigin variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineNormal">
            <summary>
            Gets or sets the LineNormal variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOffset">
            <summary>
            Gets or sets the LineOffset variable within the shader.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\en\Microsoft.Expression.Controls.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Controls</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.Initialize">
            <summary>
            Called before we loop over the polylines.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.ShouldBreak(System.Int32)">
            <summary>
            Checks whether or not we should continue looping over the polylines.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnPolylineBegin(Microsoft.Expression.Drawing.Core.PolylineData)">
            <summary>
            Called before we begin marching a new polyline.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnPolylineCompleted(System.Double)">
            <summary>
            Called when we walk off the end of a polyline.
            </summary>
            <param name="remaingLength">The remaining arclength in the polyline.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnStepCompleted(System.Double)">
            <summary>
            Called when we sucessfully complete a step.
            </summary>
            <param name="actualStepDistance">The actual step distance.
            This may be different than Step if we have wrapped to another polyline.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.Distribute(Microsoft.Expression.Controls.PathPanel,System.Int32,System.Int32)">
            <summary>
            Distributes the children of a path panel along a given layout path.
            </summary>
            <param name="pathPanel">The path panel.</param>
            <param name="pathIndex">The index of the path in pathPanel.LayoutPaths.</param>
            <param name="childIndex">The index of the first child to be laid out on this path.</param>
            <returns>The index of the next child to be distributed. If childIndex is returned, this function has done nothing.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.ChildIndex">
            <summary>
            The index of the next child to be arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Span">
            <summary>
            The distance in arclength that we want to use for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Step">
            <summary>
            The distance in arclength to walk along the current polyline.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Capacity">
            <summary>
            The total number of elements to be arranged on the LayoutPath.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.EvenDistributionStrategy">
            <summary>
            Distributes the children of a path panel along a layout path.
            Even distribution means that there is equal arclength between the centers of all
            the elements on the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.ChangedPathLayoutProperties">
            <summary>
            Specifies which path layout properties have changed.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs.#ctor(Microsoft.Expression.Controls.ChangedPathLayoutProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs"/> class.
            </summary>
            <param name="changedProperties">The data for the event.</param>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs.ChangedProperties">
            <summary>
            Gets the properties changed in a <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathLayoutData">
            <summary>
            Encapsulates the data needed to update a <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LayoutPathIndex">
            <summary>
            Gets or sets the index of the path on which an element is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.GlobalIndex">
            <summary>
            Gets or sets the index of an element in a collection of elements.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LocalIndex">
            <summary>
            Gets or sets the index of an element on a path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.GlobalOffset">
            <summary>
            Gets or sets the offset of an element proportional to the total length of a collection of paths.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LocalOffset">
            <summary>
            Gets or sets the offset of an element proportional to the length of path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.NormalAngle">
            <summary>
            Gets or sets the angle perpendicular to the path at an element's location.
            </summary>
        </member>
        <member name="P:M