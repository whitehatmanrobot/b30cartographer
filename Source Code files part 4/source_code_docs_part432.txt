ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateResourceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetResourceContentsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetResourceContentsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportParametersCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportParametersCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateLinkedReportCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportLinkCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportLinkCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListLinkedReportsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.RenderCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.RenderStreamCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetRenderResourceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetExecutionOptionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetExecutionOptionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetCacheOptionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetCacheOptionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.UpdateReportExecutionSnapshotCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FlushCacheCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListJobsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CancelJobCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateDataSourceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetDataSourceContentsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetDataSourceContentsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EnableDataSourceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DisableDataSourceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListReportsUsingDataSourceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportDataSourcesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportDataSourcesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportDataSourcePromptsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateReportHistorySnapshotCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportHistoryOptionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportHistoryOptionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportHistoryLimitCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportHistoryLimitCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListReportHistoryCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteReportHistorySnapshotCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FindItemsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateScheduleCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteScheduleCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSchedulePropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSchedulePropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListScheduledReportsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSchedulesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.PauseScheduleCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ResumeScheduleCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateSubscriptionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateDataDrivenSubscriptionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSubscriptionPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetDataDrivenSubscriptionPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSubscriptionPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetDataDrivenSubscriptionPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteSubscriptionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.PrepareQueryCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetExtensionSettingsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ValidateExtensionSettingsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSubscriptionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSubscriptionsUsingDataSourceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListExtensionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListEventsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FireEventCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSystemTasksCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListTasksCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSystemRolesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListRolesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateRoleCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteRoleCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetRolePropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetRolePropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSystemPoliciesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSystemPoliciesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetPoliciesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetPoliciesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.InheritParentSecurityCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSystemPermissionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetPermissionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.LogonUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.LogoffCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ServerInfoHeader">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ServerInfoHeader.ReportServerVersionNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ServerInfoHeader.ReportServerEdition">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Policy">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Policy.GroupUserName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Policy.Roles">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Role">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Role.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Role.Description">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Task">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Task.TaskID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Task.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Task.Description">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Event">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Event.Type">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Extension">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Extension.ExtensionType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Extension.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Extension.LocalizedName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Extension.Visible">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ExtensionTypeEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ExtensionTypeEnum.Delivery">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ExtensionTypeEnum.Render">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ExtensionTypeEnum.Data">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ExtensionTypeEnum.All">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Subscription">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.SubscriptionID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.Owner">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.Path">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.VirtualPath">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.Report">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.DeliverySettings">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.Status">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.Active">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.LastExecuted">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.LastExecutedSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.ModifiedBy">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.ModifiedDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.EventType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.IsDataDriven">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings.Extension">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings.ParameterValues">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ParameterFieldReference">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ParameterFieldReference.ParameterName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ParameterFieldReference.FieldAlias">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ParameterValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ParameterValue.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ParameterValue.Value">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ParameterValue.Label">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ActiveState">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.DeliveryExtensionRemoved">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.DeliveryExtensionRemovedSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.SharedDataSourceRemoved">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.SharedDataSourceRemovedSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.MissingParameterValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.MissingParameterValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.InvalidParameterValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.InvalidParameterValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.UnknownReportParameter">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.UnknownReportParameterSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.DisplayName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.Required">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.RequiredSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.ReadOnly">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.Value">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.Encrypted">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.IsPassword">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.ValidValues">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ValidValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ValidValue.Label">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ValidValue.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.QueryDefinition">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.QueryDefinition.CommandType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.QueryDefinition.CommandText">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.QueryDefinition.Timeout">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.QueryDefinition.TimeoutSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Field">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Field.Alias">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Field.Name">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.Fields">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.Query">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.CaseSensitivity">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.CaseSensitivitySpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.Collation">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.AccentSensitivity">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.AccentSensitivitySpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.KanatypeSensitivity">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.KanatypeSensitivitySpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.WidthSensitivity">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.WidthSensitivitySpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.Name">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SensitivityEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.SensitivityEnum.True">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.SensitivityEnum.False">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.SensitivityEnum.Auto">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan.Item">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan.DataSet">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinitionOrReference">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.Extension">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.ConnectString">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.CredentialRetrieval">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.WindowsCredentials">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.ImpersonateUser">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.ImpersonateUserSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.Prompt">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.UserName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.Password">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.Enabled">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.EnabledSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CredentialRetrievalEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.CredentialRetrievalEnum.Prompt">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.CredentialRetrievalEnum.Store">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.CredentialRetrievalEnum.Integrated">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.CredentialRetrievalEnum.None">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DataSourceReference">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceReference.Reference">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.InvalidDataSourceReference">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Schedule">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.ScheduleID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.Definition">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.Creator">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.NextRunTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.NextRunTimeSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.LastRunTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.LastRunTimeSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.ReferencesPresent">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.State">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition.StartDateTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition.EndDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition.EndDateSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition.Item">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DailyRecurrence">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.RecurrencePattern">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DailyRecurrence.DaysInterval">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.WeeklyRecurrence">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.WeeklyRecurrence.WeeksInterval">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.WeeklyRecurrence.WeeksIntervalSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.WeeklyRecurrence.DaysOfWeek">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DaysOfWeekSelector">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DaysOfWeekSelector.Sunday">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DaysOfWeekSelector.Monday">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DaysOfWeekSelector.Tuesday">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DaysOfWeekSelector.Wednesday">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DaysOfWeekSelector.Thursday">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DaysOfWeekSelector.Friday">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DaysOfWeekSelector.Saturday">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.MinuteRecurrence">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MinuteRecurrence.MinutesInterval">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.MonthlyRecurrence">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthlyRecurrence.Days">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthlyRecurrence.MonthsOfYear">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.January">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.February">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.March">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.April">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.May">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.June">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.July">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.August">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.September">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.October">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.November">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.December">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.MonthlyDOWRecurrence">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthlyDOWRecurrence.WhichWeek">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthlyDOWRecurrence.WhichWeekSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthlyDOWRecurrence.DaysOfWeek">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthlyDOWRecurrence.MonthsOfYear">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.WeekNumberEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.WeekNumberEnum.FirstWeek">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.WeekNumberEnum.SecondWeek">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.WeekNumberEnum.ThirdWeek">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.WeekNumberEnum.FourthWeek">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.WeekNumberEnum.LastWeek">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ScheduleReference">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ScheduleReference.ScheduleID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ScheduleReference.Definition">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.NoSchedule">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ScheduleStateEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ScheduleStateEnum.Ready">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ScheduleStateEnum.Running">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ScheduleStateEnum.Paused">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ScheduleStateEnum.Expired">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ScheduleStateEnum.Failing">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ReportHistorySnapshot">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportHistorySnapshot.HistoryID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportHistorySnapshot.CreationDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportHistorySnapshot.Size">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DataSourcePrompt">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourcePrompt.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourcePrompt.DataSourceID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourcePrompt.Prompt">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DataSource">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSource.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSource.Item">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Job">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.JobID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.Path">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.Machine">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.User">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.StartDateTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.Action">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.Type">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.Status">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.JobActionEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.JobActionEnum.Render">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.JobActionEnum.SnapshotCreation">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.JobActionEnum.ReportHistoryCreation">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.JobTypeEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.JobTypeEnum.User">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.JobTypeEnum.System">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.JobStatusEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.JobStatusEnum.New">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.JobStatusEnum.Running">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.JobStatusEnum.CancelRequested">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ExpirationDefinition">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.TimeExpiration">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.TimeExpiration.Minutes">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ScheduleExpiration">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ScheduleExpiration.Item">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ReportParameter">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.Type">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.TypeSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.Nullable">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.NullableSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.AllowBlank">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.AllowBlankSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.MultiValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.MultiValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.QueryParameter">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.QueryParameterSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.Prompt">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.PromptUser">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.PromptUserSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.Dependencies">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.ValidValuesQueryBased">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.ValidValuesQueryBasedSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.ValidValues">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.DefaultValuesQueryBased">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.DefaultValuesQueryBasedSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.DefaultValues">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.State">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.StateSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.ErrorMessage">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ParameterTypeEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterTypeEnum.Boolean">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterTypeEnum.DateTime">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterTypeEnum.Integer">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterTypeEnum.Float">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterTypeEnum.String">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ParameterStateEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterStateEnum.HasValidValue">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterStateEnum.MissingValidValue">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterStateEnum.HasOutstandingDependencies">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterStateEnum.DynamicValuesUnavailable">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials.DataSourceName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials.UserName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials.Password">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Warning">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Warning.Code">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Warning.Severity">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Warning.ObjectName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Warning.ObjectType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Warning.Message">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CatalogItem">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.Path">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.VirtualPath">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.Type">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.Size">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.SizeSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.Hidden">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.HiddenSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.CreationDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.CreationDateSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.ModifiedDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.ModifiedDateSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.CreatedBy">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.ModifiedBy">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.MimeType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.ExecutionDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.ExecutionDateSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ItemTypeEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ItemTypeEnum.Unknown">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ItemTypeEnum.Folder">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ItemTypeEnum.Report">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ItemTypeEnum.Resource">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ItemTypeEnum.LinkedReport">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ItemTypeEnum.DataSource">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Property">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Property.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Property.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SearchCondition">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.SearchCondition.Condition">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.SearchCondition.ConditionSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ConditionEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ConditionEnum.Contains">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ConditionEnum.Equals">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SessionHeader">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.SessionHeader.SessionId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.SessionHeader.IsNewExecution">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.SessionHeader.ExecutionDateTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.SessionHeader.ExpirationDateTime">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ItemNamespaceHeader">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ItemNamespaceHeader.ItemNamespace">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ItemNamespaceEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ItemNamespaceEnum.PathBased">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ItemNamespaceEnum.GUIDBased">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.BatchHeader">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.BatchHeader.BatchID">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ExecutionSettingEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ExecutionSettingEnum.Live">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ExecutionSettingEnum.Snapshot">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.BooleanOperatorEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.BooleanOperatorEnum.And">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.BooleanOperatorEnum.Or">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSecureMethodsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSecureMethodsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListSecureMethodsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateBatchCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateBatchCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CreateBatchCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CancelBatchCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ExecuteBatchCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSystemPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSystemPropertiesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSystemPropertiesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetSystemPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DeleteItemCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.MoveItemCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListChildrenCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListChildrenCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListChildrenCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetPropertiesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetPropertiesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetItemTypeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetItemTypeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetItemTypeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateFolderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateReportCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateReportCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CreateReportCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportDefinitionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportDefinitionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportDefinitionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetReportDefinitionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetReportDefinitionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.SetReportDefinitionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateResourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetResourceContentsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetResourceContentsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetResourceContentsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetResourceContentsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetResourceContentsCompletedEventArgs.MimeType">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportParametersCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportParametersCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportParametersCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetReportParametersCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateLinkedReportCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportLinkCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportLinkCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportLinkCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetReportLinkCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListLinkedReportsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListLinkedReportsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListLinkedReportsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.RenderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.RenderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderCompletedEventArgs.Encoding">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderCompletedEventArgs.MimeType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderCompletedEventArgs.ParametersUsed">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderCompletedEventArgs.Warnings">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderCompletedEventArgs.StreamIds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.RenderStreamCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.RenderStreamCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderStreamCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderStreamCompletedEventArgs.Encoding">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderStreamCompletedEventArgs.MimeType">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetRenderResourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetRenderResourceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetRenderResourceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetRenderResourceCompletedEventArgs.MimeType">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetExecutionOptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetExecutionOptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetExecutionOptionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetExecutionOptionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetExecutionOptionsCompletedEventArgs.Item">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetCacheOptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetCacheOptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetCacheOptionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetCacheOptionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetCacheOptionsCompletedEventArgs.Item">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.UpdateReportExecutionSnapshotCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.FlushCacheCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListJobsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListJobsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListJobsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CancelJobCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CancelJobCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CancelJobCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateDataSourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetDataSourceContentsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetDataSourceContentsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataSourceContentsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetDataSourceContentsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.EnableDataSourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DisableDataSourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListReportsUsingDataSourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListReportsUsingDataSourceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListReportsUsingDataSourceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetReportDataSourcesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportDataSourcesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportDataSourcesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportDataSourcesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportDataSourcePromptsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportDataSourcePromptsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportDataSourcePromptsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateReportHistorySnapshotCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateReportHistorySnapshotCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CreateReportHistorySnapshotCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CreateReportHistorySnapshotCompletedEventArgs.Warnings">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetReportHistoryOptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryOptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryOptionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryOptionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryOptionsCompletedEventArgs.KeepExecutionSnapshots">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryOptionsCompletedEventArgs.Item">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetReportHistoryLimitCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryLimitCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryLimitCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryLimitCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryLimitCompletedEventArgs.IsSystem">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryLimitCompletedEventArgs.SystemLimit">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListReportHistoryCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListReportHistoryCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListReportHistoryCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DeleteReportHistorySnapshotCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.FindItemsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.FindItemsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.FindItemsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateScheduleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateScheduleCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CreateScheduleCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DeleteScheduleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetSchedulePropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSchedulePropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSchedulePropertiesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSchedulePropertiesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListScheduledReportsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListScheduledReportsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListScheduledReportsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSchedulesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSchedulesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListSchedulesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.PauseScheduleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ResumeScheduleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateSubscriptionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateSubscriptionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CreateSubscriptionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateDataDrivenSubscriptionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateDataDrivenSubscriptionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CreateDataDrivenSubscriptionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetSubscriptionPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetDataDrivenSubscriptionPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs.ExtensionSettings">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs.Active">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs.Status">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs.EventType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs.MatchData">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs.Parameters">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.ExtensionSettings">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.DataRetrievalPlan">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.Active">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.Status">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.EventType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.MatchData">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.Parameters">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DeleteSubscriptionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.PrepareQueryCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.PrepareQueryCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.PrepareQueryCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.PrepareQueryCompletedEventArgs.Changed">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetExtensionSettingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetExtensionSettingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetExtensionSettingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ValidateExtensionSettingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ValidateExtensionSettingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ValidateExtensionSettingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSubscriptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSubscriptionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListSubscriptionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSubscriptionsUsingDataSourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSubscriptionsUsingDataSourceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListSubscriptionsUsingDataSourceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListExtensionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListExtensionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListExtensionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListEventsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListEventsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListEventsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.FireEventCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSystemTasksCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSystemTasksCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListSystemTasksCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListTasksCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListTasksCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListTasksCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSystemRolesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSystemRolesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListSystemRolesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListRolesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListRolesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListRolesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateRoleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DeleteRoleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetRolePropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetRolePropertiesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetRolePropertiesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetRolePropertiesCompletedEventArgs.Description">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetRolePropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSystemPoliciesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSystemPoliciesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSystemPoliciesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetSystemPoliciesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetPoliciesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetPoliciesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetPoliciesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetPoliciesCompletedEventArgs.InheritParent">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetPoliciesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.InheritParentSecurityCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSystemPermissionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSystemPermissionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSystemPermissionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetPermissionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetPermissionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetPermissionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.LogonUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.LogoffCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingQueryType">
            <summary>
            Type of query to do against a particular table
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingPair">
            <summary>
            Helper class
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingSQLQueryRunner">
            <summary>
            Runs a query against a Reporting server
            
            First deconstructs the query, running a count query first
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingSQLQueryRunner.RunQuery(System.Collections.Generic.List{System.String},System.String,System.String,System.Int32@,System.Collections.ArrayList@)">
            <summary>
            Order expected (count query then select query
            </summary>
            <param name="queries">Queries to run against the server</param>
            <param name="ReportingServer">Server to hit</param>
            <param name="ReportingDB">Database to hit</param>
            <param name="count"></param>
            <param name="Results">Results and counts from queries</param>
            <returns>If there were any errors</returns>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingSQLQueryBuilder">
            <summary>
            Contains helpful utility functions for building SQL queries
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingSQLQueryBuilder.BuildQuery(System.Type,System.Collections.Generic.Queue{ServerTestFramework.STFLive.Reporting.ReportingPair},ServerTestFramework.STFLive.Reporting.ReportingQueryType)">
            <summary>
            
            </summary>
            <param name="ReportingTableType"></param>
            <param name="KnownValues"></param>
            <param name="TypeOfQuery"></param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingTable">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingTable.GetMaxUserPUID(System.Data.SqlClient.SqlConnection)">
            <summary>
            GetMaxUserID
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingTable.GetMaxUserPUID(ServerTestFramework.STFLive.Reporting.ReportingDatabase)">
            <summary>
            GetMaxUserID - Using Reporting Database
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingTable.GetMinUserPUID(System.Data.SqlClient.SqlConnection)">
            <summary>
            GetMinUserID
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingTable.GetMinUserPUID(ServerTestFramework.STFLive.Reporting.ReportingDatabase)">
            <summary>
            GetMinUserID - Using Reporting Database
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingTable.FindNextUserID(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            FindNextUserID
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingTable.FindNextUserID(ServerTestFramework.STFLive.Reporting.ReportingDatabase,System.Int64)">
            <summary>
            Find Next User ID - Using Reporting Database
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingTable.FindNextUserID(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            FindNextUserID
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingTable.GetRecordCount(ServerTestFramework.STFLive.Reporting.ReportingDatabase)">
            <summary>
            Get Table Record Count
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingVerification">
            <summary>
            
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingVerification.m_Completed">
            <summary>
            
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingVerification.m_HResult">
            <summary>
            
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingVerification.m_Parameters">
            <summary>
            Job parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingVerification.RunJob">
            <summary>
            Execute the job
            </summary>
            <returns>The constructed SQL script to execute the job</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingVerification.Completed">
            <summary>
            
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingVerification.HResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingVerification.Results">
            <summary>
            The results of this job
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingVerification.StartTime">
            <summary>
            When the job was started
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingVerification.RunningTime">
            <summary>
            How long it took this job to run
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingVerification.JobName">
            <summary>
            Name of the job
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingVerification.JobSteps">
            <summary>
            Job Steps
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingVerification.Parameters">
            <summary>
            Job Parameters
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.XBLReport">
            <summary>
            Abstract class for Xbox Live Report objects. Each object will map to a specific report
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.XBLReport.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.XBLReport.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.XBLReport.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.XBLReport.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.XBLReport.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.XBLReport.ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.CdbVideoProcessing_SSIS">
            <summary>
            This is the SSIS Cdb Video Processing job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.SSISJob">
            <summary>
            
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CdbVideoProcessing_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CdbVideoProcessing_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CdbVideoProcessing_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.CdbVideoProcessing_SSIS.CdbVideoProcessing_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.CIQDatafeed">
            <summary>
            This is the CIQ Datafeed export job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CIQDatafeed.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CIQDatafeed.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CIQDatafeed.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.CIQDatafeed.CIQDatafeed_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailyProcessing_Crux">
            <summary>
            This is the ReportingDB Daily Processing Crux job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_Crux.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_Crux.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_Crux.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_Crux.RunJob">
            <summary>
            Execute the job. If the job contains a valid parameter object then it will create
            the SQL to run the stored procedure for Daily Processing Crux.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_Crux.UpdateStatus">
            <summary>
            Update Job status
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailyProcessing_Crux.DailyProcessing_Crux_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage">
            <summary>
            This is the Game Usage Daily Processing job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage.RunJob">
            <summary>
            Execute the job. If the job contains a valid parameter object then it will create
            the SQL to run the stored procedure for Game Usage Daily Processing
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage.UpdateStatus">
            <summary>
            Update Job status
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage.DailyProcessing_GameUsage_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_AchievementsProcessing">
            <summary>
            This is the OLAP ACHIEVEMENT CUBE daily processing job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapJob">
            <summary>
            OlapJob. From here the SSAS processing jobs will be derived.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapJob.RunJob">
            <summary>
            Run job. If no parameters are set then default job will be executed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapJob.UpdateStatus">
            <summary>
            Update Olap Job Status
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapJob.OlapJobParameters">
            <summary>
            Parameters for Olap Cube processing jobs
            Default settings are for regular job to run
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_AchievementsProcessing.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_AchievementsProcessing.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_AchievementsProcessing.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_AchievementsProcessing.DailySSAS_AchievementProcessing_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_CDBCruxUsageProcessing">
            <summary>
            This is the OLAP CDB CRUXUSAGE CUBE daily processing job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_CDBCruxUsageProcessing.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_CDBCruxUsageProcessing.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_CDBCruxUsageProcessing.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_CDBCruxUsageProcessing.DailySSAS_CDBCruxUsageProcessing_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_CruxUsageProcessing">
            <summary>
            This is the OLAP CRUXUSAGE CUBE daily processing job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_CruxUsageProcessing.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_CruxUsageProcessing.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_CruxUsageProcessing.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_CruxUsageProcessing.DailySSAS_CruxUsageProcessing_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_GameUsageProcessing">
            <summary>
            This is the OLAP GAMEUSAGE CUBE daily processing job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_GameUsageProcessing.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_GameUsageProcessing.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_GameUsageProcessing.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_GameUsageProcessing.DailySSAS_GameUsageProcessing_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_VideoCubeProcessing">
            <summary>
            This is the OLAP CDB CRUXUSAGE CUBE daily processing job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_VideoCubeProcessing.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_VideoCubeProcessing.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_VideoCubeProcessing.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_VideoCubeProcessing.DailySSAS_VideoCubeProcessing_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.FilterDB_PurgeFactTables">
            <summary>
            This is the FilterDB:Purge Fact Tables job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.FilterDB_PurgeFactTables.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.FilterDB_PurgeFactTables.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.FilterDB_PurgeFactTables.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.FilterDB_PurgeFactTables.FilterDB_PurgeFactTables_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapCubeGeneration">
            <summary>
            This is the Olap Partition tool creation job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapCubeGeneration.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapCubeGeneration.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapCubeGeneration.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapCubeGeneration.OlapCubeGeneration_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapFullProcessGameUsageJob">
            <summary>
            OlapFullProcessGameUsageJob
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.RealtimeDB_PurgeFactTables">
            <summary>
            This is the ReportRealtimeDB: Purge Fact Tables job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDB_PurgeFactTables.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDB_PurgeFactTables.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDB_PurgeFactTables.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.RealtimeDB_PurgeFactTables.RealtimeDB_PurgeFactTables_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.RealtimeDB_RealtimeProcessing">
            <summary>
            This is the ReportRealtimeDB: Realtime Processing job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDB_RealtimeProcessing.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDB_RealtimeProcessing.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDB_RealtimeProcessing.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.RealtimeDB_RealtimeProcessing.RealtimeDB_PurgeFactTables_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_TransferFactData">
            <summary>
            This is the ReportingDB: Drop Archived Facts job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_TransferFactData.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_TransferFactData.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_TransferFactData.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_TransferFactData.ReportArchiveDB_TransferFactData_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_UpdateFilegroups">
            <summary>
            This is the ReportingDB: Drop Archived Facts job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_UpdateFilegroups.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_UpdateFilegroups.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_UpdateFilegroups.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_UpdateFilegroups.ReportArchiveDB_UpdateFilegroups_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingDB_DropArchivedFacts">
            <summary>
            This is the ReportingDB: Drop Archived Facts job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDB_DropArchivedFacts.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDB_DropArchivedFacts.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDB_DropArchivedFacts.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingDB_DropArchivedFacts.ReportingDB_DropArchivedFacts_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingDB_PurgeFactTables">
            <summary>
            This is the ReportingDB:Purge Fact Tables job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDB_PurgeFactTables.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDB_PurgeFactTables.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDB_PurgeFactTables.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingDB_PurgeFactTables.ReportingDB_PurgeFactTables_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.SCGExport_SSIS">
            <summary>
            This is the SCGExport SSIS package job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.SCGExport_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.SCGExport_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.SCGExport_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.SCGExport_SSIS.SCGExport_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.SCGImportFeed_SSIS">
            <summary>
            This is the SCGImport SSIS package job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.SCGImportFeed_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.SCGImportFeed_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.SCGImportFeed_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.SCGImportFeed_SSIS.SCGImportFeed_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Accounts_SSIS">
            <summary>
            This is the UODB Accounts SSIS job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Accounts_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Accounts_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Accounts_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Accounts_SSIS.UODB_Accounts_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Music_SSIS">
            <summary>
            This is the UODB Music SSIS job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Music_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Music_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Music_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Music_SSIS.UODB_Music_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Offers_SSIS">
            <summary>
            This is the UODB Offers SSIS job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Offers_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Offers_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Offers_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Offers_SSIS.UODB_Offers_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Primary_SSIS">
            <summary>
            This is the Daily UODB SSIS job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Primary_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Primary_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Primary_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Primary_SSIS.UODB_Primary_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Purchase_SSIS">
            <summary>
            This is the UODB Purchase SSIS job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Purchase_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Purchase_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Purchase_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Purchase_SSIS.UODB_Purchase_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Realtime_SSIS">
            <summary>
            This is the UODB Realtime SSIS job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Realtime_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Realtime_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Realtime_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Realtime_SSIS.UODB_Realtime_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Secondary_SSIS">
            <summary>
            This is the Weekly UODB SSIS job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Secondary_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Secondary_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Secondary_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Secondary_SSIS.UODB_Secondary_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Video_SSIS">
            <summary>
            This is the UODB Video SSIS job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Video_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Video_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Video_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Video_SSIS.UODB_Video_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.WMIS_Download">
            <summary>
            This is the WMIS Download job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.WMIS_Download.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.WMIS_Download.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.WMIS_Download.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.WMIS_Download.WMIS_Download_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.AchievementSummary.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.AchievementSummary.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.AchievementSummary.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.AchievementSummary.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.AchievementSummary.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.AchievementSummary.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.ContractualPartners.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.ContractualPartners.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.ContractualPartners.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.ContractualPartners.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.ContractualPartners.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.ContractualPartners.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.FirstTitlePlayed.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.FirstTitlePlayed.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.FirstTitlePlayed.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.FirstTitlePlayed.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.FirstTitlePlayed.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.FirstTitlePlayed.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.LastWebActivity.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.LastWebActivity.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.LastWebActivity.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.LastWebActivity.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.LastWebActivity.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.LastWebActivity.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceDownloadSummary.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceDownloadSummary.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceDownloadSummary.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceDownloadSummary.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceDownloadSummary.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceDownloadSummary.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceScorecard.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceScorecard.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceScorecard.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceScorecard.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceScorecard.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceScorecard.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTitleOffer.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTitleOffer.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTitleOffer.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTitleOffer.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTitleOffer.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTitleOffer.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTypeTier.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTypeTier.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTypeTier.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTypeTier.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTypeTier.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTypeTier.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.MusicRoyalty.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MusicRoyalty.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MusicRoyalty.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MusicRoyalty.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MusicRoyalty.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MusicRoyalty.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageDaily.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageDaily.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageDaily.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageDaily.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageDaily.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageDaily.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageMonthly.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageMonthly.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageMonthly.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageMonthly.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageMonthly.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageMonthly.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.RealTimeAccounts.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.RealTimeAccounts.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.RealTimeAccounts.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.RealTimeAccounts.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.RealTimeAccounts.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.RealTimeAccounts.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.RealTimeTitleUsage.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.RealTimeTitleUsage.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.RealTimeTitleUsage.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.RealTimeTitleUsage.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.RealTimeTitleUsage.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.RealTimeTitleUsage.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.SubscriberLife.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.SubscriberLife.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.SubscriberLife.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.SubscriberLife.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.SubscriberLife.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.SubscriberLife.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageDetails.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageDetails.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageDetails.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageDetails.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageDetails.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageDetails.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageSummary.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageSummary.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageSummary.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageSummary.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageSummary.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageSummary.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.VideoRoyalty.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VideoRoyalty.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VideoRoyalty.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VideoRoyalty.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.VideoRoyalty.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.VideoRoyalty.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.VideoStudio.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VideoStudio.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VideoStudio.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VideoStudio.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.VideoStudio.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.VideoStudio.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.VisitorFrequency.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VisitorFrequency.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VisitorFrequency.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VisitorFrequency.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.VisitorFrequency.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.VisitorFrequency.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.Xbox1DownloadDetails.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.Xbox1DownloadDetails.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.Xbox1DownloadDetails.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.Xbox1DownloadDetails.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.Xbox1DownloadDetails.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.Xbox1DownloadDetails.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.XboxAccountSummary.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.XboxAccountSummary.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.XboxAccountSummary.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.XboxAccountSummary.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.XboxAccountSummary.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.XboxAccountSummary.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.StagingTable">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_achievements">
            <summary>
            A class representing T_achievements table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_achievements.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int32,System.Int64,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_achievements.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int32,System.Int64,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_achievements.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_achievements.UpdateOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_achievements.UpdateOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_achievements.GetContent(System.Data.SqlClient.SqlConnection,System.Int64,System.Int32,System.Int32)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_base_offers">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_content_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_content_package">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_dmp_purchase_transactions">
            <summary>
            A class representing T_dmp_purchase_transactions table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_dmp_purchase_transactions.AddOneRow(System.Data.SqlClient.SqlConnection,System.Guid,System.Int32)">
            <summary>
            AddOneRow
            if i_purchase_type_id=1 then Xbox Live Offers, if 2 then MusicNet, if 3 then SyncCast
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_dmp_purchase_transactions.GetContent(System.Data.SqlClient.SqlConnection,System.Guid)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_dmp_purchase_transactions.GetContent(System.Data.SqlClient.SqlConnection,System.Guid,System.String)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_dmp_purchase_transactions_music">
            <summary>
            A class representing T_dmp_purchase_transactions_music table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_dmp_purchase_transactions_music.GetContent(System.Data.SqlClient.SqlConnection,System.Guid)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_dmp_purchase_transactions_video">
            <summary>
            A class representing T_dmp_purchase_transactions_video table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_dmp_purchase_transactions_video.GetContent(System.Data.SqlClient.SqlConnection,System.Guid)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_elite_migration_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_fdb_time">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_guest_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_machines">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.AddOneRow(System.Data.SqlClient.SqlConnection)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.UpdateOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.UpdateOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.GetMaxMachinePUID(System.Data.SqlClient.SqlConnection)">
            <summary>
            GetMaxUserID
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.GetMinMachinePUID(System.Data.SqlClient.SqlConnection)">
            <summary>
            GetMaxUserID
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.FindNextMachineID(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            FindNextUserID
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.FindNextMachineID(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            FindNextUserID
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.GetContent(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.GetContent(System.Data.SqlClient.SqlConnection,System.Int64,System.String)">
            <summary>
            GetContent
            szTable should be "t_machines" or "t_machines_rt"
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_migrate_account_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_msg_snd_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_new_account_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_offers">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_presence_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_provision_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_publisher_titles">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_purchase_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_content_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_content_xbox360_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_guest_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_migrate_account_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_msg_snd_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_new_account_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_presence_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_provision_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_purchase_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_session_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_session_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_spscustomeraccount">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_spscustomeraccount.#ctor">
            <summary>
            Constructors
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_spscustomeraccount.AddOneRow(System.Data.SqlClient.SqlConnection)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_spscustomeraccount.AddOneRow(System.Data.SqlClient.SqlCommand)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions">
            <summary>
            A class representing T_subscriptions table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Int64,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64,System.Int64,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Int64,System.Int32,System.String,System.DateTime)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.UpdateOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.UpdateOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.GetContent(System.Data.SqlClient.SqlConnection,System.Int64,System.Int64)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.GetContent(System.Data.SqlClient.SqlConnection,System.Int64,System.Int64,System.Int32,System.String,System.DateTime)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_title_culture_details">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_title_feature_data">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_title_offers">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_titles">
            <summary>
            A class representing T_titles
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_titles.FindNextTitleId(System.Data.SqlClient.SqlCommand,System.Byte)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_titles.FindNextTitleId(System.Data.SqlClient.SqlConnection,System.Byte)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_titles.AddOneRow(System.Data.SqlClient.SqlConnection,System.Byte)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_titles.AddOneRow(System.Data.SqlClient.SqlConnection,System.Byte,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_titles.AddOneRow(System.Data.SqlClient.SqlCommand,System.Byte,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_titles.GetOneTitle(System.Data.SqlClient.SqlConnection,System.Byte)">
            <summary>
            GetOneTitle
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_user_musicnet_accounts">
            <summary>
            A class representing T_user_musicnet_accounts table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_musicnet_accounts.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_musicnet_accounts.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_musicnet_accounts.UpdateOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_musicnet_accounts.UpdateOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_musicnet_accounts.GetContent(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_user_per_client_type_data">
            <summary>
            A class representing T_user_per_client_type_data table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_per_client_type_data.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Byte,System.Byte,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_per_client_type_data.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64,System.Byte,System.Byte,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_user_per_client_type_data_weekly">
            <summary>
            A class representing T_user_per_client_type_data_weekly table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_per_client_type_data_weekly.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Byte,System.Byte,System.DateTime,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_per_client_type_data_weekly.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64,System.Byte,System.Byte,System.DateTime,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_user_settings">
            <summary>
            A class representing T_user_settings table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_settings.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Int32,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_settings.GetContent(System.Data.SqlClient.SqlConnection,System.Int64,System.Int32,System.Int32)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_users">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.#ctor">
            <summary>
            Constructors
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddOneRow(System.Data.SqlClient.SqlConnection)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddOneRow(System.Data.SqlClient.SqlCommand)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Byte)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64,System.Byte)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddMultipleRowsInTrans(System.Data.SqlClient.SqlConnection,System.Int64,System.Int32)">
            <summary>
            AddMultipleRowsInTrans
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.UpdateMultipleRowsInTrans(System.Data.SqlClient.SqlConnection,System.Int64,System.Int32)">
            <summary>
            AddMultipleRowsInTrans
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.UpdateOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.UpdateOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.GetContent(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.GetContent(System.Data.SqlClient.SqlConnection,System.Int64,System.String)">
            <summary>
            GetContent
            szTable should be "t_users" or "t_users_rt"
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_users_rt">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users_rt.GetContent(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users_rt.#ctor">
            <summary>
            Constructors
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles">
            <summary>
            A class representing T_xmsg_user_titles table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Int32,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64,System.Int32,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles.UpdateOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles.UpdateOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles.GetContent(System.Data.SqlClient.SqlConnection,System.Int64,System.Int32)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage_Verification">
            <summary>
            
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage_Verification.#ctor(ServerTestFramework.STFLive.Database.ReportingDB,System.DateTime,System.DateTime)">
            <summary>
            
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage_Verification.VerifyFactTableSingle(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage_Verification_BVT">
            <summary>
            
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapReportData">
            <summary>
            ReportingData object to submit queries to OlapDB for reports
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.OlapReportData.m_Source">
            <summary>
            Data source: UODB, SSIS, ReportingDB, etc
            </summary>        
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.OlapReportData.m_DataType">
            <summary>
            Get internal data type (Queries, Raw, Counts)
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.OlapReportData.m_Queries">
            <summary>
            List of queries
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.OlapReportData.m_RawData">
            <summary>
            Raw object data (Caller must know how to cast the data)
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.OlapReportData.m_ReportType">
            <summary>
            Report that this data object maps to
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapReportData.RunDebugQuery">
            <summary>
            Run a query in OLAPDB to obtain the raw data
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapReportData.InitializeDataObject(ServerTestFramework.STFLive.Reporting.XBLReports)">
            <summary>
            Initialize ReportingData object.
            ** In the future this should be modified to generate dynamic data **
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapReportData.GetReportDataQueries(System.String)">
            <summary>
            Parse the Report Test Script and extract all OLAP queries with their respective
            report section and test case.
            </summary>
            <param name="TestScriptFileName">Report Test script file</param>
            <returns>Hashtable in the form of (Key)ReportQueryNumber (Value)|ReportSectionNumber|TestCaseNumber|Query|</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapReportData.ObjectType">
            <summary>
             Get ReportingData object type
            </summary>        
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.CleanserTCPEvent">
            <summary>
            CleanserTCPEvent
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CleanserTCPEvent.#ctor">
            <summary>
            CleanserTCPEvent constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CleanserTCPEvent.ConnectToCleanser(System.Int32,System.Int32)">
            <summary>
            ConnectToCleanser
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CleanserTCPEvent.DisconnectFromCleanser(System.Int32)">
            <summary>
            DisconnectFromCleanser
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CleanserTCPEvent.SocketSend(System.Int32,System.Byte[])">
            <summary>
            SocketSend
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CleanserTCPEvent.SendMessage(System.Int32,System.Int32,System.String)">
            <summary>
            SendMessage
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.MigrateAccountTCPEvent">
            <summary>
            MigrateAccountTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ProvisionTCPEvent">
            <summary>
            ProvisionTCPEvent 
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DeprovisionTCPEvent">
            <summary>
            DeprovisionTCPEvent 
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ContentTCPEvent">
            <summary>
            ContentTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ContentXeTCPEvent">
            <summary>
            ContentXeTCPEvent - Not Done
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.PresenceTitleStartTCPEvent">
            <summary>
            PresenceTitleStartTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.PresenceTitleEndTCPEvent">
            <summary>
            PresenceTitleEndTCPEvent 
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.SessionStartTCPEvent">
            <summary>
            SessionStartTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.SessionEndTCPEvent">
            <summary>
            SessionEndTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.PresenceGuestTCPEvent">
            <summary>
            PresenceGuestTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.XePurchaseTCPEvent">
            <summary>
            XePurchaseTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.EliteMigrationTCPEvent">
            <summary>
            EliteMigrationTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.GenericTCPEvent">
            <summary>
            ContentTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ArgonTCPEvent">
            <summary>
            ArgonTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.GeoFenceOfferPurchaseTCPEvent">
            <summary>
            GeoFenceOfferPurchaseTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.GeoFenceContentReferralTCPEvent">
            <summary>
            GeoFenceContentReferralTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.GeoFenceVideoPurchaseTCPEvent">
            <summary>
            GeoFenceVideoPurchaseTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.GeoFenceVideoAcquireURLTCPEvent">
            <summary>
            GeoFenceVideoAcquireURLTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.GeoFenceVideoAcquireLicenseTCPEvent">
            <summary>
            GeoFenceVideoAcquireLicenseTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.BannerViewAggTCPEvent">
            <summary>
            BannerViewAggTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.BannerViewTCPEvent">
            <summary>
            BannerViewTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.BannerClickAggTCPEvent">
            <summary>
            BannerClickAggTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.BannerClickTCPEvent">
            <summary>
            BannerClickTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.BannerPurchaseTCPEvent">
            <summary>
            BannerPurchaseTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.BannerPurchaseAggTCPEvent">
            <summary>
            BannerPurchaseAggTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.FusionTCPEvent">
            <summary>
            FusionTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.FusionAggTCPEvent">
            <summary>
            FusionAggTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.LicenseTCPEvent">
            <summary>
            LicenseTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.PurchaseOfferTCPEvent">
            <summary>
            PurchaseOfferTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapDailyProcessingData">
            <summary>
            GameUsageFactData
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapDailyProcessingData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapDailyProcessingData.Source">
            <summary>
            Data source: UODB, SSIS, ReportingDB, etc
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapDailyProcessingData.ObjectType">
            <summary>
             Get ReportingData object type
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapDailyProcessingData.DataType">
            <summary>
            Get internal data type (Queries, Raw, Counts)
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapDailyProcessingBVTData">
            <summary>
            GameUsageFactData
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapGenericData">
            <summary>
            Generic Olap Data class
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapGenericData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapGenericData.Source">
            <summary>
            Data source: UODB, SSIS, ReportingDB, etc
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapGenericData.ObjectType">
            <summary>
             Get ReportingData object type
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapGenericData.DataType">
            <summary>
            Get internal data type (Queries, Raw, Counts)
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapGenericData.TableCounts">
            <summary>
            ReportingData is a series of tables and respective row counts
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapGenericData.RawData">
            <summary>
            Raw object data (Caller must know how to cast the data)
            </summary>
        </member>
        <member name="F:RealtimeDBStressData.m_Source">
            <summary>
            Data source: UODB, SSIS, ReportingDB, etc
            </summary>
        </member>
        <member name="F:RealtimeDBStressData.m_ObjectType">
            <summary>
             Get ReportingData object type
            </summary>
        </member>
        <member name="F:RealtimeDBStressData.m_DataType">
            <summary>
            Get internal data type (Queries, Raw, Counts)
            </summary>
        </member>
        <member name="F:RealtimeDBStressData.m_Queries">
            <summary>
            List of queries
            </summary>
        </member>
        <member name="M:RealtimeDBStressData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader">
            <summary>
            This class contains the logic necessary to load Data objects into the Reporting Realtime Database
            or FilterDB databases that feed the Realtime system.
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader.m_MinUserIndex">
            <summary>
            UserPuid index - Puid to use in the next data generation
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader.m_Titles">
            <summary>
            Array of titles to use
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader.m_Offers">
            <summary>
            Array of offers to use
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader.m_TargetTable">
            <summary>
            Target table to insert data into
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader.GetSupportedDatabases">
            <summary>
            Get the database names supported by this loader object
            </summary>
            <returns>List of database names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader.InjectSingleData">
            <summary>
            This method creates a SQL query to add a single row of data into specific tables of a database.
            </summary>        
            <returns>SQL string to add data</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader.IncreaseUserDataIndex">
            <summary>
            Internal function to increase data index
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader.MinUserIndex">
            <summary>
            Initialize the data index
            </summary>
            <param name="SeedIndex">Seed value to use</param>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDB.OpenSQLConnection">
            <summary>
            Asynchronously attempts to connect to all RegDB server IPs and returns as soon as a successful connection is made.
            Once one is found, the server name is cached so subsequent attempts return much quicker.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Reporting.RegDBInfo">
            <summary>
            Get information from RegDB.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInfo.Close">
            <summary>
            close the sql connection
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInfo.GetAllSuites">
            <summary>
            Retrieves a list of all suites in RegDB
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInfo.GetAllEnvironments">
            <summary>
            Retrieves a list of all environments in RegDB, with an array that can be indexed by environmentID
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInfo.GetAllBuilds">
            <summary>
            Retrieves a list of all build runs in RegDB
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInfo.GetSuitePassCountForBuild(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets the pass and total count for a build for a suite
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInfo.GetSuiteTree(System.String)">
            <summary>
            Gets RegDB's view of a suite's tree
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInfo.GetLeafPassFail(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets whether a test leaf node passed or ran
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInfo.GetNodeOutputToReportDestination(System.String,System.Int32,ServerTestFramework.Report.Destination)">
            <summary>
            Retrieves output from RegDB and throws it at a report destination
            </summary>
        </member>
        <member name="T:ServerTestFramework.Reporting.RegDBTreeReader">
            <summary>
            Retrieves a node tree containing every test group and case that RegDB contains for a specific suite.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Reporting.RegDBInquirer">
            <summary>
            Represents a specific component (suite, group or case) on which queries can be performed.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.#ctor(System.String)">
            <summary>
            This query is about a specific test suite.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.#ctor(System.String,System.String)">
            <summary>
            This query is about a specific test group.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.#ctor(System.String,System.String,System.String)">
            <summary>
            This query is about a specific test case.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.GetHistory">
            <summary>
            Retrieves the history of the component that this object represents.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.GetLog(ServerTestFramework.Reporting.RegDBInquirer.RegDBHistory)">
            <summary>
            Retrieves the output from a specific build of the component represented by this object.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.GetLog(ServerTestFramework.Reporting.RegDBInquirer.RegDBHistory,ServerTestFramework.Report.Destination)">
            <summary>
            Retrieves the output from a specific build of the component represented by this object.
            /// if outDst is non-null, then the log is pushed into a specific reporting destination rather than returned as a string
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.GetLog(System.String,System.String,System.UInt32)">
            <summary>
            Retrieves the output from a specific build of the component represented by this object.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.GetLog(System.UInt32)">
            <summary>
            Retrieves the output from a specific build of the component represented by this object.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.GetLog(System.UInt32,ServerTestFramework.Report.Destination)">
            <summary>
            Retrieves the output from a specific build of the component represented by this object.
            if outDst is non-null, then the log is pushed into a specific reporting destination rather than returned as a string
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.CancelGetLog">
            <summary>
            Cancels a currently running GetLog() request.
            This blocks until log retrieval is actually halted.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Reporting.RegDBInquirer.RegDBHistory">
            <summary>
            represents a pass/fail entry for as specific build of a component.
            </summary>
        </member>
        <member name="T:ServerTestFramework.TestDB.TestDB">
            <summary> Used to open a connection with TestDB. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDB.OpenConnection">
            <summary> Opens a connection to the default TestDB.  You are responsible for closing the returned connection. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDB.OpenConnection(System.String)">
            <summary> Opens a connection to a TestDB.  You are responsible for closing the returned connection. </summary>
        </member>
        <member name="T:ServerTestFramework.TestDB.TestDBConnector">
            <summary> Used as a base class for classes that reuse a connection to TestDB. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDBConnector.#ctor">
            <summary> Connects to TestDB to prepare to read. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDBConnector.Dispose">
            <summary> Closes the connection to TestDB. </summary>
        </member>
        <member name="T:ServerTestFramework.TestDB.TestDBReader">
            <summary> Used to read data from TestDB. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDBReader.ClearCache">
            <summary> Clears all cached TestDB data. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDBReader.GetRootNodeNames">
            <summary> Gets a list of the names of all root nodes. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDBReader.GetVersionList">
            <summary> Gets a list of all versions. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDBReader.GetEnvironmentList">
            <summary> Gets a list of all environments. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDBReader.GetEnvironment(System.Int32)">
            <summary> Given a specific environment ID, returns information about that enviornment. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetRatingAverages(System.Guid,System.DateTime,System.Boolean,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.BeginGetRatingAverages(System.Guid,System.DateTime,System.Boolean,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.EndGetRatingAverages(System.IAsyncResult,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetRatingAveragesAsync(System.Guid,System.DateTime,System.Boolean,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetRatingAveragesAsync(System.Guid,System.DateTime,System.Boolean,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaRatingAverages(System.Guid,System.DateTime,System.Boolean,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.BeginGetDeltaRatingAverages(System.Guid,System.DateTime,System.Boolean,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.EndGetDeltaRatingAverages(System.IAsyncResult,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaRatingAveragesAsync(System.Guid,System.DateTime,System.Boolean,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaRatingAveragesAsync(System.Guid,System.DateTime,System.Boolean,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetUnauthRatingAverages(System.Guid,System.DateTime,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.BeginGetUnauthRatingAverages(System.Guid,System.DateTime,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.EndGetUnauthRatingAverages(System.IAsyncResult,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetUnauthRatingAveragesAsync(System.Guid,System.DateTime,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetUnauthRatingAveragesAsync(System.Guid,System.DateTime,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaUnauthRatingAverages(System.Guid,System.DateTime,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.BeginGetDeltaUnauthRatingAverages(System.Guid,System.DateTime,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.EndGetDeltaUnauthRatingAverages(System.IAsyncResult,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaUnauthRatingAveragesAsync(System.Guid,System.DateTime,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaUnauthRatingAveragesAsync(System.Guid,System.DateTime,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetRatingAveragesWithReviewCount(System.Guid,System.DateTime,System.Boolean,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.BeginGetRatingAveragesWithReviewCount(System.Guid,System.DateTime,System.Boolean,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.EndGetRatingAveragesWithReviewCount(System.IAsyncResult,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetRatingAveragesWithReviewCountAsync(System.Guid,System.DateTime,System.Boolean,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetRatingAveragesWithReviewCountAsync(System.Guid,System.DateTime,System.Boolean,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaRatingAveragesWithReviewCount(System.Guid,System.DateTime,System.Boolean,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.BeginGetDeltaRatingAveragesWithReviewCount(System.Guid,System.DateTime,System.Boolean,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.EndGetDeltaRatingAveragesWithReviewCount(System.IAsyncResult,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaRatingAveragesWithReviewCountAsync(System.Guid,System.DateTime,System.Boolean,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaRatingAveragesWithReviewCountAsync(System.Guid,System.DateTime,System.Boolean,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetRatingAveragesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaRatingAveragesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetUnauthRatingAveragesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaUnauthRatingAveragesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetRatingAveragesWithReviewCountCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaRatingAveragesWithReviewCountCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesCompletedEventArgs.transactionToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesCompletedEventArgs.transactionStartTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesCompletedEventArgs.results">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesCompletedEventArgs.transactionToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesCompletedEventArgs.transactionStartTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesCompletedEventArgs.results">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetUnauthRatingAveragesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetUnauthRatingAveragesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetUnauthRatingAveragesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetUnauthRatingAveragesCompletedEventArgs.transactionToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetUnauthRatingAveragesCompletedEventArgs.transactionStartTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetUnauthRatingAveragesCompletedEventArgs.results">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaUnauthRatingAveragesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaUnauthRatingAveragesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaUnauthRatingAveragesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaUnauthRatingAveragesCompletedEventArgs.transactionToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaUnauthRatingAveragesCompletedEventArgs.transactionStartTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaUnauthRatingAveragesCompletedEventArgs.results">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesWithReviewCountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesWithReviewCountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesWithReviewCountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesWithReviewCountCompletedEventArgs.transactionToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesWithReviewCountCompletedEventArgs.transactionStartTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesWithReviewCountCompletedEventArgs.results">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesWithReviewCountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesWithReviewCountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesWithReviewCountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesWithReviewCountCompletedEventArgs.transactionToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesWithReviewCountCompletedEventArgs.transactionStartTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesWithReviewCountCompletedEventArgs.results">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.MultiRating">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.AdvanceState(System.Guid,System.Object,System.Int64,System.Guid,System.String[],System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginAdvanceState(System.Guid,System.Object,System.Int64,System.Guid,System.String[],System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndAdvanceState(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.AdvanceStateAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String[],System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.AdvanceStateAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String[],System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetNickname(System.Int64,System.Guid,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetNickname(System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetNickname(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetNicknameAsync(System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetNicknameAsync(System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetNicknameSuggestions(System.String,System.String[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetNicknameSuggestions(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetNicknameSuggestions(System.IAsyncResult,System.String[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetNicknameSuggestionsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetNicknameSuggestionsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingAverage(System.Guid,System.Object,ServerTestFramework.LiveService.msnrr.multi.Rating@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetRatingAverage(System.Guid,System.Object,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetRatingAverage(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.Rating@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingAverageAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingAverageAsync(System.Guid,System.Object,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingAverageRollup(System.Guid,System.Object,ServerTestFramework.LiveService.msnrr.multi.Rating@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetRatingAverageRollup(System.Guid,System.Object,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetRatingAverageRollup(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.Rating@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingAverageRollupAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingAverageRollupAsync(System.Guid,System.Object,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingByUser(System.Guid,System.Object,System.Int64,System.Guid,ServerTestFramework.LiveService.msnrr.multi.Rating@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetRatingByUser(System.Guid,System.Object,System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetRatingByUser(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.Rating@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingByUserAsync(System.Guid,System.Object,System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingByUserAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingByUserWithAverage(System.Guid,System.Object,System.Int64,System.Guid,ServerTestFramework.LiveService.msnrr.multi.Rating@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetRatingByUserWithAverage(System.Guid,System.Object,System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetRatingByUserWithAverage(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.Rating@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingByUserWithAverageAsync(System.Guid,System.Object,System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingByUserWithAverageAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetMultipleRatingsByUser(System.Guid,System.Object[],System.Int64,System.Guid,ServerTestFramework.LiveService.msnrr.multi.Rating[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetMultipleRatingsByUser(System.Guid,System.Object[],System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetMultipleRatingsByUser(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.Rating[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetMultipleRatingsByUserAsync(System.Guid,System.Object[],System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetMultipleRatingsByUserAsync(System.Guid,System.Object[],System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingsByUser(System.Guid,System.Int64,System.Guid@,System.Guid,ServerTestFramework.LiveService.msnrr.multi.Rating[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetRatingsByUser(System.Guid,System.Int64,System.Guid,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetRatingsByUser(System.IAsyncResult,System.Guid@,ServerTestFramework.LiveService.msnrr.multi.Rating[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingsByUserAsync(System.Guid,System.Int64,System.Guid,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingsByUserAsync(System.Guid,System.Int64,System.Guid,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewByUser(System.Guid,System.Object,System.Int64,System.Guid,ServerTestFramework.LiveService.msnrr.multi.Review@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetReviewByUser(System.Guid,System.Object,System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetReviewByUser(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.Review@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewByUserAsync(System.Guid,System.Object,System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewByUserAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviews(System.Guid,System.Object,System.Int32@,System.Int32@,System.String@,System.String@,System.Int32@,ServerTestFramework.LiveService.msnrr.multi.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetReviews(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetReviews(System.IAsyncResult,System.Int32@,System.Int32@,System.String@,System.String@,System.Int32@,ServerTestFramework.LiveService.msnrr.multi.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsAsync(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsAsync(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsByUser(System.Guid,System.Int64,System.Guid,System.Guid,ServerTestFramework.LiveService.msnrr.multi.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetReviewsByUser(System.Guid,System.Int64,System.Guid,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetReviewsByUser(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsByUserAsync(System.Guid,System.Int64,System.Guid,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsByUserAsync(System.Guid,System.Int64,System.Guid,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsRollup(System.Guid,System.Object,System.Int32@,System.Int32@,System.String@,System.String@,System.Int32@,ServerTestFramework.LiveService.msnrr.multi.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetReviewsRollup(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetReviewsRollup(System.IAsyncResult,System.Int32@,System.Int32@,System.String@,System.String@,System.Int32@,ServerTestFramework.LiveService.msnrr.multi.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsRollupAsync(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsRollupAsync(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetUnauthRatings(System.Guid,System.Object,System.Guid,System.Int32,System.Int32[]@,System.Int64[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetUnauthRatings(System.Guid,System.Object,System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetUnauthRatings(System.IAsyncResult,System.Int32[]@,System.Int64[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetUnauthRatingsAsync(System.Guid,System.Object,System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetUnauthRatingsAsync(System.Guid,System.Object,System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveNickname(System.Int64,System.Guid,System.String,System.String[]@,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginSaveNickname(System.Int64,System.Guid,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndSaveNickname(System.IAsyncResult,System.String[]@,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveNicknameAsync(System.Int64,System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveNicknameAsync(System.Int64,System.Guid,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveRating(System.Guid,System.Object,System.Int64,System.Guid,System.Guid[],System.Int32[],ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginSaveRating(System.Guid,System.Object,System.Int64,System.Guid,System.Guid[],System.Int32[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndSaveRating(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveRatingAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Guid[],System.Int32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveRatingAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Guid[],System.Int32[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BulkSaveRating(System.Guid,System.Object,System.Int64,System.Guid,System.Guid[],System.Int32[],System.DateTime,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginBulkSaveRating(System.Guid,System.Object,System.Int64,System.Guid,System.Guid[],System.Int32[],System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndBulkSaveRating(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BulkSaveRatingAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Guid[],System.Int32[],System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BulkSaveRatingAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Guid[],System.Int32[],System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReportViolation(System.Object,System.Guid,System.String,System.String,System.String,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginSaveReportViolation(System.Object,System.Guid,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndSaveReportViolation(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReportViolationAsync(System.Object,System.Guid,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReportViolationAsync(System.Object,System.Guid,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginSaveReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndSaveReview(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BulkSaveReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,System.DateTime,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginBulkSaveReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,System.DateTime,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndBulkSaveReview(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BulkSaveReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,System.DateTime,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BulkSaveReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,System.DateTime,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReviewHelpfulness(System.Object,System.Int64,System.Guid,System.Guid,System.Int32,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginSaveReviewHelpfulness(System.Object,System.Int64,System.Guid,System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndSaveReviewHelpfulness(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReviewHelpfulnessAsync(System.Object,System.Int64,System.Guid,System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReviewHelpfulnessAsync(System.Object,System.Int64,System.Guid,System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveUnauthRatings(System.Guid,System.Object,System.Guid,System.Int32[],System.Int32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginSaveUnauthRatings(System.Guid,System.Object,System.Guid,System.Int32[],System.Int32[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndSaveUnauthRatings(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveUnauthRatingsAsync(System.Guid,System.Object,System.Guid,System.Int32[],System.Int32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveUnauthRatingsAsync(System.Guid,System.Object,System.Guid,System.Int32[],System.Int32[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.ValidateReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginValidateReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndValidateReview(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.ValidateReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.ValidateReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.AdvanceStateCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetNicknameCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetNicknameSuggestionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingAverageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingAverageRollupCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingByUserWithAverageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetMultipleRatingsByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingsByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsRollupCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetUnauthRatingsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveNicknameCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveRatingCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BulkSaveRatingCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReportViolationCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReviewCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BulkSaveReviewCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReviewHelpfulnessCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveUnauthRatingsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.ValidateReviewCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.ValidationError">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ValidationError.DataField">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ValidationError.Code">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ValidationError.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ValidationError.MaxLength">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.Field">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.empty">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.nickname">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.ratingItemID">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.reviewFieldID">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.title">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.customProperty">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.name">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.email">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.comments">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.score">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.Type">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.RequiredFieldMissing">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.TextTooLong">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.TextInvalidChars">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.TextProfanity">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.InvalidFormat">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.TooManyChanges">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.AlreadyTaken">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.ReviewsRequireRatings">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.ReviewsRequireOneField">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.UserCannotRateOwnReview">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.Helpfulness">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Helpfulness.Count">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Helpfulness.Sum">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Helpfulness.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Helpfulness.ErrorSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Helpfulness.CurrentUser">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Helpfulness.CurrentUserSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.ReviewField">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.ErrorSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.IDSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.Label">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.MaxLength">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.MaxLengthSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.Cols">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.ColsSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.Rows">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.RowsSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.Rank">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.RankSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.Required">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.RequiredSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.User">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.User.Nickname">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.User.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.User.IDSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.User.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.User.ErrorSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.Review">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.Item">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.Date">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.DateSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.User">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.CustomProperty">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.Rating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.Title">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.Field">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.Helpfulness">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.IDSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.ErrorSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.ItemID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ItemID.StringID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ItemID.LongID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ItemID.GuidID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ItemID.GuidIDSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.Rating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.Item">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.RatingItem">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.OverallRating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.Date">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.DateSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.ErrorSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.TotalCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.TotalCountSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.RatingAttribute">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.RatingItem">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.IDSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.Label">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.ErrorSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.Rank">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.RankSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.Required">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.RequiredSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingAttribute.AverageValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingAttribute.AverageValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingAttribute.UserValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingAttribute.UserValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingAttribute.Count">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingAttribute.CountSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.OverallRating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.OverallRating.AverageValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.OverallRating.AverageValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.OverallRating.UserValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.OverallRating.UserValueSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.AdvanceStateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.AdvanceStateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.AdvanceStateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetNicknameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetNicknameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetNicknameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetNicknameCompletedEventArgs.nickname">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetNicknameSuggestionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetNicknameSuggestionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetNicknameSuggestionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetNicknameSuggestionsCompletedEventArgs.suggestionList">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingAverageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingAverageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingAverageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingAverageCompletedEventArgs.rating">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingAverageRollupCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingAverageRollupCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingAverageRollupCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingAverageRollupCompletedEventArgs.rating">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingByUserCompletedEventArgs.rating">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingByUserWithAverageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingByUserWithAverageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingByUserWithAverageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingByUserWithAverageCompletedEventArgs.rating">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetMultipleRatingsByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetMultipleRatingsByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetMultipleRatingsByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetMultipleRatingsByUserCompletedEventArgs.ratings">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingsByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingsByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingsByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingsByUserCompletedEventArgs.userID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingsByUserCompletedEventArgs.ratings">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingsByUserCompletedEventArgs.nickname">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetReviewByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetReviewByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewByUserCompletedEventArgs.review">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventArgs.pageSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventArgs.pageNum">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventArgs.sortBy">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventArgs.sortOrder">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventArgs.totalCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventArgs.Reviews">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetReviewsByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetReviewsByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsByUserCompletedEventArgs.Reviews">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventArgs.pageSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventArgs.pageNum">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventArgs.sortBy">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventArgs.sortOrder">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventArgs.totalCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventArgs.Reviews">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetUnauthRatingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetUnauthRatingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetUnauthRatingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetUnauthRatingsCompletedEventArgs.ratingScores">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetUnauthRatingsCompletedEventArgs.ratingCounts">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveNicknameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveNicknameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveNicknameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveNicknameCompletedEventArgs.suggestionList">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveNicknameCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveRatingCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveRatingCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveRatingCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveRatingCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.BulkSaveRatingCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.BulkSaveRatingCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.BulkSaveRatingCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.BulkSaveRatingCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveReportViolationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveReportViolationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveReportViolationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveReportViolationCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveReviewCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveReviewCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveReviewCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveReviewCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.BulkSaveReviewCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.BulkSaveReviewCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.BulkSaveReviewCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveReviewHelpfulnessCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveReviewHelpfulnessCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveReviewHelpfulnessCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveReviewHelpfulnessCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveUnauthRatingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveUnauthRatingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveUnauthRatingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.ValidateReviewCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.ValidateReviewCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ValidateReviewCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ValidateReviewCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SingleRating">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.AdvanceState(System.Guid,System.Object,System.Int64,System.Guid,System.String[],System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginAdvanceState(System.Guid,System.Object,System.Int64,System.Guid,System.String[],System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndAdvanceState(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.AdvanceStateAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String[],System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.AdvanceStateAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String[],System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetNickname(System.Int64,System.Guid,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetNickname(System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetNickname(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetNicknameAsync(System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetNicknameAsync(System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetNicknameSuggestions(System.String,System.String[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetNicknameSuggestions(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetNicknameSuggestions(System.IAsyncResult,System.String[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetNicknameSuggestionsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetNicknameSuggestionsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingAverage(System.Guid,System.Object,System.Single@,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetRatingAverage(System.Guid,System.Object,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetRatingAverage(System.IAsyncResult,System.Single@,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingAverageAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingAverageAsync(System.Guid,System.Object,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingAverageRollup(System.Guid,System.Object,System.Single@,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetRatingAverageRollup(System.Guid,System.Object,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetRatingAverageRollup(System.IAsyncResult,System.Single@,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingAverageRollupAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingAverageRollupAsync(System.Guid,System.Object,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingByUser(System.Guid,System.Object,System.Int64,System.Guid,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetRatingByUser(System.Guid,System.Object,System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetRatingByUser(System.IAsyncResult,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingByUserAsync(System.Guid,System.Object,System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingByUserAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingByUserWithAverage(System.Guid,System.Object,System.Int64,System.Guid,System.Int32@,System.Single@,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetRatingByUserWithAverage(System.Guid,System.Object,System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetRatingByUserWithAverage(System.IAsyncResult,System.Int32@,System.Single@,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingByUserWithAverageAsync(System.Guid,System.Object,System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingByUserWithAverageAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetMultipleRatingsByUser(System.Guid,System.Object[],System.Int64,System.Guid,System.Int32[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetMultipleRatingsByUser(System.Guid,System.Object[],System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetMultipleRatingsByUser(System.IAsyncResult,System.Int32[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetMultipleRatingsByUserAsync(System.Guid,System.Object[],System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetMultipleRatingsByUserAsync(System.Guid,System.Object[],System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingsByUser(System.Guid,System.Int64,System.Guid@,System.Guid,ServerTestFramework.LiveService.msnrr.single.Rating[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetRatingsByUser(System.Guid,System.Int64,System.Guid,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetRatingsByUser(System.IAsyncResult,System.Guid@,ServerTestFramework.LiveService.msnrr.single.Rating[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingsByUserAsync(System.Guid,System.Int64,System.Guid,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingsByUserAsync(System.Guid,System.Int64,System.Guid,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewByUser(System.Guid,System.Object,System.Int64,System.Guid,ServerTestFramework.LiveService.msnrr.single.Review@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetReviewByUser(System.Guid,System.Object,System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetReviewByUser(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.single.Review@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewByUserAsync(System.Guid,System.Object,System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewByUserAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviews(System.Guid,System.Object,System.Int32@,System.Int32@,System.String@,System.String@,System.Int32@,ServerTestFramework.LiveService.msnrr.single.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetReviews(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetReviews(System.IAsyncResult,System.Int32@,System.Int32@,System.String@,System.String@,System.Int32@,ServerTestFramework.LiveService.msnrr.single.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsAsync(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsAsync(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsByUser(System.Guid,System.Int64,System.Guid,System.Guid,ServerTestFramework.LiveService.msnrr.single.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetReviewsByUser(System.Guid,System.Int64,System.Guid,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetReviewsByUser(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.single.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsByUserAsync(System.Guid,System.Int64,System.Guid,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsByUserAsync(System.Guid,System.Int64,System.Guid,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsRollup(System.Guid,System.Object,System.Int32@,System.Int32@,System.String@,System.String@,System.Int32@,ServerTestFramework.LiveService.msnrr.single.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetReviewsRollup(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetReviewsRollup(System.IAsyncResult,System.Int32@,System.Int32@,System.String@,System.String@,System.Int32@,ServerTestFramework.LiveService.msnrr.single.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsRollupAsync(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsRollupAsync(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetUnauthRatings(System.Guid,System.Object,System.Int32,System.Int32[]@,System.Int64[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetUnauthRatings(System.Guid,System.Object,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetUnauthRatings(System.IAsyncResult,System.Int32[]@,System.Int64[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetUnauthRatingsAsync(System.Guid,System.Object,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetUnauthRatingsAsync(System.Guid,System.Object,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveNickname(System.Int64,System.Guid,System.String,System.String[]@,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginSaveNickname(System.Int64,System.Guid,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndSaveNickname(System.IAsyncResult,System.String[]@,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveNicknameAsync(System.Int64,System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveNicknameAsync(System.Int64,System.Guid,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveRating(System.Guid,System.Object,System.Int64,System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginSaveRating(System.Guid,System.Object,System.Int64,System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndSaveRating(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveRatingAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveRatingAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BulkSaveRating(System.Guid,System.Object,System.Int64,System.Guid,System.Int32,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginBulkSaveRating(System.Guid,System.Object,System.Int64,System.Guid,System.Int32,System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndBulkSaveRating(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BulkSaveRatingAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Int32,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BulkSaveRatingAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Int32,System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReportViolation(System.Object,System.Guid,System.String,System.String,System.String,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginSaveReportViolation(System.Object,System.Guid,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndSaveReportViolation(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReportViolationAsync(System.Object,System.Guid,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReportViolationAsync(System.Object,System.Guid,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginSaveReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndSaveReview(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BulkSaveReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,System.DateTime,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginBulkSaveReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,System.DateTime,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndBulkSaveReview(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BulkSaveReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,System.DateTime,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BulkSaveReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,System.DateTime,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReviewHelpfulness(System.Object,System.Int64,System.Guid,System.Guid,System.Int32,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginSaveReviewHelpfulness(System.Object,System.Int64,System.Guid,System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndSaveReviewHelpfulness(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReviewHelpfulnessAsync(System.Object,System.Int64,System.Guid,System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReviewHelpfulnessAsync(System.Object,System.Int64,System.Guid,System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveUnauthRatings(System.Guid,System.Object,System.Int32[],System.Int32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginSaveUnauthRatings(System.Guid,System.Object,System.Int32[],System.Int32[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndSaveUnauthRatings(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveUnauthRatingsAsync(System.Guid,System.Object,System.Int32[],System.Int32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveUnauthRatingsAsync(System.Guid,System.Object,System.Int32[],System.Int32[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.ValidateReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginValidateReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndValidateReview(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.ValidateReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.ValidateReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.AdvanceStateCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetNicknameCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetNicknameSuggestionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingAverageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingAverageRollupCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingByUserWithAverageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetMultipleRatingsByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingsByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsRollupCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetUnauthRatingsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveNicknameCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveRatingCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.BulkSaveRatingCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReportViolationCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReviewCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.BulkSaveReviewCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReviewHelpfulnessCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveUnauthRatingsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.ValidateReviewCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.ValidationError">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ValidationError.DataField">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ValidationError.Code">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ValidationError.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ValidationError.MaxLength">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.Field">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.empty">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.nickname">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.ratingItemID">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.reviewFieldID">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.title">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.customProperty">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.name">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.email">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.comments">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.score">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.Type">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.RequiredFieldMissing">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.TextTooLong">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.TextInvalidChars">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.TextProfanity">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.InvalidFormat">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.TooManyChanges">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.AlreadyTaken">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.ReviewsRequireRatings">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.ReviewsRequireOneField">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.UserCannotRateOwnReview">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.Helpfulness">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Helpfulness.Count">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Helpfulness.Sum">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Helpfulness.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Helpfulness.ErrorSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Helpfulness.CurrentUser">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Helpfulness.CurrentUserSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.ReviewField">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.ErrorSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.IDSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.Label">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.MaxLength">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.MaxLengthSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.Cols">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.ColsSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.Rows">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.RowsSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.Rank">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.RankSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.Required">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.RequiredSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.User">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.User.Nickname">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.User.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.User.IDSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.User.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.User.ErrorSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.Review">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.Item">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.Date">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.DateSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.User">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.CustomProperty">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.Rating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.Title">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.Field">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.Helpfulness">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.IDSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.ErrorSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.ItemID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ItemID.StringID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ItemID.LongID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ItemID.GuidID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ItemID.GuidIDSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.Rating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.Item">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.RatingItem">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.OverallRating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.Date">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.DateSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.ErrorSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.TotalCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.TotalCountSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.RatingAttribute">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.RatingItem">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.IDSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.Label">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.ErrorSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.Rank">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.RankSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.Required">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.RequiredSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingAttribute.AverageValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingAttribute.AverageValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingAttribute.UserValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingAttribute.UserValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingAttribute.Count">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingAttribute.CountSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.OverallRating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.OverallRating.AverageValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.OverallRating.AverageValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.OverallRating.UserValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.OverallRating.UserValueSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.AdvanceStateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.AdvanceStateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.AdvanceStateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetNicknameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetNicknameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetNicknameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetNicknameCompletedEventArgs.nickname">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetNicknameSuggestionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetNicknameSuggestionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetNicknameSuggestionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetNicknameSuggestionsCompletedEventArgs.suggestionList">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageCompletedEventArgs.rating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageCompletedEventArgs.count">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageRollupCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageRollupCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageRollupCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageRollupCompletedEventArgs.rating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageRollupCompletedEventArgs.count">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserCompletedEventArgs.rating">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserWithAverageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserWithAverageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserWithAverageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserWithAverageCompletedEventArgs.userRating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserWithAverageCompletedEventArgs.averageRating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserWithAverageCompletedEventArgs.count">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetMultipleRatingsByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetMultipleRatingsByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetMultipleRatingsByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetMultipleRatingsByUserCompletedEventArgs.ratings">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingsByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingsByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingsByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingsByUserCompletedEventArgs.userID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingsByUserCompletedEventArgs.ratings">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingsByUserCompletedEventArgs.nickname">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetReviewByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetReviewByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewByUserCompletedEventArgs.review">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventArgs.pageSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventArgs.pageNum">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventArgs.sortBy">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventArgs.sortOrder">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventArgs.totalCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventArgs.Reviews">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetReviewsByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetReviewsByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsByUserCompletedEventArgs.Reviews">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventArgs.pageSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventArgs.pageNum">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventArgs.sortBy">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventArgs.sortOrder">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventArgs.totalCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventArgs.Reviews">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetUnauthRatingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetUnauthRatingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetUnauthRatingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetUnauthRatingsCompletedEventArgs.ratingScores">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetUnauthRatingsCompletedEventArgs.ratingCounts">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveNicknameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveNicknameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveNicknameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveNicknameCompletedEventArgs.suggestionList">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveNicknameCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveRatingCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveRatingCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveRatingCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.BulkSaveRatingCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.BulkSaveRatingCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.BulkSaveRatingCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveReportViolationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveReportViolationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveReportViolationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveReportViolationCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveReviewCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveReviewCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveReviewCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveReviewCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.BulkSaveReviewCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.BulkSaveReviewCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.BulkSaveReviewCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveReviewHelpfulnessCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveReviewHelpfulnessCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveReviewHelpfulnessCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveReviewHelpfulnessCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveUnauthRatingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveUnauthRatingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveUnauthRatingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.ValidateReviewCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.ValidateReviewCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ValidateReviewCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ValidateReviewCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.Alerts">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.SubscriberExists(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.BeginSubscriberExists(System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.EndSubscriberExists(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.SubscriberExistsAsync(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.SubscriberExistsAsync(System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.Subscribe(System.Boolean,System.Byte[],System.String,ServerTestFramework.Web.Alert.AddSubscriptions)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.BeginSubscribe(System.Boolean,System.Byte[],System.String,ServerTestFramework.Web.Alert.AddSubscriptions,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.EndSubscribe(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.SubscribeAsync(System.Boolean,System.Byte[],System.String,ServerTestFramework.Web.Alert.AddSubscriptions)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.SubscribeAsync(System.Boolean,System.Byte[],System.String,ServerTestFramework.Web.Alert.AddSubscriptions,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.Unsubscribe(System.Boolean,System.Boolean,System.Byte[],System.String,ServerTestFramework.Web.Alert.ExistingSubscriptions)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.BeginUnsubscribe(System.Boolean,System.Boolean,System.Byte[],System.String,ServerTestFramework.Web.Alert.ExistingSubscriptions,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.EndUnsubscribe(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.UnsubscribeAsync(System.Boolean,System.Boolean,System.Byte[],System.String,ServerTestFramework.Web.Alert.ExistingSubscriptions)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.UnsubscribeAsync(System.Boolean,System.Boolean,System.Byte[],System.String,ServerTestFramework.Web.Alert.ExistingSubscriptions,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.EnumerateSubscriptions(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.BeginEnumerateSubscriptions(System.Byte[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.EndEnumerateSubscriptions(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.EnumerateSubscriptionsAsync(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.EnumerateSubscriptionsAsync(System.Byte[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.ScheduleContentAlert(System.Byte[],System.UInt32,System.String,System.String,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.BeginScheduleContentAlert(System.Byte[],System.UInt32,System.String,System.String,System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.EndScheduleContentAlert(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.ScheduleContentAlertAsync(System.Byte[],System.UInt32,System.String,System.String,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.ScheduleContentAlertAsync(System.Byte[],System.UInt32,System.String,System.String,System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Alert.Alerts.SubscriberExistsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Alert.Alerts.SubscribeCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Alert.Alerts.UnsubscribeCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Alert.Alerts.EnumerateSubscriptionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Alert.Alerts.ScheduleContentAlertCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.GeneralInfo">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.GetTitleList(System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.BeginGetTitleList(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.EndGetTitleList(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.GetTitleListAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.GetTitleListAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.LinkedGamerTags(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.BeginLinkedGamerTags(System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.EndLinkedGamerTags(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.LinkedGamerTagsAsync(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.LinkedGamerTagsAsync(System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.GeneralInfo.GeneralInfo.GetTitleListCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.GeneralInfo.GeneralInfo.LinkedGamerTagsCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.MessagingImpl">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetMessageString(System.UInt32,System.UInt32,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginGetMessageString(System.UInt32,System.UInt32,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndGetMessageString(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetMessageStringAsync(System.UInt32,System.UInt32,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetMessageStringAsync(System.UInt32,System.UInt32,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.RevokeTitleUserMessage(ServerTestFramework.Web.Messaging.WCRecipientResult[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginRevokeTitleUserMessage(ServerTestFramework.Web.Messaging.WCRecipientResult[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndRevokeTitleUserMessage(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.RevokeTitleUserMessageAsync(ServerTestFramework.Web.Messaging.WCRecipientResult[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.RevokeTitleUserMessageAsync(ServerTestFramework.Web.Messaging.WCRecipientResult[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendTitleUserMessage(System.String,System.UInt64,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String[],ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCMessageAttachment[],ServerTestFramework.Web.Messaging.WCRecipientResult[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginSendTitleUserMessage(System.String,System.UInt64,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String[],ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCMessageAttachment[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndSendTitleUserMessage(System.IAsyncResult,ServerTestFramework.Web.Messaging.WCRecipientResult[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendTitleUserMessageAsync(System.String,System.UInt64,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String[],ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCMessageAttachment[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendTitleUserMessageAsync(System.String,System.UInt64,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String[],ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCMessageAttachment[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendTitleWideMessage(System.String,System.UInt64,System.DateTime,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String,ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCLocalizedString[],ServerTestFramework.Web.Messaging.WCMessageAttachment[],System.UInt16@,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginSendTitleWideMessage(System.String,System.UInt64,System.DateTime,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String,ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCLocalizedString[],ServerTestFramework.Web.Messaging.WCMessageAttachment[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndSendTitleWideMessage(System.IAsyncResult,System.UInt16@,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendTitleWideMessageAsync(System.String,System.UInt64,System.DateTime,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String,ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCLocalizedString[],ServerTestFramework.Web.Messaging.WCMessageAttachment[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendTitleWideMessageAsync(System.String,System.UInt64,System.DateTime,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String,ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCLocalizedString[],ServerTestFramework.Web.Messaging.WCMessageAttachment[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteTitleWideMessage(System.UInt32,System.UInt32,ServerTestFramework.Web.Messaging.WCDeleteSysMsgFlags)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginDeleteTitleWideMessage(System.UInt32,System.UInt32,ServerTestFramework.Web.Messaging.WCDeleteSysMsgFlags,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndDeleteTitleWideMessage(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteTitleWideMessageAsync(System.UInt32,System.UInt32,ServerTestFramework.Web.Messaging.WCDeleteSysMsgFlags)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteTitleWideMessageAsync(System.UInt32,System.UInt32,ServerTestFramework.Web.Messaging.WCDeleteSysMsgFlags,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetTitleWideMessageDetails(System.UInt32,System.UInt32,ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary@,ServerTestFramework.Web.Messaging.WCMessageDetails@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginGetTitleWideMessageDetails(System.UInt32,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndGetTitleWideMessageDetails(System.IAsyncResult,ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary@,ServerTestFramework.Web.Messaging.WCMessageDetails@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetTitleWideMessageDetailsAsync(System.UInt32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetTitleWideMessageDetailsAsync(System.UInt32,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumTitleWideMessages(System.UInt32,ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginEnumTitleWideMessages(System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndEnumTitleWideMessages(System.IAsyncResult,ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumTitleWideMessagesAsync(System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumTitleWideMessagesAsync(System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SetMessageFlags(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageFlags)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginSetMessageFlags(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageFlags,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndSetMessageFlags(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SetMessageFlagsAsync(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageFlags)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SetMessageFlagsAsync(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageFlags,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumUserTitles(System.Byte[],System.String,ServerTestFramework.Web.Messaging.WCUserTitle[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginEnumUserTitles(System.Byte[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndEnumUserTitles(System.IAsyncResult,ServerTestFramework.Web.Messaging.WCUserTitle[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumUserTitlesAsync(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumUserTitlesAsync(System.Byte[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteUserTitle(System.Byte[],System.String,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginDeleteUserTitle(System.Byte[],System.String,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndDeleteUserTitle(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteUserTitleAsync(System.Byte[],System.String,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteUserTitleAsync(System.Byte[],System.String,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.RevokeMessage(System.Byte[],System.String,ServerTestFramework.Web.Messaging.WCRecipientResult[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginRevokeMessage(System.Byte[],System.String,ServerTestFramework.Web.Messaging.WCRecipientResult[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndRevokeMessage(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.RevokeMessageAsync(System.Byte[],System.String,ServerTestFramework.Web.Messaging.WCRecipientResult[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.RevokeMessageAsync(System.Byte[],System.String,ServerTestFramework.Web.Messaging.WCRecipientResult[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendMessage(System.Byte[],System.String,System.UInt64,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String[],ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCMessageAttachment[],ServerTestFramework.Web.Messaging.WCRecipientResult[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginSendMessage(System.Byte[],System.String,System.UInt64,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String[],ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCMessageAttachment[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndSendMessage(System.IAsyncResult,ServerTestFramework.Web.Messaging.WCRecipientResult[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendMessageAsync(System.Byte[],System.String,System.UInt64,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String[],ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCMessageAttachment[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendMessageAsync(System.Byte[],System.String,System.UInt64,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String[],ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCMessageAttachment[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteMessage(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCDeleteMsgFlags)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginDeleteMessage(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCDeleteMsgFlags,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndDeleteMessage(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteMessageAsync(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCDeleteMsgFlags)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteMessageAsync(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCDeleteMsgFlags,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetMessageDetails(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageSummary@,ServerTestFramework.Web.Messaging.WCMessageDetails@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginGetMessageDetails(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageFlags,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndGetMessageDetails(System.IAsyncResult,ServerTestFramework.Web.Messaging.WCMessageSummary@,ServerTestFramework.Web.Messaging.WCMessageDetails@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetMessageDetailsAsync(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageFlags)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetMessageDetailsAsync(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageFlags,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumMessages(System.Byte[],System.String,ServerTestFramework.Web.Messaging.WCMessageSummary[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginEnumMessages(System.Byte[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndEnumMessages(System.IAsyncResult,ServerTestFramework.Web.Messaging.WCMessageSummary[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumMessagesAsync(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumMessagesAsync(System.Byte[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.GetMessageStringCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.RevokeTitleUserMessageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.SendTitleUserMessageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.SendTitleWideMessageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteTitleWideMessageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.GetTitleWideMessageDetailsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.EnumTitleWideMessagesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.SetMessageFlagsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.EnumUserTitlesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteUserTitleCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.RevokeMessageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.SendMessageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteMessageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.GetMessageDetailsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.EnumMessagesCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.Presence">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetGamertagsFromXUIDS(System.UInt64[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.BeginGetGamertagsFromXUIDS(System.UInt64[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.EndGetGamertagsFromXUIDS(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetGamertagsFromXUIDSAsync(System.UInt64[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetGamertagsFromXUIDSAsync(System.UInt64[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetXUIDSFromGamertags(System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.BeginGetXUIDSFromGamertags(System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.EndGetXUIDSFromGamertags(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetXUIDSFromGamertagsAsync(System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetXUIDSFromGamertagsAsync(System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetPresenceInfo(System.UInt64,System.UInt64,System.UInt16,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.BeginGetPresenceInfo(System.UInt64,System.UInt64,System.UInt16,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.EndGetPresenceInfo(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetPresenceInfoAsync(System.UInt64,System.UInt64,System.UInt16)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetPresenceInfoAsync(System.UInt64,System.UInt64,System.UInt16,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetFriendsEx(System.UInt64,System.UInt16,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.BeginGetFriendsEx(System.UInt64,System.UInt16,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.EndGetFriendsEx(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetFriendsExAsync(System.UInt64,System.UInt16)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetFriendsExAsync(System.UInt64,System.UInt16,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetRecentPlayers(System.UInt64,System.UInt16,System.UInt16)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.BeginGetRecentPlayers(System.UInt64,System.UInt16,System.UInt16,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.EndGetRecentPlayers(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetRecentPlayersAsync(System.UInt64,System.UInt16,System.UInt16)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetRecentPlayersAsync(System.UInt64,System.UInt16,System.UInt16,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetFriends(System.Byte[],System.String,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.BeginGetFriends(System.Byte[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.EndGetFriends(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetFriendsAsync(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetFriendsAsync(System.Byte[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Presence.Presence.GetGamertagsFromXUIDSCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Presence.Presence.GetXUIDSFromGamertagsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Presence.Presence.GetPresenceInfoCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Presence.Presence.GetFriendsExCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Presence.Presence.GetRecentPlayersCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Presence.Presence.GetFriendsCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Profile.Profile">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.ReadAchievements(System.UInt64,System.UInt32,System.UInt16,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.BeginReadAchievements(System.UInt64,System.UInt32,System.UInt16,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.EndReadAchievements(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.ReadAchievementsAsync(System.UInt64,System.UInt32,System.UInt16,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.ReadAchievementsAsync(System.UInt64,System.UInt32,System.UInt16,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.ReadSettings(System.UInt64,System.UInt32,System.UInt16,System.UInt64[],System.UInt32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.BeginReadSettings(System.UInt64,System.UInt32,System.UInt16,System.UInt64[],System.UInt32[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.EndReadSettings(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.ReadSettingsAsync(System.UInt64,System.UInt32,System.UInt16,System.UInt64[],System.UInt32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.ReadSettingsAsync(System.UInt64,System.UInt32,System.UInt16,System.UInt64[],System.UInt32[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Profile.Profile.ReadAchievementsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Profile.Profile.ReadSettingsCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.Query">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.Add(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginAdd(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndAdd(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.AddAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.AddAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.Update(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginUpdate(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndUpdate(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.UpdateAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.UpdateAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.UpdateId(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,System.UInt64,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginUpdateId(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,System.UInt64,ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndUpdateId(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.UpdateIdAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,System.UInt64,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.UpdateIdAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,System.UInt64,ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.Search(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginSearch(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndSearch(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.SearchAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.SearchAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.FindFromIds(System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],System.UInt64[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginFindFromIds(System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],System.UInt64[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndFindFromIds(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.FindFromIdsAsync(System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],System.UInt64[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.FindFromIdsAsync(System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],System.UInt64[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.Remove(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginRemove(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndRemove(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.RemoveAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.RemoveAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.RemoveId(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginRemoveId(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndRemoveId(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.RemoveIdAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.RemoveIdAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.Select(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginSelect(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndSelect(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.SelectAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.SelectAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.GetXQSConfig(System.UInt32,System.Byte[],System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginGetXQSConfig(System.UInt32,System.Byte[],System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndGetXQSConfig(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.GetXQSConfigAsync(System.UInt32,System.Byte[],System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.GetXQSConfigAsync(System.UInt32,System.Byte[],System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCreate(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginCompetitionCreate(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndCompetitionCreate(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCreateAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCreateAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCreateSingleElimination(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginCompetitionCreateSingleElimination(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndCompetitionCreateSingleElimination(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCreateSingleEliminationAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCreateSingleEliminationAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionSearch(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginCompetitionSearch(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndCompetitionSearch(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionSearchAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionSearchAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionManageEntrant(System.UInt32,System.Byte[],System.String,System.UInt32,System.String,System.UInt32,System.UInt64,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginCompetitionManageEntrant(System.UInt32,System.Byte[],System.String,System.UInt32,System.String,System.UInt32,System.UInt64,ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndCompetitionManageEntrant(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionManageEntrantAsync(System.UInt32,System.Byte[],System.String,System.UInt32,System.String,System.UInt32,System.UInt64,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionManageEntrantAsync(System.UInt32,System.Byte[],System.String,System.UInt32,System.String,System.UInt32,System.UInt64,ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCancel(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginCompetitionCancel(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndCompetitionCancel(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCancelAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCancelAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionTopology(System.UInt32,System.UInt32,System.UInt64,System.UInt32,System.UInt32,System.Int64,System.Int64,ServerTestFramework.Web.Query.QueryAttributeSpec[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginCompetitionTopology(System.UInt32,System.UInt32,System.UInt64,System.UInt32,System.UInt32,System.Int64,System.Int64,ServerTestFramework.Web.Query.QueryAttributeSpec[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndCompetitionTopology(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionTopologyAsync(System.UInt32,System.UInt32,System.UInt64,System.UInt32,System.UInt32,System.Int64,System.Int64,ServerTestFramework.Web.Query.QueryAttributeSpec[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionTopologyAsync(System.UInt32,System.UInt32,System.UInt64,System.UInt32,System.UInt32,System.Int64,System.Int64,ServerTestFramework.Web.Query.QueryAttributeSpec[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionTopologySingleElimination(System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginCompetitionTopologySingleElimination(System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndCompetitionTopologySingleElimination(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionTopologySingleEliminationAsync(System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionTopologySingleEliminationAsync(System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.AddCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.UpdateCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.UpdateIdCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.SearchCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.FindFromIdsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.RemoveCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.RemoveIdCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.SelectCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.GetXQSConfigCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.CompetitionCreateCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.CompetitionCreateSingleEliminationCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.CompetitionSearchCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.CompetitionManageEntrantCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.CompetitionCancelCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.CompetitionTopologyCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.CompetitionTopologySingleEliminationCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.Signature">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.VerifySignature(ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.BeginVerifySignature(ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.EndVerifySignature(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.VerifySignatureAsync(ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.VerifySignatureAsync(ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.CreateSignature(System.UInt32,System.String,ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureRequest[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.BeginCreateSignature(System.UInt32,System.String,ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureRequest[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.EndCreateSignature(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.CreateSignatureAsync(System.UInt32,System.String,ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureRequest[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.CreateSignatureAsync(System.UInt32,System.String,ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureRequest[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.TransferUserLicenses(System.UInt64,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.BeginTransferUserLicenses(System.UInt64,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.EndTransferUserLicenses(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.TransferUserLicensesAsync(System.UInt64,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.TransferUserLicensesAsync(System.UInt64,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.BlacklistDigest(System.Byte[],System.Byte,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.BeginBlacklistDigest(System.Byte[],System.Byte,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.EndBlacklistDigest(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.BlacklistDigestAsync(System.Byte[],System.Byte,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.BlacklistDigestAsync(System.Byte[],System.Byte,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.UnBlacklistDigest(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.BeginUnBlacklistDigest(System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.EndUnBlacklistDigest(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.UnBlacklistDigestAsync(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.UnBlacklistDigestAsync(System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.SignatureWidget.Signature.VerifySignatureCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.SignatureWidget.Signature.CreateSignatureCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.SignatureWidget.Signature.TransferUserLicensesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.SignatureWidget.Signature.BlacklistDigestCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.SignatureWidget.Signature.UnBlacklistDigestCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.Stats">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.DeleteXUIDFromLB(System.UInt32,System.UInt32,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginDeleteXUIDFromLB(System.UInt32,System.UInt32,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndDeleteXUIDFromLB(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.DeleteXUIDFromLBAsync(System.UInt32,System.UInt32,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.DeleteXUIDFromLBAsync(System.UInt32,System.UInt32,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.DeleteXUIDFromAllLBs(System.UInt32,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginDeleteXUIDFromAllLBs(System.UInt32,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndDeleteXUIDFromAllLBs(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.DeleteXUIDFromAllLBsAsync(System.UInt32,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.DeleteXUIDFromAllLBsAsync(System.UInt32,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBList(System.UInt32,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetLBList(System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetLBList(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBListAsync(System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBListAsync(System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBListByType(System.UInt32,ServerTestFramework.Web.Stats.LBType,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetLBListByType(System.UInt32,ServerTestFramework.Web.Stats.LBType,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetLBListByType(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBListByTypeAsync(System.UInt32,ServerTestFramework.Web.Stats.LBType)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBListByTypeAsync(System.UInt32,ServerTestFramework.Web.Stats.LBType,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateLB(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginEnumerateLB(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndEnumerateLB(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateLBAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateLBAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBNearGamerTag(System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt32,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetLBNearGamerTag(System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetLBNearGamerTag(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBNearGamerTagAsync(System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBNearGamerTagAsync(System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBForGamerTags(System.UInt32,System.UInt32,System.String[],System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetLBForGamerTags(System.UInt32,System.UInt32,System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetLBForGamerTags(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBForGamerTagsAsync(System.UInt32,System.UInt32,System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBForGamerTagsAsync(System.UInt32,System.UInt32,System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBDetailsForGamerTags(System.UInt32,System.UInt32,System.String[],System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetLBDetailsForGamerTags(System.UInt32,System.UInt32,System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetLBDetailsForGamerTags(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBDetailsForGamerTagsAsync(System.UInt32,System.UInt32,System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBDetailsForGamerTagsAsync(System.UInt32,System.UInt32,System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetMLBByXUID(System.UInt32,System.UInt64,System.UInt32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetMLBByXUID(System.UInt32,System.UInt64,System.UInt32[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetMLBByXUID(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetMLBByXUIDAsync(System.UInt32,System.UInt64,System.UInt32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetMLBByXUIDAsync(System.UInt32,System.UInt64,System.UInt32[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateTeamLB(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginEnumerateTeamLB(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndEnumerateTeamLB(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateTeamLBAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateTeamLBAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBNearTeamName(System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt32,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetTeamLBNearTeamName(System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetTeamLBNearTeamName(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBNearTeamNameAsync(System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBNearTeamNameAsync(System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBForTeamNames(System.UInt32,System.UInt32,System.String[],System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetTeamLBForTeamNames(System.UInt32,System.UInt32,System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetTeamLBForTeamNames(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBForTeamNamesAsync(System.UInt32,System.UInt32,System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBForTeamNamesAsync(System.UInt32,System.UInt32,System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBDetailsForTeamNames(System.UInt32,System.UInt32,System.String[],System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetTeamLBDetailsForTeamNames(System.UInt32,System.UInt32,System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetTeamLBDetailsForTeamNames(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBDetailsForTeamNamesAsync(System.UInt32,System.UInt32,System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBDetailsForTeamNamesAsync(System.UInt32,System.UInt32,System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateLBRaw(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginEnumerateLBRaw(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndEnumerateLBRaw(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateLBRawAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateLBRawAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.DeleteXUIDFromLBCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.DeleteXUIDFromAllLBsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetLBListCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetLBListByTypeCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.EnumerateLBCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetLBNearGamerTagCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetLBForGamerTagsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetLBDetailsForGamerTagsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetMLBByXUIDCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.EnumerateTeamLBCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetTeamLBNearTeamNameCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetTeamLBForTeamNamesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetTeamLBDetailsForTeamNamesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.EnumerateLBRawCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.Storage">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.GetTitleQuota(System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginGetTitleQuota(System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndGetTitleQuota(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.GetTitleQuotaAsync(System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.GetTitleQuotaAsync(System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.ReadUserFile(System.UInt32,System.Byte[],System.String,System.String,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginReadUserFile(System.UInt32,System.Byte[],System.String,System.String,System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndReadUserFile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.ReadUserFileAsync(System.UInt32,System.Byte[],System.String,System.String,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.ReadUserFileAsync(System.UInt32,System.Byte[],System.String,System.String,System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.ReadTitleFile(System.UInt32,System.String,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginReadTitleFile(System.UInt32,System.String,System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndReadTitleFile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.ReadTitleFileAsync(System.UInt32,System.String,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.ReadTitleFileAsync(System.UInt32,System.String,System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.WriteUserFile(System.UInt32,System.Byte[],System.String,System.String,ServerTestFramework.Web.Storage.FileContentTypeEnum,System.Byte[],System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginWriteUserFile(System.UInt32,System.Byte[],System.String,System.String,ServerTestFramework.Web.Storage.FileContentTypeEnum,System.Byte[],System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndWriteUserFile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.WriteUserFileAsync(System.UInt32,System.Byte[],System.String,System.String,ServerTestFramework.Web.Storage.FileContentTypeEnum,System.Byte[],System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.WriteUserFileAsync(System.UInt32,System.Byte[],System.String,System.String,ServerTestFramework.Web.Storage.FileContentTypeEnum,System.Byte[],System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.WriteTitleFile(System.UInt32,System.String,ServerTestFramework.Web.Storage.FileContentTypeEnum,System.Byte[],System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginWriteTitleFile(System.UInt32,System.String,ServerTestFramework.Web.Storage.FileContentTypeEnum,System.Byte[],System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndWriteTitleFile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.WriteTitleFileAsync(System.UInt32,System.String,ServerTestFramework.Web.Storage.FileContentTypeEnum,System.Byte[],System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.WriteTitleFileAsync(System.UInt32,System.String,ServerTestFramework.Web.Storage.FileContentTypeEnum,System.Byte[],System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.DeleteUserFile(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginDeleteUserFile(System.UInt32,System.Byte[],System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndDeleteUserFile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.DeleteUserFileAsync(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.DeleteUserFileAsync(System.UInt32,System.Byte[],System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.DeleteTitleFile(System.UInt32,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginDeleteTitleFile(System.UInt32,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndDeleteTitleFile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.DeleteTitleFileAsync(System.UInt32,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.DeleteTitleFileAsync(System.UInt32,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.RevokeTitleFile(System.UInt32,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginRevokeTitleFile(System.UInt32,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndRevokeTitleFile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.RevokeTitleFileAsync(System.UInt32,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.RevokeTitleFileAsync(System.UInt32,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.RevokeUserFile(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginRevokeUserFile(System.UInt32,System.Byte[],System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndRevokeUserFile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.RevokeUserFileAsync(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.RevokeUserFileAsync(System.UInt32,System.Byte[],System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EnumerateTitleFiles(System.UInt32,System.String,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginEnumerateTitleFiles(System.UInt32,System.String,System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndEnumerateTitleFiles(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EnumerateTitleFilesAsync(System.UInt32,System.String,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EnumerateTitleFilesAsync(System.UInt32,System.String,System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.GetTitleQuotaCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.ReadUserFileCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.ReadTitleFileCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.WriteUserFileCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.WriteTitleFileCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.DeleteUserFileCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.DeleteTitleFileCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.RevokeTitleFileCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.RevokeUserFileCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.EnumerateTitleFilesCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.Teams">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.CreateTeam(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.String,System.String,System.String,System.Byte[],System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginCreateTeam(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.String,System.String,System.String,System.Byte[],System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndCreateTeam(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.CreateTeamAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.String,System.String,System.String,System.Byte[],System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.CreateTeamAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.String,System.String,System.String,System.Byte[],System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.DeleteTeam(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginDeleteTeam(System.UInt32,System.Byte[],System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndDeleteTeam(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.DeleteTeamAsync(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.DeleteTeamAsync(System.UInt32,System.Byte[],System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.RemoveTeamMember(System.UInt32,System.Byte[],System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginRemoveTeamMember(System.UInt32,System.Byte[],System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndRemoveTeamMember(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.RemoveTeamMemberAsync(System.UInt32,System.Byte[],System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.RemoveTeamMemberAsync(System.UInt32,System.Byte[],System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.ManageTeam(System.UInt32,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginManageTeam(System.UInt32,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndManageTeam(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.ManageTeamAsync(System.UInt32,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.ManageTeamAsync(System.UInt32,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.ManageTeamMember(System.UInt32,System.Byte[],System.String,System.String,System.String,System.UInt32,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginManageTeamMember(System.UInt32,System.Byte[],System.String,System.String,System.String,System.UInt32,System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndManageTeamMember(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.ManageTeamMemberAsync(System.UInt32,System.Byte[],System.String,System.String,System.String,System.UInt32,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.ManageTeamMemberAsync(System.UInt32,System.Byte[],System.String,System.String,System.String,System.UInt32,System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.RecruitTeamMember(System.UInt32,System.Byte[],System.String,System.String,System.String,System.UInt32,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginRecruitTeamMember(System.UInt32,System.Byte[],System.String,System.String,System.String,System.UInt32,System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndRecruitTeamMember(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.RecruitTeamMemberAsync(System.UInt32,System.Byte[],System.String,System.String,System.String,System.UInt32,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.RecruitTeamMemberAsync(System.UInt32,System.Byte[],System.String,System.String,System.String,System.UInt32,System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.JoinTeam(System.UInt32,System.Byte[],System.String,System.String,System.Byte)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginJoinTeam(System.UInt32,System.Byte[],System.String,System.String,System.Byte,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndJoinTeam(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.JoinTeamAsync(System.UInt32,System.Byte[],System.String,System.String,System.Byte)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.JoinTeamAsync(System.UInt32,System.Byte[],System.String,System.String,System.Byte,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.GetTeamInfo(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginGetTeamInfo(System.UInt32,System.Byte[],System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndGetTeamInfo(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.GetTeamInfoAsync(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.GetTeamInfoAsync(System.UInt32,System.Byte[],System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.GetTeamMembers(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginGetTeamMembers(System.UInt32,System.Byte[],System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndGetTeamMembers(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.GetTeamMembersAsync(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.GetTeamMembersAsync(System.UInt32,System.Byte[],System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.CreateTeamCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.DeleteTeamCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.RemoveTeamMemberCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.ManageTeamCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.ManageTeamMemberCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.RecruitTeamMemberCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.JoinTeamCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.GetTeamInfoCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.GetTeamMembersCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.UserAccount">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.LinkUser(System.Byte[],System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.BeginLinkUser(System.Byte[],System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.EndLinkUser(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.LinkUserAsync(System.Byte[],System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.LinkUserAsync(System.Byte[],System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.LinkedGamerTags(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.BeginLinkedGamerTags(System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.EndLinkedGamerTags(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.LinkedGamerTagsAsync(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.LinkedGamerTagsAsync(System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetUserSettings(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.BeginGetUserSettings(System.Byte[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.EndGetUserSettings(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetUserSettingsAsync(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetUserSettingsAsync(System.Byte[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.SetInfoSharing(System.Byte[],System.String,System.Boolean,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.BeginSetInfoSharing(System.Byte[],System.String,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.EndSetInfoSharing(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.SetInfoSharingAsync(System.Byte[],System.String,System.Boolean,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.SetInfoSharingAsync(System.Byte[],System.String,System.Boolean,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetAccountStatus(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.BeginGetAccountStatus(System.Byte[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.EndGetAccountStatus(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetAccountStatusAsync(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetAccountStatusAsync(System.Byte[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetUserAuthorization(System.UInt32,System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.BeginGetUserAuthorization(System.UInt32,System.Byte[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.EndGetUserAuthorization(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetUserAuthorizationAsync(System.UInt32,System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetUserAuthorizationAsync(System.UInt32,System.Byte[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.CreateWholesaleAccount(ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.BeginCreateWholesaleAccount(ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.EndCreateWholesaleAccount(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.CreateWholesaleAccountAsync(ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.CreateWholesaleAccountAsync(ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.UserAccount.UserAccount.LinkUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.UserAccount.UserAccount.LinkedGamerTagsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.UserAccount.UserAccount.GetUserSettingsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.UserAccount.UserAccount.SetInfoSharingCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.UserAccount.UserAccount.GetAccountStatusCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.UserAccount.UserAccount.GetUserAuthorizationCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.UserAccount.UserAccount.CreateWholesaleAccountCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.TeamInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamInfo.name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamInfo.description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamInfo.motto">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamInfo.URL">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamInfo.created">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamInfo.numMembers">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamInfo.data">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.TeamMember">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamMember.gamertag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamMember.member">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamMember.privileges">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamMember.data">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamMember.joined">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.CreateTeamCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.DeleteTeamCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.RemoveTeamMemberCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.ManageTeamCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.ManageTeamMemberCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.RecruitTeamMemberCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.JoinTeamCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.GetTeamInfoCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.GetTeamInfoCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.GetTeamInfoCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.GetTeamMembersCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.GetTeamMembersCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.GetTeamMembersCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.AddSubscriptions">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.AddSubscriptions.liveSubscriptions">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.AddSubscriptions.contentSubscriptions">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.AlertSubscription">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.AlertSubscription.type">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.AlertSubscription.locale">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.ContentSubscription">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.ContentSubscription.subscriptionID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.ContentSubscription.type">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.ContentSubscription.locale">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.LiveSubscription">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.LiveSubscription.subscriptionID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.LiveSubscription.type">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.LiveSubscription.name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.LiveSubscription.locale">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.ExistingSubscriptions">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.ExistingSubscriptions.liveSubscriptions">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.ExistingSubscriptions.contentSubscriptions">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.SubscriberExistsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.SubscriberExistsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.SubscriberExistsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.SubscribeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.SubscribeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.SubscribeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.UnsubscribeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.UnsubscribeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.UnsubscribeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.EnumerateSubscriptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.EnumerateSubscriptionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.EnumerateSubscriptionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.ScheduleContentAlertCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.ScheduleContentAlertCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.ScheduleContentAlertCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.TitlePrivilegeInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.TitlePrivilegeInfo.TitleID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.TitlePrivilegeInfo.Privileges">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.TitlePrivilegeInfo.Rating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.TitlePrivilegeInfo.DefaultLocale">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.TitlePrivilegeInfo.LocalizedName">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.TitlePrivilege">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.TitlePrivilege.None">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.TitlePrivilege.ReadOnly">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.TitlePrivilege.ReadWrite">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.TitlePrivilege.FullControl">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.ESRBRating">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.ESRBRating.ALL">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.ESRBRating.ADULT">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.ESRBRating.MATURE">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.ESRBRating.TEEN">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.ESRBRating.EVERYONE">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.ESRBRating.KIDS_TO_ADULTS">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.ESRBRating.EARLY_CHILDHOOD">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.ESRBRating.UNSPECIFIED">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.LocalizedDisplayName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.LocalizedDisplayName.Locale">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.LocalizedDisplayName.DisplayName">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.LinkInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.LinkInfo.GamerTag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.LinkInfo.Owner">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.GetTitleListCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.GetTitleListCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.GetTitleListCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.GetTitleListCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.LinkedGamerTagsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.LinkedGamerTagsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.LinkedGamerTagsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.LinkInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.LinkInfo.GamerTag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.LinkInfo.Owner">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountResponse">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountResponse.userPuidHigh">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountResponse.userPuidLow">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountResponse.gamertag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountResponse.password">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.PhoneInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.PhoneInfo.phonePrefix">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.PhoneInfo.phoneNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.PhoneInfo.phoneExtension">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.AddressInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.AddressInfo.street1">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.AddressInfo.street2">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.AddressInfo.city">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.AddressInfo.district">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.AddressInfo.state">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.AddressInfo.postalCode">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.offerId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.firstName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.lastName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.addressInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.phoneInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.email">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.countryId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.languageId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.birthdate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.memberName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.externalReferenceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.reservedBytes">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.UserAuthorization">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAuthorization.acceptedTermsOfService">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAuthorization.isVoiceBanned">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAuthorization.isSuspended">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAuthorization.privileges">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAuthorization.services">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.UserAccountStatus">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAccountStatus.acceptMSInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAccountStatus.acceptPartnerInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAccountStatus.forceNameChange">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAccountStatus.voiceBanned">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAccountStatus.voiceBannedUntil">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAccountStatus.nicknameBanned">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAccountStatus.accountSuspended">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAccountStatus.accountSuspendedUntil">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.LinkUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.LinkUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.LinkUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.LinkedGamerTagsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.LinkedGamerTagsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.LinkedGamerTagsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.GetUserSettingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.GetUserSettingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.GetUserSettingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.SetInfoSharingCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.SetInfoSharingCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.SetInfoSharingCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.GetAccountStatusCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.GetAccountStatusCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.GetAccountStatusCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.GetUserAuthorizationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.GetUserAuthorizationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.GetUserAuthorizationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCRecipientResult">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCRecipientResult.User">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCRecipientResult.MessageID">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCMessageSummary">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.Sender">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.SenderContext">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.SentTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.MessageID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.MessageFlags">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.SenderTitleID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.ExpireMinutes">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.DetailsSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.MessageType">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCMessageFlags">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.Required">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.Recommended">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.HasVoice">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.HasText">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.Read">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.NonExportable">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.TeamContext">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.CompContext">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.AlternateTitle">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.Marketing">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved0">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved1">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved2">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved3">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved4">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved5">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved6">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved7">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved8">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved9">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved10">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved11">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved12">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved13">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.TitleReserved0">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.TitleReserved1">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.TitleReserved2">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.TitleReserved3">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.TitleReserved4">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.TitleReserved5">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.TitleReserved6">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCMessageType">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.Invalid">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.TitleCustom">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.FriendRequest">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.GameInvite">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.TeamRecruit">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.CompReminder">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.CompRequest">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.LiveMessage">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.PersonalMessage">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.VideoMessage">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.QuickChatInvite">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.VideoChatInvite">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.PartyChatInvite">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCUserTitle">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCUserTitle.TitleID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCUserTitle.LastLogonTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCUserTitle.Flags">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCUserTitleFlags">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCUserTitleFlags.AcceptMarketing">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.TitleID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.SenderContext">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.SentTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.Region">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.MessageID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.MessageFlags">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.ExpireMinutes">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.DetailsSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.MessageType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.SenderName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.Description">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCLanguageString">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCLanguageString.Locale">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCLanguageString.String">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCLocalizedString">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCLocalizedString.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCLocalizedString.DefaultLocale">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCLocalizedString.LangString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCMessageAttachment">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageAttachment.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageAttachment.Flags">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageAttachment.Data">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCAttachFlags">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCAttachFlags.NonExportable">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCAttachFlags.Directory">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCStringIdProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCStringIdProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCStringIdProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCBoolProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCBoolProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCBoolProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCAttachmentProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCAttachmentProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCAttachmentProp.AttachSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCAttachmentProp.AttachFlags">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCAttachmentProp.AttachUrl">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCBinaryProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCBinaryProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCBinaryProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCTimeProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTimeProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTimeProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCStringProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCStringProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCStringProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCQwordProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCQwordProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCQwordProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCDwordProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCDwordProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCDwordProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCWordProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCWordProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCWordProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCByteProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCByteProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCByteProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCNullProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCNullProp.PropID">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCMessageDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.NullProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.ByteProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.WordProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.DwordProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.QwordProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.StringProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.TimeProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.BinaryProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.AttachmentProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.BoolProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.StringIdProp">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCDeleteSysMsgFlags">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCDeleteSysMsgFlags.RevokeAll">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCDeleteMsgFlags">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCDeleteMsgFlags.BlockSender">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.GetMessageStringCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.GetMessageStringCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.GetMessageStringCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.RevokeTitleUserMessageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.RevokeTitleUserMessageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.RevokeTitleUserMessageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.SendTitleUserMessageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.SendTitleUserMessageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.SendTitleUserMessageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.SendTitleUserMessageCompletedEventArgs.RecipResult">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.SendTitleWideMessageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.SendTitleWideMessageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.SendTitleWideMessageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.SendTitleWideMessageCompletedEventArgs.Delay">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.SendTitleWideMessageCompletedEventArgs.MessageID">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.DeleteTitleWideMessageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.DeleteTitleWideMessageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.DeleteTitleWideMessageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.GetTitleWideMessageDetailsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.GetTitleWideMessageDetailsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.GetTitleWideMessageDetailsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.GetTitleWideMessageDetailsCompletedEventArgs.Summary">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.GetTitleWideMessageDetailsCompletedEventArgs.Details">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.EnumTitleWideMessagesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.EnumTitleWideMessagesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.EnumTitleWideMessagesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.EnumTitleWideMessagesCompletedEventArgs.Summary">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.SetMessageFlagsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.SetMessageFlagsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.SetMessageFlagsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.EnumUserTitlesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.EnumUserTitlesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.EnumUserTitlesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.EnumUserTitlesCompletedEventArgs.Title">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.DeleteUserTitleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.DeleteUserTitleCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.DeleteUserTitleCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.RevokeMessageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.RevokeMessageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.RevokeMessageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.SendMessageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.SendMessageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.SendMessageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.SendMessageCompletedEventArgs.RecipResult">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.DeleteMessageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.DeleteMessageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.DeleteMessageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.GetMessageDetailsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.GetMessageDetailsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.GetMessageDetailsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.GetMessageDetailsCompletedEventArgs.Summary">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.GetMessageDetailsCompletedEventArgs.Details">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.EnumMessagesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.EnumMessagesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.EnumMessagesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.EnumMessagesCompletedEventArgs.Summary">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.PresenceInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.PresenceInfo.XUID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.PresenceInfo.GamerTag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.PresenceInfo.OnlineState">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.PresenceInfo.LastSeenTitle">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.PresenceInfo.MinutesSinceStateChange">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.PresenceInfo.RichPresenceString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.OfflineFriend">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.OfflineFriend.G">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.OnlineFriend">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.OnlineFriend.G">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.OnlineFriend.T">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.OnlineFriend.S">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.FriendsInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendsInfo.OnlineFriends">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendsInfo.OfflineFriends">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.RecentPlayer">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.UserLivepuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.Gamertag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.GamerTileUrl">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.ReputationBucket">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.GamerScore">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.GamerZone">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.Status">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.GameTitleName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.LastMetDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.GameTitleTileUrl">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GamercardZones">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.GamercardZones.Unknown">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.GamercardZones.None">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.GamercardZones.Xbox_1">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.GamercardZones.RR">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.GamercardZones.Pro">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.GamercardZones.Family">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.GamercardZones.Underground">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.RecentPlayerStatus">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.RecentPlayerStatus.Neutral">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.RecentPlayerStatus.Preferred">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.RecentPlayerStatus.Avoided">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.FriendEx">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendEx.XUID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendEx.GamerTag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendEx.FriendStatus">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendEx.OnlineState">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendEx.LastSeenTitle">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendEx.MinutesSinceStateChange">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendEx.RichPresenceString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetGamertagsFromXUIDSCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetGamertagsFromXUIDSCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetGamertagsFromXUIDSCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetXUIDSFromGamertagsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetXUIDSFromGamertagsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetXUIDSFromGamertagsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetPresenceInfoCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetPresenceInfoCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetPresenceInfoCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetPresenceInfoCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetFriendsExCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetFriendsExCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetFriendsExCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetFriendsExCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetRecentPlayersCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetRecentPlayersCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetRecentPlayersCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetFriendsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetFriendsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetFriendsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetFriendsCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Profile.wcAchievement">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.uiAchievementId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.dtAchieved">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.nFlags">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.byType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.nCred">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.nImageId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.szTitle">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.szDescription">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.szHowTo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Profile.UserSetting">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.UserSetting.ulUserId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.UserSetting.uiSettingId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.UserSetting.value">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.UserSetting.status">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Profile.ReadProfileStatus">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Profile.ReadProfileStatus.SUCCESS_TITLE">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Profile.ReadProfileStatus.SUCCESS_DEFAULT">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Profile.ReadProfileStatus.WARNING_NO_VALUE">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Profile.ReadProfileStatus.ERROR_NO_PERMISSION">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Profile.ReadProfileStatus.ERROR_PUID_INVALID">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Profile.ReadAchievementsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Profile.ReadAchievementsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.ReadAchievementsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Profile.ReadSettingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Profile.ReadSettingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.ReadSettingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.QueryAttribute">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.WireData">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.QueryAttribute.Value">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.QueryAttribute.Id">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.XRLObject2">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.FindFromIdsResponse">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.FindFromIdsResponse.returnedResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.FindFromIdsResponse.attribCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.FindFromIdsResponse.attribs">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.SearchResponse">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.SearchResponse.totalResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.SearchResponse.returnedResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.SearchResponse.attribCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.SearchResponse.attribs">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.QueryAttributeSpec">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.QueryAttributeSpec.type">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.QueryAttributeSpec.len">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.AddCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.AddCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.AddCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.UpdateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.UpdateIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.SearchCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.SearchCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.SearchCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.FindFromIdsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.FindFromIdsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.FindFromIdsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.RemoveCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.RemoveIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.SelectCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.GetXQSConfigCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.GetXQSConfigCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.GetXQSConfigCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionCreateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionCreateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.CompetitionCreateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionCreateSingleEliminationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionCreateSingleEliminationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.CompetitionCreateSingleEliminationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionSearchCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionSearchCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.CompetitionSearchCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionManageEntrantCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionCancelCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionTopologyCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionTopologyCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.CompetitionTopologyCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionTopologySingleEliminationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionTopologySingleEliminationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.CompetitionTopologySingleEliminationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest._digest">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest._signature">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureResponse">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureResponse._hresult">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureResponse._signature">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureRequest">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureRequest._digest">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.VerifySignatureCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.VerifySignatureCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.SignatureWidget.VerifySignatureCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.CreateSignatureCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.CreateSignatureCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.SignatureWidget.CreateSignatureCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.TransferUserLicensesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.BlacklistDigestCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.UnBlacklistDigestCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DeleteXUIDStatus">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.DeleteXUIDStatus.Success">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.DeleteXUIDStatus.Warning_No_OP">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.DeleteXUIDStatus.Error_Invalid_Xuid">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.DeleteXUIDStatus.Error_Invalid_Title">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.DeleteXUIDStatus.Error_Invalid_Lb_ID">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.LBInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBInfo.LBID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBInfo.ResetType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBInfo.LocalizedLBName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBInfo.AttributeInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.LBResetType">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBResetType.Never">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBResetType.Weekly">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBResetType.Monthly">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBResetType.Bimonthly">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBResetType.Quarterly">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBResetType.Semiannually">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBResetType.Annually">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.StatsLocalizedName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.StatsLocalizedName.Locale">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.StatsLocalizedName.DisplayName">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.RawLBAttribute">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.RawLBAttribute.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.RawLBAttribute.V">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.RawLBEntry">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.RawLBEntry.G">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.RawLBEntry.R">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.RawLBEntry.A">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.RawLBResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.RawLBResults.Entries">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.RawLBResults.LBLastResetDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.RawLBResults.TotalLBEntries">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DetailedMLBEntry">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedMLBEntry.LBID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedMLBEntry.R">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedMLBEntry.F">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedMLBEntry.LBLastResetDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedMLBEntry.TotalLBEntries">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.LBEntryAttribute">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBEntryAttribute.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBEntryAttribute.V">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DetailedMLBResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedMLBResults.Entries">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedMLBResults.G">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.LBEntry">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBEntry.G">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBEntry.R">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.LBResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBResults.Entries">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBResults.LBLastResetDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBResults.TotalLBEntries">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DetailedLBEntry">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedLBEntry.G">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedLBEntry.R">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedLBEntry.F">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DetailedLBResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedLBResults.Entries">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedLBResults.LBLastResetDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedLBResults.TotalLBEntries">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.LBAttributeInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBAttributeInfo.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBAttributeInfo.Unit">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBAttributeInfo.LocalizedAttrName">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.AttributeUnit">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.Integer">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.Float">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.Percent">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.GamerTag">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.TimeStamp">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.MilliSeconds">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.TenMilliSeconds">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.HundredMilliSeconds">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.Seconds">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.Minutes">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.Hours">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.Days">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.String">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.Team">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.MaxAttributeUnit">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.LBType">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBType.Regular">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBType.RegularTeam">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBType.CompetitionTemplate">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBType.CompetitionTemplateTeam">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DeleteXUIDFromLBCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DeleteXUIDFromLBCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DeleteXUIDFromLBCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DeleteXUIDFromAllLBsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DeleteXUIDFromAllLBsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DeleteXUIDFromAllLBsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBListCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBListCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBListCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBListCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBListByTypeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBListByTypeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBListByTypeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBListByTypeCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.EnumerateLBCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.EnumerateLBCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.EnumerateLBCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.EnumerateLBCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBNearGamerTagCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBNearGamerTagCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBNearGamerTagCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBNearGamerTagCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBForGamerTagsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBForGamerTagsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBForGamerTagsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBForGamerTagsCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBDetailsForGamerTagsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBDetailsForGamerTagsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBDetailsForGamerTagsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBDetailsForGamerTagsCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetMLBByXUIDCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetMLBByXUIDCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetMLBByXUIDCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.EnumerateTeamLBCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.EnumerateTeamLBCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.EnumerateTeamLBCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.EnumerateTeamLBCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetTeamLBNearTeamNameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetTeamLBNearTeamNameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetTeamLBNearTeamNameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetTeamLBNearTeamNameCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetTeamLBForTeamNamesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetTeamLBForTeamNamesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetTeamLBForTeamNamesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetTeamLBForTeamNamesCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetTeamLBDetailsForTeamNamesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetTeamLBDetailsForTeamNamesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetTeamLBDetailsForTeamNamesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetTeamLBDetailsForTeamNamesCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.EnumerateLBRawCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.EnumerateLBRawCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.EnumerateLBRawCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.EnumerateLBRawCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.QuotaInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.QuotaInfo.MaxFileSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.QuotaInfo.TotalBytesMax">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.QuotaInfo.TotalBytesUsed">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.QuotaInfo.TotalFilesMax">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.QuotaInfo.TotalFilesUsed">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.FileEnumerationInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.TitleID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.TitleVersion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.GamerTag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.UserCountryID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.FileSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.CreationDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.ModifiedDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.FileName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.FileContentType">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.FileContentTypeEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Storage.FileContentTypeEnum.Package">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Storage.FileContentTypeEnum.Blob">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.ReadFileInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.FileNotModified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.TitleID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.TitleVersion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.GamerTag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.UserCountryID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.FileSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.CreationDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.FileData">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.FileContentType">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.GetTitleQuotaCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.GetTitleQuotaCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.GetTitleQuotaCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.ReadUserFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.ReadUserFileCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadUserFileCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.ReadTitleFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.ReadTitleFileCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadTitleFileCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.WriteUserFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.WriteTitleFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.DeleteUserFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.DeleteTitleFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.RevokeTitleFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.RevokeUserFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.EnumerateTitleFilesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.EnumerateTitleFilesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.EnumerateTitleFilesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.CXSuppApi">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByGamerTag(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginConsoleApplicationsGetByGamerTag(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndConsoleApplicationsGetByGamerTag(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByGamerTagAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByGamerTagAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByUserPuid(System.UInt64,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginConsoleApplicationsGetByUserPuid(System.UInt64,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndConsoleApplicationsGetByUserPuid(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByUserPuidAsync(System.UInt64,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByUserPuidAsync(System.UInt64,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByConsoleId(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginConsoleApplicationsGetByConsoleId(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndConsoleApplicationsGetByConsoleId(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByConsoleIdAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByConsoleIdAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByMachinePuid(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginConsoleApplicationsGetByMachinePuid(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndConsoleApplicationsGetByMachinePuid(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByMachinePuidAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByMachinePuidAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getPuidFromXName(System.String,System.UInt64@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BegingetPuidFromXName(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndgetPuidFromXName(System.IAsyncResult,System.UInt64@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getPuidFromXNameAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getPuidFromXNameAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getAccount(System.UInt64,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BegingetAccount(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndgetAccount(System.IAsyncResult,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getAccountAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getAccountAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.modifyAccount(System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginmodifyAccount(System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndmodifyAccount(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.modifyAccountAsync(System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.modifyAccountAsync(System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.banAccount(System.UInt64,System.Boolean,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginbanAccount(System.UInt64,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndbanAccount(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.banAccountAsync(System.UInt64,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.banAccountAsync(System.UInt64,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getRelatedAccounts(System.UInt64,System.UInt64[]@,System.String[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BegingetRelatedAccounts(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndgetRelatedAccounts(System.IAsyncResult,System.UInt64[]@,System.String[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getRelatedAccountsAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getRelatedAccountsAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getSubscriptionCodeStatus(System.String,System.Boolean@,System.Boolean@,System.Boolean@,System.UInt64@,System.String@,System.DateTime@,System.UInt64@,System.String@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BegingetSubscriptionCodeStatus(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndgetSubscriptionCodeStatus(System.IAsyncResult,System.Boolean@,System.Boolean@,System.Boolean@,System.UInt64@,System.String@,System.DateTime@,System.UInt64@,System.String@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getSubscriptionCodeStatusAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getSubscriptionCodeStatusAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getAccountEx(System.UInt64,System.UInt64@,System.DateTime@,System.Int32@,System.DateTime@,System.Int32@,System.Boolean@,System.DateTime@,System.Byte@,System.Boolean@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BegingetAccountEx(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndgetAccountEx(System.IAsyncResult,System.UInt64@,System.DateTime@,System.Int32@,System.DateTime@,System.Int32@,System.Boolean@,System.DateTime@,System.Byte@,System.Boolean@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getAccountExAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getAccountExAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getPassportMemberName(System.UInt64,System.String@,System.String@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BegingetPassportMemberName(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndgetPassportMemberName(System.IAsyncResult,System.String@,System.String@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getPassportMemberNameAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getPassportMemberNameAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.RemoveGamerPicture(System.UInt64,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginRemoveGamerPicture(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndRemoveGamerPicture(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.RemoveGamerPictureAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.RemoveGamerPictureAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetUserMotto(System.UInt64,System.String,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginSetUserMotto(System.UInt64,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndSetUserMotto(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetUserMottoAsync(System.UInt64,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetUserMottoAsync(System.UInt64,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetUserProfileItems(System.UInt64,ServerTestFramework.CUST.ProfileItem[],System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginSetUserProfileItems(System.UInt64,ServerTestFramework.CUST.ProfileItem[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndSetUserProfileItems(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetUserProfileItemsAsync(System.UInt64,ServerTestFramework.CUST.ProfileItem[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetUserProfileItemsAsync(System.UInt64,ServerTestFramework.CUST.ProfileItem[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.IncrementMaximumLicenseCount(System.UInt64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginIncrementMaximumLicenseCount(System.UInt64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndIncrementMaximumLicenseCount(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.IncrementMaximumLicenseCountAsync(System.UInt64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.IncrementMaximumLicenseCountAsync(System.UInt64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetXMLFromXName(System.String,System.String@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginGetXMLFromXName(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndGetXMLFromXName(System.IAsyncResult,System.String@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetXMLFromXNameAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetXMLFromXNameAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapUserWLID(System.UInt64,System.String,System.String,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginSwapUserWLID(System.UInt64,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndSwapUserWLID(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapUserWLIDAsync(System.UInt64,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapUserWLIDAsync(System.UInt64,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapOwnerWLID(System.UInt64,System.String,System.String,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginSwapOwnerWLID(System.UInt64,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndSwapOwnerWLID(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapOwnerWLIDAsync(System.UInt64,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapOwnerWLIDAsync(System.UInt64,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapUserDateOfBirth(System.UInt64,System.DateTime,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginSwapUserDateOfBirth(System.UInt64,System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndSwapUserDateOfBirth(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapUserDateOfBirthAsync(System.UInt64,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapUserDateOfBirthAsync(System.UInt64,System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.FamilyHistoryGetByPuid(System.UInt64,ServerTestFramework.CUST.FamilyHistoryDetail[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginFamilyHistoryGetByPuid(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndFamilyHistoryGetByPuid(System.IAsyncResult,ServerTestFramework.CUST.FamilyHistoryDetail[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.FamilyHistoryGetByPuidAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.FamilyHistoryGetByPuidAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.FamilyHistoryGetByGamertag(System.String,ServerTestFramework.CUST.FamilyHistoryDetail[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginFamilyHistoryGetByGamertag(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndFamilyHistoryGetByGamertag(System.IAsyncResult,ServerTestFramework.CUST.FamilyHistoryDetail[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.FamilyHistoryGetByGamertagAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.FamilyHistoryGetByGamertagAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetFamilyMembersByPuid(System.UInt64,ServerTestFramework.CUST.FamilyMember[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginGetFamilyMembersByPuid(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndGetFamilyMembersByPuid(System.IAsyncResult,ServerTestFramework.CUST.FamilyMember[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetFamilyMembersByPuidAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetFamilyMembersByPuidAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetFamilyMembersByGamertag(System.String,ServerTestFramework.CUST.FamilyMember[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginGetFamilyMembersByGamertag(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndGetFamilyMembersByGamertag(System.IAsyncResult,ServerTestFramework.CUST.FamilyMember[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetFamilyMembersByGamertagAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetFamilyMembersByGamertagAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getMachineAccountByConsoleId(System.UInt64,System.String,System.Boolean@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BegingetMachineAccountByConsoleId(System.UInt64,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndgetMachineAccountByConsoleId(System.IAsyncResult,System.Boolean@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getMachineAccountByConsoleIdAsync(System.UInt64,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getMachineAccountByConsoleIdAsync(System.UInt64,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.IsMachinePuidBanned(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginIsMachinePuidBanned(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndIsMachinePuidBanned(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.IsMachinePuidBannedAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.IsMachinePuidBannedAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.LookupMachineAccountByConsoleIdAndSCode(System.String,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginLookupMachineAccountByConsoleIdAndSCode(System.String,System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndLookupMachineAccountByConsoleIdAndSCode(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.LookupMachineAccountByConsoleIdAndSCodeAsync(System.String,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.LookupMachineAccountByConsoleIdAndSCodeAsync(System.String,System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.LookupMachineAccountByConsoleIdAndXuid(System.String,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginLookupMachineAccountByConsoleIdAndXuid(System.String,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndLookupMachineAccountByConsoleIdAndXuid(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.LookupMachineAccountByConsoleIdAndXuidAsync(System.String,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.LookupMachineAccountByConsoleIdAndXuidAsync(System.String,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.MachineHistoryGetByConsoleId(System.String,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginMachineHistoryGetByConsoleId(System.String,System.Nullable{System.DateTime},System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndMachineHistoryGetByConsoleId(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.MachineHistoryGetByConsoleIdAsync(System.String,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.MachineHistoryGetByConsoleIdAsync(System.String,System.Nullable{System.DateTime},System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.MachineHistoryGetByPuid(System.UInt64,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginMachineHistoryGetByPuid(System.UInt64,System.Nullable{System.DateTime},System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndMachineHistoryGetByPuid(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.MachineHistoryGetByPuidAsync(System.UInt64,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.MachineHistoryGetByPuidAsync(System.UInt64,System.Nullable{System.DateTime},System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFamilyGoldSeatExemptionByPuid(System.UInt64,System.UInt64,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginSetFamilyGoldSeatExemptionByPuid(System.UInt64,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndSetFamilyGoldSeatExemptionByPuid(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFamilyGoldSeatExemptionByPuidAsync(System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFamilyGoldSeatExemptionByPuidAsync(System.UInt64,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFamilyGoldSeatExemptionByGamertag(System.String,System.String,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginSetFamilyGoldSeatExemptionByGamertag(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndSetFamilyGoldSeatExemptionByGamertag(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFamilyGoldSeatExemptionByGamertagAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFamilyGoldSeatExemptionByGamertagAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFreeGamertagEligible(System.UInt64,System.Boolean,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginSetFreeGamertagEligible(System.UInt64,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndSetFreeGamertagEligible(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFreeGamertagEligibleAsync(System.UInt64,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFreeGamertagEligibleAsync(System.UInt64,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GamertagHistoryGet(System.String,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginGamertagHistoryGet(System.String,System.Nullable{System.DateTime},System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndGamertagHistoryGet(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GamertagHistoryGetAsync(System.String,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GamertagHistoryGetAsync(System.String,System.Nullable{System.DateTime},System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.UserHistoryGetByGamertag(System.String,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginUserHistoryGetByGamertag(System.String,System.Nullable{System.DateTime},System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndUserHistoryGetByGamertag(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.UserHistoryGetByGamertagAsync(System.String,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.UserHistoryGetByGamertagAsync(System.String,System.Nullable{System.DateTime},System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.UserHistoryGetByPuid(System.UInt64,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginUserHistoryGetByPuid(System.UInt64,System.Nullable{System.DateTime},System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndUserHistoryGetByPuid(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.UserHistoryGetByPuidAsync(System.UInt64,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.UserHistoryGetByPuidAsync(System.UInt64,System.Nullable{System.DateTime},System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByGamerTagCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByUserPuidCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByConsoleIdCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByMachinePuidCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.getPuidFromXNameCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.getAccountCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.modifyAccountCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.banAccountCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.getRelatedAccountsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.getSubscriptionCodeStatusCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.getAccountExCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.getPassportMemberNameCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.RemoveGamerPictureCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.SetUserMottoCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.SetUserProfileItemsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.IncrementMaximumLicenseCountCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.GetXMLFromXNameCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.SwapUserWLIDCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.SwapOwnerWLIDCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.SwapUserDateOfBirthCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.FamilyHistoryGetByPuidCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.FamilyHistoryGetByGamertagCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.GetFamilyMembersByPuidCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.GetFamilyMembersByGamertagCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.getMachineAccountByConsoleIdCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.IsMachinePuidBannedCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.LookupMachineAccountByConsoleIdAndSCodeCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.LookupMachineAccountByConsoleIdAndXuidCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.MachineHistoryGetByConsoleIdCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.MachineHistoryGetByPuidCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.SetFamilyGoldSeatExemptionByPuidCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.SetFamilyGoldSeatExemptionByGamertagCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.SetFreeGamertagEligibleCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.GamertagHistoryGetCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.UserHistoryGetByGamertagCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.UserHistoryGetByPuidCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplications">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplications.MachinePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplications.ConsoleId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplications.ApplicationGroups">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationGroup">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationGroup.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationGroup.SystemOnlineManifestRevision">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationGroup.SystemManifestRevision">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationGroup.FlashVersion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationGroup.GroupId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationGroup.Applications">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationDetail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationDetail.FileName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationDetail.FriendlyName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationDetail.AppVersion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationDetail.Online">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.UserHistory">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistory.UserPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistory.UserHistoryDetail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistory.MachineHistoryDetail">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.UserHistoryDetail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistoryDetail.Timestamp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistoryDetail.UserPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistoryDetail.MachinePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistoryDetail.IpAddress">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistoryDetail.Reason">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistoryDetail.Detail">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.MachineHistoryDetail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistoryDetail.UserPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistoryDetail.MachinePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistoryDetail.FirstSeen">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistoryDetail.LastSeen">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistoryDetail.DaysSeen">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistoryDetail.IpAddress">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.MachineInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.MachinePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.ConsoleId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.SecondaryIdentifier">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.ResetDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.CreateDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.FlashVersion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.FlashDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.ConsoleRegion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.UpdateVersion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.UpdateDate">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.MachineHistory">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistory.MachinePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistory.UserHistoryDetail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistory.MachineHistoryDetail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistory.MachineConsoleInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.FamilyMember">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyMember.userPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyMember.userFlags">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyMember.gamertag">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.FamilyHistoryDetail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.ownerPassportPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.ownerGamertag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.dependentPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.dependentGamertag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.machinePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.ipAddress">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.timestamp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.hr">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.reason">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ProfileItem">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ProfileItem.profileItem">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ProfileItem.profileItemValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ProfileItem.titleId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationsGetByGamerTagCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationsGetByGamerTagCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationsGetByGamerTagCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationsGetByUserPuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationsGetByUserPuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationsGetByUserPuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationsGetByConsoleIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationsGetByConsoleIdCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationsGetByConsoleIdCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationsGetByMachinePuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationsGetByMachinePuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationsGetByMachinePuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getPuidFromXNameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getPuidFromXNameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getPuidFromXNameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getPuidFromXNameCompletedEventArgs.puid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getPuidFromXNameCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getAccountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getAccountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.isAccountOwner">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.isActive">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.isLockedOut">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.isVoiceBanned">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.isNicknameBanned">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.mustChangeXName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.isGeofenceExempt">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.modifyAccountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.modifyAccountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.modifyAccountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.modifyAccountCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.banAccountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.banAccountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.banAccountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.banAccountCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getRelatedAccountsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getRelatedAccountsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getRelatedAccountsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getRelatedAccountsCompletedEventArgs.relatedAccounts">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getRelatedAccountsCompletedEventArgs.relatedAccountNames">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getRelatedAccountsCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.bValidSubscriptionCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.bUsed">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.bUsedMaxTimes">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.ulLastUser">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.szLastUser">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.ftLastUsage">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.ulOfferID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.szOffer">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getAccountExCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getAccountExCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.biOwnerPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.dtAccountResumeDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.iSuspensionLength">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.dtVoiceResumeDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.iVoiceBanLength">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.bMustChangeXName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.dtAcceptedTOS">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.tiCountryID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.isGeoFenceExempt">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getPassportMemberNameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getPassportMemberNameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getPassportMemberNameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getPassportMemberNameCompletedEventArgs.userPmn">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getPassportMemberNameCompletedEventArgs.parentPmn">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getPassportMemberNameCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.RemoveGamerPictureCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.RemoveGamerPictureCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.RemoveGamerPictureCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.RemoveGamerPictureCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetUserMottoCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetUserMottoCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetUserMottoCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetUserMottoCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetUserProfileItemsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetUserProfileItemsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetUserProfileItemsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetUserProfileItemsCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.IncrementMaximumLicenseCountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.IncrementMaximumLicenseCountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.IncrementMaximumLicenseCountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.GetXMLFromXNameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.GetXMLFromXNameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetXMLFromXNameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetXMLFromXNameCompletedEventArgs.userXML">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetXMLFromXNameCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SwapUserWLIDCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SwapUserWLIDCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SwapUserWLIDCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SwapUserWLIDCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SwapOwnerWLIDCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SwapOwnerWLIDCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SwapOwnerWLIDCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SwapOwnerWLIDCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SwapUserDateOfBirthCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SwapUserDateOfBirthCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SwapUserDateOfBirthCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SwapUserDateOfBirthCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.FamilyHistoryGetByPuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.FamilyHistoryGetByPuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryGetByPuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryGetByPuidCompletedEventArgs.details">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryGetByPuidCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.FamilyHistoryGetByGamertagCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.FamilyHistoryGetByGamertagCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryGetByGamertagCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryGetByGamertagCompletedEventArgs.details">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryGetByGamertagCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.GetFamilyMembersByPuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.GetFamilyMembersByPuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetFamilyMembersByPuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetFamilyMembersByPuidCompletedEventArgs.familyMembers">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetFamilyMembersByPuidCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.GetFamilyMembersByGamertagCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.GetFamilyMembersByGamertagCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetFamilyMembersByGamertagCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetFamilyMembersByGamertagCompletedEventArgs.familyMembers">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetFamilyMembersByGamertagCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getMachineAccountByConsoleIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getMachineAccountByConsoleIdCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getMachineAccountByConsoleIdCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getMachineAccountByConsoleIdCompletedEventArgs.isLockedOut">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getMachineAccountByConsoleIdCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.IsMachinePuidBannedCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.IsMachinePuidBannedCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.IsMachinePuidBannedCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.LookupMachineAccountByConsoleIdAndSCodeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.LookupMachineAccountByConsoleIdAndSCodeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.LookupMachineAccountByConsoleIdAndSCodeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.LookupMachineAccountByConsoleIdAndXuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.LookupMachineAccountByConsoleIdAndXuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.LookupMachineAccountByConsoleIdAndXuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.MachineHistoryGetByConsoleIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.MachineHistoryGetByConsoleIdCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistoryGetByConsoleIdCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.MachineHistoryGetByPuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.MachineHistoryGetByPuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistoryGetByPuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetFamilyGoldSeatExemptionByPuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetFamilyGoldSeatExemptionByPuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetFamilyGoldSeatExemptionByPuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetFamilyGoldSeatExemptionByPuidCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetFamilyGoldSeatExemptionByGamertagCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetFamilyGoldSeatExemptionByGamertagCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetFamilyGoldSeatExemptionByGamertagCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetFamilyGoldSeatExemptionByGamertagCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetFreeGamertagEligibleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetFreeGamertagEligibleCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetFreeGamertagEligibleCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetFreeGamertagEligibleCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.GamertagHistoryGetCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.GamertagHistoryGetCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GamertagHistoryGetCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.UserHistoryGetByGamertagCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.UserHistoryGetByGamertagCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistoryGetByGamertagCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.UserHistoryGetByPuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.UserHistoryGetByPuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistoryGetByPuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.AccountInfo">
            <summary>
            Summary description for SvcProviderWrapper.
            </summary>
        </member>
        <member name="T:ServerTestFramework.CUST.AccountInfoEx">
            <summary>
            Summary description for SvcProviderWrapper.
            </summary>
        </member>
        <member name="T:ServerTestFramework.CUST.MachineAccountInfo">
            <summary>
            Summary description for SvcProviderWrapper.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.AddCreditCard(System.UInt64,System.UInt64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.BeginAddCreditCard(System.UInt64,System.UInt64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.EndAddCreditCard(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.AddCreditCardAsync(System.UInt64,System.UInt64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.AddCreditCardAsync(System.UInt64,System.UInt64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetPointsBalance(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.BeginGetPointsBalance(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.EndGetPointsBalance(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetPointsBalanceAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetPointsBalanceAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.SignIn">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.BeginSignIn(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.EndSignIn(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.SignInAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.SignInAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetPaymentInstruments(System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.BeginGetPaymentInstruments(System.UInt64,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.EndGetPaymentInstruments(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetPaymentInstrumentsAsync(System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetPaymentInstrumentsAsync(System.UInt64,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetUserAuthorization(System.Int32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.BeginGetUserAuthorization(System.Int32,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.EndGetUserAuthorization(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetUserAuthorizationAsync(System.Int32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetUserAuthorizationAsync(System.Int32,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.TestConnection(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.BeginTestConnection(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.EndTestConnection(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.TestConnectionAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.TestConnectionAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.AddCreditCardCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetPointsBalanceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.SignInCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetPaymentInstrumentsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetUserAuthorizationCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.TestConnectionCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.AddCreditCardResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AddCreditCardResults.PaymentInstrumentId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.SessionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SessionInfo.MusicNetAuthToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SessionInfo.GeoCountryCode">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.OfferId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.BillingInstanceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.Status">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.HasBillingViolation">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.HasPendingCancel">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.HasLapsed">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.StartDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.EndDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.RenewalOfferId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.XboxPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.LivePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.Tag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.CountryCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.PostalCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.ParentallyControlled">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.Privileges">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.Services">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.PointsBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.IsLightweight">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.ErrorInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorInfo.HResult">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorInfo.Message">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorInfo.TagChangeRequired">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorInfo.AcceptedTermsOfService">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorInfo.AccountSuspended">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorInfo.BillingUnavailable">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetUserAuthorizationInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetUserAuthorizationInfo.ErrorInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetUserAuthorizationInfo.AccountInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetUserAuthorizationInfo.SubscriptionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetUserAuthorizationInfo.SessionInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails.PayerEmail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails.BillingAgreementId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails.FirstName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails.LastName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails.MiddleName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails.PayerBusiness">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails.PayerCountry">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails.BillingAgreementDescription">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.PayPalPayinInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PayPalPayinInfo.BillingAgreementDetails">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.WholesaleInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.WholesaleInfo.AccountHolderName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.WholesaleInfo.ExternalReferenceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.WholesaleInfo.WholesalePartner">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.WholesaleInfo.EncryptedPassword">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.DirectDebitInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.DirectDebitInfo.AccountHolderName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.DirectDebitInfo.AccountNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.DirectDebitInfo.BankCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.DirectDebitInfo.BranchCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.DirectDebitInfo.CheckDigits">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.CreditCardInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.CreditCardInfo.CardType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.CreditCardInfo.AccountHolderName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.CreditCardInfo.AccountNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.CreditCardInfo.CcvNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.CreditCardInfo.ExpirationDate">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.PhoneInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PhoneInfo.PhonePrefix">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PhoneInfo.PhoneNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PhoneInfo.PhoneExtension">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.AddressInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AddressInfo.Street1">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AddressInfo.Street2">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AddressInfo.City">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AddressInfo.District">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AddressInfo.State">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AddressInfo.PostalCode">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo.PaymentInstrumentId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo.PaymentInstrumentType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo.AddressInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo.PhoneInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo.CreditCardInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo.DirectDebitInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo.WholesaleInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo.PayPalPayinInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetPaymentInstrumentResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetPaymentInstrumentResults.PaymentInstrumentInfos">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.SessionDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SessionDetails.SessionKey">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SessionDetails.MusicNetAuthToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SessionDetails.GeoCountryCode">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.XboxOfferId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.BillingInstanceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.Status">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.HasBillingViolation">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.HasPendingCancel">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.MusicNetSku">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.StartDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.EndDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.RenewalXboxOfferId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.XboxPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.LivePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.Tag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.PostalCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.CountryCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.ParentallyControlled">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.Privileges">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.PointsBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.IsLightweight">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.ErrorDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorDetails.HResult">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorDetails.Message">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorDetails.TagChangeRequired">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorDetails.AcceptedTermsOfService">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorDetails.AccountSuspended">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorDetails.SubscriptionLapsed">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorDetails.BillingUnavailable">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.SignInResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SignInResults.ErrorInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SignInResults.AccountInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SignInResults.SubscriptionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SignInResults.SessionInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetPointsBalanceResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetPointsBalanceResults.PointsBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetPointsBalanceResults.AboveLowBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetPointsBalanceResults.DmpAccountStatus">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.AddCreditCardCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.AddCreditCardCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AddCreditCardCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetPointsBalanceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetPointsBalanceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetPointsBalanceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.SignInCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.SignInCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SignInCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetPaymentInstrumentsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetPaymentInstrumentsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetPaymentInstrumentsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetUserAuthorizationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetUserAuthorizationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetUserAuthorizationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.TestConnectionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.TestConnectionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.TestConnectionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.AcceptTermsOfService(System.UInt64,System.Byte[],ServerTestFramework.LiveService.UserAccount.WebService2.ServiceTypeEnum)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginAcceptTermsOfService(System.UInt64,System.Byte[],ServerTestFramework.LiveService.UserAccount.WebService2.ServiceTypeEnum,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndAcceptTermsOfService(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.AcceptTermsOfServiceAsync(System.UInt64,System.Byte[],ServerTestFramework.LiveService.UserAccount.WebService2.ServiceTypeEnum)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.AcceptTermsOfServiceAsync(System.UInt64,System.Byte[],ServerTestFramework.LiveService.UserAccount.WebService2.ServiceTypeEnum,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.AddCreditCard(System.UInt64,System.UInt64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginAddCreditCard(System.UInt64,System.UInt64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndAddCreditCard(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.AddCreditCardAsync(System.UInt64,System.UInt64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.AddCreditCardAsync(System.UInt64,System.UInt64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetPointsBalance(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginGetPointsBalance(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndGetPointsBalance(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetPointsBalanceAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetPointsBalanceAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.SignIn">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginSignIn(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndSignIn(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.SignInAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.SignInAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.CreateMobileAccount(System.UInt64,System.Byte[],System.UInt64,System.String,System.Byte,System.UInt16,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginCreateMobileAccount(System.UInt64,System.Byte[],System.UInt64,System.String,System.Byte,System.UInt16,System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndCreateMobileAccount(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.CreateMobileAccountAsync(System.UInt64,System.Byte[],System.UInt64,System.String,System.Byte,System.UInt16,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.CreateMobileAccountAsync(System.UInt64,System.Byte[],System.UInt64,System.String,System.Byte,System.UInt16,System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GenerateGamertag(System.String,System.UInt64,ServerTestFramework.LiveService.UserAccount.WebService2.GamertagSuggestionType)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginGenerateGamertag(System.String,System.UInt64,ServerTestFramework.LiveService.UserAccount.WebService2.GamertagSuggestionType,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndGenerateGamertag(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GenerateGamertagAsync(System.String,System.UInt64,ServerTestFramework.LiveService.UserAccount.WebService2.GamertagSuggestionType)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GenerateGamertagAsync(System.String,System.UInt64,ServerTestFramework.LiveService.UserAccount.WebService2.GamertagSuggestionType,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetPaymentInstruments(System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginGetPaymentInstruments(System.UInt64,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndGetPaymentInstruments(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetPaymentInstrumentsAsync(System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetPaymentInstrumentsAsync(System.UInt64,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetSupportedCountries(System.Byte,System.Byte)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginGetSupportedCountries(System.Byte,System.Byte,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndGetSupportedCountries(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetSupportedCountriesAsync(System.Byte,System.Byte)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetSupportedCountriesAsync(System.Byte,System.Byte,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetUserAuthorization(System.Int32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginGetUserAuthorization(System.Int32,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndGetUserAuthorization(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetUserAuthorizationAsync(System.Int32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetUserAuthorizationAsync(System.Int32,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.TestConnection(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginTestConnection(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndTestConnection(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.TestConnectionAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.TestConnectionAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.ConsoleApplicationsGetByMachinePuid(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginConsoleApplicationsGetByMachinePuid(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndConsoleApplicationsGetByMachinePuid(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.ConsoleApplicationsGetByMachinePuidAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.ConsoleApplicationsGetByMachinePuidAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.AcceptTermsOfServiceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.AddCreditCardCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetPointsBalanceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.SignInCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.CreateMobileAccountCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GenerateGamertagCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetPaymentInstrumentsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetSupportedCountriesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetUserAuthorizationCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.TestConnectionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.ConsoleApplicationsGetByMachinePuidCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.ServiceTypeEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.WebService2.ServiceTypeEnum.Unknown">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.WebService2.ServiceTypeEnum.XboxLive">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.WebService2.ServiceTypeEnum.Zune">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.AddCreditCardResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AddCreditCardResults.PaymentInstrumentId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationDetail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationDetail.FileName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationDetail.FriendlyName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationDetail.AppVersion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationDetail.Online">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationGroup">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationGroup.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationGroup.SystemOnlineManifestRevision">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationGroup.SystemManifestRevision">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationGroup.FlashVersion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationGroup.GroupId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationGroup.Applications">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplications">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplications.ConsoleId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplications.ApplicationGroups">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.SessionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SessionInfo.MusicNetAuthToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SessionInfo.GeoCountryCode">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.OfferId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.BillingInstanceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.Status">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.HasBillingViolation">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.HasPendingCancel">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.HasLapsed">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.StartDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.EndDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.RenewalOfferId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.XboxPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.LivePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.Tag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.CountryCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.PostalCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.ParentallyControlled">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.Privileges">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.Services">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.PointsBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.IsLightweight">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.CultureId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.ParentalControlGroupId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorInfo.HResult">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorInfo.Message">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorInfo.TagChangeRequired">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorInfo.AcceptedTermsOfService">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorInfo.AccountSuspended">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorInfo.BillingUnavailable">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetUserAuthorizationInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetUserAuthorizationInfo.ErrorInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetUserAuthorizationInfo.AccountInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetUserAuthorizationInfo.SubscriptionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetUserAuthorizationInfo.SessionInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.CountryInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CountryInfo.CountryId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CountryInfo.CountryCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CountryInfo.User">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CountryInfo.Billing">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CountryInfo.AllowDirectDebit">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CountryInfo.AllowPayPal">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CountryInfo.RequireCCAgeVerification">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails.PayerEmail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails.BillingAgreementId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails.FirstName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails.LastName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails.MiddleName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails.PayerBusiness">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails.PayerCountry">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails.BillingAgreementDescription">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.PayPalPayinInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PayPalPayinInfo.BillingAgreementDetails">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.WholesaleInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.WholesaleInfo.AccountHolderName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.WholesaleInfo.ExternalReferenceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.WholesaleInfo.WholesalePartner">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.WholesaleInfo.EncryptedPassword">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.DirectDebitInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.DirectDebitInfo.AccountHolderName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.DirectDebitInfo.AccountNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.DirectDebitInfo.BankCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.DirectDebitInfo.BranchCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.DirectDebitInfo.CheckDigits">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.CreditCardInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CreditCardInfo.CardType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CreditCardInfo.AccountHolderName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CreditCardInfo.AccountNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CreditCardInfo.CcvNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CreditCardInfo.ExpirationDate">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.PhoneInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PhoneInfo.PhonePrefix">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PhoneInfo.PhoneNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PhoneInfo.PhoneExtension">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.AddressInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AddressInfo.Street1">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AddressInfo.Street2">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AddressInfo.City">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AddressInfo.District">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AddressInfo.State">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AddressInfo.PostalCode">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo.PaymentInstrumentId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo.PaymentInstrumentType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo.AddressInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo.PhoneInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo.CreditCardInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo.DirectDebitInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo.WholesaleInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo.PayPalPayinInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetPaymentInstrumentResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetPaymentInstrumentResults.PaymentInstrumentInfos">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.SessionDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SessionDetails.SessionKey">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SessionDetails.MusicNetAuthToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SessionDetails.GeoCountryCode">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.XboxOfferId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.BillingInstanceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.Status">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.HasBillingViolation">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.HasPendingCancel">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.MusicNetSku">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.StartDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.EndDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.RenewalXboxOfferId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.XboxPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.LivePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.Tag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.PostalCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.CountryCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.ParentallyControlled">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.Privileges">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.PointsBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.IsLightweight">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorDetails.HResult">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorDetails.Message">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorDetails.TagChangeRequired">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorDetails.AcceptedTermsOfService">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorDetails.AccountSuspended">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorDetails.SubscriptionLapsed">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorDetails.BillingUnavailable">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.SignInResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SignInResults.ErrorInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SignInResults.AccountInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SignInResults.SubscriptionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SignInResults.SessionInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetPointsBalanceResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetPointsBalanceResults.PointsBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetPointsBalanceResults.AboveLowBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetPointsBalanceResults.DmpAccountStatus">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GamertagSuggestionType">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.WebService2.GamertagSuggestionType.NounAdjectiveSuggestion">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.WebService2.GamertagSuggestionType.SeedSuggestion">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.AcceptTermsOfServiceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.AddCreditCardCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.AddCreditCardCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AddCreditCardCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetPointsBalanceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetPointsBalanceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetPointsBalanceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.SignInCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.SignInCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SignInCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.CreateMobileAccountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GenerateGamertagCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GenerateGamertagCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GenerateGamertagCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetPaymentInstrumentsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetPaymentInstrumentsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetPaymentInstrumentsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetSupportedCountriesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetSupportedCountriesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetSupportedCountriesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetUserAuthorizationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetUserAuthorizationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetUserAuthorizationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.TestConnectionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.TestConnectionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.TestConnectionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationsGetByMachinePuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationsGetByMachinePuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationsGetByMachinePuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.Billing">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.TestConnection(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginTestConnection(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndTestConnection(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.TestConnectionAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.TestConnectionAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseMediaOffers(System.UInt64,System.UInt64,System.String[],System.Int32[],System.UInt32[],ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginPurchaseMediaOffers(System.UInt64,System.UInt64,System.String[],System.Int32[],System.UInt32[],ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.String,System.String,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndPurchaseMediaOffers(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseMediaOffersAsync(System.UInt64,System.UInt64,System.String[],System.Int32[],System.UInt32[],ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseMediaOffersAsync(System.UInt64,System.UInt64,System.String[],System.Int32[],System.UInt32[],ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.String,System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.GetPurchaseStatus(System.UInt64,System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginGetPurchaseStatus(System.UInt64,System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndGetPurchaseStatus(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.GetPurchaseStatusAsync(System.UInt64,System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.GetPurchaseStatusAsync(System.UInt64,System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.FindMediaInstanceUrls(System.String[],System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginFindMediaInstanceUrls(System.String[],System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndFindMediaInstanceUrls(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.FindMediaInstanceUrlsAsync(System.String[],System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.FindMediaInstanceUrlsAsync(System.String[],System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.VerifyToken(System.UInt64,System.UInt64,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginVerifyToken(System.UInt64,System.UInt64,System.String,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndVerifyToken(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.VerifyTokenAsync(System.UInt64,System.UInt64,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.VerifyTokenAsync(System.UInt64,System.UInt64,System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.CancelSubscription(System.UInt64,System.UInt64,System.UInt64,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginCancelSubscription(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndCancelSubscription(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.CancelSubscriptionAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.CancelSubscriptionAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.GamertagEnumerate(System.UInt64,ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginGamertagEnumerate(System.UInt64,ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndGamertagEnumerate(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.GamertagEnumerateAsync(System.UInt64,ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.GamertagEnumerateAsync(System.UInt64,ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.SubscriptionEnumerate(System.UInt64,System.UInt64,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginSubscriptionEnumerate(System.UInt64,System.UInt64,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndSubscriptionEnumerate(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.SubscriptionEnumerateAsync(System.UInt64,System.UInt64,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.SubscriptionEnumerateAsync(System.UInt64,System.UInt64,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseBillingOffer(System.UInt64,System.UInt64,System.UInt64,System.UInt32,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginPurchaseBillingOffer(System.UInt64,System.UInt64,System.UInt64,System.UInt32,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndPurchaseBillingOffer(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseBillingOfferAsync(System.UInt64,System.UInt64,System.UInt64,System.UInt32,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseBillingOfferAsync(System.UInt64,System.UInt64,System.UInt64,System.UInt32,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseGamertag(System.UInt64,System.UInt64,System.Guid,ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginPurchaseGamertag(System.UInt64,System.UInt64,System.Guid,ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndPurchaseGamertag(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseGamertagAsync(System.UInt64,System.UInt64,System.Guid,ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseGamertagAsync(System.UInt64,System.UInt64,System.Guid,ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.TestConnectionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseMediaOffersCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.GetPurchaseStatusCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.FindMediaInstanceUrlsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.VerifyTokenCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.CancelSubscriptionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.GamertagEnumerateCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.SubscriptionEnumerateCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseBillingOfferCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseGamertagCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum.CreditCard">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum.Token">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum.Points">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum.Wholesale">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum.Untrusted">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum.All">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum.NoTokens">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.PurchaseStatus">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.PurchaseStatus.offerId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.PurchaseStatus.status">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.PurchaseStatusEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PurchaseStatusEnum.OfferIdNotFound">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PurchaseStatusEnum.TransactionPending">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PurchaseStatusEnum.TransactionSuccessful">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PurchaseStatusEnum.TransactionFailed">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.PriceInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.PriceInfo.PaymentType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.PriceInfo.TaxType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.PriceInfo.WholePrice">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.PriceInfo.FractionalPrice">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.PriceInfo.PriceText">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.OfferId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.OfferName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.OfferType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.RelationType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.ConvertMode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.InstanceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.TitleId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.TitleCategory">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.TitleName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.GameRating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.Duration">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.Frequency">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.TierProvided">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.TierRequired">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.SellText">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.RelatedOfferId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.ResponseFlags">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.SubscriptionStatusId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.Price">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionEnumerateResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionEnumerateResults.SubscriptionInfos">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionEnumerateResults.OffersTotal">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.XboxOfferInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.XboxOfferInfo.offerId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.XboxOfferInfo.offerTypeId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.EmsOfferInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.EmsOfferInfo.offerId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.EmsOfferInfo.mediaId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.EmsOfferInfo.mediaType">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.VerifyTokenResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.VerifyTokenResults.emsOfferInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.VerifyTokenResults.xboxOfferInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.WireData">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.OfferPrice">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.OfferPrice.paymentType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.OfferPrice.taxType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.OfferPrice.wholePrice">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.OfferPrice.fractionalPrice">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.OfferPrice.priceTextLength">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.OfferPrice.priceText">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.XRLObject2">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.offerID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.offerNameLength">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.offerName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.offerType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.sellTextLength">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.sellText">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.maxStartDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.pricesLength">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.prices">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.GamertagEnumerateResult">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagEnumerateResult.offersReturned">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagEnumerateResult.infos">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagEnumerateResult.offersTotal">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.TypedMediaUrl">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.TypedMediaUrl.type">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.TypedMediaUrl.length">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.TypedMediaUrl.url">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.mediaId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.mediaInstanceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.packageSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.installSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.symKey">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.pubKey">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.packageType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.fileCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.urls">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.TestConnectionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.TestConnectionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.TestConnectionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.PurchaseMediaOffersCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.GetPurchaseStatusCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.GetPurchaseStatusCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GetPurchaseStatusCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.FindMediaInstanceUrlsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.FindMediaInstanceUrlsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.FindMediaInstanceUrlsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.VerifyTokenCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.VerifyTokenCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.VerifyTokenCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.CancelSubscriptionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.GamertagEnumerateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.GamertagEnumerateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagEnumerateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionEnumerateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionEnumerateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionEnumerateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.PurchaseBillingOfferCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.PurchaseGamertagCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.PurchaseGamertagCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.PurchaseGamertagCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.History.WebService.History">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.TestConnection(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.BeginTestConnection(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.EndTestConnection(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.TestConnectionAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.TestConnectionAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.Execute(System.String,System.String[],System.String[],System.Int32,System.Int32,System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.BeginExecute(System.String,System.String[],System.String[],System.Int32,System.Int32,System.UInt64,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.EndExecute(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.ExecuteAsync(System.String,System.String[],System.String[],System.Int32,System.Int32,System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.ExecuteAsync(System.String,System.String[],System.String[],System.Int32,System.Int32,System.UInt64,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.Query(System.String,System.String[],System.String[],System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.BeginQuery(System.String,System.String[],System.String[],System.UInt64,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.EndQuery(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.QueryAsync(System.String,System.String[],System.String[],System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.QueryAsync(System.String,System.String[],System.String[],System.UInt64,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.History.WebService.History.TestConnectionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.History.WebService.History.ExecuteCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.History.WebService.History.QueryCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.History.WebService.TestConnectionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.History.WebService.TestConnectionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.History.WebService.TestConnectionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.History.WebService.ExecuteCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.History.WebService.ExecuteCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.History.WebService.ExecuteCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.History.WebService.QueryCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.History.WebService.QueryCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.History.WebService.QueryCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.sts.WebService.SecurityTicket">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.GetPartnerSecurityTicket(System.UInt64,System.UInt32,System.UInt16)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.BeginGetPartnerSecurityTicket(System.UInt64,System.UInt32,System.UInt16,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.EndGetPartnerSecurityTicket(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.GetPartnerSecurityTicketAsync(System.UInt64,System.UInt32,System.UInt16)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.GetPartnerSecurityTicketAsync(System.UInt64,System.UInt32,System.UInt16,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.GetSecurityTicket(System.Byte,System.UInt32,System.UInt16,System.UInt16,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.BeginGetSecurityTicket(System.Byte,System.UInt32,System.UInt16,System.UInt16,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.EndGetSecurityTicket(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.GetSecurityTicketAsync(System.Byte,System.UInt32,System.UInt16,System.UInt16,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.GetSecurityTicketAsync(System.Byte,System.UInt32,System.UInt16,System.UInt16,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.GetPartnerSecurityTicketCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.GetSecurityTicketCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.sts.WebService.GetPartnerSecurityTicketCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.sts.WebService.GetPartnerSecurityTicketCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.sts.WebService.GetPartnerSecurityTicketCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.sts.WebService.GetSecurityTicketCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.sts.WebService.GetSecurityTicketCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.sts.WebService.GetSecurityTicketCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSRC.Ranking.Game">
            <summary>
            A class to represent a single game between some teams each of which comprised of several players. Each game also has
            to have the date at which it ended. This time is assumed to be the time when the game finsihed as each team will
            know about its scores (which is only possible AFTER the game).
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Game.m_aDate">
            <summary>
            The date at which the game ended.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Game.m_aTeams">
            <summary>
            A variable sized list of teams.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.Game.#ctor(System.DateTime,System.Int32)">
            <summary>
            Constructs a game that ended at a specified date between at a maximal number of teams. 
            </summary>
            <param name="aDate">Date at which the game ended.</param>
            <param name="iMaxNumberOfTeams">Maximum number of teams.</param>
            <remarks>An exception will be thrown if more than the specified number of teams are added.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Game.#ctor(System.DateTime)">
            <summary>
            Constructs a game that ended at a specified date between an arbitrary number of teams.
            </summary>
            <param name="aDate">Date at which the game ended.</param>
        </member>
        <member name="M:MSRC.Ranking.Game.AddTeam(MSRC.Ranking.Team)">
            <summary>
            Adds a team to the game.
            </summary>
            <param name="aTeam">The team to be added.</param>
            <returns>The team index of the team added.</returns>
            <remarks>The team index is a zero-based internal index used by this class.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Game.GetTeam(System.Int32)">
            <summary>
            Gets the team at a specified index.
            </summary>
            <param name="iTeamIndex">The index of the team.</param>
            <returns>The team at the given index or null, if the index is wrong.</returns>
            <remarks>The team index is a zero-based internal index used by this class.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Game.GetWinner(System.Int32,System.Int32)">
            <summary>
            Gets the winner between two teams.
            </summary>
            <param name="iTeamIndex1">Team index of team 1.</param>
            <param name="iTeamIndex2">Team index of team 2.</param>
            <returns>Returns +1 if team 1 won against team 2, -1 if team 2 won against team 1, and 0 it both teams
            draw.</returns>
            <remarks>The team index is a zero-based internal index used by this class.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Game.RemoveEmptyTeams">
            <summary>
            Removes all empty teams.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Game.Date">
            <summary>
            The date at which the game ended.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Game.NumberOfTeams">
            <summary>
            The number of participating teams.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Game.NumberOfPlayers">
            <summary>
            The total number of players participating in the game.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Game.PlayerIDs">
            <summary>
            All player IDs of all players in the game.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Game.TeamIDs">
            <summary>
            All team indicies of all players in the game.
            </summary>
            <remarks>The team index is a zero-based internal index used by this class.</remarks>
        </member>
        <member name="P:MSRC.Ranking.Game.Ranking">
            <summary>
            The full ranking of all teams based on the team scores.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.Numerics.GaussianApproximations">
            <summary>
            A static class that provides some functions for Gaussian integrals. In particular, this class provides
            correction functions for the mean and variance of the truncated Gaussian.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.erfc(System.Double)">
            <summary>
            Computes the complementary error function. This function is defined by 2/sqrt(pi) * integral from x to infinity of exp (-t^2) dt.
            </summary>
            <param name="x">The lower boundary of integration.</param>
            <returns>The complementary error function.</returns>
            <remarks>This method uses a Chebyshev series approximation which is exact in the whole range up to 1 * 10^{-7}.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.erfcinv(System.Double)">
            <summary>
            Computes the inverse of the complementary error function. 
            </summary>
            <param name="y">The point of interest.</param>
            <returns>The inverse of the complementary error function.</returns>
            <remarks>This function uses a polynomial approximation together with one step of Halley's rational method.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the input <c>y</c> is outside [0,2].</exception>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.Phi(System.Double)">
            <summary>
            Computes the cummulative Gaussian distribution at a specified point of interest.
            </summary>
            <param name="t">The point of interest.</param>
            <returns>The cummulative Gaussian distribution at the point of interest.</returns>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.PhiInverse(System.Double)">
            <summary>
            Computes the inverse of the cummulative Gaussian distribution (qunatile function) at a specified point of interest.
            </summary>
            <param name="p">The cummulative probability or point of interest in [0,1].</param>
            <returns>The quantile at the specified point.</returns>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.N(System.Double)">
            <summary>
            Computes the normal density at a specified point of interest.
            </summary>
            <param name="t">The point of interest.</param>
            <returns>The normal density at the point of interest.</returns>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.v(System.Double,System.Double)">
            <summary>
            Computes the additive correction of a single-sided truncated Gaussian with unit variance.
            </summary>
            <param name="t">The mean of the non-truncated Gaussian.</param>
            <param name="epsilon">The truncation point.</param>
            <returns>The additive correction.</returns>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.w(System.Double,System.Double)">
            <summary>
            Computes the multiplicative correction of a single-sided truncated Gaussian with unit variance.
            </summary>
            <param name="t">The mean of the non-truncated Gaussian.</param>
            <param name="epsilon">The truncation point.</param>
            <returns>The multiplicative correction.</returns>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.v0(System.Double,System.Double)">
            <summary>
            Computes the additive correction of a symmetrical double-sided truncated Gaussian with unit variance.
            </summary>
            <param name="t">The mean of the non-truncated Gaussian.</param>
            <param name="epsilon">The truncation point.</param>
            <returns>The additive correction.</returns>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.w0(System.Double,System.Double)">
            <summary>
            Computes the multiplicative correction of a symmetrical double-sided truncated Gaussian with unit variance.
            </summary>
            <param name="t">The mean of the non-truncated Gaussian.</param>
            <param name="epsilon">The truncation point.</param>
            <returns>The multiplicative correction.</returns>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.v(System.Double,System.Double,System.Double)">
            <summary>
            Computes the additive correction of a general double-sided truncated Gaussian with unit variance.
            </summary>
            <param name="t">The mean of the non-truncated Gaussian.</param>
            <param name="l">The lower truncation point.</param>
            <param name="u">The upper truncation point.</param>
            <returns>The additive correction.</returns>
            <remarks>This routine has not been tested in all regimes of t for a given l and u.</remarks>
            <exception cref="T:System.ArithmeticException">Thrown if the computation is not numerically stable.</exception>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.w(System.Double,System.Double,System.Double)">
            <summary>
            Computes the multiplicative correction of a general double-sided truncated Gaussian with unit variance.
            </summary>
            <param name="t">The mean of the non-truncated Gaussian.</param>
            <param name="l">The lower truncation point.</param>
            <param name="u">The upper truncation point.</param>
            <returns>The multiplicative correction.</returns>
            <remarks>This routine has not been tested in all regimes of t for a given l and u.</remarks>
            <exception cref="T:System.ArithmeticException">Thrown if the computation is not numerically stable.</exception>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.ComputeNiederreiterSeries(System.Int32)">
            <summary>
            Computes a Niederreither series of coefficients.
            </summary>
            <param name="iNumberOfDimensions">Number of dimensions.</param>
            <returns>A Niederreiter series with as many elements as dimensions.</returns>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.TransformSample(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,System.Double[],MSRC.Ranking.LinearAlgebra.Matrix@,System.Double@,MSRC.Ranking.LinearAlgebra.Matrix@,MSRC.Ranking.LinearAlgebra.Matrix@)">
            <summary>
            Computes the transformed integrand of a multi-variate Gaussian.
            </summary>
            <param name="mu">Mean of the Gaussian.</param>
            <param name="C">Cholesky factor of the covariance of the Gaussian.</param>
            <param name="a">Lower integration boundary.</param>
            <param name="b">Upper integration boundary.</param>
            <param name="dSample">The uniform random sample.</param>
            <param name="tmp">A temporary matrix of the size of <c>M1</c>.</param>
            <param name="M0">The volume sample (zeroth moment).</param>
            <param name="M1">The mean sample (first moment).</param>
            <param name="M2">The second moment sample.</param>
            <remarks>This function is implemented to minimise the number of allocations of memory and may thus be hard to 
            read.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.CalculateTGMoments(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,System.Int32)">
            <summary>
            Computes a multivariate partial Gaussian integral.
            </summary>
            <param name="mu">Mean of the Gaussian distribution.</param>
            <param name="Sigma">Covariance of the Gaussian distribution.</param>
            <param name="a">Lower integration limits.</param>
            <param name="b">Upper integration limits.</param>
            <param name="iMaxNumberOfPoints">Number of quasi-random points.</param>
            <returns>The normalisation constant, mean and second moment matrix of a multivariate Gaussian density between <c>a</c> and <b>b</b>.</returns>
            <remarks>This function implements a variant of the algorithm as described in <i>A. Genz. Numerical Computation of Multivariate 
            Normal Probabilities.</i> 1992 using a quais-random lattice generator based on Niederreiter point sets. However, for one-dimensional
            integrals of a certain sort if resorts to use the fast <c>v</c>, <c>w</c>, <c>v0</c> and <c>w0</c> function.</remarks>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if <c>mu</c>, <c>a</c> or <c>b</c> are not vectors
            or if <c>Sigma</c> is not a square matrix.</exception>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if <c>mu</c>, <c>a</c> or <c>b</c> are not the same number of rows as <c>Sigma</c>.</exception>
            <exception cref="T:System.ArithmeticException">Thrown if the normalisation constant comes out too small.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the number of dimensions is too large (which would lead to unrealiable results).</exception>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.Phi(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,System.Int32)">
            <summary>
            Computes a multivariate partial Gaussian integral.
            </summary>
            <param name="mu">Mean of the Gaussian distribution.</param>
            <param name="Sigma">Covariance of the Gaussian distribution.</param>
            <param name="a">Lower integration limits.</param>
            <param name="b">Upper integration limits.</param>
            <param name="iMaxNumberOfPoints">Number of quasi-random points.</param>
            <returns>The integal of the multivariate Gaussian density between <c>a</c> and <b>b</b>.</returns>
            <remarks>This function implements a variant of the algorithm as described in <i>A. Genz. Numerical Computation of 
            Multivariate Normal Probabilities.</i> 1992. However, fast functions based on <c>erfc</c> are used for one-dimensional
            integrals.</remarks>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if <c>mu</c>, <c>a</c> or <c>b</c> are not vectors
            or if <c>Sigma</c> is not a square matrix.</exception>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if <c>mu</c>, <c>a</c> or <c>b</c> are not the same number of rows as <c>Sigma</c>.</exception>
            <exception cref="T:System.ArithmeticException">Thrown if the normalisation constant comes out too small.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the number of dimensions is too large (which would lead to unrealiable results).</exception>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.CalculateTGAParameters(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,System.Int32)">
            <summary>
            Computes the parameter of the best Gaussian approximation of a multivariate truncated Gaussian.
            </summary>
            <param name="mu">Mean of the Gaussian distribution.</param>
            <param name="Sigma">Covariance of the Gaussian distribution.</param>
            <param name="l">Lower integration limits.</param>
            <param name="u">Upper integration limits.</param>
            <param name="iNumberOfIterations">Number of iterations over the list of integration limits. Usually, a value of 5 - 10 will work fine.</param>
            <returns>The normalisation constant, mean and covariance matrix of the best Gaussian approxiamtion to the truncated multivariate Gaussian density 
            between <c>l</c> and <b>u</b>.</returns>
            <remarks>This function implements the EP algorithm of Thomas P. Minka described in <i>T. P. Minka. A family of algorithms for approximate Bayesian 
            inference.</i> PhD thesis. MIT. 2001. Note that in the case of scalars, the number of iterations is automatically reduced to 1.</remarks>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if <c>mu</c>, <c>l</c> or <c>u</c> are not vectors
            or if <c>Sigma</c> is not a square matrix.</exception>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if <c>mu</c>, <c>l</c> or <c>u</c> are not the same number of rows as <c>Sigma</c>.</exception>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.PhiEP(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,System.Int32)">
            <summary>
            Approximates a multivariate partial Gaussian integral.
            </summary>
            <param name="mu">Mean of the Gaussian distribution.</param>
            <param name="Sigma">Covariance of the Gaussian distribution.</param>
            <param name="l">Lower integration limits.</param>
            <param name="u">Upper integration limits.</param>
            <param name="iNumberOfIterations">Number of iterations over the list of integration limits. Usually, a value of 5 - 10 will work fine.</param>
            <returns>The integal of the multivariate Gaussian density between <c>l</c> and <b>u</b>.</returns>
            <remarks>This function implements the EP algorithm of Thomas P. Minka described in <i>T. P. Minka. A family of algorithms for approximate Bayesian 
            inference.</i> PhD thesis. MIT. 2001. Note that in the case of scalars, the number of iterations is automatically reduced to 1.</remarks>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if <c>mu</c>, <c>l</c> or <c>u</c> are not vectors
            or if <c>Sigma</c> is not a square matrix.</exception>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if <c>mu</c>, <c>l</c> or <c>u</c> are not the same number of rows as <c>Sigma</c>.</exception>
        </member>
        <member name="T:MSRC.Ranking.Numerics.GaussianApproximations.TGMoments">
            <summary>
            A structure holding moments of truncated multi-variate Gaussian. This structure is only used by
            <c>CalculateTGMoments</c>.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Numerics.GaussianApproximations.TGMoments.M0">
            <summary>
            Normalisation constant of the truncated Gaussian.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Numerics.GaussianApproximations.TGMoments.M1">
            <summary>
            Vector of first moments.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Numerics.GaussianApproximations.TGMoments.M2">
            <summary>
            Square matrix of second moments.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.Numerics.GaussianApproximations.TGAParameters">
            <summary>
            A structure holding the parameters of truncated multi-variate Gaussian approximation. This structure is only used by
            <c>CalculateTGAParameters</c>. 
            </summary>
            <remarks>Note that the parameters of a truncated Gaussian approximation are closely related to the moments of a truncated Gaussian. 
            In particular, we have that TGParameters.Z \approx TGMoments.M0, TGParameters.mu \approx TGMoments.M1 and 
            TGParameters.Sigma \approx TGMoments.M2 - TGMoments.M1 * TGMoments.M1.Transpose ().</remarks>
        </member>
        <member name="F:MSRC.Ranking.Numerics.GaussianApproximations.TGAParameters.Z">
            <summary>
            Approximative normalisation constant of the truncated Gaussian.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Numerics.GaussianApproximations.TGAParameters.mu">
            <summary>
            Mean vector of the Gaussian approximation.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Numerics.GaussianApproximations.TGAParameters.Sigma">
            <summary>
            Covariance matrix of the Gaussian approximation.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.LinearAlgebra.MatrixType">
            <summary>
            This enumeration represents the different type of matrices.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixType.RectangularMatrix">
            <summary>
            A rectangular matrix (different number of rows and columns and at least two rows and two columns).
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixType.SquareMatrix">
            <summary>
            A square matrix (same number of rows and columns and at least two rows).
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixType.RowVector">
            <summary>
            A row vector (One row and at least two columns).
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixType.ColumnVector">
            <summary>
            A column vector (One column and at least two rows).
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixType.Scalar">
            <summary>
            A scalar (One row and one column).
            </summary>
        </member>
        <member name="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">
            <summary>
            This is an exception which is thrown whenever the matrix type does not agree.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixTypeException.m_aActualMatrixType">
            <summary>
            Actual type of matrix.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixTypeException.m_aExpectedMatrixType">
            <summary>
            Expected type of matrix.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.MatrixTypeException.#ctor(MSRC.Ranking.LinearAlgebra.MatrixType,MSRC.Ranking.LinearAlgebra.MatrixType)">
            <summary>
            Constructs a new exception for matrix type problems.
            </summary>
            <param name="aActualMatrixType">Actual type of the matrix.</param>
            <param name="aExpectedMatrixType">Expected type of the matrix.</param>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.MatrixTypeException.ActualMatrixType">
            <summary>
            Actual type of the matrix.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.MatrixTypeException.ExpectedMatrixType">
            <summary>
            Expected type of the matrix.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">
            <summary>
            This is an exception which is thrown whenever the matrix size does not agree.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixSizeException.m_iActualNoRows">
            <summary>
            Actual number of rows.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixSizeException.m_iActualNoColumns">
            <summary>
            Actual number of columns.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixSizeException.m_iExpectedNoRows">
            <summary>
            Expected number of rows.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixSizeException.m_iExpectedNoColumns">
            <summary>
            Expected number of columns.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.MatrixSizeException.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new exception for matrix size problems.
            </summary>
            <param name="iActualNoRows">Actual number of rows.</param>
            <param name="iActualNoColumns">Actual number of columns.</param>
            <param name="iExpectedNoRows">Expected number of rows.</param>
            <param name="iExpectedNoColumns">Expected number of columns.</param>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.MatrixSizeException.ActualNoRows">
            <summary>
            Actual number of rows.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.MatrixSizeException.ActualNoColumns">
            <summary>
            Actual number of columns.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.MatrixSizeException.ExpectedNoRows">
            <summary>
            Expected number of rows.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.MatrixSizeException.ExpectedNoColumns">
            <summary>
            Expected number of columns.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.LinearAlgebra.MatrixNonPositiveDefiniteException">
            <summary>
            This is an exception which is thrown whenever the matrix is not positive definite.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.MatrixNonPositiveDefiniteException.#ctor">
            <summary>
            Constructs a new exception for a non-positive definite matrix problem.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.LinearAlgebra.Matrix">
            <summary>
            A light-weight matrix class for  arbitrary sized matrices. Most of these functions are implemented in a 
            straighforward way and are not optimised for any particular target CPU architecture.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.Matrix.m_dData">
            <summary>
            The raw values of the matrix.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.Matrix.m_aType">
            <summary>
            The type of the matrix.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a matrix with zeros entries.
            </summary>
            <param name="iNoRows">Number of rows.</param>
            <param name="iNoColumns">Number of columns.</param>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.#ctor(System.Int32)">
            <summary>
            Constructs a square matrix.
            </summary>
            <param name="iNoRows">Number of rows and columns.</param>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.#ctor(System.Int32,System.Double)">
            <summary>
            Constructs a square diagonal matrix.
            </summary>
            <param name="iNoRows">Number of rows and columns.</param>
            <param name="dDiagonal">The diagonal entry.</param>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.#ctor(System.Double[])">
            <summary>
            Constructs a square diagonal matrix.
            </summary>
            <param name="dDiagonal">The diagonal of the matrix.</param>
            <remarks>This constructor allows different entries on the diagonal of the matrix.</remarks>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.#ctor(MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Constructs a deep copy of a matrix.
            </summary>
            <param name="aMatrix">Matrix to be copied.</param>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.#ctor(System.Double[0:,0:])">
            <summary>
            Constructs a shallow copy of a matrix.
            </summary>
            <param name="dData">Matrix data to be used.</param>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.GetMatrixType">
            <summary>
            Determines the type of the matrix by looking at the number of rows and columns.
            </summary>
            <returns>The type of the matrix.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Equals(System.Object)">
            <summary>
            Compares with another matrix.
            </summary>
            <param name="aMatrix">Matrix A.</param>
            <returns>Returns true if A is equal to the matrix in every element.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.GetHashCode">
            <summary>
            Computes a new hash code for the matrix.
            </summary>
            <returns>The hash code as an integer.</returns>
            <remarks>This function simply computes the products of the number of rows and colums and adds the 
            first element (0,0) of the matrix in order to compute a hash code.</remarks>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.ToString">
            <summary>
            Creates a string representation of the matrix.
            </summary>
            <returns>A string showing the matrix elements.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Implicit(MSRC.Ranking.LinearAlgebra.Matrix)~System.Double[0:,0:]">
            <summary>
            The implicit cast of a matrix into a double array.
            </summary>
            <param name="A">Matrix A.</param>
            <returns>The elements of the matrix A as a double array.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Explicit(MSRC.Ranking.LinearAlgebra.Matrix)~System.Double">
            <summary>
            An explicit cast of a matrix into a double. 
            </summary>
            <param name="A">Matrix A.</param>
            <returns>The only element of the matrix A as a double.</returns>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if the matrix is not a scalar (one row and one column).</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Implicit(System.Double[0:,0:])~MSRC.Ranking.LinearAlgebra.Matrix">
            <summary>
            The implicit case of a double array into a matrix.
            </summary>
            <param name="dData">The double array to be casted.</param>
            <returns>A new matrix object whose <c>Data</c> property points to the double array.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Implicit(System.Double)~MSRC.Ranking.LinearAlgebra.Matrix">
            <summary>
            The implicit cast of a double into a matrix.
            </summary>
            <param name="x">The double to be casted.</param>
            <returns>A 1 x 1 matrix with the only element equal to <c>x</c>.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Negate">
            <summary>
            Negates the matrix.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_UnaryNegation(MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="A">Matrix A.</param>
            <returns>Matrix A negated, that is -A.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Equality(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Compares two matrices.
            </summary>
            <param name="A">Matrix A.</param>
            <param name="B">Matrix B.</param>
            <returns>Returns true if A is equal to B in every element.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Inequality(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Compares two matrices.
            </summary>
            <param name="A">Matrix A.</param>
            <param name="B">Matrix B.</param>
            <returns>Returns true if A is not equal to B in every element.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Add(MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Adds a matrix.
            </summary>
            <param name="A">Matrix to be added.</param>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if the matrix to be added is of different size.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Addition(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="A">Matrix A.</param>
            <param name="B">Matrix B.</param>
            <returns>The matrix sum of A and B, that is A + B.</returns>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if the two matrices are of different size.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Subtract(MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Subtracts a matrix.
            </summary>
            <param name="A">Matrix to be subtracted.</param>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if the matrix to be subtracted is of different size.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Subtraction(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="A">Matrix A.</param>
            <param name="B">Matrix B.</param>
            <returns>Matrix B subtracted from matrix B, that is A - B.</returns>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if the two matrices are of different size.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Multiply(MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Multiplies with a matrix from the right. 
            </summary>
            <param name="A">Matrix to be multiplied from the right.</param>
            <remarks>This will most likely change the size of the matrix.</remarks>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if the number of rows of <c>A</c> does not match the number of columns.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Multiply(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="A">Matrix A.</param>
            <param name="B">Matrix B.</param>
            <returns>Matrix A times matrix B, that is A * B.</returns>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if the number of rows of <c>B</c> does not match the number of columns of <c>A</c>.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Mulitply(System.Double)">
            <summary>
            Multiplies with a scalar, that is, each element of the matrix is multiplied by the scalar.
            </summary>
            <param name="x">The scaling factor.</param>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Multiply(MSRC.Ranking.LinearAlgebra.Matrix,System.Double)">
            <summary>
            Multiplies a matrix with a scalar.
            </summary>
            <param name="A">Matrix A.</param>
            <param name="x">Scalar x.</param>
            <returns>Matrix A times scalar x, that is every element of A is multiplied by x.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Multiply(System.Double,MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Multiplies a scalar with a matrix.
            </summary>
            <param name="x">Scalar x.</param>
            <param name="A">Matrix A.</param>
            <returns>Matrix A times scalar x, that is every element of A is multiplied by x.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Divide(System.Double)">
            <summary>
            Didives by a scalar, that is, every element is divided by the scalar.
            </summary>
            <param name="x">The scalar to be dividing by.</param>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Division(MSRC.Ranking.LinearAlgebra.Matrix,System.Double)">
            <summary>
            Divides a matrix by a scalar.
            </summary>
            <param name="A">Matrix A.</param>
            <param name="x">Scalar x.</param>
            <returns>Matrix A divided by scalar x, that is every element of A is divided by x.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Transpose">
            <summary>
            Transposes the matrix.
            </summary>
            <returns>The transposed matrix.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Cholesky">
            <summary>
            Computes the Cholesky decomposition. 
            </summary>
            <returns>A lower triangular matrix containing the Cholesky decomposition.</returns>
            <remarks>This method does not check for the symmetry.</remarks>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if the matrix is not square.</exception>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixNonPositiveDefiniteException">Thrown if the matrix is not-positive definite.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Inverse">
            <summary>
            Computes the inverse of a square positive definite matrix. 
            </summary>
            <returns>The inverse of the matrix.</returns>
            <remarks>Note that the method does not check for the symmetry.</remarks>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if the matrix is not square.</exception>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixNonPositiveDefiniteException">Thrown if the matrix is not-positive definite.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.InverseCholeskyFactor">
            <summary>
            Computes the inverse of the Cholesky factor of the matrix.  
            </summary>
            <returns>The inverse of the Cholesky factor of the matrix.</returns>
            <remarks>Note that the method does not check for the symmetry.</remarks>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if the matrix is not square.</exception>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixNonPositiveDefiniteException">Thrown if the matrix is not-positive definite.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Determinant">
            <summary>
            Computes the determinant of a positive semidefinite matrix.  
            </summary>
            <returns>The determinant of the matrix.</returns>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if the matrix is not square.</exception>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixNonPositiveDefiniteException">Thrown if the matrix is not-positive definite.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.IsNaN">
            <summary>
            Checks if any element of the matrix is not-a-number.
            </summary>
            <returns>Returns true the matrix contains at least one element that is not-a-number.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.IsInfinity">
            <summary>
            Checks if any element of the matrix is infinity.
            </summary>
            <returns>Returns true the matrix contains at least one element that is infinity.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.ValidVariableName(System.String)">
            <summary>
            Converts a variable name to a valid variable name by changing all invalid characters with an underscore.
            </summary>
            <param name="szName">Variable name</param>
            <returns>A valid MATLAB variable name.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.MatlabDataElement(System.String)">
            <summary>
            Generates a Matlab V5 compatiable data element.
            </summary>
            <param name="szName">Name of the matrix.</param>
            <returns>The byte array that can be used as a Matlab V5 data element (in a stream).</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.MatlabHeader(System.String)">
            <summary>
            Generates a Matlab V5 comptabible header byte array.
            </summary>
            <param name="szCreatorComments">The comments that will go into the header of the Matlab file.</param>
            <returns>The header as a byte array.</returns>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.Type">
            <summary>
            The type of the matrix (based on number of rows and columns).
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.IsRowVector">
            <summary>
            Indicator if the matrix is a row vector.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.IsColumnVector">
            <summary>
            Indicator if the matrix is a column vector.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.IsVector">
            <summary>
            Indicator whether or not the matrix is a vector.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.NoRows">
            <summary>
            Number of rows.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.NoColumns">
            <summary>
            Number of columns.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.NoElements">
            <summary>
            Number of total elements of the matrix.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Element in the zero-based row <c>iRowIndex</c> and zero-based column <c>iColumnIndex</c>.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.Item(System.Int32)">
            <summary>
            Element at position <c>iIndex</c> if the matrix is vector. 
            </summary>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if the matrix is not a vector.</exception>
        </member>
        <member name="T:MSRC.Ranking.RankingSystems.Algorithm">
            <summary>
            Different types of approximation algorithm for the multi-team case.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.Algorithm.GenzAlgorithm">
            <summary>
            Genz' algorithm as described in <i>A. Genz. Numerical Computation of Multivariate 
            Normal Probabilities.</i> 1992.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.Algorithm.EPAlgorithm">
            <summary>
            Gaussian EP algorithm as described in <i>T. P. Minka. A family of algorithms for approximate Bayesian 
            inference.</i> PhD thesis. MIT. 2001.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.Algorithm.EPMessagePassing">
            <summary>
            EP message passing algorithm. This algorithm is two orders of magnitudes faster than <c>EPAlgorithm</c>. 
            </summary>
        </member>
        <member name="T:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem">
            <summary>
            A class that represents the MuSigma ranking system. This class manages a list of player skill lists. 
            Game outcomes will be incorporated by the MuSigma update equation. 
            </summary>
        </member>
        <member name="T:MSRC.Ranking.ProbabilisticRankingSystem">
            <summary>
            The abstract base class that manages a list of player skill lists. A probabilistic ranking system is a ranking system which is
            based on a probabilistic model of the game outcome. Hence, in such a ranking system it is possible to compute the probability of a
            particualr game outcome.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.RankingSystem">
            <summary>
            The abstract base class that manages a list of player skill lists. A ranking system will allow to incorporate a game outcomes 
            an update the inidividual player skills accordingly. Moreover, a ranking system will offer a predicition of the outcome of the 
            game to support matchmaking mechanisms. 
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystem.m_aPlayerSkillsList">
            <summary>
            The list of player skill list.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.RankingSystem.#ctor(MSRC.Ranking.PlayerSkillsList)">
            <summary>
            Constructs a ranking system for a given list of player skill lists.
            </summary>
            <param name="aPlayerSkillsList">A list of player skill lists. If the list is <c>null</c>, a new list of player
            skill lists will be created.</param>
        </member>
        <member name="M:MSRC.Ranking.RankingSystem.#ctor">
            <summary>
            Constructs a ranking system with a new list of player skill lists.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.RankingSystem.ClearPlayerSkills">
            <summary>
            Clears all the chronologically sorted skills of all the players maintained by this ranking system.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.RankingSystem.Update(MSRC.Ranking.Game)">
            <summary>
            Updates the player skills with a particular game.
            </summary>
            <param name="aGame">The game to be incorporated.</param>
            <returns>True, if the update was performed.</returns>
        </member>
        <member name="M:MSRC.Ranking.RankingSystem.PredictedOutcome(MSRC.Ranking.Game)">
            <summary>
            Computes the most likely outcome of a game.
            </summary>
            <param name="aGame">The game for which the outcome should be predicted.</param>
            <returns>The most likely ranking.</returns>
            <remarks>Note that this function ignores the actual game outcome which is contained in the game passed to the method.
            The method is supposed to throw an exception if the outcome cannot be predicted.</remarks>
        </member>
        <member name="M:MSRC.Ranking.RankingSystem.MatchQuality(MSRC.Ranking.Game)">
            <summary>
            Computes the quality of a match.
            </summary>
            <param name="aGame">The game to check.</param>
            <returns>A number between 0 and 1 which indicates the quality of the match (1 is the best possible 
            match and 0 is the worst possible match).</returns>
            <remarks>This function computes the maximum discrepancy between any pair of players using the skills valid 
            at the time of the game. It is conceivable that a derived implementation of this method does a more careful 
            analysis.</remarks>
        </member>
        <member name="M:MSRC.Ranking.RankingSystem.MatchQuality(MSRC.Ranking.Skill,MSRC.Ranking.Skill)">
            <summary>
            Computes the match quality between two players.
            </summary>
            <param name="aPlayer1Skill">Skill of player 1.</param>
            <param name="aPlayer2Skill">Skill of player 2.</param>
            <returns>A number between 0 and 1 which indicates the quality of the match (1 is the best possible 
            match and 0 is the worst possible match).</returns>
        </member>
        <member name="P:MSRC.Ranking.RankingSystem.PlayerSkillsList">
            <summary>
            The list of player skill lists maintained by the ranking system.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.ProbabilisticRankingSystem.#ctor(MSRC.Ranking.PlayerSkillsList)">
            <summary>
            Constructs a probabilistic ranking system for a given list of player skill lists.
            </summary>
            <param name="aPlayerSkillsList">A list of player skill lists. If this list is <c>null</c>, a new list of player
            skill lists will be created.</param>
        </member>
        <member name="M:MSRC.Ranking.ProbabilisticRankingSystem.#ctor">
            <summary>
            Constructs a probabilistic ranking system with a new list of player skill lists.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.ProbabilisticRankingSystem.RankingProbability(MSRC.Ranking.Game,MSRC.Ranking.Ranking[])">
            <summary>
            Computes the probability for some rankings for a given game.
            </summary>
            <param name="aGame">The game for which the ranking probabilities should be computed.</param>
            <param name="aRankings">A list of rankings for which the probability should be computed.</param>
            <returns>The probabilities of the specified rankings for the given game. This method throws an exception if 
            the probabilities cannot be computed.</returns>
        </member>
        <member name="M:MSRC.Ranking.ProbabilisticRankingSystem.Update(MSRC.Ranking.Game)">
            <summary>
            Updates the player skills with a particular game.
            </summary>
            <param name="aGame">The game to be incorporated.</param>
            <returns>True, if the update was performed.</returns>
            <remarks>This method uses the evidence based <c>Update</c> method and should not be overriden!</remarks>
        </member>
        <member name="M:MSRC.Ranking.ProbabilisticRankingSystem.Update(MSRC.Ranking.Game,System.Double@)">
            <summary>
            Updates the player skills with a particular game and computes the evidence of the game.
            </summary>
            <param name="aGame">The game to be incorporated.</param>
            <param name="dEvidence">The evidence of the game (as an output parameter).</param>
            <returns>True, if the update was performed.</returns>
        </member>
        <member name="M:MSRC.Ranking.ProbabilisticRankingSystem.PredictedOutcome(MSRC.Ranking.Game)">
            <summary>
            Computes the most likely game outcome based on the probability for each ranking.
            </summary>
            <param name="aGame">The game for which the outcome should be predicted.</param>
            <returns>The most likely outcome.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the the game has more than two team.</exception>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.m_dBeta">
            <summary>
            The standard deviation of the performance distribution.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.m_dDrawProbability">
            <summary>
            The draw probability between any two teams.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.m_dTau">
            <summary>
            The increase in standard deviation responsible for modelling the dynamics of the skill belief.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.m_iNumberOfIterations">
            <summary>
            The number of iterations of the numerical approximation code.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.m_aApproximationAlgorithm">
            <summary>
            The particular algorithm used.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.m_dPriorMu">
            <summary>
            The mean of the prior skill belief.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.m_dPriorSigma">
            <summary>
            The standard deviation of the prior skill belief.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.#ctor(MSRC.Ranking.PlayerSkillsList,System.Double,System.Double,System.Double,System.Double,System.Double,MSRC.Ranking.RankingSystems.Algorithm,System.Int32)">
            <summary>
            Constructs a new instance of the MuSigma ranking system.
            </summary>
            <param name="aPlayerSkillsList">A list of player skill lists.</param>
            <param name="dPerformanceFactor">The performance in a single game relative to the prior standard deviation.</param>
            <param name="dDrawProbability">The probability that two equally skilled players will draw.</param>
            <param name="dLearningFactor">The change of skill in a single game relative to the prior standard deviation.</param>
            <param name="dNegativeSkillProbability">The prior belief that a player has a negative skill (important for team games).</param>
            <param name="dPriorSigma">The standard deviation of the prior skill belief.</param>
            <param name="aApproximationAlgorithm">The approximation algorithm used.</param>
            <param name="iNumberOfIterations">The number of iterations whenever numerical integration is used.</param>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance of the MuSigma ranking system with an empty player skill list using the EP message 
            passing algorithm.
            </summary>
            <param name="dPerformanceFactor">The performance in a single game relative to the prior standard deviation.</param>
            <param name="dDrawProbability">The probability that two equally skilled players will draw.</param>
            <param name="dLearningFactor">The change of skill in a single game relative to the prior standard deviation.</param>
            <param name="dNegativeSkillProbability">The prior belief that a player has a negative skill (important for team games).</param>
            <param name="dPriorSigma">The standard deviation of the prior skill belief.</param>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance of the MuSigma ranking system with an empty player skill list using the 
            EP message passing algorithm and a unit variance prior skill belief with ~0.1% chance of negative skills.
            </summary>
            <param name="dPerformanceFactor">The performance in a single game relative to the prior standard deviation.</param>
            <param name="dDrawProbability">The probability that two equally skilled players will draw.</param>
            <param name="dLearningFactor">The change of skill in a single game relative to the prior standard deviation.</param>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.#ctor">
            <summary>
            Constructs a new instance of the MuSigma ranking system with an empty player skill list using the EP 
            message passing algorithm and a unit variance prior skill belief with ~0.1% chance of negative skills. 
            The performance factor is set to 50%, the draw probability to 10% and the learning factor is at 1%.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.ComputeInternalGameRepresentation(MSRC.Ranking.Game,MSRC.Ranking.Ranking)">
            <summary>
            Computes the internal game representation for a particular ranking.
            </summary>
            <param name="aGame">The game to be represented.</param>
            <param name="aRanking">The ranking of the game.</param>
            <returns>The internal game representation.</returns>
            <exception cref="T:System.Exception">Thrown if the game ends in a draw but the draw probability was set to zero.</exception>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.GetSkillBelief(MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalGameRepresentation,System.DateTime)">
            <summary>
            Gets the skill beliefs of all players participating in a game.
            </summary>
            <param name="aInternalGame">Internal representation of the game.</param>
            <param name="aDate">Date at which we would like to know the skill beliefs. If the time is at zero ticks, the latest 
            skill belief will be used.</param>
            <returns>An internal representation of the skill belief.</returns>
            <remarks>Note that this function already adds the amount of \tau^2 if it is queried for the latest skill beliefs.</remarks>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.PartialUpdate(MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian,MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian,System.Double)">
            <summary>
            Computes the new skill with partial updates.
            </summary>
            <param name="aBeforeUpdate">Gaussian skill belief before update.</param>
            <param name="aAfterUpdate">Gaussian skill belief after update.</param>
            <param name="dWeight">Partial weighting factor.</param>
            <returns>The interpolated skill.</returns>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Update(MSRC.Ranking.Game,System.Double@)">
            <summary>
            Updates the player skills given a particular game. This the general update equation for an arbitrary number
            of teams and players per team. This function also computes the evidence of this particular game.
            </summary>
            <param name="aGame">The game to be incorporated.</param>
            <param name="dEvidence">The evidence of the game (as an output parameter).</param>
            <exception cref="T:System.ArithmeticException">Thrown if some of the resulting MuSigma values would be NaN or if
            any other non-stable condition occurs.</exception>
            <returns>True is the update was performed.</returns>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.EPMessagePassingUpdate(MSRC.Ranking.Game)">
            <summary>
            Updates the player skills given a particular game. This implementation uses message passing and is two
            orders of magnitudes faster than the general the general update equation for an arbitrary number
            of teams and players per team. 
            </summary>
            <param name="aGame">The game to be incorporated.</param>
            <exception cref="T:System.ArithmeticException">Thrown if some of the resulting MuSigma values would be NaN or if
            any other non-stable condition occurs.</exception>
            <returns>True is the update was performed.</returns>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.UpdateTeamPerformance(MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian[],MSRC.Ranking.Ranking,System.Int32[],System.Double[],System.Double)">
            <summary>
            Implements the chain schedule EP updates.
            </summary>
            <param name="aTeamPerformances">The prior team performances.</param>
            <param name="aRanking">The ranking outcome of the game.</param>
            <param name="iIndex">The pre-computed re-ordering of the teams.</param>
            <param name="dEpsilon">The draw margins between any pair of teams.</param>
            <param name="dConvergenceTolerance">The precision at which to stop the update.</param>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.RankingProbability(MSRC.Ranking.Game,MSRC.Ranking.Ranking[])">
            <summary>
            Computes the marginalised probability for some rankings for a given game.
            </summary>
            <param name="aGame">The game for which the ranking probabilities should be computed.</param>
            <param name="aRankings">A list of rankings for which the probability should be computed.</param>
            <returns>The probabilities of the specified rankings for the given game.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the probabilities cannot be computed.</exception>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.MatchQuality(MSRC.Ranking.Game)">
            <summary>
            Computes the quality of a match.
            </summary>
            <param name="aGame">The game to check.</param>
            <returns>A number between 0 and 1 which indicates the quality of the match (1 is the best possible 
            match and 0 is the worst possible match).</returns>
            <remarks>This functions computes the (normalised) probability of a joint draw of all teams.</remarks>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.MatchQuality(MSRC.Ranking.Skill,MSRC.Ranking.Skill)">
            <summary>
            Computes the match quality between two players in the MuSigma system.
            </summary>
            <param name="aPlayer1Skill">MuSigma skill of player 1.</param>
            <param name="aPlayer2Skill">MuSigma skill of player 2.</param>
            <returns>A number between 0 and 1 which indicates the quality of the match (1 is the best possible 
            match and 0 is the worst possible match).</returns>
            <remarks>This function computes the (normalised) probability of drawing.</remarks>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Beta">
            <summary>
            The standard deviation of the performance distribution.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the standard deviation is set to a negative value.</exception>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.DrawProbability">
            <summary>
            The draw probability between two equally skilled teams. 
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the draw probability is outside of [0,1).</exception>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Tau">
            <summary>
            The increase in standard deviation of the skill belief (dynamics prior).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the standard deviation in the skill belief is set to a negative value.</exception>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.NumberOfIterations">
            <summary>
            Number of iterations of the numerical approximation code.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the number of iterations is smaller than 20.</exception>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.ApproximationAlgorithm">
            <summary>
            Approximation algorithm for the multi-team and multi-player case.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.PriorMu">
            <summary>
            The mean of the prior skill belief.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.PriorSigma">
            <summary>
            The standard deviation of the prior skill belief.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the standard deviation is set to a negative value.</exception>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.PerformanceFactor">
            <summary>
            The factor of performance variation relative to the prior standard deviation. A value close to zero
            inidicates that the performance in a single game is varying little around the actual skill of the players.
            This value should usually be between 0 and 1. Setting this property changes <seealso cref="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Beta"/> for the current value
            of <seealso cref="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.PriorSigma"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the performance factor is set to a negative value.</exception>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.LearningFactor">
            <summary>
            The factor of skill point variation relative to the prior standard deviation. A value close to zero
            inidicates that the true skill in a single game is varying little. This value should be very small; a value
            of more than 0.5 means that the true skill can change up/down by an entire prior standard deviation in a single 
            game. Setting this property changes <seealso cref="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Tau"/> for the current value of <seealso cref="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.PriorSigma"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the learning factor is set to a negative value.</exception>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.NegativeSkillProbability">
            <summary>
            The probability that a player has negative skill points. This value should be extremely close to zero. Setting 
            this property changes <seealso cref="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.PriorMu"/> for the current value of <seealso cref="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.PriorSigma"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the negative skill probability is set to a value outside (0,1].</exception>
        </member>
        <member name="T:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalGameRepresentation">
            <summary>
            This struct holds the internal representation of a game in terms of matrices.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalGameRepresentation.A">
            <summary>
            A matrix with as many rows as players and as many column are there are teams (minus one).
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalGameRepresentation.a">
            <summary>
            The lower integration limits.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalGameRepresentation.b">
            <summary>
            The upper integration limits.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalGameRepresentation.updateFactors">
            <summary>
            The update factors.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalGameRepresentation.iIndexToPlayerID">
            <summary>
            A mapping from the index to the global player ID.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalSkillBelief.mu">
            <summary>
            Means of skill beliefs.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalSkillBelief.Sigma">
            <summary>
            Covariance matrix  of skill beliefs.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.m_dPrecisionMean">
            <summary>
            The precision times the mean of the Gaussian.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.m_dPrecision">
            <summary>
            The precision of the Gaussian.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a Gaussian.
            </summary>
            <param name="dPrecisionMean">Precision times the mean of the Gaussian</param>
            <param name="dPrecison">Precision of the Gaussian.</param>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.op_Multiply(MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian,MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian)">
            <summary>
            Multiplies two Gaussians.
            </summary>
            <param name="D1">First Factor.</param>
            <param name="D2">Second Factor.</param>
            <returns>The product of the two Gaussians.</returns>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.op_Division(MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian,MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian)">
            <summary>
            Divides two Gaussians.
            </summary>
            <param name="D1">Numerator Gaussian.</param>
            <param name="D2">Denominator Gaussian.</param>
            <returns>The division of the two Gaussians.</returns>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.op_Subtraction(MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian,MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian)">
            <summary>
            Computes the absolute difference between two Gaussians.
            </summary>
            <param name="D1">First Gaussian.</param>
            <param name="D2">Second Gaussian.</param>
            <returns>The absolute deviation of the two Gaussians in terms of their parameters.</returns>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.Mean">
            <summary>
            The mean of a Gaussian.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.PrecisionMean">
            <summary>
            The precision times the mean of the Gaussian.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.Variance">
            <summary>
            The variance of a Gaussian.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.StdDev">
            <summary>
            The standard deviation of a Gaussian.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.Precision">
            <summary>
            The precision of a Gaussian.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.ChainScheduleEntry">
            <summary>
            This type is used to denote which factors/messages to update in a chain schedule
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.ChainScheduleEntry.DifferenceFactor">
            <summary>
            If true, the difference factor is updated; otherwise the ranking factor.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.ChainScheduleEntry.Factor">
            <summary>
            The factor index.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.ChainScheduleEntry.Message">
            <summary>
            The message index.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.Skills.MuSigmaSkill">
            <summary>
            A class to represent the skill belief in the MuSigma system, that is, the parameters \mu (mean) and \sigma (standard deviation) of 
            the Gaussian skill belief.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.Skill">
            <summary>
            Abstract base class of all skills. Since we are interested in rankings, each skill must be convertible into a (skill) level 
            and a more fine-grained skill point measure. For example, the number of kills, the total ammount of experience points, etc. are valid 
            skill measures. Since we have both levels and skill points, a fractional level will tell us the fractional amount of difference 
            between the level and the skill points.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.Skill.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.Skill.GetLevel(System.Double)">
            <summary>
            A skill level of the player between 0 and 50.
            </summary>
            <param name="dScaling">Scaling factor of the points to map it to levels.</param>
            <returns>A level between 0 and 50.</returns>
            <remarks>Levels are the broad version of the skill points.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Skill.GetFractionalLevel(System.Double)">
            <summary>
            The fractional difference between the level and the points. This value should always be between 0 and 1.
            </summary>
            <returns>The fractional part of the skill points into the current level.</returns>
        </member>
        <member name="P:MSRC.Ranking.Skill.Points">
            <summary>
            The skill points of the player. 
            </summary>
            <remarks>Skill points are the exact, fine-grained summary of skill.</remarks>
        </member>
        <member name="F:MSRC.Ranking.Skills.MuSigmaSkill.m_dMu">
            <summary>
            The mean of the skill belief.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Skills.MuSigmaSkill.m_dSigma">
            <summary>
            The standard deviation of the skill belief.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.Skills.MuSigmaSkill.#ctor(System.Double,System.Double)">
            <summary>
            Constructor which initialises mean and standard deviation of the skill belief.
            </summary>
            <param name="dMu">Mean of the skill belief.</param>
            <param name="dSigma">Standard deviation of the skill belief.</param>
        </member>
        <member name="M:MSRC.Ranking.Skills.MuSigmaSkill.GetLevel(System.Double)">
            <summary>
            Skill level of the player. The skill level is obtained by mutliplying the skill points by dScaling and making 
            sure it never gets negative or above 50.
            </summary>
            <param name="dScaling">A scaling factor that is applied to the MuSigma skill points.</param>
            <returns>The level between 0 and 50.</returns>
        </member>
        <member name="M:MSRC.Ranking.Skills.MuSigmaSkill.GetFractionalLevel(System.Double)">
            <summary>
            Fractional skill level of the player.
            </summary>
            <param name="dScaling">A scaling factor that is applied to the MuSigma skill points.</param>
            <returns>The fractional part of the skill points into the level.</returns>
        </member>
        <member name="P:MSRC.Ranking.Skills.MuSigmaSkill.Mu">
            <summary>
            The mean of the skill belief.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Skills.MuSigmaSkill.Sigma">
            <summary>
            The standard deviation of the skill belief.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Skills.MuSigmaSkill.Points">
            <summary>
            Skill points of the player. 
            </summary>
            <remarks>The skill points of the player is the lower 99% quantile of the skill belief. This is a very conservative 
            estimate of the true skill of a player and should always lower bound the true skill.</remarks>
        </member>
        <member name="T:MSRC.Ranking.PlayerSkills">
            <summary>
            A class which manages a chronological series of skills for a player. The date of a skill 
            will mean that the skill is valid until this date (including it) but nothing will be known 
            afterwards. Note that this class will only allow inserting new skills <c>after</c> the last 
            inserted skill. 
            </summary>
        </member>
        <member name="F:MSRC.Ranking.PlayerSkills.m_aPlayerSkillList">
            <summary>
            A variable sized list of skills.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.PlayerSkills.m_aDatesList">
            <summary>
            A variable sized list of dates at which the skills are valid.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.PlayerSkills.m_iMaxLength">
            <summary>
            The maximal length of the array lists. 
            </summary>
        </member>
        <member name="F:MSRC.Ranking.PlayerSkills.m_iCurrentElementIndex">
            <summary>
            The index of the current element.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkills.#ctor">
            <summary>
            Construcuts a variable sized list of skills of given maximal length.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkills.#ctor(System.Int32)">
            <summary>
            Construcuts a variable sized list of skills of given maximal length.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the skill list is shorter than two elements.</exception>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkills.AddSkill(MSRC.Ranking.Skill,System.DateTime)">
            <summary>
            Adds a new skill valid at a specified date.
            </summary>
            <param name="aSkill">The new skill.</param>
            <param name="aDate">Time at which the skill is valid.</param>
            <remarks>The date of a skill will mean that the skill is valid until this date (including it) but 
            nothing will be known afterwards.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <c>aDate</c>is before or at the latest inserted skill time.</exception>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkills.Clear">
            <summary>
            Clears (empties) the list of player skill.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkills.GetLatestSkill(System.DateTime)">
            <summary>
            Gets the latest skill until (and including) a specific date.
            </summary>
            <param name="aDate">The target date.</param>
            <returns>The skill that is nearest in the past to the target data or null if there is no skill.</returns>
        </member>
        <member name="P:MSRC.Ranking.PlayerSkills.LatestSkill">
            <summary>
            The latest skill (or null if the list of skills is empty).
            </summary>
        </member>
        <member name="P:MSRC.Ranking.PlayerSkills.LatestDate">
            <summary>
            The latest date (or 0 ticks if the list of skills is empty).
            </summary>
        </member>
        <member name="P:MSRC.Ranking.PlayerSkills.NumberOfSkills">
            <summary>
            Total number of skills.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.PlayerSkills.Skills">
            <summary>
            The list of skills sorted by chronologically.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.PlayerSkills.Dates">
            <summary>
            The sorted list of dates.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.PlayerSkillsList">
            <summary>
            A class that manages list of skills indexed by players. Each player will be identified by a unqiue player ID. This
            list is managing a chronologically sorted list of skills for each player. The PlayerSkills class and this class should not be confused: 
            Whereas the PlayerSkills class manages all skills of a single player in time, this class manages a list of PlayerSkills for all players.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.PlayerSkillsList.m_aSkillsList">
            <summary>
            A variable sized mapping between player IDs and player skills.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkillsList.#ctor">
            <summary>
            Constructs a variable sized list of skill lists.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkillsList.Clear">
            <summary>
            Clears (empties) the list of skill lists.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkillsList.ClearPlayerSkills">
            <summary>
            Clears (empties) the chronologically sorted list of skills for each player but retains
            its own internal list of skill lists.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkillsList.AddPlayerSkills(MSRC.Ranking.PlayerSkills,System.Int32)">
            <summary>
            Adds a the chronologically sorted list of skills for a new player with a specified unique player index.
            </summary>
            <param name="aPlayerSkills">A chronologically sorted list of skills for the player.</param>
            <param name="iPlayerID">The unique player ID.</param>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkillsList.GetPlayerSkills(System.Int32)">
            <summary>
            Gets the list of skills for a given player ID.
            </summary>
            <param name="iPlayerID">The unique player ID.</param>
            <returns>The chronologically sorted list of skills for the player with the specified ID or null if 
            the player does not exists.</returns>
        </member>
        <member name="T:MSRC.Ranking.Ranking">
            <summary>
            A class that represents a ranking between n elements. In this class, rank 1 is assumed to be the highest rank. Moreover, it is possible
            that two elements are on the same rank. In this case, no rank gap is introduced; a valid ranking is thus 1,1,2,3 instead of 1,1,3,4.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Ranking.m_iRanks">
            <summary>
            The ranks of each element. Note that the ranks will always be between 1 and m_iRanks.Length.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.Ranking.#ctor(System.Int32)">
            <summary>
            Constructs an identity ranking between a specified number of elements. The first element will be of highest rank and
            the last element will be of lowest rank.
            </summary>
            <param name="iNumberOfElements">Number of elements.</param>
        </member>
        <member name="M:MSRC.Ranking.Ranking.#ctor(System.Int32[])">
            <summary>
            Constructs a ranking based on the values given in an vector of nunbers.
            </summary>
            <param name="iElements">A list of integers.</param>
            <remarks>This method will have to call sorting routines so it may become slow when passed a long list of integers!</remarks>
        </member>
        <member name="M:MSRC.Ranking.Ranking.Factorial(System.Int32)">
            <summary>
            Computes the factorial of n.
            </summary>
            <param name="n">The parameter <c>n</c>.</param>
            <returns>The factorial of <c>n</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <c>n</c> is too large to represent n! as a long.</exception>
        </member>
        <member name="M:MSRC.Ranking.Ranking.GetWinner(System.Int32,System.Int32)">
            <summary>
            Compares the rank of two elements.
            </summary>
            <param name="i">Index of the first element.</param>
            <param name="j">Index of the second element.</param>
            <returns>Returns +1 is the first element is of higher rank than the second element, -1 if the 
            second element is of higher rank than the first element, or 0 if both elements are of same rank.</returns>
        </member>
        <member name="M:MSRC.Ranking.Ranking.Difference(MSRC.Ranking.Ranking)">
            <summary>
            Computes the difference to another ranking.
            </summary>
            <param name="aRanking">Ranking to be compared with.</param>
            <returns>A value between 0 and 1 indicating the difference between the two rankings.</returns>
            <remarks>The ranking difference will be computed as the fraction of pairs of elements where the two rankings disagree. This
            can be seen as the fractional difference between the number of swapping operations that bubble sort would take to sort each
            of the two rankings.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the rankings differ in the number of elements.</exception>
        </member>
        <member name="M:MSRC.Ranking.Ranking.Sort(System.Int32[],System.Int32[])">
            <summary>
            Bubble sort of a list of items relative to a list of keys. 
            </summary>
            <param name="iKeys">List of keys (this will be sorted in ascending order).</param>
            <param name="iItems">List of items (this will be sorted in ascending order relative to the list of keys).</param>
            <remarks>This sort is slow but stable (as opposed to <seealso cref="M:System.Array.Sort(System.Array,System.Array)"/>.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Ranking.Sort(System.Int32[])">
            <summary>
            Bubble sort of a list of keys. 
            </summary>
            <param name="iKeys">List of keys (this will be sorted in ascending order).</param>
            <remarks>This sort is slow but stable (as opposed to <seealso cref="M:System.Array.Sort(System.Array,System.Array)"/>.</remarks>
        </member>
        <member name="P:MSRC.Ranking.Ranking.Indicies">
            <summary>
            Zero-based indicies which reflect the rankings.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Ranking.NumberOfElements">
            <summary>
            Number of elements in the ranking.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Ranking.NumberOfEquivalenceClasses">
            <summary>
            Number of equivalent rankings.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.Team">
            <summary>
            A class to represent a team of players together with their scores, the fraction of total game length that the player 
            participated and the amount by which the players's skill should be updated. Each player will be represented by a 
            unique integer ID. The score will be an integer value. The fraction of game time will be a double value between
            0 and 1. The amount by which the players's skill should be updated will be a double value between 0 and 1.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Team.m_aPlayerID">
            <summary>
            The variable size list of player ID's that form the team.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Team.m_aScore">
            <summary>
            The variable size list of player scores for each player on the team. 
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Team.m_aGameTimeFraction">
            <summary>
            The variable size list of player's fraction of the total game time that they participated.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Team.m_aUpdateFactors">
            <summary>
            The variable size list of player's update factors.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.Team.#ctor(System.Int32)">
            <summary>
            Construcuts a new team with a given maximal number of players.
            </summary>
            <param name="iMaxNumberOfPlayers">Maximal number of players.</param>
            <remarks>If more than the specified number of players are added an exception will be thrown.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Team.#ctor">
            <summary>
            Construcuts a new team with a variable number of players.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.Team.AddPlayer(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Adds a new player to the team.
            </summary>
            <param name="iPlayerID">Player ID of the new player.</param>
            <param name="iScore">Score of the new player.</param>
            <param name="dGameTimeFraction">Fraction of total game length that the player participated.</param>
            <param name="dUpdateFactor">Update factor for this player.</param>
            <returns>The player index of the added player.</returns>
            <remarks>The player index must not be confused with the player ID. The player index is a zero-based
            internal index used by this class.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Team.AddPlayer(System.Int32,System.Int32,System.Double)">
            <summary>
            Adds a new player to the team.
            </summary>
            <param name="iPlayerID">Player ID of the new player.</param>
            <param name="iScore">Score of the new player.</param>
            <param name="dGameTimeFraction">Fraction of total game length that the player participated.</param>
            <returns>The player index of the added player.</returns>
            <remarks>The player index must not be confused with the player ID. The player index is a zero-based
            internal index used by this class. The update factor is set to 100%.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Team.AddPlayer(System.Int32,System.Int32)">
            <summary>
            Adds a new player to the team.
            </summary>
            <param name="iPlayerID">Player ID of the new player.</param>
            <param name="iScore">Score of the new player.</param>
            <returns>The player index of the added player.</returns>
            <remarks>The player index must not be confused with the player ID. The player index is a zero-based
            internal index used by this class. The fraction of total game length of participation and the update
            factor are set to 100%.
            </remarks>
        </member>
        <member name="M:MSRC.Ranking.Team.GetPlayerID(System.Int32)">
            <summary>
            Get the player ID for a player at specified index.
            </summary>
            <param name="iPlayer">The player index.</param>
            <returns>The global player ID or -1 if the index is out of range.</returns>
            <remarks>The player index must not be confused with the player ID. The player index is a zero-based
            internal index used by this class and increases everytime a player is added.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Team.GetPlayerScore(System.Int32)">
            <summary>
            Gets the score for the player at a specified index.
            </summary>
            <param name="iPlayer">The player index.</param>
            <returns>The score of the player.</returns>
            <remarks>The player index must not be confused with the player ID. The player index is a zero-based
            internal index used by this class and increases everytime a player is added.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the player index is out of range.</exception>
        </member>
        <member name="M:MSRC.Ranking.Team.GetPlayerGameTimeFraction(System.Int32)">
            <summary>
            Gets the fraction of game length that the player at a specified index participated.
            </summary>
            <param name="iPlayer">The player index.</param>
            <returns>The fraction of total game time of participation.</returns>
            <remarks>The player index must not be confused with the player ID. The player index is a zero-based
            internal index used by this class and increases everytime a player is added.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the player index is out of range.</exception>
        </member>
        <member name="M:MSRC.Ranking.Team.GetUpdateFactor(System.Int32)">
            <summary>
            Gets the update factor of a player.
            </summary>
            <param name="iPlayer">The player index.</param>
            <returns>The update factor.</returns>
            <remarks>The player index must not be confused with the player ID. The player index is a zero-based
            internal index used by this class and increases everytime a player is added.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the player index is out of range.</exception>
        </member>
        <member name="P:MSRC.Ranking.Team.NumberOfPlayers">
            <summary>
            Total number of players in the team.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Team.TeamScore">
            <summary>
            Score of the team.
            </summary>
            <remarks>The score of a team is always the the sum of the scores of all players in the team.</remarks>
        </member>
        <member name="P:MSRC.Ranking.Team.PlayerIDs">
            <summary>
            All player IDs for the entire team.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Team.PlayerScores">
            <summary>
            Scores for every player on the team.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Team.GameTimeFractions">
            <summary>
            Fraction of game length that each player has participated.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Team.UpdateFactors">
            <summary>
            Update factors for each player.
            </summary>
        </member>
        <member name="T:xonline.common.stfutil.AccountsUtil.CCNumber">
             <summary>
             *** FOR INTERNAL MICROSOFT TEST ONLY ***
             This file will generate and validate credit card numbers based on the checksum.
             The credit card numbers created by this class are for internal test only. They
             will pass the checksum requirement but they are NOT real credit cards and they
             are useless in production or outside of Microsoft.
             NEVER attempt to use these cards in production or outside of Microsoft. You will
             not be able to purchase anything and you will be committing FRAUD.
             Immediately upon completion of testing, you must discard the credit card number.
            
             Vendors under NDA can also use these cards for test purposes only. This generator
             should not used outside of the MS network.
             </summary>
        </member>
        <member name="T:xonline.common.stfutil.DirectDebitRandomizer">
            <summary>
            This class provides properties to generate random credit card numbers
            </summary>
        </member>
        <member name="M:xonline.common.stfutil.DirectDebitRandomizer.#ctor">
            <summary>
            Default constructor - assumes France for the direct debit country
            </summary>
        </member>
        <member name="M:xonline.common.stfutil.DirectDebitRandomizer.#ctor(System.String)">
            <summary>
            Uses the country provided to randomize on
            </summary>
        </member>
        <member name="M:xonline.common.stfutil.DirectDebitRandomizer.#ctor(System.String,System.String)">
            <summary>
            Uses the country provided to randomize on
            </summary>
        </member>
        <member name="M:xonline.common.stfutil.DirectDebitRandomizer.Randomize">
            <summary>
            Generates a random direct debit account number, bank code, branch code, etc.
            These values are in the various properties of this class and are synched with each other to provide a valid direct debit account.
            </summary>
        </member>
        <member name="M:xonline.common.stfutil.DirectDebitRandomizer.RandomizeDirectDebitValues">
            <summary>
            Generates a random direct debit account number, bank code, branch code, etc.
            These values are in the various properties of this class and are synched with each other to provide a valid direct debit account.
            </summary>
        </member>
        <member name="M:xonline.common.stfutil.DirectDebitRandomizer.GetCheckDigitsForFranceAccount">
            <summary>
            Returns the Check Digits value based on the algorithm for a French direct debit account.
            </summary>
            <returns></returns>
        </member>
        <member name="P:xonline.common.stfutil.DirectDebitRandomizer.AccountNumber">
            <summary>
            The account number of the direct debit account
            </summary>
        </member>
        <member name="P:xonline.common.stfutil.DirectDebitRandomizer.AccountNumberLastFour">
            <summary>
            The last four digits of the account number
            </summary>
        </member>
        <member name="P:xonline.common.stfutil.DirectDebitRandomizer.BankCode">
            <summary>
            The bank code of the direct debit account
            </summary>
        </member>
        <member name="P:xonline.common.stfutil.DirectDebitRandomizer.BranchCode">
            <summary>
            The branch code of the direct debit account
            </summary>
        </member>
        <member name="P:xonline.common.stfutil.DirectDebitRandomizer.CheckDigits">
            <summary>
            The checksum of the direct debit account
            </summary>
        </member>
        <member name="P:xonline.common.stfutil.DirectDebitRandomizer.Country">
            <summary>
            The country of the direct debit account
            </summary>
        </member>
        <member name="P:xonline.common.stfutil.DirectDebitRandomizer.Algorithm">
            <summary>
            Alogrithm used to generate acct number
            </summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.Reflect">
            <summary>Standard reflection response.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.ResponseWait">
            <summary>Sleeps for param ms.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.ThrowUnhandledException">
            <summary>Throws an unhandled exception for IIS to catch.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.Exit">
            <summary>Call the Exit function, killing the IIS process (maybe).</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.ReturnStatus">
            <summary>Responds with the status code param.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.NoResponse">
            <summary>Does not send a response.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.ReflectHeaders">
            <summary>Reflects the headers from the request into the response headers.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.OutputBody">
            <summary>The response body will be param bytes.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.Stress">
            <summary>A quick response that only contains the URL and query string.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.ResponseXMLContentType">
            <summary>Changes the response to text/xml content type.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.AuthSGNoAAInfo">
            <summary>Does not do the AAInfo lookups for the AuthSG specifics.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.ReturnStatusAndResponseBody">
            <summary>Responds with the status code param.  Also place specific content in the response body.</summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LiveBVT\obj\i386\LiveBVT.csproj.FileListAbsolute.txt ===
j:\xonline_main\private\test\stftests\livebvt\obj\i386\ResolveAssemblyReference.cache
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LiveBVT\objd\i386\LiveBVT.csproj.FileListAbsolute.txt ===
j:\xonline_main\private\test\stftests\livebvt\objd\i386\ResolveAssemblyReference.cache
j:\xonline_main\target\debug\i386\LiveBVT\LiveBVT.dll
j:\xonline_main\target\debug\i386\LiveBVT\LiveBVT.pdb
j:\xonline_main\private\test\stftests\livebvt\objd\i386\LiveBVT.dll
j:\xonline_main\private\test\stftests\livebvt\objd\i386\LiveBVT.pdb
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LiveBVT\SqlScriptsToInstallBackend\README.txt ===
To install the back end for the LiveBVTs:
1.Pick the sql server of your choice for this backend.
2.Run CreateServicesTable.sql on this server
3.Run CreateResolutionHistoryTable.sql on this server.
4.Modify InsertServicesData.cmd to add a -s and the name of the server
5.Run InsertServicesData.cmd to bcp in the data.
6.Modify the string in RegDB.cs to point to this server.

Note this backend is really two tables, one of them prepopulated with the names of the services for easy translation.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LiveContentTest\LiveContentTest.xml ===
<?xml version="1.0" encoding="utf-8" ?> 
<stf>
    <LiveContentTest>
        <DefaultToolsPath>d:\webroot\xbltools</DefaultToolsPath>
        <InputFilePath>.\InputFiles\LiveContent</InputFilePath>
	<LiveContentExe>LiveContent.exe</LiveContentExe>
	<LiveOfferExe>LiveOffer.exe</LiveOfferExe>
    </LiveContentTest>
</stf>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\libd\i386\CTFCore.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CTFCore</name>
    </assembly>
    <members>
        <member name="T:MS.Swi.FCLCoreComponentAttribute">
            <summary>
            This marks the component as part of the FCL core. This should NOT be used by anyone except
            SWI. For everyone else, use the MS.Swi.InstallationManagementAttribute
            </summary>
        </member>
        <member name="T:MS.Swi.Reflection">
            <summary>
            General reflection helper functions, grouped to prevent code duplication
            </summary>
        </member>
        <member name="M:MS.Swi.Reflection.#cctor">
            <summary>
            Add bridging support for loaded assemblies in the LoadFrom() domain being called by Assemblies in the
            Load() domain.
            </summary>
        </member>
        <member name="M:MS.Swi.Reflection.ResolveMissingAssembly(System.Object,System.ResolveEventArgs)">
            <summary>
            Bridge the LoadFrom and Load contexts by searching the whole set of loaded assemblies looking for
            the assembly to resolve
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.Reflection.#ctor">
            <summary>
            There are no valid Reflection objects
            </summary>
        </member>
        <member name="M:MS.Swi.Reflection.LoadAssembliesFromDirectory(System.String)">
            <summary>
            Load all valid managed assemblies in the specified directory
            </summary>
            <param name="directoryPath">The specified directory</param>
            <returns>True if we loaded any assemblies, false if not</returns>
        </member>
        <member name="M:MS.Swi.Reflection.FindClass(System.String)">
            <summary>
            Search all loaded assemblies for the specified classname
            </summary>
            <param name="className">The full, case sensitive name</param>
            <returns>The matching type, or null</returns>
        </member>
        <member name="M:MS.Swi.Reflection.FindClass(System.String,System.String)">
            <summary>
            Search all loaded assemblies for the specified classname. Note that this does NOT
            limit itself to public classes, because we are asking for the class by name.
            </summary>
            <param name="className">The full, case sensitive name</param>
            <param name="requiredInterface">The required interface, or null, if no interface is required</param>
            <returns>The matching type, or null</returns>
        </member>
        <member name="M:MS.Swi.Reflection.FindClasses(System.String,System.Type)">
            <summary>
            Find the set of all public classes which are non-abstract, and implement the
            specified interface and the specified attribute (if provided)
            </summary>
            <param name="requiredInterface">The required interface</param>
            <param name="requiredAttribute">The required attribute, or null</param>
            <returns>A list of Type objects</returns>
        </member>
        <member name="M:MS.Swi.Reflection.CacheFclAssembly(System.Reflection.Assembly)">
            <summary>
            Cache the assembly into the FCL lookaside cache if it matches
            </summary>
            <param name="loadedAssembly">The loaded assembly</param>
        </member>
        <member name="M:MS.Swi.Reflection.LoadReferencedAssembly(System.String)">
            <summary>
            Load an assembly (which must be referenced by another assembly already loaded) into
            the AppDomain. Note that we will return success if the desired assembly has already been
            loaded, and that we may load more than one assembly with the same simple name.
            </summary>
            <param name="assemblyName">The symbolic name of the assembly we want to load</param>
            <returns>True if the assembly can be loaded, false if not</returns>
        </member>
        <member name="M:MS.Swi.Reflection.FindMethod(System.String,System.Type[])">
            <summary>
            Find a specific method, ignoring privacy 
            </summary>
            <param name="methodFullName">The full (i.e. namespace.class.method) name of the method</param>
            <param name="arguments">The method argument signature to look for or null if there are no arguments</param>
            <returns>The matching method, or null if no method was found</returns>
        </member>
        <member name="T:MS.Swi.Data.Generic.ConstArray`1">
            <summary>
            An uneditable view of an array of objects or value types
            </summary>
            <typeparam name="ContentsType">The underlying array</typeparam>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstArray`1.#ctor(`0[])">
            <summary>
            Construct a const view of an underlying array
            </summary>
            <param name="underlyingArray">The underlying array</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstArray`1.Extract(System.Int32,System.Int32)">
            <summary>
            Extract a subset of the source array 
            </summary>
            <param name="startIndex">The start index in the source array</param>
            <param name="length">The length of the subset</param>
            <returns>The newly constructed array</returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstArray`1.Copy(System.Int32,System.Int32,System.Int32,`0[])">
            <summary>
            Copy a subset of the contents of the array into another array
            </summary>
            <param name="startIndex">The start index in the source array</param>
            <param name="length">The length of the subset</param>
            <param name="destIndex">The start index in the destination array</param>
            <param name="destination">The destination array</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstArray`1.ToArray">
            <summary>
            Create a clone of the underlying array and return it
            </summary>
            <returns>The shallow clone of the underlying array</returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstArray`1.GetEnumerator">
            <summary>
            The enumerator for iteration
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstArray`1.Length">
            <summary>
            The length of the array
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstArray`1.Item(System.Int32)">
            <summary>
            The contents at any particular index
            </summary>
            <param name="index">The index into the array</param>
            <returns>The value at that location</returns>
        </member>
        <member name="T:MS.Swi.Data.Generic.ConstList`1">
            <summary>								
            An uneditable view of a list of objects
            </summary>
            <typeparam name="ContentsType">The underlying type</typeparam>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`1.#ctor(MS.Swi.Data.Generic.ConstList{`0})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`1.#ctor(`0[])">
            <summary>
            Construct a read-only view of an array as a list
            </summary>
            <param name="underlyingArray">The underlying array</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`1.GetEnumerator">
            <summary>
            The enumerator for iteration
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstList`1.Count">
            <summary>
            The number of items in the list
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstList`1.Item(System.Int32)">
            <summary>
            The element at the indicated list
            </summary>
            <param name="index">The index</param>
            <returns>The element</returns>
        </member>
        <member name="T:MS.Swi.Data.Generic.ConstList`2">
            <summary>
            An uneditable view of a list of objects which also have const interfaces that can be exposed
            </summary>
            <typeparam name="IConstContentsType">The const interface (should be an IConst...)</typeparam>
            <typeparam name="ContentsType">The underlying implementation (should be an IConst...)</typeparam>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`2.#ctor(System.Collections.Generic.List{`1})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`2.#ctor(MS.Swi.Data.Generic.ConstList{`1})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`2.#ctor(MS.Swi.Data.Generic.ConstList{`0,`1})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`2.#ctor(`1[])">
            <summary>
            Construct a read-only view of an array as a list
            </summary>
            <param name="underlyingArray">The underlying array</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstList`2.GetEnumerator">
            <summary>
            The enumerator for iteration
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstList`2.Count">
            <summary>
            The number of items in the list
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstList`2.Item(System.Int32)">
            <summary>
            The element at the indicated list
            </summary>
            <param name="index">The index</param>
            <returns>The element</returns>
        </member>
        <member name="T:MS.Swi.Data.Generic.ConstSortedList`2">
            <summary>
            An uneditable view of a sorted list of objects
            </summary>
            <typeparam name="KeyType">The key of the sorted list</typeparam>
            <typeparam name="ContentsType">The underlying implementation (should be an IConst...)</typeparam>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`2.#ctor(System.Collections.Generic.SortedList{`0,`1})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingSortedList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`2.#ctor(MS.Swi.Data.Generic.ConstSortedList{`0,`1})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingSortedList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`2.IndexOfKey(`0)">
            <summary>
            The index of the given key
            </summary>
            <param name="key">The key</param>
            <returns>The index</returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`2.GetByIndex(System.Int32)">
            <summary>
            Get the value based on an index
            </summary>
            <param name="index">The index</param>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`2.ContainsKey(`0)">
            <summary>
            Does the list contain the given key
            </summary>
            <param name="key">The key</param>
            <returns>True if it contains the key, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`2.GetEnumerator">
            <summary>
            The enumerator for iteration
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstSortedList`2.Count">
            <summary>
            The number of items in the list
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstSortedList`2.Item(`0)">
            <summary>
            The element at the indicated list
            </summary>
            <param name="index">The index</param>
            <returns>The element</returns>
        </member>
        <member name="T:MS.Swi.Data.Generic.ConstSortedList`3">
            <summary>
            An uneditable view of a sorted list of objects which also have const interfaces that can be exposed
            </summary>
            <typeparam name="KeyType">The key of the sorted list</typeparam>
            <typeparam name="IConstContentsType">The const interface (should be an IConst...)</typeparam>
            <typeparam name="ContentsType">The underlying implementation (should be an IConst...)</typeparam>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`3.#ctor(System.Collections.Generic.SortedList{`0,`2})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingSortedList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`3.#ctor(MS.Swi.Data.Generic.ConstSortedList{`0,`2})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingSortedList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`3.#ctor(MS.Swi.Data.Generic.ConstSortedList{`0,`1,`2})">
            <summary>
            Construct a read-only view of an existing list
            </summary>
            <param name="underlyingSortedList"></param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`3.IndexOfKey(`0)">
            <summary>
            The index of the given key
            </summary>
            <param name="key">The key</param>
            <returns>The index</returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`3.GetByIndex(System.Int32)">
            <summary>
            Get the value based on an index
            </summary>
            <param name="index">The index</param>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`3.ContainsKey(`0)">
            <summary>
            Does the list contain the given key
            </summary>
            <param name="key">The key</param>
            <returns>True if it contains the key, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstSortedList`3.GetEnumerator">
            <summary>
            The enumerator for iteration
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstSortedList`3.Count">
            <summary>
            The number of items in the list
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstSortedList`3.Item(`0)">
            <summary>
            The element at the indicated list
            </summary>
            <param name="index">The index</param>
            <returns>The element</returns>
        </member>
        <member name="T:MS.Swi.Data.Generic.ConstDictionary`2">
            <summary>
            An uneditable view of a dictionary
            </summary>
            <typeparam name="KeyType">The key type</typeparam>
            <typeparam name="ContentsType">The contents type</typeparam>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Construct the view of the underlying dictionary
            </summary>
            <param name="underlyingDictionary">The underlying dictionary</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`2.#ctor(MS.Swi.Data.Generic.ConstDictionary{`0,`1})">
            <summary>
            Construct the view of the underlying dictionary
            </summary>
            <param name="underlyingDictionary">The underlying dictionary</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`2.ContainsKey(`0)">
            <summary>
            Does the dictionary contain the given key
            </summary>
            <param name="key">The key</param>
            <returns>True if it contains the key, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`2.GetEnumerator">
            <summary>
            Provide an enumeration of the contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstDictionary`2.Item(`0)">
            <summary>
            Provide access to the specified element
            </summary>
            <param name="index">The index to use</param>
            <returns>The specified element</returns>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstDictionary`2.Values">
            <summary>
            Provide direct access to all of the values
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstDictionary`2.Keys">
            <summary>
            Provide direct access to all of the keys
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstDictionary`2.Count">
            <summary>
            The number of elements in the dictionary
            </summary>
        </member>
        <member name="T:MS.Swi.Data.Generic.ConstDictionary`3">
            <summary>
            An uneditable view of the const forms of a dictionary
            </summary>
            <typeparam name="KeyType">The key type</typeparam>
            <typeparam name="IConstContentsType">The const interface type</typeparam>
            <typeparam name="ContentsType">The contents type</typeparam>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`3.#ctor(System.Collections.Generic.Dictionary{`0,`2})">
            <summary>
            Construct the view of the underlying dictionary
            </summary>
            <param name="underlyingDictionary">The underlying dictionary</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`3.#ctor(MS.Swi.Data.Generic.ConstDictionary{`0,`2})">
            <summary>
            Construct the view of the underlying dictionary
            </summary>
            <param name="underlyingDictionary">The underlying dictionary</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`3.#ctor(MS.Swi.Data.Generic.ConstDictionary{`0,`1,`2})">
            <summary>
            Construct the view of the underlying dictionary
            </summary>
            <param name="underlyingDictionary">The underlying dictionary</param>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`3.ContainsKey(`0)">
            <summary>
            Does the dictionary contain the given key
            </summary>
            <param name="key">The key</param>
            <returns>True if it contains the key, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.Generic.ConstDictionary`3.GetEnumerator">
            <summary>
            Provide an enumeration of the contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstDictionary`3.Item(`0)">
            <summary>
            Provide access to the specified element
            </summary>
            <param name="index">The index to use</param>
            <returns>The element specified as the Const interface</returns>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstDictionary`3.Values">
            <summary>
            Provide direct access to all of the values
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstDictionary`3.Keys">
            <summary>
            Provide direct access to all of the keys
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Generic.ConstDictionary`3.Count">
            <summary>
            The number of elements in the dictionary
            </summary>
        </member>
        <member name="T:MS.Swi.Utilities">
            <summary>
            General system or utility functions, grouped to prevent code duplication
            </summary>
        </member>
        <member name="M:MS.Swi.Utilities.#ctor">
            <summary>
            There are no valid Utilities objects
            </summary>
        </member>
        <member name="F:MS.Swi.Utilities.ArchitectureIs64Bit">
            <summary>
            Whether or not we are running in a 64 bit CLR
            </summary>
        </member>
        <member name="M:MS.Swi.Utilities.AddToPath(System.String)">
            <summary>
            Add the specified directory to the end of the path, IF it doesn't already exist
            somewhere with in the path
            </summary>
            <param name="directory">The directory to add</param>
        </member>
        <member name="M:MS.Swi.Utilities.AddFclPaths">
            <summary>
            Add the FCL file paths to the path environment variable for this process
            </summary>
        </member>
        <member name="T:MS.Swi.Data.IConstToken">
            <summary>
            The read-only interfaces to the Token object
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IConstToken.GetValidDefinitions">
            <summary>
            Get the complete set of valid definitions we could apply
            </summary>
            <returns>The set</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstToken.GetContents(System.String)">
            <summary>
            Get the associated contents object given an FCL definition name and a 
            native representation. Note that this will NOT go past a split contents if the
            transformation requires all the data to be available before it can be transformed.
            </summary>
            <param name="fclDefinition">The definition to look for or null if the definition should not be checked</param>
            <returns>The matching parent data contents, or null if one could not be found</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstToken.CalculateSignature">
            <summary>
            Calculate a hashed signature for this token
            </summary>
            <returns>The token signature</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstToken.TrimSplitPoints(System.Collections.IEnumerable)">
            <summary>
            Trim out zero length split points from the specified set (including split points at the ends)
            </summary>
            <param name="splitPoints">The split points to analyzer</param>
            <returns>The new set of split points</returns>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.Contents">
            <summary>
            The contents object of the token. Note that for reference types, this will invoke
            a Clone() operation.
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.ContentsNativeType">
            <summary>
            The native type of the token object
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.IsStatic">
            <summary>
            Whether or not this is a static token (i.e. not dependent on other tokens)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.IsDerived">
            <summary>
            Whether or not this is a derived token (i.e. dependent on one or more other tokens)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.Definition">
            <summary>
            The definition of the token type
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.Identifier">
            <summary>
            The identifier associated with the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.Position">
            <summary>
            The position of the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.References">
            <summary>
            The token references associated with the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstToken.IsImmutable">
            <summary>
            Whether or not the contents of this token have been defined as being IsImmutable
            </summary>
        </member>
        <member name="T:MS.Swi.Data.Token">
            <summary>
            The representation of data in the DataMap
            </summary>
        </member>
        <member name="M:MS.Swi.Data.Token.#ctor(MS.Swi.Data.ElementDefinition,System.String,MS.Swi.Data.TokenPosition,MS.Swi.Data.DataContents,MS.Swi.Data.TokenRestrictions,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            Construct a token based on a definition, position, and contents. 
            </summary>
            <param name="definition">The type of the token</param>
            <param name="identifier">The identifier for the token (null will be silently changed to an empty string)</param>
            <param name="position">The position of the token in the DataMap</param>
            <param name="contents">The contents of the token</param>
            <param name="restrictions">The restrictions that apply to the token (or null).</param>
            <param name="references">The reference table for the token (or null). If there are references, there must be a delegate, and visa versa</param>
            <param name="calculationDelegate">The calculation delegate for the token (or null). If there are references, there must be a delegate, and visa versa</param>
        </member>
        <member name="M:MS.Swi.Data.Token.#ctor(MS.Swi.Data.TokenPosition,MS.Swi.Data.Token)">
            <summary>
            Copy constructor for the Token class, to create a duplicate token with the specified position
            </summary>
            <param name="position">The position of the new token</param>
            <param name="sourceToken">The source token</param>
        </member>
        <member name="M:MS.Swi.Data.Token.GetValidDefinitions">
            <summary>
            Get the complete set of valid definitions we could apply
            </summary>
            <returns>The set</returns>
        </member>
        <member name="M:MS.Swi.Data.Token.MS#Swi#Data#IConstToken#GetContents(System.String)">
            <summary>
            Get the associated contents object given an FCL definition name and a 
            native representation. Note that this will NOT go past a split contents if the
            transformation requires all the data to be available before it can be transformed.
            </summary>
            <param name="fclDefinition">The definition to look for or null if the definition should not be checked</param>
            <returns>The matching parent data contents, or null if one could not be found</returns>
        </member>
        <member name="M:MS.Swi.Data.Token.GetContents(System.String)">
            <summary>
            Get the associated contents object given an FCL definition name and a 
            native representation. Note that this will NOT go past a split contents if the
            transformation requires all the data to be available before it can be transformed.
            </summary>
            <param name="fclDefinition">The definition to look for or null if the definition should not be checked</param>
            <returns>The matching parent data contents, or null if one could not be found</returns>
        </member>
        <member name="M:MS.Swi.Data.Token.CalculateSignature">
            <summary>
            Calculate a hashed signature for this token
            </summary>
            <returns>The token signature</returns>
        </member>
        <member name="M:MS.Swi.Data.Token.TrimSplitPoints(System.Collections.IEnumerable)">
            <summary>
            Trim out zero length split points from the specified set (including split points at the ends)
            </summary>
            <param name="splitPoints">The split points to analyzer</param>
            <returns>The new set of split points</returns>
        </member>
        <member name="M:MS.Swi.Data.Token.AddRestrictions(MS.Swi.Data.IConstTokenRestrictions)">
            <summary>
            Add the new restrictions to the existing restrictions. 
            </summary>
            <param name="newRestrictions">The new restrictions</param>
        </member>
        <member name="M:MS.Swi.Data.Token.AddReferences(System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference})">
            <summary>
            Add the new references to the existing reference set. Note that the new references
            must not contradict an existing reference in the existing table
            </summary>
            <param name="newReferences">The new references</param>
        </member>
        <member name="P:MS.Swi.Data.Token.Position">
            <summary>
            The position of the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.Definition">
            <summary>
            The definition of the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.Identifier">
            <summary>
            The value associated with the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.Contents">
            <summary>
            Provide a copy of the contents of the token. Note that for reference types, this will
            invoke a Clone() operation.
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.ContentsNativeType">
            <summary>
            The native type of the contents object
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.IsStatic">
            <summary>
            Whether or not this is a static token (i.e. not dependent on other tokens)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.IsDerived">
            <summary>
            Whether or not this is a derived token (i.e. dependent on one or more other tokens)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.IsImmutable">
            <summary>
            Whether or not the contents of this token have been defined as being IsImmutable
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.IsValid">
            <summary>
            Whether or not this token has valid contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.AssociatedContents">
            <summary>
            The associated contents object. This is tightly coupled to the 
            contents object (which has a paired associated token)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.MS#Swi#Data#IConstToken#References">
            <summary>
            The read-only view of the const form of the references
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.References">
            <summary>
            The read-only view of the references
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Token.CalculationDelegate">
            <summary>
            The calculation delegate
            </summary>
        </member>
        <member name="T:MS.Swi.Data.Token.CalculateContentsDelegate">
            <summary>
            Calculate the contents of an element given the references that the contents are based on
            </summary>
            <param name="informationSource">The contents information source</param>
            <param name="targetContents">The contents object that is being calculated</param>
            <param name="references">The references</param>
            <returns>The new contents</returns>
        </member>
        <member name="T:MS.Swi.Data.IConstDataMap">
            <summary>
            A const (i.e. true Read Only) access interface to a DataMap
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IConstDataMap.TokenIsInMap(MS.Swi.Data.IConstToken)">
            <summary>
            Whether or not the specified token is in the map at its alledged location
            </summary>
            <param name="token">The token</param>
            <returns>True if it is in the map, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataMap.FirstToken">
            <summary>
            The first token in the DataMap
            </summary>
            <returns>The first token in the DataMap, or null if the DataMap has no tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataMap.NextToken(MS.Swi.Data.IConstToken,System.Boolean)">
            <summary>
            The next token in the DataMap
            </summary>
            <param name="referenceToken">The token this is in reference to</param>
            <param name="spanRootElements">Whether or not to cross root elements</param>
            <returns>The next token, or null if there is no matching next token</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataMap.PreviousToken(MS.Swi.Data.IConstToken,System.Boolean)">
            <summary>
            The previous token in the DataMap
            </summary>
            <param name="referenceToken">The token this is in reference to</param>
            <param name="spanRootElements">Whether or not to cross root elements</param>
            <returns>The previous token, or null if there is no matching previous token</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataMap.NextToken(MS.Swi.Data.TokenPosition,System.Boolean)">
            <summary>
            The next token in the DataMap. If there is no token at the reference position, the 
            spanRootElements argument will be ignored, and the next token will be returned.
            </summary>
            <param name="referencePosition">The reference position</param>
            <param name="spanRootElements">Whether or not to cross root elements</param>
            <returns>The next token, or null if there is no matching next token</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataMap.PreviousToken(MS.Swi.Data.TokenPosition,System.Boolean)">
            <summary>
            The previous token in the DataMap. If there is no token at the reference position, the 
            spanRootElements argument will be ignored, and the previous token will be returned.
            </summary>
            <param name="referencePosition">The reference position</param>
            <param name="spanRootElements">Whether or not to cross root elements</param>
            <returns>The previous token, or null if there is no matching previous token</returns>
        </member>
        <member name="P:MS.Swi.Data.IConstDataMap.Definitions">
            <summary>
            Access to the definitions used by the DataMap
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataMap.Transformations">
            <summary>
            Access to the transformations used by the DataMap
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataMap.Tokens">
            <summary>
            Access to the data tokens found
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataMap.Encapsulations">
            <summary>
            Access to the encapsulations found
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataMap">
            <summary>
            A DataMap is a mapping of data both according to type, and based on the original DataBuffers
            that it was derived from. The DataMap contains the type definitions, as well as the complete data
            set stored in ordinal order, along with the information as far as the amount of data remaining indexed
            by the original buffer count. 
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataMap.#ctor(MS.Swi.Data.IConstDataTransformations,MS.Swi.Data.IConstElementDefinitions)">
            <summary>
            Create an empty data map
            </summary>
            <param name="transformations">The valid transformations</param>
            <param name="definitions">The valid definitions</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.#ctor(MS.Swi.Data.IConstDataTransformations,MS.Swi.Data.IConstElementDefinitions,MS.Swi.Data.Generic.ConstList{MS.Swi.Data.IConstDataBuffer,MS.Swi.Data.DataBuffer})">
            <summary>
            Create a data map with simple byte array buffers. Note that this automatically applies 
            size restrictions to the buffers limiting them to the maximum size of the source DataBuffer
            (for all manipulations that conform to size restrictions)
            </summary>
            <param name="transformations">The valid transformations</param>
            <param name="definitions">The valid definitions</param>
            <param name="buffers">The raw data buffers to use</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.#ctor(System.String,System.String)">
            <summary>
            Create an empty data map
            </summary>
            <param name="transformationFileName">The file name for the valid transformation table</param>
            <param name="definitionFileName">The file name for the valid definitions</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.FindTransformations(System.String[])">
            <summary>
            Find the set of transformations defined by name. If a transformation
            cannot be found, this will throw an exception. If the array of names is empty or null,
            it will return a null array.
            </summary>
            <param name="transformationNames">The transformation names</param>
            <returns>The transformation names</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.CreateReferences(System.Object[])">
            <summary>
            Create references, based on a variable string of arguments.
            
            The argument sequence is:
            
            	String: A reference name - Note that this MUST end in a ':'
            	TokenReference.TokenReferenceType: A reference type
            
            	Followed by one or more of any of the following (note that the order IS important):
            	TokenPosition or IConstToken: A reference to the contents of the specified token
            	String (ElementDefinition name),TokenPosition: A reference to the first contents of the specified token of the given type
            
            	OR
            
            	String: A reference name - Note that this MUST end in a ':'
            	Followed by one or more TokenReference objects
            
            Note that MULTIPLE labels can be defined (i.e. the entire sequence can repeat)
            </summary>
            <param name="arguments">The list of arguments for the reference creation</param>
            <returns>The reference table</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.CreateAnonymousReference(MS.Swi.Data.TokenReference.TokenReferenceType,System.Object[])">
            <summary>
            Create references, based on a variable string of arguments.
            
            The argument sequence is:
            
            	One or more of any of the following (note that the order IS important):
            	TokenPosition or IConstToken: A reference to the contents of the specified token
            	String (ElementDefinition name),TokenPosition or IConstToken: A reference to the first contents of the specified token of the given type
            
            An ArgumentException will be thrown if there are no references specified
            </summary>
            <param name="referenceType">The type of reference</param>
            <param name="arguments">The list of arguments for the reference creation</param>
            <returns>The unnamed reference</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.CreateToken(MS.Swi.Data.TokenPosition,MS.Swi.Data.ElementDefinition,System.String,MS.Swi.Data.DataContents,MS.Swi.Data.TokenRestrictions,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            Create a token that is not attached to any existing root token in the DataMap
            </summary>
            <param name="position">The token position</param>
            <param name="definition">The token definition</param>
            <param name="identifier">The identifier for the token (null will be silently turned into an empty string)</param>
            <param name="contents">The contents</param>
            <param name="restrictions">The restrictions which apply to the token</param>
            <param name="references">The references which apply to the token</param>
            <param name="calculationDelegate">The calculation delegate to use with the token</param>
            <returns>The constructed token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.CreateToken(MS.Swi.Data.TokenPosition,System.Object,System.String,System.String,System.String[],MS.Swi.Data.TokenRestrictions,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            Create a token that is not attached to any existing root token in the DataMap
            </summary>
            <param name="position">The token position</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The definition to apply</param>
            <param name="identifier">The identifier for the token (null will be silently turned into an empty string)</param>
            <param name="transformationNames">The transformations to apply</param>
            <param name="restrictions">The restrictions which apply to the token</param>
            <param name="references">The references which apply to the token</param>
            <param name="calculationDelegate">The calculation delegate to use with the token</param>
            <returns>The constructed token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Insert(MS.Swi.Data.TokenPosition,MS.Swi.Data.Token)">
            <summary>
            Use the AttemptToAdd method to try to add a token to the DataMap, throwing an invalid operation
            exception if the token could not be added
            </summary>
            <param name="position">The position</param>
            <param name="token">The token</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.CanInsertToken(MS.Swi.Data.TokenPosition,MS.Swi.Data.Token,MS.Swi.Data.DataContents@,MS.Swi.Data.DataContents@)">
            <summary>
            Determine if we can insert a token at the given position, and if we can, whether or not we will need
            to change the ancestry of the token to make it work
            </summary>
            <param name="position">The selected position</param>
            <param name="token">The token to be inserted</param>
            <param name="selectedChild">The child contents that should be modified for the insertion, or null if no change is needed</param>
            <param name="selectedParent">The parent that should be modified for the insertion, or null if no change is needed</param>
            <returns>True if the token can be inserted in that position, False if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.AttemptToInsert(MS.Swi.Data.TokenPosition,MS.Swi.Data.Token)">
            <summary>
            Given a token, insert it into the TokenList.
            </summary>
            <param name="position">The position</param>
            <param name="token">The token</param>
            <returns>True if it could be integrated in, false if there is a conflict</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.AttemptToAdoptSiblingTokenContents(MS.Swi.Data.Token,MS.Swi.Data.Token)">
            <summary>
            Attempt to adopt the token into a common ancestor with its prospective sibling
            </summary>
            <param name="prospectiveSibling">The prospective sibling token</param>
            <param name="token">The token being adopted</param>
            <returns>True if it was adopted, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.CanAdoptSiblingTokenContents(MS.Swi.Data.Token,MS.Swi.Data.Token,MS.Swi.Data.DataContents@,MS.Swi.Data.DataContents@)">
            <summary>
            Determine if a token can descend from an ancestor of its prospective sibling, and if so, where it 
            should descend from
            </summary>
            <param name="prospectiveSibling">The prospective sibling token</param>
            <param name="token">The token being adopted</param>
            <param name="selectedChild">The child that can be adopted, or null if there is no need for adoption. Note that it is possible for null to be returned when we return true.</param>
            <param name="selectedParent">The parent adoption point, or null if there is no need for adoption. Note that it is possible for null to be returned when we return true</param>
            <returns>True if it can be adopted, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.CanAdoptTokenContents(MS.Swi.Data.DataContents,MS.Swi.Data.Token,MS.Swi.Data.DataContents@)">
            <summary>
            Determine if it is possible to adopt the Token to the prospective parent, and if it is possible,
            return the DataContents that should be adopted in to the prospective parent
            </summary>
            <param name="prospectiveParent">The prospective parent</param>
            <param name="token">The token</param>
            <param name="selectedChild">The child that can be adopted, or null if there is no need for adoption. Note that it is possible for null to be returned when we return true.</param>
            <returns>True if the Token can be adopted, False if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.AttemptToAdoptTokenContents(MS.Swi.Data.DataContents,MS.Swi.Data.Token)">
            <summary>
            Add the contents of a specific token into a prospective parent token, if we can. We attempt to move
            as much of the parent tree of this token as we can
            </summary>
            <param name="prospectiveParent">The prospective parent</param>
            <param name="token">The token</param>
            <returns>True if the inheritance chain of the token now goes through the prospective parent, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Append(System.Object,System.String,System.String[])">
            <summary>
            Append a token to the end of the DataMap. This is used only in the simple case where we are
            creating a DataMap with a single root node, and are appending onto it.
            </summary>
            <param name="contents">The contents object</param>
            <param name="tokenDefinition">The token definition</param>
            <param name="transformations">The transformations to apply</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Append(System.Object,System.String,System.String[],MS.Swi.Data.TokenRestrictions)">
            <summary>
            Append a token to the end of the DataMap. This is used only in the simple case where we are
            creating a DataMap with a single root node, and are appending onto it.
            </summary>
            <param name="contents">The contents object</param>
            <param name="tokenDefinition">The token definition</param>
            <param name="transformations">The transformations to apply</param>
            <param name="restrictions">The restrictions to apply</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.AppendRootToken(System.Object,System.String,System.String[])">
            <summary>
            Append a new root token (i.e. a new root element) to the end of the DataMap
            </summary>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.AppendRootToken(System.Object,System.String,System.String[],MS.Swi.Data.TokenRestrictions)">
            <summary>
            Append a new root token (i.e. a new root element) to the end of the DataMap
            </summary>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use (or null)</param>
            <param name="restrictions">The restrictions to apply to the new token (or null)</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Append(MS.Swi.Data.TokenPosition,System.Object,System.String,System.String[])">
            <summary>
            Append a token after the token at the position given. Note that this may result
            in the renumber of tokens (for example, if we want to append after 0.1.1 and there is 
            already a 0.1.2, we would end up with 0.1.1.0, and 0.1.1.1 for our two tokens).
            
            If the position does not have a corresponding token, we will throw an exception
            </summary>
            <param name="position">The position</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Append(MS.Swi.Data.TokenPosition,System.Object,System.String,System.String[],MS.Swi.Data.TokenRestrictions)">
            <summary>
            Append a token after the token at the position given. Note that this may result
            in the renumber of tokens (for example, if we want to append after 0.1.1 and there is 
            already a 0.1.2, we would end up with 0.1.1.0, and 0.1.1.1 for our two tokens).
            
            If the position does not have a corresponding token, we will throw an exception
            </summary>
            <param name="position">The position</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <param name="restrictions">The restrictions to apply</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Append(MS.Swi.Data.IConstToken,System.Object,System.String,System.String[])">
            <summary>
            Append a token after the token given. Note that this may result
            in the renumber of tokens (for example, if we want to append after 0.1.1 and there is 
            already a 0.1.2, we would end up with 0.1.1.0, and 0.1.1.1 for our two tokens).
            
            If the current token is not part of the DataMap, we will throw an exception
            </summary>
            <param name="currentToken">The corresponding token</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Append(MS.Swi.Data.IConstToken,System.Object,System.String,System.String[],MS.Swi.Data.TokenRestrictions)">
            <summary>
            Append a token after the token given. Note that this may result
            in the renumber of tokens (for example, if we want to append after 0.1.1 and there is 
            already a 0.1.2, we would end up with 0.1.1.0, and 0.1.1.1 for our two tokens).
            
            If the current token is not part of the DataMap, we will throw an exception
            </summary>
            <param name="currentToken">The corresponding token</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <param name="restrictions">The restrictions to apply</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Insert(MS.Swi.Data.TokenPosition,System.Object,System.String,System.String[])">
            <summary>
            Insert a token before the specified position. Note that this may result
            in the renumber of tokens (for example, if we want to insert before 0.1.1 and there is 
            already a 0.1.0, we would end up with 0.1.1.0, and 0.1.1.1 for our two tokens).
            
            If the position does not have a corresponding token, we will throw an exception
            </summary>
            <param name="position">The position</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <returns>The inserted token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Insert(MS.Swi.Data.TokenPosition,System.Object,System.String,System.String[],MS.Swi.Data.TokenRestrictions)">
            <summary>
            Insert a token before the specified position. Note that this may result
            in the renumber of tokens (for example, if we want to insert before 0.1.1 and there is 
            already a 0.1.0, we would end up with 0.1.1.0, and 0.1.1.1 for our two tokens).
            
            If the position does not have a corresponding token, we will throw an exception
            </summary>
            <param name="position">The position</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <param name="restrictions">The restrictions to apply</param>
            <returns>The inserted token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Insert(MS.Swi.Data.IConstToken,System.Object,System.String,System.String[])">
            <summary>
            Insert a token before the token given. Note that this may result
            in the renumber of tokens (for example, if we want to append after 0.1.1 and there is 
            already a 0.1.2, we would end up with 0.1.1.0, and 0.1.1.1 for our two tokens).
            
            If the current token is not part of the DataMap, we will throw an exception
            </summary>
            <param name="currentToken">The corresponding token</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Insert(MS.Swi.Data.IConstToken,System.Object,System.String,System.String[],MS.Swi.Data.TokenRestrictions)">
            <summary>
            Insert a token before the token given. Note that this may result
            in the renumber of tokens (for example, if we want to append after 0.1.1 and there is 
            already a 0.1.2, we would end up with 0.1.1.0, and 0.1.1.1 for our two tokens).
            
            If the current token is not part of the DataMap, we will throw an exception
            </summary>
            <param name="currentToken">The corresponding token</param>
            <param name="contents">The contents</param>
            <param name="tokenDefinition">The token definition to use</param>
            <param name="transformations">The transformations to use</param>
            <param name="restrictions">The restrictions to apply</param>
            <returns>The appended token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Protect(MS.Swi.Data.IConstToken)">
            <summary>
            Mark the specified token contents as immutable, protecting them from any change
            </summary>
            <param name="token">The token being marked immutable</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Protect(MS.Swi.Data.TokenPosition)">
            <summary>
            Mark the specified token contents as immutable, protecting them from any change
            </summary>
            <param name="tokenPosition">The the position of the token being marked immutable</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.ProtectRoot(MS.Swi.Data.IConstToken)">
            <summary>
            Mark the entire root element that the specified token belongs to as immutable
            protecting all tokens with the same RootPosition from modification
            </summary>
            <param name="token">The token whose root element is to be marked as immutable</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.ProtectRoot(MS.Swi.Data.TokenPosition)">
            <summary>
            Mark the entire root element that the specified token position belongs to as immutable
            protecting all tokens with the same RootPosition from modification
            </summary>
            <param name="tokenPosition">The position of the token whose root element is to be marked as immutable</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.ProtectRoot(System.UInt32)">
            <summary>
            Mark the entire root element as immutable protecting all tokens with the same RootPosition
            from modification.
            </summary>
            <param name="rootPosition">The root position</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Duplicate(MS.Swi.Data.IConstToken)">
            <summary>
            Duplicate the specified token, placing the duplicate token after the existing token
            </summary>
            <param name="currentToken">The token to duplicate</param>
            <returns>The constructed token or null if it could not be duplicated</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Duplicate(MS.Swi.Data.TokenPosition)">
            <summary>
            Duplicate the specified token, placing the duplicate token after the existing token
            </summary>
            <param name="position">The position of the token to duplicate</param>
            <returns>The constructed token or null if it could not be duplicated</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Encapsulate(System.String,System.String,System.Object[])">
            <summary>
            Construct an encapsulation given a set of references
            
            The format of the arguments is:
            	Label (String) - Note that this MUST end in a ':'
            	[Optional] Element name for the first contents of the reference that is of the specified definition (String)
            	TokenPosition of the reference (TokenPosition)
                [Repeat as desired]
            </summary>
            <param name="definitionName">The encapsulation definition to use</param>
            <param name="identifier">The identifier for the encapsulation, or null if there is no identifier</param>
            <param name="references">The reference definition as described above</param>
            <returns>The constructed encapsulation, or null if an equivalent encapsulation already existed</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.AddEncapsulationReference(System.Collections.Generic.List{MS.Swi.Data.DataContents},MS.Swi.Data.TokenPosition@,System.String@)">
            <summary>
            Add an encapsulation reference to the list
            </summary>
            <param name="referenceList">The reference list</param>
            <param name="position">The position of the reference</param>
            <param name="definitionName">The target definition, or null if the default should be used</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Split(MS.Swi.Data.TokenPosition,System.UInt32[])">
            <summary>
            Split the existing token up according to the split points, and create the new tokens.
            
            Notes:
            If the token cannot be found at the position given, we will throw an exception.
            This does NOT enforce the Severable attribute of tokens, because the split often occurs before refinements
            Type is preserved to the child tokens
            Restrictions are preserved to the child tokens
            If there is a split point provided which is also the length of the parent contents, it will not
            create a token
            </summary>
            <param name="position">The position of the token to split</param>
            <param name="splitPoints">The split points</param>
            <returns>The list of child tokens in order by split points</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Split(MS.Swi.Data.TokenPosition,System.Collections.IEnumerable)">
            <summary>
            Split the existing token up according to the split points, and create the new tokens.
            
            Notes:
            If the token cannot be found at the position given, we will throw an exception.
            This does NOT enforce the Severable attribute of tokens, because the split often occurs before refinements
            However, it DOES enforce the Singleton attribute
            Type is preserved to the child tokens
            Restrictions are preserved to the child tokens
            </summary>
            <param name="position">The position of the token to split</param>
            <param name="splitPoints">The split points</param>
            <returns>The list of child tokens in order by split points</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Split(MS.Swi.Data.IConstToken,System.UInt32[])">
            <summary>
            Split the existing token up according to the split points, and create the new tokens.
            
            Notes:
            If the token cannot be found at the position given, we will throw an exception.
            This does NOT enforce the Severable attribute of tokens, because the split often occurs before refinements
            However, it DOES enforce the Singleton attribute
            Type is preserved to the child tokens
            Restrictions are preserved to the child tokens
            If there is a split point provided which is also the length of the parent contents, it will not
            create a token
            </summary>
            <param name="token">The token to split</param>
            <param name="splitPoints">The split points</param>
            <returns>The list of child tokens in order by split points</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Split(MS.Swi.Data.IConstToken,System.Collections.IEnumerable)">
            <summary>
            Split the existing token up according to the split points, and create the new tokens.
            
            Notes:
            If the token cannot be found at the position given, we will throw an exception.
            This does NOT enforce the Severable attribute of tokens, because the split often occurs before refinements
            However, it DOES enforce the Singleton attribute
            Type is preserved to the child tokens
            Restrictions are preserved to the child tokens
            </summary>
            <param name="token">The token to split</param>
            <param name="splitPoints">The split points</param>
            <returns>The list of child tokens in order by split points</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Split(MS.Swi.Data.IConstToken)">
            <summary>
            Split the existing token into equally (and minimally) sized sub-tokens.
            
            Notes:
            If the token cannot be found at the position given, we will throw an exception.
            This does NOT enforce the Severable attribute of tokens, because the split often occurs before refinements
            However, it DOES enforce the Singleton attribute
            Type is preserved to the child tokens
            </summary>
            <param name="token">The token to split</param>
            <returns>The list of child tokens in order by split points</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Split(MS.Swi.Data.TokenPosition)">
            <summary>
            Split the existing token into equally (and minimally) sized sub-tokens.
            
            Notes:
            If the token cannot be found at the position given, we will throw an exception.
            This does NOT enforce the Severable attribute of tokens, because the split often occurs before refinements
            However, it DOES enforce the Singleton attribute
            Type is preserved to the child tokens.  
            </summary>
            <param name="position">The position of the token to split</param>
            <returns>The list of child tokens in order by split points</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.TokenPosition,System.String,System.String[])">
            <summary>
            Change the definition and encoding of the token at the given position
            </summary>
            <param name="position">The position of the token</param>
            <param name="definitionName">The name of the new definition</param>
            <param name="transformationNames">The transformation names to apply</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.TokenPosition,MS.Swi.Data.TokenRestrictions)">
            <summary>
            Apply additional restrictions to an existing token
            </summary>
            <param name="position">The position of the token</param>
            <param name="restrictions">The new restrictions</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.TokenPosition,System.String,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            Apply a new type and derivation rules to an existing token
            </summary>
            <param name="position">The position of the token</param>
            <param name="definitionName">The name of the new definition</param>
            <param name="references">The references to use</param>
            <param name="calculationDelegate">The calculation delegate to use</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.TokenPosition,System.String,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},System.String)">
            <summary>
            Apply a new type and derivation rules to an existing token
            </summary>
            <param name="position">The position of the token</param>
            <param name="definitionName">The name of the new definition</param>
            <param name="references">The references to use</param>
            <param name="calculationDelegateName">The calculation delegate to use</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.TokenPosition,System.String,System.String[],MS.Swi.Data.TokenRestrictions,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},System.String)">
            <summary>
            Change the definition of a token at a given position. 
            </summary>
            <param name="position">The position of the token</param>
            <param name="definitionName">The name of the new definition (or null if it is unchanged)</param>
            <param name="transformationNames">The transformation name to apply (or null if it is unchanged) </param>
            <param name="restrictions">Additional restrictions to apply to the token (or null if it is unchanged)</param>
            <param name="references">References to apply to the token (or null if it is unchanged)</param>
            <param name="calculationDelegateName">Calculation delegate to apply to the token (or null if it is unchanged)</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.TokenPosition,System.String,System.String[],MS.Swi.Data.TokenRestrictions,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            Change the definition of a token at a given position. 
            </summary>
            <param name="position">The position of the token</param>
            <param name="definitionName">The name of the new definition (or null if it is unchanged)</param>
            <param name="transformationNames">The transformation name to apply (or null if it is unchanged) </param>
            <param name="restrictions">Additional restrictions to apply to the token (or null if it is unchanged)</param>
            <param name="references">References to apply to the token (or null if it is unchanged)</param>
            <param name="calculationDelegate">Calculation delegate to apply to the token (or null if it is unchanged)</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.IConstEncapsulation,System.String,System.String)">
            <summary>
            Refine the definition of an existing encapsulation OR its equivalent. Note that the refinement
            will only be applied if the identifier is a refinement of the existing encapsulation. If the 
            encapsulation has already been refined past that point, this will be ignored.
            </summary>
            <param name="encapsulation">The encapsulation to refine</param>
            <param name="identifier">The new identifier for the encapsulation, or null if the previous identifier should be preserved</param>
            <param name="definitionName">The updated definition</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.IConstToken,System.String,System.String[])">
            <summary>
            Change the definition and encoding of the token
            </summary>
            <param name="token">The token to refine</param>
            <param name="definitionName">The name of the new definition</param>
            <param name="transformationNames">The transformation names to apply</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.IConstToken,MS.Swi.Data.TokenRestrictions)">
            <summary>
            Apply additional restrictions to an existing token
            </summary>
            <param name="token">The token to refine</param>
            <param name="restrictions">The new restrictions</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.IConstToken,System.String,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            Apply a new type and derivation rules to an existing token
            </summary>
            <param name="token">The token to refine</param>
            <param name="definitionName">The name of the new definition</param>
            <param name="references">The references to use</param>
            <param name="calculationDelegate">The calculation delegate to use</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.IConstToken,System.String,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},System.String)">
            <summary>
            Apply a new type and derivation rules to an existing token
            </summary>
            <param name="token">The token to refine</param>
            <param name="definitionName">The name of the new definition</param>
            <param name="references">The references to use</param>
            <param name="calculationDelegateName">The calculation delegate to use</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.IConstToken,System.String,System.String[],MS.Swi.Data.TokenRestrictions,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},System.String)">
            <summary>
            Change the definition of a token at a given position. 
            </summary>
            <param name="token">The token to refine</param>
            <param name="definitionName">The name of the new definition (or null if it is unchanged)</param>
            <param name="transformationNames">The transformation name to apply (or null if it is unchanged) </param>
            <param name="restrictions">Additional restrictions to apply to the token (or null if it is unchanged)</param>
            <param name="references">References to apply to the token (or null if it is unchanged)</param>
            <param name="calculationDelegateName">Calculation delegate to apply to the token (or null if it is unchanged)</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Refine(MS.Swi.Data.IConstToken,System.String,System.String[],MS.Swi.Data.TokenRestrictions,System.Collections.Generic.Dictionary{System.String,MS.Swi.Data.TokenReference},MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            Change the definition of a token. 
            </summary>
            <param name="token">The token to refine</param>
            <param name="definitionName">The name of the new definition (or null if it is unchanged)</param>
            <param name="transformationNames">The transformation name to apply (or null if it is unchanged) </param>
            <param name="restrictions">Additional restrictions to apply to the token (or null if it is unchanged)</param>
            <param name="references">References to apply to the token (or null if it is unchanged)</param>
            <param name="calculationDelegate">Calculation delegate to apply to the token (or null if it is unchanged)</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Extract(MS.Swi.Data.IConstToken,System.String)">
            <summary>
            Transform data into an FCL Container and then extract the results
            </summary>
            <param name="token">The source for the container token</param>
            <param name="transformationName">The transformation to apply</param>
            <returns>The list of extracted tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Extract(MS.Swi.Data.IConstToken)">
            <summary>
            Extract the contents of the FCL Container from the container itself
            </summary>
            <param name="token">The container token</param>
            <returns>The list of extracted tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Extract(MS.Swi.Data.TokenPosition,System.String)">
            <summary>
            Transform data into an FCL Container and then extract the results
            </summary>
            <param name="position">The position of the source for the container token</param>
            <param name="transformationName">The transformation to apply</param>
            <returns>The list of extracted tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.Extract(MS.Swi.Data.TokenPosition)">
            <summary>
            Extract the contents of the FCL Container from the container itself
            </summary>
            <param name="position">The position of the container token</param>
            <returns>The list of extracted tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.ApplyIdentifier(MS.Swi.Data.IConstToken,System.String)">
            <summary>
            Set the identifier for the specified token
            </summary>
            <param name="token">The token</param>
            <param name="identifier">The identifier string (null values will be silently changed to empty strings)</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.ApplyIdentifier(MS.Swi.Data.TokenPosition,System.String)">
            <summary>
            Set the identifier for the token at the specified position
            </summary>
            <param name="tokenPosition">The token position</param>
            <param name="identifier">The identifier string (null values will be silently changed to empty strings)</param>
        </member>
        <member name="M:MS.Swi.Data.DataMap.SwapTokens(MS.Swi.Data.TokenPosition,MS.Swi.Data.TokenPosition)">
            <summary>
            Swap two tokens
            </summary>
            <param name="firstTokenPosition">The position of the first token</param>
            <param name="secondTokenPosition">The position of the second token</param>
            <returns>True if they could be swapped, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.SwapTokens(MS.Swi.Data.IConstToken,MS.Swi.Data.IConstToken)">
            <summary>
            Swap two tokens
            </summary>
            <param name="firstToken">The first token</param>
            <param name="secondToken">The second token</param>
            <returns>True if they could be swapped, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.MoveToken(MS.Swi.Data.TokenPosition,MS.Swi.Data.TokenPosition)">
            <summary>
            Attempt to move a token from one position to another. If the token cannot be found at the
            specified position, then we will throw an exception
            </summary>
            <param name="oldPosition">The old position</param>
            <param name="newPosition">The new position</param>
            <returns>True if it worked, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.MoveToken(MS.Swi.Data.IConstToken,MS.Swi.Data.TokenPosition)">
            <summary>
            Attempt to move a token from one position to another
            </summary>
            <param name="token">The token to move</param>
            <param name="newPosition">The new position</param>
            <returns>True if it worked, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.AddDefinition(MS.Swi.Data.ElementDefinition)">
            <summary>
            Add a definition to the DataMap
            </summary>
            <param name="definition">The definition to be included</param>
            <returns>True if it was added or already exists, False if a conflicting definition of the same name already exists</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.AddTransformation(MS.Swi.Data.DataTransformation)">
            <summary>
            Add a definition to the DataMap
            </summary>
            <param name="transformation"></param>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.RemoveOrphanedDefinitions">
            <summary>
            Trim out any definitions in the table which are "orphaned" (i.e. are descendents of
            definitions that don't exist). This should be done after adding a set of definitions if they
            are added dynamically.
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataMap.TokenIsInMap(MS.Swi.Data.IConstToken)">
            <summary>
            Whether or not the specified token is in the map at its alledged location
            </summary>
            <param name="token">The token</param>
            <returns>True if it is in the map, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.EquivalentEncapsulationIsInMap(MS.Swi.Data.IConstEncapsulation)">
            <summary>
            Whether or not the encapsulation is in the map
            </summary>
            <param name="encapsulation">The encapsulation</param>
            <returns>True if it is in the map, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.EquivalentEncapsulationIsInMap(MS.Swi.Data.Encapsulation)">
            <summary>
            Whether or not the encapsulation is in the map
            </summary>
            <param name="encapsulation">The encapsulation</param>
            <returns>True if it is in the map, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.FindEquivalentEncapsulation(MS.Swi.Data.IConstEncapsulation)">
            <summary>
            Find the equivalent encapsulation in the DataMap to this encapsulation
            </summary>
            <param name="encapsulation">The encapsulation to look for</param>
            <returns>The equivalent encapsulation, or null if none exists</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.FindEquivalentEncapsulation(MS.Swi.Data.Encapsulation)">
            <summary>
            Find the equivalent encapsulation in the DataMap to this encapsulation
            </summary>
            <param name="encapsulation">The encapsulation to look for</param>
            <returns>The equivalent encapsulation, or null if none exists</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.FindTokens(MS.Swi.Data.TokenPosition)">
            <summary>
            Get the sorted sublist of tokens which are "beneath" the given position (i.e.
            a position of 0.0 would include tokens at 0.0.0, 0.0.1, 0.0.2.0, and 0.0.2.1)
            </summary>
            <param name="position">The position</param>
            <returns>The list of descendents</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.FirstToken">
            <summary>
            The first token in the DataMap
            </summary>
            <returns>The first token in the DataMap, or null if the DataMap has no tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.NextToken(MS.Swi.Data.IConstToken,System.Boolean)">
            <summary>
            The next token in the DataMap
            </summary>
            <param name="referenceToken">The token this is in reference to</param>
            <param name="spanRootElements">Whether or not to cross root elements</param>
            <returns>The next token, or null if there is no matching next token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.PreviousToken(MS.Swi.Data.IConstToken,System.Boolean)">
            <summary>
            The previous token in the DataMap
            </summary>
            <param name="referenceToken">The token this is in reference to</param>
            <param name="spanRootElements">Whether or not to cross root elements</param>
            <returns>The previous token, or null if there is no matching previous token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.NextToken(MS.Swi.Data.TokenPosition,System.Boolean)">
            <summary>
            The next token in the DataMap. If there is no token at the reference position, the 
            spanRootElements argument will be ignored, and the next token will be returned.
            </summary>
            <param name="referencePosition">The reference position</param>
            <param name="spanRootElements">Whether or not to cross root elements</param>
            <returns>The next token, or null if there is no matching next token</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMap.PreviousToken(MS.Swi.Data.TokenPosition,System.Boolean)">
            <summary>
            The previous token in the DataMap. If there is no token at the reference position, the 
            spanRootElements argument will be ignored, and the previous token will be returned.
            </summary>
            <param name="referencePosition">The reference position</param>
            <param name="spanRootElements">Whether or not to cross root elements</param>
            <returns>The previous token, or null if there is no matching previous token</returns>
        </member>
        <member name="P:MS.Swi.Data.DataMap.Transformations">
            <summary>
            Access to the available transformations
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataMap.Definitions">
            <summary>
            Access to the token definitions
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataMap.TokenList">
            <summary>
            The actual data token set
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataMap.Tokens">
            <summary>
            Access to the data tokens found
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataMap.EncapsulationList">
            <summary>
            Access to the encapsulations found
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataMap.Encapsulations">
            <summary>
            Access to the encapsulations found
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataMap.MS#Swi#Data#IConstDataMap#Encapsulations">
            <summary>
            Access to the encapsulations found
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataMap.MS#Swi#Data#IConstDataMap#Tokens">
            <summary>
            Access to read-only versions of the data tokens found
            </summary>
        </member>
        <member name="T:MS.Swi.Data.IConstDataBuffer">
            <summary>
            A public constant interface to the DataBuffer, that can be used to
            provide read only access to internal data members
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IConstDataBuffer.CopyTo(System.Byte[],System.UInt32)">
            <summary>
            Copy the entire contents to the specified destination. Note that this requires that
            there is sufficient room
            </summary>
            <param name="destination">The destination buffer</param>
            <param name="position">The position in the destination buffer</param>
        </member>
        <member name="M:MS.Swi.Data.IConstDataBuffer.Clone">
            <summary>
            A clone of the buffer. As all the elements are simple types, this is actually a deep copy.
            </summary>
            <returns>A DataBuffer</returns>
        </member>
        <member name="P:MS.Swi.Data.IConstDataBuffer.Contents">
            <summary>
            A constant copy of the contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataBuffer.SizeUsed">
            <summary>
            The amount of the buffer currently used
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataBuffer.Size">
            <summary>
            The current maximum size of the buffer
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataBuffer.Item(System.UInt32)">
            <summary>
            The value at a specific location in the buffer
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataBuffer">
            <summary>
            Buffer
            	An arbitrary chunk of data, with an implicit maximum size and an explicit size
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.#ctor(System.UInt32)">
            <summary>
            Constructor to create an empty buffer with the specified maximum size
            </summary>
            <param name="maximumSize">The maximum size of the buffer</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.#ctor(System.Byte[],System.UInt32)">
            <summary>
            Constructor to create a buffer based on an existing byte array and the
            amount of that array already in use. Note that the maximum size of the DataBuffer
            is derived in this case from the size of the array.
            </summary>
            <param name="data">The existing byte array (note that null is explicitly handled)</param>
            <param name="sizeUsed">The size of the byte array used.</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.#ctor(System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Constructor to create a buffer based on an existing byte array and the
            amount of that array already in use.
            </summary>
            <param name="data">The existing byte array (note that null is explicitly handled)</param>
            <param name="sizeUsed">The size of the byte array used.</param>
            <param name="maximumSize">The maximum size of the buffer</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.#ctor(MS.Swi.Data.IConstDataBuffer,System.UInt32,System.UInt32)">
            <summary>
            Constructor to create a buffer based on a fragment of an existing data buffer
            </summary>
            <param name="source">The source buffer</param>
            <param name="startPosition">The start position of the fragment</param>
            <param name="sizeUsed">The size of the fragment</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.#ctor(System.Byte[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructor to create a buffer based on a fragment of an existing byte array
            </summary>
            <param name="data">The source buffer</param>
            <param name="startPosition">The start position of the fragment</param>
            <param name="sizeUsed">The size of the byte array used.</param>
            <param name="maximumSize">The maximum size of the buffer</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.ReplaceWithOwnership(System.Byte[])">
            <summary>
            Replace the contents of this DataBuffer by taking ownership of the provided contents. This version
            does NOT change the maximum size of the Buffer, so it allows for auto-truncation.
            </summary>
            <param name="data">The data to adopt</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.ReplaceWithOwnership(System.Byte[],System.UInt32)">
            <summary>
            Replace the contents of this DataBuffer by taking ownership of the provided contents
            </summary>
            <param name="data">The data to adopt</param>
            <param name="maximumSize">The maximum size</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.Replace(MS.Swi.Data.IConstDataBuffer,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Modifier to set the buffer based on an existing data buffer and the
            amount of that array already in use.
            </summary>
            <param name="data">The existing data buffer</param>
            <param name="index">The starting index into the buffer</param>
            <param name="bufferSize">The size of the buffer being created</param>
            <param name="sizeUsed">The size of the byte array used</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.Append(MS.Swi.Data.IConstDataBuffer)">
            <summary>
            Append one DataBuffer onto another
            </summary>
            <param name="data">The data buffer to append</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.Replace(System.Byte[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Modifier to set the buffer based on an existing byte array and the
            amount of that array already in use.
            </summary>
            <param name="data">The existing byte array (note that null is explicitly handled)</param>
            <param name="index">The starting index into the buffer</param>
            <param name="bufferSize">The size of the buffer being created</param>
            <param name="sizeUsed">The size of the byte array used</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.AdjustInternalBuffer(System.UInt32)">
            <summary>
            Adjust the internal buffer to match the size needed
            </summary>
            <param name="sizeNeeded">The size the new buffer should be</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.CopyTo(System.Byte[],System.UInt32)">
            <summary>
            Copy the entire contents to the specified destination. Note that this requires that
            there is sufficient room
            </summary>
            <param name="destination">The destination buffer</param>
            <param name="position">The position in the destination buffer</param>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.ToString">
            <summary>
            Return a string description of the contents of the DataBuffer
            </summary>
            <returns>A string including the contents</returns>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.System#ICloneable#Clone">
            <summary>
            A clone of the buffer. As all the elements are simple types, this is actually a deep copy.
            </summary>
            <returns>A new buffer expressed as an object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataBuffer.Clone">
            <summary>
            A clone of the buffer. As all the elements are simple types, this is actually a deep copy.
            </summary>
            <returns>A DataBuffer</returns>
        </member>
        <member name="P:MS.Swi.Data.DataBuffer.Contents">
            <summary>
            Access to deep copy of the contents of the buffer
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataBuffer.SizeUsed">
            <summary>
            The amount of the buffer used
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataBuffer.Size">
            <summary>
            The maximum size of the buffer
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataBuffer.Item(System.UInt32)">
            <summary>
            Access to individual bytes of the buffer (Set and Get). If the location is beyond the
            current size used, the size used will be extended
            </summary>
        </member>
        <member name="T:MS.Swi.Data.IConstDataTransformations">
            <summary>
            A const interface to a DataTransformations
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IConstDataTransformations.Contains(System.String)">
            <summary>
            Whether or not the set of transformations contains the given transformation
            </summary>
            <param name="name">The transformation name to check</param>
            <returns>True if it contains the transformation, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataTransformations.Clone">
            <summary>
            Clone the IConstDataTransformations into a new DataTransformations
            </summary>
            <returns>The new DataTransformations</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataTransformations.ToXml(System.Xml.XmlDocument)">
            <summary>
            Create an Xml serialization of the object, owned by the specified document
            </summary>
            <param name="owningDocument">The owning document</param>
            <returns>The new XmlElement</returns>
        </member>
        <member name="P:MS.Swi.Data.IConstDataTransformations.Item(System.String)">
            <summary>
            The transformation associated with the name
            </summary>
            <param name="name">The transformation name</param>
            <returns>The transformation</returns>
        </member>
        <member name="T:MS.Swi.Data.DataTransformations">
            <summary>
            The DataTransformations is a mapping of logical names for transformations to
            transformation objects. It is designed to be loaded via Xml, and used in type definitions
            (which are also loaded via Xml)
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.FromXml(MS.Swi.Data.IConstElementDefinitions,System.Xml.XmlElement)">
            <summary>
            Load the Xml serialization into the object, replacing any pre-existing settings.
            </summary>
            <param name="definitions">The token definitions to use in creating the table</param>
            <param name="sourceElement">The XmlElement that contains the object</param>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.ToXml(System.Xml.XmlDocument)">
            <summary>
            Create an Xml serialization of the object, owned by the specified document
            </summary>
            <param name="owningDocument">The owning document</param>
            <returns>The new XmlElement</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.LoadFromXml(MS.Swi.Data.IConstElementDefinitions,System.Xml.XmlElement)">
            <summary>
            Add the specified data into the DataTransformation table, generating an exception if
            there are duplicate entries
            </summary>
            <param name="definitions">The token definitions to use in creating the table</param>
            <param name="sourceElement">The XML element</param>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.LoadTransformations(System.String,MS.Swi.Data.IConstElementDefinitions)">
            <summary>
            Load a set of transformations.  The filename will be searched for first as given,
            then in the local directory, and then in the FCL installation directory.
            </summary>
            <param name="fileName">The filename for the Xml file containing the definitions</param>
            <param name="definitions">The token definitions to use</param>
            <returns>The transformation set</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.#ctor">
            <summary>
            Default constructors
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.#ctor(MS.Swi.Data.DataTransformations)">
            <summary>
            A private copy constructor used to facilitate the Clone() operation
            </summary>
            <param name="source">The source transformations</param>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.Contains(System.String)">
            <summary>
            Whether or not the set of transformations contains the given transformation
            </summary>
            <param name="name">The transformation name to check</param>
            <returns>True if it contains the transformation, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.Add(MS.Swi.Data.IConstDataTransformations)">
            <summary>
            Add another set of DataTransformations into this set
            </summary>
            <param name="transformations">The source transformations</param>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.Add(MS.Swi.Data.DataTransformations)">
            <summary>
            Add another set of DataTransformations into this set
            </summary>
            <param name="transformations">The source transformations</param>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.Add(MS.Swi.Data.DataTransformation)">
            <summary>
            Add an individual DataTransformation into this set
            </summary>
            <param name="transformation">The transformation</param>
            <returns>True if it was added, false if a transformation of the same name was already present</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.Clone">
            <summary>
            The default clone operation
            </summary>
            <returns>The new DataTransformations as an object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformations.MS#Swi#Data#IConstDataTransformations#Clone">
            <summary>
            An explicit clone operation
            </summary>
            <returns>The cloned transformations as a DataTransformations</returns>
        </member>
        <member name="P:MS.Swi.Data.DataTransformations.Item(System.String)">
            <summary>
            The transformation associated with the name
            </summary>
            <param name="name">The transformation name</param>
            <returns>The transformation</returns>
        </member>
        <member name="T:MS.Swi.Data.ContainerElement">
            <summary>
            The ContainerElement class encapsulates the following data about the transformation
            	The output FCL type name
            	The actual output value
            It is used to define the output of a container transformation
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ContainerElement.#ctor(System.String,System.Object)">
            <summary>
            Construct a ContainerElement given the underlying definition and contents. Note that this will
            leave any Identifier associated with the parent token unchanged
            </summary>
            <param name="definitionName">The name of the FCL type definition for the element</param>
            <param name="contents">The actual contents</param>
        </member>
        <member name="M:MS.Swi.Data.ContainerElement.#ctor(System.String,System.Object,System.String)">
            <summary>
            Construct a ContainerElement given the underlying definition and contents, and apply the
            specified Identifier to it when it is extracted. Note that an identifier of null will clear
            any inherited identifier from the parent Token.
            </summary>
            <param name="definitionName">The name of the FCL type definition for the element</param>
            <param name="contents">The actual contents</param>
            <param name="identifier">The identifier, or null if it should be cleared</param>
        </member>
        <member name="P:MS.Swi.Data.ContainerElement.DefinitionName">
            <summary>
            The name of the FCL Definition of the container element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerElement.Contents">
            <summary>
            The actual contents of the container element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerElement.IdentifierWasSpecified">
            <summary>
            Whether or not the caller specified an identifier. If an identifier was specified, then
            the resulting child token will have its identifier replaced (if it was non-null) or cleared
            (if it was null)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerElement.Identifier">
            <summary>
            The identifier associated with the container element
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataTransformation">
            <summary>
            The DataTransformation class provides the rules and functionality that convert
            data from one internal representation to another. This provides the ability to change
            the encoding and to move from the physical encoding to the logical native type.
            
            In some cases, the internal representation format will be the same (i.e. converting
            from a zipped byte array to an unzipped byte array), and the transformation only changes
            the encoding
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.ToXml(System.Xml.XmlDocument)">
            <summary>
            Write the data transformation to Xml
            </summary>
            <param name="owningDocument"></param>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.Create(MS.Swi.Data.IConstElementDefinitions,System.Xml.XmlElement)">
            <summary>
            Construct a DataTransformation object from an Xml description
            </summary>
            <param name="definitions">The definition table to use in finding the FCL definitions</param>
            <param name="transformation">The Xml definition of the transformation</param>
            <returns>The constructed object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.Create(MS.Swi.Data.IConstElementDefinitions,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Construct a DataTransformation object based on the specified parameters
            </summary>
            <param name="definitions">The definition table to use in finding the FCL definitions</param>
            <param name="name">The name of the transformation</param>
            <param name="sourceDefinitionName">The name of the FCL definition the source implements</param>
            <param name="outputDefinitionName">The name of the FCL definition the source implements</param>
            <param name="characteristics">The characteristics of the transformation</param>
            <param name="elementSize">The size of each output element of this transformation type (in terms of its source type )</param>
            <param name="transformationMethodName">The name of the transformation method to use</param>
            <param name="reverseTransformationMethodName">The name of the reverse transformation method to use</param>
            <returns>The constructed object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.Create(MS.Swi.Data.ElementDefinition)">
            <summary>
            Construct a container transformation for the specified output definition
            </summary>
            <param name="outputDefinition">The output definition of the container transformation</param>
            <returns>The transformation</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.Create(MS.Swi.Data.IConstElementDefinitions,System.String,System.String,System.String,System.String,System.UInt32,System.String,System.String)">
            <summary>
            Construct a DataTransformation object based on the specified parameters
            </summary>
            <param name="definitions">The definition table to use in finding the FCL definitions</param>
            <param name="name">The name of the transformation</param>
            <param name="sourceDefinitionName">The name of the FCL definition the source implements</param>
            <param name="outputDefinitionName">The name of the FCL definition the source implements</param>
            <param name="characteristics">The characteristics of the transformation</param>
            <param name="elementSize">The size of each output element of this transformation type (in terms of its source type )</param>
            <param name="transformationMethodName">The name of the transformation method to use</param>
            <param name="reverseTransformationMethodName">The name of the reverse transformation method to use</param>
            <returns>The constructed object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.Equals(System.Object)">
            <summary>
            Determine if two DataTransformations are equal. Because DataTransformation objects
            are immutable, we can do a true Equals override
            </summary>
            <param name="obj">The other object</param>
            <returns>Whether or not they are equal</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.GetHashCode">
            <summary>
            Create a hash code for the DataTransformation
            </summary>
            <returns>The calculated hash code</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.HasCharacteristic(MS.Swi.Data.DataTransformation.CharacteristicsFlags)">
            <summary>
            Does the tramsfpr,atopm have the specified characteristic? If the characteristic is a combination of multiple
            characteristics, it will return true only if all of the characteristics are a match
            </summary>
            <param name="characteristic">The characteristic (or characteristics) to check for</param>
            <returns>True if there is an exact match, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.Transform(System.Object)">
            <summary>
            Transform the source object into the output object
            </summary>
            <param name="source">The source object that is being converted</param>
            <returns>The transformed output object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation.ReverseTransform(System.Object)">
            <summary>
            Transform the output object into a source object
            </summary>
            <param name="output">The object which is the output of a previous Transform call</param>
            <returns>The inversely transformed source object</returns>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.Name">
            <summary>
            The name of the transformation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.Characteristics">
            <summary>
            The characteristics of this transformation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.SourceNativeType">
            <summary>
            The native type of the contents that this transformation consumes
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.SourceDefinition">
            <summary>
            The name of the FCL definition that this transformation consumes
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.OutputNativeType">
            <summary>
            The native type of the contents that this transformation produces
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.OutputDefinition">
            <summary>
            The name of the FCL definition that this transformation produces
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.TransformationDelegateName">
            <summary>
            The name of the transformation delegate
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.ReverseTransformationDelegateName">
            <summary>
            The name of the reverse transformation delegate
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation.ElementSize">
            <summary>
            The size of an element of this transformation output type (considering strings as char[]) 
            in terms of its source type. Note that this is not valid if the Characteristics include 
            VariableSize
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataTransformation.CharacteristicsFlags">
            <summary>
            The set of possible characteristics for a DataTransformation
            </summary>
        </member>
        <member name="F:MS.Swi.Data.DataTransformation.CharacteristicsFlags.None">
            <summary>
            No characteristics apply
            </summary>
        </member>
        <member name="F:MS.Swi.Data.DataTransformation.CharacteristicsFlags.VariableSize">
            <summary>
            The transformation will produce differently sized results depending on
            the actual contents
            </summary>
        </member>
        <member name="F:MS.Swi.Data.DataTransformation.CharacteristicsFlags.PartialTransformationValid">
            <summary>
            Sub-elements that use this transformation can be transformed, and the results will
            be the same if sub-element transformations are combined as they would be if the 
            entire element were to be transformed at once
            </summary>
        </member>
        <member name="T:MS.Swi.Data.ContainerTransformation">
            <summary>
            The ContainerTransformation transforms a single length ContainerElement[] into the underlying
            type, and visa-versa. This is used to handle the container transformations
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ContainerTransformation.#ctor(MS.Swi.Data.ElementDefinition)">
            <summary>
            Construct a DataTransformation object
            </summary>
            <param name="outputDefinition">The FCL definition which represents the output</param>
        </member>
        <member name="M:MS.Swi.Data.ContainerTransformation.Transform(System.Object)">
            <summary>
            Transform the source object into the output object
            </summary>
            <param name="source">The source object that is being converted</param>
            <returns>The transformed output object</returns>
        </member>
        <member name="M:MS.Swi.Data.ContainerTransformation.ReverseTransform(System.Object)">
            <summary>
            Transform the output object(s) into a source object
            </summary>
            <param name="output">The object which is the output of a previous Transform call</param>
            <returns>The inversely transformed source object</returns>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.Name">
            <summary>
            The name of the transformation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.Characteristics">
            <summary>
            The characteristics of this transformation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.ElementSize">
            <summary>
            The size of an element of this transformation output type (considering strings as char[]) 
            in terms of its source type. Note that this is not valid if the Characteristics include 
            VariableSize
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.SourceNativeType">
            <summary>
            The native type of the contents that this transformation consumes
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.SourceDefinition">
            <summary>
            The FCL definition that this transformation consumes
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.OutputNativeType">
            <summary>
            The native type of the contents that this transformation produces
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.OutputDefinition">
            <summary>
            The name of the FCL definition that this transformation produces
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.TransformationDelegateName">
            <summary>
            The name of the transformation delegate, which is not used in a
            container transformation, and so is an empty string
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ContainerTransformation.ReverseTransformationDelegateName">
            <summary>
            The name of the reverse transformation delegate, which is not used in a
            container transformation, and so is an empty string
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataTransformation`2">
            <summary>
            The DataTransformation class provides the rules and functionality that convert
            data from one internal representation to another. This provides the ability to change
            the encoding and to move from the physical encoding to the logical native type.
            
            In some cases, the internal representation format will be the same (i.e. converting
            from a zipped byte array to an unzipped byte array), and the transformation only changes
            the encoding
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation`2.#ctor(System.String,System.String,System.UInt32,MS.Swi.Data.ElementDefinition,MS.Swi.Data.ElementDefinition,System.String,System.String)">
            <summary>
            Construct a DataTransformation object
            </summary>
            <param name="name">The name of the transformation</param>
            <param name="characteristics">The characteristics of the transformation as a string</param>
            <param name="elementSize">The size of an output element in terms of source elements</param>
            <param name="sourceDefinition">The FCL definition which represents the source</param>
            <param name="outputDefinition">The FCL definition which represents the output</param>
            <param name="transformationMethod">The transformation method name</param>
            <param name="reverseTransformationMethod">The reverse transformation method name</param>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation`2.Transform(System.Object)">
            <summary>
            Transform the source object into the output object
            </summary>
            <param name="source">The source object that is being converted</param>
            <returns>The transformed output object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation`2.Transform(`0)">
            <summary>
            Transform the source object into the output object
            </summary>
            <param name="source">The source object that is being converted</param>
            <returns>The transformed output object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation`2.ReverseTransform(System.Object)">
            <summary>
            Transform the output object(s) into a source object
            </summary>
            <param name="output">The object which is the output of a previous Transform call</param>
            <returns>The inversely transformed source object</returns>
        </member>
        <member name="M:MS.Swi.Data.DataTransformation`2.ReverseTransform(`1)">
            <summary>
            Transform the output object(s) into a source object
            </summary>
            <param name="output">The objects which are the outputs if a previous Transform call</param>
            <returns>The inversely transformed source object</returns>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.Name">
            <summary>
            The name of the transformation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.Characteristics">
            <summary>
            The characteristics of this transformation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.ElementSize">
            <summary>
            The size of an element of this transformation output type (considering strings as char[]) 
            in terms of its source type. Note that this is not valid if the Characteristics include 
            VariableSize
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.SourceNativeType">
            <summary>
            The native type of the contents that this transformation consumes
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.SourceDefinition">
            <summary>
            The FCL definition that this transformation consumes
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.OutputNativeType">
            <summary>
            The native type of the contents that this transformation produces
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.OutputDefinition">
            <summary>
            The name of the FCL definition that this transformation produces
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.TransformationDelegateName">
            <summary>
            The name of the transformation delegate
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataTransformation`2.ReverseTransformationDelegateName">
            <summary>
            The name of the reverse transformation delegate
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataTransformation`2.TransformationDelegate">
            <summary>
            A function which transforms the source data into the output object 
            </summary>
            <param name="source">The source object</param>
            <returns>The output object</returns>
        </member>
        <member name="T:MS.Swi.Data.DataTransformation`2.ReverseTransformationDelegate">
            <summary>
            A function which transforms the output object back into the source data
            </summary>
            <param name="output">The previous transformed output data</param>
            <returns>The reconstructed source object</returns>
        </member>
        <member name="T:MS.Swi.Data.TokenPosition">
             <summary>
             The TokenPosition defines the position of a block of data in a buffer in such a way that:
            		Sequences of zero-length fields are valid
                 Sequences of adjacent tokens can be swapped without causing conflicts
            		Insertions of new tokens are always valid
            		The original source buffer can always be determined
            		Any two positions of different lengths MUST differ before the shorter terminates
            
             This replaces the GroupOrdinalPosition and OrdinalPosition fields of all previous CTF
             implementations
             </summary>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.#ctor">
            <summary>
            Internal constructor for creating the parent and sibling positions
            </summary>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.#ctor(System.String)">
            <summary>
            Construct a TokenPosition from a dotted string representation. This will throw an
            exception if the string cannot be parsed. Note that all elements both a root and
            a terminal node
            </summary>
            <param name="positionRepresentation">The representation in the #.#.#.#... format</param>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Construct a token position given a root position, and the sequence position of the
            sub-element. This is used when doing top level constructions of data
            </summary>
            <param name="rootPosition">The root element</param>
            <param name="sequencePosition">The sequence of this position among the children of the parent</param>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.#ctor(MS.Swi.Data.TokenPosition,System.UInt32)">
            <summary>
            Construct a token position given a parent, and the sequence position of the
            sub-element. This is primarily used when splitting or changing data
            </summary>
            <param name="parent">The parent position</param>
            <param name="sequencePosition">The sequence of this position among the children of the parent</param>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.IsChildOf(MS.Swi.Data.TokenPosition)">
            <summary>
            Whether or not this position is a child of a given token position. For the purposes
            of this test, we will consider a TokenPosition to be a child of itself.
            </summary>
            <param name="position">The token position</param>
            <returns>True if it is a child of that position, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.IsChildOf(System.UInt32)">
            <summary>
            Whether or not this position is a child of a given root position
            </summary>
            <param name="rootPosition"></param>
            <returns>True if the root position of the node is the same as the given root position</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.Equals(System.Object)">
            <summary>
            Determine if this is equal to another object
            </summary>
            <param name="obj">The other object</param>
            <returns>True if they are equal, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.GetHashCode">
            <summary>
            Compute the hash code for the object. Note that two objects which are equal MUST
            have the same Hash Code, so we need to ignore trailing zeros
            </summary>
            <returns>The computed hash code</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.ToString">
            <summary>
            Convert the TokenPosition to string format
            </summary>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.Data.TokenPosition.CompareTo(System.Object)">
            <summary>
            Compare the TokenPosition to another object. Note that for the sake of comparison x and x.0 are 
            considered equal
            </summary>
            <param name="obj">The object for comparison</param>
            <returns>Negative number if this instance is less than obj, Zero if they are the same, and Positive number of this instance is greater than obj </returns>
        </member>
        <member name="P:MS.Swi.Data.TokenPosition.Parent">
            <summary>
            The parent position of this position, or null if this position cannot have a parent
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenPosition.Predecessor">
            <summary>
            The previous token position to this position, or null if there cannot be a predecessor
            node
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenPosition.Successor">
            <summary>
            The next token position after this one, or null if we are already at the maximum
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenPosition.Vector">
            <summary>
            The underlying vector
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenPosition.RootPosition">
            <summary>
            The root position of the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenPosition.TerminalPosition">
            <summary>
            The terminal position in the node
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenPosition.Depth">
            <summary>
            The depth of the position
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenPosition.Item(System.Int32)">
            <summary>
            The value it a given sequence position 
            </summary>
            <param name="sequencePosition">The sequence position</param>
            <returns>The value</returns>
        </member>
        <member name="T:MS.Swi.Data.TokenRestriction">
            <summary>
            The TokenRestriction class defines format specific limits for a data token.
            This information is available to the strategy and to manipulations to allow for smarter
            fuzzing of the data.
            </summary>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.#ctor(MS.Swi.Data.TokenRestriction)">
            <summary>
            Internal copy constructor for a TokenRestriction object
            </summary>
            <param name="source">The source token</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.#ctor(System.String,System.Type)">
            <summary>
            Parse the restrictions string into an individual restriction<br/>
            
            The format of the restrictions is:<br/>
            	Value			Single valid value<br/>
            	Min_Max			Exclusive value range<br/>
            	Min+Max			Inclusive value range<br/>
            	Min-Max			Exclusive size range<br/>
            	Min=Max			Inclusive size range<br/>
            	Value|Value		Set of valid values<br/><br/>
            	
            </summary>
            <param name="restriction">The restriction string</param>
            <param name="valueType">The type of the item (for content restrictions). For size restrictions, we always use a uint</param>
            <returns>The restriction</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.#ctor(MS.Swi.Data.TokenRestriction.TokenRestrictionType,System.Object,System.Object)">
            <summary>
            Construct a content restriction based on the type and ranges
            </summary>
            <param name="type">The type of restriction</param>
            <param name="minimum">The minimum range endpoint</param>
            <param name="maximum">The maximum range endpoint</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.#ctor(MS.Swi.Data.TokenRestriction.TokenRestrictionType,System.UInt32,System.UInt32)">
            <summary>
            Construct a size or content restriction based on a range
            </summary>
            <param name="type">The type of restriction</param>
            <param name="minimum">The minimum range endpoint</param>
            <param name="maximum">The maximum range endpoint</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.#ctor(System.Object[])">
            <summary>
            Construct a content restriction based a set of valid values
            </summary>
            <param name="validValues">The valid values</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.IsValidValue(System.Object)">
            <summary>
            Determine if an object is a valid value
            </summary>
            <param name="whichValue">The object to check</param>
            <returns>True if it is, false if it is not</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.IsTheSameAs(System.Object)">
            <summary>
            Determine if two restrictions are the same
            </summary>
            <param name="otherObject">The compared object</param>
            <returns>True if they are equal, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.AddValidValues(MS.Swi.Data.TokenRestriction)">
            <summary>
            Integrate the other valid values. Note that this may have duplicates, we are not filtering
            for them because of the expense
            </summary>
            <param name="restriction">The restriction whose values are being added</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.System#ICloneable#Clone">
            <summary>
            Clone this token restriction
            </summary>
            <returns>The newly created clone of this token restriction</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenRestriction.Clone">
            <summary>
            Clone this token restriction
            </summary>
            <returns>A newly created clone of this token restriction</returns>
        </member>
        <member name="P:MS.Swi.Data.TokenRestriction.RestrictionType">
            <summary>
            The type of restriction being enforced
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenRestriction.Minimum">
            <summary>
            The restricted minimum value
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenRestriction.Maximum">
            <summary>
            The restricted maximum value
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenRestriction.ValidValues">
            <summary>
            Get a copy of the set of valid values
            </summary>
            <returns>A shallow copy of the set of valid values</returns>
        </member>
        <member name="T:MS.Swi.Data.TokenRestriction.TokenRestrictionType">
            <summary>
            The types of content restrictions. 
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenRestriction.TokenRestrictionType.Invalid">
            <summary>
            The default invalid value
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenRestriction.TokenRestrictionType.SizeRangeInclusive">
            <summary>
            The content restriction is a size range, inclusive of the end points
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenRestriction.TokenRestrictionType.SizeRangeExclusive">
            <summary>
            The content restriction is a size range, exclusive of the end points
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenRestriction.TokenRestrictionType.ValueRangeInclusive">
            <summary>
            The content restriction is a value range, inclusive of the end points
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenRestriction.TokenRestrictionType.ValueRangeExclusive">
            <summary>
            The content restriction is a value range, exclusive of the end points
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenRestriction.TokenRestrictionType.ValidValues">
            <summary>
            The content restriction is a set of valid values
            </summary>
        </member>
        <member name="T:MS.Swi.Data.IConstTokenRestrictions">
            <summary>
            Public const interface to the TokenRestrictions class
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IConstTokenRestrictions.SelectRandomSizeRestriction(System.Random)">
            <summary>
            Select a random valid size restriction and return it to the caller, using the provided 
            random number generator
            </summary>
            <param name="prnGenerator">The generator to use</param>
            <returns>The restriction selected, or null if there are no size restrictions</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstTokenRestrictions.SelectRandomContentRestriction(System.Random)">
            <summary>
            Select a random valid content restriction and return it to the caller, using the provided 
            random number generator
            </summary>
            <param name="prnGenerator">The generator to use</param>
            <returns>The restriction selected, or null if there are no content restrictions</returns>
        </member>
        <member name="P:MS.Swi.Data.IConstTokenRestrictions.SizeRestrictions">
            <summary>
            The list of all size restrictions
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstTokenRestrictions.ValueRangeRestrictions">
            <summary>
            The list of all value range restrictions
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstTokenRestrictions.ValidValuesRestriction">
            <summary>
            The valid values restriction (or null if it does not exist)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstTokenRestrictions.HasSizeRestrictions">
            <summary>
            Whether or not the restriction set includes size restrictions
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstTokenRestrictions.HasContentRestrictions">
            <summary>
            Whether or not the restriction set includes content restrictions
            </summary>
        </member>
        <member name="T:MS.Swi.Data.TokenRestrictions">
            <summary>
            The set of restrictions that apply to a token
            </summary>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.#ctor(MS.Swi.Data.TokenRestrictions)">
            <summary>
            Private copy constructor
            </summary>
            <param name="source">The source restrictions</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.#ctor(System.Type,System.String[])">
            <summary>
            Create restrictions based on a sequence of format strings and value type information
            </summary>
            <param name="valueType">The native type of the object</param>
            <param name="restrictions">The restriction definitions</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.#ctor(MS.Swi.Data.TokenRestriction[])">
            <summary>
            Create token restrictions based on a set of existing restrictions
            </summary>
            <param name="restrictions"></param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.#ctor(MS.Swi.Data.Generic.ConstList{MS.Swi.Data.TokenRestriction},MS.Swi.Data.Generic.ConstList{MS.Swi.Data.TokenRestriction},MS.Swi.Data.TokenRestriction)">
            <summary>
            Construct a set of token restrictions based on the three categories
            </summary>
            <param name="sizeRestrictions">Size restrictions (or null)</param>
            <param name="valueRangeRestrictions">Value range restrictions (or null)</param>
            <param name="validValues">Valid values (or null)</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.SelectRandomContentRestriction(System.Random)">
            <summary>
            Select a random valid content restriction and return it to the caller, using the provided 
            random number generator
            </summary>
            <param name="prnGenerator">The generator to use</param>
            <returns>The restriction selected, or null if there are no content restrictions</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.SelectRandomSizeRestriction(System.Random)">
            <summary>
            Select a random valid size restriction and return it to the caller, using the provided 
            random number generator
            </summary>
            <param name="prnGenerator">The generator to use</param>
            <returns>The restriction selected, or null if there are no size restrictions</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.Add(MS.Swi.Data.TokenRestriction)">
            <summary>
            Add a restriction to the set of Token Restrictions
            </summary>
            <param name="restriction">The new restrictions</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.Add(MS.Swi.Data.IConstTokenRestrictions)">
            <summary>
            Add the existing restriction set, replacing any current size restrictions
            with new size restrictions if they exist, and preserving the size restrictions
            if not, and adding the content restrictions
            </summary>
            <param name="restrictions">The restrictions</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.ReplaceSizeRestrictions(MS.Swi.Data.IConstTokenRestrictions)">
            <summary>
            Replace the existing size restrictions with the size restrictions from the new set
            IF and ONLY IF they exist. If there are no size restrictions in the new
            set, nothing is changed
            </summary>
            <param name="restrictions">The new restrictions</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.AddContentRestrictions(MS.Swi.Data.IConstTokenRestrictions)">
            <summary>
            Add the content restrictions
            </summary>
            <param name="restrictions">The restrictions</param>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.System#ICloneable#Clone">
            <summary>
            Clone these token restrictions
            </summary>
            <returns>The newly created clone of these token restrictions</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenRestrictions.Clone">
            <summary>
            Clone these token restrictions
            </summary>
            <returns>A newly created clone of these token restrictions</returns>
        </member>
        <member name="P:MS.Swi.Data.TokenRestrictions.SizeRestrictions">
            <summary>
            The list of all size restrictions
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenRestrictions.ValueRangeRestrictions">
            <summary>
            The list of all value range restrictions
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenRestrictions.ValidValuesRestriction">
            <summary>
            The valid values restriction (or null if it does not exist)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenRestrictions.HasSizeRestrictions">
            <summary>
            Whether or not the restriction set includes size restrictions
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenRestrictions.HasContentRestrictions">
            <summary>
            Whether or not the restriction set includes content restrictions
            </summary>
        </member>
        <member name="T:MS.Swi.InstallationManagement">
            <summary>
            The FCL Management class is a singleton wrapper for FCL installation management functionality
            that is actually implemented in the CTFInstallationManager assembly. It is provided here to allow
            runtime access by the very components that the actual implementation is dependent on. 
            </summary>
        </member>
        <member name="M:MS.Swi.InstallationManagement.#cctor">
            <summary>
            On use of the installation management shim, make sure that we have the
            actual implementation loaded
            </summary>
        </member>
        <member name="M:MS.Swi.InstallationManagement.#ctor">
            <summary>
            FCL Management is a container for static helper functions, and does not
            have a valid instance
            </summary>
        </member>
        <member name="M:MS.Swi.InstallationManagement.LoadAssembliesFromFclDirectories">
            <summary>
            Load the assemblies from the FCL directories for this system
            </summary>
        </member>
        <member name="M:MS.Swi.InstallationManagement.HasDirectoryAssigned">
            <summary>
            Determine if the directory has been assigned for this installation
            </summary>
            <returns>True if one was assigned, false if not </returns>
        </member>
        <member name="M:MS.Swi.InstallationManagement.GetDirectory">
            <summary>
            Get the directory associated with the assembly, or null if it doesn't exist
            </summary>
            <returns>The associated directory, or null if it wasn't set</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagement.SetDirectory(System.String)">
            <summary>
            Set the directory associated with this assembly 
            </summary>
            <param name="directoryPath">The directory path</param>
            <returns>True if it worked, false if not</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagement.ClearDirectory">
            <summary>
            Clear the directory assigned to this installation
            </summary>
        </member>
        <member name="M:MS.Swi.InstallationManagement.InstallFiles(System.String,System.String[])">
            <summary>
            Install files from the source into the managed storage location
            </summary>
            <param name="sourceDirectory">The source directory</param>
            <param name="files">The files (including wildcards) to be installed</param>
            <returns>The set of files installed, or null if they could not all be installed.
            Each subdirectory is a key, and the value is the set of files in that directory.</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagement.UninstallFiles(System.String[])">
            <summary>
            Uninstall files from the managed store location
            </summary>
            <param name="files">The files (including wildcards) to be removed</param>
            <returns>True if none of the named files remain in the storage, false if an error occurred or no storage is defined</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagement.RemoveStorageDirectory">
            <summary>
            Remove the storage directory. Note that this does NOT clear the
            storage directory assignment, that must be done separately, but it
            does delete all of the files in the storage directory and remove
            the directory
            </summary>
        </member>
        <member name="M:MS.Swi.InstallationManagement.DefaultStorageDirectory">
            <summary>
            Build the default storage directory for the current version
            </summary>
            <returns>The calculated storage directory, or null if the attempt to build a directory failed</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagement.IncrementInstallationCount">
            <summary>
            Increment the installation count
            </summary>
            <returns>The installation count, or 0xffffffff if an error occurred</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagement.DecrementInstallationCount">
            <summary>
            Decrement the installation count
            
            </summary>
            <returns>The installation count, or 0xffffffff if an error occurred</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagement.RemoveConfigurationInformation">
            <summary>
            Remove the registry information for this installation
            </summary>
        </member>
        <member name="T:MS.Swi.Data.IConstTokenReference">
            <summary>
            The read-only access definition for the TokenReference class.
            Note that when accessing the referenced tokens, they are unsorted.
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstTokenReference.ReferenceType">
            <summary>
            The type of reference
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstTokenReference.Count">
            <summary>
            The number of elements that make up the reference
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstTokenReference.References">
            <summary>
            The referenced contents
            </summary>
        </member>
        <member name="T:MS.Swi.Data.TokenReference">
            <summary>
            The definition of a reference from one token to another, handling cases where the 
            tokens are split. Note that when accessing the referenced tokens, they are unsorted.
            </summary>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.#ctor(MS.Swi.Data.TokenReference.TokenReferenceType,MS.Swi.Data.Token[])">
            <summary>
            Create a new TokenReference to a specific token
            </summary>
            <param name="referenceType">The reference type</param>
            <param name="referencedTokens">The referenced token</param>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.#ctor(MS.Swi.Data.TokenReference.TokenReferenceType,MS.Swi.Data.DataContents[])">
            <summary>
            Create a new TokenReference to a specific contents
            </summary>
            <param name="referenceType">The reference type</param>
            <param name="referencedContents">The referenced contents</param>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.#ctor(MS.Swi.Data.TokenReference.TokenReferenceType,System.Collections.Generic.List{MS.Swi.Data.Token})">
            <summary>
            Create a new TokenReference to a specific token
            </summary>
            <param name="referenceType">The reference type</param>
            <param name="referencedTokens">The referenced token</param>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.#ctor(MS.Swi.Data.TokenReference.TokenReferenceType,System.Collections.Generic.List{MS.Swi.Data.DataContents})">
            <summary>
            Create a new TokenReference to a specific contents
            </summary>
            <param name="referenceType">The reference type</param>
            <param name="referencedContents">The referenced contents</param>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.CloneReferences">
            <summary>
            Provide a copy of the reference list
            </summary>
            <returns>The copied reference list</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.Apply">
            <summary>
            Apply the reference. This was split out from the original creation of the reference to handle
            the usage pattern in which references are created, but not necessarily applied
            </summary>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.RemoveInvalidReferences(MS.Swi.Data.Token,MS.Swi.Data.IDataContentsInformationSource)">
            <summary>
            Remove from the reference any DataContents which are no longer present in the DataMap, based
            on the information provided, or for which the references are now no longer calculable
            </summary>
            <param name="owner">The Token which owns this reference </param>
            <param name="informationSource">The source of information about the contents</param>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.System#ICloneable#Clone">
            <summary>
            Clone the TokenReference
            </summary>
            <returns>The newly created token reference</returns>
        </member>
        <member name="M:MS.Swi.Data.TokenReference.Clone">
            <summary>
            Clone the TokenReference
            </summary>
            <returns>The newly created token reference</returns>
        </member>
        <member name="P:MS.Swi.Data.TokenReference.ReferenceType">
            <summary>
            The type of reference
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenReference.Count">
            <summary>
            The number of tokens that make up the reference
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenReference.MS#Swi#Data#IConstTokenReference#References">
            <summary>
            Allow the enumeration of the references
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenReference.References">
            <summary>
            Allow the enumeration of the references
            </summary>
        </member>
        <member name="T:MS.Swi.Data.TokenReference.TokenReferenceType">
            <summary>
            The type of reference
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenReference.TokenReferenceType.NoReference">
            <summary>
            The requisite zero value, in this case indicating that we have no reference at all
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenReference.TokenReferenceType.Position">
            <summary>
            The reference is to the start position of the contents
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenReference.TokenReferenceType.RelativePosition">
            <summary>
            The reference is to the start position of the contents relative to the start position of this contents
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenReference.TokenReferenceType.Size">
            <summary>
            The reference is to the size of the contents
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenReference.TokenReferenceType.Contents">
            <summary>
            The reference is to the contents
            </summary>
        </member>
        <member name="F:MS.Swi.Data.TokenReference.TokenReferenceType.Children">
            <summary>
            The reference is to the number of descendents the contents has
            </summary>
        </member>
        <member name="T:MS.Swi.Data.IConstEncapsulation">
            <summary>
            The cont interface to an Encapsulation. While Encapsulations are themselves immutable (and so
            would not ordinarily require an IConst style interface, this provides interface serves to 
            ensure that all data pulled from an IConstEncapsulation is also either immutable or IConst in nature.
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IConstEncapsulation.FindReferencedTokens(System.String)">
            <summary>
            Find all the tokens referenced as part of the encapsulation, under the given label
            </summary>
            <param name="label">The specified label</param>
            <returns>The list of tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstEncapsulation.FindReferencedTokens">
            <summary>
            Find all tokens referenced as part of the encapsulation
            </summary>
            <returns>The list of tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstEncapsulation.GetValidDefinitions">
            <summary>
            Construct a list of all of the possible valid definitions for this encapsulation
            </summary>
            <returns>The list of valid definitions</returns>
        </member>
        <member name="P:MS.Swi.Data.IConstEncapsulation.References">
            <summary>
            The references of the Encapsulation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstEncapsulation.ReferenceList">
            <summary>
            All of the references of the encapsulation, expressed as a list
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstEncapsulation.Definition">
            <summary>
            The definition of the Encapsulation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstEncapsulation.Identifier">
            <summary>
            The identifier associated with the encapsulation
            </summary>
        </member>
        <member name="T:MS.Swi.Data.Encapsulation">
            <summary>
            An encapsulation is a reference
            </summary>
        </member>
        <member name="M:MS.Swi.Data.Encapsulation.#ctor(MS.Swi.Data.ElementDefinition,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{MS.Swi.Data.DataContents}})">
            <summary>
            Construct the encapsulation given a set of references
            </summary>
            <param name="definition">The encapsulation definition to use</param>
            <param name="identifier">The identifier for the encapsulation (null will be silently changed to an empty string)</param>
            <param name="references">The references. Note that the Encapsulation will take ownership of the underlying lists after this is called</param>
        </member>
        <member name="M:MS.Swi.Data.Encapsulation.FindReferencedTokens(System.String)">
            <summary>
            Find all the tokens referenced as part of the encapsulation, under the given label
            </summary>
            <param name="label">The specified label</param>
            <returns>The list of tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.Encapsulation.FindReferencedTokens">
            <summary>
            Find all tokens referenced as part of the encapsulation
            </summary>
            <returns>The list of tokens</returns>
        </member>
        <member name="M:MS.Swi.Data.Encapsulation.GetValidDefinitions">
            <summary>
            Construct a list of all of the possible valid definitions for this encapsulation
            </summary>
            <returns>The list of valid definitions</returns>
        </member>
        <member name="M:MS.Swi.Data.Encapsulation.Equals(System.Object)">
            <summary>
            Do two Encapsulation objects have the same contents
            </summary>
            <param name="otherObject">The encapsulation to compare against</param>
            <returns>True if they have the same contents, False if not</returns>
        </member>
        <member name="M:MS.Swi.Data.Encapsulation.IsEquivalentTo(MS.Swi.Data.Encapsulation)">
            <summary>
            Determine if this encapsulation is equivalent to another. Encapsulations are equivalent if one is a
            refinement of the other and they include the same references. Note that this means that differences
            in identifier are unimportant.
            </summary>
            <param name="otherEncapsulation">The other encapsulation</param>
            <returns>True if they are equivalent, false otherwise</returns>
        </member>
        <member name="M:MS.Swi.Data.Encapsulation.GetHashCode">
            <summary>
            The hashcode for the Encapsulation
            </summary>
            <returns>The calculated hash code</returns>
        </member>
        <member name="M:MS.Swi.Data.Encapsulation.RemoveInvalidReferences(MS.Swi.Data.IDataContentsInformationSource)">
            <summary>
            Remove any references inside of the encapsulation that are to DataContents that no longer exist
            </summary>
            <param name="informationSource">The information source to query for the status of a given DataContents</param>
        </member>
        <member name="P:MS.Swi.Data.Encapsulation.References">
            <summary>
            The references of the Encapsulation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Encapsulation.ReferenceList">
            <summary>
            All of the references of the encapsulation, expressed as a list
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Encapsulation.MS#Swi#Data#IConstEncapsulation#References">
            <summary>
            The references of the Encapsulation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Encapsulation.MS#Swi#Data#IConstEncapsulation#ReferenceList">
            <summary>
            All of the references of the encapsulation, expressed as a list
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Encapsulation.Definition">
            <summary>
            The definition of the Encapsulation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.Encapsulation.Identifier">
            <summary>
            The value associated with the encapsulation
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.Add(MS.Swi.Data.DataContents)">
            <summary>
            Add a DataContents element to the state table
            </summary>
            <param name="contents">The contents to add</param>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.Contains(MS.Swi.Data.DataContents)">
            <summary>
            Whether or not the table already contains the specified contents
            </summary>
            <param name="contents">The contents</param>
            <returns>True if it is already contained, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.IndexOfPosition(MS.Swi.Data.TokenPosition)">
            <summary>
            The index ordinal for a given token position
            </summary>
            <param name="position">The token position</param>
            <returns>The index ordinal</returns>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.SetTokenAssociations">
            <summary>
            Set the associations between leaf states and tokens
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.ResolveOrphanedStates(MS.Swi.Data.IConstDataMap)">
            <summary>
            Resolve any states that have been orphaned out
            </summary>
            <param name="sourceMap">The source data map</param>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.InitializePositionsForResolution">
            <summary>
            Initialize the positions of all known locations in the state table. Note that this should
            only be run once, and it requires that the token associations already be set. This does NOT
            clear other positions, it assumes it is only run once per state table
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.RemoveInvalidReferences(MS.Swi.Data.IDataContentsInformationSource)">
            <summary>
            Fix up any token references to contents that no longer exist in the modified DataMap, or which
            can no longer be handled due to changes in the DataMap
            </summary>
            <param name="informationSource">The information source to use for the fixup</param>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.Item(MS.Swi.Data.DataContents)">
            <summary>
            Contents state indexed by contents
            </summary>
            <param name="index">The contents</param>
            <returns>The state</returns>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.Item(MS.Swi.Data.TokenPosition)">
            <summary>
            Contents state of the contents associated with the token position
            </summary>
            <param name="position">The index position</param>
            <returns>The contents state</returns>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.Item(System.Int32)">
            <summary>
            Contents state indexed by the ordinal associated with the token position
            </summary>
            <param name="index">The index</param>
            <returns>The contents state</returns>
        </member>
        <member name="T:MS.Swi.Data.DataContentsStateTable.State">
            <summary>
            The state information for each contents node
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.#ctor(MS.Swi.Data.DataContentsStateTable,MS.Swi.Data.DataContents)">
            <summary>
            Construct a new DataContentsState
            </summary>
            <param name="associatedTable">The table the state is a part of</param>
            <param name="associatedContents">The contents this state is associated with</param>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.IsOrphan(MS.Swi.Data.IConstDataMap)">
            <summary>
            Whether or not this state was orphaned by other manipulations
            </summary>
            <param name="sourceMap">The DataMap to check against</param>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.CalculateRelativePosition(MS.Swi.Data.DataContents)">
            <summary>
            Calculate the relative position between this contents and the referenced contents
            </summary>
            <param name="referencedContents">The referenced contents</param>
            <returns>The relative position</returns>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.IsResolvable">
            <summary>
            Is this data contents element resolvable
            </summary>
            <returns>True if the element is resolvable, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.ClearBaseTokenPosition">
            <summary>
            Reset the BaseTokenPosition to null
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.ClearContents">
            <summary>
            Clear the contents, flagging them as cleared, for garbage collection
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.SetToInitialPosition(System.Collections.Generic.List{MS.Swi.Data.DataContents})">
            <summary>
            Set the state to its initial position. Note that this REQUIRES that it is called
            in order on the states to function correctly. This works by checking to see if there
            is already a position resolved for this contents PositionBase, and if there is not, 
            setting this position to zero and resolving the position base
            </summary>
            <param name="resolvedBasePositions">The list of already resolved base positions</param>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.RemoveInvalidReferencesInAssociatedToken(MS.Swi.Data.IDataContentsInformationSource)">
            <summary>
            Fixup any references in the associated token
            </summary>
            <param name="informationSource">The information source to use for the fixup</param>
        </member>
        <member name="M:MS.Swi.Data.DataContentsStateTable.State.UpdateSiblingPositions">
            <summary>
            Update the positions of Siblings for the DataContents associated with this State
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.Table">
            <summary>
            The parent state table
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.IsLeaf">
            <summary>
            Whether or not this state is a leaf state (i.e. directly associated with a token)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.IsSizeDetermined">
            <summary>
            Is the size of the resolved contents known? Note that
            this is the size of the contents object in its native units
            by the type (i.e. if it is a string, the size is in characters)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.IsPositionDetermined">
            <summary>
            Is the position of the resolved contents known? Note that
            this is the position of the contents object within its root element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.AreContentsDetermined">
            <summary>
            Are the contents determined?
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.HoldFurtherResolution">
            <summary>
            Whether or not any DataMap resolution should proceed past this DataContents at this time. This
            is used to hold resolution until an Encapsulation can resolve all of its contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.SetSizeWhenContentsAreDetermined">
            <summary>
            Whether or not the size of the item should be set when its contents are determined
            (if that is possible).
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.Contents">
            <summary>
            The resolved contents of the contents object
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.Position">
            <summary>
            The position of the contents. Note that
            this is the position of the contents object its root element, indexed
            in bytes
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.Size">
            <summary>
            The size of the contents. Note that this is in bytes, regardless of the actual
            form of the data
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.BaseTokenPosition">
            <summary>
            The base token position for this contents (i.e. the earliest of its child positions)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContentsStateTable.State.Transformation">
            <summary>
            The transformation associated with this data child
            </summary>
        </member>
        <member name="T:MS.Swi.Data.EncapsulationAttackInformation">
            <summary>
            The attack details for a given encapsulation
            </summary>
        </member>
        <member name="M:MS.Swi.Data.EncapsulationAttackInformation.#ctor(MS.Swi.Data.Encapsulation,MS.Swi.Data.ElementDefinition,MS.Swi.Data.DataContentsStateTable)">
            <summary>
            Construct attack information specifying that the encapsulation should be attacked as the specified
            definition (or null, if the definition is unimportant). Note that if there is an existing encapsulation
            that is being attacked that shares any of the same references, we will silently default to not attack.
            </summary>
            <param name="encapsulation">The encapsulation being attacked</param>
            <param name="definition">The target definition of that encapsulation (or null, to use the default)</param>
            <param name="contentsTable">The content mapping table that is managing the attack results</param>
        </member>
        <member name="M:MS.Swi.Data.EncapsulationAttackInformation.#ctor(MS.Swi.Data.Encapsulation,MS.Swi.Data.DataMapResolver.AttackType)">
            <summary>
            A non-contents attack on the encapsulation (either do not attack, or only attack the 
            structure)
            </summary>
            <param name="encapsulation">The specified encapsulation</param>
            <param name="attackType">The attack type</param>
        </member>
        <member name="M:MS.Swi.Data.EncapsulationAttackInformation.PlaceContentHolds">
            <summary>
            Place holds on the contents that the encapsulation requires, preventing further resolution
            </summary>
        </member>
        <member name="M:MS.Swi.Data.EncapsulationAttackInformation.ReleaseContentHolds">
            <summary>
            Release holds on the contents that the encapsulation requires, allowing further resolution
            </summary>
        </member>
        <member name="M:MS.Swi.Data.EncapsulationAttackInformation.RequiredHoldsConflict">
            <summary>
            Check for existing content holds that would indicate another encapsulation already is 
            attacking some of the values we would be using
            </summary>
        </member>
        <member name="M:MS.Swi.Data.EncapsulationAttackInformation.IsResolvable">
            <summary>
            Determine if the encapsulation is currently resolvable
            </summary>
            <returns>True if all of the required contents are known, and we should attack, and aren't already resolved</returns>
        </member>
        <member name="P:MS.Swi.Data.EncapsulationAttackInformation.Attack">
            <summary>
            Whether or not the target encapsulation should be attacked
            </summary>
        </member>
        <member name="P:MS.Swi.Data.EncapsulationAttackInformation.IsResolved">
            <summary>
            Whether or not the encapsulation is resolved. By definition, if no attack is going to happen,
            it was resolved.
            </summary>
        </member>
        <member name="P:MS.Swi.Data.EncapsulationAttackInformation.TargetEncapsulation">
            <summary>
            The target encapsulation
            </summary>
        </member>
        <member name="P:MS.Swi.Data.EncapsulationAttackInformation.TargetDefinition">
            <summary>
            The target definition to be used for the attack
            </summary>
        </member>
        <member name="T:MS.Swi.Data.TokenAttackInformation">
            <summary>
            The attack details for a given token
            </summary>
        </member>
        <member name="M:MS.Swi.Data.TokenAttackInformation.#ctor(MS.Swi.Data.Token,MS.Swi.Data.ElementDefinition)">
            <summary>
            Construct the attack information for the token. Note that if we cannot get to the requested
            data type, we will turn this into a no-attack
            </summary>
            <param name="token">The token</param>
            <param name="definition">The preferred target definition</param>
        </member>
        <member name="M:MS.Swi.Data.TokenAttackInformation.#ctor(MS.Swi.Data.Token,MS.Swi.Data.DataMapResolver.AttackType)">
            <summary>
            A non-contents attack on the token (either do not attack, or only attack the 
            structure)
            </summary>
            <param name="token">The token</param>
            <param name="attack">The attack type</param>
        </member>
        <member name="P:MS.Swi.Data.TokenAttackInformation.Attack">
            <summary>
            Whether or not we should apply an attack to this token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenAttackInformation.TargetDefinition">
            <summary>
            The name of the object which is our target definition
            </summary>
        </member>
        <member name="P:MS.Swi.Data.TokenAttackInformation.TargetContents">
            <summary>
            The target contents
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataMapResolver">
            <summary>
            Resolve the contents of a DataMap
            </summary>
        </member>
        <member name="T:MS.Swi.Data.IDataContentsInformationSource">
            <summary>
            An accessor interface to allow the partially resolved values of the data to be extracted
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IDataContentsInformationSource.WasContentsDeleted(MS.Swi.Data.IConstDataContents)">
            <summary>
            Does the specified DataContents still exist in the InformationSource. This is
            to handle cases where a structural manipulation may have removed a referenced Token
            </summary>
            <param name="source">The DataContents object being queried</param>
            <returns>True if the DataContents was deleted, False if not</returns>
        </member>
        <member name="M:MS.Swi.Data.IDataContentsInformationSource.GetContents(MS.Swi.Data.IConstDataContents)">
            <summary>
            Get the resolved contents of the specified IConstDataContents
            </summary>
            <param name="source">The DataContents object being queried</param>
            <returns>The contents</returns>
        </member>
        <member name="M:MS.Swi.Data.IDataContentsInformationSource.GetPosition(MS.Swi.Data.IConstDataContents)">
            <summary>
            Get the position of the resolved contents, relative to its root element, and in bytes
            </summary>
            <param name="source">The DataContents object being queried</param>
            <returns>The position</returns>
        </member>
        <member name="M:MS.Swi.Data.IDataContentsInformationSource.GetSize(MS.Swi.Data.IConstDataContents)">
            <summary>
            Get the size of the resolved contents, in bytes
            </summary>
            <param name="source">The DataContents object being queried</param>
            <returns>The size</returns>
        </member>
        <member name="M:MS.Swi.Data.IDataContentsInformationSource.GetRelativeOffset(MS.Swi.Data.IConstDataContents,MS.Swi.Data.IConstDataContents)">
            <summary>
            Get the relative offset between one item and another.
            </summary>
            <param name="source">The contents which is requesting the relative offset</param>
            <param name="target">The target contents</param>
            <returns>The relative offset</returns>
        </member>
        <member name="M:MS.Swi.Data.IDataContentsInformationSource.CanCalculateRelativeOffset(MS.Swi.Data.IConstDataContents,MS.Swi.Data.IConstDataContents)">
            <summary>
            Determine whether or not a relative position can be calculated between two contents
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.Resolve(MS.Swi.Data.DataMap)">
            <summary>
            Resolve a DataMap to the core byte arrays, making no changes
            </summary>
            <param name="map">The DataMap</param>
            <returns>The list of byte arrays that correspond to the DataMap root elements</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.Resolve(MS.Swi.Data.DataMap,MS.Swi.Data.DataMapResolver.QueryTokenAttackInformationDelegate,MS.Swi.Data.DataMapResolver.QueryEncapsulationAttackInformationDelegate,MS.Swi.Data.DataMapResolver.ResolveTokenContentsDelegate,MS.Swi.Data.DataMapResolver.ResolveEncapsulationContentsDelegate,MS.Swi.Data.DataMapResolver.ResolveTokenStructureDelegate,MS.Swi.Data.DataMapResolver.ResolveEncapsulationStructureDelegate,System.Random)">
            <summary>
            Resolve a DataMap to the core byte arrays, applying the specified changes
            </summary>
            <param name="map">The map to resolve</param>
            <param name="tokenAttackInformationCallback">The callback to use to determine what action should be applied to a Token</param>
            <param name="encapsulationAttackInformationCallback">The callback to use to determine what action should be applied to an Encapsulation</param>
            <param name="tokenResolveContentsCallback">The callback to use to determine the actual contents</param>
            <param name="encapsulationResolveContentsCallback">The callback to use to determine the actual contents</param>
            <param name="tokenResolveStructureCallback">The callback to use to modify the DataMap based on a token</param>
            <param name="encapsulationResolveStructureCallback">The callback to use to modify the DataMap based on an Encapsulation</param>
            <param name="prnGenerator">The random number generator to use</param>
            <returns>The list of byte arrays that correspond to the DataMap root elements</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.#ctor(MS.Swi.Data.DataMap,MS.Swi.Data.DataMapResolver.QueryTokenAttackInformationDelegate,MS.Swi.Data.DataMapResolver.QueryEncapsulationAttackInformationDelegate,MS.Swi.Data.DataMapResolver.ResolveTokenContentsDelegate,MS.Swi.Data.DataMapResolver.ResolveEncapsulationContentsDelegate,MS.Swi.Data.DataMapResolver.ResolveTokenStructureDelegate,MS.Swi.Data.DataMapResolver.ResolveEncapsulationStructureDelegate,System.Random)">
            <summary>
            Initialize the data map resolver. Note that this will generate queries to the attack information
            delegates if one is specified
            </summary>
            <param name="map">The map to resolve</param>
            <param name="tokenAttackInformationCallback">The callback to use to determine what action should be applied to a Token</param>
            <param name="encapsulationAttackInformationCallback">The callback to use to determine what action should be applied to an Encapsulation</param>
            <param name="tokenResolveContentsCallback">The callback to use to determine the actual contents</param>
            <param name="encapsulationResolveContentsCallback">The callback to use to determine the actual contents</param>
            <param name="tokenResolveStructureCallback">The callback to use to modify the DataMap based on a token</param>
            <param name="encapsulationResolveStructureCallback">The callback to use to modify the DataMap based on an Encapsulation</param>
            <param name="prnGenerator">The random number generator to use</param>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.WasContentsDeleted(MS.Swi.Data.IConstDataContents)">
            <summary>
            Does the specified DataContents still exist in the InformationSource. This is
            to handle cases where a structural manipulation may have removed a referenced Token
            </summary>
            <param name="source">The DataContents object being queried</param>
            <returns>True if the DataContents was deleted, False if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.GetContents(MS.Swi.Data.IConstDataContents)">
            <summary>
            Get the resolved contents of the specified IConstDataContents
            </summary>
            <param name="source">The DataContents object being queried</param>
            <returns>The contents</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.GetPosition(MS.Swi.Data.IConstDataContents)">
            <summary>
            Get the position of the resolved contents, relative to its parent object base, and
            in units based on the type (i.e. arrays are in terms of array elements, strings are in
            terms of characters, everything else would be a singleton)
            </summary>
            <param name="source">The DataContents object being queried</param>
            <returns>The position</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.GetSize(MS.Swi.Data.IConstDataContents)">
            <summary>
            Get the size of the resolved contents, in units based on the type (i.e. arrays are in
            terms of array elements, strings are in terms of characters, everything else would be a singleton)
            </summary>
            <param name="source">The DataContents object being queried</param>
            <returns>The size</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.GetRelativeOffset(MS.Swi.Data.IConstDataContents,MS.Swi.Data.IConstDataContents)">
            <summary>
            Get the relative offset between one item and another.
            </summary>
            <param name="source">The contents which is requesting the relative offset</param>
            <param name="target">The target contents</param>
            <returns>The relative offset</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.CanCalculateRelativeOffset(MS.Swi.Data.IConstDataContents,MS.Swi.Data.IConstDataContents)">
            <summary>
            Determine whether or not a relative position can be calculated between two contents
            </summary>
            <param name="source">The contents which is requesting the relative offset</param>
            <param name="target">The target contents</param>
            <returns>True if a relative offset can be calculated, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.Resolve">
            <summary>
            Resolve the entire DataMap, returning the constructed results. Note that this can
            modify the underlying DataMap, if the strategy includes structural manipulations
            </summary>
            <returns>The list of byte[] objects that correspond to the root elements</returns>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.ResolveStructuralManipulations">
            <summary>
            Resolve all structural manipulations and update the attack target information to exclude
            the newly created items
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.ResolveContentManipulations(System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Resolve all scheduled content manipulations
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.ResolveContents(MS.Swi.Data.EncapsulationAttackInformation)">
            <summary>
            Resolve the contents for the specified encapsulation. Note that the encapsulation must be unresolved,
            and must have been determined to be resolvable.
            </summary>
            <param name="encapsulationAttack">The encapsulation attack</param>
        </member>
        <member name="M:MS.Swi.Data.DataMapResolver.ResolveContents(MS.Swi.Data.Token,MS.Swi.Data.DataContents)">
            <summary>
            Resolve the contents for the specific token. Note that the token must be unresolved, 
            and must have been determined to be resolvable
            </summary>
            <param name="token">The token being resolved</param>
            <param name="contents">The contents being resolved</param>
        </member>
        <member name="T:MS.Swi.Data.DataMapResolver.AttackType">
            <summary>
            What type of attack should be conducted on a given DataMap element
            </summary>
        </member>
        <member name="F:MS.Swi.Data.DataMapResolver.AttackType.None">
            <summary>
            No attack, the element should not be attacked
            </summary>
        </member>
        <member name="F:MS.Swi.Data.DataMapResolver.AttackType.AttackContents">
            <summary>
            The contents of the element should be attacked
            </summary>
        </member>
        <member name="F:MS.Swi.Data.DataMapResolver.AttackType.AttackStructure">
            <summary>
            The structure of the DataMap should be attacked, using the
            element as the reference point
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataMapResolver.QueryTokenAttackInformationDelegate">
            <summary>
            Query to determine what the desired targetting is for a given token
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="token">The token being considered</param>
            <param name="definition">The definition to be used (or null if this is unimportant)</param>
            <returns>The AttackType selected</returns>
        </member>
        <member name="T:MS.Swi.Data.DataMapResolver.QueryEncapsulationAttackInformationDelegate">
            <summary>
            Query to determine what the desired targetting is for a given encapsulation
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="encapsulation">The encapsulation being considered</param>
            <param name="definition">The definition to be used (or null if this is unimportant)</param>
            <returns>The AttackType selected</returns>
        </member>
        <member name="T:MS.Swi.Data.DataMapResolver.ResolveTokenContentsDelegate">
            <summary>
            Resolve any changes being made to the token contents
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="token">The token being attacked</param>
            <param name="contentsDefinition">The definition of the contents being attacked</param>
            <param name="source">The data contents that the contents came from</param>
            <param name="contents">The contents</param>
            <returns>The modified contents</returns>
        </member>
        <member name="T:MS.Swi.Data.DataMapResolver.ResolveEncapsulationContentsDelegate">
            <summary>
            Resolve any changes being made to the token encapsulation
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="encapsulation">The encapsulation being attacked</param>
            <param name="contentsDefinition">The definition of the contents being attacked</param>
            <param name="contents">The contents (which will be modified in place)</param>
        </member>
        <member name="T:MS.Swi.Data.DataMapResolver.ResolveTokenStructureDelegate">
            <summary>
            Resolve any changes being made to the structure focusing on a given token
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="sourceMap">The data map being modified</param>
            <param name="token">The token being referenced</param>
        </member>
        <member name="T:MS.Swi.Data.DataMapResolver.ResolveEncapsulationStructureDelegate">
            <summary>
            Resolve any changes being made to the structure focusing on a given encapsulation
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="sourceMap">The data map being modified</param>
            <param name="encapsulation">The encapsulation being referenced</param>
        </member>
        <member name="T:MS.Swi.Data.IConstDataContents">
            <summary>
            The read-only version of the internal mapping information for the contents of a data token. 
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IConstDataContents.CanDescendFrom(MS.Swi.Data.DataContents)">
            <summary>
            Whether not one DataContents can descend from another
            </summary>
            <param name="prospectiveParent">The prospective parent data contents</param>
            <returns>True if this contents could descend from that one, otherwise false</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataContents.FindAssociatedTokens">
            <summary>
            Find the list of all of the tokens which descend from this DataContents
            </summary>
            <returns>The constructed list</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstDataContents.TrimSplitPoints(System.Collections.IEnumerable)">
            <summary>
            Trim out zero length split points from the specified set (including split points at the ends)
            </summary>
            <param name="splitPoints">The split points to analyzer</param>
            <returns>The new set of split points</returns>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.Parent">
            <summary>
            The parent of this DataContents element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.Root">
            <summary>
            The root contents for this DataContents object
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.Container">
            <summary>
            The first parent DataContents for this DataContents that contains more than
            one child, or null if there is no container for this DataContents (which would
            make it the only DataContents in the root)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.PositionBase">
            <summary>
            The DataContents that the position of this contents is relative to, or null, if no position
            can be calculated
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.BaseDefinition">
            <summary>
            The base FCL definition for this contents element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.IsSplit">
            <summary>
            Whether or not this is a split of the parent object
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.IsRoot">
            <summary>
            Whether or not this is a root container
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.NumberOfChildren">
            <summary>
            The number of children the node has
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.AssociatedToken">
            <summary>
            The token that this DataContents element is associated with, or null if it does
            not have a directly associated token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.Transformation">
            <summary>
            The transformation that applies to this DataContents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.Restrictions">
            <summary>
            The restrictions that apply to the contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.ContentsNativeType">
            <summary>
            The native type of this DataContents element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.ReferenceTypesTo">
            <summary>
            The types of references to this contents element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.Children">
            <summary>
            The child nodes of this node
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.Child">
            <summary>
            The child of this node. This is only valid if there is one and only one child node
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.IsImmutable">
            <summary>
            Whether or not the DataContents is immutable
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.IsSizeDeterminable">
            <summary>
            Whether or not the size of the DataContents can ever be determined
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.IsAbsolutePositionDeterminable">
            <summary>
            Whether or not the absolute position of the DataContents can ever be determined
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.IsPositionDeterminable">
            <summary>
            Whether or not any position can be determined
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.From">
            <summary>
            The transformation which created these contents, if it can be determined
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstDataContents.SizeMultiplier">
            <summary>
            The size multiplier that can convert from the number of elements in the actual contents
            to the number of bytes they represent, or 0 if there is no constant size multiplier that
            applies
            </summary>
        </member>
        <member name="T:MS.Swi.Data.DataContents">
            <summary>
            The internal mapping information for the contents of a data token. Please note that
            there is no ordering information contained in a DataContents object. All of the ordering
            is in the associated Token.
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataContents.#ctor">
            <summary>
            Construct an empty data contents element
            </summary>
        </member>
        <member name="M:MS.Swi.Data.DataContents.#ctor(MS.Swi.Data.DataContents)">
            <summary>
            Construct a copy of a DataContents element
            </summary>
            <param name="sourceContents">The source contents to use</param>
        </member>
        <member name="M:MS.Swi.Data.DataContents.#ctor(System.Byte[])">
            <summary>
            Construct a root data contents element
            </summary>
            <param name="data">The source data</param>
        </member>
        <member name="M:MS.Swi.Data.DataContents.#ctor(System.Object,MS.Swi.Data.DataTransformation[])">
            <summary>
            Create a contents leaf element, and build the parent objects automatically
            </summary>
            <param name="contents">The contents</param>
            <param name="transformations">The full set of transformations to apply backwards</param>
        </member>
        <member name="M:MS.Swi.Data.DataContents.#ctor(System.Object,MS.Swi.Data.IConstTokenRestrictions,MS.Swi.Data.DataTransformation[])">
            <summary>
            Create a contents leaf element, and build the parent objects automatically
            </summary>
            <param name="contents">The contents</param>
            <param name="restrictions">New restrictions on the contents, or null if no restrictions are being added</param>
            <param name="transformations">The full set of transformations to apply backwards</param>
        </member>
        <member name="M:MS.Swi.Data.DataContents.#ctor(MS.Swi.Data.DataContents,System.Object)">
            <summary>
            Construct an element that is a subset of the parent element. Note that this is where we handle
            the case in a split operation where we are splitting a field whose transformation is defined as
            f(x) + f(y) = f(x+y), by pushing the Transformation data down. For this to work, after the split,
            the actual parent is responsible for voiding its own Transformation in the Split() function
            </summary>
            <param name="parent">The parent contents</param>
            <param name="contents">These contents</param>
        </member>
        <member name="M:MS.Swi.Data.DataContents.#ctor(MS.Swi.Data.DataContents,MS.Swi.Data.DataTransformation)">
            <summary>
            Construct an element that is a transformation of the parent element
            </summary>
            <param name="parent">The parent contents</param>
            <param name="transformation">The transformation</param>
        </member>
        <member name="M:MS.Swi.Data.DataContents.Split">
            <summary>
            Split the contents into single element subcontents (i.e. the maximum number of
            possible sub-contents)
            </summary>
            <returns>The list of contents</returns>
        </member>
        <member name="M:MS.Swi.Data.DataContents.Split(System.Collections.IEnumerable)">
            <summary>
            Split the contents into sub-contents, given the split points provided. Note that the child
            elements are already added as children of this DataContents node by the time they are returned.
            
            This will create zero length children, if they are specified. To exclude zero-length children, use the
            TrimSplitPoints() function first
            
            The length of the resulting contents will always be the length of the split points + 1. This means that
            an empty set of split points will return a single split of the entire section
            
            The contents object must be an array or a String
            </summary>
            <param name="splitPoints">The array of split points (expressed as elements of the underlying splittable native type)</param>
        </member>
        <member name="M:MS.Swi.Data.DataContents.CanDescendFrom(MS.Swi.Data.DataContents)">
            <summary>
            Whether not one DataContents can descend from another
            </summary>
            <param name="prospectiveParent">The prospective parent data contents</param>
            <returns>True if this contents could descend from that one, otherwise false</returns>
        </member>
        <member name="M:MS.Swi.Data.DataContents.FindAssociatedTokens">
            <summary>
            Find the list of all of the tokens which descend from this DataContents
            </summary>
            <returns>The constructed list</returns>
        </member>
        <member name="M:MS.Swi.Data.DataContents.TrimSplitPoints(System.Collections.IEnumerable)">
            <summary>
            Trim out zero length split points from the specified set (including split points at the ends)
            </summary>
            <param name="splitPoints">The split points to analyzer</param>
            <returns>The new set of split points</returns>
        </member>
        <member name="F:MS.Swi.Data.DataContents.mParent">
            Contents tracking:
            	The parent is the parent DataContents, or null if this is the root
            	The associated token is the token that this contents is currently associated with
            	The transformation is the transformation that applies to the parent node, if any
            	The children are the set of child nodes
        </member>
        <member name="P:MS.Swi.Data.DataContents.MS#Swi#Data#IConstDataContents#Restrictions">
            <summary>
            The restrictions that apply to the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.Restrictions">
            <summary>
            The restrictions that apply to the token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.IsImmutable">
            <summary>
            Whether or not the DataContents is immutable
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.IsRoot">
            <summary>
            Whether or not this is a root DataContents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.Contents">
            <summary>
            The modifiable contents of the Data
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.ContentsNativeType">
            <summary>
            The native type of the contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.SizeMultiplier">
            <summary>
            The size multiplier that can convert from the number of elements in the actual contents
            to the number of bytes they represent, or 0 if there is no constant size multiplier that
            applies
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.IsSizeDeterminable">
            <summary>
            Whether or not the size of the DataContents can ever be determined
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.IsAbsolutePositionDeterminable">
            <summary>
            Whether or not the absolute position of the DataContents can ever be determined
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.IsPositionDeterminable">
            <summary>
            Whether or not any position can be determined
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.MS#Swi#Data#IConstDataContents#AssociatedToken">
            <summary>
            The token which is currently associated with these contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.AssociatedToken">
            <summary>
            The token which is currently associated with these contents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.IsSplit">
            <summary>
            Whether or not this is a split of the parent object
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.NumberOfChildren">
            <summary>
            The number of children the node has
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.Transformation">
            <summary>
            The transformation that is required to transform these contents to their parent type
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.MS#Swi#Data#IConstDataContents#Parent">
            <summary>
            The parent contents for this DataContents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.Parent">
            <summary>
            The parent contents for this DataContents
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.MS#Swi#Data#IConstDataContents#Children">
            <summary>
            The children of this DataContents element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.Children">
            <summary>
            The children of this DataContents element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.MS#Swi#Data#IConstDataContents#Child">
            <summary>
            The child of this node. This will return null if this is a leaf node, and throw an exception if
            this node has multiple children
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.Child">
            <summary>
            The child of this node. This will return null if this is a leaf node, and throw an exception if
            this node has multiple children
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.From">
            <summary>
            The name of the transformation which created this data, if it can be determined, otherwise ""
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.MS#Swi#Data#IConstDataContents#Root">
            <summary>
            The root contents for this DataContents object
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.Root">
            <summary>
            The root contents for this DataContents object
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.MS#Swi#Data#IConstDataContents#PositionBase">
            <summary>
            The DataContents that the position of this contents is relative to, or null, if no position
            can be calculated
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.PositionBase">
            <summary>
            The DataContents that the position of this contents is relative to, or null, if no position
            can be calculated
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.MS#Swi#Data#IConstDataContents#Container">
            <summary>
            The first parent DataContents for this DataContents that contains more than
            one child, or null if there is no container for this DataContents (which would
            make it the only DataContents in the root)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.Container">
            <summary>
            The first parent DataContents for this DataContents that contains more than
            one child, or null if there is no container for this DataContents (which would
            make it the only DataContents in the root)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.ReferenceTypesTo">
            <summary>
            The types of references to this contents element
            </summary>
        </member>
        <member name="P:MS.Swi.Data.DataContents.BaseDefinition">
            <summary>
            The base FCL definition for this contents element
            </summary>
        </member>
        <member name="T:MS.Swi.CommonStorage.AccessPermissions">
            <summary>
            Access flags for permissions on individual common objects
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.OwnerWrite">
            <summary>
            Base Flag:
            Owner can write to/modify the common storage logical object after creation
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.OwnerDelete">
            <summary>
            Base Flag:
            Owner can delete the common storage logical object
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.AnyWrite">
            <summary>
            Base Flag:
            Any object can write to/modify the common storage logical object after creation
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.AnyDelete">
            <summary>
            Base Flag
            Any object can delete the common storage logical object
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.None">
            <summary>
            Common Flag Mask:
            No one can modify or delete the common storage logical object
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.Default">
            <summary>
            Common Flag Mask:
            Default setting: The owner can delete the common storage logical object, and any object
            can modify it
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.ReadOnly">
            <summary>
            Common Flag Mask:
            No one can write to/modify the common storage logical object after creation, but the
            owning object can delete it
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.OthersReadOnly">
            <summary>
            Common Flag Mask
            The owning object can write to/modify or delete the common storage logical object, but other
            objects have read-only access
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.AccessPermissions.All">
            <summary>
            Common Flag Mask
            All flag options are set, any object can do anything to the common storage logical object
            </summary>
        </member>
        <member name="T:MS.Swi.CommonStorage.Storage">
            <summary>
            CommonStorage is a forced Singleton class, with the public
            static field Data as an implementation.
            </summary>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.#ctor">
            <summary>
            Private constructor to build an individual CommonStorage object, which have no contents
            anyway
            </summary>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.RegisterForObjectManagementEvents(MS.Swi.CommonStorage.DataUpdateEventHandler)">
            <summary>
            Register the specified handler for object management (Creation/Deletion) events
            </summary>
            <param name="eventHandler">The specified handler</param>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.UnregisterForObjectManagementEvents(MS.Swi.CommonStorage.DataUpdateEventHandler)">
            <summary>
            Unregister the specified handler for object management (Creation/Deletion) events
            </summary>
            <param name="eventHandler">The specified handler</param>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.RegisterForObjectUpdateEvents(System.String,MS.Swi.CommonStorage.DataUpdateEventHandler)">
            <summary>
            Register the specified handler for modification events for the specified logical object
            </summary>
            <param name="logicalName">The logical object name</param>
            <param name="eventHandler">The specified handler</param>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.UnregisterForObjectUpdateEvents(System.String,MS.Swi.CommonStorage.DataUpdateEventHandler)">
            <summary>
            Unregister the specified handler for modification events for the specified logical object
            </summary>
            <param name="logicalName">The logical object name</param>
            <param name="eventHandler">The specified handler</param>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.Contents(System.String)">
            <summary>
            Return the contents associated with the specified logical object
            </summary>
            <param name="logicalName">The name of the logical object</param>
            <returns>The contents of the </returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.Exists(System.String)">
            <summary>
            Does an object of the given logical name exist in common storage?
            </summary>
            <param name="logicalName">The logical name</param>
            <returns>True if the object already exists, false if not</returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.Permissions(System.String)">
            <summary>
            What are the permissions for the object
            </summary>
            <param name="logicalName">The object logical name</param>
            <returns>The object permissions, or None if the object does not exist</returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.Clear">
            <summary>
            Reset the storage completely. Note that this ignores any permissions values
            </summary>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.Create(System.Object,System.String,System.Type,System.Object,MS.Swi.CommonStorage.AccessPermissions)">
            <summary>
            Create a logical object. This will fail if the object already exists. If the object is
            created, an ObjectCreated event will be generated for it
            </summary>
            <param name="owner">The object owner</param>
            <param name="logicalName">The object logical name</param>
            <param name="requiredType">The type of the logical object, or null if all types are valid</param>
            <param name="initialValue">The initial object value</param>
            <param name="permissions">The permissions flags for the object</param>
            <returns>True if it worked, false if not</returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.Modify(System.Object,System.String,System.Object)">
            <summary>
            Modify an already existing logical object. If the object cannot be changed by the accessor, an
            ObjectAccessViolation message will be sent to any listeners who have registered for updates on
            that particular object, otherwise, an ObjectModified message will be sent instead.
            </summary>
            <param name="accessor">The object accessing the logical object</param>
            <param name="logicalName">The logical object name</param>
            <param name="replacementValue">The new object value</param>
            <returns>True if it worked, false if not</returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.Delete(System.Object)">
            <summary>
            Delete (or attempt to delete) all logical objects owned by the specified owning object. Note
            that objects whose permissions don't allow it will not be removed.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.Delete(System.Object,System.String)">
            <summary>
            Delete a logical object. If the object cannot be deleted by the accessor, an
            ObjectAccessViolation message will be sent to any listeners who have registered for
            object management events, otherwise, an ObjectDeleted message will be sent instead.
            </summary>
            <param name="accessor">The object deleting the logical object</param>
            <param name="logicalName">The logical object name</param>
            <returns>True if it worked, false if not</returns>
        </member>
        <member name="P:MS.Swi.CommonStorage.Storage.LogicalObjectNames">
            <summary>
            Return an ICollection of the names of all of the logical objects
            </summary>
        </member>
        <member name="T:MS.Swi.CommonStorage.Storage.ContentDefinition">
            <summary>
            The content definition class for the internal hash table. The ContentDefinition fully identify the
            object, owner, permissions, and contents of every logical object in the Common Storage
            </summary>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.ContentDefinition.#ctor(System.Object,System.String,System.Type,System.Object,MS.Swi.CommonStorage.AccessPermissions)">
            <summary>
            ContentDefinition constructor
            </summary>
            <param name="owner">Owner of the object</param>
            <param name="logicalName">Full logical name of the object</param>
            <param name="objectType">Type of the object, or null if all types are valid</param>
            <param name="objectValue">The initial contents of the object</param>
            <param name="permissions">Permission flags for the object</param>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.ContentDefinition.CheckPermissions(System.Object,MS.Swi.CommonStorage.Storage.ContentDefinition.OperationType)">
            <summary>
            Determine if the accessor has sufficient permissions to perform the operation on the logical object
            </summary>
            <param name="accessor"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.ContentDefinition.CheckType(System.Object)">
             <summary>
             Check the proposed value against the type
            
             Values are valid if:
             One: The type restriction for these contents is null, meaning no restrictions OR
             Two: The object is null, and the required type is a reference type or interface OR
             Three: The object is of the same class or a subclass of the required type OR
             Four: The required type is an interface, and the object implements it 
             
             
             </summary>
             <param name="proposedValue">The value to check</param>
             <returns>True if the value was valid for the type restriction, false if not</returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.ContentDefinition.Modify(System.Object,System.Object)">
            <summary>
            Modify the object contents
            </summary>
            <param name="accessor">The accessor</param>
            <param name="replacementValue">The replacement value</param>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.ContentDefinition.Register(MS.Swi.CommonStorage.DataUpdateEventHandler)">
            <summary>
            Register a handler for this particular logical object (and this object only)
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="M:MS.Swi.CommonStorage.Storage.ContentDefinition.Unregister(MS.Swi.CommonStorage.DataUpdateEventHandler)">
            <summary>
            Unregister a handler for this particular logical object (and this object only)
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="P:MS.Swi.CommonStorage.Storage.ContentDefinition.Owner">
            <summary>
            The owner of the logical object
            </summary>
        </member>
        <member name="P:MS.Swi.CommonStorage.Storage.ContentDefinition.ObjectContents">
            <summary>
            The current contents of the logical object
            </summary>
        </member>
        <member name="P:MS.Swi.CommonStorage.Storage.ContentDefinition.ObjectType">
            <summary>
            The object type (or NULL) of the object
            </summary>
        </member>
        <member name="P:MS.Swi.CommonStorage.Storage.ContentDefinition.ObjectPermissions">
            <summary>
            The permission flags for the logical object
            </summary>
        </member>
        <member name="P:MS.Swi.CommonStorage.Storage.ContentDefinition.ObjectName">
            <summary>
            The logical name of the referenced object
            </summary>
        </member>
        <member name="T:MS.Swi.CommonStorage.Storage.ContentDefinition.OperationType">
            <summary>
            Private enumeration defining the type of operation being considered for permissions checks
            </summary>
        </member>
        <member name="T:MS.Swi.CommonStorage.StorageGroup">
            <summary>
            Helper class providing access to the Common Storage shared objects table
            
            This is used to provide a cleaner, and simpler interface for classes which are only
            concerned with their own Common Storage shared objects, and will not be looking at objects
            used by other modules 
            </summary>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.#ctor(System.String)">
            <summary>
            Construct the StorageGroup with an initial identifier
            </summary>
            <param name="identifier">The identifier to use</param>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.IdentifiedName(System.String)">
            <summary>
            Accessor to construct a string, based on the logical name, that should be
            used for all references in the Common Storage space. 
            </summary>
            <param name="name">Base Logical variable name</param>
            <returns>Constructed global name</returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.Delete(System.String)">
            <summary>
            Delete the specified logical name from common storage. Note that this is only designed to
            work for variables created as part of the VariableWrapper. While it may work for other variables,
            it will only do so if the identifier is the same, and AccessAnyDelete is set as an access flag. 
            
            In general, anything dealing with variables not defined as part of the VariableWrapper should be
            done via CommonStorage directly.
            
            NOTE: Permission failures will generate an ObjectAccessViolation event from CommonStorage,
            although not an exception.
            
            </summary>
            <param name="name">Base Logical variable name</param>
            <returns>True if the object was deleted, false if not</returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.Clear">
            <summary>
            Delete all logical objects owned by the StorageWrapper, if they can be deleted.
            </summary>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.Exists(System.String)">
            <summary>
            Determine if the specified logical name exists in common storage. Note that this is only designed to
            work for variables created as part of the VariableWrapper. While it may work for other variables,
            it will only do so if the identifier is the same
            </summary>
            <param name="name">Base logical variable name</param>
            <returns>True if the variable exists, false if not</returns>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.Create(System.String,System.Object)">
            <summary>
            Simplest variable create, which creates an object in Common Storage based on the
            base name, with the access values set to AccessDefault, and the type restrictions
            based on the initial value
            </summary>
            <param name="name">Base logical name</param>
            <param name="initialValue">Initial value of the logical object</param>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.Create(System.String,MS.Swi.CommonStorage.AccessPermissions,System.Object)">
            <summary>
            Create a logical object in Common Storage based on the base name. Note that the
            type restriction will be inferred from the type of the value
            </summary>
            <param name="name">The base name</param>
            <param name="permissions">The permissions to apply</param>
            <param name="initialValue">The initial value</param>
        </member>
        <member name="M:MS.Swi.CommonStorage.StorageGroup.Create(System.String,System.Type,MS.Swi.CommonStorage.AccessPermissions,System.Object)">
            <summary>
            Create a fully specified logical object in Common Storage
            </summary>
            <param name="name">The base name</param>
            <param name="restriction">The type restrictions (or null, for no restrictions)</param>
            <param name="permissions">The permissions to apply</param>
            <param name="initialValue">The initial value</param>
        </member>
        <member name="P:MS.Swi.CommonStorage.StorageGroup.Identifier">
            <summary>
            Method for getting/setting the identification string that is used to 
            access the data. Please note that modifying the identifier after Common Storage elements
            have been created with this StorageGroup will cause problems in finding those elements later.
            </summary>
        </member>
        <member name="P:MS.Swi.CommonStorage.StorageGroup.Item(System.String)">
            <summary>
            Indexing function to provide access to get/set variables in the Common Storage space.
            
            If the variable does not exist, this version (unlike the version in Common Storage) will
            throw an exception, as we do NOT expect to find that variables don't exist.
            </summary>
        </member>
        <member name="T:MS.Swi.CommonStorage.DataUpdateEventArgs">
            <summary>
            DataUpdate Event Argument Definition
            </summary>
        </member>
        <member name="M:MS.Swi.CommonStorage.DataUpdateEventArgs.#ctor(MS.Swi.CommonStorage.DataUpdateEventArgs.UpdateType,System.String)">
            <summary>
            Event Arguments
            </summary>
            <param name="type">The type of event</param>
            <param name="logicalName">The logical object involved</param>
        </member>
        <member name="P:MS.Swi.CommonStorage.DataUpdateEventArgs.Type">
            <summary>
            Property to return the event Type
            </summary>
        </member>
        <member name="P:MS.Swi.CommonStorage.DataUpdateEventArgs.ObjectName">
            <summary>
            Property to return the name of the logical object
            </summary>
        </member>
        <member name="T:MS.Swi.CommonStorage.DataUpdateEventArgs.UpdateType">
            <summary>
            Event Types
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.DataUpdateEventArgs.UpdateType.ObjectCreated">
            <summary>
            Report the creation of a common storage logical object
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.DataUpdateEventArgs.UpdateType.ObjectDeleted">
            <summary>
            Report the deletion of a common storage logical object
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.DataUpdateEventArgs.UpdateType.ObjectModified">
            <summary>
            Report the modification of a common storage logical object
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.DataUpdateEventArgs.UpdateType.ObjectAccessViolation">
            <summary>
            Report that an illegal attempt to modify or delete a common storage logical object occurred
            </summary>
        </member>
        <member name="F:MS.Swi.CommonStorage.DataUpdateEventArgs.UpdateType.AllObjectsDeleted">
            <summary>
            Report that all objects in the storage have been deleted
            </summary>
        </member>
        <member name="T:MS.Swi.CommonStorage.DataUpdateEventHandler">
            <summary>
            DataUpdateEvent Handler Definition
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.IConstRemoteClassDefinition">
            <summary>
            The read-only (i.e. true const) interface for a RemoteClassDefinition
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.IConstRemoteClassDefinition.ToXml(System.Xml.XmlDocument)">
            <summary>
            Export the definition to Xml
            </summary>
            <param name="owningDocument">The owning document for the XmlNode</param>
            <returns>The constructed Xml node</returns>
        </member>
        <member name="M:MS.Swi.Mitm.IConstRemoteClassDefinition.GetArgumentList">
            <summary>
            Extract the arguments as an argument list
            </summary>
            <returns>A newly created array of strings which is the argument list</returns>
        </member>
        <member name="M:MS.Swi.Mitm.IConstRemoteClassDefinition.AsDefinitionString(System.Char)">
            <summary>
            Extract the entire definition as a definition string for passing to the instrumentation
            </summary>
            <param name="separator">The separator character to use</param>
            <returns>The constructed string</returns>
        </member>
        <member name="M:MS.Swi.Mitm.IConstRemoteClassDefinition.Clone">
            <summary>
            Create a duplicate of the object as a remote class definition
            </summary>
            <returns>The duplicate as a remote class definition</returns>
        </member>
        <member name="P:MS.Swi.Mitm.IConstRemoteClassDefinition.Classname">
            <summary>
            The fully qualified name of the remote class
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.IConstRemoteClassDefinition.Arguments">
            <summary>
            Read-only access to the arguments
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.RemoteClassDefinition">
            <summary>
            The full definition of a MitmClass, including the fully qualified classname and the arguments to 
            the class on initialization
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.#ctor">
            <summary>
            Define a remote class
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.#ctor(System.String)">
            <summary>
            Define a remote class with no arguments
            </summary>
            <param name="classname">The name of the IMitmRemoteClass class</param>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.#ctor(System.String,System.String[])">
            <summary>
            Define a remote class
            </summary>
            <param name="classname">The name of the IMitmRemoteClass class</param>
            <param name="arguments">The arguments for the initialization of that class</param>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Define a remote class
            </summary>
            <param name="classname">The name of the IMitmRemoteClass class</param>
            <param name="arguments">The arguments for the initialization of that class</param>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.#ctor(System.Xml.XmlElement)">
            <summary>
            Define a remote class from Xml
            </summary>
            <param name="definition">The Xml definition</param>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.FromXml(System.Xml.XmlElement)">
            <summary>
            Set the contents from the Xml definition
            </summary>
            <param name="definition">The Xml definition to use</param>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.ToXml(System.Xml.XmlDocument)">
            <summary>
            Export the definition to Xml
            </summary>
            <param name="owningDocument">The owning document for the element</param>
            <returns>The constructed Xml element</returns>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.GetArgumentList">
            <summary>
            Extract the arguments as an argument list
            </summary>
            <returns>A newly created array of strings which is the argument list</returns>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.AsDefinitionString(System.Char)">
            <summary>
            Extract the entire definition as a definition string for passing to the instrumentation
            </summary>
            <param name="separator">The separator character to use</param>
            <returns>The constructed string</returns>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.System#ICloneable#Clone">
            <summary>
            Create a deep copy of the remote class definition as an object
            </summary>
            <returns>The duplicate as an object</returns>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.MS#Swi#Mitm#IConstRemoteClassDefinition#Clone">
            <summary>
            Create a deep copy of the remote class definition as a const remote class definition
            </summary>
            <returns>The duplicate as a const remote class definition</returns>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassDefinition.Clone">
            <summary>
            Create a deep copy of the remote class definition
            </summary>
            <returns>The duplicate as a remote class definition</returns>
        </member>
        <member name="P:MS.Swi.Mitm.RemoteClassDefinition.Classname">
            <summary>
            The fully qualified name of the remote class
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.RemoteClassDefinition.ModifiableArguments">
            <summary>
            The arguments to the remote class
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.RemoteClassDefinition.Arguments">
            <summary>
            Read-only access to the arguments
            </summary>
        </member>
        <member name="T:MS.Swi.Data.ElementCharacteristics">
            <summary>
            Specific characteristics about the type
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementCharacteristics.None">
            <summary>
            The requisit flag indicating that no flags are set
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementCharacteristics.Severable">
            <summary>
            The token can be split at any point into subtokens of the same type
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementCharacteristics.Singleton">
            <summary>
            This definition is a singleton, and cannot be subdivided except by a Transformation
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementCharacteristics.ValidAsAncestor">
            <summary>
            The token can validly be treated as its parent. Note that this
            is recursive
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementCharacteristics.Encapsulation">
            <summary>
            This definition is an encapsulation. 
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementCharacteristics.Token">
            <summary>
            This definition is a token
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementCharacteristics.Specific">
            <summary>
            This definition is a specific definition, and should not be included by default by 
            analyzers
            </summary>
        </member>
        <member name="T:MS.Swi.Data.ElementDefinition">
            <summary>
            The token definition class defines the characteristics of each specific token type
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementDefinition.BaseTokenDefinitionName">
            <summary>
            The name of the base FCL type
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementDefinition.ContainerTokenDefinitionName">
            <summary>
            The name of the special FCL heterogenous container type
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementDefinition.ContainerTokenNativeType">
            <summary>
            The type of the special FCL heterogenous container native representation
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementDefinition.BaseTokenDefinition">
            <summary>
            The base FCL Definition for data
            </summary>
        </member>
        <member name="F:MS.Swi.Data.ElementDefinition.ContainerTokenDefinition">
            <summary>
            A specialized FCL Definition for Containers
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.#ctor(System.String,System.Type,MS.Swi.Data.ElementCharacteristics)">
            <summary>
            Constructor for the token definition
            </summary>
            <param name="tokenName">The name of the token</param>
            <param name="nativeType">The native type the token represents</param>
            <param name="characteristics">The characteristics of this type of token</param>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.#ctor(System.String,System.String,MS.Swi.Data.ElementCharacteristics)">
            <summary>
            Constructor for the token definition
            </summary>
            <param name="tokenName">The name of the token</param>
            <param name="baseName">The name of the token this token refines</param>
            <param name="characteristics">The characteristics of this type of token</param>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.#ctor(System.String,MS.Swi.Data.ElementCharacteristics)">
            <summary>
            Constructor for the encapsulation definition definition
            </summary>
            <param name="tokenName">The name of the token</param>
            <param name="characteristics">The characteristics of this type of token</param>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.#ctor(System.Xml.XmlElement)">
            <summary>
            Construct a token definition from an Xml node. Note that it currently only will recognize
            types in the System or current assembly for the associated type. This will change.
            </summary>
            <param name="xmlDefinition">The defined node</param>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.CalculateHashCode">
            <summary>
            Calculate the internal hash code
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.ValidateCharacteristics">
            <summary>
            Validate the characteristics, and fill in any defaults that are blank
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.GetHashCode">
            <summary>
            Get a hash code for the token definition
            </summary>
            <returns>The calculated hash</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.Equals(System.Object)">
            <summary>
            Determine if two objects are equivalent token definitions
            </summary>
            <param name="obj">The other object</param>
            <returns>True if it is an equivalent definition, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.ToXmlElement(System.Xml.XmlDocument)">
            <summary>
            Create an Xml element that defines the definition, for the specified owning document
            </summary>
            <param name="owningDocument">The owning document</param>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.HasCharacteristic(MS.Swi.Data.ElementCharacteristics)">
            <summary>
            Does the element have the specified characteristic? If the characteristic is a combination of multiple
            characteristics, it will return true only if all of the characteristics are a match
            </summary>
            <param name="characteristic">The characteristic (or characteristics) to check for</param>
            <returns>True if there is an exact match, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.IsRefinementOf(System.String)">
            <summary>
            Determine if one token is a refinement of another. Note that we allow for a type
            to be a refinement of itself
            </summary>
            <param name="definitionName">The base definition name</param>
            <returns>True if the definition is a refinement of the definitionName</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.CanDescendFrom(System.String)">
            <summary>
            Determine if a token of this type can descend from the specified definition. This handles
            checking for ancestral equivalences (i.e. it uses CanBeTreatedAs)
            </summary>
            <param name="definitionName">The base definition name</param>
            <returns>True if the this definition can descend from the definitionName</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinition.CanBeTreatedAs(System.String)">
            <summary>
            Determine if one token can be treated as another. Note that it is always valid to ask if you
            can be treated as yourself. Note that this is MORE restrictive than checking for inheritance,
            and exists for analyzers that match particular types. In normal usage, the IsRefinementOf 
            accessor is more likely to be the desired accessor
            </summary>
            <param name="baseDefinitionName">The base definition name</param>
            <returns>True if this definition can be treated as the baseDefinitionName</returns>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.NativeType">
            <summary>
            The NativeType
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.Ancestor">
            <summary>
            The token definition instance that this definition refines
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.Refines">
            <summary>
            The token that this token refines (i.e. XMLString refines String which refines ByteArray)
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.Defines">
            <summary>
            The token name
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.Characteristics">
            <summary>
            The known characteristics of this type of token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.IsSpecific">
            <summary>
            Whether or not this definition is included only if specifically requested
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.IsGeneral">
            <summary>
            Whether or not this definition is included by default
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.IsTokenDefinition">
            <summary>
            Whether or not this definition defines a token
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinition.IsEncapsulationDefinition">
            <summary>
            Whether or not this token definition defines an encapsulation
            </summary>
        </member>
        <member name="T:MS.Swi.Data.IConstElementDefinitions">
            <summary>
            The const (i.e. true Read Only) interface definition for ElementDefinitions
            </summary>
        </member>
        <member name="M:MS.Swi.Data.IConstElementDefinitions.IsTheSameAs(MS.Swi.Data.IConstElementDefinitions)">
            <summary>
            Is this set of definitions the same as the other set of definitions
            </summary>
            <param name="otherDefinitions">The comparison set of definitions</param>
            <returns>True if they are the same, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstElementDefinitions.ToXmlElement(System.Xml.XmlDocument)">
            <summary>
            Create an Xml element that defines the definitions, for the specified owning document
            </summary>
            <param name="owningDocument">The owning document</param>
        </member>
        <member name="M:MS.Swi.Data.IConstElementDefinitions.Find(System.String)">
            <summary>
            Find a registered token definition
            </summary>
            <param name="tokenName">The name of the token definition</param>
            <returns>The token definition, or null if it could not be found</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstElementDefinitions.Contains(System.String)">
            <summary>
            Determine if the token definition is contained in this collection
            </summary>
            <param name="tokenName">The name to check</param>
            <returns>True if it is contained, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.IConstElementDefinitions.Clone">
            <summary>
            Return a clone of the IConstElementDefinitions as a new ElementDefinitions object
            </summary>
            <returns>The new ElementDefinitions as ElementDefinitions</returns>
        </member>
        <member name="P:MS.Swi.Data.IConstElementDefinitions.Count">
            <summary>
            The number of definitions 
            </summary>
        </member>
        <member name="P:MS.Swi.Data.IConstElementDefinitions.Definitions">
            <summary>
            Enumerate the definitions
            </summary>
        </member>
        <member name="T:MS.Swi.Data.ElementDefinitions">
            <summary>
            The token definitions class serves as an encapsulation of a set of registered token
            definitions
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.LoadDefinitions(System.String)">
            <summary>
            Load the entire set of token definitions. The filename will be searched for first as given,
            then in the local directory, and then in the FCL installation directory.
            </summary>
            <param name="fileName">The filename for the Xml file containing the definitions</param>
            <returns>The definition set</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.LoadDefinitions(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Load a set of definitions based on a specific whitelist and blacklist.  The filename will be searched for first as given,
            then in the local directory, and then in the FCL installation directory.
            </summary>
            <param name="fileName">The filename for the Xml file containing the definitions</param>
            <param name="whitelist">Whitelisted definitions (regular expressions acceptable), or null</param>
            <param name="blacklist">Blacklisted definitions (regular expressions acceptable), or null</param>
            <returns>The definition set</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.LoadDefinitions(System.Xml.XmlElement)">
            <summary>
            Load the entire set of token definitions
            </summary>
            <param name="tokenDefinitions">The Xml node containing the token definitions, defined by </param>
            <returns>The definition set</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.LoadDefinitions(System.Xml.XmlElement,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Load a set of definitions based on a specific whitelist and blacklist
            </summary>
            <param name="tokenDefinitions">The Xml node containing the token definitions, defined by </param>
            <param name="whitelist">Whitelisted definitions (regular expressions acceptable), or null</param>
            <param name="blacklist">Blacklisted definitions (regular expressions acceptable), or null</param>
            <returns>The definition set</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.#ctor">
            <summary>
            Create the basic token definition table, consisting only of the base data type
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.#ctor(MS.Swi.Data.ElementDefinitions)">
            <summary>
            A private copy constructor for efficient handling of the clone
            </summary>
            <param name="definitions">The source definitions</param>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.Add(MS.Swi.Data.ElementDefinition)">
            <summary>
            Add a token definition to the table of token definitions
            </summary>
            <param name="definition">The token definition</param>
            <returns>True if the definition is now in the set, and false if it conflicts with an existing definition</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.Add(MS.Swi.Data.ElementDefinitions)">
            <summary>
            Add another set of definitions into the current set
            </summary>
            <param name="definitions">The token definitions to add</param>
            <returns>True if the definitions could be added, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.RemoveOrphans">
            <summary>
            Remove any orphaned definitions from the set. This should be called after
            all token definitions have been loaded into a set, and it will prune out any
            definitions whose ancestors cannot be traced.
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.Clear">
            <summary>
            Clear the set of registered token definitions
            </summary>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.IsTheSameAs(MS.Swi.Data.IConstElementDefinitions)">
            <summary>
            Is this set of token definitions the same as the comparison set
            </summary>
            <param name="otherDefinitions">The comparison definitions</param>
            <returns>True if they are the same, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.ToXmlElement(System.Xml.XmlDocument)">
            <summary>
            Create an Xml element that defines the definitions, for the specified owning document
            </summary>
            <param name="owningDocument">The owning document</param>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.Find(System.String)">
            <summary>
            Find a registered token definition
            </summary>
            <param name="tokenName">The name of the token definition</param>
            <returns>The token definition, or null if it could not be found</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.Contains(System.String)">
            <summary>
            Determine if the token definition is contained in this collection
            </summary>
            <param name="tokenName">The name to check</param>
            <returns>True if it is contained, false if not</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.GetEnumerator">
            <summary>
            The enumerator for iteration
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.System#ICloneable#Clone">
            <summary>
            Return a clone of the ElementDefinitions
            </summary>
            <returns>The new ElementDefinitions as an object</returns>
        </member>
        <member name="M:MS.Swi.Data.ElementDefinitions.Clone">
            <summary>
            Return a clone of the ElementDefinitions
            </summary>
            <returns>The new ElementDefinitions as ElementDefinitions</returns>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinitions.Count">
            <summary>
            The number of definitions 
            </summary>
        </member>
        <member name="P:MS.Swi.Data.ElementDefinitions.Definitions">
            <summary>
            An enumerator for the set of definitions
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LiveMatchTest\LiveMatchTest.xml ===
﻿<?xml version="1.0" encoding="utf-8" ?> 
<stf>
    <LiveMatchTest>
        <DefaultToolPath>d:\webroot\xbltools</DefaultToolPath>
        <InputFilePath>InputFiles\LiveMatchTest</InputFilePath>
        <TitleID>0xFFFE07E3</TitleID>
	<XboxTitleID>0xFFFFAB10</XboxTitleID>
<!--
You can use the MatchTestServer and MatchTestServer2 tags to override getting servers from NPDB.
	<MatchTestServer>FXXALLSQL001</MatchTestServer>
	<MatchTestServer2>FXXALLSQL002</MatchTestServer2>
-->
    </LiveMatchTest>
</stf>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\libd\i386\stflivehelp.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>STFLive</name>
    </assembly>
    <members>
        <member name="T:ServerTestFramework.UnexpectedXRLTestResultException">
            <summary>
            Same as UnexpectedTestResult from the core, only with an xrl.
            </summary>
        </member>
        <member name="T:ServerTestFramework.WireData">
             <summary>
             Provides easy serialization of  structured data into byte streams.
             </summary>
             <remarks>
             The <c>WireData</c> class provides a method of serializing class data into byte streams.  This is especially
             useful transfering data over the network.  Using <c>WireData</c> is very simple.  First create a class that derives
             from <c>WireData</c>.  Then add public member variables that specify the format of the data that this class targets in
             the order it appears in the stream.  For many cases this is enough to start serializing and deserializing with
             your <c>WireData</c> class.
             <list type="bullet">
             <item>
             <term>Serialization to a byte[]</term>
             <description>Fill out your structure and cast your class to a <c>byte[]</c>.  The resulting <c>byte[]</c> will be your serialization data.  Alternatively you can call WriteStream and pass a <c>Stream</c> for a similar effect.</description>
             </item>
             <item>
             <term>Deserialization from a byte[] or a Stream</term>
             <description>Construct a new instance of your class and call ReadStream on your <c>byte[]</c> or <c>Stream</c>.  Your instance will contain the data that was present in the <c>Stream</c>.</description>
             </item>
             </list>
            
             WireData derived classes are made up of different data types.  The valid data types for serialization are as follows:
             <list type="bullet">
             <item>
             <term>Supported native types</term>
             <description>The types that may make up WireData types are: <c>bool</c>, <c>byte</c>, <c>char</c>, <c>decimal</c>, <c>double</c>, <c>short</c>, <c>int</c>, <c>long</c>, <c>sbyte</c>, <c>float</c>, <c>ushort</c>, <c>uint</c>, <c>ulong</c>, <c>DateTime</c>, <c>string</c>, arrays of any of these types and other <c>WireData</c> derived classes.  <c>DateTime</c> is supported like a native type and is serialized by calling its ToFileTime.</description>
             </item>
             <item>
             <term>Embedded WireData classes</term>
             <description><c>WireData</c> classes can also contain other embedded <c>WireData</c> classes as members.</description>
             </item>
             <item>
             <term>Arrays</term>
             <description><c>WireData</c> supports arrays of any of the other types of supported data types.  To use an array you must specifiy how many items are in the array.  See <see cref="T:ServerTestFramework.WireInfoAttribute"/> and "Arrays" section below for details on how to use arrays.</description>
             </item>
             <item>
             <term>Strings</term>
             <description>Strings are treated almost identically to arrays.  To use a string you must specifiy how many characters are in the string.  See <see cref="T:ServerTestFramework.WireInfoAttribute"/> and the "Arrays" section below for more information.  They are UTF8 encoded for serialization.</description>
             </item>
             </list>
            
             <b>Arrays</b><br/>
             <para>Since Arrays are not always the same size there are special considerations that are nescessary.  For example, a deserializer needs to know how many elements to allocate for the array and how much data to pull in.  A seriailzer needs to know where to serialize the element count for a variable sized array.  For these and other reasons, a <see cref="T:ServerTestFramework.WireInfoAttribute"/> needs to be specified any time an array is declared.</para>
             The size needs to be specified in one of three ways:
             <list type="number">
             <item>
             <term>ArraySize</term>
             <description>Specify an <c>ArraySize</c> when the array always has a constant number of elements.  If there are 4 <c>int</c>s (comprising 16 bytes) set <c>SizeParam = 4</c>.  On serialization if the array doesn't have enough elements the stream will be zero-padded.</description>
             </item>
             <item>
             <term>SizeParam</term>
             <description>For variable-sized arrays you can tell <c>WireData</c> to look at a different integral (such as <c>int</c>) field to get and set the number of array elements from and to.  Set <c>SizeParam</c> to be the name of the field that represents the element count.  If you set this up then when serializing/deserializing, <c>WireData</c> will take care of setting the linked count so you do not have to.  See the example below for more information.</description>
             </item>
             <item>
             <term>&lt;field&gt;Len</term>
             <description>For coveniance you don't usually have to specify the attribute for variable sized arrays at all.  Just take the field that you want to link as if you were using <c>SizeParam</c> above and name it the same as the array but append "Len" to the end.  See the example below for more information.</description>
             </item>
             </list>
             <para><b>Overloaded ReadStream/WriteStream</b></para>
             <para>There are situations where the above features don't make up enough functionality to match your protocol.  In these cases you will need to override <c>ReadStream</c> and <c>WriteStream</c> in your <c>WireData</c> derived class.  See <see cref="M:ServerTestFramework.WireData.ReadStream(System.IO.Stream)"/> for more information.</para>
             </remarks>
            
             <example>
             This sample shows how to call use the main features of WireData.
             <code>
                public class ExampleWireData : WireData
                {
                    public byte JustAByte = 0;
                    [WireInfo(ArraySize=10)] public string ConstString;
                    public int SizeForVarString;
                    [WireInfo(SizeParam="SizeForVarString")] public string VarString;
                    public uint VarByteArrayLen;
                    public int[] VarByteArray;
            
                    [STAThread]
                    static void Main(string[] args)
                    {
                        // Create and fill out the ExampleWireData structure
                        ExampleWireData wd1 = new ExampleWireData();
                        wd1.JustAByte = 4;
                        wd1.ConstString = "hello";
                        wd1.VarString = "goodbye";
                        wd1.VarByteArray = new int[3] {5, 6, 7};
            
                        // Serialize ExampleWireData to byte array
                        byte[] data = (byte[])wd1;
                        Debug.Assert(data.Length == 38);
            
                        // Create, deserialize and verify that it was converted correctly
                        ExampleWireData wd2 = new ExampleWireData();
                        wd2.ReadBytes(data);
                        Debug.Assert(wd2.JustAByte == 4);
                        Debug.Assert(wd2.ConstString == "hello");
                        Debug.Assert(wd2.VarString == "goodbye");
                        Debug.Assert(wd2.VarByteArray[0] == 5);
                        Debug.Assert(wd2.VarByteArray[1] == 6);
                        Debug.Assert(wd2.VarByteArray[2] == 7);
                    }
                }
             </code>
             </example>
            
        </member>
        <member name="F:ServerTestFramework.WireData.ToStringIndentStep">
            <summary>How much to indent nested object and array members when converting to a string.</summary>
        </member>
        <member name="F:ServerTestFramework.WireData.ManualArraySize">
            <summary>
            If set, you will need to manually provide array sizes when writing WireDatas
            </summary>
        </member>
        <member name="F:ServerTestFramework.WireData.DumpDiagnosticInfo">
            <summary>
            Setting this to true will dump WireData info as it's being written to a stream
            </summary>
        </member>
        <member name="F:ServerTestFramework.WireData.NullTermOverRide">
            <summary>
            If set, overrides NullTerminated attribute. That is things that are supposed to be
             null terminated, won't be.
            </summary>
        </member>
        <member name="M:ServerTestFramework.WireData.GetFieldCacheLine(System.Type)">
            <summary>
            Gets the static entry in the WireData field cache that
            corresponds to the type passed in. If one does not exist,
            InitFieldCache will create one.
            </summary>
            <param name="type">Type to get the field cache line for.</param>
            <returns>The FieldCache object for the given type, or null if one cannot be constructed.</returns>
        </member>
        <member name="M:ServerTestFramework.WireData.op_Explicit(ServerTestFramework.WireData)~System.Byte[]">
            <summary>
            This serializes a <c>WireData</c> class to a byte[].
            </summary>
        </member>
        <member name="M:ServerTestFramework.WireData.ReadBytes(System.Byte[])">
            <summary>
            ReadBytes deserializes a byte[] to a <c>WireData</c> class.
            </summary>
        </member>
        <member name="M:ServerTestFramework.WireData.ReadBytes(System.Byte[],System.Int32)">
            <summary>
            ReadBytes deserializes a byte[] to a <c>WireData</c> class.
            </summary>
            <param name="bytes">Byte array of data, may be larger than necessary</param>
            <param name="bytesSize">The number of bytes of data to use. Must be less than or equal to bytes.Length.</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.WireData.ReadBytes(System.IO.BinaryReader,System.Int32)">
            <summary>
            Private function for reading a byte[] from the reader.
            </summary>
            <param name="binaryReader">The reader to read from.</param>
            <param name="count">The number of bytes to read. -1 means read to the end.</param>
            <returns>A byte[] of the bytes read.</returns>
        </member>
        <member name="M:ServerTestFramework.WireData.ReadStream(System.IO.Stream)">
             <summary>
             ReadStream deserializes a stream to fill this <c>WireData</c> class.
             </summary>
             <param name="stream">The source stream to deserialize from.</param>
             <returns>Returns a copy of itself.  This is just a convenience for constructing and deserializing at once.</returns>
             <example>
             <b>Overloaded ReadStream/WriteStream</b>
             <para>When implementing a complex protocol you may run into situations where the built in functionality is not sufficient.  An common example of this is when a header precedes a section that's structure depends on a value in the header.  For example, a IP packet has a byte 24 bytes in which if it equals 17 then the rest of the packet after the header should be interpreted as UDP and if it's 6, TCP.  This affects the following structure of the packet.</para>
             <para>The example below is a trivialized version of making TCP/UDP/IP packets.  For simplicity I am leaving out portions of the protocol and not actually handling the body of the packets.  This implementation is completely self-contained.  All you have to do is create a <c>Packet</c> object and call ReadStream on it to pull in a UDP or TCP packet.</para>
             <code>
                public class Packet : WireData
                {
                    public IPHeader IPHeader;
                    public ProtocolHeader ProtocolHeader;
            
                    public override WireData ReadStream(Stream stream)
                    {
                        IPHeader.ReadStream(stream);
                        Debug.Assert(IPHeader.Type == 0x11 || IPHeader.Type == 0x6);
                        if (IPHeader.Type == 0x11)
                            ProtocolHeader = (ProtocolHeader)new UDPHeader().ReadStream(stream);
                        else
                            ProtocolHeader = (ProtocolHeader)new TCPHeader().ReadStream(stream);
            
                        return this;
                    }
            
                    public override void WriteStream(Stream stream)
                    {
                        if (ProtocolHeader is UDPHeader)
                            IPHeader.Type = 0x11;
                        else
                            IPHeader.Type = 0x6;
            
                        IPHeader.WriteStream(stream);
                        ProtocolHeader.WriteStream(stream);
                    }
                }
            
                public class IPHeader : WireData
                {
                    public byte Version;
                    public byte TOS;
                    public ushort TotalSize;
                    [WireInfo(ArraySize=5)] public byte[] Other1;
                    public byte Type;
                    [WireInfo(ArraySize=10)] public byte[] Other2;
                }
            
                public class ProtocolHeader : WireData
                {
                }
            
                public class UDPHeader : ProtocolHeader
                {
                    public short SourcePort;
                    public short DestPort;
                    public short DataLen;
                    public short Checksum;
                    [WireInfo(ArraySize=0)] public byte[] Data;
                }
            
                public class TCPHeader : ProtocolHeader
                {
                    public short SourcePort;
                    public short DestPort;
                    public uint SequenceNumber;
                    [WireInfo(ArraySize=12)] public byte[] Other2;
                    [WireInfo(ArraySize=0)] public byte[] Data;
                }
                </code>
             </example>
        </member>
        <member name="M:ServerTestFramework.WireData.WriteStream(System.IO.Stream)">
            <summary>
            ReadStream serializes this <c>WireData</c> class into a stream.
            </summary>
            <remarks>
            See <see cref="M:ServerTestFramework.WireData.ReadStream(System.IO.Stream)"/> for more information and an example.
            </remarks>
            <param name="stream">The destination stream to serialize to.</param>
        </member>
        <member name="M:ServerTestFramework.WireData.Size">
            <summary>
            Returns the size of this WireData class as currently configured.
            </summary>
            <remarks>
            This is expensive because it requires actually serializing the structure and getting the length of the resulting data.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.WireData.BinaryWriteValue(System.IO.BinaryWriter,System.Object)">
            <summary>
            Writes an object to the writer using the correctly typed function.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="o">The object to write.</param>
        </member>
        <member name="M:ServerTestFramework.WireData.BinaryWriteValue(System.IO.BinaryWriter,System.Object,System.Type)">
            <summary>
            Writes an object to the writer using the correctly typed function.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="o">The object to write.</param>
            <param name="type">The type to write the object as.</param>
        </member>
        <member name="M:ServerTestFramework.WireData.BinaryWriteValue(System.IO.BinaryWriter,System.Object,System.Type,ServerTestFramework.WireData)">
            <summary>
            Writes an object to the writer using the correctly typed function.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="o">The object to write.</param>
            <param name="type">The type to write the object as.</param>
            <param name="wiredata">The WireDate to inherit schema version from.</param>
        </member>
        <member name="M:ServerTestFramework.WireData.ToString(System.Text.StringBuilder,System.Int32)">
            <summary>
            Provide a formatted ToString method so that we can get good debug output in exceptions/events/logs
            this method uses reflection, and will be SLOW! Only use in exceptional cases, not in high performance codepaths.
            </summary>
        </member>
        <member name="M:ServerTestFramework.WireData.FieldCache.AddForcedFields(System.Reflection.FieldInfo[],System.Boolean)">
            <summary>
            Adds the fields that have WireData.ForceSerialize set to true.
            </summary>
            <param name="fields">The fields to check.</param>
            <param name="bSortedByClass">True to sort the fields, false if not.</param>
        </member>
        <member name="M:ServerTestFramework.WireData.FieldCache.GetFieldIndex(System.String)">
            <summary>
            Determines the index of the field with the given name.
            </summary>
            <param name="fieldName">The name of the field to find.</param>
            <returns>The index of the field with the given name.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if no field can be found whose name matches the value passed in fieldName.
            </exception>
        </member>
        <member name="M:ServerTestFramework.WireData.FieldCache.CreateFuzzData(System.Int32)">
            <summary>
            Creates a FuzzDataAttribute for the given index, unless one already exists.
            </summary>
            <param name="i">The index to create at.</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.BundledAuthData">
            <summary>
            Summary description for BundledAuthData.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Controller.HeartbeatThread">
            <summary>
            Main thread for sending heartbeat messages to the server. Also responsible for sending
            initial register message, which is the same as a heartbeat.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Controller.CommandListenerThread">
            <summary>
            Main thread for listening to incoming server commands. 
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Controller.RegisterListeners(ServerTestFramework.LiveService.CmdListener_Stop)">
            <summary>
            Call this to register listener functions for handling incoming commands
            </summary>
            <param name="funcStop"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Controller.Start(ServerTestFramework.LiveService.TestType,ServerTestFramework.LiveService.TestState,System.String,System.String,ServerTestFramework.LiveService.CmdListener_Stop)">
            <summary>
            Call this to fire up the threads and send an initial register message. Uses default server port.
            </summary>
            <param name="type"></param>
            <param name="state"></param>
            <param name="componentName"></param>
            <param name="serverIp"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Controller.Start(ServerTestFramework.LiveService.TestType,ServerTestFramework.LiveService.TestState,System.String,System.Net.IPEndPoint,ServerTestFramework.LiveService.CmdListener_Stop)">
            <summary>
            Call this to fire up the threads and send an initial register message.
            </summary>
            <param name="type"></param>
            <param name="state"></param>
            <param name="componentName"></param>
            <param name="epControllerServer"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Controller.Stop">
            <summary>
            Shuts down the threads and causes a stop message to be sent to the server
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Controller.SetCurrentState(ServerTestFramework.LiveService.TestType,ServerTestFramework.LiveService.TestState,System.String)">
            <summary>
            Client should call this to update its state
            </summary>
            <param name="type"></param>
            <param name="state"></param>
            <param name="componentName"></param>
        </member>
        <member name="T:ServerTestFramework.LiveService.MsgTypes">
            <summary>
            In MessageHeader, to indicate which kind of message is coming
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.MessageHeader">
            <summary>
            Always sent before all other message types
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestState">
            <summary>
            State of client for Register messages
            Warning: StfController relies on these, watch for build breaks if you change them.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestType">
            <summary>
            Type of client for Register messages
            Warning: StfController relies on these, watch for build breaks if you change them.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Register">
            <summary>
            (xmit) Register message, for sending state to server
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.CommandMsg">
            <summary>
            (recv) Command message
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.FDTransaction.endPoint">
            <summary>
            IP or DNS name of server
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.FDTransaction.transport">
            <summary>
            Use the UDP protocol transport for delivery
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.FDTransaction.ExternalTcpClient">
            <summary>Delegate for an external TcpClient source.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FDTransaction.AcquireTcpClient(System.Net.IPEndPoint)">
            <summary>
            Gets an ITcpClient for use in communicating with the given remote server.
            </summary>
            <param name="remote">The remote server that the request is bound for.</param>
            <returns>An ITcpClient for use in communicating with the remote server.</returns>
        </member>
        <member name="F:ServerTestFramework.LiveService.FDTransaction.ExternalUdpClient">
            <summary>Delegate for an external UdpClient source.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FDTransaction.AcquireUdpClient(System.Net.IPEndPoint)">
            <summary>
            Gets an IUdpClient for use in communicating with the given remote server.
            </summary>
            <param name="remote">The remote server that the request is bound for.</param>
            <returns>An IUdpClient for use in communicating with the remote server.</returns>
        </member>
        <member name="P:ServerTestFramework.LiveService.FDTransaction.httpStatus">
            <summary>
            http status in response
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.FDTransaction.ResponseContents">
            <summary>
            Buffer sized to contain raw contents of response
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.FDTransaction.ErrorContents">
            <summary>
            Buffer sized to contain raw contents of error response
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.FDTransaction.XErr">
            <summary>
            Value returned in XErr header field when http response status is 500.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.FDTransaction.XDelay">
            <summary>
            HTTP response header for client-side throttling
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.FDTransaction.Transports">
            <summary>
            FD transactions can be UDP or TCP now
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.ITcpClient">
            <summary>
            Interface used by FDTransaction to send traffic to LIVE services.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.ITcpClient.Connect(System.Net.IPEndPoint)">
            <summary>Connects to the given remote endpoint.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.ITcpClient.GetStream">
            <summary>Gets the NetworkStream associated with the client.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.ITcpClient.Close">
            <summary>Closes the client.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.ITcpClient.Client">
            <summary>Get the underlying socket for the client.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.ITcpClient.ExclusiveAddressUse">
            <summary>Indicates exclusive address use.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.ITcpClient.ReceiveTimeout">
            <summary>The receive timeout of the client.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.ITcpClient.SendTimeout">
            <summary>The send timeout of the client.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.ITcpClient.ReceiveBufferSize">
            <summary>Size of the receive buffer.</summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.IUdpClient">
            <summary>
            Interface used by FDTransaction to send traffic to LIVE services.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.IUdpClient.Connect(System.Net.IPEndPoint)">
            <summary>
            Set the remote host that the client will communicate with.
            </summary>
            <param name="endpoint">The remote host that the client will communicate with.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.IUdpClient.Send(System.Byte[],System.Int32)">
            <summary>
            Sends data to the remote host.
            </summary>
            <param name="buffer">The data to send.</param>
            <param name="length">The length of the data to send.</param>
            <returns>The number of bytes sent to the remote host.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.IUdpClient.Receive(System.Net.IPEndPoint@)">
            <summary>
            Receives a single datagram from the remote host.
            </summary>
            <param name="remote">The remote host that sent the datagram.</param>
            <returns>The bytes of the datagram.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.IUdpClient.Close">
            <summary>Closes the client.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.IUdpClient.ReceiveTimeout">
            <summary>The receive timeout of the client.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.IUdpClient.SendTimeout">
            <summary>The send timeout of the client.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.IUdpClient.LocalIPEndPoint">
            <summary>The local IP endpoint of the client.</summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.FDTransaction.AcquireTcpClientDelegate">
            <summary>Delegate for an external TcpClient source.</summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.FDTransaction.AcquireUdpClientDelegate">
            <summary>Delegate for an external UdpClient source.</summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.FDTransactionException">
            <summary>
            Exception thrown by FDTransaction.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.GameConfig">
            <summary>
            Summary description for GameConfig.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.HTTPAuthData">
            <summary>
            Taken from private\common\service\SGInfo.cs
            Storage datacenter request needs these httpHeader
            
            This is a stripped down copy of the service SGInfo.cs.  This is unfortunate, as we
            also have a test version of SGInfo.cs (in ServerTestFramework\Liveservice\FakeSG\SGInfo.cs, 
            its object is CSGInfo.  CSGInfo is optimized for FakeSG, which requires an explicitly laid
            out struct so it can easily map to the memory-mapped file (MMF).  It is also a struct instead
            of a class.  When we get some down time, it might be nice to consolidate this and that. 
            
            This does support AuthData3 now.
            
            kgoodier
            
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.SGInfo">
            <summary>
            taken from SGInfo.cs, but only keeps the parts that HTTPAuthData uses
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.HttpWebRequestHelper.Prepare(System.String,System.String,System.Int32,System.String,System.String,System.String,System.Byte[],System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a HttpWebRequest instance and synchronously writes to the RequestStream
            </summary>
            <param name="scheme">Scheme (http, https)</param>
            <param name="host">HostName</param>
            <param name="port">Port NUmber</param>
            <param name="path">Uri Path</param>
            <param name="queryString">Uri QueryString</param>
            <param name="contentType">ContentType header value</param>
            <param name="content">Content</param>
            <param name="method">Http Method</param>
            <param name="headers">Additional Headers to add</param>
            <returns>HttpWebRequest instance</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.HttpWebRequestHelper.Prepare(System.Uri,System.String,System.Byte[],System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a HttpWebRequest instance and synchronously writes to the RequestStream
            </summary>
            <param name="uri">Requst Uri</param>
            <param name="contentType">ContentType header value</param>
            <param name="content">Content</param>
            <param name="method">Http Method</param>
            <param name="headers">Additional Headers to add</param>
            <returns>HttpWebRequest instance</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.HttpWebRequestHelper.Execute(System.Net.HttpWebRequest)">
            <summary>
            Execute a HttpRequest and return a response
            </summary>
            <param name="request">WebRequest</param>
            <returns>Response</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.HttpWebRequestHelper.PrepareAndExecute(System.String,System.String,System.Int32,System.String,System.String,System.String,System.Byte[],System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a HttpWebRequest instance and synchronously writes to the RequestStream, synchrously executes.  Caller is responsible for closing Response
            </summary>
            <param name="scheme">Scheme (http, https)</param>
            <param name="host">HostName</param>
            <param name="port">Port NUmber</param>
            <param name="path">Uri Path</param>
            <param name="queryString">Uri QueryString</param>
            <param name="contentType">ContentType header value</param>
            <param name="content">Content</param>
            <param name="method">Http Method</param>
            <param name="headers">Additional Headers to add</param>
            <returns>HttpWebResponse instance</returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.ISocket">
            <summary>
            Interface used by FDTransaction to access the underlying socket for an ITcpClient.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.ISocket.Shutdown(System.Net.Sockets.SocketShutdown)">
            <summary>Shuts down the socket with the given parameter.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.ISocket.Receive(System.Byte[])">
            <summary>Receive from the socket.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.ISocket.Close">
            <summary>Closes the socket.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.ISocket.LocalEndPoint">
            <summary>The local endpoint of the socket.</summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.SocketToISocket">
            <summary>
            Converts a Socket to an ISocket.
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLiveGlobal">
            <summary>
            Provides various statics for the entire framework.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLiveGlobal.GetUserSet">
            <summary>
            Returns the BulkUserSet, if specified in the XML file. Grabs either the
            userset with tag "" or the first user set, if "" is not found.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLiveGlobal.GetUserSet(System.String)">
            <summary>
            Returns the BulkUserSet, if specified in the XML file, for the given tag. This is
            user-settable, in the XML file, and allows for distinct user sets. You may want
            to create some Xenon and Xbox users, or partition them manually, etc.
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.WebRequestBase.SendRequest">
            <summary>
            Override this method in any subclasses to provied a way to send the request
            </summary>
            <returns>True if the request is sucessful, false otherwise</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.WebRequestBase.SendRequest(System.Net.IPEndPoint)">
            <summary>
            Sends this web request object to the provided address
            </summary>
            <param name="endPoint">The address to send the request</param>
            <returns>True if the request is sucessful, false otherwise</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.WebRequestBase.ReadResponse(System.Byte[])">
            <summary>
            Override this method in any subclasses to read the response data as you need
            </summary>
            <param name="responseData">The data from the response</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.WebRequestBase.WebRequestToList(System.Object)">
            <summary>
            Takes an object and extracts any WebRequest parameters fields that it contains
            and returns a list of the names and values of the parameters.  This function will
            actually work on any object that has fields with the WebRequestParam attribute
            and not just on a WebRequestBase object.
            </summary>
            <param name="webRequest">The object to extract parameter names and values from</param>
            <returns>A list of Name-Value pairs of the parameters extracted from the object</returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.FilterBase">
            <summary>
            Provides a base class for all filters used by the FilteWebRequest class
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FilterBase.ToList">
            <summary>
            Converts a WebRequestParam attrib marked-up class into a List
            </summary>
            <returns>A List containing the name/value pairs of the class</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.FilterBase.BuildNameValuePairs(System.Collections.Hashtable)">
            <summary>
            for internal server catalog query testing
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.FilterWebRequest">
            <summary>
            A WebRequest object that accepts a filter object and sends it in the request
            and then reads the response (usually an XML document) back in.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.FilterWebRequest.BaseFilter">
            <summary>
            A reference to the base class version of the filter that was provided for this request
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.FilterWebRequest.Response">
            <summary>
            For simplicity, a FilterWebRequest just reads the request as raw UTF-8 encoded text 
            into a string.  This response data is accessible through this property.
            </summary>
        </member>
        <member name="T:ServerTestFramework.WireDataIncludeBase">
            <summary>
            Extend this if you want to include a base class's members in the Wiredata serialization. This will
            include all public instance variables in base classes, up through the chain to the base Wiredata class.
            Fields in base classes will be serialized first.
            </summary>
        </member>
        <member name="T:ServerTestFramework.WireInfoAttribute">
            <summary>
            Attribute placed on fields of a class derived from WireData to add context to the field in order to serialze it
            </summary>
        </member>
        <member name="F:ServerTestFramework.WireInfoAttribute.ArraySize">
            <summary>
            Used to specify a constant size for an array.
            </summary>
        </member>
        <member name="F:ServerTestFramework.WireInfoAttribute.SizeParam">
            <summary>
            Used to specify which other field in a <c>WireData</c> class specifies the size of the array or string this attribute is put on.
            </summary>
        </member>
        <member name="F:ServerTestFramework.WireInfoAttribute.NullTerminated">
            <summary>
            Include the Null in a varible length string and add 1 to it's length variable (if there is one)
            </summary>
        </member>
        <member name="F:ServerTestFramework.WireInfoAttribute.HexString">
            <summary>
            Whether the string represents a Hex number
            </summary>
        </member>
        <member name="F:ServerTestFramework.WireInfoAttribute.UnicodeEncoded">
            <summary>
            Use unicode Encoding instead of the default (UTF8)
            </summary>
        </member>
        <member name="F:ServerTestFramework.WireInfoAttribute.ForceSerialize">
            <summary>If true, forces this field to be picked up for serialization.</summary>
        </member>
        <member name="F:ServerTestFramework.WireInfoAttribute.None">
            <summary>
            An static instance of <c>WireInfoAttribute</c> with all values set to defaults.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.XblUserBase">
            <summary>
            XblUserBase is intended to be used for stress purpose only.  Do not create XblUserBase object in your tools.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XblUserBase.op_Implicit(ServerTestFramework.LiveService.XblUserBase)~System.UInt64">
            <remarks>
            Other type castors should be handled by functional library.  For example, explicit cast to BillingInfo should be handled by UACSCommon.
            </remarks>
        </member>
        <member name="T:ServerTestFramework.LiveService.XblUser">
            <summary>
            XblUser represents user information for server test framework.
            Coders should make sure that following guideline is observed:
            1. for libary code that intended to use by other components and thus require absolute performance, you can use _variable to access different fields directly
            2. for utility code, please use provided accessor
            3. utility coder should assume that each field can contain erronous data, including null.  This is to provide test cases writers to test negative (error condition).
            please refer to wiki page for more information.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.XblUser._gamertag">
            <remarks>
            _gamertag, _billingInfo and _passportInfo are listed as internal to allow direct access for libraby code that requires absolute performance
            please remember that direct access of those members requires more responsibility in the area of house keeping.
            we do not add "protected" level of access to those members since XblUser is sealed.  If you make XblUser inheritable, you should consider to make those members
            protected internal.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.LiveService.XblUser.#ctor">
            <remarks>
            The following constructor are internal only.  They are intended for library code who need direct access to member variables.  Remember that using these
            two constructor may break utility code assumption that puid and gamertag is always there.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.LiveService.XblUser.#ctor(System.UInt64,System.String)">
            <remarks>
            The following constructors are for public consumption.  If you add a new data member for this class, please don't forget to update the constructors.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.LiveService.XRLPayload.TestNegative(System.UInt32)">
            <summary>
            Verifies that the specified call failed, and that the returned error matches the expected code. 
            This behavior can be overriden to not check for an explicit error code
            
            This function will also set ResultCode as needed
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.XRLPayload`1">
            <summary>
            This class provides and easy generic way to link an XRL Payload object
            with a corresponding XRLObject2 request.  When executing, the request 
            object will automatically be serialized and transmitted.  
            </summary>
            <typeparam name="XRLObject2RequestType">A XRLObject2 request object to base the payload on</typeparam>
            <remarks>
            The ReadResponse method must be overridden to use this class otherwise 
            an exception will be thrown during execution.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.LiveService.XRLPayload`1.Execute(System.Net.IPEndPoint)">
            <summary>
            Execute this request using the appropriate request type and reads
            the response as appropriate
            </summary>
            <param name="endPoint">The endpoint against which to execute the request</param>
            <returns>True if the request was successfull, false otherwise.</returns>
        </member>
        <member name="P:ServerTestFramework.LiveService.XRLPayload`1.Request">
            <summary>
            The request object that will be serialized and transmitted for this payload
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.XRLPayload`2">
            <summary>
            This class provides and easy generic way to link an XRL Payload object
            with corresponding XRLObject2 request and response objects.  When 
            executing, the request object will automatically be serialized and 
            transmitted.  If the request is successfull, the response will be read
            and parsed into the response object
            </summary>
            <typeparam name="XRLObject2RequestType">An XRLObject2 request object to base the payload on</typeparam>
            <typeparam name="XRLObject2ResponseType">An XRLObject2 response object to base the response on</typeparam>
        </member>
        <member name="M:ServerTestFramework.LiveService.XRLPayload`2.ReadResponse(System.IO.MemoryStream)">
            <summary>
            Reads the response from memory into an instance of our custom response object
            </summary>
            <param name="responseStream">The response data to read into the object</param>
        </member>
        <member name="P:ServerTestFramework.LiveService.XRLPayload`2.Response">
            <summary>
            The response object that the response data will be read into after execution
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.XRLPayloads`2">
            <summary>
            This class provides and easy generic way to link an XRL Payload object
            with corresponding XRLObject2 request and response for any API which 
            accepts multiple requests in a single request stream.  When executing 
            the request objects will automatically be serialized into the request 
            stream sequentially.  If the request is successful, the response stream
            will be read into an array of corresponding response objects.
            </summary>
            <typeparam name="XRLObject2RequestType">An XRLObject2 request object to base the payload on</typeparam>
            <typeparam name="XRLObject2ResponseType">An XRLObject2 response object to base the response on</typeparam>
        </member>
        <member name="F:ServerTestFramework.LiveService.XRLPayloads`2.requestObj">
            <summary>
            A delegate object used to retrieve some non-static properties from
            the request object type that are required to make the request
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.XRLPayloads`2.Requests">
            <summary>
            An array of request objects to send to the server
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XRLPayloads`2.WriteStream(System.IO.BinaryWriter)">
            <summary>
            Writes each of the request objects into the request stream
            </summary>
            <param name="binaryWriter"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.XRLPayloads`2.ReadResponse(System.IO.MemoryStream)">
            <summary>
            Reads the response from memory into an array of response objects.
            There should be one response object for each request object.
            </summary>
            <param name="responseStream">The response data</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Arbitration.ArbSessionBase">
             <summary>
             This is a wrapper class that represents a shared arbitration session
             which you would use to
             </summary>
            
        </member>
        <member name="M:ServerTestFramework.LiveService.Arbitration.ArbitrationSession.AddMachine">
            <summary>
            Create a new machine participating in the session.
            </summary>
            <returns>Index of machine for later calls to AddUser</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Arbitration.ArbitrationSession.AddUser(System.UInt32,System.UInt64,System.UInt64[])">
            <summary>
            Add a user playing on a machine by index.
            </summary>
            <param name="machine">Index of machine in session</param>
            <param name="userPuid">Unique ID of user</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Arbitration.ArbitrationSession.AddUser(System.UInt64)">
            <summary>
            Add a single user playing on their own machine.
            </summary>
            <param name="userPuid">The unique ID of the user</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Arbitration.ArbitrationSession.AddUser(System.UInt64,System.UInt64[])">
            <summary>
            Add a single user playing on their own machine.
            </summary>
            <param name="userPuid">The unique ID of the user</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Arbitration.HandlerOptions">
            <summary>
            Summary description for HandlerOptions.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Arbitration.HandlerOptions.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Arbitration.HandlerOptions.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Arbitration.HandlerOptions.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Arbitration.XArbListener">
            <summary>
            XArbListener threads listen for stats or query posts back from Arbitration server.
            </summary>
            
        </member>
        <member name="T:ServerTestFramework.Utilities.XHttpListenerIOCP">
            <summary>
            Summary description for Server.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.XHttpListenerIOCP.Continue">
            <summary>
            String constants
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.XHttpListenerIOCP.randGen">
            <summary>
            random number generator.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.XHttpListenerIOCP.PercentError">
            <summary>
            PercentError is the percentage time 500 bad request is returned with the proper xErrror 
            you can call SetXerror to change the default xerror returned.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.XHttpListenerIOCP.delay">
            <summary>
            delay is the minumun time the request will take before it returns 200 ok
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.XHttpListenerIOCP.maxCon">
            <summary>
            Maximum connections the listener can open. By default its infinity.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.XHttpListenerIOCP.IsRunning">
            <summary>
            Flag that indicates in which state is the listner 
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.XHttpListenerIOCP.port">
            <summary>
            Port that listener accepts on
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.XHttpListenerIOCP.sock">
            <summary>
            Listener socket
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.XHttpListenerIOCP.Handlers">
            <summary>
            Number of handlers
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.XHttpListenerIOCP.ShutDownEvent">
            <summary>
            Signaled when it's time to shut down
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.XHttpListenerIOCP.ConnectionAccepted">
            <summary>
            Let's the listener thread know it's time to call BeginAccept again
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XHttpListenerIOCP.ProcessData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Virtual function for processing content data
            </summary>
            <param name="ReqData"></param>
            <param name="ConIndex"></param>
            <param name="conLen"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.XHttpListenerIOCP.ProcessData(System.Byte[],System.Int32,System.Int32,System.Byte[]@)">
            <summary>
            This is for processing requests whose reponse contains both header and body.
            </summary>
            <param name="ReqData"></param>
            <param name="ConIndex">the index in the buffere where the content starts</param>
            <param name="conLen">the lendth of the data</param>
            <param name="respBuff"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.XHttpListenerIOCP.ThreadBody">
            <summary>
            The main listener thread
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Arbitration.XRLDebugResult">
            <summary>
            Arbitration DebugResult request XRLPayload.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Arbitration.XRLDebugResultResponse">
            <summary>
            Arbitration DebugResult response wiredata
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Arbitration.ArbitrationXboxInfo">
            <summary>
            Arbitration DebugResult response ArbitrationXboxInfo wiredata
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Arbitration.ArbitrationXUIDAndTrust">
            <summary>
            Arbitration DebugResult response ArbitrationXUIDAndTrust wiredata
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Arbitration.ArbitrationBundle">
            <summary>
            Arbitration DebugResult response ArbitrationBundle wiredata
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Arbitration.ArbitrationSuspiciousInfo">
            <summary>
            Arbitration DebugResult response ArbitrationSuspiciousInfo wiredata
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Arbitration.XRLHealthARB">
            <summary>
            Summary description for XRLHealth.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Arbitration.XRLRegister">
            <summary>
            Arbitration Register request XRLPayload.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Arbitration.XRLRegisterResponse">
            <summary>
            Arbitration Register response wiredata
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Arbitration.RegisteredXbox">
            <summary>
            Arbitration Register response RegisteredXbox wiredata 
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Arbitration.RegisteredUser">
            <summary>
            Arbitration Register repsonse RegisteredUser wiredata 
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Arbitration.XRLReportResult">
            <summary>
            Arbitration ReportResult request XRLPayload.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Arbitration.LostConnectivityInfo">
            <summary>
            Arbitration ReportResult request LostConnectivityInfo wiredata
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Arbitration.SuspiciousInfo">
            <summary>
            Arbitration ReportResult request SuspiciousInfo wiredata
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Arbitration.StatsBundle">
            <summary>
            Arbitration ReportResult request StatsBundle wiredata
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Arbitration.TournamentBundle">
            <summary>
            Arbitration ReportResult request TournamentBundle wiredata
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Arbitration.XRLTimeExtend">
            <summary>
            Arbitration TimeExtend request XRLPayload.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLAcknowlegeLicensesDelivery.Execute">
            <summary>
            Perform the request, creating a machine if required
            </summary>
            <returns>True if the request is successful, false otherwise</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLAcknowlegeLicensesDelivery.Execute(System.UInt64)">
            <summary>
            Perform the request as the given machine
            </summary>
            <param name="machinePuid">The machine to perform the request as</param>
            <returns>True if the request is successful, false otherwise</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLAcknowlegeLicensesDelivery.PopulateSlot(ServerTestFramework.LiveService.FakeSG.CSGInfo@)">
            <summary>
            Populate the SGInfo slot with the appropriate information from the request
            </summary>
            <param name="slot">The slot to populate</param>
            <remarks>
            The machine puid that is created or passed in is cached and is 
            not set into the SG object unless this method is called so if 
            ManualSlotSetup is true, then the values in the slot will not
            be overridden.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLAcknowlegeLicensesDelivery.SetServices">
            <summary>
            Sets the appropriate services on the request.  For this request we only 
            need the Signature service.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLAcquireMediaLicenses.Execute(System.UInt64)">
            <summary>
            Perform the acquire request using the provided machine puid.
            </summary>
            <param name="machinePuid">The machine to perform the request as</param>
            <returns>True if the request is successful, False otherwise.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLAcquireMediaLicenses.PopulateSlot(ServerTestFramework.LiveService.FakeSG.CSGInfo@)">
            <summary>
            Populate the SGInfo slot with the appropriate information from the request
            </summary>
            <param name="slot">The slot to populate</param>
            <remarks>
            The machine puid that is created or passed in is cached and is 
            not set into the SG object unless this method is called so if 
            ManualSlotSetup is true, then the values in the slot will not
            be overridden.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLAcquireMediaLicenses.SetServices">
            <summary>
            Sets the appropriate services on the request.  For this request we only 
            need the Signature service.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLAcquireMediaLicenses.GetValidSampleBlocks">
            <summary>
            Gets a set of valid client information blocks to use in the request
            </summary>
            <returns>A valid sample set of client info blocks</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLCheckRevocation.WriteStream(System.IO.BinaryWriter)">
            <summary>
            Overrides the XRLPayload base write stream function which uses 
            reflection to determine what to write to the stream. CheckRevocation
            is a high TPS api, so this makes the request a bit quicker.
            </summary>
            <param name="binaryWriter">The stream to write this object to</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Signature.ContentTupleExtensions">
            <summary>
            Provides a few extensions methods to the service classes to allow for a
            bit more testability.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLCreateCertificate.Execute">
            <summary>
            Perform the create request, creating a machine if required
            </summary>
            <returns>True if the request is successful, False otherwise.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLCreateCertificate.Execute(System.UInt64)">
            <summary>
            Perform the acquire request using the provided machine puid.
            </summary>
            <param name="machinePuid">The machine to perform the request as</param>
            <returns>True if the request is successful, False otherwise.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLCreateCertificate.PopulateSlot(ServerTestFramework.LiveService.FakeSG.CSGInfo@)">
            <summary>
            Populate the SGInfo slot with the appropriate information from the request
            </summary>
            <param name="slot">The slot to populate</param>
            <remarks>
            The machine puid that is created or passed in is cached and is 
            not set into the SG object unless this method is called so if 
            ManualSlotSetup is true, then the values in the slot will not
            be overridden.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLCreateCertificate.SetServices">
            <summary>
            Sets the appropriate services on the request.  For this request we only 
            need the Signature service.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLCreateCertificate2.Initialize">
            <summary>
            Initialize the request with the default client type (Xenon).
            This sets up the console certificate into a know state, and
            initalizes a client for the request
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLCreateCertificate2.Initialize(ServerTestFramework.LiveService.Auth.AuthContext.ClientTypes)">
            <summary>
            Initialize the request with a given client type.  Sets up the 
            console certificate into a know state, and initializes a client
            for the request.
            </summary>
            <param name="clientType">The type of client to create</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLCreateCertificate2.Execute(ServerTestFramework.LiveService.Auth.AuthContext.ClientTypes)">
            <summary>
            Initialize the CreateCertificate2 request with a client of the given type and 
            preform the request
            </summary>
            <param name="clientType">The client type to generate</param>
            <returns>True if the request was successful, false otherwise</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLCreateCertificate2.Execute(System.Boolean)">
            <summary>
            Execute CreateCertificate2 and fill out the request with the available information
            </summary>
            <param name="signCertificate">If true, the certificate will be resigned before being sent</param>
            <returns>True if the request was successful, false otherwise</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLCreateCertificate2.Execute">
            <summary>
            Execute the CreateCertificate2 request.  This method should only be called
            if the request is already fully  created.  This does not setup any  values 
            on the request object before submitting it.  The SGInfo will be initalized 
            if AutoSGInfo is set to true.
            </summary>
            <returns>True if the request was successful, false otherwise</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLCreateCertificate2.PopulateSlot(ServerTestFramework.LiveService.FakeSG.CSGInfo@)">
            <summary>
            Populate the SGInfo slot with the appropriate information from the request
            </summary>
            <param name="slot">The slot to populate</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLCreateCertificate2.SetServices">
            <summary>
            Sets the appropriate services on the request.  For this request we only 
            need the Signature service.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Signature.XRLCreateCertificate2.Client">
            <summary>
            The client which represents the machine making the request
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Signature.XRLCreateCertificate2.ConsoleCert">
            <summary>
            The console certificate used for the request
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Signature.XRLCreateCertificate2.AppId">
            <summary>
            The AppId used in the request
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Signature.XRLCreateCertificate2.ConsoleId">
            <summary>
            A convenience accessor for the console id used
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLCreatePlayReadyCertificate.Execute">
            <summary>
            Perform the create request, creating a machine if required
            </summary>
            <returns>True if the request is successful, False otherwise.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLCreatePlayReadyCertificate.Execute(System.UInt64)">
            <summary>
            Perform the acquire request using the provided machine puid.
            </summary>
            <param name="machinePuid">The machine to perform the request as</param>
            <returns>True if the request is successful, False otherwise.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLCreatePlayReadyCertificate.PopulateSlot(ServerTestFramework.LiveService.FakeSG.CSGInfo@)">
            <summary>
            Populate the SGInfo slot with the appropriate information from the request
            </summary>
            <param name="slot">The slot to populate</param>
            <remarks>
            The machine puid that is created or passed in is cached and is
            not set into the SG object unless this method is called so if
            ManualSlotSetup is true, then the values in the slot will not
            be overridden.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLCreatePlayReadyCertificate.SetServices">
            <summary>
            Sets the appropriate services on the request.  For this request we only
            need the Signature service.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLGetSigningKey.InitializeDefaults">
            <summary>
            This is being overridden to prevent STF from overwriting the values that we've provided as defaults
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLGetSigningKey.WriteStream(System.IO.BinaryWriter)">
            <summary>
            This request takes no parameters, so this method is just used to 
            write extra data into the request stream for test purposes.
            </summary>
            <param name="binaryWriter">The stream to write the request to</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLGetSigningKey.ReadResponse(System.IO.MemoryStream)">
            <summary>
            Validates the response size and the reads it into an XSigSignature
            </summary>
            <param name="responseStream">The stream to read the response from</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Signature.XRLRefreshGameLicense">
            <summary>
            A XRLPayload class to perfrom a RefreshGameLicense request and read the response
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLRefreshGameLicense.Execute">
            <summary>
            Perform the refresh request.
            </summary>
            <returns>True if the request is successful, False otherwise.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLRefreshGameLicense.PopulateSlot(ServerTestFramework.LiveService.FakeSG.CSGInfo@)">
            <summary>
            Populate the SGInfo slot with the appropriate information from the request
            </summary>
            <param name="slot">The slot to populate</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLRefreshGameLicense.SetServices">
            <summary>
            Sets the appropriate services on the request.  For this request we only 
            need the Signature service.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Signature.XRLXSigSignOnBehalf.ExtraData">
            <summary>
            This is just a blob of random extra data that is serialized into the
            stream after any request objects.  This can be used to simulate a 
            variety of negative test cases.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLXSigSignOnBehalf.#ctor">
            <summary>
            Creates an empty XRLXSigSignOnBehalf request object
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLXSigSignOnBehalf.#ctor(System.Int32)">
            <summary>
            Creates an XRLXSigSignOnBehalf request object with an array of 
            requests.  This does not populate the array, but basically just sets
            it up with an empty array that can be used.
            </summary>
            <param name="numRequests">The size of request objects array to create</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLXSigSignOnBehalf.#ctor(ServerTestFramework.LiveService.XOService,System.Byte[])">
            <summary>
            Creates an XRLXSigSignOnBehalf request with a single request object
            initialized with the provide service ID and digest
            </summary>
            <param name="serviceId">The service ID to initialize the request with</param>
            <param name="digest">The digest to initialize the request with</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLXSigSignOnBehalf.#ctor(System.UInt32,System.Byte[])">
            <summary>
            Creates an XRLXSigSignOnBehalf request with a single request object
            initialized with the provide service ID and digest
            </summary>
            <param name="serviceId">The service ID to initialize the request with</param>
            <param name="digest">The digest to initialize the request with</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLXSigSignOnBehalf.Execute(xonline.common.protocol.XSigSignOnBehalfRequest)">
            <summary>
            Executes an SignOnBehalf request with the provided request object
            </summary>
            <param name="signRequest">The signing request to execute</param>
            <returns>A SignOnBehalf response object</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLXSigSignOnBehalf.Execute(xonline.common.protocol.XSigSignOnBehalfRequest[])">
            <summary>
            Executes an SignOnBehalf request with the provided request objects
            </summary>
            <param name="signRequest">The signing requests to execute</param>
            <returns>An array of SignOnBehalf response object</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLXSigSignOnBehalf.Execute">
            <summary>
            Executes the SignOnBehalf request against the default XSig interface
            </summary>
            <returns>True if the request was successful, false otherwise</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLXSigSignOnBehalf.WriteStream(System.IO.BinaryWriter)">
            <summary>
            Overrides the default write stream to allow the writing of some
            additional garbage data for test pruposes
            </summary>
            <param name="binaryWriter">The stream that the data is written to</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLXSigVerifySignature.CreateVerifyRequest(System.Byte[])">
            <summary>
            Creates a XSigVerifySignatureRequest from a blob of data.  This 
            includes hashing the data and constructing a valid signature.  The 
            signature is generated using the default test signing key.
            </summary>
            <param name="data">The data to create the request from</param>
            <returns>A valid XSigVerifySignatureRequest for the given data</returns>
            <remarks>
            If the returned request is modified, you will need to sign it again
            if you want it to have a valid signature
            </remarks>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLXSigVerifySignature.CreateVerifyRequest(System.Byte[],System.Byte[])">
            <summary>
            Creates a XSigVerifySignatureRequest from a blob of data.  This 
            includes hashing the data and constructing a valid signature.  The 
            signature is generated using the provided key.
            </summary>
            <param name="data">The data to create the request from</param>
            <param name="key">The key to sign the request with</param>
            <returns>A valid XSigVerifySignatureRequest for the given data</returns>
            <remarks>
            If the returned request is modified, you will need to sign it again
            if you want it to have a valid signature
            </remarks>
        </member>
        <member name="F:ServerTestFramework.LiveService.Signature.XRLXSigVerifySignature.ExtraData">
            <summary>
            This is just a blob of random extra data that is serialized into the
            stream after any request objects.  This can be used to simulate a 
            variety of negative test cases.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLXSigVerifySignature.#ctor">
            <summary>
            Creates an empty XRLXSigVerifySignature request object
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLXSigVerifySignature.#ctor(System.Int32)">
            <summary>
            Creates an XRLXSigVerifySignature request object with an array of 
            requests.  This does not populate the array, but basically just sets
            it up with an empty array that can be used.
            </summary>
            <param name="numRequests">The size of request objects array to create</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLXSigVerifySignature.#ctor(System.Byte[])">
            <summary>
            Creates an XRLXSigVerifySignature request object with a single
            request object created using the provided data.  If the request is 
            modified at all, it will need to be signed again.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLXSigVerifySignature.Execute">
            <summary>
            Executes the VerifySignature request against the default XSig interface
            </summary>
            <returns>True if the request was successful, false otherwise</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XRLXSigVerifySignature.WriteStream(System.IO.BinaryWriter)">
            <summary>
            Overrides the default write stream to allow the writing of some
            additional garbage data for test pruposes
            </summary>
            <param name="binaryWriter">The stream that the data is written to</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Signature.Keys">
            <summary>
            This provides access to all of the raw test master signing keys that are
            used by the service.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Signature.SignatureExtensionMethods">
            <summary>
            This class provides a bunch of extension methods on xonline service
            objects that we can't modify as they aren't part of test code.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.SignatureExtensionMethods.Sign(xonline.common.protocol.XSigVerifySignatureRequest)">
            <summary>
            Sign an XSigVerifySignatureRequest object, by generating the 
            signature for the digest in the request and setting it on the sig.
            </summary>
            <param name="verifyRequest">The request to sign</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.SignatureExtensionMethods.Sign(xonline.common.protocol.XSigVerifySignatureRequest,System.Byte[])">
            <summary>
            Sign an XSigVerifySignatureRequest object, by generating the 
            signature for the digest in the request and setting it on the sig.
            </summary>
            <param name="verifyRequest">The request to sign</param>
            <param name="key">The key to sign the request with</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.SignatureExtensionMethods.Initialize(xonline.common.protocol.XSigSignature)">
            <summary>
            Initialize an XSigSignature with some sane default values
            </summary>
            <param name="sig"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.SignatureExtensionMethods.ComputeIntermediateSignature(xonline.common.protocol.XSigSignature,System.Byte[])">
            <summary>
            Compute the intermediate signing key for an XSigSignature.
            </summary>
            <param name="sig">The signature to generate the intermediate key from</param>
            <param name="key">The XSig key to hash the key with</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.SignatureExtensionMethods.ComputeSignature(xonline.common.protocol.XSigSignature,System.Byte[])">
            <summary>
            Compute the signature of a given digest and signature.
            </summary>
            <param name="sig">The XSigSignature to generate a signature for</param>
            <param name="digest">The digest to generate a signature for</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.SignatureExtensionMethods.ComputeSignature(xonline.common.protocol.XSigSignature,System.Byte[],System.Byte[])">
            <summary>
            Compute the signature of a given digest and signature.
            </summary>
            <param name="sig">The XSigSignature to generate a signature for</param>
            <param name="digest">The digest to generate a signature for</param>
            <param name="key">The key to generate a signature with</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Signature.XSigWebClient">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.TestConnection(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.BeginTestConnection(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.EndTestConnection(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.TestConnectionAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.TestConnectionAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.AcquireMediaLicenses(System.String[],System.String[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.BeginAcquireMediaLicenses(System.String[],System.String[],System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.EndAcquireMediaLicenses(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.AcquireMediaLicensesAsync(System.String[],System.String[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.AcquireMediaLicensesAsync(System.String[],System.String[],System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.AcknowledgeLicensesDelivery(System.String[],System.String[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.BeginAcknowledgeLicensesDelivery(System.String[],System.String[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.EndAcknowledgeLicensesDelivery(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.AcknowledgeLicensesDeliveryAsync(System.String[],System.String[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.AcknowledgeLicensesDeliveryAsync(System.String[],System.String[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.CheckLicensesAvailability(System.String[],System.String[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.BeginCheckLicensesAvailability(System.String[],System.String[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.EndCheckLicensesAvailability(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.CheckLicensesAvailabilityAsync(System.String[],System.String[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.CheckLicensesAvailabilityAsync(System.String[],System.String[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.SetBlacklistDigestState(System.String[],System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.BeginSetBlacklistDigestState(System.String[],System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.EndSetBlacklistDigestState(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.SetBlacklistDigestStateAsync(System.String[],System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.SetBlacklistDigestStateAsync(System.String[],System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Signature.XSigWebClient.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Signature.XSigWebClient.TestConnectionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Signature.XSigWebClient.AcquireMediaLicensesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Signature.XSigWebClient.AcknowledgeLicensesDeliveryCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Signature.XSigWebClient.CheckLicensesAvailabilityCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Signature.XSigWebClient.SetBlacklistDigestStateCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Signature.ArrayOfMediaLicense">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Signature.ArrayOfMediaLicense.MediaLicense">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Signature.ArrayOfAcknowledgement">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Signature.ArrayOfAcknowledgement.Acknowledgement">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Signature.ArrayOfAvailability">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Signature.ArrayOfAvailability.Availability">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Signature.TestConnectionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Signature.TestConnectionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Signature.TestConnectionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Signature.AcquireMediaLicensesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Signature.AcquireMediaLicensesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Signature.AcquireMediaLicensesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Signature.AcknowledgeLicensesDeliveryCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Signature.AcknowledgeLicensesDeliveryCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Signature.AcknowledgeLicensesDeliveryCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Signature.CheckLicensesAvailabilityCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Signature.CheckLicensesAvailabilityCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Signature.CheckLicensesAvailabilityCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Signature.SetBlacklistDigestStateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Signature.Availability">
            <summary>
            Defines a license availability that comes back from the service
            call to CheckLicensesAvailability
            </summary>
            <remarks>
            Oddly, this is defined directly in XSig, and not in the common protocol code
            which means that we would require a reference to XSig to allow the tests to 
            run properly.  I'd rather not do that, so I've copied the definition here.
            It can be removed if/when the definition moves to common code.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddBehavior(ServerTestFramework.Utilities.BehaviorInjection.INJECTION_TYPE,System.String,System.Boolean)">
            <summary>
            Adds a new BEHAVIOR_INJECTION header to the header collection.
            </summary>
            <param name="_type">The type of behavior to add</param>
            <param name="_params">The specific parameters for the chosen bahavior</param>
            <param name="_passThrough">Should the bahaviors pass to other servers</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddHeader(System.String)">
            <summary>
            Generic Header.add() this will allow non standard adds
            </summary>
            <param name="_header"></param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddMultiBIFs(System.String[])">
            <summary>
            BIF supports multiple BIF requests in one header
            </summary>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddAlternateBillingUrl(System.String,System.Boolean)">
            <summary>
            Adds an alternate Billing Url
            </summary>
            <param name="_url">The URL.</param>
            <param name="_passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddAlternateMusicNetUrl(System.String,System.Boolean)">
            <summary>
            Adds an alternate MusicNet Url
            </summary>
            <param name="_url">The Url.</param>
            <param name="_passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddAlternateDmpUrl(System.String,System.Boolean)">
            <summary>
            Adds an alternate DMP Url
            </summary>
            <param name="_url">The Url.</param>
            <param name="_passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddAlternateWmisUrl(System.String,System.Boolean)">
            <summary>
            Adds an alternate Wmis Url
            </summary>
            <param name="_url">The Url.</param>
            <param name="_passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddAlternatePassportUrl(System.String,System.Boolean)">
            <summary>
            Adds an alternate Passport Url
            </summary>
            <param name="_url">The Url.</param>
            <param name="_passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddAlternatePassportCredentialServiceUrl(System.String,System.Boolean)">
            <summary>
            Adds an alternate Passport CredentialServiceApi Url
            </summary>
            <param name="_url">The Url.</param>
            <param name="_passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddAlternatePassportProfileServiceUrl(System.String,System.Boolean)">
            <summary>
            Adds an alternate Passport ProfileServiceApi Url
            </summary>
            <param name="_url">The Url.</param>
            <param name="_passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddAlternatePassportEncryptedProxiedAuthUrl(System.String,System.Boolean)">
            <summary>
            Adds an alternate Passport EncryptedProxiedAuth Url
            </summary>
            <param name="_url">The Url.</param>
            <param name="_passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddAlternateUpsUrl(System.String,System.Boolean)">
            <summary>
            Adds an alternate UPS Url
            </summary>
            <param name="_url">The Url.</param>
            <param name="_passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddAlternateFinBusUrl(System.String,System.Boolean)">
            <summary>
            Adds an alternate FinBus Url
            </summary>
            <param name="_url">The Url.</param>
            <param name="_passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddAlternateABCHUrl(System.String,System.Boolean)">
            <summary>
            Adds an alternate ABCH Url
            </summary>
            <param name="_url">The Url.</param>
            <param name="_passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddAlternateCTPUrl(System.String,System.Boolean)">
            <summary>
            Adds an alternate CTPTransactionService Url
            </summary>
            <param name="_url">The Url.</param>
            <param name="_passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddSprocFailure(System.String,System.String,System.String,System.UInt32,System.Boolean)">
            <summary>
            Adds a specific sproc failure
            </summary>
            <param name="_sprocName">Name of the sproc to fail</param>
            <param name="_dbName">Name of the database on which to fail all sprocs</param>
            <param name="_exceptionToThrow">OPTIONAL: Exception to throw on failure</param>
            <param name="_timeoutMS">OPTIONAL: Delay in MS</param>
            <param name="_passThrough">Pass through behavior to other servers.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if both sproc name AND db name are provided, or when neither are.</exception>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddXbancMiss(System.Boolean)">
            <summary>
            Adds an xbanc Mmiss
            </summary>
            <param name="_passThrough"></param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddDmpFailure(System.String,System.String,System.Boolean)">
            <summary>
            Adds a specific DMP API failure
            </summary>
            <param name="_dmpApi">Name of the DMP API to fail</param>
            <param name="_dmpError">DMP error to raise</param>
            <param name="_passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddDmpTimeout(System.String,System.Boolean)">
            <summary>
            Adds a specific DMP API timeout
            </summary>
            <param name="_dmpApi">Name of the DMP API to fail</param>
            <param name="_passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddDmpBehaviorXml(System.String,System.Boolean)">
            <summary>
            Adds an XML fragment specifying one or more DMP API failures or timeouts
            </summary>
            <param name="dmpXmlText">XML fragment containing DMP API and/or timeout specifications</param>
            <param name="_passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddPassportLoginError(System.String,System.String,System.Boolean)">
            <summary>
            Adds a Passport Login failure
            </summary>
            <param name="faultcode">Passport faultcode</param>
            <param name="faultstring">Passport faultstring</param>
            <param name="_passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddPassportLoginTimeout(System.Boolean)">
            <summary>
            Adds a Passport Login timeout
            </summary>
            <param name="_passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddMusicnetFailure(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Adds a specific DMP API failure
            </summary>
            <param name="error">Musicnet error code</param>
            <param name="message">Musicnet error message (optional)</param>
            <param name="_passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddMusicnetTimeout(System.String,System.Boolean)">
            <summary>
            Adds a specific Musicnet API timeout
            </summary>
            <param name="_dmpApi">Name of the DMP API to fail</param>
            <param name="_passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddScsFailure(System.String,System.String,System.Boolean)">
            <summary>
            Adds a specific SCS API failure
            </summary>
            <param name="api">Name of the SCS API to fail</param>
            <param name="error">SCS error to raise.  This can be either a name such as BDK_E_AUTHORIZATION_FAILED or a hex value such as 0x80047611.</param>
            <param name="passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddScsTimeout(System.String,System.Boolean)">
            <summary>
            Adds a specific SCS API timeout
            </summary>
            <param name="api">Name of the SCS API to timeout</param>
            <param name="passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddUpsTimeout(System.String,System.Boolean)">
            <summary>
            Adds a specific UPS API timeout
            </summary>
            <param name="api">Name of the UPS API to timeout</param>
            <param name="passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddABCHFailure(System.Boolean)">
            <summary>
            Adds a specific ABCH API timeout
            </summary>
            <param name="api">Name of the ABCH API to timeout</param>
            <param name="passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddFinBusFailure(System.String,System.Int32,System.Boolean)">
            <summary>
            Adds a specific FinBus API failure
            </summary>
            <param name="api">Name of the FinBus API to fail</param>
            <param name="errorCode">FinBus error code to include in FaultDetails</param>
            <param name="passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddFinBusFailure(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Adds a specific FinBus API failure
            </summary>
            <param name="api">Name of the FinBus API to fail</param>
            <param name="errorCode">FinBus error code to include in FaultDetails</param>
            <param name="passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddFinBusTimeout(System.String,System.Boolean)">
            <summary>
            Adds a specific FinBus API timeout
            </summary>
            <param name="api">Name of the FinBus API to fail</param>
            <param name="passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddCTPFailure(System.String,System.String,System.Boolean)">
            <summary>
            Adds a specific CTPTransactionService API failure
            </summary>
            <param name="api">Name of the FinBus API to fail</param>
            <param name="error">CTP error to raise</param>
            <param name="passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddCTPTimeout(System.String,System.Int32,System.Boolean)">
            <summary>
            Adds a specific CTPTransactionService API timeout
            </summary>
            <param name="api">Name of the CTP API to fail</param>
            <param name="passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddCTPTimeout(System.String,System.Boolean)">
            <summary>
            Adds a specific CTPTransactionService API timeout
            </summary>
            <param name="api">Name of the CTP API to fail</param>
            <param name="passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddCTPPurchaseFailure(System.String,System.Boolean)">
            <summary>
            Adds a specific failure for the CTPTransactionService Purchase API
            </summary>
            <param name="error">CTP error to raise</param>
            <param name="passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.BehaviorInjection.AddCTPPurchaseTimeout(System.Boolean)">
            <summary>
            Adds a timeout for the CTPTransactionService Purchase API
            </summary>
            <param name="passThrough">Pass through behavior to other servers.</param>
        </member>
        <member name="T:ServerTestFramework.Utilities.BehaviorInjection.INJECTION_TYPE">
            <summary>
            Different types of behavior injection.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.Certificates.OpenPKCS7(System.Byte[])">
            <summary>
            Creates a certificate collection from the certificates stored in a PKCS7 (P7B) blob.
            </summary>
            <param name="pkcs7">The bytes of a PKCS7 package.</param>
            <returns>An X509CertificateCollection containing the certificates from the PKCS7 blob.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.CertificateGenerator.SetKeyUsage">
            <summary>
            Sets the key usage to a default set:
                Digital Signature, Non Repudiation, Key Encipherment, Data Encipherment
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.CertificateGenerator.SetExtendedKeyUsage">
            <summary>
            Set the default extened key usage flags: 
                Server Auth, Client Auth
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.CertificateGenerator.SetExtendedKeyUsage(Org.BouncyCastle.Asn1.X509.KeyPurposeID[])">
            <summary>
            Set the extended key usage to a specific set of key purposes
            </summary>
            <param name="keyPurposeIds">A list of key purpose ids for the key usage</param>
            <remarks>
            This method is not exposed, because if you try to call one of the other signatures
            even though you're not using the KeyPurposeID it still requires you to have a ref
            to the BouncyCastle assembly at compile time (maybe to resolve the correct method
            to call or something).  I might add this in later.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.Utilities.CertificateGenerator.SetExtendedKeyUsage(System.String[])">
            <summary>
            Sets the Extended Key Usage to a set of custom purposes
            </summary>
            <param name="keyUsages"></param>
        </member>
        <member name="T:ServerTestFramework.Utilities.CreditCardRandomizer">
            <summary>
            This class provides properties to generate random credit card numbers
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.CreditCardRandomizer.#cctor">
            <summary>
            Static constructor - empty
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.CreditCardRandomizer.GetRandomAccountNumber(System.String)">
            <summary>
            Returns a random credit card number for the type of card provided
            </summary>
            <param name="creditCardType">The credit card type. Can be American Express, Discover, JCB, Mastercard, or Visa. Tries to handle abbreviations and name variations (eg: AMEX). Defaults to Visa.</param>
            <returns>A random credit card number in string format</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.CreditCardRandomizer.getRandomCC(System.Int32,System.Int32)">
            <summary>
            Constructs the actual random credit card number. All credit cards follow the same checksum, the only difference being the prefix and length of the number
            </summary>
            <param name="prefix">The prefix of the credit card type. For example, Visa cards start with a 4</param>
            <param name="length">The length of the credit card type. For example, Visa cards are all 16 digits in length</param>
            <returns>A random credit card number in string format</returns>
        </member>
        <member name="T:ServerTestFramework.Utilities.DirectDebitRandomizer">
            <summary>
            This class provides properties to generate random debit card numbers
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.DirectDebitRandomizer.#ctor">
            <summary>
            Default constructor - assumes Germany for the direct debit country
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.DirectDebitRandomizer.#ctor(System.String)">
            <summary>
            Uses the country provided to randomize on
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.DirectDebitRandomizer.#ctor(System.String,System.String)">
            <summary>
            Uses the country provided to randomize on
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.DirectDebitRandomizer.Randomize">
            <summary>
            Generates a random direct debit account number, bank code, branch code, etc.
            These values are in the various properties of this class and are synched with each other to provide a valid direct debit account.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.DirectDebitRandomizer.RandomizeDirectDebitValues">
            <summary>
            Generates a random direct debit account number, bank code, branch code, etc.
            These values are in the various properties of this class and are synched with each other to provide a valid direct debit account.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.DirectDebitRandomizer.GetCheckDigitsForFranceAccount">
            <summary>
            Returns the Check Digits value based on the algorithm for a French direct debit account.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServerTestFramework.Utilities.DirectDebitRandomizer.AccountNumber">
            <summary>
            The account number of the direct debit account
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.DirectDebitRandomizer.AccountNumberLastFour">
            <summary>
            The last four digits of the account number
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.DirectDebitRandomizer.BankCode">
            <summary>
            The bank code of the direct debit account
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.DirectDebitRandomizer.BranchCode">
            <summary>
            The branch code of the direct debit account
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.DirectDebitRandomizer.CheckDigits">
            <summary>
            The checksum of the direct debit account
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.DirectDebitRandomizer.Country">
            <summary>
            The country of the direct debit account
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.DirectDebitRandomizer.Algorithm">
            <summary>
            Alogrithm used to generate acct number
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.CryptoProvider">
            <summary>
            Provides an easy way to reference the various available cryptographic service providers
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.ProviderType">
            <summary>
            Defines the various available typs of CSP
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.ManagedSigUtil">
            <summary>
            Provides an easy way to verify signatures against a variety of public keys that a used by 
            various live components.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.ManagedSigUtil.InstallTestDrmKeyPubSig">
            <summary>
            The Test key for both Drm and Asset
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.ManagedSigUtil.InstallAssetNCipherKeyPubSig">
            <summary>
            The Public Key for Assets container in nCipher
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.ManagedSigUtil.InstallDrmNCipherKeyPubSig">
            <summary>
            The Public Key for Drm container in nCipher
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.ManagedCryptoKey">
            <summary>
            A wrapper around the .NET RSACryptoServiceProvider class which handles creating/opening the container
            and maintains the key state and handles interop between the CAPI and the managed crypto classes
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.ManagedCryptoKey.InstallKeys(System.String,System.Byte[][])">
            <summary>
            Install a set of keys into the named container with a deault CSP name and type
            </summary>
            <param name="container">The container to install the csp blobs into</param>
            <param name="cspImportBlobs">The csp blobs to install</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.ManagedCryptoKey.InstallKeys(ServerTestFramework.Utilities.ProviderType,System.String,System.String,System.Byte[][])">
            <summary>
            Install a set of keys into the named container with a given CSP name and type
            </summary>
            <param name="providerType">The type of CSP container to create</param>
            <param name="providerName">The name of the CSP to use</param>
            <param name="container">The container to install the csp blobs into</param>
            <param name="cspImportBlobs">The csp blobs to install</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.ManagedCryptoKey.OpenContainer(System.String)">
            <summary>
            Create or Open a named crypto container with the default container type and provider
            </summary>
            <param name="container">The name of the container to open</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.ManagedCryptoKey.OpenContainer(System.String,System.Boolean)">
            <summary>
            Create or Open a named crypto container with the default container type and provider
            </summary>
            <param name="container">The name of the container to open</param>
            <param name="forSigning">Indicates whether the Signature of Exchange key should be used</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.ManagedCryptoKey.OpenContainer(ServerTestFramework.Utilities.ProviderType,System.String,System.String)">
            <summary>
            Create or Open a named crypto container of the given type
            </summary>
            <param name="providerType">The type of CSP container to use</param>
            <param name="providerName">The name of the CSP to use</param>
            <param name="container">The name of the container to open</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.ManagedCryptoKey.OpenContainer(ServerTestFramework.Utilities.ProviderType,System.String,System.String,System.Boolean)">
            <summary>
            Create or Open a named crypto container of the given type
            </summary>
            <param name="providerType">The type of crypto provider to create the container with</param>
            <param name="providerName">The name of the provider to use</param>
            <param name="container">The name of the container to open</param>
            <param name="forSigning">Indicates whether the Signature of Exchange key should be used</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.ManagedCryptoKey.Sign(System.Byte[])">
            <summary>
            The private key is not imported for this method so it is currently not supported.
            </summary>
            <param name="sha1hash"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.ManagedCryptoKey.VerifyData(System.Byte[],System.Byte[])">
            <summary>
            Verifies the signature of a given blob of data
            </summary>
            <param name="data">The data the verify against</param>
            <param name="sig">The signature to verify</param>
            <returns>True if the signature is valid, false otherwise</returns>
            <remarks>The signature is checked against the SHA1 hash of the data</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the CSP is not yet properly initialized</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if hash or sig is null</exception>
        </member>
        <member name="M:ServerTestFramework.Utilities.ManagedCryptoKey.VerifyHash(System.Byte[],System.Byte[])">
            <summary>
            Verifies the signature of the SHA1 hash of some data
            </summary>
            <param name="hash">The SHA1 hash of the data who's signature you want to verify</param>
            <param name="sig">The signature of the hash of the data</param>
            <returns>True if the signature is valid, false otherwise</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the CSP is not yet properly initialized</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if hash or sig is null</exception>
        </member>
        <member name="M:ServerTestFramework.Utilities.ManagedCryptoKey.VerifyHash(System.Byte[],System.String,System.Byte[])">
            <summary>
            Verifies the signature of the given hash
            </summary>
            <param name="hash">The hashed data</param>
            <param name="hashAlg">The OID of the hash algorithm used to generate the hash</param>
            <param name="sig">The signature to verify against</param>
            <returns>True if the hash is valid, false otherwise</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the CSP is not yet properly initialized</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if hash or sig is null</exception>
        </member>
        <member name="M:ServerTestFramework.Utilities.ManagedCryptoKey.Dispose">
            <summary>
            We want to delete the keyset and remove it all from memory, so we do that here.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.PassportFuzzer">
            <summary>
            Summary description for PassportFuzzer.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.PassportUtilities">
            <summary>
            This class provides properties to generate random credit card numbers
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.RandomEx">
            <summary>
            Summary description for Random.  --(who the heck writes a comment like this?)
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.UserPlayedGame(System.UInt64,System.UInt32,System.UInt32)">
            <summary>
            Makes call to the service to add a title to the list of played games for the given user.  Ignores
            titles that have already been played.
            </summary>
            <param name="puid">puid of the user</param>
            <param name="titleId">title played</param>
            <param name="localeID"></param>
            <returns>true if request to the service succeeds or if title already in list of played games</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.UserEarnedAchievement(System.UInt64,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Makes call to the service to add an achievement to list of earned achievements for the given user.  Ignores
            achievements that have already been earned.
            </summary>
            <param name="puid">puid of the user</param>
            <param name="titleID">title played</param>
            <param name="achievementId">id of the achievement earned</param>
            <param name="localeID"></param>
            <returns>true if request to the service succeeds or if achievement already earned</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.GetPlayedTitles(System.UInt64)">
            <summary>
            Returns details about titles played by the given user.
            </summary>
            <param name="puid">puid of user</param>
            <returns>array containing details of titles played by given user</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.AddPlayedTitles(System.UInt64,System.UInt32[])">
            <summary>
            Adds the specified titles to the user's list of played titles.
            </summary>
            <param name="user">existing user</param>
            <param name="titleIds">array of title Ids</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.GetAchievementDetails(System.UInt64,System.UInt32)">
            <summary>
            Use this method to retrieve information about achievements for the given title.  Note that this
            is user-specific, but can be used to get the list of all achievement Ids (non-user specific) for
            the title by setting puid to any valid user.
            </summary>
            <param name="puid">puid of user</param>
            <param name="titleID">titleId</param>
            <returns>array containing the achievement details for a given titleId and user</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.AddEarnedAchievements(System.UInt64,System.UInt32,System.UInt32[])">
            <summary>
            Updates the given user with earned achievements for the given title.  Use GetAchievementDetails() to
            obtain a list of achievementIds available for a title.
            </summary>
            <param name="puid">puid of user</param>
            <param name="titleId">titleId</param>
            <param name="achievementIds">array of achievement Ids</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.ExecutePrivilegeUpdate(System.UInt64,System.UInt64,System.UInt64,System.Byte[],ServerTestFramework.LiveService.UserAccount.UserPrivileges,ServerTestFramework.LiveService.UserAccount.UserPrivileges)">
            <summary>
            Send a request to the service to update a user's privileges
            </summary>
            <param name="userPuid">puid of the user</param>
            <param name="privs">privileges to set</param>
            <param name="restrictPrivs">privileges to restrict</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.UpdateWithWebActivity(ServerTestFramework.LiveService.UserAccount.XeUser)">
            <summary>
            Update the user with web activity to avoid redirection to account creation when signing in to xbox.com site
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.GrantPermissionsForChildAcct(ServerTestFramework.LiveService.UserAccount.XeUser)">
            <summary>
            Update a child account with least restrictive permissions.
            </summary>
            <param name="user">child account</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.UpdatePrivileges(ServerTestFramework.LiveService.UserAccount.XeUser,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Updates a user's privacy settings only with the specified allow/restrict lists - all other privileges will remain at the current setting
            </summary>
            <param name="user">an existing account</param>
            <param name="privsToSet">list of privileges to set to true/allow (privileges are defined as: XONLINE_XPRIVILEGE_...)</param>
            <param name="privsToRestrict">list of privileges to set to false/restrict (privileges are defined as: XONLINE_XPRIVILEGE_...)</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.UpdatePrivileges(ServerTestFramework.LiveService.UserAccount.Owner,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Updates a user's privacy settings only with the specified allow/restrict lists - all other privileges will remain at the current setting
            </summary>
            <param name="user">an existing account</param>
            <param name="privsToSet">list of privileges to set to true/allow (privileges are defined as: XONLINE_XPRIVILEGE_...)</param>
            <param name="privsToRestrict">list of privileges to set to false/restrict (privileges are defined as: XONLINE_XPRIVILEGE_...)</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.Create(ServerTestFramework.LiveService.UserAccount.XeUser,System.String,System.String)">
            <summary>
            Create the user based on XeUser information
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.CreateXbox360Account(System.String,System.String,System.String,System.UInt64,System.String,System.String,System.UInt64,System.Boolean,System.Boolean,System.DateTime)">
            <summary>
            Set up XeUser object and make call to create the user based on params submitted from the public methods
            </summary>
            <param name="Gamertag">the desired gamertag for this user</param>
            <param name="PassportMemberName">username of this user's passport account</param>
            <param name="PassportPassword">password of this user's passport account</param>
            <param name="PassportPuid">puid of this user's passport account</param>
            <param name="PassportMemberNameOfParent">username of parent's passport account</param>
            <param name="PassportPasswordOfParent">password of parent's passport account</param>
            <param name="PassportPuidOfParent">if this is NOT a child account this should be equal to PassportPuid, otherwise this is the puid of the parent's passport account</param>
            <param name="MarkWithWebActivity">true if you want this user marked as having visited the site to avoid account creation</param>
            <param name="Gold">true if you want to upgrade this user to a gold account</param>
            <returns>null if failure, or XeUser with info filled out if success</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.CreateXbox360ChildAccount(System.String,System.String,System.String,System.UInt64,System.String,System.String,System.UInt64,System.Boolean,System.Boolean,System.DateTime)">
            <summary>
            Set up XeUser object and make call to create the user based on params submitted from the public methods
            </summary>
            <param name="Gamertag">the desired gamertag for this user</param>
            <param name="PassportMemberName">username of this user's passport account</param>
            <param name="PassportPassword">password of this user's passport account</param>
            <param name="PassportPuid">puid of this user's passport account</param>
            <param name="PassportMemberNameOfParent">username of parent's passport account</param>
            <param name="PassportPasswordOfParent">password of parent's passport account</param>
            <param name="PassportPuidOfParent">puid of the parent's passport account</param>
            <param name="MarkWithWebActivity">true if you want this user marked as having visited the site to avoid account creation</param>
            <param name="Gold">true if you want to upgrade this user to a gold account</param>
            <returns>null if failure, or XeUser with info filled out if success</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.CreateXbox360User">
            <summary>
            Create a brand new SILVER account marked with web activity
            </summary>
            <returns>null if failure, or XeUser with info filled out if success</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.CreateXbox360User(System.Boolean)">
            <summary>
            Create a brand new SILVER account with specified web activity
            </summary>
            <param name="MarkWithWebActivity">true if you want this user marked as having visited the site to avoid account creation</param>
            <returns>null if failure, or XeUser with info filled out if success</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.CreateXbox360User(System.Boolean,System.Boolean)">
            <summary>
            Create a brand new account with specified web activity and gold/silver status
            </summary>
            <param name="MarkWithWebActivity">true if you want this user marked as having visited the site to avoid account creation</param>
            <param name="Gold">true if you want to upgrade this user to a gold account</param>
            <returns>null if failure, or XeUser with info filled out if success</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.CreateXbox360User(System.String)">
            <summary>
            Create a brand new SILVER account with specified gamertag marked with web activity
            </summary>
            <param name="Gamertag">the desired gamertag for this user</param>
            <returns>null if failure, or XeUser with info filled out if success</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.CreateXbox360User(System.String,System.Boolean)">
            <summary>
            Create a brand new SILVER account with specified gamertag and web activity
            </summary>
            <param name="Gamertag">the desired gamertag for this user</param>
            <param name="MarkWithWebActivity">true if you want this user marked as having visited the site to avoid account creation</param>
            <returns>null if failure, or XeUser with info filled out if success</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.CreateXbox360User(System.String,System.Boolean,System.Boolean)">
            <summary>
            Create a brand new account with specified gamertag, web activity, and gold/silver status
            </summary>
            <param name="Gamertag">the desired gamertag for this user</param>
            <param name="MarkWithWebActivity">true if you want this user marked as having visited the site to avoid account creation</param>
            <param name="Gold">true if you want to upgrade this user to a gold account</param>
            <returns>null if failure, or XeUser with info filled out if success</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.CreateXbox360User(System.String,System.String,System.String,System.UInt64,System.Boolean,System.Boolean)">
            <summary>
            Creates an account with specified gamertag, passport, web activity, and gold/silver status
            </summary>
            <param name="Gamertag">the desired gamertag for this user</param>
            <param name="PassportMemberName">username of this user's passport account</param>
            <param name="PassportPassword">password of this user's passport account</param>
            <param name="PassportPuid">puid of this user's passport account</param>
            <param name="MarkWithWebActivity">true if you want this user marked as having visited the site to avoid account creation</param>
            <param name="Gold">true if you want to upgrade this user to a gold account</param>
            <returns>null if failure, or XeUser with info filled out if success</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.CreateXbox360Child">
            <summary>
            Creates a brand new SILVER child account (age 15) marked with web activity
            </summary>
            <returns>null if failure, or XeUser with info filled out if success</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.CreateXbox360Child(System.Int32)">
            <summary>
            Creates a brand new SILVER child account marked with web activity and with the specified age
            </summary>
            <param name="Age">child's age</param>
            <returns>null if failure, or XeUser with info filled out if success</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.CreateXbox360Child(System.Boolean,System.Boolean)">
            <summary>
            Creates a brand new child account (age 15) with specified web activity and gold/silver status
            </summary>
            <param name="MarkWithWebActivity">true if you want this user marked as having visited the site to avoid account creation</param>
            <param name="Gold">true if you want to upgrade this user to a gold account</param>
            <returns>null if failure, or XeUser with info filled out if success</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.CreateXbox360Child(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Creates a brand new child account with specified web activity, gold/silver status, and age
            </summary>
            <param name="MarkWithWebActivity">true if you want this user marked as having visited the site to avoid account creation</param>
            <param name="Gold">true if you want to upgrade this user to a gold account</param>
            <param name="Age">child's age</param>
            <returns>null if failure, or XeUser with info filled out if success</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.CreateXbox360Child(System.String,System.String,System.String,System.UInt64,System.Boolean,System.Boolean)">
            <summary>
            Creates a child account (age 15) with specified gamertag, passport, web activity, and gold/silver status
            </summary>
            <param name="Gamertag">the desired gamertag for this user</param>
            <param name="PassportMemberName">username of this user's passport account</param>
            <param name="PassportPassword">password of this user's passport account</param>
            <param name="PassportPuid">puid of this user's passport account</param>
            <param name="MarkWithWebActivity">true if you want this user marked as having visited the site to avoid account creation</param>
            <param name="Gold">true if you want to upgrade this user to a gold account</param>
            <returns>null if failure, or XeUser with info filled out if success</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.CreateXbox360Child(System.String,System.String,System.String,System.UInt64,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Creates a child account with specified gamertag, passport, web activity, gold/silver status, and age
            </summary>
            <param name="Gamertag">the desired gamertag for this user</param>
            <param name="PassportMemberName">username of this user's passport account</param>
            <param name="PassportPassword">password of this user's passport account</param>
            <param name="PassportPuid">puid of this user's passport account</param>
            <param name="MarkWithWebActivity">true if you want this user marked as having visited the site to avoid account creation</param>
            <param name="Age">child's age</param>
            <param name="Gold">true if you want to upgrade this user to a gold account</param>
            <returns>null if failure, or XeUser with info filled out if success</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.CreateXbox360Child(System.String,System.String,System.String,System.UInt64,System.String,System.String,System.UInt64,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Creates a child account with specified gamertag, passport, parent's passport, web activity, gold/silver status, and age
            </summary>
            <param name="Gamertag">the desired gamertag for this user</param>
            <param name="PassportMemberName">username of this user's passport account</param>
            <param name="PassportPassword">password of this user's passport account</param>
            <param name="PassportPuid">puid of this user's passport account</param>
            <param name="PassportMemberNameOfParent">username of the parent's passport account</param>
            <param name="PassportPasswordOfParent">password of the parent's passport account</param>
            <param name="PassportPuidOfParent">puid of the parent's passport account</param>
            <param name="MarkWithWebActivity">true if you want this user marked as having visited the site to avoid account creation</param>
            <param name="Gold">true if you want to upgrade this user to a gold account</param>
            <param name="Age">child's age</param>
            <returns>null if failure, or XeUser with info filled out if success</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.MakeFriend(ServerTestFramework.LiveService.UserAccount.XeUser,ServerTestFramework.LiveService.UserAccount.XeUser)">
            <summary>
            Makes friends of two users
            </summary>
            <param name="requestor">The user sending the friend request</param>
            <param name="friend">The user accepting the friend request</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserSetup.MakeFriend(ServerTestFramework.LiveService.UserAccount.XeUser,ServerTestFramework.LiveService.UserAccount.Owner)">
            <summary>
            Makes friends of two users
            </summary>
            <param name="requestor">The user sending the friend request</param>
            <param name="friend">The user accepting the friend request</param>
        </member>
        <member name="T:ServerTestFramework.Utilities.FuzzDataAttributeException">
            <summary>
            An exception in the FuzzDataAttribute space.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzDataAttributeException.#ctor(System.String)">
            <summary>
            Creates a new exception with the given message.
            </summary>
            <param name="message">A message which describes the error.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzDataAttributeException.#ctor(System.String,System.Type)">
            <summary>
            Creates a new exception with the given message and type.
            </summary>
            <param name="message">A message which describes the error.</param>
            <param name="t">The type that caused the error.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzDataAttributeException.#ctor(System.String,System.Type,System.Exception)">
            <summary>
            Creates a new exception with the given message and type.
            </summary>
            <param name="message">A message which describes the error.</param>
            <param name="t">The type that caused the error.</param>
            <param name="e">The inner exception.</param>
        </member>
        <member name="T:ServerTestFramework.Utilities.FuzzDataAttribute">
            <summary>
            Attribute for marking fields and classes for fuzzing.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.FuzzDataAttribute.Fuzz">
            <summary>Used to turn fuzzing on and off.</summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.FuzzDataAttribute.Probability">
            <summary>The chance that a given field will be fuzzed.</summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.FuzzDataAttribute.Deterministic">
            <summary>
            If true, this field will be fuzzed using a recorded or given seed value, and the iterations tracked.
            Useful for recreating past events.  See RandomSeed.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.FuzzDataAttribute.RandomSeed">
            <summary>
            If Deterministic is true and RandomSeed is non-negative, this value will be used as the seed for the 
            random number generator.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.FuzzDataAttribute.RandomBytes">
            <summary>
            If true, the field will simply be filled with random bytes.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzDataAttribute.SetDeterminism(System.Boolean,System.Int32)">
            <summary>
            Sets up the deterministic random as requested.
            </summary>
            <param name="isDeterministic">The value to change Deterministic to.</param>
            <param name="seed">The value to change RandomSeed to.</param>
            <remarks>
            Would have done it in a property, but Attributes need fields.
            </remarks>
        </member>
        <member name="F:ServerTestFramework.Utilities.FuzzDataAttribute._Properties">
            <summary>
            Contains the name/value pairs passed in to the attribute.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.FuzzDataAttribute.DetRandom">
            <summary>
            The deterministic random number generator, if one is requested.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.FuzzDataAttribute.StandardSerializer">
            <summary>
            Serialization function used to write objects in the standard method.
            Change it if custom serialization is needed, otherwise the default is WireData.BinaryWriteValue.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.FuzzDataAttribute.RandomByteSerializer">
            <summary>
            Serialization function used to write random bytes.
            The default is InefficientRandomBytesWriter;
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.FuzzDataAttribute._actual">
            <summary>
            If not null, contains the fully typed attribute.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.FuzzDataAttribute.FuzzFieldCache">
            <summary>
            Cache for holding the list of fields for each type derived from FuzzFieldAttribute.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzDataAttribute.#cctor">
            <summary>
            Static constructor loads type associations.  Still safe to call SearchAllAssemblies again.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzDataAttribute.#ctor">
            <summary>
            Creates a new instance of the class using the defaults.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzDataAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the class using the given value for Fuzz.
            </summary>
            <param name="fuzz">The value to set Fuzz to initially.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzDataAttribute.#ctor(System.Object[])">
            <summary>
            Creates a new instance, using the list of name/value pairs.
            </summary>
            <param name="objs">A list of name/value pairs that will be propagated to the appropriate class.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzDataAttribute.ConstructorCommon">
            <summary>
            All constructors should call this.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.FuzzDataAttribute._factory_map">
            <summary>
            The mapping from field types to FuzzDataAttribute derived classes.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzDataAttribute.MapFieldType(System.Type)">
            <summary>
            Maps a field type to a FuzzDataAttribute type.
            </summary>
            <param name="t">The field type to map.</param>
            <returns>The FuzzDataAttribute type</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzDataAttribute.SpecializeGenericType(System.Type,System.Type)">
            <summary>
            Specializes a generic type with the param type.
            </summary>
            <param name="generic">The generic type to specialize.</param>
            <param name="param">The type to specialize by.</param>
            <returns>The type specialized with the param.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzDataAttribute.InvokeDefaultConstructor(System.Type)">
            <summary>
            Invokes the default constructor on the given type.
            </summary>
            <param name="t">The type to construct.</param>
            <returns>An object of the given type.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzDataAttribute.AssociateTypesToAttribute(System.Type[],System.Type)">
            <summary>
            Associates an array of types with an attribute type.
            </summary>
            <param name="associates">The types that can be fuzzed by the attribute.</param>
            <param name="t">The attribute type to associate.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzDataAttribute.SearchAllAssemblies">
            <summary>
            Searches all loaded assemblies for classes derived from <c>FuzzDataAttribute</c>.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzDataAttribute.SearchAssembly(System.Reflection.Assembly)">
            <summary>
            Searches a specific assembly for classes derived from <c>FuzzDataAttribute</c>.
            </summary>
            <param name="asm">The assembly to search.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzDataAttribute.BindType(System.Type)">
            <summary>
            Attempts to create an attribute that is specialized for the given type.
            </summary>
            <param name="t">The type to specialize for.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzDataAttribute.GetFuzzTypes">
            <summary>
            Gets an array of types that this attribute can fuzz.
            </summary>
            <returns>An array of types that this attribute can fuzz.</returns>
            <remarks>
            This function should be static for the type, but C# does not support static functions in an interface.
            
            For a generic type, this function will be called by specializing the generic using object and 
            calling through that type. Thus, GetFuzzTypes should be invariant by specialization.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzDataAttribute.InheritProperties(ServerTestFramework.Utilities.FuzzDataAttribute)">
            <summary>
            Called when creating a more specific instance of a <c>FuzzDataAttribute</c>.
            </summary>
            <param name="fuzzAttr">The attribute to inherit properties from.</param>
            <example>
            Below is an example of how to implement the function properly:
            <code>
            class FooFuzzAttribute : FuzzDataAttribute
            {
            ...
            public override void InheritProperties (FuzzDataAttribute fuzzAttr)
            {
                base.InheritProperties(fuzzAttr);
            
                FooFuzzAttribute fooFuzzAttr = fuzzAttr as FooFuzzAttribute;
                if (fooFuzzAttr != null)
                {
                    this.FooProperty = fooFuzzAttr.FooProperty;
                    ...
                }
            
                if (fuzzAttr.Properties != null)
                {
                    if (fuzzAttr.Properties.ContainsKey("FooProperty"))
                    {
                        this.FooProperty = (FooType) fuzzAttr.Properties["FooProperty"];
                    }
                    ...
                }
            }
            ...
            }
            </code>
            </example>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzDataAttribute.FuzzWrite(System.IO.BinaryWriter,System.Object)">
            <summary>
            Writes the object to the writer, possibly fuzzes the written value, but does not change it.
            </summary>
            <param name="bw">The destination to write to.</param>
            <param name="obj">The object to fuzz.</param>
            <returns>
            True if the object was fuzzed when writing; false if not.
            </returns>
            <remarks>
            This is the public face of fuzzing, it guarantees that the base class is respected and takes the
            burden of always checking it off of derived classes.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzDataAttribute.FuzzWriteInternal(System.IO.BinaryWriter,System.Object)">
            <summary>
            Writes the object to the writer, possibly fuzzes the written value, but does not change it.
            The default implementation simply writes with no fuzzing.
            </summary>
            <param name="bw">The destination to write to.</param>
            <param name="obj">The object to fuzz.</param>
        </member>
        <member name="F:ServerTestFramework.Utilities.FuzzDataAttribute._staRandom">
            <summary>
            A thread static random number generator, we will assume that it is thread safe due to this.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzDataAttribute.NextDouble">
            <summary>
            Gets a random double from the correct source.
            </summary>
            <returns>A random double.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzDataAttribute.NextBytes(System.Byte[])">
            <summary>
            Fills the given array with random bytes.
            </summary>
            <param name="bytes">The array to fill with random bytes.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzDataAttribute.NextBool(System.Double)">
            <summary>
            Uses NextDouble to get a boolean value based on the probability given.
            </summary>
            <param name="prob">The probability that a value of true will be returned.</param>
            <returns>
            True if the value of NextDouble is less than the value given; false if not.
            Thus a given probability of 1 will always generate true, and 0 will always generate false.
            </returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzDataAttribute.FuzzCheck">
            <summary>
            Gets a value indicating whether fuzzing should be performed.
            </summary>
            <returns>True if fuzzing should occur; false if not.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzDataAttribute.InefficientSizeOf(System.Object)">
            <summary>
            Determines the size of the object by serializing it.
            </summary>
            <param name="obj">The object to size.</param>
            <returns>The length of the byte stream after serializing.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzDataAttribute.InefficientRandomBytesWriter(System.IO.BinaryWriter,System.Object)">
            <summary>
            Writes random bytes to the given writer based on the size of the given object.
            The size is determined by serializing the object, so if you determine it faster, use that size.
            </summary>
            <param name="bw">The writer to write with.</param>
            <param name="obj">The object to write.</param>
        </member>
        <member name="P:ServerTestFramework.Utilities.FuzzDataAttribute.Properties">
            <summary>
            Gets the name/value pairs passed in to the attribute.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.FuzzDataAttribute.Actual">
            <summary>
            The fully typed <c>FuzzDataAttribute</c>.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.FuzzDataAttribute.Fields">
            <summary>
            Returns the FieldInfo from the fuzzFieldCache. If
            it doesn't exist, it will add it and then return it.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.FuzzDataAttribute.StaRandom">
            <summary>
            Gets the thread static random number generator.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.FuzzDataAttribute.CustomSerializer">
            <summary>
            A custom serializer writes an object to a stream using the provided writer.
            </summary>
            <param name="writer">The writer to write with.</param>
            <param name="obj">The object to write.</param>
        </member>
        <member name="T:ServerTestFramework.Utilities.FuzzArrayAttribute">
            <summary>
            Extends the <c>FuzzDataAttribute</c> class to give more specific options for arrays and strings.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.FuzzArrayAttribute.NullTermProbability">
            <summary>
            The chance that the null terminator status will be changed.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.FuzzArrayAttribute.LengthProbability">
            <summary>
            The chance that the number of elements written will be changed.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.FuzzArrayAttribute.ElementProbability">
            <summary>
            The probability that an individual element will be fuzzed when written.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.FuzzArrayAttribute.ElementFuzz">
            <summary>
            The fuzzer for individual elements of the array.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzArrayAttribute.FuzzWriteArray(System.IO.BinaryWriter,System.Object,System.Reflection.FieldInfo,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Writes an array or string to the given destination.
            </summary>
            <param name="bw">The destination to write to.</param>
            <param name="obj">The object to write.</param>
            <param name="fi">The FieldInfo for the field that the object came from.</param>
            <param name="encoding">The encoding for string-like objects.</param>
            <param name="isNullTerm">If true and this is a string-like object, it will be null-terminated.</param>
            <param name="totalSize">If positive, the minimum number of elements to write.</param>
            <returns>
            True if the object was fuzzed when writing; false if not.
            </returns>
            <remarks>
            The base of this class is used to determine whether the entire array is fuzzed.  For individual element
            fuzzing probability, see ElementProbability.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzArrayAttribute.SetElementFuzz(ServerTestFramework.Utilities.FuzzDataAttribute)">
            <summary>
            Sets the element fuzzer to a given value.
            </summary>
            <param name="elem_attr">The element fuzzer to use.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzArrayAttribute.InheritProperties(ServerTestFramework.Utilities.FuzzDataAttribute)">
            <summary>
            Inherits properties from its parent.
            </summary>
            <param name="fuzzAttr">The attribute to inherit from.</param>
        </member>
        <member name="T:ServerTestFramework.Utilities.FuzzCharAttribute">
            <summary>
            Extends the <c>FuzzDataAttribute</c> class to give more specific options for chars.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.FuzzCharAttribute.CharacterEncoding">
            <summary>
            The name of the character encoding to use.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzCharAttribute.SetEncodingByName(System.String)">
            <summary>
            Sets the character encoding to the specified type.
            </summary>
            <param name="encoding">The name of the encoding to use.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzCharAttribute.SetEncodingByObject(System.Text.Encoding)">
            <summary>
            Sets the character encoding to the specified type.
            </summary>
            <param name="encoding">The encoding to use.</param>
        </member>
        <member name="F:ServerTestFramework.Utilities.FuzzCharAttribute.CharEnc">
            <summary>
            The character encoding to use.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzCharAttribute.#ctor">
            <summary>
            Creates a default char fuzzer.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzCharAttribute.#ctor(System.String)">
            <summary>
            Creates a char fuzzer using the specified encoding.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzCharAttribute.#ctor(System.Text.Encoding)">
            <summary>
            Creates a char fuzzer using the specified encoding.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzCharAttribute.ConstructorCommon">
            <summary>
            Every constructor should call this.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzCharAttribute.StandardWrite(System.IO.BinaryWriter,System.Object)">
            <summary>
            Intercepts byte arrays and writes them, as the WireData writer does not handle them.
            Also properly encodes the char for writing.
            </summary>
            <param name="bw">The writer to write to.</param>
            <param name="obj">The object to write.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzCharAttribute.RandomByteWrite(System.IO.BinaryWriter,System.Object)">
            <summary>
            Intercepts byte arrays and writes them, as the WireData writer does not handle them.
            </summary>
            <param name="bw">The writer to write to.</param>
            <param name="obj">The object to write.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.FuzzCharAttribute.GetFuzzTypes">
            <summary>
            Returns an array containing the char type.
            </summary>
            <returns>An array containing the char type.</returns>
        </member>
        <member name="T:ServerTestFramework.Utilities.WireDataFuzzHelper">
            <summary>
            Utility class to allow WireData classes that override WriteStream to fuzz more easily.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.WireDataFuzzHelper._fc">
            <summary>
            The FieldCache of the given type.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.WireDataFuzzHelper.#ctor(System.Type)">
            <summary>
            Creates a WireDataFuzzHelper with the given type.
            </summary>
            <param name="type">The type to help with.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.WireDataFuzzHelper.Write(System.String,System.IO.BinaryWriter,System.Object)">
            <summary>
            Writes the object using the FuzzDataAttribute associated with the field.
            This function assumes that [fieldName] returns true.
            </summary>
            <param name="fieldName">The field to write.</param>
            <param name="bw">The writer to write to.</param>
            <param name="obj">The object to write.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.WireDataFuzzHelper.CheckWrite(System.String,System.IO.BinaryWriter,System.Object)">
            <summary>
            Writes the object using the FuzzDataAttribute associated with the field.
            This function first checks that [fieldName] returns true.
            </summary>
            <param name="fieldName">The field to write.</param>
            <param name="bw">The writer to write to.</param>
            <param name="obj">The object to write.</param>
            <returns>True if [fieldName] is true, which also means that the field was written; false otherwise.</returns>
        </member>
        <member name="P:ServerTestFramework.Utilities.WireDataFuzzHelper.Fuzz">
            <summary>
            Checks whether the given type has fuzzing turned on.
            If not you can follow the normal code path.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.WireDataFuzzHelper.Item(System.String)">
            <summary>
            Checks whether the field of the type has fuzzing turned on.
            This function assumes that Fuzz returns true, otherwise there would be no reason
            to have gotten this far.
            </summary>
            <param name="fieldName">The name of the field to check for fuzzing.</param>
            <returns>True if the field has fuzzing turned on; false if it does not.</returns>
        </member>
        <member name="T:ServerTestFramework.Utilities.XHttpListener">
            <summary>
            Summary description for XHttpListener.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.XHttpListener.Continue">
            <summary>
            String constants
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.XHttpListener.randGen">
            <summary>
            random number generator.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.XHttpListener.PercentError">
            <summary>
            PercentError is the percentage time 500 bad request is returned with the proper xErrror 
            you can call SetXerror to change the default xerror returned.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.XHttpListener.delay">
            <summary>
            delay is the minumun time the request will take before it returns 200 ok
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.XHttpListener.maxCon">
            <summary>
            MAxcimun connection the listner can open. by default its infinity.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.XHttpListener.IsRunning">
            <summary>
            Flag that indicates in which state is the listner 
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.XHttpListener.port">
            <summary>
            Port that listener accepts on
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.XHttpListener.sock">
            <summary>
            Listener socket
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.XHttpListener.Handlers">
            <summary>
            Number of handlers
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.XHttpListener.MaintainConnection">
            <summary>
            Keep TCP connection open (thread will never return)?
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XHttpListener.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="listenPort"></param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XHttpListener.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="listenPort"></param>
            <param name="delay"></param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XHttpListener.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="listenPort"></param>
            <param name="delay"></param>
            <param name="maxConn"></param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XHttpListener.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="listenPort"></param>
            <param name="delay"></param>
            <param name="maxConn"></param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XHttpListener.ParseHeaders(System.Byte[],System.Int32@,System.Int32@,System.String@)">
            <summary>
            Helper function to get ContentLength and other headers
            </summary>
            <param name="bytes"></param>
            <param name="endofheader"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.XHttpListener.IncomingReqHandler(System.Object)">
            <summary>
            Call back method that parses http request and passes it to ProcessData
            </summary>
            <param name="stateInfo"></param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XHttpListener.ProcessData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Virtual function for processing content data
            </summary>
            <param name="ReqData"></param>
            <param name="ConIndex"></param>
            <param name="conLen"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.XHttpListener.ProcessData(System.Byte[],System.Int32,System.Int32,System.Byte[]@)">
            <summary>
            This is for processing requests whose reponse contains both header and body.
            </summary>
            <param name="ReqData"></param>
            <param name="ConIndex">the index in the buffere where the content starts</param>
            <param name="conLen">the lendth of the data</param>
            <param name="respBuff"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.XHttpListener.ThreadBody">
            <summary>
            The main listner threasd
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.DBPoster.DBTable">
            <summary>
            Summary description for DBTable.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.FclFuzzer.Analyzer.EmailAnalyzer">
            <summary>
            This is only an example analyzer.
            You can add your own analyzer if needed
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.FclFuzzer.FclFuzzer">
            <summary>
            Helper class that providing fuzz methods with FCL
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.FclFuzzer.FclFuzzer._lock">
            <summary>
            Common lock object
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.FclFuzzer.FclFuzzer.fclServer">
            <summary>
            LocalServer object
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.FclFuzzer.FclFuzzer.sessionId">
            <summary>
            FCL Session ID
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.FclFuzzer.FclFuzzer.#ctor">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.FclFuzzer.FclFuzzer.Fuzz(System.String,System.String@)">
            <summary>
            Fuzz a string
            </summary>
            <param name="identifier">The symbolic identifier for the string</param>
            <param name="data">The string to be fuzzed</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.FclFuzzer.FclFuzzer.Fuzz(System.String,System.Byte[]@)">
            <summary>
            Fuzz a raw byte array
            </summary>
            <param name="identifier">The symbolic identifier for the byte array</param>
            <param name="data">The byte array to be fuzzed</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.FclFuzzer.FclFuzzer.Fuzz(System.String,System.Byte@)">
            <summary>
            Fuzz a raw byte
            </summary>
            <param name="identifier">The symbolic identifier for the byte</param>
            <param name="data">The byte to be fuzzed</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.FclFuzzer.FclFuzzer.Fuzz(System.String,System.String,System.Byte@)">
             <summary>
             Fuzz an char using the FCL
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.FclFuzzer.FclFuzzer.Fuzz(System.String,System.String,System.Int16@)">
             <summary>
             Fuzz an short using the FCL
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.FclFuzzer.FclFuzzer.Fuzz(System.String,System.String,System.UInt16@)">
             <summary>
             Fuzz an unsigned short using the FCL
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.FclFuzzer.FclFuzzer.Fuzz(System.String,System.String,System.UInt64@)">
             <summary>
             Fuzz an unsigned long using the FCL
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.FclFuzzer.FclFuzzer.Fuzz(System.String,System.String,System.Int64@)">
             <summary>
             Fuzz an  long using the FCL
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.FclFuzzer.FclFuzzer.FuzzArray(System.String,System.String,System.UInt64[]@)">
            <summary>
            Fuzz an array of unsigned Long integer
            </summary>
            <param name="restrictions">The restrictions string for the integer (see the Context Strings documentation for details)</param>
            <param name="identifier">The symbolic identifier for the integer array</param>
            <param name="data">The integer array to be fuzzed</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.FclFuzzer.FclFuzzer.Fuzz(System.String,System.String,System.Int32@)">
            <summary>
            Fuzz a signed integer using the FCL
            </summary>
            <param name="restrictions">The restrictions string for the integer (see the Context Strings documentation for details)</param>
            <param name="identifier">The symbolic identifier for the integer</param>
            <param name="data">The integer to be fuzzed</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.FclFuzzer.FclFuzzer.Fuzz(System.String,System.String,System.UInt32@)">
            <summary>
            Fuzz an unsigned integer using the FCL
            </summary>
            <param name="restrictions">The restrictions string for the integer (see the Context Strings documentation for details)</param>
            <param name="identifier">The symbolic identifier for the integer</param>
            <param name="data">The integer to be fuzzed</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.FclFuzzer.FclFuzzer.Fuzz(System.String,System.String,System.Double@)">
            <summary>
            Fuzz an unsigned double using the FCL
            </summary>
            <param name="restrictions">The restrictions string for the integer (see the Context Strings documentation for details)</param>
            <param name="identifier">The symbolic identifier for the integer</param>
            <param name="data">The integer to be fuzzed</param>
        </member>
        <member name="T:ServerTestFramework.Utilities.FclFuzzer.Manipulations.EmailManipulation">
            <summary>
            This is only an example.
            You can add your own manipulation class if needed
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.BulkUserSet">
            
             Class to represent a set of bulk users. These users a represented as a base
            	ID and are gauranteed to have a few useful properties:
             
             1: PUIDs in the range Base + [0,n) offset where Base is the base offset of the set
            		and n is the count of users in the set.
             2: Web Puids in the range 0x0001ffffffffffff + BaseLow + [0,n] where BaseLow is the lo 32 bit
             	value of the PUID. This is done to gaurantee unique web IDs that are distiguishable from
            		normal user PUIDs.
             3: Gamertags where the first 2 bytes are the passed in prefix, and the last 13 bytes are a base
            		32 encoding of the PUID. This is done to allow username/puid calculation from the PUID/gamertag 
            		without database reads. Use the built-in methods this class for help in doing this.
            	
        </member>
        <member name="M:ServerTestFramework.Database.CatalogDb.#ctor">
            <summary>
            Connect to the default CatalogDB, the Xbox Catalog
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.CatalogDb.#ctor(System.String)">
            <summary>
            Connect to the specified CatalogDB.  This should be either 
            FECatalogDBXbox or FECatalogDBZune
            </summary>
            <param name="connectionString">
            The connection string for the database.  Should refer to 
            ConfigUtil.FECatalogDBXboxConnectionString or 
            ConfigUtil.FECatalogDBZuneConnectionString
            </param>
        </member>
        <member name="M:ServerTestFramework.Database.CatalogDb.Insert``1(``0)">
            <summary>
            Insert an arbitrary object into the catalog database.
            This is used with the various CatalogDB structures such
            as MediaInstance or Offer which represent a single 
            row in the database.
            </summary>
            <remarks>
            When performing an insert, a SQL statement is generated 
            that inserts a row into the database table with the same
            name as the type of the provided object and includes each 
            value in the structure.  The default value is used for 
            any fields that don't have an explicitly defined value.  
            This default to null for value types.
            </remarks>
            <typeparam name="TObjectType">The type of object to insert</typeparam>
            <param name="catalogObject">The object to insert</param>
            <returns>The number of rows added</returns>
        </member>
        <member name="M:ServerTestFramework.Database.CatalogDb.TryInsert``1(``0,System.Int32@)">
            <summary>
            Attempts to insert an arbitrary object into the catalog 
            database. This is used with the various CatalogDB structures 
            such as MediaInstance or Offer which represent a single 
            row in the database.  This just does an insert and swallows
            any exceptions to allow test to easily add testdata without
            having to check for existance each time
            </summary>
            <remarks>
            When performing an insert, a SQL statement is generated 
            that inserts a row into the database table with the same
            name as the type of the provided object and includes each 
            value in the structure.  The default value is used for 
            any fields that don't have an explicitly defined value.  
            This default to null for value types.
            </remarks>
            <typeparam name="TObjectType">The type of object to insert</typeparam>
            <param name="catalogObject">The object to insert</param>
            <param name="result">The result of the insert </param>
            <returns>The number of rows added</returns>
        </member>
        <member name="M:ServerTestFramework.Database.CatalogDb.Remove``1(``0)">
            <summary>
            Remove arbitrary row(s) from the CatalogDB based on the 
            values in the provided object. 
            </summary>
            <remarks>
            When performing a delete, a SQL statement is generated
            that deletes all rows in the database table with the same
            name as the type of the object provided where the rows
            match the non default values provided in the object.
            </remarks>
            <typeparam name="TObjectType">The type of object to remove</typeparam>
            <param name="catalogObject">The defines what fields to remove</param>
            <returns>The number of rows removed</returns>
        </member>
        <member name="M:ServerTestFramework.Database.CatalogDb.TryRemove``1(``0,System.Int32@)">
            <summary>
            Attempts to remove an arbitrary object from the catalog 
            database. This is used with the various CatalogDB structures 
            such as MediaInstance or Offer which represent a single 
            row in the database.  This just does an remove and swallows
            any exceptions to allow test to easily remove testdata without
            having to check for existance each time
            </summary>
            <typeparam name="TObjectType">The type of object to insert</typeparam>
            <param name="catalogObject">The object to insert</param>
            <param name="result">The result of the insert </param>
            <returns>The number of rows removed</returns>
        </member>
        <member name="M:ServerTestFramework.Database.CatalogDb.GetValueString(System.Object)">
            <summary>
            Helper function to get the value of an object as a 
            string for use in a SQL function.  This started out
            really basic and has expanded a bit.  Might be better
            to find a SQL class that handles marshaling the types
            but I couldn't find one.
            </summary>
            <param name="fieldValue">The object to get a string for</param>
            <returns>The SQL friendly string value</returns>
        </member>
        <member name="F:ServerTestFramework.Database.CatalogDb.Media.providerId">
            <summary>
            This is the same column as metadataProviderId but is named
            differently in the FECatalogDBZune schema
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.Events">
            <summary>
            This is a wrapper class for talking to the events database.
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingDatabase">
            <summary>
            A class defining database servers iwthin reporting
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.IReportingComponent">
            <summary>
            Interface for all servers or machines interacting with Reporting
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.IReportingComponent.InjectEvent(ServerTestFramework.STFLive.Reporting.ReportingEventType,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            API to inject an event
            </summary>
            <param name="type"></param>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.IReportingComponent.InjectNextEvent(ServerTestFramework.STFLive.Reporting.ReportingEventType,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            API that injects the next event in a series of events
            </summary>
            <param name="type"></param>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.IReportingComponent.GetIntPerformanceCounter(System.String)">
            <summary>
            Gets a performance counter that is an integer
            </summary>
            <param name="Counter"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.IReportingComponent.GetFloatPerformanceCounter(System.String)">
            <summary>
            Gets a performance counter that is a floating point number
            </summary>
            <param name="Counter"></param>
            <returns></returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.IReportingComponent.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.IReportingComponent.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingDatabase.JobQueue">
            <summary>
            List of jobs to execute
            </summary>        
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingDatabase.JobThreads">
            <summary>
            Hashtable to store Reporting Job threads
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDatabase.CloseJobQueueThreads">
            <summary>
            Close any internal items. This must be called somewhere inside the destructor of derived classes.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDatabase.RunDebugQuery">
            <summary>
            Runs a query against the database (all tables).  Returns data for small tables (less than 20 rows), returns counts for all other tables
            </summary>
            <returns>Query Results</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDatabase.RunDebugQuery(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Runs a query against the tables for this database using the data available in the reference objects
            </summary>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDatabase.QueueJob(ServerTestFramework.STFLive.Reporting.ReportingJobType)">
            <summary>
            Queues a job to be run using the default parameters for that job (specific to that job)
            Validates that this job can be run on this server
            </summary>
            <param name="jobType">Type of job to be run</param>
            <returns>Could job be queued</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDatabase.QueueJob(ServerTestFramework.STFLive.Reporting.ReportingJobType,ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Queues a job to be run using the specified parameters for that job (specific to that job)
            Validates that this job can be run on this server
            </summary>
            <param name="jobType">Type of job to be run</param>
            <returns>Could job be queued</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDatabase.RunJobs">
            <summary>
            Runs the queued jobs
            </summary>
            <returns>An array list with the return values with the associated ReportingJob Objects which contain the results of each job</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDatabase.RunJob(System.Object)">
            <summary>
            Sub-function to run each job in a separate Thread.
            </summary>
            <param name="JobIndex">Reporting Job to be run</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDatabase.GetCurrentJobStatus">
            <summary>
            Updates the status of the queued jobs. *Note that only jobs that have already been started will be updated*
            </summary>
            <returns>An array list of the currently queued jobs with their updated status</returns>>        
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDatabase.StopJobs">
            <summary>
            Stops all jobs currently executing
            </summary>
            <returns>The database job queue</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDatabase.InjectSingleData(ServerTestFramework.STFLive.Reporting.ReportingDataLoader,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            Inserts a certain data set and returns a reference object to that data set
            </summary>
            <param name="row"></param>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDatabase.InjectData(ServerTestFramework.STFLive.Reporting.ReportingDataLoader,ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer@)">
            <summary>
            Inserts a certain data set and returns a reference object to that data set
            </summary>
            <param name="table"></param>
            <param name="reportingRefObjectContainer"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDatabase.InjectSingleRandomData(ServerTestFramework.STFLive.Reporting.ReportingDataType,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            Inserts a randomly generated reporting data type into that particular database, returns a reference object to that item.
            </summary>
            <param name="dataType"></param>
            <param name="refObjectContainer"></param>
            <returns>SQL results of inserting the data</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDatabase.InjectRandomData(ServerTestFramework.STFLive.Reporting.ReportingDataType,System.Int64,ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer@)">
            <summary>
            Insters a set of randomly generated data into the database
            </summary>
            <param name="dataType">Type of data to insert</param>
            <param name="count">How many objects to insert</param>
            <param name="container">A reference object to this data</param>
            <returns>SQL results of inserting that data</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDatabase.ListReplicationStreamsAndStatus">
            <summary>
            Collects information about the current replication status
            </summary>
            <returns>A string describing any streams present as well as their status</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDatabase.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this database
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDatabase.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this database
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDatabase.InjectEvent(ServerTestFramework.STFLive.Reporting.ReportingEventType,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            API to inject an event
            </summary>
            <param name="type"></param>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDatabase.InjectNextEvent(ServerTestFramework.STFLive.Reporting.ReportingEventType,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            API that injects the next event in a series of events
            </summary>
            <param name="type"></param>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDatabase.GetIntPerformanceCounter(System.String)">
            <summary>
            Gets a performance counter that is an integer
            </summary>
            <param name="Counter"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDatabase.GetFloatPerformanceCounter(System.String)">
            <summary>
            Gets a performance counter that is a floating point number
            </summary>
            <param name="Counter"></param>
            <returns></returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingDatabase.DatabaseName">
            <summary>
            The SQL name of the database (note: NOT THE MACHINE NAME)
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingDatabase.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingDatabase.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Database.FilterDB.m_ServerName">
            <summary>
            Summary description for FilterDBTables.
            TODO: Add in attributes to specify whether or not fields are strict/loose
            TODO: Add all tables into STFLive.Reporting.Tables
            TODO: Add comments
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.FilterDB.InjectEvent(ServerTestFramework.STFLive.Reporting.ReportingEventType,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            API to inject an event
            </summary>
            <param name="type"></param>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.FilterDB.InjectNextEvent(ServerTestFramework.STFLive.Reporting.ReportingEventType,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            API that injects the next event in a series of events
            </summary>
            <param name="type"></param>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.FilterDB.GetIntPerformanceCounter(System.String)">
            <summary>
            Gets a performance counter that is an integer
            </summary>
            <param name="Counter"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.FilterDB.GetFloatPerformanceCounter(System.String)">
            <summary>
            Gets a performance counter that is a floating point number
            </summary>
            <param name="Counter"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.FilterDB.RunDebugQuery">
            <summary>
            Runs a query against the database (all tables).  Returns data for small tables (less than 20 rows), returns counts for all other tables
            </summary>
            <returns>Query Results</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.FilterDB.QueueJob(ServerTestFramework.STFLive.Reporting.ReportingJobType)">
            <summary>
            Queues a job to be run using the default parameters for that job (specific to that job)
            Validates that this job can be run on this server
            </summary>
            <param name="jobType">Type of job to be run</param>
            <returns>Could job be queued</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.FilterDB.QueueJob(ServerTestFramework.STFLive.Reporting.ReportingJobType,ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Queues a job to be run using the specified parameters for that job (specific to that job)
            Validates that this job can be run on this server
            </summary>
            <param name="jobType">Type of job to be run</param>
            <returns>Could job be queued</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.FilterDB.InjectSingleData(ServerTestFramework.STFLive.Reporting.ReportingDataLoader,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            Inserts a certain data set and returns a reference object to that data set
            </summary>
            <param name="row"></param>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.FilterDB.InjectData(ServerTestFramework.STFLive.Reporting.ReportingDataLoader,ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer@)">
            <summary>
            Inserts a certain data set and returns a reference object to that data set
            </summary>
            <param name="table"></param>
            <param name="reportingRefObjectContainer"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.FilterDB.InjectSingleRandomData(ServerTestFramework.STFLive.Reporting.ReportingDataType,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            Inserts a randomly generated reporting data type into that particular database, returns a reference object to that item.
            </summary>
            <param name="dataType"></param>
            <param name="refObjectContainer"></param>
            <returns>SQL results of inserting the data</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.FilterDB.InjectRandomData(ServerTestFramework.STFLive.Reporting.ReportingDataType,System.Int64,ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer@)">
            <summary>
            Insters a set of randomly generated data into the database
            </summary>
            <param name="dataType">Type of data to insert</param>
            <param name="count">How many objects to insert</param>
            <param name="container">A reference object to this data</param>
            <returns>SQL results of inserting that data</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.FilterDB.ListReplicationStreamsAndStatus">
            <summary>
            Collects information about the current replication status
            </summary>
            <returns>A string describing any streams present as well as their status</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.FilterDB.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this database
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.FilterDB.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this database
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Database.FilterDB.ComponentType">
            <summary>
            What type server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Database.FilterDB.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Database.FilterDB.DatabaseName">
            <summary>
            The SQL name of the database (note: NOT THE MACHINE NAME)
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.Hasher.Hash(System.Object)">
            <summary>
            Attempt to determine the SQL data type based on the .Net data type. I think 
            the only things we partition on are BIGINT and VARCHAR, so this should catch 
            all of those. It may not work quite right in cases beyond that, so use it at 
            your own risk.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.LiveRegistry">
            <summary> Utilities for manipulating livehive. </summary>
        </member>
        <member name="T:ServerTestFramework.Database.NameList">
            <summary>
            Maintains a cache of valid names
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.GameConfigRow">
            <summary>
            Data structure returned from GetGameConfig()
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.LiveTitleConfigRow">
            <summary>
            Data structure returned from GetLiveTitleConfig()
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.StringServerString">
            <summary>
            Data structure describing an entry in the t_stringsvr_strings table
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.StringServerStrings">
            <summary>
            Collection of StringServerString objects
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.Leaderboard">
            <summary>
            Class defining a leaderboard entry in the t_stats_leaderboards table
            and a competition template entry in the t_stats_competition_templates table.
            The IsCompetitionTemplate member will be set to true if the object defines an
            Xbox1 Competition Template, otherwise it will be false;
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.NpdbUtility">
            <summary> This is a wrapper class for talking to the NPDB for service-specific data. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.NpdbUtility.BlacklistMachine(System.UInt64,System.Boolean)">
            <summary>
            Xenon M1 work: t_blacklisted_machines table is moved from uodb to npdb
            </summary>
            <param name="puid"></param>
            <param name="isBlacklisted"></param>
        </member>
        <member name="M:ServerTestFramework.Database.NpdbUtility.BlacklistTitle(System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Xenon M1 work: t_blacklisted_titles table is moved from uodb to npdb
            </summary>
            <param name="puid"></param>
            <param name="isBlacklisted"></param>
        </member>
        <member name="M:ServerTestFramework.Database.NpdbUtility.BlacklistUser(System.UInt64,System.Boolean)">
            <summary>
            Xenon M1 work: t_blacklisted_users table is moved from uodb to npdb
            </summary>
            <param name="puid"></param>
            <param name="isBlacklisted"></param>
        </member>
        <member name="M:ServerTestFramework.Database.NpdbUtility.BlacklistDigest(System.Byte[],System.Boolean)">
            <summary>
            t_blacklisted_digests now contains data for both DietOrange and content
            revocation. It is partitioned based on a new row named ti_revocation_delivery_type.
            delivery_type == 1 (Revocation List Only)
            delivery_type == 2 (CheckRevocaton Only)
            </summary>
            <param name="digest"></param>
            <param name="isBlacklisted"></param>
        </member>
        <member name="M:ServerTestFramework.Database.NpdbUtility.IsBlacklistedDigest(System.Byte[],System.Boolean)">
            <summary>
            Xenon M1 work: t_blacklisted_digests table is moved from uodb to npdb
            Determines if digest is blacklisted.
            </summary>
            <param name="digest"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Database.NpdbUtility.GetLiveTitleConfig(System.UInt32)">
            <summary>
            Gets the Live Title Config (LTC) data for the specified title.
            </summary>
            <param name="titleId">Title ID</param>
            <returns>A LiveTitleConfigRow object that will contain the Live Title Config data</returns>
        </member>
        <member name="M:ServerTestFramework.Database.NpdbUtility.SetMatchTitleDeleteDelay(System.UInt32,System.Int32)">
            <summary>
            Sets the delete delay in seconds for a particular Match title ID.
            Note: this method does NOT call xmgmt cmd to reload title IDs on Match servers.
            </summary>
            <param name="titleId"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:ServerTestFramework.Database.NpdbUtility.SetMatchTitleRevokeCrossPlatform(System.UInt32,System.Nullable{System.Int32})">
            <summary>
            Sets the delete delay in seconds for a particular Match title ID.
            Note: this method does NOT call xmgmt cmd to reload title IDs on Match servers.
            </summary>
            <param name="titleId"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:ServerTestFramework.Database.NpdbUtility.GetTitleStrings(System.UInt32)">
            <summary>
            Returns all title strings from the t_stringsvr_strings table for the specified title.
            </summary>
            <param name="titleId">Title ID</param>
            <returns>
            A collection of StringServerString objects representing each title string.
            </returns>
        </member>
        <member name="M:ServerTestFramework.Database.NpdbUtility.GetStringsByID(System.UInt32)">
            <summary>
            Returns all strings in the t_stringsvr_strings table for a specified StringID
            </summary>
            <param name="stringID">ID of the strings to be returned</param>
            <returns>A collection of StringServerString objects representing each title string.</returns>
            <remarks>This method returns all strings for a specified StringID that are in t_stringsvr_strings
            without regard to the titleID assigned to the string
            </remarks>
        </member>
        <member name="M:ServerTestFramework.Database.NpdbUtility.GetLeaderboards(System.UInt32)">
            <summary>
            Retrieves the leaderboard definitions for a specified Title ID
            </summary>
            <param name="titleId">Title Id</param>
            <returns>A collection of Leaderboard objects.</returns>
        </member>
        <member name="M:ServerTestFramework.Database.NpdbUtility.GetCompetitionTemplates(System.UInt32)">
            <summary>
            Retrieves the Competition Template definitions for the specified Title Id
            </summary>
            <param name="titleId">Xbox1 Title Id</param>
            <returns>
            A collection of Leaderboard objects with the IsCompetitionTemplate member set to true.
            </returns>
        </member>
        <member name="M:ServerTestFramework.Database.NpdbUtility.GetLeaderboardsOrTemplates(System.UInt32,System.Boolean)">
            <summary>
            Retrieves either leaderboard definitions or competition template definitions for
            the given title id.
            </summary>
            <param name="titleId">Title Id</param>
            <param name="isTemplate">Flag indicating whether to retrieve leaderboards or competition templates</param>
            <returns>A collection of Leaderboard objects</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.OLAPDB.InjectEvent(ServerTestFramework.STFLive.Reporting.ReportingEventType,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            API to inject an event
            </summary>
            <param name="type"></param>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.OLAPDB.InjectNextEvent(ServerTestFramework.STFLive.Reporting.ReportingEventType,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            API that injects the next event in a series of events
            </summary>
            <param name="type"></param>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.OLAPDB.GetIntPerformanceCounter(System.String)">
            <summary>
            Gets a performance counter that is an integer
            </summary>
            <param name="Counter"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.OLAPDB.GetFloatPerformanceCounter(System.String)">
            <summary>
            Gets a performance counter that is a floating point number
            </summary>
            <param name="Counter"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.OLAPDB.RunDebugQuery">
            <summary>
            Runs a query against the database (all tables).  Returns data for small tables (less than 20 rows), returns counts for all other tables
            </summary>
            <returns>Query Results</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.OLAPDB.RunDebugQuery(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Runs a query against the database (all tables).  Returns data for small tables (less than 20 rows), returns counts for all other tables
            </summary>
            <returns>Query Results</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.OLAPDB.RunDebugQuery(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject,ServerTestFramework.STFLive.Reporting.ReportingData@)">
            <summary>
            Runs a query against the OLAP database using ADOMD and returns the query result in resultDataObject
            </summary>
            <param name="reportingRefObject">RefObject containing the OLAP query to execute</param>
            <param name="resultDataObject">Dat object with query results</param>
            <returns>Query results in a string</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.OLAPDB.RunDebugOlapQuery(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Runs an Olap query against this database using the data available in the reference objects
            </summary>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.OLAPDB.QueueJob(ServerTestFramework.STFLive.Reporting.ReportingJobType)">
            <summary>
            Queues a job to be run using the default parameters for that job (specific to that job)
            Validates that this job can be run on this server
            </summary>
            <param name="jobType">Type of job to be run</param>
            <returns>Could job be queued</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.OLAPDB.QueueJob(ServerTestFramework.STFLive.Reporting.ReportingJobType,ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Queues a job to be run using the specified parameters for that job (specific to that job)
            Validates that this job can be run on this server
            </summary>
            <param name="jobType">Type of job to be run</param>
            <returns>Could job be queued</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.OLAPDB.InjectSingleData(ServerTestFramework.STFLive.Reporting.ReportingDataLoader,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            Inserts a certain data set and returns a reference object to that data set
            </summary>
            <param name="row"></param>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.OLAPDB.InjectData(ServerTestFramework.STFLive.Reporting.ReportingDataLoader,ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer@)">
            <summary>
            Inserts a certain data set and returns a reference object to that data set
            </summary>
            <param name="table"></param>
            <param name="reportingRefObjectContainer"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.OLAPDB.InjectSingleRandomData(ServerTestFramework.STFLive.Reporting.ReportingDataType,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            Inserts a randomly generated reporting data type into that particular database, returns a reference object to that item.
            </summary>
            <param name="dataType"></param>
            <param name="refObjectContainer"></param>
            <returns>SQL results of inserting the data</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.OLAPDB.InjectRandomData(ServerTestFramework.STFLive.Reporting.ReportingDataType,System.Int64,ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer@)">
            <summary>
            Insters a set of randomly generated data into the database
            </summary>
            <param name="dataType">Type of data to insert</param>
            <param name="count">How many objects to insert</param>
            <param name="container">A reference object to this data</param>
            <returns>SQL results of inserting that data</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.OLAPDB.ListReplicationStreamsAndStatus">
            <summary>
            Collects information about the current replication status
            </summary>
            <returns>A string describing any streams present as well as their status</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.OLAPDB.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this database
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.OLAPDB.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this database
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.OLAPDB.ConstructQueries(Microsoft.AnalysisServices.MeasureGroup,System.String,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.DateRange,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
            <summary>
            This function will construct the Olap queries based on an input test date and Measure/Dimension collections.
            </summary>
            <param name="InputMeasureGroup">Measure group collection</param>
            <param name="QueryBindDate">Input Test date</param>
            <returns>A list of Olap MDX queries, one for each applicable Measure/Dimension combination.</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.OLAPDB.FormatQueryText(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@)">
            <summary>
            This function will format the SQL and Olap queries based on the individual components passed as parameters. The resulting queries will be returned as 'out'
            parameters SqlQuery and Olapquery. If there is an error while constructing the query, the return value will be 'NO_VALUE_FOUND'.
            </summary>
            <param name="OlapQ_CubeName">Target Olap Cube Name</param>
            <param name="OlapQ_Measure">Source Measure for Olap query</param>
            <param name="OlapQ_Dim">Dimension for Olap query</param>
            <param name="OlapQ_DimValue">Specific Dimension value for Olap Query</param>
            <param name="SqlQ_RetVal">SQL query return, normally it is a COUNT(x) or SUM(x)</param>
            <param name="SqlQ_Tab1">First table - usually the 'FACT' table to use in query</param>
            <param name="SqlQ_Tab2">Second table - usually the 'Dimension' table to use in query</param>
            <param name="SqlQ_Tab1Join">Fact table field to use in 'JOIN'</param>
            <param name="SqlQ_Tab2Join">Dimension table field to use in 'JOIN'</param>
            <param name="SqlQ_Tab2TestCol">Dimension field to compare against test value</param>
            <param name="SqlQ_Tab2DimValue">Test value for Dimension table</param>
            <param name="SqlQuery">OUT - Output Sql query</param>
            <param name="OlapQuery">OUT - Output Olap query</param>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.OLAPDB.ExecuteQueries(System.String,System.String,System.String@,System.String@)">
            <summary>
            Execute the input SQL and Olap queries and return the result as 'out' parameters respectively
            </summary>
            <param name="OlapQuery">Olap MDX query</param>
            <param name="SQLQuery">Related SQL query to the 'OlapQuery' parameter</param>
            <param name="OlapResult">Result of Olap query - only the first result returned, so queries are assummed to return a single value.</param>
            <param name="SQLResult">Result of SQL query - only the first result returned, so queries are assummed to return a single value.</param>
            <returns>True if successful execution, false if error, or if queries were missing parameters</returns> 
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.OLAPDB.CompareResults(System.String,System.String)">
            <summary>
            Compare the results of the SQL and Olap queries
            </summary>
            <param name="OlapResult">Olap query results</param>
            <param name="SQLResult">SQL query results</param>
            <returns>True if values are similar, false otherwise</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Database.OLAPDB.ComponentType">
            <summary>
            What type server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Database.OLAPDB.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Database.OLAPDB.DatabaseName">
            <summary>
            The SQL name of the database (note: NOT THE MACHINE NAME)
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.ProfileWS">
            <summary>
            Summary description for ProfileWS.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.ProgressWS">
            <summary>
            Summary description for ProgressWS.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.CPUIDList">
            <summary>
            Maintains a cache of valid puids
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.QueryDB">
            <summary>
            Wrapper for talking to QueryDB.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.QueryDB.ConnectToServer(System.String[])">
            <summary>
            Connects to QueryDB server taking an array
            Only connects to the first server in the array
            </summary>
            <param name="serverNames">Array of QueryDB server names</param>
        </member>
        <member name="M:ServerTestFramework.Database.QueryDB.ConnectToServer(System.String)">
            <summary>
            Connects to the QueryDB Database
            </summary>
            <param name="serverName">Name of QueryDB server</param>
        </member>
        <member name="M:ServerTestFramework.Database.QueryDB.Close">
            <summary>
            Closes the connection to QueryDB
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.QueryDB.ExecuteScalar(System.String)">
            <summary>
            Executes a SQL Query and returns the single scalar value
            </summary>
            <param name="sql">SQL Query</param>
            <returns>Value of Query</returns>
        </member>
        <member name="M:ServerTestFramework.Database.QueryDB.IssueCommand(System.String)">
            <summary>
            Allows you to run a command against QueryDB
            </summary>
            <param name="sql">SQL command to execute</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:ServerTestFramework.Database.QueryDB.ReadData(System.String,System.Data.SqlClient.SqlDataReader@)">
            <summary>
            Allows you to pass a query to QueryDB and get a data reader back.
            </summary>
            <param name="sql">SQL Query</param>
            <param name="reader">Data returned from query</param>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingDB.InjectEvent(ServerTestFramework.STFLive.Reporting.ReportingEventType,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            API to inject an event
            </summary>
            <param name="type"></param>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingDB.InjectNextEvent(ServerTestFramework.STFLive.Reporting.ReportingEventType,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            API that injects the next event in a series of events
            </summary>
            <param name="type"></param>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingDB.GetIntPerformanceCounter(System.String)">
            <summary>
            Gets a performance counter that is an integer
            </summary>
            <param name="Counter"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingDB.GetFloatPerformanceCounter(System.String)">
            <summary>
            Gets a performance counter that is a floating point number
            </summary>
            <param name="Counter"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingDB.RunDebugQuery">
            <summary>
            Runs a query against the database (all tables).  Returns data for small tables (less than 20 rows), returns counts for all other tables
            </summary>
            <returns>Query Results</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingDB.QueueJob(ServerTestFramework.STFLive.Reporting.ReportingJobType)">
            <summary>
            Queues a job to be run using the default parameters for that job (specific to that job)
            Validates that this job can be run on this server
            </summary>
            <param name="jobType">Type of job to be run</param>
            <returns>Could job be queued</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingDB.QueueJob(ServerTestFramework.STFLive.Reporting.ReportingJobType,ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Queues a job to be run using the specified parameters for that job (specific to that job)
            Validates that this job can be run on this server
            </summary>
            <param name="jobType">Type of job to be run</param>
            <returns>Could job be queued</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingDB.InjectSingleData(ServerTestFramework.STFLive.Reporting.ReportingDataLoader,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            Inserts a certain data set and returns a reference object to that data set
            </summary>
            <param name="row"></param>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingDB.InjectData(ServerTestFramework.STFLive.Reporting.ReportingDataLoader,ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer@)">
            <summary>
            Inserts a certain data set and returns a reference object to that data set
            </summary>
            <param name="table"></param>
            <param name="reportingRefObjectContainer"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingDB.InjectSingleRandomData(ServerTestFramework.STFLive.Reporting.ReportingDataType,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            Inserts a randomly generated reporting data type into that particular database, returns a reference object to that item.
            </summary>
            <param name="dataType"></param>
            <param name="refObjectContainer"></param>
            <returns>SQL results of inserting the data</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingDB.InjectRandomData(ServerTestFramework.STFLive.Reporting.ReportingDataType,System.Int64,ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer@)">
            <summary>
            Insters a set of randomly generated data into the database
            </summary>
            <param name="dataType">Type of data to insert</param>
            <param name="count">How many objects to insert</param>
            <param name="container">A reference object to this data</param>
            <returns>SQL results of inserting that data</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingDB.ListReplicationStreamsAndStatus">
            <summary>
            Collects information about the current replication status
            </summary>
            <returns>A string describing any streams present as well as their status</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingDB.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this database
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingDB.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this database
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingDB.ConfirmStagingTables(System.String)">
            <summary>
            Confirm all staging tables exist
            </summary>
            <param name="szReplicationProvider">Replication Provider Name</param>
            <returns>void</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingDB.DeleteStagingTables(System.String,System.DateTime)">
            <summary>
            Delete all staging tables if data is newer than dtWhen
            </summary>
            <param name="szReplicationProvider">Replication Provider Name</param>
            <returns>void</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingDB.DeleteFinalFactTables(System.Int32)">
            <summary>
            Delete all final fact tables if data is newer than iDate
            </summary>
            <returns>void</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Database.ReportingDB.ComponentType">
            <summary>
            What type server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Database.ReportingDB.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Database.ReportingDB.DatabaseName">
            <summary>
            The SQL name of the database (note: NOT THE MACHINE NAME)
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingArchiveDatabase.InjectEvent(ServerTestFramework.STFLive.Reporting.ReportingEventType,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            API to inject an event
            </summary>
            <param name="type"></param>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingArchiveDatabase.InjectNextEvent(ServerTestFramework.STFLive.Reporting.ReportingEventType,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            API that injects the next event in a series of events
            </summary>
            <param name="type"></param>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingArchiveDatabase.GetIntPerformanceCounter(System.String)">
            <summary>
            Gets a performance counter that is an integer
            </summary>
            <param name="Counter"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingArchiveDatabase.GetFloatPerformanceCounter(System.String)">
            <summary>
            Gets a performance counter that is a floating point number
            </summary>
            <param name="Counter"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingArchiveDatabase.RunDebugQuery">
            <summary>
            Runs a query against the database (all tables).  Returns data for small tables (less than 20 rows), returns counts for all other tables
            </summary>
            <returns>Query Results</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingArchiveDatabase.QueueJob(ServerTestFramework.STFLive.Reporting.ReportingJobType)">
            <summary>
            Queues a job to be run using the default parameters for that job (specific to that job)
            Validates that this job can be run on this server
            </summary>
            <param name="jobType">Type of job to be run</param>
            <returns>Could job be queued</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingArchiveDatabase.QueueJob(ServerTestFramework.STFLive.Reporting.ReportingJobType,ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Queues a job to be run using the specified parameters for that job (specific to that job)
            Validates that this job can be run on this server
            </summary>
            <param name="jobType">Type of job to be run</param>
            <returns>Could job be queued</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingArchiveDatabase.InjectSingleData(ServerTestFramework.STFLive.Reporting.ReportingDataLoader,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            Inserts a certain data set and returns a reference object to that data set
            </summary>
            <param name="row"></param>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingArchiveDatabase.InjectData(ServerTestFramework.STFLive.Reporting.ReportingDataLoader,ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer@)">
            <summary>
            Inserts a certain data set and returns a reference object to that data set
            </summary>
            <param name="table"></param>
            <param name="reportingRefObjectContainer"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingArchiveDatabase.InjectSingleRandomData(ServerTestFramework.STFLive.Reporting.ReportingDataType,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            Inserts a randomly generated reporting data type into that particular database, returns a reference object to that item.
            </summary>
            <param name="dataType"></param>
            <param name="refObjectContainer"></param>
            <returns>SQL results of inserting the data</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingArchiveDatabase.InjectRandomData(ServerTestFramework.STFLive.Reporting.ReportingDataType,System.Int64,ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer@)">
            <summary>
            Insters a set of randomly generated data into the database
            </summary>
            <param name="dataType">Type of data to insert</param>
            <param name="count">How many objects to insert</param>
            <param name="container">A reference object to this data</param>
            <returns>SQL results of inserting that data</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingArchiveDatabase.ListReplicationStreamsAndStatus">
            <summary>
            Collects information about the current replication status
            </summary>
            <returns>A string describing any streams present as well as their status</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingArchiveDatabase.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this database
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingArchiveDatabase.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this database
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Database.ReportingArchiveDatabase.ComponentType">
            <summary>
            What type server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Database.ReportingArchiveDatabase.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Database.ReportingArchiveDatabase.DatabaseName">
            <summary>
            The SQL name of the database (note: NOT THE MACHINE NAME)
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Database.ReportingIIS">
            <summary>
            Reporting Common Code object to extend the ReportingService Proxy class
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingIIS.GetXMLReportingServerData(System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Submit a report request to the Reporting Web Service. 
            </summary>
            <param name="ReportPath">Full path of the report in the web server. Example: XBOX Live New Portal\Title Usage Report\Title Usage Summary</param>
            <param name="SavePath">Path of report export file</param>
            <param name="FileName">Name of report export file</param>
            <param name="ReportParameters">Name/Value Collection of report input parameters to submit to the server. 
            These input parameters can be found in the report RDL</param>
            <param name="ReportFormat">Report export format. Default format is XML</param>
            <returns>True if execution was successful</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingIIS.GetReportParameters(System.String)">
            <summary>
            Get report parameters from Service.
            </summary>
            <param name="ReportPath">Path to report</param>
            <returns>String of parameter names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingIIS.RunDebugQuery">
            <summary>
            Runs a query against the database (all tables).  Returns data for small tables (less than 20 rows), returns counts for all other tables
            </summary>
            <returns>Query Results</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingIIS.RunDebugQuery(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Runs a query against the tables for this database using the data available in the reference objects
            </summary>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingIIS.QueueJob(ServerTestFramework.STFLive.Reporting.ReportingJobType)">
            <summary>
            Queues a job to be run using the default parameters for that job (specific to that job)
            Validates that this job can be run on this server
            </summary>
            <param name="jobType">Type of job to be run</param>
            <returns>Could job be queued</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingIIS.QueueJob(ServerTestFramework.STFLive.Reporting.ReportingJobType,ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Queues a job to be run using the specified parameters for that job (specific to that job)
            Validates that this job can be run on this server
            </summary>
            <param name="jobType">Type of job to be run</param>
            <returns>Could job be queued</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingIIS.RunJobs">
            <summary>
            Runs the queued jobs
            </summary>
            <returns>An array list with the return values with the associated ReportingJob Objects which contain the results of each job</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingIIS.GetCurrentJobStatus">
            <summary>
            Updates the status of the queued jobs. *Note that only jobs that have already been started will be updated*
            </summary>
            <returns>An array list of the currently queued jobs with their updated status</returns>>        
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingIIS.InjectSingleData(ServerTestFramework.STFLive.Reporting.ReportingDataLoader,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            Inserts a certain data set and returns a reference object to that data set
            </summary>
            <param name="row"></param>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingIIS.InjectData(ServerTestFramework.STFLive.Reporting.ReportingDataLoader,ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer@)">
            <summary>
            Inserts a certain data set and returns a reference object to that data set
            </summary>
            <param name="table"></param>
            <param name="reportingRefObjectContainer"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingIIS.InjectSingleRandomData(ServerTestFramework.STFLive.Reporting.ReportingDataType,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            Inserts a randomly generated reporting data type into that particular database, returns a reference object to that item.
            </summary>
            <param name="dataType"></param>
            <param name="refObjectContainer"></param>
            <returns>SQL results of inserting the data</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingIIS.InjectRandomData(ServerTestFramework.STFLive.Reporting.ReportingDataType,System.Int64,ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer@)">
            <summary>
            Insters a set of randomly generated data into the database
            </summary>
            <param name="dataType">Type of data to insert</param>
            <param name="count">How many objects to insert</param>
            <param name="container">A reference object to this data</param>
            <returns>SQL results of inserting that data</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingIIS.ListReplicationStreamsAndStatus">
            <summary>
            Collects information about the current replication status
            </summary>
            <returns>A string describing any streams present as well as their status</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingIIS.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this database
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingIIS.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this database
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Database.ReportingIIS.DatabaseName">
            <summary>
            The SQL name of the database (note: NOT THE MACHINE NAME)
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingSSIS.InjectEvent(ServerTestFramework.STFLive.Reporting.ReportingEventType,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            API to inject an event
            </summary>
            <param name="type"></param>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingSSIS.InjectNextEvent(ServerTestFramework.STFLive.Reporting.ReportingEventType,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            API that injects the next event in a series of events
            </summary>
            <param name="type"></param>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingSSIS.GetIntPerformanceCounter(System.String)">
            <summary>
            Gets a performance counter that is an integer
            </summary>
            <param name="Counter"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingSSIS.GetFloatPerformanceCounter(System.String)">
            <summary>
            Gets a performance counter that is a floating point number
            </summary>
            <param name="Counter"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingSSIS.RunDebugQuery">
            <summary>
            Runs a query against the database (all tables).  Returns data for small tables (less than 20 rows), returns counts for all other tables
            </summary>
            <returns>Query Results</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingSSIS.QueueJob(ServerTestFramework.STFLive.Reporting.ReportingJobType)">
            <summary>
            Queues a job to be run using the default parameters for that job (specific to that job)
            Validates that this job can be run on this server
            </summary>
            <param name="jobType">Type of job to be run</param>
            <returns>Could job be queued</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingSSIS.QueueJob(ServerTestFramework.STFLive.Reporting.ReportingJobType,ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Queues a job to be run using the specified parameters for that job (specific to that job)
            Validates that this job can be run on this server
            </summary>
            <param name="jobType">Type of job to be run</param>
            <returns>Could job be queued</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingSSIS.InjectSingleData(ServerTestFramework.STFLive.Reporting.ReportingDataLoader,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            Inserts a certain data set and returns a reference object to that data set
            </summary>
            <param name="row"></param>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingSSIS.InjectData(ServerTestFramework.STFLive.Reporting.ReportingDataLoader,ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer@)">
            <summary>
            Inserts a certain data set and returns a reference object to that data set
            </summary>
            <param name="table"></param>
            <param name="reportingRefObjectContainer"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingSSIS.InjectSingleRandomData(ServerTestFramework.STFLive.Reporting.ReportingDataType,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            Inserts a randomly generated reporting data type into that particular database, returns a reference object to that item.
            </summary>
            <param name="dataType"></param>
            <param name="refObjectContainer"></param>
            <returns>SQL results of inserting the data</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingSSIS.InjectRandomData(ServerTestFramework.STFLive.Reporting.ReportingDataType,System.Int64,ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer@)">
            <summary>
            Insters a set of randomly generated data into the database
            </summary>
            <param name="dataType">Type of data to insert</param>
            <param name="count">How many objects to insert</param>
            <param name="container">A reference object to this data</param>
            <returns>SQL results of inserting that data</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingSSIS.ListReplicationStreamsAndStatus">
            <summary>
            Collects information about the current replication status
            </summary>
            <returns>A string describing any streams present as well as their status</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingSSIS.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this database
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportingSSIS.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this database
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Database.ReportingSSIS.ComponentType">
            <summary>
            What type server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Database.ReportingSSIS.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Database.ReportingSSIS.DatabaseName">
            <summary>
            The SQL name of the database (note: NOT THE MACHINE NAME)
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Database.ReportRealtimeDB">
            <summary>
            Reporting Realtime Database Object
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportRealtimeDB.RunDebugQuery">
            <summary>
            Runs a query against the database (all tables).  Returns data for small tables (less than 20 rows), returns counts for all other tables
            </summary>
            <returns>Query Results</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportRealtimeDB.QueueJob(ServerTestFramework.STFLive.Reporting.ReportingJobType)">
            <summary>
            Queues a job to be run using the default parameters for that job (specific to that job)
            Validates that this job can be run on this server
            </summary>
            <param name="jobType">Type of job to be run</param>
            <returns>Could job be queued</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportRealtimeDB.QueueJob(ServerTestFramework.STFLive.Reporting.ReportingJobType,ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Queues a job to be run using the specified parameters for that job (specific to that job)
            Validates that this job can be run on this server
            </summary>
            <param name="jobType">Type of job to be run</param>
            <returns>Could job be queued</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportRealtimeDB.InjectSingleData(ServerTestFramework.STFLive.Reporting.ReportingDataLoader,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            Inserts a certain data set and returns a reference object to that data set
            </summary>
            <param name="row"></param>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportRealtimeDB.InjectData(ServerTestFramework.STFLive.Reporting.ReportingDataLoader,ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer@)">
            <summary>
            Inserts a certain data set and returns a reference object to that data set
            </summary>
            <param name="table"></param>
            <param name="reportingRefObjectContainer"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportRealtimeDB.InjectSingleRandomData(ServerTestFramework.STFLive.Reporting.ReportingDataType,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            Inserts a randomly generated reporting data type into that particular database, returns a reference object to that item.
            </summary>
            <param name="dataType"></param>
            <param name="refObjectContainer"></param>
            <returns>SQL results of inserting the data</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportRealtimeDB.InjectRandomData(ServerTestFramework.STFLive.Reporting.ReportingDataType,System.Int64,ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer@)">
            <summary>
            Insters a set of randomly generated data into the database
            </summary>
            <param name="dataType">Type of data to insert</param>
            <param name="count">How many objects to insert</param>
            <param name="container">A reference object to this data</param>
            <returns>SQL results of inserting that data</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportRealtimeDB.ListReplicationStreamsAndStatus">
            <summary>
            Collects information about the current replication status
            </summary>
            <returns>A string describing any streams present as well as their status</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportRealtimeDB.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this database
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Database.ReportRealtimeDB.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this database
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Database.ReportRealtimeDB.DatabaseName">
            <summary>
            The SQL name of the database (note: NOT THE MACHINE NAME)
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Database.ReportRealtimeDB.ComponentType">
            <summary>
            What type server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Database.ReportRealtimeDB.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.SecMachineHistoryWS">
            <summary>
            Interfaces with the SecUserHistory WebStore - taking into account partitioned tables
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.SecMachineHistoryWS.ExecuteSQLScalar(System.String,System.Object)">
            <summary>
            Execute a SQL Scalar statment that returns a single value using Webstore
            </summary>
            <param name="sql">The scalar SQL statement to execute</param>
            <param name="hash">The object to use as the Webstore hash value, or null to set AnyPartition</param>
            <returns>The result of the select statement</returns>
        </member>
        <member name="M:ServerTestFramework.Database.SecMachineHistoryWS.ExecuteSQLNonQuery(System.String,System.Object)">
            <summary>
            Execute a SQL WRITEONLY command using Webstore
            </summary>
            <param name="sql">The scalar SQL statement to execute</param>
            <param name="hash">The object to use as the Webstore hash value, or null to set AllPhysicalPartitions</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:ServerTestFramework.Database.SecMachineHistoryWS.ExecuteSQLSelectCount(System.String)">
            <summary>
            Execute a SQL select count command using Webstore.
            </summary>
            <param name="sql">The SQL count statement to execute</param>
            <returns>The number sum of the counts across each partition</returns>
        </member>
        <member name="M:ServerTestFramework.Database.SecMachineHistoryWS.WstPhysicalPartitionCount">
            <summary>
            Get the total number of physical partitions
            </summary>
            <returns>The total number of physical partitions</returns>
        </member>
        <member name="M:ServerTestFramework.Database.SecMachineHistoryWS.GetHashBucket(System.Object)">
            <summary>
            Get the logical partition from a given hash object(si_hash_bucket)
            </summary>
            <param name="hash">The object to get the Webstore Hash Bucket for.</param>
            <returns>The webstore hash bucket for the given object</returns>
        </member>
        <member name="T:ServerTestFramework.Database.SecUserHistoryWS">
            <summary>
            Interfaces with the SecUserHistory WebStore - taking into account partitioned tables
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.SecUserHistoryWS.ExecuteSQLScalar(System.String,System.Object)">
            <summary>
            Execute a SQL Scalar statment that returns a single value using Webstore
            </summary>
            <param name="sql">The scalar SQL statement to execute</param>
            <param name="hash">The object to use as the Webstore hash value, or null to set AnyPartition</param>
            <returns>The result of the select statement</returns>
        </member>
        <member name="M:ServerTestFramework.Database.SecUserHistoryWS.ExecuteSQLNonQuery(System.String,System.Object)">
            <summary>
            Execute a SQL WRITEONLY command using Webstore
            </summary>
            <param name="sql">The scalar SQL statement to execute</param>
            <param name="hash">The object to use as the Webstore hash value, or null to set AllPhysicalPartitions</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:ServerTestFramework.Database.SecUserHistoryWS.ExecuteSQLSelectCount(System.String)">
            <summary>
            Execute a SQL select count command using Webstore.
            </summary>
            <param name="sql">The SQL count statement to execute</param>
            <returns>The number sum of the counts across each partition</returns>
        </member>
        <member name="M:ServerTestFramework.Database.SecUserHistoryWS.WstPhysicalPartitionCount">
            <summary>
            Get the total number of physical partitions
            </summary>
            <returns>The total number of physical partitions</returns>
        </member>
        <member name="M:ServerTestFramework.Database.SecUserHistoryWS.GetHashBucket(System.Object)">
            <summary>
            Get the logical partition from a given hash object(si_hash_bucket)
            </summary>
            <param name="hash">The object to get the Webstore Hash Bucket for.</param>
            <returns>The webstore hash bucket for the given object</returns>
        </member>
        <member name="T:ServerTestFramework.Database.StatsWS">
            <summary>
            Summary description for StatsWS.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.TokendbWS">
            <summary>
            Interfaces with the TokenDB WebStore - taking into account partitioned tables
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TokendbWS.DoesVoucherExist(System.Byte[],System.UInt64)">
            <summary>
            Returns whether a specific voucher exists.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TokendbWS.VerifyExclusiveSequenceRange(System.String,System.UInt64,System.UInt64)">
            <summary>
            Verifies that no tokens are found on any TokenDB partition outside of the specified sequence range
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TokendbWS.VerifySequenceRange(System.String,System.UInt64,System.UInt64)">
            <summary>
            Verifies that one or more tokens are found on every TokenDB partition within the specified sequence range
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.UodbTable">
            <summary>
            Represents an easy way to retrieve values from and modify tables in the UODB. 
            Intended to represent a single row.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbTable.#ctor(System.String)">
            <summary>
            Constructor for a non-partitioned (mirrored) database table
            </summary>
            <param name="tableName">Name of the table, i.e. t_users</param>
        </member>
        <member name="M:ServerTestFramework.Database.UodbTable.#ctor(System.String,System.String)">
            <summary>
            Constructor for a partitioned database table
            </summary>
            <param name="tableName">Name of the table, i.e. t_users</param>
            <param name="partitionedColumnName">Name of the column this table is partitioned on, i.e. bi_user_puid</param>
        </member>
        <member name="M:ServerTestFramework.Database.UodbTable.SetProperty(System.String,System.Object)">
            <summary>
            Add or change a property and its value. A property is a column in the table.
            </summary>
            <param name="columnName">Name of property (column) to update</param>
            <param name="value">New value</param>
        </member>
        <member name="M:ServerTestFramework.Database.UodbTable.SetConstraint(System.String,System.Object)">
            <summary>
            Add or change a constraint and its value. A constraint is a column in the
            table and is used in the "... WHERE constraints" part of the SQL clause.
            </summary>
            <param name="columnName">Name of constraint (column) to update</param>
            <param name="value">New value</param>
        </member>
        <member name="M:ServerTestFramework.Database.UodbTable.GetProperty(System.String)">
            <summary>
            Retrieve a value for the column.
            </summary>
            <param name="columnName">Name of table's column</param>
            <returns>Data cell for row/column</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbTable.GetSqlUpdateStatement">
            <summary>
            The SQL UPDATE statement for this dbtable
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbTable.GetSqlSelectStatement">
            <summary>
            The SQL SELECT statement for this dbtable
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbTable.GetSqlDeleteStatement">
            <summary>
            The SQL DELETE statement for this dbtable
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UodbTable.TableName">
            <summary>
            The name of the table
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UodbTable.IsPartitioned">
            <summary>
            Is this a partitioned or a non-partitioned (mirrored) table?
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UodbTable.PartitioningValue">
            <summary>
            Retrieves the value for the partitioned column from the constraints
            or properties. This is the value that needs to be hashed on.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.UodbWS">
            <summary>
            Interfaces with the UODB WebStore - taking into account partitioned tables
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.ExecuteScalarExpectingResult(System.String,System.Int32)">
            <summary>
            Run the sql, expecting a certain value.  Returns true if all returned
            scalars match the expected result.  The query *must* expect an integer
            response, and is best used with a SELECT COUNT(*)... type of query.
            </summary>
            <param name="sql">The SQL query used</param>
            <param name="result">The expected value the query should return.</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.ExecuteSQLSelect(ServerTestFramework.Database.UodbTable)">
            <summary>
            Executes a SQL SELECT statement using the provided UodbTable object. Results
            are stored in the dbtable.
            </summary>
            <param name="dbtable">UodbTable object to use. Must have 1 or more constraints
            set. Expected to only return 1 row.</param>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.ExecuteSQLUpdate(ServerTestFramework.Database.UodbTable)">
            <summary>
            Executes a SQL UPDATE statement using the provided UodbTable object.
            </summary>
            <param name="dbtable">UodbTable object to use. Must have 1 or more constraints
            set and 1 or more properties to update.</param>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.ExecuteSQLDelete(ServerTestFramework.Database.UodbTable)">
            <summary>
            Executes a SQL DELETE statement using the provided UodbTable object.
            </summary>
            <param name="dbtable">UodbTable object to use. Must have 1 or more constraints
            set.</param>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.DoesUserExist(System.UInt64,System.String@)">
             <summary>
             Searches for a given user
             </summary>
             <param name="Puid">PUID of user</param>
             <returns>PUID of user</returns>
             <remarks>
             Searches for a given user
            returns the puid of the user if it finds a match, otherwise 0
            
            The reason why it returns a puid instead of a bool is to make this function return code
            compatible with DoesUserExist(string)
            </remarks>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.DoesOwnerDependentExist(System.UInt64,System.UInt64)">
            <summary>
            Searches for a given owner and dependent pair from t_family_membership
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.DoesUserCurrentOwnSubscription(System.UInt64,System.Guid,System.Guid)">
            <summary>
            Searches for a subscription for a user
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetMaxXuid">
            <summary>
            Get max user puid
            </summary>
            <returns>ulong</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetUserIDFromGamerTag(System.String)">
            <summary>
            Do a direct gamertag to puid look up.
            This method used to hit t_users on all partitions. It should be hitting
            t_user_names on the gamertag partition, since that's the point of the
            table. You must hash gamerTag in lowercase form!
            </summary>
            <param name="_gamertag">gamertag</param>
            <returns>puid of gamertag</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetGamertag(System.UInt64)">
            <summary>
            Lookup the gamertag of a user puid
            </summary>
            <param name="userPuid">user's puid</param>
            <returns>Gamertag</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetCountryName(System.Int32)">
            <summary>
            Looks up a country entry in uodb.t_countries, returns vc_name
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetCountryID(System.String)">
            <summary>
            Lookup a country ID using it's friendly name.
            </summary>
            <param name="countryName">2 letter country code</param>
            <returns>Country ID</returns>faskfj;
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetBillingNotifications(System.UInt64,System.Guid,System.Int32@,System.Byte@)">
            <summary>
            Get all of the billing notifications for a user based on their PUID
            </summary>
            <param name="userPUID">the users online PUID</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetSubscriptionNotification(System.UInt64,System.Guid,System.UInt32@,System.Guid@,System.Boolean@,System.DateTime@,System.Boolean@)">
            <summary>
            Get the transient subscription notification for the given user and tracking guid
            </summary>
            <param name="userPuid">the userPuid (aka xuid) of the user</param>
            <param name="trackingGuid">the tracking guid of the specific notification</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetEnabledValueForNotification(System.UInt64,System.String,System.Boolean@)">
            <summary>
            Fetches the Enabled value for a notification associated with given userPuid and instanceId
            </summary>
            <param name="userPuid">the userPuid (aka xuid) of the user</param>
            <param name="instanceId">subscription instance Id</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetLanguageId(System.String)">
            <summary>
            Lookup the language ID used by the given locale
            </summary>
            <param name="localeCode">Locale string. IE: "en-US"</param>
            <returns>The Language ID used by this Live locale</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetLanguageName(System.Int32)">
            <summary>
            Looks up a Language entry in uodb.t_languages, returns vc_name
            </summary>
            <param name="LanguageID">Language Id. e.g. 1</param>
            <returns>The name for this Language Id</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetOfferID(System.String)">
            <summary>
            Lookup a live billing offer ID from the SPS billing offer ID string.
            </summary>
            <param name="billingOfferID">SPS billing offer ID string</param>
            <returns>Live billing offer ID</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetOfferSupportRegions(System.UInt64)">
            <summary>
            Get the supported regions for an offer.
            </summary>
            <param name="offerId">legacy offer Id</param>
            <returns>List of countryId where  the offer is available</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetUserInfo(System.UInt64,ServerTestFramework.Database.UserInfo@)">
            <summary>
            Returns user information
            </summary>
            <param name="userPuid">user's puid</param>
            <param name="user">[out] information about the user</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetUserInfo(System.UInt64)">
            <summary>
            Returns user information. Throws an exception on error
            </summary>
            <param name="userPuid">user's puid</param>
            <returns>information about the user</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetUserWebMapping(System.UInt64)">
            <summary>
            Returns user-web linking
            </summary>
            <param name="userPuid">user's puid</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetUserLicenses(System.UInt64,System.UInt64)">
            <summary>
            Retrieves a list of licenses for a user, a machine, or both.
            </summary>
            <param name="userPuid">PUID of the user. May be 0 to get all licenses for a machine.</param>
            <param name="machinePuid">PUID of the machine. May be 0 to get all licenses for a user.</param>
            <returns>A List of UserLicense objects.</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetUserPassportUserPuid(System.UInt64)">
            <summary>
            Returns the passport puid associated with this user
            </summary>
            <param name="userPuid">user's puid</param>
            <returns>The user's passport puid</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetUserPassportOwnerPuid(System.UInt64)">
            <summary>
            Returns the passport puid associated with this user
            </summary>
            <param name="userPuid">user's puid</param>
            <returns>The user's passport puid</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetUserProperty(System.UInt64,System.String)">
            <summary>
            Get a single property as a string from the proper partition of UODB
            </summary>
            <param name="userPuid">user's puid</param>
            <param name="_property">property name</param>
            <returns>property value</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetLatestUserSubscriptionProperty(System.UInt64,System.UInt64,System.String)">
            <summary>
            Get a single property as a string from the proper partition of UODB
            </summary>
            <param name="userPuid">user's puid</param>
            <param name="_property">property name</param>
            <returns>property value</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.SetUserProperty(System.UInt64,System.String,System.String)">
            <summary>
            Set a single property on a user in the property partition of UODB
            </summary>
            <param name="userPuid">user's puid</param>
            <param name="_property">property name</param>
            <param name="_newvalue">new property value</param>
            <returns>true if set was successful</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.SetUserAccountState(System.UInt64,ServerTestFramework.Database.AccountResetState,System.UInt32)">
            <summary>
            Set account management information in the proper partition of UODB
            </summary>
            <param name="_puid">user's puid</param>
            <param name="type">account management type</param>
            <param name="nDurationInDays">how long the account is being banned</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.ExpireUserAccountState(System.UInt64,ServerTestFramework.Database.AccountResetState)">
            <summary>
            Expires account management information in the proper partition of UODB
            </summary>
            <param name="_puid">user's puid</param>
            <param name="type">account management type to expire</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetUserPrivileges(System.UInt64,ServerTestFramework.LiveService.UserAccount.UserPrivileges@)">
            <summary>
            Only get the grant privileges
            </summary>
            <param name="userPuid"></param>
            <param name="privileges"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetUserPrivileges(System.UInt64,ServerTestFramework.LiveService.UserAccount.UserPrivileges@,ServerTestFramework.LiveService.UserAccount.UserPrivileges@)">
            <summary>
            Get both grant privileges and restricted privileges
            </summary>
            <param name="userPuid"></param>
            <param name="grantPrivileges"></param>
            <param name="restrictPrivileges"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.UpdateUserBillingAccountId(System.UInt64,System.String)">
            <summary>
            Sets the billing account Id of a user 
            </summary>
            <param name="userPuid">user's puid</param>
            <param name="vc_billing_account_id">new billing account Id</param>     
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.UpdateStartDateInSubscriptionHistory(System.UInt64,System.DateTime,System.UInt64)">
            <summary>
            Update start date in t_subscription_history corresponding to input user's active subscription's offerid
            </summary>
            <param name="puid">User Puid</param>
            <param name="startDate">Start Date</param>
            <param name="offerId">Offer Id</param>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.UpdateEndDateInSubscriptionHistory(System.UInt64,System.DateTime,System.UInt64)">
            <summary>
            Update end date in t_subscription_history corresponding to input user's inactive subscription's offerid
            </summary>
            <param name="puid">User Puid</param>
            <param name="endDate">End Date</param>
            <param name="offerId">Offer Id</param>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.UpdateMessageFlagForNotification(System.UInt64,System.Guid,System.Int32)">
            <summary>
            Sets the Message flag for expiring billing notification of a user 
            </summary>
            <param name="userPuid">user's puid</param>
            <param name="uid_tracking_guid">tracking guid</param>   
            <param name="messageFlag">Message flag</param> 
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.SetUserSubscriptionStatus(System.UInt64,ServerTestFramework.Database.SubscriptionStatus)">
            <summary>
            Sets a user in the UODB as being enabled, suspended (expired), or canceled (deprovisioned) without the SPS hit.
            </summary>
            <param name="userPuid">user's puid</param>
            <param name="_newStatus">new status</param>
            <returns>true if set was successful</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.SetUserSubscriptionStatus(System.UInt64,System.UInt64,ServerTestFramework.Database.SubscriptionStatus)">
            <summary>
            Sets a user in the UODB as being enabled, suspended (expired), or canceled (deprovisioned) without the SPS hit.
            </summary>
            <param name="userPuid">user's puid</param>
            <param name="_offerId">offer Guid</param>
            <param name="_newStatus">new status</param>
            <returns>true if set was successful</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetQueuedUserInfo(System.UInt64,ServerTestFramework.Database.QueuedUserInfo@)">
            <summary>
            Returns information about a queued user
            </summary>
            <param name="_puid">User puid</param>
            <param name="user">[out] QueuedUserInfo object containing the user data</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetReservationInfo(System.String,ServerTestFramework.Database.ReservationInfo@)">
            <summary>
            Returns ReservationInfo (machine puid, expiration date) for a user
            </summary>
            <param name="gamerTag">The gamerTag that was reserved</param>
            <param name="RI">ReservationInfo object that gets filled</param>
            <returns>True if it find this user</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.SetReservationInfo(System.String,ServerTestFramework.Database.ReservationInfo)">
            <summary>
            Sets ReservationInfo (machine puid, expiration date) for a user
            </summary>
            <param name="gamerTag">The gamerTag that was reserved</param>
            <param name="RI">ReservationInfo object that gets entered into the UODB</param>
            <returns>True if it succeeds</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.PopulatePuidListFromNames(System.String,ServerTestFramework.Database.CPUIDList@)">
            <summary>
            Populates a puid cache with puids from t_user_names table.
            </summary>
            <param name="prefix"> Gamer tag prefix</param>
            <param name="pList"> Puid list</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.PopulatePuidList(System.String,ServerTestFramework.Database.CPUIDList@)">
            <summary>
            Populates a puid cache with puids from the database
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetUsersAndOffersSubscriptionInstanceId(System.UInt64,System.UInt64)">
            <summary>
            Get the active subscription service instance id, but in this case get only the
            one whose offerId matches the one given.
            Get the subscription id for the given user and the given offerid.  This particular
            call, unlike the others, does not care if the subscription is active, expired,
            cancelled, etc.
            </summary>
            <param name="userPuid">User puid</param>
            <param name="offerId">Offer Id</param>
            <returns>Subscription service instance id</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetUsersSubscriptionInstanceId(System.UInt64)">
            <summary>
            Get the active subscription service instance id.
            </summary>
            <param name="userPuid">User puid</param>
            <returns>Subscription service instance id</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetUsersSubscriptionInstanceId(System.UInt64,System.UInt64)">
            <summary>
            Get the active subscription service instance id.
            </summary>
            <param name="userPuid">User puid</param>
            <param name="offerId">Offer Id</param>
            <returns>Subscription service instance id</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetUsersSubscriptionOfferId(System.UInt64)">
            <summary>
            Get the active subscription offer id.
            </summary>
            <param name="userPuid">User puid</param>
            <returns>Subscription offer id</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GrabBOIDs(System.Int32,System.UInt32,System.Int32)">
            <summary>
            Return a list of all BOIDs that match the specified criteria
            Since BOIDs should be uniform across servers, we only verify the first server
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetTitleInformation(System.UInt32)">
            <summary>
            Retrieves title information from several tables in UODB for the specified title.
            </summary>
            <param name="titleId">Title ID</param>
            <returns>
            A TitleInformation class that contains information about the title.
            If there is no title information for this title, null is returned.
            </returns>
            <remarks>
            This method pulls data directly from the t_titles and t_title_feature_data tables.
            It then calls the following methods to finish populating the fields:
                GetAllTitleVersions
                GetTitleRatings
                GetTitleGenres
                GetTitleCultureDetails
                GetAlternateTitleIds
                GetTitleTrustConstants
            </remarks>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.DoesTitlePrivilegeExist(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Check if title/privilege/tier exists in t_title_privileges.
            </summary>
            <param name="titleId">Title ID</param>
            <param name="privilegeId">Privilege ID</param>
            <param name="tierId">Tier ID</param>
            <returns>
            True if a specific privilge exists.
            </returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetAllTitleVersions(System.UInt32)">
            <summary>
            Retrieves title version information for the specified title.
            </summary>
            <param name="titleId">Title ID</param>
            <returns>
            A collection of TitleVersion objects that represent the version chains for this title.
            </returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetTitleRatings(System.UInt32)">
            <summary>
            Retrieves title ratings for the specified title.
            </summary>
            <param name="titleId">Title ID</param>
            <returns>
            A collection of TitleRating objects that represent the ratings for this title.
            </returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetTitleGenres(System.UInt32)">
            <summary>
            Retrieves genre information for the specified title.
            </summary>
            <param name="titleId">Title ID</param>
            <returns>
            A collection of TitleGenre objects that represent the genres for this title.
            </returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetAlternateTitleIds(System.UInt32)">
            <summary>
            Retrieves the alternate title id data for the specified title.
            </summary>
            <param name="titleId">Title ID</param>
            <returns>
            An AlternateTitleId object that specified the alternate title id data for this title
            </returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.DeleteAllTitleUpdateInfo(System.UInt32,System.UInt32)">
            <summary>
            Deletes all title update information on a given titleid.
            Tables affected are t_title_versions, t_update_packages,
            and t_update_locations.
            Deletes all records of updates to a title.
            </summary>
            <param name="titleId">titleId to affect.</param>
            <param name="basever">base version to reset to.</param>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.AddTitleVersion(System.UInt32,System.UInt32,System.Boolean,xonline.common.config.ConsoleTypeEnum)">
            <summary>
            Adds a version chain for a specified title.
            </summary>
            <param name="titleId">Title ID</param>
            <param name="version">The version to add</param>
            <param name="fullUpdate">Flag indicating whether this is a full update or a beta update.</param>
            <param name="consoleType">A ConsoleType value specifying which console this version targets.</param>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetTitleCultureDetails(System.UInt32)">
            <summary>
            Retrieves the culture details for the specified title.
            </summary>
            <param name="titleId">Title ID</param>
            <returns>
            A collection of TitleCultureDetail objects that represent the culture details for this title.
            </returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetTitleTrustConstants(System.UInt32,ServerTestFramework.Database.TitleTrustConstants@)">
            <summary>
            Gets the title trust constants for a title ID
            </summary>
            <param name="titleId"></param>
            <param name="TTC"></param>
            <returns>true if the retrieval was sucessful, false if the title id does not exist in the table</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.SetTitleTrustConstants(ServerTestFramework.Database.TitleTrustConstants)">
            <summary>
            Sets the title trust constants for a title ID.
            If the title exists it updates the values, otherwise, it creates it and populatest the values.
            </summary>
            <param name="TTC"></param>
            <returns>true if the operation was successful, false if the create or update failed</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetUserTrustRatings(System.UInt64,System.UInt32,ServerTestFramework.Database.UserTrustRatings@)">
            <summary>
            Gets the user trust ratings for a title ID and Puid pair.
            </summary>
            <param name="puid"></param>
            <param name="titleId"></param>
            <param name="UTR"></param>
            <returns>true if retrieval was sucessful, false if record could not be found</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.SetUserTrustRatings(ServerTestFramework.Database.UserTrustRatings)">
            <summary>
            Sets the user trust rating for a title ID and Puid pair.
            </summary>
            <param name="puid"></param>
            <param name="titleId"></param>
            <param name="UTR"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.ClearUserTrustRatings(System.UInt32)">
            <summary>
            Removes all user trust ratings for a given title from the database
            </summary>
            <param name="titleId"></param>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetUTCDate">
            <summary>
            Get the SQL server UTC Date
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.DoesOfferExist(System.UInt64)">
            <summary>
            Returns whether a specific offer exists.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.DoesPrivilegeExist(System.Byte)">
            <summary>
            Returns whether a specific privilege exists.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.DoesPrivilegeSetExist(System.UInt16)">
            <summary>
            Returns whether a specific privilege set exists.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.DoesServicePrivilegeSetExist(System.UInt16)">
            <summary>
            Returns whether a specific service-privilege set exists.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.DoesServiceExist(System.UInt32)">
            <summary>
            Returns whether a specific service exists.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.DoesServiceSetExist(System.UInt16)">
            <summary>
            Returns whether a specific service set exists.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.DoesSiteExist(System.UInt32)">
            <summary>
            Returns whether a specific service exists.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.DoesMachineExist(System.UInt64)">
            <summary>
            Returns whether a machine exists.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.DoesMachineExist(System.String,System.Byte[])">
            <summary>
            Returns whether a machine exists, based on console id (XE.12341234etc or such).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.DoesPCMachineExist(System.Byte[],System.UInt64)">
            <summary>
            Returns whether a pc machine account exists.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.DoesCurfewExist(System.Byte)">
            <summary>
            Returns whether a specific curfew exists.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.DoesCountryExist(System.Byte)">
            <summary>
            Returns whether a specific country exists.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.DoesCountrySetExist(System.UInt16)">
            <summary>
            Returns whether a specific country set exists.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.DoesCultureExist(System.Int32)">
            <summary>
            Returns whether a specific culture exists.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.DoesBetaGroupExist(System.Guid)">
            <summary>
            Returns whether a specific beta group exists.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.DoesSubscriptionFamilyExist(System.Guid)">
            <summary>
            Returns whether a specific subscription family exists.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.DoesServiceTypeMappingExist(System.UInt16)">
            <summary>
            Returns whether a specific service type mapping exists.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetServices">
            <summary>
            Builds list of services and info about them from t_service and t_service_instances tables
            </summary>
            <returns>True if data found</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.GetUserTier(System.UInt64)">
            <summary>
            This function will return the tier to which the user currently has a subscription.
            </summary>
            <param name="userPuid">The user puid</param>
            <returns>The tier of the base subscription to which this user is subscribed</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.SetUserTier(System.UInt64,System.Byte)">
            <summary>
            This function will subscribe a user to a base subscription which matches the requested tier.
            </summary>
            <param name="userPuid">The user puid</param>
            <param name="tier">The requested tier.</param>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.UserHasLicense(System.UInt64,System.UInt64)">
            <summary>
            Checks to see if the user/offer combination has an entry in the dbo.t_user_licenses table
            </summary>
            <param name="userPuid"></param>
            <param name="offerId"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.LoadFriends(System.UInt64)">
            <summary>
             Load all of the friend records for a given user. This is used to
             bulk load friend by private\server\presence\test\setupstress. And
             anyone else who might need to manually validate friend data in the
             database
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.IsOfferVisible(System.UInt64,System.UInt32,System.UInt32)">
            <summary>
            Returns true if Xbox1 offer is visible on the console
            </summary>
            <param name="expectedOfferId">OfferID we are looking for</param>
            <param name="countryId">Country ID of offer</param>
            <param name="titleId">TitleId for Offer</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.UpdateSwtichUserCountryQueueBIF(System.UInt64,System.String)">
            <summary>
            Update new BIF field for switch user country queue
            </summary>
            <param name="userPuid"></param>
            <param name="newUrl">new alternate url</param>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.UpdateSwtichUserCountryInitiatedTime(System.UInt64,System.DateTime)">
            <summary>
            Update the initiated time, to work around a block in p_xuacs_switch_user_country_record_intent
            </summary>
            <param name="userPuid"></param>
            <param name="newInitiated">new initiated time</param>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.WaitForQueueRemoval(System.UInt64,System.Boolean)">
            <summary>
            Wait 10 sec for billing queue removal and optionally wait 60 sec for callback.  NOTE:This expects
            only one subscription row, and will be unable to reliably wait if there are more than one.
            </summary>
            <param name="userPuid">the user puid</param>
            <param name="waitForCallbackCompletion">if wait callback</param>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.DequeueBillingQueue">
            <summary>
            Dequeue BillingQueue.
            Tables affected are t_user_billing_queue.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UodbWS.ExecuteOnAllPartitions``1(System.String,System.Func{Microsoft.Webstore.WstClient.WstDataReader,``0})">
            <summary>
            Executes the supplied sql against all partions.
            </summary>
            <param name="_sql"></param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.Database.UodbWS.HandleWebstoreReader">
            <summary>
            Delegate for a handler that is called when a webstore query has completed.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:ServerTestFramework.Database.PurchaseTranasction">
            <summary>
            A class contains purchase transaction related data
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.CTPPurchaseTranasction">
            <summary>
            class contains CTP  transaction related data
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.UserCommercedbWS">
            <summary>
            Interfaces with the UserCommcerceDB WebStore - taking into account partitioned tables
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserCommercedbWS.ExecuteSQLSelect(ServerTestFramework.Database.UodbTable)">
            <summary>
            Executes a SQL SELECT statement using the provided UodbTable object. Results
            are stored in the dbtable.
            </summary>
            <param name="dbtable">UodbTable object to use. Must have 1 or more constraints
            set. Expected to only return 1 row.</param>
        </member>
        <member name="M:ServerTestFramework.Database.UserCommercedbWS.ExecuteSQLUpdate(ServerTestFramework.Database.UodbTable)">
            <summary>
            Executes a SQL UPDATE statement using the provided UodbTable object.
            </summary>
            <param name="dbtable">UodbTable object to use. Must have 1 or more constraints
            set and 1 or more properties to update.</param>
        </member>
        <member name="M:ServerTestFramework.Database.UserCommercedbWS.GetPurchaseTransaction(System.String,System.UInt64,System.String)">
            <summary>
            Get purchase transaction
            </summary>
            <param name="userPuid"></param>
            <returns>PurchaseTransaction</returns>
        </member>
        <member name="M:ServerTestFramework.Database.UserCommercedbWS.UpdateFinBusTransactionStartDate(System.UInt64,System.DateTime)">
            <summary>
            Update the finbus transaction start date. This is needed due to a change in p_finbus_record_item_preintent_v2 to
            block a second transaction for the same user in 120 seconds
            </summary>
            <param name="userPuid"></param>
            <param name="newStart"></param>
        </member>
        <member name="M:ServerTestFramework.Database.UserCommercedbWS.UpdateDmpPurchaseItemAlternateUrl(System.UInt64,System.String)">
            <summary>
            Update new alternate url for dmp PurchaseItem transaction
            </summary>
            <param name="userPuid"></param>
            <param name="newUrl">new alternate url</param>
        </member>
        <member name="M:ServerTestFramework.Database.UserCommercedbWS.UpdateDmpRewardAlternateUrl(System.UInt64,System.String)">
            <summary>
            Update new alternate url for dmp AddPromotionPoints transaction
            </summary>
            <param name="userPuid"></param>
            <param name="newUrl">new alternate url</param>
        </member>
        <member name="M:ServerTestFramework.Database.UserCommercedbWS.UpdateScsPurchaseItemAlternateUrl(System.UInt64,System.String)">
            <summary>
            Update new alternate url for scs PurchaseItem transaction
            </summary>
            <param name="userPuid"></param>
            <param name="newUrl">new alternate url</param>
        </member>
        <member name="M:ServerTestFramework.Database.UserCommercedbWS.UpdateScsSubmitOrderAlternateScsUrl(System.UInt64,System.String)">
            <summary>
            Update vc_alternate_scs_url for SCS SubmitOrder transaction
            </summary>
            <param name="userPuid"></param>
            <param name="newUrl">new alternate url</param>
        </member>
        <member name="M:ServerTestFramework.Database.UserCommercedbWS.UpdateCTPQueueAlternateUrl(System.UInt64,System.String)">
            <summary>
            Update vc_alternate_ctp_url for CTP transaction
            </summary>
            <param name="userPuid"></param>
            <param name="newUrl">new alternate url</param>
        </member>
        <member name="M:ServerTestFramework.Database.UserCommercedbWS.UpdateFinBusTransactionBif(System.UInt64,System.String)">
            <summary>
            Update vc_behavior_injection for FinBus transaction. Also update the dt_consider_pending field,
            so the thread won't wait 2 minutes
            </summary>
            <param name="userPuid"></param>
            <param name="newBif">new BIF field</param>
        </member>
        <member name="M:ServerTestFramework.Database.UserCommercedbWS.UpdatePPVPurchasedDate(System.UInt64,System.DateTime)">
            <summary>
            Update the PPV purchased date. This is needed due to a change in p_xbos_check_catalog_offer_licenses to
            block a second PPV purchase for the same user in 24 hours
            </summary>
            <param name="userPuid"></param>
            <param name="newDate"></param>
        </member>
        <member name="T:ServerTestFramework.Database.OfferType">
            <summary>
                Offer type enumeration. See CreateBulkUsers()
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.UserWebMappingList">
            <summary>
            Summary description for WebMapping.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.QueryGenerator.GenerateUpdateOrInsert(System.String,System.String[],System.Object[],System.String[])">
            <summary> Generates an SQL query for the logic of: "if count=0 then insert, else update" </summary>
        </member>
        <member name="T:ServerTestFramework.Database.Webdb">
            <summary>
            This is a wrapper class for talking to the WebDB.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.Webdb.GetTitleInformation(System.UInt32)">
            <summary>
            Retrieves the title information from the WebDB, including localized title names.
            </summary>
            <param name="titleId">Title ID</param>
            <returns>A WebdbTitleInformation object describing the title in WebDB.</returns>
        </member>
        <member name="M:ServerTestFramework.Database.Webdb.GetTitleNames(System.UInt32)">
            <summary>
            Retrieves all the localized title names for the specified title.
            </summary>
            <param name="titleId">Title ID</param>
            <returns>A collection of WebdbTitleName objects. Null if none exist.</returns>
        </member>
        <member name="M:ServerTestFramework.Database.Webdb.GetLeaderboards(System.UInt32)">
            <summary>
            Retrieves the leaderboard data for the specified title, including all localized names, raw attributes
            and formatted attributes.
            </summary>
            <param name="titleId">Title ID</param>
            <returns>A collection of WebdbLeaderboard objects. Null is none exist.</returns>
        </member>
        <member name="M:ServerTestFramework.Database.Webdb.GetLeaderboardNames(System.UInt32,System.Int32)">
            <summary>
            Retrieves the localized names for the specified title and leaderboard.
            </summary>
            <param name="titleId">Title ID</param>
            <param name="leaderboardId">Leaderboard ID</param>
            <returns>A collection of WebdbLeaderboardName objects. Null if none exist.</returns>
        </member>
        <member name="M:ServerTestFramework.Database.Webdb.GetLeaderboardRawAttributes(System.UInt32,System.Int32)">
            <summary>
            Retrieves the raw attributes for the specified leaderboard
            </summary>
            <param name="titleId">Title ID</param>
            <param name="leaderboardId">Leaderboard ID</param>
            <returns>A collection of WebdbRawAttributes object. Null if none exist.</returns>
        </member>
        <member name="M:ServerTestFramework.Database.Webdb.GetLeaderboardFormattedAttributes(System.UInt32,System.Int32)">
            <summary>
            Retrieves the formatted attributes for the specified leaderboard, including the localized
            formatted attribute names.
            </summary>
            <param name="titleId">Title ID</param>
            <param name="leaderboardId">Leaderboard ID</param>
            <returns>A collection of WebdbFormattedAttribute objects. Null if none exist.</returns>
        </member>
        <member name="M:ServerTestFramework.Database.Webdb.GetLeaderboardFormattedAttributeNames(System.UInt32,System.Int32,System.String)">
            <summary>
            Retrieves the localized names for a formatted attribute on the specified leaderboard.
            </summary>
            <param name="titleId">Title ID</param>
            <param name="leaderboardId">Leaderboard ID</param>
            <param name="friendlyName">Friendly name of the formatted attribute</param>
            <returns>A collection of WebdbFormattedAttributeName objects. Null if none exist.</returns>
        </member>
        <member name="T:ServerTestFramework.Database.StaticWebDB">
            <summary> This is a wrapper for the WebDB class, with static methods that can be directly called to get results. </summary>
        </member>
        <member name="T:ServerTestFramework.Database.WebstoreDB">
            <summary>
            Base class for WebStore databases - taking into account partitioned tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.XbosWS">
            <summary>
            Derived from UodbWS, so all functions from UodbWS are also available here.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.XbosWS.OfferInfo">
            Subscription-related UODB queries.
        </member>
        <member name="T:ServerTestFramework.Database.XMatch">
            <summary>
            Wrapper for talking to XMatch.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.XMatch.ConnectToServer(System.String[])">
            <summary>
            Connects to XMatch server taking an array
            Only connects to the first server in the array
            </summary>
            <param name="serverNames">Array of XMatch server names</param>
        </member>
        <member name="M:ServerTestFramework.Database.XMatch.ConnectToServer(System.String)">
            <summary>
            Connects to the Xmatch Database
            </summary>
            <param name="serverName">Name of XMatch server</param>
        </member>
        <member name="M:ServerTestFramework.Database.XMatch.Close">
            <summary>
            Closes the connection to XMatch
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.XMatch.ClearMatchConfiguration(System.UInt32)">
            <summary>
            Removes the match tables and procs for specified TitleID
            Reverses the changes that LiveMatch does to make it 'clean' for running LiveMatch again.
            There is a stored proc in NPDB that does the same thing p_match_title_delete
            Works for both Xbox and Xenon
            </summary>
            <param name="titleId">TitleID to remove match tables</param>
        </member>
        <member name="M:ServerTestFramework.Database.XMatch.GetMatchTables(System.UInt32)">
            <summary>
            Gets a list of match tables from the XMatch Db
            </summary>
            <param name="titleID">Title ID to retrieve matches</param>
            <returns>Comma separated list of names</returns>
        </member>
        <member name="M:ServerTestFramework.Database.XMatch.GetXboxMatchTables(System.UInt32)">
            <summary>
            Gets a list of match tables from the XMatch Db
            </summary>
            <param name="titleID">Title ID to retrieve matches</param>
            <returns>Comma separated list of names</returns>
        </member>
        <member name="M:ServerTestFramework.Database.XMatch.GetStoredProc(System.String)">
            <summary>
            Return a single stored procedure's text.  This can be used to re-create the stored
            procedure.
            </summary>
            <param name="sprocName">Name of the stored procedure whose text is to be returned.</param>
            <returns>Text of the stored procedure.  This begins with a CREATE, and can be used to
            re-create the procedure.  Replacing CREATE with ALTER allows modifications in-place.</returns>
        </member>
        <member name="M:ServerTestFramework.Database.XMatch.GetStoredProcs(System.UInt32)">
            <summary>
            Get a list of stored procedures in XMatch DB for Matches.
            </summary>
            <param name="titleID">Title of the matches to be returned</param>
            <returns>Comma separated string of match stored procs</returns>
        </member>
        <member name="M:ServerTestFramework.Database.XMatch.GetXboxStoredProcs(System.UInt32)">
            <summary>
            Get a list of stored procedures in XMatch DB for Matches.
            </summary>
            <param name="titleID">Title of the matches to be returned</param>
            <returns>Comma separated string of match stored procs</returns>
        </member>
        <member name="M:ServerTestFramework.Database.XMatch.GetTableColumns(System.String)">
            <summary>
            Get a list of column names from a specified table
            </summary>
            <param name="TableName">Table name to retrieve</param>
            <returns>Comma separated list of column names</returns>
        </member>
        <member name="M:ServerTestFramework.Database.XMatch.ExecuteScalar(System.String)">
            <summary>
            Executes a SQL Query and returns the single scalar value
            </summary>
            <param name="sql">SQL Query</param>
            <returns>Value of Query</returns>
        </member>
        <member name="M:ServerTestFramework.Database.XMatch.IssueCommand(System.String)">
            <summary>
            Allows you to run a command against XMatch
            </summary>
            <param name="sql">SQL command to execute</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:ServerTestFramework.Database.XMatch.ReadData(System.String,System.Data.SqlClient.SqlDataReader@)">
            <summary>
            Allows you to pass a query to XMatch and get a data reader back.
            </summary>
            <param name="sql">SQL Query</param>
            <param name="reader">Data returned from query</param>
        </member>
        <member name="T:ServerTestFramework.Database.BetaGroupEditor">
            <summary>
            Utility for altering or creating beta groups.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.EditorCommon">
            <summary>
            Common code for all the db *Editor classes.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Database.EditorCommon.UseCaching">
            <summary>
            If true, then lookups will store their result in a cache, so that subsequent lookups do not hit the DB.
            If false, every lookup will hit the DB every time.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Database.EditorCommon.EnableCachingByDefaultForNewInstances">
            <summary>
            This can be enabled for a short time during bulk data editing to turn caching on by default for new instances.  Please leave it off normally unless you have a really good reason.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.EditorCommon.ClearCache">
            <summary>
            Clears all locally cached data.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.EditorCommon.Exists">
            <summary>
            Whether or not the object exists in the db.
            If this property is cached, it must use the name "exists".
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.BetaGroupEditor.NukeGroup(System.Guid)">
            <summary>
                Nuke the group from orbit. This includes all references to it. You better be sure.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.BetaGroupEditor.GetAllBetaGroups">
            <summary>
                Get all beta groups, accross all partitions.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.BetaGroupEditor.FromId(System.Guid)">
            <summary> Construct from an existing beta group id (does not guarentee that the group exists). </summary>
        </member>
        <member name="M:ServerTestFramework.Database.BetaGroupEditor.CreateOrUseExistingId(System.Guid)">
            <summary> Constructs from a beta group id, creating the beta group in the db if it does not already exist. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.BetaGroupEditor.CreateNew">
            <summary> Creates a new beta group. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.BetaGroupEditor.GetGenericUserProperty``1(System.String,System.String)">
            <summary> Generic implementation of returning a property from a table hashed on guid (or cache if able). </summary>
        </member>
        <member name="M:ServerTestFramework.Database.BetaGroupEditor.SetGenericUserProperty``1(System.String,System.String,``0)">
            <summary> Generic implementation of setting a property in a table hashed on guid.  The value must be convertible to a string in a way that SQL understands. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.BetaGroupEditor.GetAllMachines">
            <summary> Returns all machines in the group. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.BetaGroupEditor.GetAllConsoles">
            <summary> Returns all console IDs in the group. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.BetaGroupEditor.RemoveAllMachines">
            <summary> Removes all machine from the group. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.BetaGroupEditor.AddMachine(System.UInt64)">
            <summary> Add a machine to the group, if it does not already contain it. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.BetaGroupEditor.Id">
            <summary> Beta Group ID.  This is the only non-cached information we store about the beta group. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.BetaGroupEditor.Exists">
            <summary> Whether the beta group actually exists in the db. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.BetaGroupEditor.Name">
            <summary> Name of the group. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.BetaGroupEditor.Creator">
            <summary> Who created the group. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.BetaGroupEditor.Created">
            <summary> When the group was created. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.BetaGroupEditor.HashBucket">
            <summary> Webstore SQL hash bucket. </summary>
        </member>
        <member name="T:ServerTestFramework.Database.ComponentEditor">
            <summary>
            Utility for altering or creating components directly in the database.
            NOTE: Be careful using this, modifying an existing component is not to be done lightly.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ComponentEditor.FromName(System.String)">
            <summary>Construct from an existing component name (does not guarantee that the component exists).</summary>
        </member>
        <member name="M:ServerTestFramework.Database.ComponentEditor.CreateOrOverwrite(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructs from a component definition, creating the component in the database
            if it does not already exist or overwriting all values if it does.  KNOW WHAT YOU ARE DOING IF YOU USE THIS!
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ComponentEditor.Delete">
            <summary>Completely removes the virtual interface from the database.</summary>
        </member>
        <member name="M:ServerTestFramework.Database.ComponentEditor.GetGenericProperty``1(System.String)">
            <summary>Generic implementation of returning a property from a component (or cache if able).</summary>
        </member>
        <member name="M:ServerTestFramework.Database.ComponentEditor.GetGenericProperty``1(System.String,System.String)">
            <summary>Generic implementation of returning a property from a component (or cache if able).</summary>
        </member>
        <member name="M:ServerTestFramework.Database.ComponentEditor.SetGenericProperty``1(System.String,``0)">
            <summary>Generic implementation of setting a property of a component.  The value must be convertible to a string in a way that SQL understands.</summary>
        </member>
        <member name="M:ServerTestFramework.Database.ComponentEditor.SetGenericProperty``1(System.String,System.String,``0)">
            <summary>Generic implementation of setting a property of a component.  The value must be convertible to a string in a way that SQL understands.</summary>
        </member>
        <member name="M:ServerTestFramework.Database.ComponentEditor.FormatNullable``1(System.Nullable{``0})">
            <summary>Formats a nullable type for a SQL statement.</summary>
        </member>
        <member name="M:ServerTestFramework.Database.ComponentEditor.FormatString(System.String)">
            <summary>Formats a string for a SQL statement.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.ComponentEditor.Name">
            <summary>The component's name.</summary>
            <remarks>This is the only non-cached information we store.</remarks>
        </member>
        <member name="P:ServerTestFramework.Database.ComponentEditor.Exists">
            <summary>Whether the component actually exists in the database.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.ComponentEditor.InstallUnit">
            <summary>Install unit of the component.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.ComponentEditor.Executable">
            <summary>Executable of the component.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.ComponentEditor.Installer">
            <summary>Installer of the component.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.ComponentEditor.UserRole">
            <summary>User role of the component.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.ComponentEditor.Info1">
            <summary>Info1 of the component.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.ComponentEditor.Info2">
            <summary>Info2 of the component.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.ComponentEditor.EscapedName">
            <summary>The Name, escaped.</summary>
        </member>
        <member name="T:ServerTestFramework.Database.ConsoleBanEditor">
            <summary>
            Utility for manipulating console bans directly in the database.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ConsoleBanEditor.FromConsoleId(System.String)">
            <summary>
            Construct from a console id (does not guarentee that the console exists).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ConsoleBanEditor.RemoveAllConsoleBans">
            <summary> Removes all console bans from this console.  This does not remove machine bans. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ConsoleBanEditor.BanConsole">
            <summary> Adds or updates a console ban for this console using the default reason forever.  This does not add a machine ban. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ConsoleBanEditor.BanConsole(System.Int32,System.DateTime)">
            <summary> Adds or updates a console ban for this console.  A console may be banned for multiple reasons.  This does not add a machine ban. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ConsoleBanEditor.BanConsole(ServerTestFramework.Database.ConsoleBanEditor.ConsoleBanStatus)">
            <summary> Adds or updates a console ban for this console.  A console may be banned for multiple reasons.  This does not add a machine ban. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ConsoleBanEditor.GetAllConsoleBans">
            <summary> Retrieves all console bans for this console, sorted by reason code ascending.  This does not retrieve machine bans. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ConsoleBanEditor.GetAllConsoleBanHistories">
            <summary> Retrieves all console ban history for this console.  This does not retrieve machine ban history. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ConsoleBanEditor.ConsoleId">
            <summary>
            Console ID.  This is the only non-cached information we store about the console (or set of consoles).
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.CountryEditor">
            <summary>
            Utility for altering or creating an individual country.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.CountryEditor.FromId(System.Byte)">
            <summary>
            Construct from an existing country id (does not guarentee that the country exists).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.CountryEditor.CreateOrUseExistingId(System.Byte)">
            <summary>
            Constructs from a country id, creating the country in the db if it does not already exist.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.CountryEditor.Id">
            <summary>
            Country ID.  This is the only non-cached information we store about the country.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.CountryEditor.Exists">
            <summary>
            Whether the country actually exists in the db.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.CountryEditor.Name">
            <summary>
            Abbreviation of the country.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.CountryEditor.FriendlyName">
            <summary>
            Actual name of the country.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.CountrySetEditor">
            <summary>
            Utility for altering or creating a country set.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.CountrySetEditor.FromId(System.UInt16)">
            <summary>
            Construct from an existing country set id (does not guarentee that the country set exists).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.CountrySetEditor.CreateOrUseExistingId(System.UInt16)">
            <summary>
            Constructs from a country set id, creating the country set in the db if it does not already exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.CountrySetEditor.GetAllCountries">
            <summary>
            Returns all granted countries from the set.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.CountrySetEditor.RemoveAllCountries">
            <summary>
            Removes all countries from the set.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.CountrySetEditor.AddCountry(System.Byte)">
            <summary>
            Add a country to a set, if it does not already contain it.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.CountrySetEditor.Id">
            <summary>
            Privelege set ID.  This is the only non-cached information we store about the country set.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.CountrySetEditor.Exists">
            <summary>
            Whether the country set actually exists in the db.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.CountrySetEditor.Name">
            <summary>
            Name of the country set.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.CultureEditor">
            <summary>
            Utility for altering or creating an individual culture.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.CultureEditor.FromId(System.Int32)">
            <summary>
            Construct from an existing culture id (does not guarentee that the culture exists).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.CultureEditor.CreateOrUseExistingId(System.Int32)">
            <summary>
            Constructs from a culture id, creating the culture in the db if it does not already exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.CultureEditor.GetGenericCultureProperty``1(System.String,System.String)">
            <summary>
            Generic implementation of returning a property from a culture (or cache if able).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.CultureEditor.SetGenericCultureProperty``1(System.String,System.String,``0)">
            <summary>
            Generic implementation of setting a property in a culture.  The value must be convertible to a string in a way that SQL understands.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.CultureEditor.Id">
            <summary>
            Culture ID.  This is the only non-cached information we store about the culture.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.CultureEditor.Exists">
            <summary>
            Whether the culture actually exists in the db.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.CultureEditor.LanguageId">
            <summary> Language ID of the culture. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.CultureEditor.CountryId">
            <summary> Country ID of the culture. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.CultureEditor.Name">
            <summary> Name of the culture. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.CultureEditor.CountryCode">
            <summary> Country code of the culture. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.CultureEditor.Collation">
            <summary> SQL collation thing. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.CultureEditor.IsLiveSupported">
            <summary> Whether the culture is live-supported or not. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.CultureEditor.IsXboxComSupported">
            <summary> Whether the culture is xbox.com supported or not. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.CultureEditor.LiveLanguageId">
            <summary> The Live Language ID of the culture. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.CultureEditor.LiveCultureId">
            <summary> The Live Culture ID of the culture. </summary>
        </member>
        <member name="T:ServerTestFramework.Database.CurfewEditor">
            <summary>
            Utility for altering or creating a curfew.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.CurfewEditor.FromId(System.Byte)">
            <summary> Construct from an existing country id (does not guarentee that the country or curfew exists). </summary>
        </member>
        <member name="M:ServerTestFramework.Database.CurfewEditor.CreateOrUseExistingId(System.Byte)">
            <summary> Constructs from a country id, creating the curfew row if neccesary in the db if it does not already exist. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.CurfewEditor.Remove">
            <summary> Deletes the curfew. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.CurfewEditor.GetGenericCurfewProperty``1(System.String)">
            <summary> Generic implementation of returning a property from an Curfew (or cache if able). </summary>
        </member>
        <member name="M:ServerTestFramework.Database.CurfewEditor.SetGenericCurfewProperty``1(System.String,``0)">
            <summary> Generic implementation of setting a property in an Voucher.  The value must be convertible to a string in a way that SQL understands. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.CurfewEditor.CountryId">
            <summary> Country ID.  This is the only non-cached information we store about the curfew. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.CurfewEditor.Exists">
            <summary> Whether the curfew actually exists in the db. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.CurfewEditor.AgeLimit">
            <summary> The age under which the curfew applies. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.CurfewEditor.StartTime">
            <summary> The time of day (in utc) that the curfew starts. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.CurfewEditor.DurationInMinutes">
            <summary> The duration of the curfew in minutes. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.CurfewEditor.PrivilegeSetId">
            <summary> Privilege set for which privileges are revoked during the curfew. </summary>
        </member>
        <member name="T:ServerTestFramework.Database.RowDoesNotExistException">
            <summary>
            Thrown when trying to access a property for something that doesn't exist.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.InstanceEditor">
            <summary>
            Utility for altering or creating instances directly in the database.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.InstanceEditor.FromName(System.String)">
            <summary>Construct from an existing instance (does not guarentee that the instance exists).</summary>
        </member>
        <member name="M:ServerTestFramework.Database.InstanceEditor.CreateOrUseExisting(System.String)">
            <summary>Constructs from a name, creating the instance in the database if it does not already exist.</summary>
        </member>
        <member name="M:ServerTestFramework.Database.InstanceEditor.GetGenericSiteProperty``1(System.String)">
            <summary>Generic implementation of returning a property from an instance (or cache if able).</summary>
        </member>
        <member name="M:ServerTestFramework.Database.InstanceEditor.GetGenericSiteProperty``1(System.String,System.String)">
            <summary>Generic implementation of returning a property from an instance (or cache if able).</summary>
        </member>
        <member name="M:ServerTestFramework.Database.InstanceEditor.SetGenericSiteProperty``1(System.String,``0)">
            <summary>Generic implementation of setting a property of an instance. The value must be convertible to a string in a way that SQL understands.</summary>
        </member>
        <member name="M:ServerTestFramework.Database.InstanceEditor.SetGenericSiteProperty``1(System.String,System.String,``0)">
            <summary>Generic implementation of setting a property of an instance. The value must be convertible to a string in a way that SQL understands.</summary>
        </member>
        <member name="M:ServerTestFramework.Database.InstanceEditor.Delete">
            <summary>Completely removes the instance from the database. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.InstanceEditor.Name">
            <summary>Instance name. This is the only non-cached information we store about the site.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.InstanceEditor.Exists">
            <summary>Whether the instance actually exists in the database.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.InstanceEditor.Hostname">
            <summary>The hostname of the instance.</summary>
        </member>
        <member name="T:ServerTestFramework.Database.InterfaceEditor">
            <summary>
            Utility for altering or creating virtual interfaces directly in the database.
            NOTE: Be careful using this, modifying an existing interface is not to be done lightly.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.InterfaceEditor.FromName(System.String)">
            <summary>Construct from an existing interface name (does not guarantee that the interface exists).</summary>
        </member>
        <member name="M:ServerTestFramework.Database.InterfaceEditor.CreateOrOverwrite(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructs from an interface definition, creating the interface in the database
            if it does not already exist or overwriting all values if it does.  KNOW WHAT YOU ARE DOING IF YOU USE THIS!
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.InterfaceEditor.Delete">
            <summary>Completely removes the interface from the database.</summary>
        </member>
        <member name="M:ServerTestFramework.Database.InterfaceEditor.GetGenericProperty``1(System.String)">
            <summary>Generic implementation of returning a property from an interface (or cache if able).</summary>
        </member>
        <member name="M:ServerTestFramework.Database.InterfaceEditor.GetGenericProperty``1(System.String,System.String)">
            <summary>Generic implementation of returning a property from an interface (or cache if able).</summary>
        </member>
        <member name="M:ServerTestFramework.Database.InterfaceEditor.SetGenericProperty``1(System.String,``0)">
            <summary>Generic implementation of setting a property of an interface.  The value must be convertible to a string in a way that SQL understands.</summary>
        </member>
        <member name="M:ServerTestFramework.Database.InterfaceEditor.SetGenericProperty``1(System.String,System.String,``0)">
            <summary>Generic implementation of setting a property of an interface.  The value must be convertible to a string in a way that SQL understands.</summary>
        </member>
        <member name="M:ServerTestFramework.Database.InterfaceEditor.ConvertNotificationTypeToName(ServerTestFramework.Database.InterfaceEditor.NotificationType)">
            <summary>Gets the string for the given notification type.</summary>
        </member>
        <member name="M:ServerTestFramework.Database.InterfaceEditor.SetNotificationUrl(ServerTestFramework.Database.InterfaceEditor.NotificationType,System.String)">
            <summary>
            Sets the url for a given notification type.
            </summary>
            <param name="notification">The notification type to set.</param>
            <param name="url">The url; when null, removes the entry.</param>
        </member>
        <member name="M:ServerTestFramework.Database.InterfaceEditor.SetNotificationUrl(System.String,System.String)">
            <summary>
            Sets the url for a given notification type.
            </summary>
            <param name="notification">The notification type to set.</param>
            <param name="url">The url; when null, removes the entry.</param>
        </member>
        <member name="M:ServerTestFramework.Database.InterfaceEditor.GetServerList">
            <summary>
            Gets the servers for the interface.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.InterfaceEditor.FormatNullable``1(System.Nullable{``0})">
            <summary>Formats a nullable type for a SQL statement.</summary>
        </member>
        <member name="M:ServerTestFramework.Database.InterfaceEditor.FormatString(System.String)">
            <summary>Formats a string for a SQL statement.</summary>
        </member>
        <member name="M:ServerTestFramework.Database.InterfaceEditor.FormatBool(System.Boolean)">
            <summary>Formats a bool for a SQL statement.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.InterfaceEditor.Name">
            <summary>The interface's name.</summary>
            <remarks>This is the only non-cached information we store.</remarks>
        </member>
        <member name="P:ServerTestFramework.Database.InterfaceEditor.Exists">
            <summary>Whether the interface actually exists in the database.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.InterfaceEditor.Component">
            <summary>Component that the interface represents.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.InterfaceEditor.NicRole">
            <summary>Nic role of the interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.InterfaceEditor.Protocol">
            <summary>Protocol of the interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.InterfaceEditor.Port">
            <summary>Port of the interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.InterfaceEditor.PortEnd">
            <summary>End port of the interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.InterfaceEditor.VSite">
            <summary>VSite of the interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.InterfaceEditor.VSiteId">
            <summary>VSite Id of the interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.InterfaceEditor.VDir">
            <summary>VDir of the interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.InterfaceEditor.DBName">
            <summary>Database name of the interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.InterfaceEditor.ShareName">
            <summary>Share name of the interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.InterfaceEditor.Timeout">
            <summary>Timeout of the interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.InterfaceEditor.ServiceId">
            <summary>Service id of the interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.InterfaceEditor.ServiceName">
            <summary>Service name of the interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.InterfaceEditor.NeedSGInfo">
            <summary>Whether the interface needs SG info.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.InterfaceEditor.XboxStateChangeNotificationUrl">
            <summary>Xbox state change notification url of the interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.InterfaceEditor.TitleChangeNotificationUrl">
            <summary>Title change notification url of the interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.InterfaceEditor.DeadXboxNotificationUrl">
            <summary>Dead xbox notification url of the interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.InterfaceEditor.UserRole">
            <summary>User role of the interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.InterfaceEditor.Info1">
            <summary>Info1 of the interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.InterfaceEditor.Info2">
            <summary>Info2 of the interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.InterfaceEditor.EscapedName">
            <summary>The Name, escaped.</summary>
        </member>
        <member name="T:ServerTestFramework.Database.InterfaceEditor.NotificationType">
            <summary>The different notification types.</summary>
        </member>
        <member name="T:ServerTestFramework.Database.MachineEditor">
            <summary>
            Utility for altering or creating machines directly in the database.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Database.MachineEditor.DefaultCertHash">
            <summary> Default fixed value used when a console certificate hash is not provided. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.FromId(System.UInt64)">
            <summary>
            Construct from an existing machine id (does not guarentee that the machine exists).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.FromWMDId(System.String)">
            <summary>
            Construct from a WM device id (does not guarentee that the machine exists).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.FromName(System.String)">
            <summary>
            Construct from an existing console Id.  This does a lookup, and will throw if it does not exist.
            ConsoleID is of the form: XE.blahnumbers or SN.blahnumbers or such.
            This will throw if there are more than one machines that share the same console ID.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.FromName(System.String,System.Byte[])">
            <summary>
            Construct from an existing console Id and console certificate sha1 hash.  This does a lookup, and will throw if it does not exist.
            consoleID is of the form: XE.blahnumbers or SN.blahnumbers or such.
            certHash is a 20 byte sha1 hash of the console certificate, used by xbox360 only.  If null, a default fixed value will be used.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.FromName(System.String,System.String)">
            <summary>
            Construct from an existing console Id and scode (a transformed subset of the console certificate sha1 hash).  This does a lookup, and will throw if it does not exist.
            consoleID is of the form: XE.blahnumbers or PC.blahnumbers or such.
            scode is of the form XXXX-XXXX-XXXX-XXXX, and is used by xbox360 only.  If this is null then there must be only one machine with the specified console id.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.AddTMachinesEntry(System.String,System.UInt64)">
            <summary>
            Adds an entry to t_machines for the specified console ID and machine ID
            </summary>
            <param name="consoleId"></param>
            <param name="machineId"></param>
            <returns>True if the entry was successfully added, false if a machine with the same ID exists already</returns>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.AddTUserNamesEntry(System.String,System.UInt64)">
            <summary>
            Adds an entry to t_user_names for the specified console ID, and machine ID
            </summary>
            <param name="consoleId"></param>
            <param name="machineId"></param>
            <returns>True if the entry was successfully added, false if a machine with the same ID exists already</returns>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.CreateOrUseExistingName(System.String,System.Byte[],System.UInt64)">
            <summary>
            Constructs from a console id (SN.XXXXXXXXXXXX or XE.XXXXXXXXXXXX or PC.XXXXXXXXXXXX) and machine id.
            If used for a PC machine, the default voucher, a random id, and a new/cached passport will be used.
            certHash is a 20 byte sha1 hash of the console certificate, used by xbox360 only.  If null, a default fixed value will be used.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.CreateDuplicateXbox360(System.String)">
            <summary> Creates a new xbox360 machine with a random cert hash, so that the second machine using the console id will be assigned a different machine puid. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.CreateLegacyXbox360">
            <summary> Creates a new xbox360 machine, setting up the tables to match how an xbox360 would look before the transition to the xenon machine key table. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.CreateLegacyXbox360(System.String)">
            <summary> Creates a new xbox360 machine, setting up the tables to match how an xbox360 would look before the transition to the xenon machine key table. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.CreateOrUseExistingPCName(System.String,System.Nullable{System.UInt64},System.String,System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Constructs from a console id (PC.XXXXXXXXXXXX) and machine id.  Only valid for PC machines.
            If voucher is null, the PC test voucher will be used.  If pcId is null a random value will be used.  If passportId is null, a random passport will be created and cached/used.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.CreateOrUseExistingPCName(System.String,System.UInt64,System.Nullable{System.UInt64})">
            <summary>
            Constructs from voucher, pcid, and passport id.  Only valid for PC machines.  Voucher should be of the form XXXXX-XXXXX-XXXXX-XXXXX-XXXXX.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.CreateOrUseExistingName(System.String)">
            <summary>
            Constructs from a console id (SN.XXXXXXXXXXXX or XE.XXXXXXXXXXXX or such).  If it doesn't exist, uses a random machine id.
            In the case of xbox360, a default certificate hash will be used.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.CreateOrUseExistingName(System.String,System.Byte[])">
            <summary>
            Constructs from a console id (SN.XXXXXXXXXXXX or XE.XXXXXXXXXXXX or such) and console certificate hash.  If it doesn't exist, uses a random machine id.
            certHash is a 20 byte sha1 hash of the console certificate, used by xbox360 only.  If null, a default fixed value will be used.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.AllocateMachinePuid(ServerTestFramework.Database.MachineType)">
            <summary> Reserves a new machine puid in npdb for use by a specific machine type. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.AllocateMachinePuid(ServerTestFramework.Database.MachineType,System.UInt32)">
            <summary> Reserves a range of new machine puids in npdb for use by a specific machine type. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.CreateOrUseExistingId(System.UInt64)">
            <summary> Constructs from an machine id, creating the machine in the db if it does not already exist. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.CreateNew">
            <summary>
            Creates a new MachineEditor with the Xbox360 machine 
            type and a random machine id and console id.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.CreateNew(ServerTestFramework.Database.MachineType)">
            <summary>
            Creates a new machine editor of the given type with a 
            random machine id and random console id.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.GenerateRandomConsoleID(ServerTestFramework.Database.MachineType)">
            <summary> Generates a random valid console ID for a specific machine type for a machine that does not currently exist. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.GetCachedPassportId">
            <summary> Gets the passport id used to create PC machine accounts in cases where the passport ID is not provided by the caller. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.GetCachedPassportLoginInfo(System.String@,System.String@)">
            <summary> Gets the passport login/password used to create PC machine accounts in cases where the passport ID is not provided by the caller. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.GetCachedPassportTicket(System.Byte[]@,System.Byte[]@)">
            <summary> Gets the passport login/password used to create PC machine accounts in cases where the passport ID is not provided by the caller. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.#ctor">
            <summary>
            MachineEditors are not created directy.  Use the static
            factory methods like CreateNew instead.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.GetGenericMachineProperty``1(System.String,System.String)">
            <summary>
            Generic implementation of returning a property from a machine (or cache if able).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.GetGenericNullableMachineProperty``1(System.String,System.String)">
            <summary>
            Generic implementation of returning a property from a machine (or cache if able), for columns that may be null.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.SetGenericMachineProperty``1(System.String,System.String,``0)">
            <summary>
            Generic implementation of setting a property in a machine.  The value must be convertible to a string in a way that SQL understands.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.SetGenericNullableMachineProperty``1(System.String,System.String,System.Nullable{``0})">
            <summary>
            Generic implementation of setting a property in a machine for columns that may be null.  The value must be convertible to a string in a way that SQL understands, or null.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.CompletelyRemoveMachine">
            <summary>
            Completely removes a machine from existance.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.SetIV(System.Byte[])">
            <summary>
            Set's the machines key's input vector, which is 16 bytes long.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.SetKey(System.Byte[])">
            <summary>
            Set's the machines encrypted key, which is 16 bytes long.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.CalculateKey">
            <summary>
            Get's the machines raw key, which for tests we just calculate from their console ID.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.GetEncryptedKey">
            <summary> Retrieves the encrypted session key for the machine. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.SetPPA2(System.Byte[])">
            <summary>
            Set's the machine's ppa2 entry, which is 8 bytes long.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.SetSPPA1(System.Byte[])">
            <summary>
            Set's the machines's sppa1 entry, which is 20 bytes long.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.SetGenealogyEntry(System.Boolean,System.Int32,System.String,System.Byte[])">
            <summary> Creates or replaces the genealogy entry for the machine. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.GetDecoratedConsoleId">
            <summary> Returns the ConsoleID with any decorations attached. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.ComputeSCodeBytes">
            <summary> Returns the SCode that is computed from the CertHash.  Only applicable to Xbox360. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.ComputeSCode">
            <summary> Returns the SCode that is computed from the CertHash.  Only applicable to Xbox360. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.RemoveAllMachineBans">
            <summary> Removes all machine bans from this machine.  This does not remove console bans. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.BanMachine">
            <summary> Adds or updates a machine ban for this machine using the default reason forever.  This does not add a console ban. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.BanMachine(System.Int32,System.DateTime,System.DateTime)">
            <summary> Adds or updates a machine ban for this machine.  A machine may be banned for multiple reasons.  This does not add a console ban. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.BanMachine(ServerTestFramework.Database.MachineEditor.MachineBanStatus)">
            <summary> Adds or updates a machine ban for this machine.  A machine may be banned for multiple reasons.  This does not add a console ban. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.GetAllMachineBans">
            <summary> Retrieves all machine bans for this machine, sorted by ban reason ascending.  This does not retrieve console bans. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.GetAllMachineBanHistories">
            <summary> Retrieves all machine ban history for this machine.  This does not retrieve console ban history. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineEditor.AuthClientTypeToMachineType(ServerTestFramework.LiveService.Auth.AuthContext.ClientTypes)">
            <summary> Converts an AuthContext client type to a MachineType. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.MachineEditor.Id">
            <summary>
            Machine ID.  This is the only non-cached information we store about the machine.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.MachineEditor.Exists">
            <summary>
            Whether the machine actually exists in the db.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.MachineEditor.ConsoleId">
            <summary>
            ConsoleId of the machine t_machines.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.MachineEditor.CertHash">
            <summary> 20 byte sha1 hash of the Xenon Console Certificate.  This only exists for xbox360 and will be null or ignored for anything else. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.MachineEditor.ResetDate">
            <summary>
            Date the machine was last reset.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.MachineEditor.BetaUser">
            <summary>
            Whether the machine is a beta user.
            TODO: This is deprecated and should NOT be used.  It will be removed after the column is actually deleted from production.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.MachineEditor.BetaTitle">
            <summary>
            Beta title for the machine.
            TODO: This is deprecated and should NOT be used.  It will be removed after the column is actually deleted from production.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.MachineEditor.ConsoleCertificateType">
            <summary>
            Console's certificate type.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.MachineEditor.ConsoleCertificatePartNumber">
            <summary>
            Console's certificate part number.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.MachineEditor.CreationDate">
            <summary>
            Machine's creation date
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.MachineEditor.HashBucket">
            <summary>
            Hash bucket for the machine (for t_machines).
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.MachineEditor.ClientFlashVersion">
            <summary>
            Machine's most recently seen client version, as updated by the xkdc.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.MachineEditor.ClientFlashVersionChangedDate">
            <summary>
            The date that the client's flash version column was last updated.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.MachineEditor.ConsoleRegion">
            <summary>
            Machine's most recently seen region, as updated by the xkdc.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.MachineEditor.ClientFlashUpdateVersion">
            <summary>
            Machine's most recently requested flash update version, as updated by xbos.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.MachineEditor.ClientFlashUpdateVersionChangedDate">
            <summary>
            The date that the client's flash update version column was last updated.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineGamertagHistoryEditor.RemoveAllHistory">
            <summary> Removes all gamertag history for this machine. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineGamertagHistoryEditor.SetHistory(ServerTestFramework.Database.MachineGamertagHistoryEditor.MachineGamertagHistoryEntry)">
            <summary> Adds or updates a history entry for this machine. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineGamertagHistoryEditor.GetAllHistory">
            <summary> Retrieves all history for this machine. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.MachineGamertagHistoryEditor.MachinePuid">
            <summary> Machine Puid.  This is the only non-cached information we store about the machine's gamertag history. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachinePassportHistoryEditor.RemoveAllHistory">
            <summary> Removes all Passport history for this machine. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachinePassportHistoryEditor.SetHistory(ServerTestFramework.Database.MachinePassportHistoryEditor.MachinePassportHistoryEntry)">
            <summary> Adds or updates a history entry for this machine. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachinePassportHistoryEditor.GetAllHistory">
            <summary> Retrieves all history for this machine. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.MachinePassportHistoryEditor.MachinePuid">
            <summary> Machine Puid.  This is the only non-cached information we store about the machine's Passport history. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineRecoveryHistoryEditor.RemoveAllHistory">
            <summary> Removes all Recovery history for this machine. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineRecoveryHistoryEditor.SetHistory(ServerTestFramework.Database.MachineRecoveryHistoryEditor.MachineRecoveryHistoryEntry)">
            <summary> Adds or updates a history entry for this machine. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.MachineRecoveryHistoryEditor.GetAllHistory">
            <summary> Retrieves all history for this machine. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.MachineRecoveryHistoryEditor.MachinePuid">
            <summary> Machine Puid.  This is the only non-cached information we store about the machine's recovery history. </summary>
        </member>
        <member name="T:ServerTestFramework.Database.OfferEditor">
            <summary>
            Utility for altering or creating offers directly in the database.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.OfferEditor.FromId(System.UInt64)">
            <summary>
            Construct from an existing offer id (does not guarentee that the offer exists).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.OfferEditor.CreateOrUseExistingId(System.UInt64)">
            <summary>
            Constructs from an offer id, creating the offer in the db if it does not already exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.OfferEditor.CreateNew">
            <summary>
            Creates a new offer id with a random id.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.OfferEditor.GetGenericOfferProperty``1(System.String,System.String)">
            <summary>
            Generic implementation of returning a property from an offer (or cache if able).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.OfferEditor.SetGenericOfferProperty``1(System.String,System.String,``0)">
            <summary>
            Generic implementation of setting a property in an offer.  The value must be convertible to a string in a way that SQL understands.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.OfferEditor.CompletelyRemoveOffer">
            <summary>
            Completely removes an offer and all references to it from UODB.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.OfferEditor.RemoveSubscriptions">
            <summary>
            Removes all subscription entries for the offer.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.OfferEditor.AddSubscription(System.UInt16,System.UInt32,System.Byte)">
            <summary>
            Creates an entry for the offer as a subscription.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.OfferEditor.AddSubscription">
            <summary>
            Creates a nice default entry for the offer as an xbox live subscription not related to tier.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.OfferEditor.GetAllServices">
            <summary>
            Returns a list of all services that the offer grants.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.OfferEditor.RemoveAllServices">
            <summary>
            Removes all services from an offer.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.OfferEditor.AddService(System.UInt32)">
            <summary>
            Adds a service to the offer, if it does not already exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.OfferEditor.GetAllPrivileges">
            <summary>
            Returns a list of all privileges that the offer grants.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.OfferEditor.RemoveAllPrivileges">
            <summary>
            Removes all granted privileges from an offer.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.OfferEditor.AddPrivilege(System.Byte)">
            <summary>
            Adds a granted privilege to the offer, if it does not already exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.OfferEditor.GetAllPrivilegeRestrictions">
            <summary>
            Returns a list of all privileges that the offer restricts.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.OfferEditor.RemoveAllPrivilegeRestrictions">
            <summary>
            Removes all restricted privileges from an offer.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.OfferEditor.AddPrivilegeRestriction(System.Byte)">
            <summary>
            Adds a restricted privilege to the offer, if it does not already exist.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.OfferEditor.Id">
            <summary>
            Offer ID.  This is the only non-cached information we store about the offer.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.OfferEditor.Exists">
            <summary>
            Whether the offer actually exists in the db.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.OfferEditor.ConsoleType">
            <summary>
            Console Type for the offer.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.OfferEditor.StartDate">
            <summary>
            Start Date.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.OfferEditor.EndDate">
            <summary>
            End Date.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.OfferEditor.OfferType">
            <summary>
            Type of offer.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.OfferEditor.FrequencyId">
            <summary>
            Frequency id of the offer.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.OfferEditor.Cancelable">
            <summary>
            Whether the offer can be canceled.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.OfferEditor.ESRBRating">
            <summary>
            ESRB rating for the offer.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.OfferEditor.BitFilter">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.OfferEditor.PolicyFlags">
            <summary>
            Policies for the offer.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.OfferEditor.Name">
            <summary>
            Friendly name of the offer.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.OfferEditor.GlobalOfferDetails">
            <summary>
            Offer details...?
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.PrivilegeEditor">
            <summary>
            Utility for altering or creating an individual privilege.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.PrivilegeEditor.FromId(System.Byte)">
            <summary>
            Construct from an existing privilege id (does not guarentee that the privilege exists).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.PrivilegeEditor.CreateOrUseExistingId(System.Byte)">
            <summary>
            Constructs from a privilege id, creating the privilege in the db if it does not already exist.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.PrivilegeEditor.Id">
            <summary>
            Privilege ID.  This is the only non-cached information we store about the privilege.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.PrivilegeEditor.Exists">
            <summary>
            Whether the privilege actually exists in the db.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.PrivilegeEditor.Name">
            <summary>
            Name of the privilege.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.PrivilegeSetEditor">
            <summary>
            Utility for altering or creating a privilege set.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.PrivilegeSetEditor.FromId(System.UInt16)">
            <summary>
            Construct from an existing privilege set id (does not guarentee that the privilege set exists).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.PrivilegeSetEditor.CreateOrUseExistingId(System.UInt16)">
            <summary>
            Constructs from a privilege set id, creating the privilege set in the db if it does not already exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.PrivilegeSetEditor.GetAllPrivileges">
            <summary>
            Returns all granted privileges from the set.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.PrivilegeSetEditor.RemoveAllPrivileges">
            <summary>
            Removes all privileges from the set.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.PrivilegeSetEditor.AddPrivilege(System.Byte)">
            <summary>
            Add a privilege to a set, if it does not already contain it.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.PrivilegeSetEditor.Id">
            <summary>
            Privelege set ID.  This is the only non-cached information we store about the privilege set.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.PrivilegeSetEditor.Exists">
            <summary>
            Whether the privilege set actually exists in the db.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.PrivilegeSetEditor.Name">
            <summary>
            Name of the privilege set.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.ServerEditor">
            <summary>
            Utility for altering or creating servers directly in the database.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServerEditor.FromName(System.String)">
            <summary>Construct from an existing server name (does not guarantee that the server exists).</summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServerEditor.GetGenericProperty``1(System.String)">
            <summary>Generic implementation of returning a property from a server (or cache if able).</summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServerEditor.GetGenericProperty``1(System.String,System.String)">
            <summary>Generic implementation of returning a property from a server (or cache if able).</summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServerEditor.SetGenericProperty``1(System.String,``0)">
            <summary>Generic implementation of setting a property of a server.  The value must be convertible to a string in a way that SQL understands.</summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServerEditor.SetGenericProperty``1(System.String,System.String,``0)">
            <summary>Generic implementation of setting a property of a server.  The value must be convertible to a string in a way that SQL understands.</summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServerEditor.GetServiceNicIp(System.String)">
            <summary>
            Gets the IP address of a given nic role for the server.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServerEditor.FormatNullable``1(System.Nullable{``0})">
            <summary>Formats a nullable type for a SQL statement.</summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServerEditor.FormatString(System.String)">
            <summary>Formats a string for a SQL statement.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServerEditor.Name">
            <summary>The server's name.</summary>
            <remarks>This is the only non-cached information we store.</remarks>
        </member>
        <member name="P:ServerTestFramework.Database.ServerEditor.Exists">
            <summary>Whether the server actually exists in the database.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServerEditor.Site">
            <summary>Site of the server.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServerEditor.State">
            <summary>State of the server.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServerEditor.IsOnline">
            <summary>True if the server is online.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServerEditor.EscapedName">
            <summary>The Name, escaped.</summary>
        </member>
        <member name="T:ServerTestFramework.Database.ServiceEditor">
            <summary>
            Utility for altering or creating an individual service.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServiceEditor.FromId(System.UInt32)">
            <summary>
            Construct from an existing service id (does not guarentee that the service exists).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServiceEditor.CreateOrUseExistingId(System.UInt32)">
            <summary>
            Constructs from a service id, creating the service in the db if it does not already exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServiceEditor.GetGenericServiceProperty``1(System.String,System.String)">
            <summary>
            Generic implementation of returning a property from a service (or cache if able).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServiceEditor.SetGenericServiceProperty``1(System.String,System.String,``0)">
            <summary>
            Generic implementation of setting a property in a service.  The value must be convertible to a string in a way that SQL understands.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServiceEditor.CompletelyRemoveService">
            <summary>
            Completely removes the service and all references to it from UODB.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServiceEditor.GetAllInstances">
            <summary>
            Retrieves all instance of the service.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServiceEditor.RemoveAllInstances">
            <summary>
            Deletes all instances of the service
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServiceEditor.AddInstance(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Adds or updates an existance instance of a service.  Any of the title fields may be 0 to indicate "all".
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServiceEditor.Id">
            <summary>
            Service ID.  This is the only non-cached information we store about the service.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServiceEditor.Exists">
            <summary>
            Whether the service actually exists in the db.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServiceEditor.Name">
            <summary>
            Description of the service.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServiceEditor.KerberosServiceName">
            <summary>
            Kerberos service name.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServiceEditor.KerberosDomainName">
            <summary>
            Kerberos domain name.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServiceEditor.MachineOnly">
            <summary>
            Whether the service is granted on a machine-only login.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.ServiceEditor.ServiceInstance">
            <summary>
            Represents an instance of a service
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.ServiceSetEditor">
            <summary>
            Utility for altering or creating a service set.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServiceSetEditor.FromId(System.UInt16)">
            <summary>
            Construct from an existing service set id (does not guarentee that the service set exists).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServiceSetEditor.CreateOrUseExistingId(System.UInt16)">
            <summary>
            Constructs from a service set id, creating the service set in the db if it does not already exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServiceSetEditor.GetAllServices">
            <summary>
            Returns all granted services from the set.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServiceSetEditor.RemoveAllServices">
            <summary>
            Removes all services from the set.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServiceSetEditor.AddService(System.UInt32)">
            <summary>
            Add a service to a set, if it does not already contain it.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServiceSetEditor.Id">
            <summary>
            Service set ID.  This is the only non-cached information we store about the service set.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServiceSetEditor.Exists">
            <summary>
            Whether the service set actually exists in the db.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServiceSetEditor.Name">
            <summary>
            Name of the service set.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.ServicePrivilegeSetEditor">
            <summary> Utility for altering or creating a service-privilege set. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServicePrivilegeSetEditor.FromId(System.UInt16)">
            <summary> Construct from an existing service-privilege set id (does not guarentee that the service-privilege set exists). </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServicePrivilegeSetEditor.CreateOrUseExistingId(System.UInt16)">
            <summary> Constructs from a service-privilege set id, creating the set in the db if it does not already exist.  The created set does not reference any service or privilege sets. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServicePrivilegeSetEditor.GetGenericProperty``1(System.String)">
            <summary> Generic implementation of returning a property from a table based on id (or cache if able). </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServicePrivilegeSetEditor.SetGenericProperty``1(System.String,``0)">
            <summary> Generic implementation of setting a property in a table based on id.  The value must be convertible to a string in a way that SQL understands. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServicePrivilegeSetEditor.Id">
            <summary> Service-Privilege set ID.  This is the only non-cached information we store about the privilege set. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServicePrivilegeSetEditor.Exists">
            <summary> Whether the service-privilege set actually exists in the db. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServicePrivilegeSetEditor.Name">
            <summary> Name of the service-privilege set. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServicePrivilegeSetEditor.ServiceSet">
            <summary> Service set represented by this group. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServicePrivilegeSetEditor.PrivilegeSet">
            <summary> Privilege set represented by this group. </summary>
        </member>
        <member name="T:ServerTestFramework.Database.ServiceTypeMappingEditor">
            <summary>
            Utility for altering or creating an individual service type mapping.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServiceTypeMappingEditor.FromId(System.UInt16)">
            <summary>
            Construct from an existing service type mapping id (does not guarentee that it exists).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServiceTypeMappingEditor.CreateOrUseExistingId(System.UInt16)">
            <summary>
            Constructs from a service type mapping id, creating the service type mapping in the db if it does not already exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServiceTypeMappingEditor.GetGenericMappingProperty``1(System.String,System.String)">
            <summary>
            Generic implementation of returning a property of a service type mapping (or cache if able).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServiceTypeMappingEditor.GetGenericNullableMappingProperty``1(System.String,System.String)">
            <summary>
            Generic implementation of returning a property of a service type mapping (or cache if able), for columns that may be null.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServiceTypeMappingEditor.SetGenericMappingProperty``1(System.String,System.String,``0)">
            <summary>
            Generic implementation of setting a property of a service type mapping.  The value must be convertible to a string in a way that SQL understands.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.ServiceTypeMappingEditor.SetGenericNullableMappingProperty``1(System.String,System.String,System.Nullable{``0})">
            <summary>
            Generic implementation of setting a property of a service type mapping for columns that may be null.  The value must be convertible to a string in a way that SQL understands, or null.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServiceTypeMappingEditor.Id">
            <summary>
            Service Type Mapping ID.  This is the only non-cached information we store about the service type mapping.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServiceTypeMappingEditor.Exists">
            <summary>
            Whether the serviceTypeMapping actually exists in the db.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServiceTypeMappingEditor.Name">
            <summary>
            Name of the mapping.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServiceTypeMappingEditor.ServiceType">
            <summary>
            Type of service this mapping is for (from t_service_types).
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServiceTypeMappingEditor.ClientType">
            <summary>
            Type of client this mapping is for (from t_client_types).
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServiceTypeMappingEditor.CountrySet">
            <summary>
            Set of countries that this mapping is for, or null for all.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServiceTypeMappingEditor.PrivilegeSet">
            <summary>
            Set of privileges that this mapping gets, or null for none.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServiceTypeMappingEditor.ServiceSet">
            <summary>
            Set of services that this mapping gets, or null for none.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServiceTypeMappingEditor.SubscriptionType">
            <summary>
            Type of subscription that this mapping gets, or null for none.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServiceTypeMappingEditor.IsFreeTrial">
            <summary>
            Whether this is for a free trial (TODO: what's the difference between 0 or null here?)
            //TODO: This column might be removed soon.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServiceTypeMappingEditor.StartDate">
            <summary>
            The time this mapping becomes effective (null means unbounded).
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.ServiceTypeMappingEditor.EndDate">
            <summary>
            The time this mapping is no longer effective (null means unbounded).
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.SiteEditor">
            <summary>
            Utility for altering or creating sites directly in the database.
            Note that creating a site also creates the associated service keys.  TODO: make a separate service key editor.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.SiteEditor.FromId(System.UInt32)">
            <summary> Construct from an existing site id (does not guarentee that the site exists). </summary>
        </member>
        <member name="M:ServerTestFramework.Database.SiteEditor.CreateOrUseExistingId(System.UInt32)">
            <summary> Constructs from an site id, creating the site in the db if it does not already exist. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.SiteEditor.GetGenericSiteProperty``1(System.String,System.String)">
            <summary> Generic implementation of returning a property from an site (or cache if able). </summary>
        </member>
        <member name="M:ServerTestFramework.Database.SiteEditor.SetGenericSiteProperty``1(System.String,System.String,``0)">
            <summary> Generic implementation of setting a property in an site.  The value must be convertible to a string in a way that SQL understands. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.SiteEditor.SetVirtualInterfaceIp(System.String,System.String)">
            <summary> Updates or creates a new row in t_site_virtual_interface_ips.  The KDC service names are special cases: sg=sgsvc ts=sgsvc_xlsp </summary>
        </member>
        <member name="M:ServerTestFramework.Database.SiteEditor.CompletelyRemoveSite">
            <summary> Completely removes the site and its associated service keys from NPDB. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.SiteEditor.Id">
            <summary> Site ID.  This is the only non-cached information we store about the site. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.SiteEditor.Exists">
            <summary> Whether the site actually exists in the db. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.SiteEditor.AuthDataVersion">
            <summary> AuthData version used within the site. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.SiteEditor.Environment">
            <summary> Environment the site is in. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.SiteEditor.Domain">
            <summary> Domain of the site? </summary>
        </member>
        <member name="T:ServerTestFramework.Database.SubscriptionFamilyEditor">
            <summary> Utility for altering or creating subscription families. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.SubscriptionFamilyEditor.GetAllFamilies">
            <summary> Get all families. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.SubscriptionFamilyEditor.FromId(System.Guid)">
            <summary> Construct from a guid (does not guarentee that the family exists). </summary>
        </member>
        <member name="M:ServerTestFramework.Database.SubscriptionFamilyEditor.CreateOrUseExistingId(System.Guid)">
            <summary> Constructs from a guid, creating the subscription family in the db if it does not already exist.  The default is to create a game subscription family and nothing special configured for it. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.SubscriptionFamilyEditor.CreateNew">
            <summary> Creates a new subscription family. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.SubscriptionFamilyEditor.GetGenericProperty``1(System.String)">
            <summary> Generic implementation of returning a property from a table based on guid (or cache if able). </summary>
        </member>
        <member name="M:ServerTestFramework.Database.SubscriptionFamilyEditor.SetGenericProperty``1(System.String,``0)">
            <summary> Generic implementation of setting a property in a table based on guid.  The value must be convertible to a string in a way that SQL understands. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.SubscriptionFamilyEditor.GetTitleIds">
            <summary> Retrieves a list of titles to which the subscription family applies.  Only applicable to game subscription types. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.SubscriptionFamilyEditor.RemoveAllTitleIds">
            <summary> Removes all titles from the list to which the subscription family applies.  Only applicable to game subscription types. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.SubscriptionFamilyEditor.AddTitleId(System.UInt32)">
            <summary> Adds a title to which the subscription family applies if it is not already there.  Only applicable to game subscription types. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.SubscriptionFamilyEditor.Id">
            <summary> Subscription Family ID.  This is the only non-cached information we store about the subscription family. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.SubscriptionFamilyEditor.Exists">
            <summary> Whether the beta group actually exists in the db. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.SubscriptionFamilyEditor.Name">
            <summary> Name of the subscription family. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.SubscriptionFamilyEditor.ServiceType">
            <summary> Service type the subscription family is for. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.SubscriptionFamilyEditor.SubscriptionType">
            <summary> Subscription type the subscription family is for. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.SubscriptionFamilyEditor.TierId">
            <summary> Tier ID the subscription family is for.  Only applicable to base subscription types. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.SubscriptionFamilyEditor.ServicePrivilegeSet">
            <summary> Service-Privilege set id (t_service_privilege_set) granted by this subscription family. </summary>
        </member>
        <member name="T:ServerTestFramework.Database.OfferInstanceSubscriptionFamilyMappingEditor">
            <summary> Utility for associating subscription families with offer instance guids. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.OfferInstanceSubscriptionFamilyMappingEditor.FromId(System.Guid)">
            <summary> Construct from a guid (does not guarentee that the offer instance exists). </summary>
        </member>
        <member name="M:ServerTestFramework.Database.OfferInstanceSubscriptionFamilyMappingEditor.GetSubscriptionFamilies">
            <summary> Retrieves a list of subscription families mapped to this offer instance. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.OfferInstanceSubscriptionFamilyMappingEditor.RemoveAllSubscriptionFamilies">
            <summary> Removes all subscription familys mapped to this offer instance. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.OfferInstanceSubscriptionFamilyMappingEditor.AddSubscriptionFamily(System.Guid)">
            <summary> Adds a subscription family mapping for the offer instance if it is not already there. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.OfferInstanceSubscriptionFamilyMappingEditor.Id">
            <summary> Offer instance guid.  This is the only non-cached information we store about the offer instance guid. </summary>
        </member>
        <member name="T:ServerTestFramework.Database.TitleEditor">
            <summary>
            Utility for altering or creating titles directly in the database.
            At the moment this does not do any actual content/packages/etc for the title, there's currently just enough here for the XKDC to be happy.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.FromId(System.UInt32)">
            <summary>
            Construct from an existing title id (does not guarentee that the title exists).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.CreateOrUseExistingId(System.UInt32)">
            <summary>
            Constructs from a title id, creating the title in the db if it does not already exist.
            Titles created this way initally have a version 0 created for them. (you can remove this version and add different ones if desired)
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.GetAllVersions">
            <summary>
            Returns all versions of a title.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.GetAllVersions(System.Guid)">
            <summary>
            Returns all versions of a title filtered by beta group.
            </summary>
            <param name="BetaGroup">Beta Group to filter</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.RemoveAllVersions">
            <summary>
            Removes all versions for a title.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.RemoveBaseVersion(System.UInt32)">
            <summary> Removes a specific base version of a title. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.AddVersion(System.UInt32,System.UInt32,System.UInt32,System.Byte)">
            <summary>
            Adds a version to a title.
            If the fully entry already exists, the call is ignored.
            If the base version and console type exist but the update/beta version is different, you will get an exception.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.AddVersion(System.UInt32,System.UInt32,System.Byte,System.Guid)">
            <summary>
            Adds a version to a title.
            If the fully entry already exists, the call is ignored.
            If the base version and console type exist but the update/beta version is different, you will get an exception.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.AddVersion(System.UInt32,System.UInt32,System.Byte,System.Guid,System.DateTime,System.DateTime)">
            <summary>
            Adds a version to a title.
            If the fully entry already exists, the call is ignored.
            If the base version and console type exist but the update/beta version is different, you will get an exception.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.RemoveAllUpdatePackages">
            <summary> Removes all update packages for this title. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.AddUpdatePackage(System.UInt32,System.UInt32,System.Byte)">
            <summary> Adds an update package entry with dummy data. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.AddUpdatePackage(System.UInt32,System.UInt32,System.Byte,System.Byte[],System.Byte[],System.UInt32,System.UInt32,System.Byte[])">
            <summary> Adds an update package entry. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.AddUpdatePackage(ServerTestFramework.Database.TitleEditor.TitleUpdatePackageData)">
            <summary> Adds an update package entry. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.GetUpdatePackages(System.UInt32,System.UInt32,System.Byte)">
            <summary> Gets a list of title update packages. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.GetUpdatePackages">
            <summary> Gets a list of all title update packages. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.RemoveAllUpdateLocations">
            <summary> Removes all update locations for this title. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.AddUpdateLocation(System.UInt32,System.UInt32,System.Byte,System.UInt32,System.String)">
            <summary> Adds an update location entry. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.AddUpdateLocation(ServerTestFramework.Database.TitleEditor.TitleUpdateLocationData)">
            <summary> Adds an update location entry. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.GetUpdateLocations(System.UInt32,System.UInt32,System.Byte)">
            <summary> Gets a list of title update locations. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.GetUpdateLocations">
            <summary> Gets a list of all title update locations. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.SetDefaultTitleTrustConstants">
            <summary>
            Adds or updates a title's trust constants to a sane value.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.SetTitleTrustConstants(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Adds or updates a title's trust constants to a specific value.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.RemoveAllAlternateIDs">
            <summary>
            Removes all alt title IDs from a title.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.AddAlternateID(System.UInt32,System.UInt32,System.UInt32,System.UInt32[],System.UInt32[],System.UInt32[])">
            <summary>
            Adds an alternate id to a title (or updates the existing title/region/media entry).  Each region and media can have its own set of alt IDs.  Or 0 means all.
            </summary>
            <param name="xbox1AltTitleId">Used only for xbox1, up to 4 alt IDs can be given.</param>
            <param name="xenonAltService">Used only for xenon and newer.  This is the service that will be remapped to the corresponding entry in xenonAltTitle.  Up to 4 can be given.</param>
            <param name="xenonAltTitle">Used only for xenon and newer.  This is the title mapped to a service in the corresponding entry in xenonAltService.  Up to 4 can be given.</param>
            <param name="liveTitleId">Who knows?  Just set it to 0 for the mainline case, since every entry in prod right now is 0.</param>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.GetAllPrivileges">
            <summary>
            Returns all privileges that the title grants.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.RemoveAllPrivileges">
            <summary>
            Removes all granted privileges from the title.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.AddPrivilege(System.Byte)">
            <summary>
            Adds a privilege granted by the title, if it does not already grant it.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.AddPrivilege(System.Byte,System.Int32)">
            <summary>
            Adds a privilege granted by the title for the specific tier, if it does not already grant it.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.GetAllServices">
            <summary>
            Returns all services that the title grants.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.RemoveAllServices">
            <summary>
            Removes all granted services from the title.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.AddService(System.UInt32)">
            <summary>
            Adds a service granted by the title, if it does not already grant it.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.GetAllOffers">
            <summary>
            Returns all offers that the title provides.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.RemoveAllOffers">
            <summary>
            Removes all allowed offers from the title.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.AddOffer(System.UInt64)">
            <summary>
            Adds an offer allowed by the title, if it does not already allowed for it.
            For xbox360 and PC, if the offer is not in this list for a title, any services and privileges and such will not be applied.
            For xbox1, this is not used.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.SetTitleInfo(System.Byte,System.Boolean)">
            <summary>
            Modifies the t_title_info table
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.GetTitleCultureDetails(System.UInt32)">
            <summary>
            Gets the culture details for the specified culture.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.TitleEditor.SetTitleCultureDetails(ServerTestFramework.Database.TitleEditor.CultureDetails)">
            <summary>
            Sets the culture details for the specified culture.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.TitleEditor.Id">
            <summary>
            Title ID.  This is the only non-cached information we store about the title.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.TitleEditor.Exists">
            <summary>
            Whether the title actually exists in the db.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.TitleEditor.ConsoleType">
            <summary>
            Console type for this title.
            Note that this is ignored by most things, and the type specified in the title version is the real "console type", which allows for multiple platforms on the same title.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.TitleEditor.TitleVersion">
            <summary>
            Represents a specific version path.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.TitleEditor.TitleUpdatePackageData">
            <summary> Represents an update package. </summary>
        </member>
        <member name="T:ServerTestFramework.Database.TitleEditor.TitleUpdateLocationData">
            <summary> Represents a title update packace location </summary>
        </member>
        <member name="T:ServerTestFramework.Database.TitleEditor.CultureDetails">
            <summary>
            Contains the information from t_title_culture_details.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.UserCreationType">
            <summary>
            Type of user to create.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.UserEditor">
            <summary>
            Utility for altering or creating users directly in the database.
            By default gold users are created; you can alter their subscriptions afterwards to change that.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.FromPuid(System.UInt64)">
            <summary>
            Construct from a puid.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.FromPassportPuid(System.Int64)">
            <summary>
            Construct from a passport puid.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.FromGamerTag(System.String)">
            <summary>
            Construct from a gamertag.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.CreateNew">
            <summary>
            Creates a new xbox360 user with a random name.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.CreateNew(ServerTestFramework.Database.UserCreationType)">
            <summary>
            Creates a new user with a random name.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.CreateOrUseExistingGamerTag(System.String)">
            <summary>
            Creates a new xbox360 user or uses an exsting user with a specific name.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.CreateOrUseExistingGamerTag(System.String,ServerTestFramework.Database.UserCreationType)">
            <summary>
            Creates a new user or uses an existing user with a specific name.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.AllocatePuid">
            <summary>
            Allocate a new user puid.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.CreateOrUseExistingGamerTag(System.String,ServerTestFramework.Database.UserCreationType,System.UInt64)">
            <summary>
            Creates a new user or uses an existing user with a specific name.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.CreateOrUseExistingGamerTag(System.String,ServerTestFramework.Database.UserCreationType,System.UInt64,System.UInt64)">
            <summary>
            Creates a new user or uses an existing user with a specific name.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.GenerateRandomGamertag">
            <summary>
            Generates a random gamertag.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.ConnectToLive(System.UInt64,System.DateTime)">
            <summary>
            Connects a user to Live using a machine puid.
            </summary>
            <param name="userPuid"></param>
            <param name="machinePuid"></param>
            <param name="lastSeen">Last time this console was seen.  </param>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.GetGenericUserProperty``1(System.String,System.String,System.String)">
            <summary>
            Generic implementation of returning a property from a table hashed on puid (or cache if able).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.GetGenericGamerTagProperty``1(System.String,System.String,System.String)">
            <summary>
            Generic implementation of returning a property from a table hashed on GamerTag (or cache if able).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.GetGenericNullableGamerTagProperty``1(System.String,System.String,System.String)">
            <summary>
            Generic implementation of returning a property from a table hashed on GamerTag (or cache if able), for columns that may be null.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.GetGenericNullableUserProperty``1(System.String,System.String,System.String)">
            <summary>
            Generic implementation of returning a property from a table hashed on puid (or cache if able), for columns that may be null.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.SetByteGamerTagProperty(System.String,System.String,System.String,System.Byte[])">
            <summary>
            Generic implementation of setting a property in a table hashed on GamerTag.  The value must be convertible to a string in a way that SQL understands.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.SetByteNullableGamerTagProperty(System.String,System.String,System.String,System.Byte[])">
            <summary>
            Generic implementation of setting a property in a table hashed on GamerTag for columns that may be null.  The value must be convertible to a string in a way that SQL understands, or null.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.SetGenericGamerTagProperty``1(System.String,System.String,System.String,``0)">
            <summary>
            Generic implementation of setting a property in a table hashed on GamerTag.  The value must be convertible to a string in a way that SQL understands.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.SetGenericNullableGamerTagProperty``1(System.String,System.String,System.String,System.Nullable{``0})">
            <summary>
            Generic implementation of setting a property in a table hashed on GamerTag for columns that may be null.  The value must be convertible to a string in a way that SQL understands, or null.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.SetGenericUserProperty``1(System.String,System.String,System.String,``0)">
            <summary>
            Generic implementation of setting a property in a table hashed on puid.  The value must be convertible to a string in a way that SQL understands.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.SetGenericNullableUserProperty``1(System.String,System.String,System.String,System.Nullable{``0})">
            <summary>
            Generic implementation of setting a property in a table hashed on puid for columns that may be null.  The value must be convertible to a string in a way that SQL understands, or null.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.CompletelyRemoveUser">
            <summary>
            Completely removes a user from UODB.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.RemoveXenonKey">
            <summary>
            Completely deletes the user's Xbox360 key entry.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.SetXenonPassword(System.Byte[])">
            <summary>
            Set's the users xenon key, which is 16 bytes long.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.SetXenonPPA2(System.Byte[])">
            <summary>
            Set's the user's xenon key's ppa2 entry, which is 8 bytes long.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.SetXenonSPPA1(System.Byte[])">
            <summary>
            Set's the user's xenon key's sppa1 entry, which is 20 bytes long.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.RemoveXbox1Key">
            <summary>
            Completely deletes the user's Xbox1 key entry.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.SetXbox1Password(System.Byte[])">
            <summary>
            Set's the users xbox1 key, which is 16 bytes long.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.SetXbox1PPA2(System.Byte[])">
            <summary>
            Set's the user's xbox1 key's ppa2 entry, which is 8 bytes long.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.SetXbox1SPPA1(System.Byte[])">
            <summary>
            Set's the user's xbox1 key's sppa1 entry, which is 20 bytes long.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.UnlinkAllPassports">
            <summary>
            Removes all passports that are linked to this user.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.LinkPassport(System.UInt64)">
            <summary>
            Links a passport puid to this user (if not already linked).
            This is required before a user can be used for the Askdc's Panorama authentication.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.IsLinkedToPassport(System.UInt64)">
            <summary>
            Returns whether the user is currently linked to a specific passport.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.GetAllPrivilegeGrants">
            <summary>
            Retrieves all privileges specially granted to a user.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.RemoveAllPrivilegeGrants">
            <summary>
            Removes all privilege grants from a user.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.AddPrivilegeGrant(System.Byte)">
            <summary>
            Adds a special privilege grant to a user, if they do not already have it.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.AddPrivilegeGrants(System.Byte[])">
            <summary>
            Adds a lost of special privilege grants to a user, if they do not already have them.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.GetAllPrivilegeRestrictions">
            <summary>
            Retrieves a list of all privileges that a user is specially restricted from.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.RemoveAllPrivilegeRestrictions">
            <summary>
            Removes all privilege restrictions from a user.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.AddPrivilegeRestriction(System.Byte)">
            <summary>
            Adds a special privilege restriction to a user, if they do not already have it.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.AddPrivilegeRestrictions(System.Byte[])">
            <summary>
            Adds a list of special privilege restrictions to a user, if they do not already have them.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.AddPurchasedLicense(System.UInt64,System.UInt64)">
            <summary>
            Adds a purchased license to a user.  TODO: If they already have the license this will throw.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.RemoveAllSubscriptions(System.Boolean)">
            <summary>
            Removes all subscriptions from a user, optionally not removing base subscriptions (which are required to sign in)
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.AddSubscription(System.UInt64,System.UInt32,System.String,System.DateTime,System.DateTime,System.UInt32,System.UInt32)">
            <summary>
            Adds a subscription to a user.  Obsolete.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.AddSubscription(System.UInt64)">
            <summary>
            Adds a valid non-expired subscription to a user using some sane defaults.  If they already have an exact pk match, this will throw.  Obsolete.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.AddSubscription(System.Guid,System.Guid,System.UInt64,System.UInt32,System.String,System.DateTime,System.DateTime,System.UInt32,System.UInt32,System.Nullable{System.UInt64})">
            <summary> Adds or updates a subscription to a user. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.AddSubscription(System.Guid,System.Guid,System.UInt64)">
            <summary> Adds or updates a valid non-expired subscription to a user using some sane defaults. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.AddBaseSubscription(ServerTestFramework.Database.BaseSubscriptions)">
            <summary> Adds a base subscription to a user for a specific type.  This is no different than AddSubscription, except you don't need to know the offer id </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.AddBaseSubscription(ServerTestFramework.Database.BaseSubscriptions,System.UInt32,System.String,System.DateTime,System.DateTime,System.UInt32,System.UInt32,System.Nullable{System.UInt64})">
            <summary> Adds a base subscription to a user for a specific type.  This is no different than AddSubscription, except you don't need to know the offer id </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.SetUserTitleTrustRating(System.UInt32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Set's the users trust rating stats for a specific title.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.RemoveAllPerServiceTypeData">
            <summary>
            Removes all privilege grants from a user.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserEditor.AddPerServiceTypeDate(System.Byte,System.DateTime,System.DateTime,System.DateTime,System.Nullable{System.DateTime},System.Int32,System.Nullable{System.DateTime})">
            <summary>
            Adds per service type data to a user.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.Puid">
            <summary>
            Passport User ID.  This is the only non-cached information we store about the user.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.Exists">
            <summary>
            Whether the user actually exists in the db.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.HashBucket">
            <summary>
            Hash bucket the user lives in.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.Gamertag">
            <summary>
            Gamertag.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.OwnerPuid">
            <summary>
            User's owner's puid.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.MachinePuid">
            <summary>
            Machine puid user was created on.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.OfflineXuid">
            <summary>
            User's offline xuid.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.Birthdate">
            <summary>
            Date of birth.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.CountryId">
            <summary>
            Country Id.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.LanguageId">
            <summary>
            Language Id.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.CultureId">
            <summary>
            Culture Id.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.ExtraTicketFlags">
            <summary>
            Extra kdc ticket flags for the user.  Supposedly not currently used.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.BannedUntilDate">
            <summary>
            If the current date is before this date, the user is considered banned.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.PerServiceBannedUntilDate">
            <summary>
            If the current date is before this date, the user is considered banned (per service).
            </summary>
            <remarks>
            This won't work properly if the user has multiple per service entries.
            Cross that bridge when its needed though.
            </remarks>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.VoiceBannedUntilDate">
            <summary>
            If the current date is before this date, the user is not allowed to use voice communications.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.NameChangeRequired">
            <summary>
            Whether the user is required to change their name on the next login.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.OwnerWLIDInvalid">
            <summary>
            Whether the user's WLID is invalid and user must be prompted to change WLID at logon.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.UserWLIDInvalid">
            <summary>
            Whether the user's owner WLID is invalid and user must be prompted to change WLID at logon.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.CreatedDate">
            <summary>
            Date the user was created.  Users created on an older version of the service may have null in this field.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.CreatedAccountType">
            <summary>
            Type of account the user was originally created as (0=Xbox1, 1=Xbox.com, 2=Xbox 360)
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.CurrentAccountType">
            <summary>
            Current type of the account (0=Xbox1, 1=Xbox.com, 2=Xbox 360)
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.ResetDate">
            <summary>
            Date the account key was last reset.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.AcceptedTOSDate">
            <summary>
            The date the user last accepted the terms of service.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.ProvisionedDate">
            <summary>
            The date that the user was provisioned.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.BillingAccountStatus">
            <summary>
            Billing account status.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.XenonMigrationDate">
            <summary>
            Date that the user migrated from xbox1 to xbox360.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.AllowXbox1Login">
            <summary>
            Part of parental controls.  Whether the user is allowed to play xbox1 games online.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.ParentalControlGroup">
            <summary>
            Part of parental controls.  (0=open, 1=medium, 2=restricted)
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.UserPassportPuid">
            <summary>
            User's passport puid.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.OwnerPassportPuid">
            <summary>
            Owner's passport puid (compared against the user's to determine if they are an adult).
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.XenonEncKeyVersion">
            <summary>
            Users Key version from t_xenon_user_keys.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.XenonKeyVersion">
            <summary>
            Users Key version from t_xenon_user_keys.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.XenonIv">
            <summary>
            Users IV from t_xenon_user_keys.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.XenonEncKey">
            <summary>
            Users Encrypted Key from t_xenon_user_keys.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.XenonPpa2">
            <summary>
            Users PPA2 data from t_xenon_user_keys.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.XenonSppa1">
            <summary>
            Users PPA2 data from t_xenon_user_keys.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.XenonHashBucket">
            <summary>
            Users Hash Bucket data from t_xenon_user_keys.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.XenonLastChanged">
            <summary>
            Users Hash Bucket data from t_xenon_user_keys.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.XenonKey">
            <summary>
            User's xenon key, decrypted with the environment's kek.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.XboxEncKeyVersion">
            <summary>
            Users Key version from t_user_keys.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.XboxKeyVersion">
            <summary>
            Users Key version from t_user_keys.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.XboxIv">
            <summary>
            Users IV from t_user_keys.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.XboxEncKey">
            <summary>
            Users Encrypted Key from t_user_keys.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.XboxPpa2">
            <summary>
            Users PPA2 data from t_user_keys.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.XboxSppa1">
            <summary>
            Users PPA2 data from t_user_keys.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.XboxHashBucket">
            <summary>
            Users Hash Bucket data from t_user_keys.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.XboxLastChanged">
            <summary>
            Users Hash Bucket data from t_user_keys.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserEditor.XboxKey">
            <summary>
            User's xbox1 key, decrypted with the environment's kek.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Database.BaseSubscriptions">
            <summary>
            Types to be passed to UserEditor's AddBaseSubscription.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserGamertagHistoryEditor.RemoveAllHistory">
            <summary> Removes all gamertag history for this User. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserGamertagHistoryEditor.SetHistory(ServerTestFramework.Database.UserGamertagHistoryEditor.UserGamertagHistoryEntry)">
            <summary> Adds or updates a history entry for this User. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserGamertagHistoryEditor.GetAllHistory">
            <summary> Retrieves all history for this User. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserGamertagHistoryEditor.GetAllHistoryForGamertag(System.String,System.Boolean)">
            <summary> Retrieves all history for this User. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserGamertagHistoryEditor.UserPuid">
            <summary> User Puid.  This is the only non-cached information we store about the User's gamertag history. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserMachineHistoryEditor.GetGenericHistoryProperty``1(System.String)">
            <summary> Generic implementation of returning a property from an site (or cache if able). </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserMachineHistoryEditor.SetGenericHistoryProperty``1(System.String,``0)">
            <summary> Generic implementation of setting a property in an site.  The value must be convertible to a string in a way that SQL understands. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserMachineHistoryEditor.GetGenericNullableHistoryProperty``1(System.String)">
            <summary> Generic implementation of returning a property from a table hashed on puid (or cache if able), for columns that may be null. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserMachineHistoryEditor.GetGenericNullableStringHistoryProperty(System.String)">
            <summary> Generic implementation of returning a property from a table hashed on puid (or cache if able), for columns that may be null. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserMachineHistoryEditor.SetGenericNullableHistoryProperty(System.String,System.Object)">
            <summary> Generic implementation of setting a property in a table hashed on puid for columns that may be null.  The value must be convertible to a string in a way that SQL understands, or null. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserMachineHistoryEditor.Exists">
            <summary> Whether the row actually exists in the db. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserPassportHistoryEditor.RemoveAllHistory">
            <summary> Removes all Passport history for this machine. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserPassportHistoryEditor.SetHistory(ServerTestFramework.Database.UserPassportHistoryEditor.UserPassportHistoryEntry)">
            <summary> Adds or updates a history entry for this user. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserPassportHistoryEditor.GetAllHistory">
            <summary> Retrieves all history for this user. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserPassportHistoryEditor.UserPuid">
            <summary> User Puid.  This is the only non-cached information we store about the user's Passport history. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserRecoveryHistoryEditor.RemoveAllHistory">
            <summary> Removes all Recovery history for this user. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserRecoveryHistoryEditor.SetHistory(ServerTestFramework.Database.UserRecoveryHistoryEditor.UserRecoveryHistoryEntry)">
            <summary> Adds or updates a history entry for this user. </summary>
        </member>
        <member name="M:ServerTestFramework.Database.UserRecoveryHistoryEditor.GetAllHistory">
            <summary> Retrieves all history for this user. </summary>
        </member>
        <member name="P:ServerTestFramework.Database.UserRecoveryHistoryEditor.UserPuid">
            <summary> User Puid.  This is the only non-cached information we store about the user's recovery history. </summary>
        </member>
        <member name="T:ServerTestFramework.Database.VirtualInterfaceEditor">
            <summary>
            Utility for altering or creating virtual interfaces directly in the database.
            NOTE: Be careful using this, modifying an existing virtual interface is not to be done lightly.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.VirtualInterfaceEditor.FromName(System.String)">
            <summary>Construct from an existing virtual interface name (does not guarantee that the virtual interface exists).</summary>
        </member>
        <member name="M:ServerTestFramework.Database.VirtualInterfaceEditor.CreateOrOverwrite(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Constructs from a virtual interface definition, creating the virtual interface in the database
            if it does not already exist or overwriting all values if it does.  KNOW WHAT YOU ARE DOING IF YOU USE THIS!
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.VirtualInterfaceEditor.Delete">
            <summary>Completely removes the virtual interface from the database.</summary>
        </member>
        <member name="M:ServerTestFramework.Database.VirtualInterfaceEditor.GetGenericProperty``1(System.String)">
            <summary>Generic implementation of returning a property from a virtual interface (or cache if able).</summary>
        </member>
        <member name="M:ServerTestFramework.Database.VirtualInterfaceEditor.GetGenericProperty``1(System.String,System.String)">
            <summary>Generic implementation of returning a property from a virtual interface (or cache if able).</summary>
        </member>
        <member name="M:ServerTestFramework.Database.VirtualInterfaceEditor.SetGenericProperty``1(System.String,``0)">
            <summary>Generic implementation of setting a property of a virtual interface.  The value must be convertible to a string in a way that SQL understands.</summary>
        </member>
        <member name="M:ServerTestFramework.Database.VirtualInterfaceEditor.SetGenericProperty``1(System.String,System.String,``0)">
            <summary>Generic implementation of setting a property of a virtual interface.  The value must be convertible to a string in a way that SQL understands.</summary>
        </member>
        <member name="M:ServerTestFramework.Database.VirtualInterfaceEditor.SetVirtualInterfaceIp(System.String)">
            <summary>Updates or creates a new row in t_site_virtual_interface_ips.</summary>
        </member>
        <member name="M:ServerTestFramework.Database.VirtualInterfaceEditor.AddOrUpdateXrl(System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Adds or updates an xrl.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.VirtualInterfaceEditor.DeleteXrl(System.String)">
            <summary>
            Deletes the specified xrl from the virtual interface.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.VirtualInterfaceEditor.FormatNullable``1(System.Nullable{``0})">
            <summary>Formats a nullable type for a SQL statement.</summary>
        </member>
        <member name="M:ServerTestFramework.Database.VirtualInterfaceEditor.FormatString(System.String)">
            <summary>Formats a string for a SQL statement.</summary>
        </member>
        <member name="M:ServerTestFramework.Database.VirtualInterfaceEditor.FormatBool(System.Boolean)">
            <summary>Formats a bool for a SQL statement.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.VirtualInterfaceEditor.Name">
            <summary>The virtual interface's name.</summary>
            <remarks>This is the only non-cached information we store.</remarks>
        </member>
        <member name="P:ServerTestFramework.Database.VirtualInterfaceEditor.Exists">
            <summary>Whether the virtual interface actually exists in the database.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.VirtualInterfaceEditor.Interface">
            <summary>Interface that the virtual interface implements.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.VirtualInterfaceEditor.Port">
            <summary>Port of the virtual interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.VirtualInterfaceEditor.PortEnd">
            <summary>End port of the virtual interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.VirtualInterfaceEditor.VDir">
            <summary>VDir of the virtual interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.VirtualInterfaceEditor.WebstoreApp">
            <summary>Webstore app of the virtual interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.VirtualInterfaceEditor.Timeout">
            <summary>Timeout of the virtual interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.VirtualInterfaceEditor.InternetPort">
            <summary>Internet port of the virtual interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.VirtualInterfaceEditor.InternetPortEnd">
            <summary>End internet port of the virtual interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.VirtualInterfaceEditor.Info1">
            <summary>Info1 of the virtual interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.VirtualInterfaceEditor.Info2">
            <summary>Info2 of the virtual interface.</summary>
        </member>
        <member name="P:ServerTestFramework.Database.VirtualInterfaceEditor.EscapedName">
            <summary>The Name, escaped.</summary>
        </member>
        <member name="T:ServerTestFramework.Database.VoucherEditor">
            <summary>
            Utility for altering or creating Vouchers directly in the database.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.VoucherEditor.FromHash(System.Byte[],System.UInt64)">
            <summary>
            Construct from an existing Voucher hash (does not guarentee that the Voucher exists).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.VoucherEditor.FromToken(System.String,System.UInt64)">
            <summary>
            Construct from an existing 5x5 token (does not guarentee that the Voucher exists).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.VoucherEditor.CreateOrUseExistingHash(System.Byte[],System.UInt64)">
            <summary>
            Constructs from an Voucher hash, creating the Voucher in the db if it does not already exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.VoucherEditor.CreateOrUseExistingToken(System.String,System.UInt64)">
            <summary>
            Constructs from a 5x5 token, creating the Voucher in the db if it does not already exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.VoucherEditor.CreateNew(System.UInt64)">
            <summary>
            Creates a new voucher with a random hash.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.VoucherEditor.GetGenericVoucherProperty``1(System.String,System.String)">
            <summary>
            Generic implementation of returning a property from an Voucher (or cache if able).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Database.VoucherEditor.SetGenericVoucherProperty``1(System.String,System.String,``0)">
            <summary>
            Generic implementation of setting a property in an Voucher.  The value must be convertible to a string in a way that SQL understands.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.VoucherEditor.Hash">
            <summary>
            Voucher Hash (20 bytes).  This is and the offer id are the only non-cached information we store about the voucher.
            Note that the hash is one way - you can't go backwards from the hash to the user string.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.VoucherEditor.OfferId">
            <summary>
            OfferId for the voucher.  This and the hash are the only non-cached information we store about the voucher.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.VoucherEditor.Exists">
            <summary>
            Whether the Voucher actually exists in the db.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.VoucherEditor.UseCount">
            <summary>
            Number of times the voucher can be used (-1 = unlimited).
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.VoucherEditor.Status">
            <summary>
            Voucher's status.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.VoucherEditor.InScg">
            <summary>
            Whether it is in scg, whatever that is, I guess.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.VoucherEditor.ConsoleVersion">
            <summary>
            Console version (type?).
            </summary>
        </member>
        <member name="P:ServerTestFramework.Database.VoucherEditor.HashBucket">
            <summary>
            Hash bucket for the voucher.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Achievement.AchivementBase">
            <summary>
            Summary description for AchievementBase.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserSettings.PCBase">
            <summary>
            Summary description for Pcontrol.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Achievement.XRLClearAchievement">
            <summary>
            Summary description for XRLClearAchievement.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Achievement.XRLSyncAchievements">
            <summary>
            Summary description for XRLSyncAchievements.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.AvatarAsset.XRLSyncAvatarAssets">
            <summary>
            Summary description for XRLSyncAvatarAssets.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserSettings.TestUSetting">
             <summary>
             Summary description for DBHelper.
             </summary>
            
        </member>
        <member name="T:ServerTestFramework.LiveService.UserSettings.TitleClearRequest">
            <summary>
            Summary description for XRLClearTitle.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserSettings.EnumTitlesRequest">
            <summary>
            Summary description for XRLEnumTitle.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserSettings.SettingIds">
            <summary>
            Summary description for XRLReadSettings.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserSettings.XRLSyncAllRequest">
            <summary>
            Summary description for XRLSyncAll.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserSettings.SyncAllResponse">
            <summary>
            SyncSettingsResponse
            </summary>
            <param name="Version">Version</param>
            <param name="SettingsLen">Count of settings</param>
            <param name="Settings">User settings collection</param>
            <remarks>
            Returned in response to SyncSettingsRequest
            </remarks>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserSettings.ValidateAvatarManifestRequest">
            <summary>
            XRLValidateAvatarManifest
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserSettings.ValidateAvatarManifestResponse">
            <summary>
            ValidateAvatarManifestResponse
            </summary>  
        </member>
        <member name="T:ServerTestFramework.LiveService.UserSettings.SyncSettingsRequest">
            <summary>
            Summary description for XRLSyncSettings.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Alerts.AlertsListener">
            <summary>
            MSN Alerts backend simulator
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Alerts.AlertsListener.aRE">
            <summary>
            Auto reset event for triggering gets from hash table to wakeup
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Alerts.AlertsListener.ht">
            <summary>
            Hash table that stores alert data or alert counts
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Alerts.AlertsListener.isStress">
            <summary>
            Running in stress mode?  Depends on constructor used
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Alerts.AlertsListener.CounterCategory">
            <summary>
            Performance counter category
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsListener.#ctor(System.Int32,ServerTestFramework.Database.CPUIDList)">
            <summary>
            Constructor for functional tests
            </summary>
            <param name="listenPort"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsListener.#ctor(System.Int32,System.UInt64,System.UInt64)">
            <summary>
            Constructor for stress
            </summary>
            <param name="listenPort"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsListener.GetAlertData(System.UInt64,ServerTestFramework.LiveService.Alerts.AlertsListener.AlertData@,System.TimeSpan)">
            <summary>
            Gets alert data stored in hashtable (functional tests)
            </summary>
            <param name="puid"></param>
            <param name="ad"></param>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsListener.PeekAlertData(System.UInt64,ServerTestFramework.LiveService.Alerts.AlertsListener.AlertData@,System.TimeSpan)">
            <summary>
            Peek at alert data stored in hashtable (functional tests)
            </summary>
            <param name="puid"></param>
            <param name="ad"></param>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsListener.ProcessData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Consumes incoming alerts soap requests and stores data based on test mode
            </summary>
            <param name="reqData"></param>
            <param name="index"></param>
            <param name="contentLen"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsListener.Go">
            <summary>
            Start the listener
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsListener.Stop">
            <summary>
            Stop that closes socket so that thread abort exception will trigger
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Alerts.AlertsListener.AlertData">
            <summary>
            Functional tests store Alert Data in Hashtable
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Alerts.AlertsSQL">
            <summary>
            Access object for Alerts SQL databases xboxNSMain and xboxAlerts.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Alerts.AlertsSQL.c_instanceDB">
            <summary>
            Alerts databases
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Alerts.AlertsSQL.m_instanceConnection">
            <summary>
            Database connection instances
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Alerts.AlertsSQL.m_ServerName">
            <summary>
            Name of physical box that alerts databases reside on
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.Finalize">
            <summary>
            Destructor ensures that database connection is closed
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.FormatSubscriberId(System.UInt64)">
            <summary>
            Formats a subscriber id ulong into 0x########:0x########
            </summary>
            <param name="subscriberId"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.ConnectToServer(System.String)">
            <summary>
            Open connections to Alerts databases
            </summary>
            <param name="_ServerName"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.Close">
            <summary>
            Close connections to Alerts databases
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.NSGetProtocols(System.String[]@,System.String[]@,System.String[]@)">
            <summary>
            Stored procedure wrapper for NSGetProtocols
            </summary>
            <param name="protocolName"></param>
            <param name="className"></param>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.NSInsertProtocol(System.String,System.String,System.String)">
            <summary>
            Stored procedure wrapper for NSInsertProtocols
            </summary>
            <param name="protocolName"></param>
            <param name="className"></param>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.NSUpdateProtocol(System.String,System.String,System.String)">
            <summary>
            Stored procedure wrapper for NSUpdateProtocol
            </summary>
            <param name="protocolName"></param>
            <param name="className"></param>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.NSDeleteProtocol(System.String)">
            <summary>
            Stored procedure wrapper for NSDeleteProtocol
            </summary>
            <param name="protocolName"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.NSGetDeliveryChannels(System.String[]@,System.String[]@)">
            <summary>
            Stored procedure wrapper for NSGetDeliveryChannels
            </summary>
            <param name="deliveryChannelName"></param>
            <param name="protocolName"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.NSInsertDeliveryChannel(System.String,System.String)">
            <summary>
            Stored procedure wrapper for NSInsertDeliveryChannel
            </summary>
            <param name="deliveryChannelName"></param>
            <param name="protocolName"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.NSUpdateDeliveryChannel(System.String,System.String)">
            <summary>
            Stored procedure wrapper for NSUpdateDeliveryChannel
            </summary>
            <param name="deliveryChannelName"></param>
            <param name="protocolName"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.NSDeleteDeliveryChannel(System.String)">
            <summary>
            Stored procedure wrapper for NSDeleteDeliveryChannel
            </summary>
            <param name="deliveryChannelName"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.NSGetDeliveryChannelArguments(System.String,System.String[]@,System.String[]@)">
            <summary>
            Stored procedure wrapper for NSGetDeliveryChannelArguments
            </summary>
            <param name="deliveryChannelName"></param>
            <param name="argumentName"></param>
            <param name="argumentValue"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.GetDeliveryChannelArgumentValue(System.String,System.String,System.String@)">
            <summary>
            Calls NSDeliveryChannelArguments store procedure and then retrieves the value for the named argument
            </summary>
            <param name="deliveryChannelName"></param>
            <param name="argumentName"></param>
            <param name="argumentValue"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.NSInsertDeliveryChannelArgument(System.String,System.String,System.String)">
            <summary>
            Stored procedure wrapper for NSInsertDeliveryChannelArgument
            </summary>
            <param name="deliveryChannelName"></param>
            <param name="argumentName"></param>
            <param name="argumentValue"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.NSUpdateDeliveryChannelArgument(System.String,System.String,System.String)">
            <summary>
            Stored procedure wrapper for NSUpdateDeliveryChannelArgument
            </summary>
            <param name="deliveryChannelName"></param>
            <param name="argumentName"></param>
            <param name="argumentValue"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.NSDeleteDeliveryChannelArguments(System.String)">
            <summary>
            Stored procedure wrapper for NSDeleteDeliveryChannelArguments
            </summary>
            <param name="deliveryChannelName"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.NSGetEvents(System.Int32[]@,System.String[]@,System.String[]@)">
            <summary>
            Stored procedure wrapper for NSGetEvents
            </summary>
            <param name="type"></param>
            <param name="locale"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.NSGetSubscribers(System.UInt64,System.Boolean@)">
            <summary>
            Stored procedure wrapper for NSGetSubscribers
            </summary>
            <param name="subscriberId"></param>
            <param name="enabled"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.NSInsertSubscriber(System.UInt64,System.Boolean)">
            <summary>
            Stored procedure wrapper for NSInsertSubscribers
            </summary>
            <param name="subscriberId"></param>
            <param name="enabled"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.NSUpdateSubscriber(System.UInt64,System.Boolean)">
            <summary>
            Stored procedure wrapper for NSUpdateSubscriber
            </summary>
            <param name="subscriberId"></param>
            <param name="enabled"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.NSDeleteSubscriber(System.UInt64)">
            <summary>
            Stored procedure wrapper for NSDeleteSubscriber
            </summary>
            <param name="subscriberId"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.NSGetSubscriberDevices(System.UInt64,System.String[]@,System.String[]@,System.String[]@,System.String[]@)">
            <summary>
            Stored procedure wrapper for NSGetSubscriberDevices
            </summary>
            <param name="subscriberId"></param>
            <param name="deviceName"></param>
            <param name="deviceTypeName"></param>
            <param name="deviceAddress"></param>
            <param name="deliveryChannelName"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.NSInsertSubscriberDevice(System.UInt64,System.String,System.String,System.String)">
            <summary>
            Stored procedure wrapper for NSInsertSubscriberDevice
            </summary>
            <param name="subscriberId"></param>
            <param name="deviceName"></param>
            <param name="deviceTypeName"></param>
            <param name="deliveryChannelName"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.NSUpdateSubscriberDevice(System.UInt64,System.String,System.String,System.String)">
            <summary>
            Stored procedure wrapper for NSUpdateSubscriberDevice
            </summary>
            <param name="subscriberId"></param>
            <param name="deviceName"></param>
            <param name="deviceTypeName"></param>
            <param name="deliveryChannelName"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.NSDeleteSubscriberDevice(System.UInt64,System.String)">
            <summary>
            Stored procedure wrapper for NSDeleteSubscriberDevice
            </summary>
            <param name="subscriberId"></param>
            <param name="deviceName"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.NSInsertxLiveSubscriptionsSubscription(System.Boolean,System.UInt32,System.String,System.UInt64,System.String,System.String,System.UInt64,System.UInt64@)">
            <summary>
            Stored procedure wrapper for NSInsertxLiveSubscriptionsSubscription
            </summary>
            <param name="enabled"></param>
            <param name="type"></param>
            <param name="deviceName"></param>
            <param name="subscriberXUID"></param>
            <param name="subscriber"></param>
            <param name="subscriberLocale"></param>
            <param name="subscriberId"></param>
            <param name="subscriptionId"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.NSInsertxContentSubscriptionsSubscription(System.Boolean,System.Int32,System.String,System.String,System.UInt64,System.UInt64@)">
            <summary>
            Stored procedure wrapper for NSInsertxContentSubscriptionsSubscription
            </summary>
            <param name="enabled"></param>
            <param name="type"></param>
            <param name="deviceName"></param>
            <param name="subscriberLocale"></param>
            <param name="subscriberId"></param>
            <param name="subscriptionId"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.AddContentEvent(System.Int32,System.String,System.String,System.DateTime)">
            <summary>
            Adds a content event to the DB through batch system
            </summary>
            <param name="type"></param>
            <param name="locale"></param>
            <param name="message"></param>
            <param name="deliveryTime"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.AddTitleEvent(System.UInt32,System.String,System.String)">
            <summary>
            Adds a title event to the DB through batch system
            </summary>
            <param name="titleId"></param>
            <param name="locale"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.GetTitle(System.UInt32,System.String,System.String@)">
            <summary>
            Gets data for a title
            </summary>
            <param name="titleId"></param>
            <param name="titleLocale"></param>
            <param name="titleName"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.SetTitle(System.UInt32,System.String,System.String)">
            <summary>
            Sets data for a title
            </summary>
            <param name="titleId"></param>
            <param name="titleLocale"></param>
            <param name="titleName"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.DeleteTitle(System.UInt32)">
            <summary>
            Deletes data about a title
            </summary>
            <param name="titleId"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.DeleteSubscriberDevices(System.String)">
            <summary>
            Delete all subscriber devices that match deviceName
            </summary>
            <param name="deviceName"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.AlterNSCreatexNotificationsDistributorWorkItems(System.String)">
            <summary>
            Dynamically rewrites stored procedures that distributor uses to create work items with new delivery channel
            Specifically NSCreatexLiveNotificationsDistributorWorkItems and NSCreatexContentNotificationsDistributorWorkItems
            </summary>
            <param name="deliveryChannel"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.GetStoredProcedureText(System.Data.SqlClient.SqlConnection,System.String,System.String@)">
            <summary>
            Gets the text of a stored procedure
            </summary>
            <param name="conn"></param>
            <param name="sprocName"></param>
            <param name="sprocText"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.AlterNSCreatexNotificationsDistributorWorkItemsText(System.String@,System.String)">
            <summary>
            Helper method for updating NSCreatexContentNotificationsDistributorWorkItems
            </summary>
            <param name="sprocText"></param>
            <param name="deliveryChannel"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.ExecuteNonQuery(System.String)">
            <summary>
            Helper method for executing non queries
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQL.GetUTCDate">
            <summary>
            Get the SQL server UTC Date
            </summary>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Alerts.AlertsSQLNS">
            <summary>
            Access object for Alerts SQLNS service
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Alerts.AlertsSQLNS.serviceName">
            <summary>
            Service name
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Alerts.AlertsSQLNS.m_serverName">
            <summary>
            Remote server name
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Alerts.AlertsSQLNS.m_sc">
            <summary>
            Service control object
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQLNS.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="serverName"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.AlertsSQLNS.Restart">
            <summary>
            Restart the service
            </summary>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Alerts.XEvents">
            <summary>
            Wiredata for sending Alerts.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Alerts.XEvents.localClient">
            <summary>
            System.Net.Sockets.UdpClient override to expose socket's client 
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Alerts.XEvents.unicodeEnc">
            <summary>
            Used for unicode string conversions
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Alerts.XEvents.fDisconnectAfterTransmit">
            <summary>
            Controls whether the connection to the xevent service is dropped after each udp transmit
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Alerts.XEvents.titleId">
            <summary>
            Serialized WireData
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.XEvents.Finalize">
            <summary>
            Destructor ensures connectioned is dropped during garbage collection at least.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.XEvents.UnInitialize">
            <summary>
            Call this when you are done with the object
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.XEvents.Connect(System.Net.IPEndPoint)">
            <summary>
            Connects to an endpoint or switches endpoints on the fly
            </summary>
            <param name="endPoint"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.XEvents.Disconnect">
            <summary>
            Disconnects from and endpoint
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.XEvents.Execute">
            <summary>
            Serialize data to wire with default STF XEvent server
            </summary>
            <returns>
            Success or Failure
            </returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.XEvents.Execute(ServerTestFramework.LiveService.LiveServer)">
            <summary>
            Serialize data to wire
            </summary>
            <param name="sServer">
            LiveServer object to server target
            </param>
            <returns>
            Success or failure
            </returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Alerts.XEvents.Execute(System.Net.IPEndPoint)">
            <summary>
            Serialize data to wire
            </summary>
            <param name="endPoint">
            IPEndPoint object to server target
            </param>
            <returns>
            Success or failure
            </returns>
        </member>
        <member name="P:ServerTestFramework.LiveService.Alerts.XEvents.Recipients">
            <summary>
            Accessor: sets recipients and zeros out length for re-serialization
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Alerts.XEvents.Data">
            <summary>
            Accessor: converts standard string into unicode; then stores it for serialization.  Zero's out length for re-serialization.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Alerts.XEvents.SenderGamertag">
            <summary>
            Accessor: sets gamertag and zeros out length for re-serialization
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Alerts.XEvents.Types">
            <summary>
            Alert Types
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Alerts.XEventsRecipients">
            <summary>
            Wiredata portion for recipients of alert
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.ActiveAuthException">
            <summary>
            Exceptions thrown by the ActiveAuthClient itself.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.ActiveAuthHttpConfig">
            <summary>
            For handling configuration/settings for activeauth.
            Requires Npdb access.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ActiveAuthHttpConfig.SetPolicyEntry(System.String,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Updates or adds a policy entry to npdb for the module (t_activeauth_policies)
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ActiveAuthHttpConfig.SetPolicyEntry(ServerTestFramework.LiveService.Auth.ActiveAuthHttpConfig.PolicyEntry)">
            <summary>
            Updates or adds a policy entry to npdb for the module (t_activeauth_policies)
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ActiveAuthHttpConfig.SetPolicyEntry_SQL(ServerTestFramework.LiveService.Auth.ActiveAuthHttpConfig.PolicyEntry)">
            <summary>
            Creates the SQL for updating/adding the policy entry.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ActiveAuthHttpConfig.GetPolicyEntry(System.String)">
            <summary>
            Retrieves a policy entry from npdb, given the path that it applies to
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ActiveAuthHttpConfig.GetPolicyEntry(System.String,System.String)">
            <summary>
            Retrieves a policy entry from npdb, given the path that it applies to
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ActiveAuthHttpConfig.GetPolicyEntry(System.String,System.String,System.String)">
            <summary>
            Retrieves a policy entry from npdb, given the path that it applies to
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ActiveAuthHttpConfig.RemovePolicyEntry(System.String)">
            <summary>
            Removes a policy entry from npdb.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ActiveAuthHttpConfig.RemovePolicyEntry(System.String,System.String)">
            <summary>
            Removes a policy entry from npdb.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ActiveAuthHttpConfig.RemovePolicyEntry(System.String,System.String,System.String)">
            <summary>
            Removes a policy entry from npdb.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ActiveAuthHttpConfig.AAModuleReload">
            <summary>
            Does an xmgmtc reload command on aamodule (to cause the policies to be reloaded)
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.ActiveAuthHttpConfig.PolicyEntry">
            <summary>
            Represents an entry in npdb's t_activeauth_policies.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.ActiveAuthHttpConfig.PolicyEntry.RequiresXuid">
            <summary>If true, the passport user must map to a valid XUID (requires AuthRequired to be true).</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.ActiveAuthHttpConfig.PolicyEntry.Throttle">
            <summary>If true, throttling is enabled.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.ActiveAuthHttpConfig.PolicyEntry.ThrottleHalflifeSeconds">
            <summary>Throttle halflife in seconds.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.ActiveAuthHttpConfig.PolicyEntry.ThrottleThreshold">
            <summary>Throttle threshold.</summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.ActiveAuthHttpClient">
            <summary>
            For making actual requests through the activeauth gateway.
            Can run from anywhere that has idcrl set up corectly.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ActiveAuthHttpClient.CheckMinimalResponseHeaders(ServerTestFramework.Utilities.HttpClient.Response)">
            <summary>
            Validates that there are no unacceptable duplicate headers.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ActiveAuthHttpClient.CheckWLIDHeader(ServerTestFramework.Utilities.HttpClient.Response)">
            <summary>
            Validates that a WWW-Authenticate: WLID1.0 header contains valid fields.
            Returns the parsed WLID fields.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ActiveAuthHttpClient.ParseWLIDHeader(System.String)">
            <summary>
            WWW-Authenticate value to extract the WLID1.0 parameters
            example: WLID1.0 realm="WindowsLive", fault="0x00000000", policy="mbi", ver="4.0.1532.0"
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ActiveAuthHttpClient.GetPageResponse(System.String)">
            <summary>
            Uses GET method to retrieve a page.  Gets a passport ticket and uses WLID1.0 auth if needed and able.
            </summary>
            <param name="uri">example: /somewhere/page.html</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ActiveAuthHttpClient.PostPageRequest(System.String,System.Byte[],System.String)">
            <summary>
            Uses POST to send data to and retrieve a page.  Gets a passport ticket and uses WLID1.0 auth if needed and able.
            </summary>
            <param name="uri">example: /something/greatness.php</param>
            <param name="content">The content to send (can be null)</param>
            <param name="contentType">The type of the content to send (can be null).  Example: text/html</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthClientBase.InitializePassportIDCRL">
            <summary>
            Inits passport IDCRL for the "INT" passport environment.  This is required before you can obtain tickets.
            This also calls InitializeKerbClient().
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthClientBase.InitializePassportIDCRL(System.String)">
            <summary>
            Inits passport IDCRL for a specific passport environment.  This is required before you can obtain tickets.
            This also calls InitializeKerbClient().
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthClientBase.InitializeKerbClient">
            <summary>
            Prepares KerbClient for use.  This must be done before it is valid to call any of the dll exports into kerbclient.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthClientBase.#ctor(ServerTestFramework.LiveService.Auth.AuthContext,System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Base constructor. Doesn't do much. (It does init kerbclient if needed though)
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthClientBase.BuildXenonConsolePrincipal(System.Byte[],System.Byte[])">
            <summary>
            Builds gamertag (principal) for a machine based on the console id
            </summary>
            <param name="ConsoleId">Input 5-byte console id</param>
            <param name="Gamertag">Output 15 character gamertag for machine name</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthClientBase.GetAAPassportTicketSelfGen(System.String,System.Int64)">
            <summary>
            Uses the RPS ticket generator to make a ticket locally.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthClientBase.GetAAPassportTicketSelfGen(System.String,System.Int64,System.String)">
            <summary>
            Uses the RPS ticket generator to make a ticket locally.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthClientBase.GetAAPassportDelegationTicketSelfGen(System.String,System.Int64,System.String,System.String,System.Int64,System.Nullable{System.DateTime})">
            <summary>
            Uses the RPS ticket generator to make a ticket locally.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthClientBase.ConvertSiteNameToNumber(System.String)">
            <summary>
            Converts our site names to their corresponding numbers.  Only for INT.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthClientBase.ConvertSiteNameToCert(System.String)">
            <summary>
            Converts our site names to their corresponding environment cert.  Only for INT.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcClient.#ctor(ServerTestFramework.LiveService.Auth.AuthContext,System.Net.IPEndPoint,System.Boolean)">
            <summary>
            ASKDC constructor.  Signs on users and machine to get a combinedTgt.
            </summary>
            <param name="ctx">AuthContext state</param>
            <param name="ip">IP address of the ASKDC server. May be null.</param>
            <param name="manualSetup">If false, use default values. If true, user will set all values.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcClient.Initialize(ServerTestFramework.LiveService.Auth.AuthContext)">
            <summary>
            Common constructor code to initialize various members and member of AuthContext
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcClient.SetDefaults(ServerTestFramework.LiveService.Auth.AuthContext)">
            <summary>
            Reset everything to valid default values. You should be able to sign in with 
            just these values.  Think of this as the most basic, simple, valid request possible.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcClient.SignInAskdc">
            <summary>
             Sign in to the ASKDC server. 
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcClient.AddToTicketTimeRemaining(System.Int32)">
            <summary>
            Adds time to the ticket expiration time. Currently in Testnet, tickets
            expire after 30 minutes (I believe), which makes stress testing difficult.
            Use this to artificially add more time to the ticket.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcClient.DecryptEchoBytes(System.Byte[])">
            <summary>
            Decrypts the bytes that the askdc returned in an echo preauth.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcClient.EncryptEchoBytes(System.Byte[])">
            <summary>
            Encrypts bytes to store in the askdc echo preauth.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.AuthContext">
            <summary>
            This class holds all auth-related information and is passed around between the 
            various auth clients (xmacs, askdc, xkdc, sg). It is test-oriented, so a lot of 
            information is exposed. However, it should also be very simple to use for mainline 
            stuff. Each auth client has its own requirements for what fields need to be set 
            prior to signing in and what fields are set after signing in. Refer to the 
            IsSignedIn* properties for the post-signin fields, and refer to the SetDefaults() 
            function in each client for the pre-signin fields.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.AuthContext.IsLspContext">
            <summary>When set to true, this context is intended to be used for an LSP connection.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.#ctor">
            <summary>
            Construct an AuthContext as a Xenon client
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.#ctor(ServerTestFramework.LiveService.Auth.AuthContext.ClientTypes)">
            <summary>
            Construct an AuthContext with a specific client type
            </summary>
            <param name="type">What kind of client to simulate</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.#ctor(ServerTestFramework.LiveService.Auth.AuthContext.ClientTypes,System.Boolean)">
            <summary>
            Construct an AuthContext with a specific client type.
            </summary>
            <param name="type">What kind of client to simulate.</param>
            <param name="createUdp">If true, creates a SimpleUdpSg; if false, does not.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.#ctor(ServerTestFramework.LiveService.Auth.AuthContext,System.Byte[],System.Byte[])">
            <summary>
            Copy constructor for faking out the SG for improving stress test performance
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.SetDashTitle">
            <summary>
            Sets the title to be the 'dash' title depending on platform.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.PassportAuthenticate(System.String,ServerTestFramework.LiveService.Auth.AuthClientBase.PassportSite)">
            <summary> Get a ticket from Passport and store it in the auth context. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.PassportAuthenticate(System.String,System.String)">
            <summary> Get a ticket from Passport and store it in the auth context. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.PassportAuthenticate(System.String,System.String,System.String,ServerTestFramework.LiveService.Auth.AuthClientBase.PassportSite)">
            <summary> Get a ticket from Passport for the given user and password and store it in the auth context. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.PassportAuthenticate(System.String,System.String,System.String,System.String)">
            <summary> Get a ticket from Passport for the given user and password and store it in the auth context. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.SetMachine(ServerTestFramework.Database.MachineEditor)">
            <summary> Sets the machine from a MachineEditor, so that an askdc request can be performed using it (skips xmacs). </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.MakeUser(System.String)">
            <summary>
            Create an XonlinepUser object with the given gamertag and 
            a default generated user key
            </summary>
            <param name="name">The gamertag of the new user</param>
            <returns>A new user object with the given gamertag</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.MakeUser(System.String,System.Byte[])">
            <summary>
            Create an XonlinepUser object with the given gamertag and
            user key
            </summary>
            <param name="name">The gamertag of the new user</param>
            <param name="key">The user key of the user</param>
            <returns>A new user object with the given gamertag</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.SetUser(System.String,System.Int32)">
            <summary>
            Creates a user with the given gamertag and puts them into a slot of this context
            </summary>
            <param name="name">The gamertag of the user to create</param>
            <param name="slot">The slot to populate. Can be slot 1 to 4 (i.e. controller ports).</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.SetUser(ServerTestFramework.LiveService.UserAccount.XeUser,System.Int32)">
            <summary>
            Sets a provided user into the indicated slot of this context
            </summary>
            <param name="user">The UACS user account to set.  Make sure this user has been Create()ed</param>
            <param name="slot">The slot to populate. Can be slot 1 to 4 (i.e. controller ports).</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.SetUser(ServerTestFramework.LiveService.UserAccount.XeUser,System.Int32,System.Byte[])">
            <summary>
            Sets a provided user into the indicated slot of this context
            </summary>
            <param name="user">The UACS user account to set.  Make sure this user has been Created</param>
            <param name="slot">The slot to populate. Can be slot 1 to 4 (i.e. controller ports).</param>
            <param name="key">xenon key.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.SetUser(ServerTestFramework.LiveService.Auth.KdcUser,System.Int32)">
            <summary>
            Sets a provided user into the indicated slot of this context
            </summary>
            <param name="user">The user account to set.</param>
            <param name="slot">The slot to populate. Can be slot 1 to 4 (i.e. controller ports).</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.SetUser(ServerTestFramework.Database.UserEditor,System.Int32)">
            <summary>
            Sets a provided user into the indicated slot of this context
            </summary>
            <param name="user">The DB-based user account</param>
            <param name="slot">The slot to populate. Can be slot 1 to 4 (i.e. controller ports).</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.SetUser(ServerTestFramework.LiveService.Auth.XonlinepUser,System.Int32,System.UInt64)">
            <summary>
            Sets the provided user into the indicated slot of this context
            </summary>
            <param name="user">The user object to populate the slot with</param>
            <param name="slot">The slot to populate. Can be slot 1 to 4 (i.e. controller ports).</param>
            <param name="userPuid">The user puid to set in the slot</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.SetUser(ServerTestFramework.LiveService.Auth.XonlinepUser,System.Int32)">
            <summary>
            Sets the provided user into the indicated slot of this context
            </summary>
            <param name="user">The user object to populate the slot with</param>
            <param name="slot">The slot to populate. Can be slot 1 to 4 (i.e. controller ports).</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.MakeNewGenericUser(System.Boolean,System.Boolean)">
            <summary>
            Create a new KdcUser object using the given parameters
            </summary>
            <param name="createPassport">If true, create a passport for the user</param>
            <param name="createAsGold">If true, create the user as a gold user, else create a silver user</param>
            <returns>A new KdcUser object</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.MakeNewGenericUser(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a new KdcUser object using the given parameters
            </summary>
            <param name="createPassport">If true, create a passport for the user</param>
            <param name="createAsGold">If true, create the user as a gold user, else create a silver user</param>
            <returns>A new KdcUser object</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.MakeNewBillingUser(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a new XeUser object using the given parameters, which can be used for billing stuff.
            </summary>
            <param name="createPassport">If true, create a passport for the user</param>
            <param name="createAsGold">If true, create the user as a gold user, else create a silver user</param>
            <returns>A new XeUser object</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.SetNewUser(System.Int32)">
            <summary>
            Create a new silver KdcUser object and populate the given slot with it
            </summary>
            <param name="slot">The slot to populate. Can be slot 1 to 4 (i.e. controller ports).</param>
            <returns>The silver user that was created and populated into the slot</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.SetNewUser(System.Int32,System.Boolean)">
            <summary>
            Create a new KdcUser object and populate the given slot with it
            </summary>
            <param name="slot">The slot to populate. Can be slot 1 to 4 (i.e. controller ports).</param>
            <param name="createAsGold">If true, the user is created as a gold user</param>
            <returns>The user that was created and populated into the slot</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.SetNewPassportUser(System.Int32)">
            <summary>
            Create a new silver KdcUser with a passport and populate the given slot with it
            </summary>
            <param name="slot">The slot to populate. Can be slot 1 to 4 (i.e. controller ports).</param>
            <returns>The silver user that was created and populated into the slot</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.SetNewPassportUser(System.Int32,System.Boolean)">
            <summary>
            Create a new XeUser object with a passport and populate the given slot with it
            </summary>
            <param name="slot">The slot to populate. Can be slot 1 to 4 (i.e. controller ports).</param>
            <param name="createAsGold">If true, the user is created as a gold user</param>
            <returns>The user that was created and populated into the slot</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.SetUserPassport(ServerTestFramework.LiveService.UserAccount.XeUser)">
            <summary>
            Sets the passport info for this context from a given user
            </summary>
            <param name="user">The user to get passport info from</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.SetUserPassport(ServerTestFramework.LiveService.Auth.KdcUser)">
            <summary> Sets the passport info for this context from a given user if they have one, else does nothing.  If the user has more than one ticket for different policies cached, one is picked at random without any preferance. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthContext.ClearUsers">
            <summary>
            If there are any users associated with thi context, clear them out
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.AuthUtils">
            <summary>
            Handy utilities for kerb &amp; sg related things.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthUtils.GetNewNonce">
            <summary>
            Get a new 8-byte nonce. Supposed to be super-duper unique and random. In reality, it comes
            kinda close.  We use 4 random bytes and 4 byte from the timer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AuthUtils.GetMacAddress(ServerTestFramework.LiveService.Auth.IpAddr)">
            <summary>
            Gets the IpMacPair whose IP matches the remote IP most closely.
            </summary>
            <param name="remote">The remote address to use as a reference point.</param>
            <returns>The IpMacPair closest to the remote address.</returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.SimpleUdpSG">
            <summary>
            When we key exchange with the SG, it sends back an ICMP Port Unreachable packet just before the real
            response. This causes an exception. This class will swallow that exception and attempt to recvfrom()
            again, to get the real reply.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SimpleUdpSG.RecvAsync(System.Byte[],ServerTestFramework.LiveService.Auth.SimpleUdpSG.RecvAsyncCallback,System.Object)">
            <summary>
            Asynchronously receives data from the socket.
            </summary>
            <param name="buffer">The buffer to fill with data. It is suggested to be 1500 bytes.</param>
            <param name="callback">The callback function.</param>
            <param name="state">The state object for use by the callback function.</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.SimpleUdpSG.RecvAsyncCallback">
            <summary>
            The callback function for use with RecvAsync.
            </summary>
            <param name="state">The state object passed in to RecvAsync.</param>
            <param name="buffer">The buffer passed in to RecvAsync.</param>
            <param name="length">The amount of data that was read into the buffer.</param>
            <param name="endpoint">The location that the packet came from.</param>
            <param name="connection_reset">True if the connection was reset, false if not.</param>
            <param name="exc">The exception, if any, that was thrown by EndReceiveFrom.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.DeterministicRandom.MutateBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Changes random bytes in an array to random values
            </summary>
            <param name="packet"></param>
            <param name="packetLength"></param>
            <param name="iterations">The number of random bytes to change</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.ChallengeManager">
            <summary>
            Aids in managing challenge/response and filter files on the SG server -- 
            configuring, enumerating, enabling, etc.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.ChallengeManager.ro">
            <summary>Report object for use by ChallengeManager.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.ChallengeManager._PreconfiguredLuaScripts">
            <summary>Container for preconfigured scripts.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ChallengeManager.LoadPreconfiguredLuaScripts(System.Xml.XmlDocument)">
            <summary>
            Loads Lua scripts from an Xml document.
            </summary>
            <param name="config">The Xml document to load scripts from.</param>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.ChallengeManager._Scripts">
            <summary>Our scripts.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ChallengeManager.AddScript(ServerTestFramework.LiveService.Auth.LuaScript)">
            <summary>
            Adds a script to our collection and the database.
            </summary>
            <param name="luaScript">The script to add.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ChallengeManager.AddScript(ServerTestFramework.LiveService.Auth.LuaScript,System.Boolean)">
            <summary>
            Adds a script to our collection and the database.
            </summary>
            <param name="luaScript">The script to add.</param>
            <param name="reload">If true, reloads the SG(s).</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ChallengeManager.RemoveScript(ServerTestFramework.LiveService.Auth.LuaScript)">
            <summary>
            Removes a script from our collection and the database.
            </summary>
            <param name="luaScript">The script to remove.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ChallengeManager.RemoveScript(ServerTestFramework.LiveService.Auth.LuaScript,System.Boolean)">
            <summary>
            Removes a script from our collection and the database.
            </summary>
            <param name="luaScript">The script to remove.</param>
            <param name="reload">If true, reloads the SG(s).</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ChallengeManager.RemoveScript(System.String)">
            <summary>
            Removes a script from our collection and the database.
            </summary>
            <param name="scriptName">The script to remove.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ChallengeManager.RemoveScript(System.String,System.Boolean)">
            <summary>
            Removes a script from our collection and the database.
            </summary>
            <param name="scriptName">The script to remove.</param>
            <param name="reload">If true, reloads the SG(s).</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ChallengeManager.RemoveAllScripts">
            <summary>
            Removes all scripts from our collection and the database.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ChallengeManager.RemoveAllScripts(System.Boolean)">
            <summary>
            Removes all scripts from our collection and the database.
            </summary>
            <param name="reload">If true, reloads the SG(s).</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ChallengeManager.SetAuthdataForScript(ServerTestFramework.LiveService.Auth.LuaScript,ServerTestFramework.LiveService.Auth.Authdata_Base)">
            <summary>
            Sets the given authdata so that the given script will target it.
            </summary>
            <param name="luaScript">The script to target.</param>
            <param name="authdata">The authdata to modify.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ChallengeManager.GetChallengeIdForScript(ServerTestFramework.LiveService.Auth.LuaScript)">
            <summary>
            Gets the challenge id that a script was propped with.
            </summary>
            <param name="luaScript">The script to get the challenge id of.</param>
            <returns>The challenge id of the script.</returns>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.ChallengeManager.PreconfiguredLuaScripts">
            <summary>Preconfigured Lua scripts.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.ChallengeManager.AuthdataTarget">
            <summary>The type of targeting this manager uses.</summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.ChallengeManager.AuthdataTargetType">
            <summary>
            Types of authdata targeting.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.ChallengeManager.LuaScriptAuthdata">
            <summary>
            The authdata associated with a Lua script.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.ChallengeManager.LuaScriptAuthdata.ChallengeDeclareMacro">
            <summary>This value will be replaced in scripts with the challenge id.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.ChallengeManager.LuaScriptAuthdata.DefaultBinaryMacro">
            <summary>This value will be replaced in scripts with the default binary blob.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.ChallengeManager.LuaScriptAuthdata.AuthdataTargetMacro">
            <summary>This value will be replaced in scripts with the target filter.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.ChallengeManager.LuaScriptAuthdata.AuthdataIdentiferIndex">
            <summary>Static for value used to uniquely identify the script.</summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.LuaScript">
            <summary>
            A lua script that can be put into t_sg_scripts.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.LuaScript.#ctor">
            <summary>
            Basic constructor.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.LuaScript.#ctor(ServerTestFramework.LiveService.Auth.LuaScript)">
            <summary>
            Copy constructor.
            </summary>
            <param name="script">The script to copy.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.LuaScript.PropScript(System.Boolean)">
            <summary>
            Props the Lua script to the database and conditionally reloads the SG.
            </summary>
            <param name="reload">If true, reload the SG; if false, don't.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.LuaScript.RemoveScript(System.Boolean)">
            <summary>
            Removes the Lua script from the database and conditionally reloads the SG.
            </summary>
            <param name="reload">If true, reload the SG; if false, don't.</param>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.LuaScript.Name">
            <summary>Name of the script (vc_script_name).</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.LuaScript.Enabled">
            <summary>If true, is enabled; if false its not (ti_enabled).</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.LuaScript.Script">
            <summary>The script body (txt_script).</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.LuaScript.Blob">
            <summary>The binary blob (im_blob).</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.LuaScript.KickEnabled">
            <summary>Sets the __KickEnabled field in the challenge/controller's Lua global table (ti_chal_kick_enabled).</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.LuaScript.TimeoutEnabled">
            <summary>Sets the __TimeoutEnabled field in the challenge/controller's Lua global table (ti_chal_timeout_enabled).</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.LuaScript.IsSync">
            <summary>Used to replace the ChallengeDeclare macro.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.LuaScript.IsPc">
            <summary>Used to replace the ChallengeDeclare macro.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.LuaScript.IsDevkit">
            <summary>Used to replace the ChallengeDeclare macro.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KerbStoreGeneric.Add(System.Object)">
            <summary>
            Adds item to store
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KerbStoreGeneric.Get">
            <summary>
            Gets item but leaves it in the store
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KerbStoreGeneric.Pop">
            <summary>
            Gets item from store and removes it
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KerbStore`1.Add(`0)">
            <summary>
            Adds item to store
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KerbStore`1.Get">
            <summary>
            Gets item but leaves it in the store
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KerbStore`1.Pop">
            <summary>
            Gets item from store and removes it
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XeTitleInfo.GetTitleInfo">
            <summary>
            Get TitleInfo struct, for backwards compatibility
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XeTitleInfo.SetTitleInfo(ServerTestFramework.LiveService.Auth.TitleInfo)">
            <summary>
            Sets members based on TitleInfo object, for backwards compatibility
            </summary>
            <param name="ti"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ServiceContextXe.GetXkdcResult">
            <summary>
            Helper function for compatibility
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ServiceContextXbox.GetXkdcResult">
            <summary>
            Helper function for backwards compatibility
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ConsoleCertificate.ComputeHash">
            <summary> Computes the 20 byte SHA1 hash of the certificate, which is used as a secondary identifier along with console ID to uniquely identify an xbox360. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.LSPException">
            <summary>
            Custom LSP exception so we can catch() more explicitly
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.#cctor">
            <summary>
            Static Constructor.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SgClient.bUseSgIpFromKDC">
            <summary>
            Use the SG IP address returned from the KDC or override it with our own, as specified in the
            stf.xml file?
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SgClient.bVerifyKeyEx">
            <summary>
            Should we verify the keyex reply?  If we don't, the keys won't be stored, which means we
            can't send any SecMsg packets... but on the other hand, it will be faster
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SgClient.bUseConnectionServices">
            <summary>
            Only applies to user key exchanges (machine-only logons don't count). Requires 
            the presence or signature service, otherwise SG will throw an event.  With this enabled,
            the SG will send update messages to presence on the datacenter side of things. It may
            do more stuff as well..
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SgClient.bUseRealXKDC">
            <summary>
            To get the TGS ticket, should we use the real XKDC or generate a fake ticket?
            TODO: port all tests that need the real KDC to set this to true
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SgClient.SendPulseAfterSignIn">
            <summary>
            If true, sends a SecMsgDataPulse after in SignInSG.  If false, does not.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SgClient.KDCEmulateClientBehavior">
            <summary>
            Sets the real KDC client's behavior, only useful if bUseRealXKDC is true.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.#ctor(ServerTestFramework.LiveService.Auth.AuthContext,System.Net.IPEndPoint,System.Boolean)">
            <summary>
            SG constructor.
            </summary>
            <param name="ctx">AuthContext state</param>
            <param name="ip">IP address of the SG server. May be null.</param>
            <param name="manualSetup">If false, use default values. If true, user will set all values.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.Initialize(ServerTestFramework.LiveService.Auth.AuthContext)">
            <summary>
            Common constructor code to intialize various members and member of AuthContext
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.SetDefaults(ServerTestFramework.LiveService.Auth.AuthContext)">
            <summary>
            Reset everything to valid default values. You should be able to sign in with 
            just these values.  Think of this as the most basic, simple, valid request possible.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.SetupForFakeSignInXkdc(ServerTestFramework.LiveService.Auth.AuthContext)">
            <summary>
            Prepares the context for building a fake ticket by setting a site and
            default authdata.  Useful for making custom modifications to the default authdata.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.SetupForFakeSignInXkdc">
            <summary>
            Helper for calling the static method using the instance context.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.FakeSignInXkdc(ServerTestFramework.LiveService.Auth.AuthContext)">
            <summary>
            If we aren't "signed in" to the XKDC, then we need to generate
            fake authdata and populate it with reasonable defaults.  You are
            free to do this before calling SignIn, as long as the ServiceContext
            is set, we will be "signed in" to the XKDC.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.FakeSignInXkdc">
            <summary>
            Creates a fake XKDC ticket.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.SignOutSG">
            <summary>
            Sign out of the SG.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.SignInSG">
            <summary>
            Do the key exchange with the SG and store the keys. Sign in with KDC if necessary.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.SimpleVerify">
            <summary>
            Quickly verify that the key exchange succeeded
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.BuildAP">
            <summary>
            Build the Kerberos AP portion of the key exchange request packet
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.GetNewMachine(ServerTestFramework.LiveService.Auth.AuthContext,ServerTestFramework.LiveService.Auth.Authdata_Base)">
            <summary>
            Puts a new machine puid in the authdata.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.GetNewMachine">
            <summary>
            Puts a new machine puid in the authdata.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.SetDefaultAuthdata(ServerTestFramework.LiveService.Auth.AuthContext,ServerTestFramework.LiveService.Auth.Authdata_Xbox2)">
            <summary>
            Construct reasonable authdata info for use when building fake TGS tickets.
            This is for the legacy Authdata version 2 format.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.CheckPortAndSpi(ServerTestFramework.LiveService.Auth.XspPacket)">
            <summary>
            Verify the port we initiated the connection with is still being used
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.XspSendAdjustSize(System.Byte[],System.Int32)">
            <summary>
            Sends an encrypted XSP packet, but allows the caller to adjust the number of bytes sent.  Used only for 
            testing.
            </summary>
            <param name="message">A SecMsg* packet converted to a byte array</param>
            <param name="extraBytes">Extra bytes to send.  May be positive or negative.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.XspSend(ServerTestFramework.LiveService.Auth.SecMsgHeader)">
            <summary>
            Sends an encrypted SECMSG* XSP packet to the SG.
            </summary>
            <param name="msg">A SecMsg* packet.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.XspSend(System.Byte[])">
            <summary>
            Sends an encrypted SECMSG* XSP packet to the SG.
            </summary>
            <param name="msg">A SecMsg* packet.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.XspSend(ServerTestFramework.LiveService.Auth.XspPacket)">
            <summary>
            Sends an encrypted XSP packet to the SG, does not change the packet at all before sending.
            </summary>
            <param name="xsp">The packet to send.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.XspResend(ServerTestFramework.LiveService.Auth.XspPacket,System.Byte[])">
            <summary>
            Resends an XSP packet. All this really has to do is increment the sequence number
            and re-encrypt the packet. 
            </summary>
            <param name="xsp"></param>
            <param name="msgBytes"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.XspSendData(System.Byte[],System.UInt32,System.UInt16,System.UInt16)">
            <summary>
            Sends an encrypted XSP packet.  Used for sending data through the SG to a service.
            You should probably stick to XSP_TYPE_UDP_2 for now.
            </summary>
            <param name="message">A non-SecMsg* packet converted to a byte array.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.AnyRecv(System.Int32,System.Int32@)">
            <summary>
            Receives anything, useful for clearing out the incoming buffer without bothering to
            decrypt the packet or do anything with it.
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.XspRecv(System.Int32)">
            <summary>
            Receives an encrypted XSP packet from the SG.  
            </summary>
            <param name="timeout">Time out, in milliseconds, to wait for a reply.</param>
            <returns>The decrypted byte array, can be turned into a SecMsg* packet</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.SecMsgRecv(System.Int32)">
            <summary>
            If you are expecting a SecMsg* packet back, use this shortcut function
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.SecMsgRecv(System.Int32,System.Int16)">
            <summary>
            If you are expecting a specific SecMsg* packet back, use this shortcut function.
            This should guarantee you get your desired packet back while tossing out the other
            things.
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.SendPulse">
            <summary>
            Send a SECMSG_TYPE_PULSE packet
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.SendDataPulse">
            <summary>
            Send a SECMSG_TYPE_XBTOSG_PULSE data pulse packet with no data
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.SendDataPulseStateChange(System.UInt32)">
            <summary>
            Send a SECMSG_TYPE_XBTOSG_PULSE data pulse packet with a state change message attached
            </summary>
            <param name="newState"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.SendDataPulseStateChange(System.UInt32,System.UInt64)">
            <summary>
            Send a SECMSG_TYPE_XBTOSG_PULSE data pulse packet with a state change message attached
            </summary>
            <param name="newState"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.SendDataPulseTitleChange(System.UInt32)">
            <summary>
            Send a SECMSG_TYPE_XBTOSG_PULSE data pulse packet with a title change message attached
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.SendDelete">
            <summary>
            Send a SECMSG_TYPE_DELETE packet
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.SendQos">
            <summary>
            Send a pair of SECMSG_TYPE_XBTOSG_QOS_INIT packets, and return the result from the SG.
            </summary>
            <returns>QOS class encapsulating all QOS stuff</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.SendChangeUsers">
            <summary>
            Send a SECMSG_TYPE_CHANGE_USERS_REQ packet based on a new ServiceResult (from the XKDC)
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgClient.XspSendData(System.Byte[],System.Byte,ServerTestFramework.LiveService.Auth.SGFakeService.ActionType,ServerTestFramework.LiveService.Auth.SGFakeService.IServicePort)">
            <summary>
            Sends XSP packet through SG to our SGFakeService using a common UDP packet format.
            </summary>
            <param name="message"></param>
            <param name="?"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SgClient.NextSgPuid">
            <summary>
            The next random puid derived from CurrentSgPuidCounter.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SgClient.LastRTT">
            <summary>
            Returns the elapsed time, in seconds, of the last successful round trip.  This of course
            relies on using a call that both sends and receives a packet, otherwise this value will be
            negative or undefined.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SgClient.SPI">
            <summary>
            SPI of this client
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SgClient.ChallengeNonce">
            <summary>
            The asynchronous challenge nonce, used for correspondence with SG
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SgClient.SGADDR">
            <summary>
            Return the SGADDR of this client, known only after we have signed-in to the SG
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.LspClient.#ctor(ServerTestFramework.LiveService.Auth.AuthContext,System.Net.IPEndPoint,System.Boolean)">
            <summary>
            LSP constructor.
            </summary>
            <param name="ctx">AuthContext state</param>
            <param name="ip">IP address of the LSP server. May be null.</param>
            <param name="manualSetup">If false, use default values. If true, user will set all values.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.LspClient.Initialize(ServerTestFramework.LiveService.Auth.AuthContext)">
            <summary>
            Common constructor code to intialize various members and member of AuthContext
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.LspClient.SetDefaults(ServerTestFramework.LiveService.Auth.AuthContext)">
            <summary>
            Reset everything to valid default values. You should be able to sign in with 
            just these values.  Think of this as the most basic, simple, valid request possible.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.LspClient.SignOutLSP">
            <summary>
            Sign out of the LSPSG.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.LspClient.SignInLSP">
            <summary>
            Do the key exchange with the LSPSG and store the keys.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.LspClient.BuildTsAP">
            <summary>
            Build the Kerberos AP portion of the key exchange request packet
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.LspClient.SimpleVerifyTs">
            <summary>
            Quickly verify that the key exchange succeeded
            </summary>
            <param name="result"></param>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.IpAddr.Zero">
            <summary>
            IpAddr representing 0.0.0.0; Please do not modify!
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.IpHdr.ComputeIPChecksum(System.Byte[])">
            <summary>
            Computes the IP checksum for the given array.
            </summary>
            <param name="data">The data to checksum.</param>
            <returns>The checksum value for the given data.  !!!In network order!!!</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ArpPacket.SetProbe(ServerTestFramework.LiveService.Auth.EnetAddr,ServerTestFramework.LiveService.Auth.IpAddr)">
            <summary>
            Creates an ARP probe packet from the given MAC for the given IP.
            </summary>
            <param name="eaSelf">The MAC of the prober.</param>
            <param name="ipTarget">The IP being probed for.</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.QOS">
            <summary>
            Embodies the Quality of Service (QoS) message/response to the Live service.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.QOS.#ctor(System.Boolean)">
            <summary>
            Creates a new QOS object with the specified value for UseLargePackets.
            </summary>
            <param name="useLargePackets">The value to set UseLargePackets to.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.QOS.ComputeClientQoS(System.Collections.Generic.List{ServerTestFramework.LiveService.Auth.QOS})">
            <summary>
            Computes the client QoS numbers from the given individual QoS tests.
            </summary>
            <param name="probes">The QoS tests to use.</param>
            <returns>A Results object that contains the same values that are computed on the client.</returns>
            <remarks>Adapted from \xenon\private\xtl\net\base\Ipqos.cpp::IpQosCliInfoCompute</remarks>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.QOS.ComputeClientBandwidth(System.Collections.Generic.List{ServerTestFramework.LiveService.Auth.QOS},System.Boolean)">
            <summary>
            Computes the client bandwidth from the given individual QoS tests.
            </summary>
            <param name="probes">The QoS tests to use.</param>
            <param name="downstream">True for the downstream bandwidth; false for the upstream.</param>
            <returns>The bits per second bandwidth value for the requested direction.</returns>
            <remarks>Adapted from \xenon\private\xtl\net\base\Ipqos.cpp::IpQosBandwidth</remarks>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.QOS.UseLargePackets">
            <summary>
            If true, large QoS packets will be sent to the SG; otherwise small ones.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.QOS.TimerMs">
            <summary>
            Return the current timer in milliseconds
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.QOS.Results">
            <summary>
            The results of a client QoS computation.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.QOS.QoSBucket">
            <summary>
            Used in ComputeClientBandwidth to 'bucketize' the sampled values.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.RawNic">
            <summary>
            Provides frame-level access to the NIC. Careful, it's tricky to use.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.RawNic.Open(ServerTestFramework.LiveService.Auth.IpAddr)">
            <summary>
            Opend RAWNIC on the MAC that is the closest to the remote IP address.
            </summary>
            <param name="remoteIP">The remote IP address that we want to connect to.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.RawNic.Open(ServerTestFramework.LiveService.Auth.IpAddr,System.Boolean)">
            <summary>
            Opend RAWNIC on the MAC that is the closest to the remote IP address.
            </summary>
            <param name="remoteIP">The remote IP address that we want to connect to.</param>
            <param name="installIfNecessary">If true, the driver will be installed if it is not detected.</param>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.RawNic.VirtualIpMacPair">
            <summary>
            Access to the virtual MAC used to open RawNic.
            (12/3/08 this is actually the real MAC of the NIC)
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ServiceKeys.GetServiceKey(System.Int32)">
            <summary> Retrieves a key matching keyType.  If there are more than one key of the specified type, this will throw. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ServiceKeys.GetServiceKey(System.Int32,System.String,System.String)">
            <summary> Retrieves a service key matching keyType and serviceData.  If serviceData are null they are not used for matching.  If there are more than one matching keys, this will throw. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.SGException">
            <summary>
            Custom SG exception so we can catch() more explicitly
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.SGNoReplyException">
            <summary>
            Custom SG exception so we can catch() more explicitly
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.SGRetryException">
            <summary>
            Custom SG exception so we can catch() more explicitly
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspPacketFactory.Get(ServerTestFramework.LiveService.Auth.SecReg,System.UInt32)">
            <summary>
            Use this constructor for receiving Xsp packets
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspPacketFactory.Get(ServerTestFramework.LiveService.Auth.SecMsgHeader,ServerTestFramework.LiveService.Auth.SecReg,System.UInt32)">
            <summary>
            Use this constructor for any SecMsg type message
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspPacketFactory.Get(System.Byte[],ServerTestFramework.LiveService.Auth.SecReg,System.UInt32)">
            <summary>
            Use this constructor for any SecMsg type message. Use for funky messages.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspPacketFactory.Get(System.Byte[],System.UInt32,System.Int32,System.Int32,ServerTestFramework.LiveService.Auth.SecReg,System.UInt32)">
            <summary>
            Use this constructor for sending any non-SecMsg type message. This will automatically build
            the extra bytes needed for the UDP_1, UDP_2, etc, header.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.SGConnection">
            <summary>
            Represents a connection to an SG.
            
            Now:
            Does what is needed for stress.
            Uses XspBuffer, XspSession, XspUdp.
            Uses AuthContext.
            Uses newly static functions from SGClient, LspClient used to override some of them.
            
            Hopefully:
            Be able to replace SGClient.
            Make AuthContext prettier?
            Have an equivalent to LspClient.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection._state">
            <summary>Backing for State.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection._last_send_time">
            <summary>Backing for LastSendTime.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection._last_keyex_init">
            <summary>The last time we attempted to connect.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection._last_keyex_mpuid">
            <summary>The last machine puid we used to connect with.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection._last_keyex_request_packet">
            <summary>The key exchange packet that was last sent.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection._last_keyex_exception">
            <summary>The last exception to occur during keyex.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection._last_receive_time">
            <summary>Backing for LastReceiveTime.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection.ConnectionReceiveTimeout">
            <summary>Client side receive timeout.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection.XbToSgPulseTimeout">
            <summary>Client side heartbeat timer.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection._last_change_users_req">
            <summary>Backing for LastChangeUsersReq.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection._last_change_users_req_sent">
            <summary>The last time a change users request packet was actually sent.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection._last_change_users_rep">
            <summary>Backing for LastChangeUsersRep.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection._last_change_users_req_packet">
            <summary>The change users packet that was last sent.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection.ChangeUsersRequestTimeout">
            <summary>Change Users Request timeout.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection._last_qos_init_packet">
            <summary>The qos packet that was last sent.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection._authcontext">
            <summary>
            Storage for most of the connection information, holdover from SGClient and AuthClientBase.
            Would like to replace this.  Backing for Context.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection._transport">
            <summary>Backing for Transport.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection._session">
            <summary>Contains what we need to communicate with the SG.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection._pre_keyex_recv_spi">
            <summary>
            The SPI that we generated to receive on before key-exchange is complete.  Used by Connect to XspUdp.Close on a failed attempt
            before _session is created.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection.UseRealXKDC">
            <summary>When connecting to the SG, should we use a real ticket from the XKDC?</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection.UseSGIPFromKDC">
            <summary>If using real XKDC, should we use the provided IP to connect to the SG?</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection.UseConnectionServices">
            <summary>Use connection services when logging in, should be used when at least 1 user is present.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection._HandleSecMsgs">
            <summary>Backing for HandleSecMsgs.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection.UserSecMsgHandler">
            <summary>When a function is supplied, secmsgs will be passed to it for the user to handle.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection.RemoteEndpoint">
            <summary>The endpoint of the SG to connect to.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection.KeyExchangeTimeoutInMs">
            <summary>The amount of time to wait for a key exchange response, in milliseconds.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection.ReceiveTimeoutInMs">
            <summary>The amount of time to wait for any data packet when receiving.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection.KeyExchangeMinRetryTime">
            <summary>The minimum amount of time between key exchange retries.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnection.PreConnect(ServerTestFramework.LiveService.Auth.KeyExchangeRequestPacket@,ServerTestFramework.LiveService.Auth.XspBuffer@)">
            <summary>
            Does all of the setup required to be ready to send a key-exchange packet to the SG.
            It may block for a time if using the real XKDC, as there is no asynchronous connect to it.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnection.PostConnect(ServerTestFramework.LiveService.Auth.KeyExchangeRequestPacket,ServerTestFramework.LiveService.Auth.XspBuffer)">
            <summary>
            After the send/receive, this handles the processing to be able to communicate with the SG.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnection.Connect">
            <summary>
            Connects to the SG, doing whatever is needed to complete the connection.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnection.ConnectAsync">
            <summary>
            Connects to the SG asynchronously, doing whatever is needed to complete the connection.
            ProcessReceiveQueue must be called at some point in order to transition to a connected state.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnection.EndConnect">
            <summary>
            Waits for the successful completion of a connection that was begun with ConnectAsync.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnection.Disconnect">
            <summary>
            Disconnects from the SG.
            Closes the transport layer down, which drops any waiting packets and returns nulls to any waiting receives.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnection.SetDisconnected">
            <summary>
            Sets us to the disconnected state, without sending a delete message.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnection.ClearTicketCache">
            <summary>
            Removes any cached ticket data that may be held by the connection.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnection.EnsureDefaults">
            <summary>
            This function should make sure that Connect has what it needs to be able to succeed.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnection.SetupPacketReceive">
            <summary>Sets up the default receive for handling secmsgs.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnection.FlushDataPackets">
            <summary>Removes all data packets from the queues.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnection.Send(ServerTestFramework.LiveService.Auth.SecMsgHeader)">
            <summary>
            Sends the SecMsg to the SG.
            </summary>
            <param name="secMsg">The SecMsg to send.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnection.SendHeartbeat(System.Boolean)">
            <summary>
            Sends a simple heartbeat to the SG.
            </summary>
            <param name="onlyIfNeeded">Only sends if needed based on the last send time.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnection.SendChangeUsers">
            <summary>
            Sends a change users sec msg based on the current authdata.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnection.ProdChangeUsers">
            <summary>
            If it has been too long since we sent a change users request, we will send it again.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnection.SendQoS">
            <summary>
            Sends the standard QoS packet pair.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnection.Send(ServerTestFramework.LiveService.Auth.XspBuffer)">
            <summary>
            Sends the XspBuffer to the SG.
            </summary>
            <param name="secMsg">The XspBuffer to send.</param>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection._receive_queue_head">
            <summary>The head of the queue of received packets.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection._receive_queue_tail">
            <summary>The tail of the queue of received packets.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection._receive_queue_first">
            <summary>The time that the queue head was received.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection._receive_queue_last">
            <summary>The time that the queue tail was received.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection._receive_queue_lock">
            <summary>The lock used to protect access to the receive queue.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection._receive_connection_resets">
            <summary>The number of connection resets since the last keyex packet was received.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection._port_mapping">
            <summary>Incoming packet store with separate lists for each port.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnection.ReceiveCallback(ServerTestFramework.LiveService.Auth.XspBuffer,System.Int32)">
            <summary>
            Receives packets as they are pulled from the socket.  This is run on the polling thread,
            so it needs to be fast.
            </summary>
            <param name="packet">The packet that was received.</param>
            <param name="connResets">
            The number of connection resets since the last keyex packet was received.
            Only valid for keyex packets.
            </param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnection.ProcessReceiveQueue">
            <summary>
            Processes the queue of packets that we have received.
            Must be called regularly in order for the connection to work.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnection.MapPortForIncoming(System.UInt32,System.UInt32)">
            <summary>
            Gets the port mapping for an incoming connection.
            </summary>
            <param name="xspType">The XSP type of the packet.</param>
            <param name="clientPort">The client side port.</param>
            <returns>The mapping for a XSP type/port.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnection.GetPacketsOnPort(System.UInt32,System.UInt32)">
            <summary>
            Gets the incoming packets that are queued up for a given port.
            </summary>
            <param name="xspType">The XSP type of the packet.</param>
            <param name="clientPort">The client side port.</param>
            <returns>The head of a buffer list of packets for that port.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnection.GetPacketsOnPort(System.UInt32)">
            <summary>
            Gets the incoming packets that are queued up for a given port.
            </summary>
            <param name="mappedPort">The mapped port.</param>
            <returns>The head of a buffer list of packets for that port.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnection.GetPacketOnPort(System.UInt32)">
            <summary>
            Gets the first incoming packet that is queued up for a given port.
            </summary>
            <param name="mappedPort">The mapped port.</param>
            <returns>The first packet that is queued for that port.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnection.HandleSecMsg(ServerTestFramework.LiveService.Auth.XspBuffer)">
            <summary>
            Takes the appropriate actions for SecMsgs.  Should do the same thing regardless of the value of HandleSecMsgs.
            </summary>
            <returns>True if the SecMsg was handled; false if not.</returns>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnection._userdata">
            <summary>Backing for *UserData.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnection.SetUserData(System.String,System.Object)">
            <summary>
            Sets a user data value for the connection.
            </summary>
            <param name="index">The name of the user data object.</param>
            <param name="value">The user data object.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnection.GetUserData(System.String)">
            <summary>
            Gets a user data value for the connection.
            </summary>
            <param name="index">The name of the user data object.</param>
            <returns>The user data object.</returns>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SGConnection.State">
            <summary>The current state of the connection.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SGConnection.LastSendTime">
            <summary>The last time we sent a packet to the SG.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SGConnection.LastKeyexInitTime">
            <summary>The last key exchange init time.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SGConnection.LastKeyexException">
            <summary>The last key exchange exception that occured.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SGConnection.LastReceiveTime">
            <summary>The last time we sent a packet to the SG.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SGConnection.LastChangeUsersReq">
            <summary>The last time that we sent a change users secmsg.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SGConnection.LastChangeUsersRep">
            <summary>The last time that we received a change users secmsg reply.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SGConnection.ChangeUsersPending">
            <summary>
            True if a change users message is outstanding; false if not.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SGConnection.QoSPending">
            <summary>
            True if a QoS is outstanding; false if not.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SGConnection.HasCurrentChallenge">
            <summary>True if there is a challenge; false otherwise.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SGConnection.CurrentChallengePacket">
            <summary>The current async challenge that we should be executing.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SGConnection.CurrentChallengeLastReceived">
            <summary>The last time we received the current challenge.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SGConnection.CurrentChallengeReceiveCount">
            <summary>The number of times we have received the current challenge.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SGConnection.Context">
            <summary>
            The authorization information that allows us to navigate the gauntlet of signing in.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SGConnection.MachinePuid">
            <summary>
            The machine puid being used in the authdata.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SGConnection.Transport">
            <summary>
            Transport to the SG.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SGConnection.Session">
            <summary>The session used for communicating with the SG.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SGConnection.HandleSecMsgs">
            <summary>If true, the SGConnection will handle SecMsgs instead of passing them to the user.</summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.SGConnection.ConnectionState">
            <summary>
            The current state of the connection.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.SGConnection.UserSecMsgHandlerDelegate">
            <summary>Delegate for the user handling sec msgs.</summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.SGConnection.PortMapping">
            <summary>The port mapping information.</summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.SGConnectionException">
            <summary>
            An exception generated by SGConnection.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.SGConnectionPool">
            <summary>
            A collection of SGConnections that are managed by the pool.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnectionPool.Threads">
            <summary>
            The threads that are being used to keep the connections going.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnectionPool.Connections">
            <summary>
            The connections in the pool.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnectionPool.ThreadConnectionPointer">
            <summary>
            The index that is used by the threads to walk through the connections.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnectionPool.Transport">
            <summary>
            The transport for use by the connections.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnectionPool.#ctor">
            <summary>
            Create a new connection pool with default values.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnectionPool.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new connection pool with specified values.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnectionPool.Start">
            <summary>
            Start the connection pool, which creates and signs in all of the connections.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnectionPool.Stop">
            <summary>
            Stops the connection pool, which signs out all of the connections and discards them.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnectionPool.ThreadHandler">
            <summary>
            The thread start function for keeping the connections going.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnectionPool._DefaultSite">
            <summary>
            Backing for DefaultSite.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnectionPool.CreateNewConnection">
            <summary>Creates a new SgConnection.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnectionPool.CreateNewConnection(ServerTestFramework.LiveService.Auth.AuthContext.ClientTypes,System.Int32)">
            <summary>Creates a new SgConnection.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGConnectionPool.PrivateProcessChallenge(ServerTestFramework.LiveService.Auth.SGConnection)">
            <summary>Our challenge handler; will at least respond.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnectionPool.NewConnection">
            <summary>
            Called when a new connection needs to be created.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SGConnectionPool.ProcessChallenge">
            <summary>
            Called when a connection has a challenge to be processed.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SGConnectionPool.ThreadCount">
            <summary>
            The number of threads to use to keep the connections going.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SGConnectionPool.MaxConnectionCount">
            <summary>
            The number of connections that are in the pool.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SGConnectionPool.IsRunning">
            <summary>
            True if the pool is running; false if it is not.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SGConnectionPool.DefaultSite">
            <summary>
            The default site to use for connections.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.SGConnectionPool.NewConnectionDelegate">
            <summary>
            Delegate to create a new SGConnection.
            </summary>
            <returns>A new SGConnection.</returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.SGConnectionPool.ProcessChallengeDelegate">
            <summary>
            Delegate to process challenges.
            </summary>
            <param name="conn">The connection that has the challenge.</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.SGFakeService">
             <summary>
             Acts like a fake service running behind the SG.  The SG tests will send data to this service,
             which much be configured in the SG. More details later on that. 
             
             <sample>
             Payload structure:
            
               Byte 1: action
               Byte 2: sequence number
               Remaining bytes are payload
            
             Put the following in an sgconfig.ini file that goes in ...\sgroot\sgcfg\.  This is a bare 
             minimum to make this work, the "real" XNetPerf tool needs more.
             
             sgconfig.ini:
                ; For XnetPerf
                ; aka SG throughput stress tool
            
                Service { Id 1129 Name XONLINE_SG_SITE_1_TEST_SERVICE }
            
                ; Service 5 (C# test only)
                Server { Id 334 Service XONLINE_SG_SITE_1_TEST_SERVICE Address { InterfaceId 1 Ip 10.20.201.254 Port 65421 } }
                
                ; Service 6
                Server { Id 337 Service XONLINE_SG_SITE_1_TEST_SERVICE Address { InterfaceId 1 Ip 10.20.201.254 Port 65417 } }
                
                ; Server for testing SG notifications (client state update, title change, and deadxbox)
                Server 
                { 
                    Id 1 
                    Service XONLINE_SG_SITE_1_TEST_SERVICE 
                    NotifyUpdateUrl "/update.ashx"
                    NotifyTitleChangeUrl "/titlechange.ashx"
                    NotifyDeleteUrl "/delete.ashx"
                    Address { InterfaceId 1 Ip 10.20.201.254 Port 65000 }
                }
             
             Replace the IP address with the address of the computer in the DMZ running SGFakeService. The example
             above is for the re-wired client 17. You'll need the FakeSGService running on that machine listening
             on port 65417.  The client should send to port 337.
             
             Also, the UODB must be configured so the KDC will authorize a user for service id 1129. Add
             rows to:
                 t_services
                 t_service_instances
             
             </sample>
             
             </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGFakeService.#ctor(System.Net.IPEndPoint)">
            <summary>
            Constructor for use as SGINFO lookup only, don't care about listening on a port
            </summary>
            <param name="sgEPDatacenter">IP address of datacenter-facing NIC on the SG</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGFakeService.#ctor(System.Int32)">
            <summary>
            Constructor for use as a throughput reflector
            </summary>
            <param name="localPort">Local port to listen on</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGFakeService.#ctor">
            <summary>
            Default constructor, will listen on Service6 port (65417)
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGFakeService.Process">
            <summary>
            Called after Recv to handle the packet and take actions, if necessary
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SGFakeService.CheckForTCPRST(System.Net.IPAddress,System.Int32)">
            <summary>
            Attempts to connect to a given ip and port using TCP.
            </summary>
            <param name="ip">The ip to connect to.</param>
            <param name="port">The port to connect to.</param>
            <returns>A byte indicating what happened.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServerTestFramework.LiveService.Auth.NotificationListener.ProcessData(System.Byte[],System.Int32,System.Int32)" -->
        <member name="T:ServerTestFramework.LiveService.Auth.KC">
            <summary>
            Kerb Constants
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.SGC">
            <summary>
            SG Constants
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.SendablePacket">
            <summary>
            Extend this class if your packet can be sent and received via a UDP socket.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SendablePacket.Check">
            <summary>
            Called just after receiving the bytes but before sending them to Wiredata. Override
            this as necessary to verify the received bytes are the expected ones. Generally, this
            can be done by looking at the first few bytes of the stream, if the packet specifies its
            type, or by looking at the stream length.
            </summary>
            <returns>true is this is the correct packet, false if we should try the Recv() again.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SendablePacket.Send(System.Net.IPEndPoint,ServerTestFramework.LiveService.Auth.SimpleUdpSG)">
            <summary>
            Send this packet on its way.
            </summary>
            <param name="remoteHost"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SendablePacket.RecvHelp(System.Int32,ServerTestFramework.LiveService.Auth.SimpleUdpSG,System.Int32)">
            <summary>
            Used internally for recursive receives, in order to throw away unexpected packets and 
            try again.
            </summary>
            <param name="timeoutInMs"></param>
            <param name="recvAttempts"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SendablePacket.Recv(System.Int32,ServerTestFramework.LiveService.Auth.SimpleUdpSG)">
            <summary>
            Wait for data to come in on this socket, then serialize the received bytes to this Wiredata
            object. It is assumed we are expecting exactly 1 type of packet to come back, so we'll retry
            up to a finite number of times if we get an unexpected packet type, as verified by Check().
            </summary>
            <param name="timeoutInMs"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SendablePacket.op_Explicit(ServerTestFramework.LiveService.Auth.SendablePacket)~ServerTestFramework.LiveService.Auth.XspBuffer">
            <summary>
            Converts a SendablePacket to an XspBuffer.  Uses the buffer array to write to, saving an
            alloc/copy over using operator byte[].
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.SGPacket">
            <summary>
            All SG based packets will likely extend this, such as SECMSG*, SGMSG*, and KEYEX* messages.
            Of course, any packet that has Type and cbEnt fields at the beginning may extend it. Be sure
            to set these two fields before serializing into this class, since Check() will use these
            fields to verify the incoming byte stream.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspPacket.#ctor(ServerTestFramework.LiveService.Auth.SecReg)">
            <summary>
            Use this constructor for receiving Xsp packets
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspPacket.#ctor(ServerTestFramework.LiveService.Auth.SecMsgHeader,ServerTestFramework.LiveService.Auth.SecReg,System.UInt32)">
            <summary>
            Use this constructor for any SecMsg type message
            </summary>
            <param name="msg"></param>
            <param name="keys"></param>
            <param name="SeqXmit"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspPacket.#ctor(System.Byte[],ServerTestFramework.LiveService.Auth.SecReg,System.UInt32)">
            <summary>
            Use this constructor for any SecMsg type message. Use for funky messages.
            </summary>
            <param name="msg"></param>
            <param name="keys"></param>
            <param name="SeqXmit"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspPacket.#ctor(System.Byte[],System.UInt32,System.Int32,System.Int32,ServerTestFramework.LiveService.Auth.SecReg,System.UInt32)">
            <summary>
            Use this constructor for sending any non-SecMsg type message. This will automatically build
            the extra bytes needed for the UDP_1, UDP_2, etc, header.
            </summary>
            <param name="msgBytes"></param>
            <param name="xspType"></param>
            <param name="keys"></param>
            <param name="SeqXmit"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspPacket.Encrypt(System.Byte[])">
            <summary>
            Set payload and hashedTail members
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspPacket.Decrypt">
            <summary>
            Sets secmsg and Sequence members
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.KeyExchangeInit.DefaultUserPermutation">
            <summary>
            The default user permutation does not change the order of the users nor set any flags.
            It causes SgKeyExPermute() in sgrecv.cpp to essentially be a no-op.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KeyExchangeRequestPacket.BuildAP(ServerTestFramework.LiveService.Auth.AuthContext)">
            <summary>
            Build the Kerberos AP portion of the key exchange request packet.
            </summary>
            <param name="context">The context to use when building the AP.</param>
            <returns>A byte array containing the Kerberos AP portion of the key exchange request packet.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SecMsgSgToXbChal.ChallengeFlagKeyexSafe(System.UInt32)">
            <summary>
            Returns whether or not the flags indicate that the challenge can be used
            for the key exchange challenge or not
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.LargeSupervisorChallenge.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Allows for easy conversion from the way the challenge is stored in the input
            packet to a handy SupervisorChallenge structure.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.SgServerInfo">
            <summary>
            Represents information about an SG server. This includes the name, xmgmt ip (not 
            the datacenter ip in NPDB), and the network path to the SGCFG directory.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SgServerInfo.Name">
            <summary>Machine name of the server.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SgServerInfo.InternetIp">
            <summary>IP and port of the internet side of the SG.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SgServerInfo.DatacenterIp">
            <summary>IP and port of the datacenter side of the SG.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SgServerInfo.XmgmtIp">
            <summary>IP and port of the Xmgmt service on the server.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SgServerInfo.SgcfgPath">
            <summary>Path to the SGCFG directory on the server.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgServerInfo.Execute(System.String,System.Net.IPEndPoint,System.String@)">
            <summary>
            Executes an Xmgmt command against the endpoint.
            </summary>
            <param name="command">The command to execute.</param>
            <param name="server">The server to execute the command on.</param>
            <param name="response">The response from running the command.</param>
            <returns>True if the command succeeded; false otherwise.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgServerInfo.Execute(System.String,System.Net.IPEndPoint,System.String@,System.Int32)">
            <summary>
            Executes an Xmgmt command against the endpoint.
            </summary>
            <param name="command">The command to execute.</param>
            <param name="server">The server to execute the command on.</param>
            <param name="response">The response from running the command.</param>
            <param name="timeoutInMS">The timeout for running the command.</param>
            <returns>True if the command succeeded; false otherwise.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgServerInfo.ReloadConfiguration">
            <summary>
            Executes xmgmt command "reload_config" against all known SG servers.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgServerInfo.ReloadConfiguration(System.Int32,System.Boolean)">
            <summary>
            Executes xmgmt command "reload_config" against all known SG servers.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgServerInfo.ReloadConfiguration(System.Int32,System.Boolean,System.Boolean@)">
            <summary>
            Calls 'e :sg reload_config' on the SGs.
            </summary>
            <param name="timeoutInMS">
            The maximum amount of time to wait for the reload to finish.
            The actual maximum could be up to twice this value.
            </param>
            <param name="waitForFinish">
            If true, waits for the asynchronous reload to finish; if false, returns immediately.
            </param>
            <param name="luaScriptFailure">
            Will be true if a lua script load failure is detected; false otherwise.
            </param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgServerInfo.ReloadChallenges">
            <summary>
            Executes xmgmt command "reload_challenges" against all known SG servers.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.SgServerInfo._BestInterfaceForVip">
            <summary>Backing for BestInterfaceForVip.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SgServerInfo.URL(System.String)">
            <summary>
            Gets a string that is the URL of the requested file on the server.
            </summary>
            <param name="configFilename">The file to get the URL for.</param>
            <returns>A string that is the URL of the requested file on the server.</returns>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SgServerInfo.NumServers">
            <summary>
            The number of servers that we know of.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SgServerInfo.Servers">
            <summary>
            The list of servers that we know of.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SgServerInfo.ServerNames">
            <summary>
            The names of the servers that we know of.
            Created each call, so reuse if possible.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.SgServerInfo.BestInterfaceForVip">
            <summary>The best interface to </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.SgReloadConfigException">
            <summary>
            Thrown when an error occurs during a configuration reload.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.SiteInfo">
            <summary>
            Holds information about both SG and LSP sites
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SiteInfo.Init(System.String,System.String)">
            <summary>
            Finish doing common constructor things, cleaning up defaults, etc
            </summary>
            <param name="sitevip">VIP address for site; optional for SG, required for LSP</param>
            <param name="siteip">IP address for site; optional for SG, optional for LSP</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SiteInfo.BuildTSKey(System.Byte[],System.Byte[],System.Byte[]@,System.Byte[]@)">
            <summary>
            Outputs an 8 byte TS session key, the same one that is advertised by the LSPSG
            to query.  
            </summary>
            <param name="siteKey">16 byte key site key of LSP server</param>
            <param name="ipBytes">IP address of LSP server</param>
            <returns>8 byte TS session key</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SiteInfoManager.Check">
            <summary>
            Lazy initialization, will do it upon first request
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SiteInfoManager.AddDefaultSgSite">
            <summary>
            Add essential basic info about SG site1.. for the lazy..
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.TcpForSG">
            <summary>
            Generates TCP header data for use when communicating through the SG.
            A single instance should be used for a single connection, then discarded.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.TcpForSG.DefaultWindowSize">
            <summary>The default window size used by our side of the TCP connection.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.TcpForSG._localSeq">
            <summary>The local sequence number.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.TcpForSG._localAck">
            <summary>The local ack number.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.TcpForSG._state">
            <summary>Backing for State.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.TcpForSG._localWindow">
            <summary>The local window size.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.TcpForSG._receivedFin">
            <summary>True if we have received a FIN, false if not.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.TcpForSG._localFinSeq">
            <summary>The sequence number of the last byte on the receive stream.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.TcpForSG._remoteMSS">
            <summary>Backing for RemoteMSS.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.TcpForSG._remoteWindow">
            <summary>Backing for RemoteWindow.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.TcpForSG.StandardSynHeaderOptions">
            <summary>The standard header options set the MSS to.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.TcpForSG.#ctor">
            <summary>
            Creates a new TcpForSG object, which should be used for only one connection.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.TcpForSG.CreateSyn(System.Int32)">
            <summary>
            Creates the SYN header and sets the state of the connection.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.TcpForSG.CreateAck(System.Int32)">
            <summary>
            Creates an ACK header for sending back to the remote server.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.TcpForSG._packetsSinceAck">
            <summary>Send an ACK for every other packet.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.TcpForSG._inQueue">
            <summary>List of inbound data segments.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.TcpForSG._currentReadIndex">
            <summary>The index of the next data packet.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.TcpForSG._currentReadSequence">
            <summary>The sequence number of the next byte to be read.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.TcpForSG.ReceiveData(ServerTestFramework.LiveService.Auth.XspBuffer)">
            <summary>
            Receives external packets, storing them in our data buffer if needed.
            The caller no longer owns the XspBuffer, and should not free it.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.TcpForSG.ReceiveData(ServerTestFramework.LiveService.Auth.XspTcpInfo,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Receives external packets, storing them in our data buffer if needed.
            The caller no longer owns the XspBuffer, and should not free it.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.TcpForSG.ReadData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the inbound queue.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.TcpForSG._outQueue">
            <summary>The queue of outbound packets that have not been acked yet.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.TcpForSG.SendData(System.Byte[],System.Int32,System.Int32)">
            <summary>Constructs the packets necessary to send the given data.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.TcpForSG.CalcHeaderOptionSize(ServerTestFramework.LiveService.Auth.XspTcpInfo)">
            <summary>
            Calculates the size of the header options for a given TCP header.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.TcpForSG.SafeAdd(System.UInt32,System.UInt32)">
            <summary>
            Safely adds two uints with wrapping.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.TcpForSG.SafeGreaterThanOrEqual(System.UInt32,System.UInt32)">
            <summary>
            Safely compares two uints with wrapping.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.TcpForSG.FlagsContains(ServerTestFramework.LiveService.Auth.TcpForSG.TcpFlags,ServerTestFramework.LiveService.Auth.TcpForSG.TcpFlags)">
            <summary>
            Checks if a set of TCP flags fully contains another set.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.TcpForSG.State">
            <summary>The connection state.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.TcpForSG.RemoteMSS">
            <summary>The MSS of the other side of the connection.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.TcpForSG.RemoteWindow">
            <summary>The current window size of the other side of the connection.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.TcpForSG.DataAvailable">
            <summary>
            True if there is data that is currently available for reading; false otherwise.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.TcpForSG.PacketQueue">
            <summary>The queue of packets that need to be sent.</summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.TcpForSG.ConnectionState">
            <summary>
            The connection state.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.TcpForSG.TcpFlags">
            <summary>
            TCP flags for the header.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.TcpForSG.UpdateResult">
            <summary>
            The result of an update.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.TcpForSG.InboundPacket">
            <summary>Container for inbound packet data.</summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.TcpForSG.OutboundPacket">
            <summary>Container for outbound packet data.</summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.TcpForSGConnection">
            <summary>
            A TCP client for use with an SGConnection.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.TcpForSGConnection.SpinWaitSleepTime">
            <summary>The time we sleep for when spin waiting.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.TcpForSGConnection.ConnectWaitBaseTime">
            <summary>The base amount of time we will spend waiting for a TCP connection request to timeout.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.TcpForSGConnection.SendDataWaitBaseTime">
            <summary>The base amount of time we will spend waiting for data to be acknowledged.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.TcpForSGConnection._conn">
            <summary>Our SGConnection.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.TcpForSGConnection._tcpHeader">
            <summary>Our TCP header fields.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.TcpForSGConnection._sourcePort">
            <summary>The source port that we last connected on.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.TcpForSGConnection._destPort">
            <summary>The destination port that we last connected on.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.TcpForSGConnection._capturedPackets">
            <summary>Packets that have flowed through this connection.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.TcpForSGConnection.CapturePacket(ServerTestFramework.LiveService.Auth.XspBuffer,System.Boolean,ServerTestFramework.LiveService.Auth.TcpForSG.UpdateResult)">
            <summary>Saves a packet onto the capture list.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.TcpForSGConnection.#ctor(ServerTestFramework.LiveService.Auth.SGConnection)">
            <summary>Creates a new TcpForSGConnection object.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.TcpForSGConnection.Connect(System.UInt16,System.UInt16)">
            <summary>
            Connects to a destination server through the SGConnection.
            </summary>
            <param name="sourcePort">The source port to use.</param>
            <param name="destPort">The destination port to use.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.TcpForSGConnection.PumpStreams">
            <summary>
            Reads and writes from/to the streams as necessary.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.TcpForSGConnection.AddQueuedPackets(ServerTestFramework.LiveService.Auth.XspBuffer)">
            <summary>
            Adds a packet list to the queue.
            </summary>
            <param name="packet">The packets to add to the queue.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.TcpForSGConnection.SendTcpPacketQueue(System.Collections.Generic.IEnumerable{ServerTestFramework.LiveService.Auth.TcpForSG.OutboundPacket},System.Boolean)">
            <summary>
            Sends the given queue of packets.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.TcpForSGConnection.Flush">
            <summary>This method is reserved for future use.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.TcpForSGConnection.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Can not seek.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.TcpForSGConnection.SetLength(System.Int64)">
            <summary>Can not seek.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.TcpForSGConnection.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Very simplistic version of a TCP stream write.  Currently its _very_ synchronous.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.TcpForSGConnection.SendTimeout">
            <summary>The time to wait for a send to complete.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.TcpForSGConnection.ReceiveTimeout">
            <summary>The time to wait for a receive to complete.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.TcpForSGConnection.DataAvailable">
            <summary>
            True if there is data that is currently available for non-blocking receive; false otherwise.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.TcpForSGConnection.CanRead">
            <summary>True if we are connected to the SG and the TCP connection has been established.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.TcpForSGConnection.CanSeek">
            <summary>Can not seek.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.TcpForSGConnection.CanWrite">
            <summary>True if we are connected to the SG and the TCP connection has been established.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.TcpForSGConnection.Length">
            <summary>Can not seek.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.TcpForSGConnection.Position">
            <summary>Can not seek.</summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.TcpForSGConnection.PacketCap">
            <summary>Container for packet that we are keeping.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcClient.#ctor(ServerTestFramework.LiveService.Auth.AuthContext,System.Net.IPEndPoint,System.Boolean)">
            <summary>
            XKDC constructor.
            </summary>
            <param name="ctx">AuthContext state</param>
            <param name="ip">IP address of the XKDC server. May be null.</param>
            <param name="manualSetup">If false, use default values. If true, user will set all values.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcClient.Initialize(ServerTestFramework.LiveService.Auth.AuthContext)">
            <summary>
            Common constructor code to intialize various members and member of AuthContext
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcClient.SetDefaults(ServerTestFramework.LiveService.Auth.AuthContext)">
            <summary>
            Reset everything to valid default values. You should be able to sign in with 
            just these values.  Think of this as the most basic, simple, valid request possible.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcClient.SetRequest(System.UInt32[],System.Boolean)">
            <summary>
            Helper function for setting up a Xenon TGS request
            </summary>
            <param name="services">Array of service ids to request. May be null.</param>
            <param name="bAutoDiscoverServices">True for auto-discover of services, false if they are explicitly requested</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcClient.SetRequest(System.UInt32[])">
            <summary>
            Helper function for setting up a TGS request
            </summary>
            <param name="services">Array of service ids to request</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcClient.SignInXkdc">
            <summary>
            Sign in to the XKDC server.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcClient.SignInXkdcXenon">
            <summary>
            Sign in Xenon-style
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsClient.#ctor(ServerTestFramework.LiveService.Auth.AuthContext,ServerTestFramework.LiveService.Auth.ConsoleCertificate,System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Xenon constructor, allows for custom console certificates to be used
            </summary>
            <param name="ctx">AuthContext state</param>
            <param name="cert">Your own custom ConsoleCertificate. May be null.</param>
            <param name="ip">IP address of the XMACS server. May be null.</param>
            <param name="manualSetup">If false, use default values. If true, user will set all values.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsClient.Initialize(ServerTestFramework.LiveService.Auth.AuthContext)">
            <summary>
            Common constructor code to intialize various members and member of AuthContext
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsClient.SetDefaults(ServerTestFramework.LiveService.Auth.AuthContext)">
            <summary>
            Reset everything to valid default values. You should be able to sign in with 
            just these values.  Think of this as the most basic, simple, valid request possible.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsClient.SetDefaults(ServerTestFramework.LiveService.Auth.XonlinepUser)">
            <summary>
            Set defaults for machine for Key, KerberosRealm, and Domain. 
            Does not set the gamertag since it depends on Xenon/Xbox.
            </summary>
            <param name="machine"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsClient.SignInXmacs">
            <summary>
            Sign in to the XMACS server.  You should tweak the values in TitleInfo,
            machineUser, and consoleCert before calling this, if you want anything but 
            the default request.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsClient.SignInXmacsWithMachinePuid(System.UInt64)">
            <summary>
            Signs into the xmacs using a specific machine puid.
            </summary>
            <param name="machinePuid"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsClient.SignInXmacsWithConsoleID(System.String)">
            <summary>
            Signs into the xmacs using a specific consoleID.
            </summary>
            <param name="machinePuid"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsClient.BuildRequest">
            <summary>
             Builds up an XMACS request based on the ClientType of the 
             AuthContext
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsClient.VerifyResponse">
            <summary>
             Verifies the integrity of the response of the XMACS.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsClient.GenerateDevkitSerial">
            <summary>
            Generate Xbox (not Xenon) serial # for gamertag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsClient.GenerateXenonPrincipal">
            <summary>
            Generate Xenon (not Xbox) principal for gamertag. This is an encoded version of the
            console id, which is a 5 byte array with a 4 bit checksum on the end. Thus the 
            principal is a bit tricky to generate correctly.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.XmacsClient.ConsoleId">
            <summary>
            Return the console id, which is really the gamertag
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.XmacsClient.MachinePuid">
            <summary>
            Return the machine puid, which is only known after the account is created 
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.XspBuffer.UNKNOWN_PORT">
            <summary>The value of the port is unknown.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.XspBuffer.SECMSG_PORT">
            <summary>The port used for SecMsg traffic.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.XspBuffer.Next">
            <summary>Used by the XspBufferManager to create a linked list.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.XspBuffer.IsFree">
            <summary>Used by the XspBufferManager to prevent double frees.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspBuffer.Encode(System.UInt32,System.UInt32,System.UInt32,System.Byte[],System.UInt32,System.UInt32,System.Byte[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.LiveService.Auth.XspTcpInfo,System.Int32)">
            <summary>
            Fills the buffer with the provided information, ready for encryption.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspBuffer.EncodeWithDataInPlace(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Object,System.UInt32,System.Int32)">
            <summary>
            Fills the buffer with the provided information, ready for encryption.
            Uses the data that is already in the buffer.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspBuffer.GetBinaryWriter">
            <summary>
            Creates a <c>BinaryWriter</c> for directly writing XSP body data to the buffer.
            </summary>
            <returns>A BinaryWriter that can be used to write data for use by EncodeWithDataInPlace.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspBuffer.DecodeSpi">
            <summary>
            Reads the Spi directly from the buffer.
            </summary>
            <returns>The Spi from the buffer.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspBuffer.DecodeSpiAndFlags">
            <summary>
            Reads the Spi and flags directly from the buffer, saving them into the instance.
            </summary>
            <returns>The value of the Spi and flags.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspBuffer.DecodeSpiFromKeyExPacket">
            <summary>
            Reads the Spi directly from the inner buffer of a key exchange packet.
            </summary>
            <returns>The Spi from the buffer.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspBuffer.DecodeXspType">
            <summary>
            Reads the Xsp type directly from the buffer.
            </summary>
            <returns>The Xsp type of the buffer.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspBuffer.GetUInt32(System.Int32)">
            <summary>
            Gets a uint value from the buffer, correcting any endianess issues.
            </summary>
            <param name="startIndex">The first of the bytes to convert.</param>
            <returns>A uint value read from the buffer.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspBuffer.GetUInt16(System.Int32)">
            <summary>
            Gets a uint value from the buffer, correcting any endianess issues.
            </summary>
            <param name="startIndex">The first of the bytes to convert.</param>
            <returns>A uint value read from the buffer.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspBuffer.SetUInt32(System.Int32,System.UInt32)">
            <summary>
            Sets a uint value into the buffer, correcting any endianess issues.
            </summary>
            <param name="startIndex">The index of the first byte to write.</param>
            <param name="value">The uint value to write into the buffer.</param>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.XspBuffer.SequenceNumber">
            <summary>
            The sequence number given for the last Encode or determined from the last Decode.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ServerTestFramework.LiveService.Auth.XspSession" -->
        <member name="M:ServerTestFramework.LiveService.Auth.XspSession.#ctor(ServerTestFramework.LiveService.Auth.SecReg)">
            <summary>
            Creates a new XSP session.
            </summary>
            <param name="secKeys">The security information necessary to encrypt/decrypt.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspSession.AllocateXspBuffer">
             <summary>
             Allocates a new XspBuffer to be used by the encoding functions. Possible allocation 
             options one could implement here:
            
               * Allocate a new one each call.  
               * Better would be to use a free list of buffers to save the memory allocation.  
               * Or if you know your app is synchronous and/or thread-safe, it could cache a 
               single instance of a buffer and keep re-using it.  
               * Or make it configurable!
             
             I think we'll go with #3 for now. Just cause.
             
             UPDATE: Was 3, switched to use XspBufferManager, so make that a #2.
             </summary>
             <returns>An XspBuffer.</returns>
             <remarks>Why is this public?</remarks>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspSession.Decode(ServerTestFramework.LiveService.Auth.XspBuffer)">
            <summary>
            Decodes a received XspBuffer, updating the receive sequence number.
            </summary>
            <param name="xspBuffer">The XspBuffer to decode.</param>
            <returns>
            Returns true if decoding succeeded and the packet matches our spi, or else false if 
            the spi mismatches. This means the packet belongs to some other XspSession. If 
            false is returned, the sequence number for the session will not have been updated. 
            </returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspSession.Decrypt(ServerTestFramework.LiveService.Auth.XspBuffer)">
            <summary>
            
            </summary>
            <param name="xspBuffer"></param>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.XspSession.SequenceXmit">
            <summary>The next sequence number that will be used when transmitting.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.XspSession.SequenceRecv">
            <summary>The last sequence number received and decoded.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.XspSession.ReceiveSPI">
            <summary>The SPI that this session is receiving on.</summary>
            <remarks>The names are reversed in the SecKeys, just to make things harder...</remarks>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.XspSession.TransmitSPI">
            <summary>The SPI that this session is transmitting on.</summary>
            <remarks>The names are reversed in the SecKeys, just to make things harder...</remarks>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.XspUdp">
            <summary>
            This class is a replacement for <c>SimpleUdpSG</c> which uses <c>XspBuffer</c> to store packets not meant
            for the caller of the Receive methods.  The buffers are then stored until the owner calls Receive.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.XspUdp._socket">
            <summary>The Socket to be used.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.XspUdp._callbacks">
            <summary>A dictionary keyed by Spi (uint) containing a Queue of results.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.XspUdp._conn_resets">
            <summary>The number of connection resets since the last key exchange packet was received.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.XspUdp.DefaultSocketSendBuffer">
            <summary>The default send buffer size for new sockets.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.XspUdp.DefaultSocketReceiveBuffer">
            <summary>The default receive buffer size for new sockets.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspUdp.#ctor">
            <summary>
            Creates a new XspUdp.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspUdp.Finalize">
            <summary>
            Unregister the socket if need be.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspUdp.PollingCallback(ServerTestFramework.LiveService.Auth.XspBuffer,System.Exception)">
            <summary>
            Called when our socket is polled and packets are received.  We then use our dictionary
            to multiplex them out the the proper owners.
            </summary>
            <param name="packetList">The list of packets that were received.</param>
            <param name="exc">The exception that occured.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspUdp.Close">
            <summary>
            Shuts down everything, essentially reseting to a fresh state as if this XspUdp were just constructed.
            It should be completely usable afterwards.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspUdp.Close(System.UInt32)">
            <summary>
            Removes the callback for the given Spi, releasing all associated resources.
            </summary>
            <param name="spi">The Spi to close.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspUdp.CheckSpiAvailability(System.UInt32)">
            <summary>
            Checks to see if the requested Spi is available.  If there are packets waiting on the Spi, they will be dropped if old.
            </summary>
            <param name="spi">The Spi to check.</param>
            <returns>True if the Spi is available; false if it is actively in use.</returns>
            <remarks>
            If two connections attempt to use the same Spi at the same time, this will not prevent them from interfering with each other.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspUdp.Send(System.Byte[],System.Net.IPEndPoint)">
            <summary>
            Sends the bytes to the remote host.
            </summary>
            <param name="pb">The buffer to send.</param>
            <param name="host">The location to send to.</param>
            <exception cref="T:ServerTestFramework.LiveService.Auth.XspUdpException">
            Thrown if the total bytes sent is not pb.Length.
            </exception>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspUdp.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)">
            <summary>
            Sends the subset of bytes to the remote host.
            </summary>
            <param name="pb">The buffer to send.</param>
            <param name="cb">The number of bytes to send from the start of the buffer.</param>
            <param name="host">The location to send to.</param>
            <exception cref="T:ServerTestFramework.LiveService.Auth.XspUdpException">
            Thrown if the total bytes sent is not cb.
            </exception>
            <remarks>The was called SendFast in SimpleUdpSG, for what reason I do not know.</remarks>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspUdp.Send(ServerTestFramework.LiveService.Auth.XspBuffer,System.Net.IPEndPoint)">
            <summary>
            Sends the XspBuffer to the remote host.
            </summary>
            <param name="buffer">The buffer to send.</param>
            <param name="host">The location to send to.</param>
            <exception cref="T:ServerTestFramework.LiveService.Auth.XspUdpException">
            Thrown if the total bytes sent is not buffer.RawBufferLength.
            </exception>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspUdp.SendToWithRetry(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
            <summary>
            Contains code to record and retry a failed SendTo due to WSAECONNRESET.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspUdp.AttachForSpi(System.UInt32,ServerTestFramework.LiveService.Auth.XspUdp.ReceiveCallback)">
            <summary>
            Registers the callback for the given spi.
            </summary>
            <param name="spi">The spi to register the callback under.</param>
            <param name="callback">The callback for the spi.</param>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.XspUdp.MySocket">
            <summary>Wrapper for _socket that will create it if needed.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.XspUdp.LocalEndpoint">
            <summary>
            The endpoint of the local socket.  May not be correct until the first send or receive completes
            successfully.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.XspUdp.ReceiveCallback">
            <summary>
            A callback for receiving a packet.
            It is expected that this execute quickly, such as simply queueing the packet for later processing.
            </summary>
            <param name="packet">The packet that was received.</param>
            <param name="connResets">
            The number of connection resets seen since the last key exchange packet.
            Only valid when packet is a key exchange packet.
            </param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.XspUdpException">
            <summary>
            An exception generated by the XspUdp class that is used when a system defined exception did not fit.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.XspBufferManager">
            <summary>
            Manages a set of XspBuffers.  Allows the user to allocate and free them for improved performance.
            The goal is to limit the number of news and eventual garbage collections, not to be a perfect list.
            Speed is the most important factor.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.XspBufferManager.FreeListHead">
            <summary>The head of the free list.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.XspBufferManager.FreeListLock">
            <summary>Locking object for FreeListHead access.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspBufferManager.Allocate">
            <summary>
            Allocates an XspBuffer, which means either giving a free one back or making a new one.
            </summary>
            <returns>An XspBuffer.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XspBufferManager.Free(ServerTestFramework.LiveService.Auth.XspBuffer)">
            <summary>
            Frees an XspBuffer, making it available for a later allocate.  The XspBuffer need not have been Allocated
            with the XspBufferManager.
            </summary>
            <param name="buffer">The buffer to free.</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.UdpSocketPolling">
            <summary>
            Polls registered sockets for received packets, passing them back to the respective callback.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.UdpSocketPolling.MinSize">
            <summary>The minimum size of _registered.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.UdpSocketPolling.GrowthFactor">
            <summary>Growth factor for array expansion.  Also determines collapse value (inverse squared).</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.UdpSocketPolling.MinSleep">
            <summary>Minimum sleep time for the poll thread after no receives.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.UdpSocketPolling.MaxSleep">
            <summary>Maximum sleep time for the poll thread after no receives.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.UdpSocketPolling.SleepIncr">
            <summary>Sleep time increment for the poll thread after no receives.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.UdpSocketPolling._registered">
            <summary>Array of sockets to poll.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.UdpSocketPolling._count">
            <summary>Total occupied slots in _registered.</summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.UdpSocketPolling._pollster">
            <summary>Thread that does the polling.</summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.UdpSocketPolling.Register(System.Net.Sockets.Socket,ServerTestFramework.LiveService.Auth.UdpSocketPolling.ReceiveCallback)">
            <summary>
            Put a socket into the polling rotation.
            </summary>
            <param name="socket">The socket to poll.</param>
            <param name="callback">The callback to use when data is received.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.UdpSocketPolling.Unregister(System.Net.Sockets.Socket)">
            <summary>
            Removes a registered socket.  This call guarantees an array copy, linear search, then another copy to remove.
            Keep calls to a minimum.
            </summary>
            <param name="socket">The socket to remove.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.UdpSocketPolling.Poll">
            <summary>
            Polls the registered sockets.
            Remember that _count and _registered can change at any time.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.UdpSocketPolling.Unit">
            <summary>
            A registered socket to poll.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.UdpSocketPolling.ReceiveCallback">
            <summary>
            A callback used whenever packets are received.
            </summary>
            <param name="packetList">A list of packets.</param>
            <param name="exc">An exception that occured when receiving.</param>
            <remarks>
            Either packetList or exc may be null.  If both are non-null, the exception occured after the packets in the list.
            The first packet received will be the head of the list.
            </remarks>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.AskdcGenericRequestInput">
            <summary> These fields are used when SetRequest is called, to populate the relevent portions of the base KerberosRequest.  This contains fields for all platforms, though not all platforms use all fields. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.RequestInputCommon">
            <summary> These fields are used when SetRequest is called, to populate the relevent portions of the base KerberosRequest.  This contains fields for all platforms, though not all platforms use all fields. </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.RequestInputCommon.PreauthsToGenerate">
            <summary> If this is null, the default preauths will be used.  If this is not null then only these preauths will be included in the request.  If needed, preauths containing nonsense will be generated to satisfy this list. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.RequestInputCommon.GetDefaultPreauthsToGenerate">
            <summary> Retrieves a list of preauths that will be generated by default.  Note that this may vary based on the current input parameters. </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.RequestInputCommon.Preauths">
            <summary> Holds all the specific preauths generated for this request. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.RequestInputCommon.ClearPreauths">
            <summary> Clears all preauths that have been generated. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.RequestInputCommon.GeneratePreauths">
            <summary> Creates all the preauths required for the request, based on the other input fields. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.RequestInputCommon.FindPreauth``1(System.Int32)">
            <summary> Finds a preauth of the specific number. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.RequestInputCommon.FindPreauth``1">
            <summary> Finds a preauth of the specific type. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.RequestInputCommon.SetRequestTime(System.DateTime)">
            <summary> Sets the request time. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.RequestInputCommon.GetRequestTime">
            <summary> Gets the current requset time. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.RequestInputCommon.SetRandomNOnce">
            <summary> Sets a new random nonce. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.RequestInputCommon.GetNOnce">
            <summary> Gets the current nonce. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.RequestInputCommon.PrepareForResend">
            <summary> Sets new nonces and updates the request time to the current time (or a time greater than the last request if the same), to prepare to resend a request because a packed was lost. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcGenericRequestInput.SetMachineDefaults(ServerTestFramework.LiveService.Auth.XmacsGenericReplyOutput,System.Byte[],ServerTestFramework.LiveService.Auth.Asn.Kerberos.Ticket)">
            <summary> Sets defaults for a machine request.  If previousTickets is not null then previous authentication is carried over. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcGenericRequestInput.SetUserDefaults(ServerTestFramework.LiveService.Auth.KdcUser,System.Byte[],ServerTestFramework.LiveService.Auth.Asn.Kerberos.Ticket)">
            <summary> Sets defaults for a user request.  If previousTickets is not null then previous authentication is carried over. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcGenericRequestInput.SetRequestTime(System.DateTime)">
            <summary> Sets the request time. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcGenericRequestInput.GetRequestTime">
            <summary> Gets the current requset time. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcGenericRequestInput.SetRandomNOnce">
            <summary> Sets a new random nonce. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcGenericRequestInput.GetNOnce">
            <summary> Gets the current nonce. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcGenericRequestInput.SetEchoPreauth(ServerTestFramework.LiveService.Auth.KerberosError,System.Boolean)">
            <summary> Sets the echo preauth data from a kerberos preauth required error response.  Optionally attempts to decrypt it (failure is ignored). </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcGenericRequestInput.SetEchoPreauth(System.Byte[],System.Boolean)">
            <summary> Creates the echo preauth and sets the data it contains.  Optionally attempts to decrypt it (failure is ignored).</summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.AskdcGenericRequest">
            <summary> Used to build an Generic Askdc Request. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.KerberosRequestWithInput">
            <summary> Common interface for our kerberos requests, to set the higher level input into the base KerberosRequest. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.KerberosRequest">
            <summary> Represents a kerberos request (rfc 4120). </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Compound.ExplicitTagLengthValue">
            <summary> This is a TagLengthValue contained within another Tag-Length pair, which is how explicit tagging is done. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.AsnValueBase">
            <summary> Used to build up a collection of asn encoded bytes. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Compound">
            <summary> Basic ASN encodings that are made up of either multiple or nested ASN types. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Compound.TagLengthValue">
            <summary> A Tag-Length-Value.  This is the basis for most ASN encoding.  Note that the value itself might be another TagLengthValue, or some other ASN type. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Compound.TagLengthValue`1">
            <summary> A typed version of the generic TagLengthValue.  Value and Tag are initally set a new instance and that instance's default tag. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Compound.ExplicitTagLengthValue">
            <summary> This is a TagLengthValue contained within another Tag-Length pair, which is how explicit tagging is done. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Compound.Sequence">
            <summary> A sequence or sequence of. (0x10) </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.IGetDefaultTag">
            <summary> Returns an asn tag that identifies an object. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Compound.OctetString">
            <summary> A string of 8-bit binary values, which are taken from a nested asn value. (0x04) </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Compound.AsnValueParser">
            <summary> Processes asn TLVs or universal tag values. </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.Asn.Compound.AsnValueParser.ThrowOnBadAsn">
            <summary> Controls whether the parser will throw when parsing bad ASN or whether it instead places a BadAsnBytes structure into the tree. </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.Asn.Compound.AsnValueParser.ConvertExplicitTags">
            <summary> Controls whether a TagLengthValue of a TagLengthValue gets converted to an ExplicitTagLengthValue. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.Asn.Compound.AsnValueParser.Parse(System.Byte[],System.Int64,System.Int64,System.Int64@)">
            <summary> Processes an asn tag-length-value into the appropriate asn structure (including all nested structures). </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.Asn.Compound.AsnValueParser.ParseTagValue(ServerTestFramework.LiveService.Auth.Asn.Raw.Tag,System.Byte[],System.Int64,System.Int64,System.Int64@)">
            <summary> Creates as asn structure for a specific tag type and parses data into it. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KerberosRequest.ConstructRequest">
            <summary> Creates the above glue components and links all data into a hierarchy then updates length fields.  After this call, GetBytes can be called to produce the actual request to send. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KerberosRequest.Relink">
            <summary> Links the glue and data into a hierarchy. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KerberosRequest.RecalculateLengths">
            <summary> Recalculates all lengths fields in the hierarchy. </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.KerberosRequestWithInput.Input">
            <summary> Data used to populate the base KerberosRequest. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KerberosRequestWithInput.SetRequest">
            <summary> Sets all the appropriate fields in a KerberosRequest based on Input. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcGenericRequest.CreateForClientType(ServerTestFramework.LiveService.Auth.AuthContext.ClientTypes)">
            <summary> Creates an askdc request object for a specific platform. </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.AskdcGenericRequest.Input">
            <summary> Data used to populate the base KerberosRequest. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.AskdcGenericReplyOutput">
            <summary> Output from askdc needed for further use by askdc or for use by xkdc. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.AskdcGenericReply">
            <summary> Used to parse an Generic Askdc Reply. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.KerberosReply">
            <summary> Represents a kerberos reply (rfc 4120). </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KerberosReply.CreateFromAsn``1(ServerTestFramework.LiveService.Auth.Asn.AsnValueBase)">
            <summary> Walks through an asn tree containing a kerberos reply and creates a KerberosReply using the data from the tree.  This does not validate the presence of all fields.  This also does not decrypt anything. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KerberosReply.DecryptBody(System.Byte[])">
            <summary> Decrypts the contents of EncryptedData and stores it in Body. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcGenericReply.Decrypt(System.Byte[],System.Byte[])">
            <summary> Decrypts the body, tickets, and preauths.  If a key is not supplied, that step is skipped.  This also populates some of the generic Output member.  Returns true only if everything possible was fully decrypted. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcGenericReply.VerifyBasics">
            <summary> Verifies that various basic fields common to all askdc replies are correct. </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServerTestFramework.LiveService.Auth.AskdcGenericReply.CreateFromAsnForClientType(ServerTestFramework.LiveService.Auth.Asn.AsnValueBase,ServerTestFramework.LiveService.Auth.AuthContext.ClientTypes)" -->
        <member name="T:ServerTestFramework.LiveService.Auth.AskdcPCRequestInput">
            <summary> These fields are used when SetRequest is called, to populate the relevent portions of the KerberosRequest.  This is a subset of everything in the request, but should contain all the most common stuff we want to trivially play with. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcPCRequestInput.GetDefaultPreauthsToGenerate">
            <summary> Retrieves a list of preauths that will be generated by default.  Note that this may vary based on the current input parameters. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcPCRequestInput.GeneratePreauths">
            <summary> Creates all the preauths required for the request, based on the other input fields. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcPCRequestInput.SetMachineDefaults(ServerTestFramework.LiveService.Auth.XmacsGenericReplyOutput,System.Byte[],ServerTestFramework.LiveService.Auth.Asn.Kerberos.Ticket)">
            <summary> Sets defaults for a machine request.  If previousTickets is not null then previous authentication is carried over. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcPCRequestInput.SetUserDefaults(ServerTestFramework.LiveService.Auth.KdcUser,System.Byte[],ServerTestFramework.LiveService.Auth.Asn.Kerberos.Ticket)">
            <summary> Sets defaults for a user request.  If previousTickets is not null then previous authentication is carried over. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcPCRequestInput.SetDefaults(System.String,System.Byte[])">
            <summary> Sets defaults for an initial machine-only request. consoleId should be computed from the machine id in the form PC.012345678901@XBOX.COM.  If the key is not specified, it is calculated based soley on consoleId. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcPCRequestInput.SetDefaultsPlainPassport(ServerTestFramework.LiveService.Auth.PassportAuth)">
            <summary> Sets the defaults for an initial passport user request using the old unencrypted preauth. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcPCRequestInput.SetDefaultsEncryptedPassport(ServerTestFramework.LiveService.Auth.PassportAuth,System.String,System.Byte[])">
            <summary> Sets the defaults for an initial passport user request using the new encrypted preauth. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcPCRequestInput.SetCompoundDefaults(System.String,System.Byte[],System.Byte[],ServerTestFramework.LiveService.Auth.Asn.Kerberos.Ticket)">
            <summary> Sets the defaults for a machine request that contains a compound identity.   consoleId should be computed from the machine id in the form PC.012345678901@XBOX.COM.  If the client key is not specified, it is calculated based based on consoleId.  previousTicket MUST be specified.  If sessionKey isn't specified, it is taken from the previous ticket. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcPCRequestInput.SetCompoundDefaultsPlainPassport(ServerTestFramework.LiveService.Auth.PassportAuth,System.Byte[],System.Byte[],ServerTestFramework.LiveService.Auth.Asn.Kerberos.Ticket)">
            <summary> Sets the defaults for a user request that contains a compound identity.   If the principalKey is not specified, it is calculated normally.  previousTicket MUST be specified.  If sessionKey isn't specified, it is taken from the previous ticket. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcPCRequestInput.SetCompoundDefaultsEncryptedPassport(ServerTestFramework.LiveService.Auth.PassportAuth,System.String,System.Byte[],System.Byte[],ServerTestFramework.LiveService.Auth.Asn.Kerberos.Ticket)">
            <summary> Sets the defaults for a user request that contains a compound identity.   If the principalKey is not specified, it is calculated normally.  previousTicket MUST be specified.  If sessionKey isn't specified, it is taken from the previous ticket. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcPCRequestInput.CalculateClientNameFromMachineID(System.UInt64)">
            <summary> Builds the ClientName field from a pc machine id.  This will look something like: PC.00000022EF3D@XBOX.COM </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.AskdcPCRequest">
            <summary> Used to build an PC Askdc Request. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcPCRequest.SetRequest">
            <summary> Sets all the appropriate fields in a KerberosRequest based on Input. </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.AskdcPCRequest.Input">
            <summary> Casts the base Input as input for the current platform. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.AskdcPCReply">
            <summary> Used to parse an PC Askdc Reply. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcPCReply.Decrypt(System.Byte[],System.Byte[])">
            <summary> Decrypts the body, tickets, and preauths.  If a key is not supplied, that step is skipped.  This also populates some of the generic Output member.  Returns true only if everything possible was fully decrypted. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.AskdcXbox1RequestInput">
            <summary> These fields are used when SetRequest is called, to populate the relevent portions of the KerberosRequest.  This is a subset of everything in the request, but should contain all the most common stuff we want to trivially play with. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcXbox1RequestInput.GetDefaultPreauthsToGenerate">
            <summary> Retrieves a list of preauths that will be generated by default.  Note that this may vary based on the current input parameters. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcXbox1RequestInput.GeneratePreauths">
            <summary> Creates all the preauths required for the request, based on the other input fields. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcXbox1RequestInput.SetMachineDefaults(ServerTestFramework.LiveService.Auth.XmacsGenericReplyOutput,System.Byte[],ServerTestFramework.LiveService.Auth.Asn.Kerberos.Ticket)">
            <summary> Sets defaults for a machine request.  If previousTickets is not null then previous authentication is carried over. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcXbox1RequestInput.SetUserDefaults(ServerTestFramework.LiveService.Auth.KdcUser,System.Byte[],ServerTestFramework.LiveService.Auth.Asn.Kerberos.Ticket)">
            <summary> Sets defaults for a user request.  If previousTickets is not null then previous authentication is carried over. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcXbox1RequestInput.SetDefaults(System.String,System.Byte[])">
            <summary> Sets defaults for an initial machine or user request. consoleOrUserName should be either a console id of the form XE.012345678901, or a gamertag.  If the key is not specified, it is calculated based soley on consoleOrUserName. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcXbox1RequestInput.SetCompoundDefaults(System.String,System.Byte[],System.Byte[],ServerTestFramework.LiveService.Auth.Asn.Kerberos.Ticket)">
            <summary> Sets the defaults for a request that contains a compound identity.   consoleOrUserName should be either a console id of the form XE.012345678901, or a gamertag.  If the client key is not specified, it is calculated based based on consoleOrUserName.  previousTicket MUST be specified.  If sessionKey isn't specified, it is taken from the previous ticket. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.AskdcXbox1Request">
            <summary> Used to build an Xbox1 Askdc Request. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcXbox1Request.SetRequest">
            <summary> Sets all the appropriate fields in a KerberosRequest based on Input. </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.AskdcXbox1Request.Input">
            <summary> Casts the base Input as input for the current platform. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.AskdcXbox1Reply">
            <summary> Used to parse an Xbox1 Askdc Reply. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.AskdcXbox360RequestInput">
            <summary> These fields are used when SetRequest is called, to populate the relevent portions of the KerberosRequest.  This is a subset of everything in the request, but should contain all the most common stuff we want to trivially play with. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcXbox360RequestInput.GetDefaultPreauthsToGenerate">
            <summary> Retrieves a list of preauths that will be generated by default.  Note that this may vary based on the current input parameters. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcXbox360RequestInput.GeneratePreauths">
            <summary> Creates all the preauths required for the request, based on the other input fields. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcXbox360RequestInput.SetMachineDefaults(ServerTestFramework.LiveService.Auth.XmacsGenericReplyOutput,System.Byte[],ServerTestFramework.LiveService.Auth.Asn.Kerberos.Ticket)">
            <summary> Sets defaults for a machine request.  If previousTickets is not null then previous authentication is carried over. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcXbox360RequestInput.SetUserDefaults(ServerTestFramework.LiveService.Auth.KdcUser,System.Byte[],ServerTestFramework.LiveService.Auth.Asn.Kerberos.Ticket)">
            <summary> Sets defaults for a user request.  If previousTickets is not null then previous authentication is carried over. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcXbox360RequestInput.SetDefaults(System.String,System.Byte[])">
            <summary> Sets defaults for an initial machine or user request. consoleOrUserName should be either a console id of the form XE.012345678901, or a gamertag.  If the key is not specified, it is calculated based soley on consoleOrUserName. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcXbox360RequestInput.SetCompoundDefaults(System.String,System.Byte[],System.Byte[],ServerTestFramework.LiveService.Auth.Asn.Kerberos.Ticket)">
            <summary> Sets the defaults for a request that contains a compound identity.   consoleOrUserName should be either a console id of the form XE.012345678901, or a gamertag.  If the client key is not specified, it is calculated based based on consoleOrUserName.  previousTicket MUST be specified.  If sessionKey isn't specified, it is taken from the previous ticket. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.AskdcXbox360Request">
            <summary> Used to build an Xbox360 Askdc Request. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.AskdcXbox360Request.SetRequest">
            <summary> Sets all the appropriate fields in a KerberosRequest based on Input. </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.AskdcXbox360Request.Input">
            <summary> Casts the base Input as input for the current platform. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.AskdcXbox360Reply">
            <summary> Used to parse an Xbox360 Askdc Reply. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.AsnBytes">
            <summary> An AsnValueBase that is an array of stored bytes. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.BadAsnBytes">
            <summary> This may be used by the ASN parser to represent bytes that failed to parse. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.CannotRepresentValueException">
            <summary> Thrown by accessors if a conversion to or from a set of bytes is not possible. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.AsnException">
            <summary> Thrown for asn related errors. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.TagClasses">
            <summary> Possible classes of tags.  This lives in the upper 2 bits of a tag. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Raw">
            <summary> Basic raw ASN values, which are not part of a structured type or type-length-value form. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Raw.VariableLengthPositiveInteger">
            <summary> An arbitrary-length positive integer encoded in septets with the most significant bit set to indicate another octet of data follows.  This is mostly used internally as part of encoding other tags. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Raw.Tag">
            <summary> A tag. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Raw.Length">
            <summary> A length in the range of 0 through 2^1008-1. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Raw.Boolean">
            <summary> A true-or-false value. (0x01) </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Raw.Integer">
            <summary> An arbitrary-length two's compliment integer for storing positive or negative values. (0x02) </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Raw.OctetString">
            <summary> A string of 8-bit binary values. (0x04) </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Raw.BitString">
            <summary> A string of bits.  The first octet contains the count of the number of unused bits in the last octet. (0x03) </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Raw.GeneralString">
            <summary> A general string with 8-bit characters.  TODO: Control characters? (0x1B) </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Raw.GeneralizedTime">
            <summary> Represents a date and time. (0x18) </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.KerberosAsnException">
            <summary> Thrown for kerberos asn related errors. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos">
            <summary> Kerberos-specific ASN encodings. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.KerberosFlags">
            <summary> A bitstring for kerberos flags.  The standard says this value must contain AT LEAST 32 bits.  It will normally contain exactly 32 bits.  Proper DER encoding will only encode as many bits as needed (truncating trailing 0's in excess of the first 32 bits) (the implementation here does not enforce this). This is a raw value. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.APOptions">
            <summary> A bitstring for ap option flags.  The standard says this value must contain AT LEAST 32 bits.  It will normally contain exactly 32 bits.</summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PrincipalName">
            <summary> A sequence of name type and names. This is a tagged value and keeps itself linked together. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.Time">
            <summary> Kerberos Time.  This is identical to GeneralizedTime, except that fractional seconds are always omitted. This is a raw value. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.EncryptionKey">
            <summary> Encryption key. This is a tagged value and keeps itself linked together. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.CommonTypeDataSequence">
            <summary> A sequencey with tag 0 for an integer Type and tag 1 for octet string Data.  This construct is a recurring theme, so this is just a common base class. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.IEncryptable">
            <summary> The class can encrypt or decrypt the data it contains. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.IContainsEncryptedAsn">
            <summary> Exposes the asn tree inside of an encrypted structure. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.IContainsEncryptedBytes">
            <summary> Exposes the raw bytes inside of an encrypted structure. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.EncryptedData">
            <summary> Encrypted data. This is a tagged value and keeps itself linked together.  It is suggested that any derived classes implement either IContainsEncryptedAsn or IContainsEncryptedBytes so that encrypted data may be fuzzed. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.LastRequest">
            <summary> The time(s) of a last request. This is a tagged value. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.Ticket">
            <summary> A kerberos ticket. This is a tagged value and keeps itself linked together. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.EncryptedTicketBody">
            <summary> The body of kerberos ticket, which is encrypted when stored inside a ticket. This keeps itself linked together. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.TransitedEncoding">
            <summary> Data about previous realm authentication. This is a tagged value and keeps itself linked together. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.Authenticator">
            <summary> A kerberos Authenticator structure. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.EncryptedAuthenticator">
            <summary> A kerberos Authenticator structure, encrypted. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.AuthorizationData">
            <summary> Authorization Data.  This is used as part of an authenticator, or inside the encrypted part of a ticket for the service to return data back to itself. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.Checksum">
            <summary> A checksum. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.IGetPreauthNumber">
            <summary> Returns the type number for a preauth. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.Preauth">
            <summary> A Kerberos Preauth.  This is intended to be held directly within the sequence of preauths. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.Preauth`1">
            <summary> A typed version of Preauth, where Data points to an instance of a specific type and Type is initialized to the preauth's value. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthTgsRequest">
            <summary> PADATA_TGS_REQ(1) - Used to get a ticket from our Xkdc.  It is an encoding of an AP-REQ, which contains a ticket from our Askdc and an authenticator. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthXenonMacRequest">
            <summary> PADATA_XENON_MAC_REQUEST(209) - Machine Account Creation Request for Xbox 360. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthXenonMacRequest2">
            <summary> PADATA_XENON_MAC_REQUEST2(219) - Machine Account Creation Request (v2) for Xbox 360. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthPacRequestEx">
            <summary> PADATA_PAC_REQUEST_EX (131) - Privilege Access Certificate Request with... extra!.  This is some variation of a windows PAC request.  It is ASN encoded. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthEncryptedTimestamp">
            <summary> PADATA_ENC_TIMESTAMP(2) - An encrypted timestamp.  it is ASN encoded. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthXboxClientVersion">
            <summary> PADATA_XBOX_CLIENT_VERSION(206) - Xbox client and title version preauth. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthXboxAccountCreation">
            <summary> PADATA_XBOX_ACCOUNT_CREATION(203) - Information about a created machine account.  This is returned by xmacs. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthXboxPPA">
            <summary> PADATA_XBOX_PPA(204) - Pre-Pre-Auth data for the askdc and xbox1 xmacs. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthXenonPPA">
            <summary> PADATA_XENON_PPA(216) - Pre-Pre-Auth data for the askdc for xbox360 machines. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthPCAccountCreationRequest">
            <summary> PADATA_PC_ACCOUNT_CREATION(212) Request.  Request to create a PC machine account.  Note that the preauth number is the same number as the Response. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthPCAccountCreationRequest_EncPart">
            <summary> Encrypted portion of the PreauthPCAccountCreationRequest preauth. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthPCAccountCreationRequest2">
            <summary> PADATA_PC_ACCOUNT_CREATION2(220) Request.  Request to create a PC machine account.  In this version the passport ticket is in the encrypted part, and the request encrypted with a random key. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthPCAccountCreationRequest2_EncPart">
            <summary> Encrypted portion of the PreauthPCAccountCreationRequest2 preauth. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthPCAccountCreationReply">
            <summary> PADATA_PC_ACCOUNT_CREATION(212) Reply.  Response to a PC machine account request.  Note that the preauth number is the same number as the Request. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthPassportAuthenticationRequest">
            <summary> PADATA_PASSPORT_AUTHENTICATION(213) Request.  Request to authenicate a passport user.  Note that the preauth number is the same number as the Response. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthPassportAuthenticationReply">
            <summary> PADATA_PASSPORT_AUTHENTICATION(213) Reply.  Response to a passport authentication request.  Note that the preauth number is the same number as the Request. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthEncryptedPassport">
            <summary> PADATA_ENCRYPTED_PASSPORT_AUTHENTICATION(218) - Encrypted passport ticket authentication.  This us used by the Askdc. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthXboxEcho">
            <summary> PADATA_XBOX_ECHO(205) - Echo response preauth for the askdc. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthXboxServiceRequest1">
            <summary> PADATA_XBOX_SERVICE_REQUEST2(201) - Xbox1 service request. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthXboxServiceRequest2">
            <summary> PADATA_XBOX_SERVICE_REQUEST2(201) - Xbox1 service request that supports more services. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthXenonServiceRequestBase">
            <summary> Access to fields common to all of the different xenon service request preauths.  This is purely to make validation simpler. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthXenonServiceRequest2">
            <summary> PADATA_XENON_SERVICE_REQUEST2(210) - Original Xbox360/PC service request. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthXenonServiceRequest3">
            <summary> PADATA_XENON_SERVICE_REQUEST3(214) - Updated Xbox360/PC service request that supports 128 services. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthXboxServiceAddress">
            <summary> PADATA_XBOX_SERVICE_ADDRESS(202) - Site and service information returned by xkdc for xbox1.  This is a dummy base class used to create the correct derived class based on the contents. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthXboxServiceAddress1">
            <summary> PADATA_XBOX_SERVICE_ADDRESS(202) - Site and service information.  This is returned by xkdc for xbox1. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthXboxServiceAddress2">
            <summary> PADATA_XBOX_SERVICE_ADDRESS(202) - Site and service information.  This is returned by xkdc for xbox1. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.ByteServiceResultValue">
            <summary> Possible responses for requests for byte services. Note that the numeric values here corresponde to XenonServiceAddress3's meanings. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthXenonServiceAddressBase">
            <summary> Fields and methods common to the different xenon service address preauths. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthXenonServiceAddress2">
            <summary> PADATA_XENON_SERVICE_ADDRESS2(211) - Site, service, and privilege information.  This is returned by xkdc in response to a XenonServiceRequest2. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthXenonServiceAddress3">
            <summary> PADATA_XENON_SERVICE_ADDRESS3(215) - Site, service, and privilege information.  This is returned by xkdc in response to a XenonServiceRequest3. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthXenonServiceAddressFailure">
            <summary> XENON_SERVICE_ADDRESS_FAILURE (217) - Failure information returned in response to a XenonServiceRequest3 when the version is >=6 and the overall Hr is not success. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthCompoundIdentity">
            <summary> PADATA_COMPOUND_IDENTITY(130) - A sequence of tickets, obtained from the Askdc and passed back into the Askdc. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.Kerberos.PreauthDummyPlaceholder">
            <summary> A preauth with any number that holds bytes, used for negative tests for preauths we don't know how to generate. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.WindowsPacAuthData">
            <summary> Windows server PAC Authdata.  This is used by both askdc and xkdc. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.WindowsPacAuthData.Create(ServerTestFramework.LiveService.Auth.Asn.Kerberos.CommonTypeDataSequence)">
            <summary> Loads all fields from auth data bytes. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Xuid">
            <summary>
            Represents a user information object contained in an authdata struct
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.XboxAuthDataBase">
            <summary>
            Base authdata clrass for all Xbox authdata structures
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.XboxAuthDataBase.ServerSignature">
            <summary>
            All authdata structs coming back from the XKDC have the signature prepended
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XboxAuthDataBase.GetUser(System.UInt32)">
            <summary>
            Get information about a specific user
            </summary>
            <param name="userIndex">The index of the user to lookup</param>
            <returns>The Xuid (user id and flags) of the specified user</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XboxAuthDataBase.GetUserTrustFactor(System.UInt32)">
            <summary>
            Get the trust factor of a specific user
            </summary>
            <param name="userIndex">The index of the user to lookup</param>
            <returns>A value between 0.0 and 1.0 representing the trust factor of the specified user</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XboxAuthDataBase.HasService(System.UInt32)">
            <summary>
            Determines if the authdata grants a specific service
            </summary>
            <param name="serviceId">The id of the service to check for</param>
            <returns>True if the authdata grants the given service, false otherwise.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XboxAuthDataBase.AddService(System.UInt32)">
            <summary>
            Add a grant for the given service to the authdata
            </summary>
            <param name="serviceId">The id of the service to grant</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XboxAuthDataBase.RemoveService(System.UInt32)">
            <summary>
            Removes a grant for a given service from the authdata
            </summary>
            <param name="serviceId">The id of the service to revoke</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XboxAuthDataBase.RemoveServiceAt(System.UInt32)">
            <summary>
            Allows removal of a service at a specific position in the authdata.
            Depending on the authdata type this will have a different effect
            </summary>
            <param name="index">The index of the service to revoke</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XboxAuthDataBase.GetByteServices">
            <summary> Retrieves a list of byte services that are present. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XboxAuthDataBase.GetDwordServices">
            <summary> Retrieves a list of dword services that are present. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XboxAuthDataBase.GetAltTitleId(System.UInt32)">
            <summary>
            Get an alternate title id from the authdata
            </summary>
            <param name="index">The index to check</param>
            <returns>The alternate title id at the given index</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XboxAuthDataBase.#ctor">
            <summary>
            Create an empty XboxAuthDataBase structure
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XboxAuthDataBase.#ctor(ServerTestFramework.LiveService.Auth.Asn.Kerberos.CommonTypeDataSequence)">
            <summary>
            Create an XboxAuthDataBase structure and populate it from 
            the provided ASN data
            </summary>
            <param name="cdts">The ASN data to create the structure from</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XboxAuthDataBase.ReadFrom(System.IO.BinaryReader)">
            <summary>
            Override in inheriting classes to read raw data from the encoded 
            structure into the version specific authdata fields
            </summary>
            <param name="reader">The reader which contains the raw authdata</param>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.XboxAuthDataBase.ServiceCount">
            <summary>
            Indicates the number of services of a specific type contained in the authdata
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Xbox2XkdcAuthData">
            <summary>
            Xbox2Authdata from inside an xkdc ticket.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.Xbox2XkdcAuthData.#ctor">
            <summary>
            Create an empty Xbox2XkdcAuthData structure
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.Xbox2XkdcAuthData.#ctor(ServerTestFramework.LiveService.Auth.Asn.Kerberos.CommonTypeDataSequence)">
            <summary>
            Create an Xbox2XkdcAuthData structure and populate it from 
            the provided ASN data
            </summary>
            <param name="cdts">The ASN data to create the structure from</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.Xbox2XkdcAuthData.Create(ServerTestFramework.LiveService.Auth.Asn.Kerberos.CommonTypeDataSequence)">
            <summary> Loads all fields from auth data bytes. </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.Xbox2XkdcAuthData.ServiceCount">
            <summary>
            Indicates the total number of services in this authdata
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.XenonAuthDataBase">
            <summary>
            Base Authdata class for all Xenon authdata structures
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.XenonXkdcAuthData">
            <summary> 
            XenonAuthdata from inside an xkdc ticket.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XenonXkdcAuthData.#ctor">
            <summary>
            Create an empty XenonXkdcAuthData structure
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XenonXkdcAuthData.#ctor(ServerTestFramework.LiveService.Auth.Asn.Kerberos.CommonTypeDataSequence)">
            <summary>
            Create an XenonXkdcAuthData structure and populate it from 
            the provided ASN data
            </summary>
            <param name="cdts">The ASN data to create the structure from</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XenonXkdcAuthData.Create(ServerTestFramework.LiveService.Auth.Asn.Kerberos.CommonTypeDataSequence)">
            <summary> Loads all fields from auth data bytes. </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.XenonXkdcAuthData.ServiceCount">
            <summary>
            Indicates the number of DWORD services in this authdata
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Xenon2XkdcAuthData">
            <summary>
            Xenon2Authdata from inside an xkdc ticket.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.Xenon2XkdcAuthData.#ctor">
            <summary>
            Create an empty Xenon2XkdcAuthData structure
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.Xenon2XkdcAuthData.#ctor(ServerTestFramework.LiveService.Auth.Asn.Kerberos.CommonTypeDataSequence)">
            <summary>
            Create an Xenon2XkdcAuthData structure and populate it from 
            the provided ASN data
            </summary>
            <param name="cdts">The ASN data to create the structure from</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.Xenon2XkdcAuthData.Create(ServerTestFramework.LiveService.Auth.Asn.Kerberos.CommonTypeDataSequence)">
            <summary> Loads all fields from auth data bytes. </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.Xenon2XkdcAuthData.ServiceCount">
            <summary>
            Indicates the number of extended services in this authdata
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.AsnFuzzing">
            <summary> Manages fuzzing ASN trees. </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.Asn.AsnFuzzing.Enabled">
            <summary> Globally enables or disables fuzzing of ASN trees. </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.Asn.AsnFuzzing.Verbose">
            <summary> Enables verbose output of what structures are being fuzzed. </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.Asn.AsnFuzzing.DebugReEncryption">
            <summary> Used to debug re-encryption bugs. </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Auth.Asn.AsnFuzzing.FuzzMethods">
            <summary> List of handlers for fuzzing different types, and their propability of use weights. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.Asn.AsnFuzzing.AddFuzzMethod(System.Type,ServerTestFramework.LiveService.Auth.Asn.AsnFuzzing.FuzzAsnValueDelegate,System.Int32)">
            <summary> Registers a new fuzzing method for an ASN type. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.Asn.AsnFuzzing.Fuzz(ServerTestFramework.LiveService.Auth.Asn.AsnValueBase)">
            <summary> Fuzzes an ASN value tree. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.Asn.AsnFuzzing.FuzzAsnValueDelegate">
            <summary> Delegate to call to fuzz an object. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.KdcClientException">
            <summary> Thrown for KdcClient errors. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.KdcClient">
            <summary> Wrapper for making requests to and retrieving responses from Xmacs, Askdc, and Xkdc. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcClient.ClearXmacs">
            <summary> Clears out any stored xmacs data. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcClient.CreateXmacsRequest">
            <summary> This creates a new XmacsRequest and sets SetDefaults for it.  If an xmacs request had already been done and not cleared, the previously created machine will be reset instead. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcClient.SetXmacsReply(ServerTestFramework.LiveService.Auth.Asn.AsnValueBase)">
            <summary> Parses an xmacs reply from ASN. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcClient.ExecuteXmacs(System.Boolean)">
            <summary> Synchronously sends and receieves the xmacs request and stores the reply. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcClient.ClearAskdc">
            <summary> Clears out any stored askdc data. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcClient.CreateAskdcMachineRequest">
            <summary> This creates a new AskdcRequest and sets defaults for it.  If there is a previous askdc ticket it will be carried over into this request.  If no xmacs output exists an xmacs request will be executed. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcClient.CreateAskdcUserRequest(ServerTestFramework.LiveService.Auth.KdcUser)">
            <summary> This creates a new AskdcRequest and sets defaults for it.  If there is a previous askdc ticket it will be carried over into this request. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcClient.SetAskdcReply(ServerTestFramework.LiveService.Auth.Asn.AsnValueBase)">
            <summary> Parses an askdc reply from ASN. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcClient.ExecuteAskdc(System.Boolean)">
            <summary> Synchronously sends and receieves the askdc request and stores the reply. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcClient.ClearXkdc">
            <summary> Clears out any stored xkdc data. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcClient.CreateXkdcRequest">
            <summary> This creates a new XkdcRequest and sets SetDefaults for it. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcClient.SetXkdcReply(ServerTestFramework.LiveService.Auth.Asn.AsnValueBase)">
            <summary> Parses an xkdc reply from ASN. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcClient.ExecuteXkdc(System.Boolean)">
            <summary> Synchronously sends and receieves the xkdc request and stores the reply. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcClient.XkdcResultHasMoreSites">
            <summary> Returns whether the last xkdc reply had services on other sites, or true if we haven't done anything yet. </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServerTestFramework.LiveService.Auth.KdcClient.SetXkdcRequestForNextSite" -->
        <member name="P:ServerTestFramework.LiveService.Auth.KdcClient.SignedInXmacs">
            <summary>Indicates if this client has completed an Xmacs request</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.KdcClient.SignedInAskdc">
            <summary>Indicates if this client has completed an Askdc request</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.KdcClient.SignedInXkdc">
            <summary>Indicates if this client has completed an Xkdc request</summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.KdcClientXbox360">
            <summary> Identical to KdcClient except member types are xbox360-specific. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.KdcClientPC">
            <summary> Identical to KdcClient except member types are pc-specific. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.KdcClientXbox1">
            <summary> Identical to KdcClient except member types are xbox1-specific. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsKeys.Encrypt(System.Byte[])">
            <summary> Encrypts data using the default xmacs public key. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsKeys.EncryptWithTestKey(System.Byte[])">
            <summary> Encrypts data using the test xmacs public key. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsKeys.EncryptWithRealKey(System.Byte[])">
            <summary> Encrypts data using the real xmacs public key. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ConsoleKeys.GenerateCertificateSignature(System.Byte[])">
            <summary> Does a SHA1 hash on certificateData (must be a XE_CONSOLE_CERTIFICATE), and generates a signature from that using the xenon test master signing key. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ConsoleKeys.SignHashWithConsoleKey(System.Byte[])">
            <summary> Signs data from a sha1 hash using the common test xenon console key and returns it. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ConsoleKeys.SignHashWithConsoleCspBlob(System.Byte[],System.Byte[])">
            <summary> Signs data from a sha1 hash using a specific xenon console key and returns it. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.ConsoleKeys.GenerateConsoleKeyPairCspBlob(System.Byte[]@,System.Byte[]@)">
            <summary> Generates a csp blob representing a new public/private console key pair that is used in the xenon console certificate. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcCrypto.RC4HMACEncrypt(System.Byte[],System.Byte[],System.UInt32)">
            <summary> Encrypts data using "rc4 hmac". </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcCrypto.RC4HMACDecrypt(System.Byte[],System.Byte[],System.UInt32)">
            <summary> Decrypts data using "rc4 hmac", key and salt. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcCrypto.RC4HMACDecryptUsingNonce(System.Byte[],System.Byte[],System.UInt32,System.UInt32)">
            <summary> Decrypts data using a key, salt, and an nonce. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcCrypto.RC4HMACEncryptUsingNonce(System.Byte[],System.Byte[],System.UInt32,System.UInt32)">
            <summary> Encrypts data using a key, salt, and an nonce. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcCrypto.GenerateHMAC4SignatureUsingNonceAndKey(System.Byte[],System.Byte[],System.UInt32)">
            <summary> Generates a signature, using a key and an nonce. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcCrypto.ComputeCompoundIdentityKey(System.Byte[],System.Byte[])">
            <summary> Computes a compound identity key used for the askdc when the compound identity preauth is present. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcCrypto.ComputePCPrincipalKey(System.Byte[],System.UInt64)">
            <summary> Computes a principal key used to encrypt the pc account creation preauth, from the passport ticket session key and the pc nonce. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.KerberosErrorException">
            <summary> An exception containing a kerberos error. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.KerberosError">
            <summary> Represents a kerberos error (rfc 4120). </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KerberosError.CreateFromAsn(ServerTestFramework.LiveService.Auth.Asn.AsnValueBase)">
            <summary> Walks through an asn tree containing a kerberos error and creates a KerberosError using the data from the tree.  If the message is not a kerberos error, this throws. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KerberosError.CreateFromAsnIfError(ServerTestFramework.LiveService.Auth.Asn.AsnValueBase)">
            <summary> Walks through an asn tree containing a kerberos error and creates a KerberosError using the data from the tree.  If the message is not tagged as a kerberos error, this returns null. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.Asn.PreauthHelpers.CreateSpecificPreauth(ServerTestFramework.LiveService.Auth.Asn.Kerberos.Preauth)">
            <summary> Attempts to create a specific preauth type from a generic preauth. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.Asn.PreauthHelpers.GenerateDefaultPreauth(System.Int32,System.Byte[],System.DateTime,System.String,ServerTestFramework.LiveService.Auth.Asn.Kerberos.Ticket,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt64,ServerTestFramework.LiveService.Auth.PassportTicket,ServerTestFramework.LiveService.Auth.PassportTicket,ServerTestFramework.LiveService.Auth.ConsoleCertificate,System.Boolean,System.Byte[])">
            <summary> Creates a preauth of the specific type.  If the preauth is unknown or not enough information was provided to generate it, a dummy preauth will be created. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.KerberosReplyBody">
            <summary> Portion of the reply contained within the EncryptedData field of a KerberosReply. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KerberosReplyBody.CreateFromAsn(ServerTestFramework.LiveService.Auth.Asn.AsnValueBase)">
            <summary> Walks through an asn tree containing a kerberos reply body and creates a KerberosReplyBody using the data from the tree.  This does not validate the presence of all fields. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.KerberosReplyHelpers">
            <summary> Helpers used in mapping asn trees to replies. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.SimpleKdcClient">
            <summary> Allows you to set a few basic properties then perform all the steps needed to get an Xkdc ticket without knowing how the KDC works. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.SimpleKdcClient.Execute">
            <summary> Creates a machine account with xmacs, authenticates all users and the machine with askdc, then gets one or more tickets from the xkdc. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.PassportTicket">
            <summary> Holds a passport ticket and associated session key (if any) </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.PassportAuth">
            <summary> Utility to create a passport user and/or get a passport ticket. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.PassportAuth.CreateUser">
            <summary> Creates a passport user through uacs and populates the UserName and Password fields. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.PassportAuth.ClearTickets">
            <summary> Clears all cached passport tickets. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.PassportAuth.GetTicket(System.String,ServerTestFramework.LiveService.Auth.AuthClientBase.PassportSite)">
            <summary> Retrieves a passport ticket for the specific policy (from cache if able, else hits passport).  If no username/password has been set a user will be created. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.PassportAuth.GetTicket(System.String,System.String)">
            <summary> Retrieves a passport ticket for the specific policy (from cache if able, else hits passport).  If no username/password has been set a user will be created. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.PassportAuth.GetRandomCachedTicket">
            <summary> Returns a cached ticket if there is one, without preference for which ticket type it is. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.PassportAuth.HasCachedTicket(System.String,ServerTestFramework.LiveService.Auth.AuthClientBase.PassportSite)">
            <summary> Returns whether there is a cached ticket for the specific policy. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.PassportAuth.HasCachedTicket(System.String,System.String)">
            <summary> Returns whether there is a cached ticket for the specific policy. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.PassportAuth.SetTicket(System.String,ServerTestFramework.LiveService.Auth.AuthClientBase.PassportSite,ServerTestFramework.LiveService.Auth.PassportTicket)">
            <summary> Stores a ticket in the cache for a user for a policy. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.PassportAuth.SetTicket(System.String,System.String,ServerTestFramework.LiveService.Auth.PassportTicket)">
            <summary> Stores a ticket in the cache for a user for a policy. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.KdcUser">
            <summary> Minimal amount of information needed to authenticate a user with the KDC. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcUser.CreateUser">
            <summary> Creates an xbox user and creates a passport and links them. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcUser.CreateOrUseExisting(System.String,System.Boolean)">
            <summary> Creates a user with a specific name, and optionally creates a passport for them. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcUser.UseExisting(System.String)">
            <summary> Uses an existing user with a specific name. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcUser.UseExisting(System.UInt64)">
            <summary> Uses an existing user with a specific name. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcUser.CreateUser(System.Boolean)">
            <summary> Creates an xbox user with a random name, and optionally creates a passport and links them. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcUser.SetFakeUser(System.String,System.Boolean)">
            <summary> </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.KdcUser.LinkPassport(ServerTestFramework.LiveService.Auth.PassportAuth)">
            <summary> Links this user to a passport.  If pp is null, a new one will be created. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.XkdcGenericRequestInput">
            <summary> These fields are used when SetRequest is called, to populate the relevent portions of the KerberosRequest.  This is a subset of everything in the request, but should contain all the most common stuff we want to trivially play with. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcGenericRequestInput.SetServices(System.UInt32[])">
            <summary> Sets Services and updates ServerNames accordingly.  If serviceList is null, it will be an autodiscover request. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcGenericRequestInput.SetDefaults(ServerTestFramework.LiveService.Auth.AskdcGenericReplyOutput)">
            <summary> Sets defaults for a new xkdc request. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcGenericRequestInput.SetRequestTime(System.DateTime)">
            <summary> Sets the request time. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcGenericRequestInput.GetRequestTime">
            <summary> Gets the current requset time. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcGenericRequestInput.SetRandomNOnce">
            <summary> Sets a new random nonce. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcGenericRequestInput.GetNOnce">
            <summary> Gets the current nonce. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcGenericRequestInput.CopyTo(ServerTestFramework.LiveService.Auth.XkdcGenericRequestInput)">
            <summary>
            Copy all of the properties from this input object onto another.
            </summary>
            <param name="input">The input object to copy </param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcGenericRequestInput.GetServiceRequestVersion">
            <summary> Gets the service request version that will be used based on the current state. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcGenericRequest.CreateForClientType(ServerTestFramework.LiveService.Auth.AuthContext.ClientTypes)">
            <summary> Creates an xmacs request object for a specific platform. </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.XkdcGenericRequest.Input">
            <summary>
            Data used to populate the base KerberosRequest.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.XkdcGenericReplyOutput">
            <summary> Summarized and reformatted subset of the output from xkdc.  This contains everything needed to sign into the sg. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcGenericReply.Decrypt(System.Byte[],System.Byte[],System.UInt32)">
            <summary> Decrypts the body, tickets, and preauths.  If a key is not supplied, that step is skipped.  This also populates some of the generic Output member.  Returns true only if everything possible was fully decrypted. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcGenericReply.VerifyBasics">
            <summary> Verifies that various basic fields common to all xkdc replies are correct. </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServerTestFramework.LiveService.Auth.XkdcGenericReply.CreateFromAsnForClientType(ServerTestFramework.LiveService.Auth.Asn.AsnValueBase,ServerTestFramework.LiveService.Auth.AuthContext.ClientTypes)" -->
        <member name="T:ServerTestFramework.LiveService.Auth.XkdcPCRequestInput">
            <summary> These fields are used when SetRequest is called, to populate the relevent portions of the KerberosRequest.  This is a subset of everything in the request, but should contain all the most common stuff we want to trivially play with. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcPCRequestInput.GetDefaultPreauthsToGenerate">
            <summary> Retrieves a list of preauths that will be generated by default.  Note that this may vary based on the current input parameters. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcPCRequestInput.GeneratePreauths">
            <summary> Creates all the preauths required for the request, based on the other input fields. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcPCRequestInput.SetDefaults(ServerTestFramework.LiveService.Auth.AskdcGenericReplyOutput)">
            <summary> Sets defaults for a new xkdc request. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcPCRequestInput.SetDefaults(System.String,System.Byte[],ServerTestFramework.LiveService.Auth.Asn.Kerberos.Ticket)">
            <summary> Sets defaults for a request. ConsoleId should be of the form: PC.012345678901.  If the key is not specifcied, it is calculated based on the consoleId. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcPCRequestInput.GetServiceRequestVersion">
            <summary> Gets the service request version that will be used based on the current state. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcPCRequest.SetRequest">
            <summary> Sets all the appropriate fields in a KerberosRequest based on Input. </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.XkdcPCRequest.Input">
            <summary> Casts the base Input as input for the current platform. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcPCReply.Decrypt(System.Byte[],System.Byte[],System.UInt32)">
            <summary> Decrypts the body, tickets, and preauths.  If a key is not supplied, that step is skipped.  This also populates some of the generic Output member.  Returns true only if everything possible was fully decrypted. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcPCReply.VerifyBasics">
            <summary> Verifies that various basic fields common to all pc xkdc replies are correct. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.XkdcXbox1RequestInput">
            <summary> These fields are used when SetRequest is called, to populate the relevent portions of the KerberosRequest.  This is a subset of everything in the request, but should contain all the most common stuff we want to trivially play with. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcXbox1RequestInput.GetDefaultPreauthsToGenerate">
            <summary> Retrieves a list of preauths that will be generated by default.  Note that this may vary based on the current input parameters. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcXbox1RequestInput.GeneratePreauths">
            <summary> Creates all the preauths required for the request, based on the other input fields. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcXbox1RequestInput.SetDefaults(ServerTestFramework.LiveService.Auth.AskdcGenericReplyOutput)">
            <summary> Sets defaults for a new xkdc request. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcXbox1RequestInput.SetDefaults(System.String,System.Byte[],ServerTestFramework.LiveService.Auth.Asn.Kerberos.Ticket)">
            <summary> Sets defaults for a request. ConsoleId should be of the form: SN.012345678901.  If the key is not specifcied, it is calculated based on the consoleId. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcXbox1RequestInput.SetServices(System.UInt32[])">
            <summary> Sets Services and updates ServerNames accordingly.  If serviceList is null, it will be an autodiscover request. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcXbox1RequestInput.GetServiceRequestVersion">
            <summary> Gets the service request version that will be used based on the current state. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcXbox1Request.SetRequest">
            <summary> Sets all the appropriate fields in a KerberosRequest based on Input. </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.XkdcXbox1Request.Input">
            <summary> Casts the base Input as input for the current platform. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcXbox1Reply.Decrypt(System.Byte[],System.Byte[],System.UInt32)">
            <summary> Decrypts the body, tickets, and preauths.  If a key is not supplied, that step is skipped.  This also populates some of the generic Output member.  Returns true only if everything possible was fully decrypted. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.XkdcXbox360RequestInput">
            <summary> These fields are used when SetRequest is called, to populate the relevent portions of the KerberosRequest.  This is a subset of everything in the request, but should contain all the most common stuff we want to trivially play with. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcXbox360RequestInput.GetDefaultPreauthsToGenerate">
            <summary> Retrieves a list of preauths that will be generated by default.  Note that this may vary based on the current input parameters. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcXbox360RequestInput.GeneratePreauths">
            <summary> Creates all the preauths required for the request, based on the other input fields. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcXbox360RequestInput.SetDefaults(ServerTestFramework.LiveService.Auth.AskdcGenericReplyOutput)">
            <summary> Sets defaults for a new xkdc request. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcXbox360RequestInput.SetDefaults(System.String,System.Byte[],ServerTestFramework.LiveService.Auth.Asn.Kerberos.Ticket)">
            <summary> Sets defaults for a request. ConsoleId should be of the form: XE.012345678901.  If the key is not specifcied, it is calculated based on the consoleId. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcXbox360RequestInput.GetServiceRequestVersion">
            <summary> Gets the service request version that will be used based on the current state. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcXbox360Request.SetRequest">
            <summary> Sets all the appropriate fields in a KerberosRequest based on Input. </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.XkdcXbox360Request.Input">
            <summary>
            Exposes the request input as the correct type of the current platform.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcXbox360Reply.Decrypt(System.Byte[],System.Byte[],System.UInt32)">
            <summary> Decrypts the body, tickets, and preauths.  If a key is not supplied, that step is skipped.  This also populates some of the generic Output member.  Returns true only if everything possible was fully decrypted. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XkdcXbox360Reply.VerifyBasics">
            <summary> Verifies that various basic fields common to all xbox360 xkdc replies are correct. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.XmacsGenericRequestInput">
            <summary> These fields are used when SetRequest is called, to populate the relevent portions of the base KerberosRequest.  This contains fields for all platforms, though not all platforms use all fields. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsGenericRequestInput.SetDefaults">
            <summary> Sets values for a random new machine.  </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsGenericRequestInput.SetResetDefaults(ServerTestFramework.LiveService.Auth.XmacsGenericRequestInput)">
            <summary> Sets defaults to reset an already-created machine. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsGenericRequestInput.GetRequestTime">
            <summary> Gets the current requset time. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsGenericRequestInput.SetRequestTime(System.DateTime)">
            <summary> Sets the request time. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsGenericRequestInput.SetRandomNOnce">
            <summary> Sets a new random nonce. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsGenericRequestInput.GetNOnce">
            <summary> Gets the current nonce. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.XmacsGenericRequest">
            <summary> Used to build an Generic Xmacs Request. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsGenericRequest.CreateForClientType(ServerTestFramework.LiveService.Auth.AuthContext.ClientTypes)">
            <summary> Creates an xmacs request object for a specific platform. </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.XmacsGenericRequest.Input">
            <summary> Data used to populate the base KerberosRequest. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.XmacsGenericReplyOutput">
            <summary> Output from xmacs needed for use by askdc. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.XmacsGenericReply">
            <summary> Used to parse an Generic Xmacs Reply. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsGenericReply.Decrypt(System.Byte[],System.Byte[],System.UInt32)">
            <summary> Decrypts the body, tickets, and preauths.  If a key is not supplied, that step is skipped.  This also populates the generic Output member.  Returns true only if everything possible was fully decrypted. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsGenericReply.VerifyBasics">
            <summary> Verifies that various basic fields common to all xmacs replies are correct. </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServerTestFramework.LiveService.Auth.XmacsGenericReply.CreateFromAsnForClientType(ServerTestFramework.LiveService.Auth.Asn.AsnValueBase,ServerTestFramework.LiveService.Auth.AuthContext.ClientTypes)" -->
        <member name="T:ServerTestFramework.LiveService.Auth.XmacsPCRequestInput">
            <summary> These fields are used when SetRequest is called, to populate the relevent portions of the base KerberosRequest.  This is a subset of everything in the request, but should contain all the most common stuff we want to trivially play with in tests. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsPCRequestInput.GetDefaultPreauthsToGenerate">
            <summary> Retrieves a list of preauths that will be generated by default.  Note that this may vary based on the current input parameters. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsPCRequestInput.GeneratePreauths">
            <summary> Creates all the preauths required for the request, based on the other input fields. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsPCRequestInput.SetDefaults">
            <summary> Sets values for a random new machine. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsPCRequestInput.SetDefaultsPlainPassport(System.Nullable{System.UInt64},System.String,ServerTestFramework.LiveService.Auth.PassportAuth)">
            <summary> Sets values for a machine.  If pcId is null, a random pcId is generated.  If key is null, a key will be calculated from pcId.  If sponsor5x5 is null the pc test voucher is used. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsPCRequestInput.SetDefaultsEncryptedPassport(System.Nullable{System.UInt64},System.String,ServerTestFramework.LiveService.Auth.PassportAuth)">
            <summary> Sets values for a machine.  If pcId is null, a random pcId is generated.  If key is null, a key will be calculated from pcId.  If sponsor5x5 is null the pc test voucher is used. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsPCRequestInput.SetResetDefaults(ServerTestFramework.LiveService.Auth.XmacsGenericRequestInput)">
            <summary> Sets defaults to reset an already-created machine. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.XmacsPCRequest">
            <summary> Used to build an PC Xmacs Request. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsPCRequest.SetRequest">
            <summary> Sets all the appropriate fields in a KerberosRequest based on Input. </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.XmacsPCRequest.Input">
            <summary> Casts the base Input as input for the current platform. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.XmacsPCReply">
            <summary> Used to parse an PC Xmacs Reply. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsPCReply.Decrypt(System.Byte[],System.Byte[],System.UInt32)">
            <summary> Decrypts the body, tickets, and preauths.  If a key is not supplied, that step is skipped.  This also populates the generic Output member. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.XmacsXbox1RequestInput">
            <summary> These fields are used when SetRequest is called, to populate the relevent portions of the base KerberosRequest.  This is a subset of everything in the request, but should contain all the most common stuff we want to trivially play with in tests. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsXbox1RequestInput.GetDefaultPreauthsToGenerate">
            <summary> Retrieves a list of preauths that will be generated by default.  Note that this may vary based on the current input parameters. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsXbox1RequestInput.GeneratePreauths">
            <summary> Creates all the preauths required for the request, based on the other input fields. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsXbox1RequestInput.SetDefaults">
            <summary> Sets values for a random new machine. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsXbox1RequestInput.SetDefaults(System.String,System.Byte[])">
            <summary> Sets values for a machine.  If consoleId is null, a random valid consoleId is made up.  If key is null, a key will be calculated from consoleId.  For valid cases, consoleId should be of the form "XE.012345678901". </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsXbox1RequestInput.SetResetDefaults(ServerTestFramework.LiveService.Auth.XmacsGenericRequestInput)">
            <summary> Sets defaults to reset an already-created machine. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsXbox1RequestInput.GenerateRandomDevkitConsoleID">
            <summary> Generates a random console id for a dev kit, which will hit the special dev kit genealogy entry.  </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.XmacsXbox1Request">
            <summary> Used to build an Xbox1 Xmacs Request. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsXbox1Request.SetRequest">
            <summary> Sets all the appropriate fields in a KerberosRequest based on Input. </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.XmacsXbox1Request.Input">
            <summary> Casts the base Input as input for the current platform. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.XmacsXbox1Reply">
            <summary> Used to parse an Xbox1 Xmacs Reply. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsXbox1Reply.Decrypt(System.Byte[],System.Byte[],System.UInt32)">
            <summary> Decrypts the body, tickets, and preauths.  If a key is not supplied, that step is skipped.  This also populates the generic Output member. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.XmacsXbox360RequestInput">
            <summary> These fields are used when SetRequest is called, to populate the relevent portions of the base KerberosRequest.  This is a subset of everything in the request, but should contain all the most common stuff we want to trivially play with in tests. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsXbox360RequestInput.GetDefaultPreauthsToGenerate">
            <summary> Retrieves a list of preauths that will be generated by default.  Note that this may vary based on the current input parameters. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsXbox360RequestInput.GeneratePreauths">
            <summary> Creates all the preauths required for the request based on the other input fields. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsXbox360RequestInput.SetDefaults">
            <summary> Sets values for a random new machine. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsXbox360RequestInput.SetDefaults(System.String,System.Byte[])">
            <summary> Sets values for a machine.  If consoleId is null, a random valid consoleId is made up.  If key is null, a key will be calculated from consoleId.  For valid cases, consoleId should be of the form "XE.012345678901". </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsXbox360RequestInput.SetResetDefaults(ServerTestFramework.LiveService.Auth.XmacsGenericRequestInput)">
            <summary> Sets defaults to reset an already-created machine. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsXbox360RequestInput.FindConsoleCertificateInPreauths">
            <summary> Finds the certificate from within one of the xenon mac preauths, if any exist. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.XmacsXbox360Request">
            <summary> Used to build an Xbox360 Xmacs Request. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsXbox360Request.SetRequest">
            <summary> Sets all the appropriate fields in a KerberosRequest based on Input. </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.XmacsXbox360Request.Input">
            <summary> Casts the base Input as input for the current platform. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.XmacsXbox360Reply">
            <summary> Used to parse an Xbox360 Xmacs Reply. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Auth.XmacsXbox360Reply.Decrypt(System.Byte[],System.Byte[],System.UInt32)">
            <summary> Decrypts the body, tickets, and preauths.  If a key is not supplied, that step is skipped.  This also populates the generic Output member. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.RPSTicketGen.Loader">
            <summary>
            Deploys our contained resources to a temp location and loads them when needed.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.RPSTicketGen.TicketParameters">
            <summary>
            Commonly used ticket parameters.
            http://p2.live-int.com/RPS/RPSDefault.aspx
            can provide great insight to these members.
            
            To create a ticket from the defaults, you really only need to set:
            Puid
            CId
            SiteId
            
            But I like to set MemberName as well.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.RPSTicketGen.TicketParameters.Birthday">
            <summary>Birthday value is not understood.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.RPSTicketGen.TicketParameters.BirthdayPrecision">
            <summary>BirthdayPrecision value is not understood, but 2 seems to be a common value.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.RPSTicketGen.TicketParameters.CountryCode">
            <summary>Two letter country code, ex. "US".</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.RPSTicketGen.TicketParameters.DisplayName">
            <summary>Can be the email address of the account.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.RPSTicketGen.TicketParameters.LanguagePreference">
            <summary>Standard language code, ex 1033.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.RPSTicketGen.TicketParameters.Region">
            <summary>Region is not understood.</summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Auth.RPSTicketGen.TicketParameters.MemberName">
            <summary>Similar to the email address.</summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.RPSTicketGen.TicketParameters.EnvironmentEnum">
            <summary>
            Used to determine which certificate to encrypt the ticket with.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.RPSTicketGen.TicketParameters.PassportTicketType">
            <summary>
            Delegation ticket vs standard ticket
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Auth.RPSTicketGen.ExtendedTicketParameters">
            <summary>
            Extended ticket parameters.
            Not currently implemented.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.ContentOfferLoader">
            <summary>
            this is a static utility class that loads content offers
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.ContentOfferLoader.UpdateOfferPolicyFlags(System.UInt64,System.UInt32)">
            <summary>
            Update/change the policy flags for an offer
            </summary>
            <param name="offerId"></param>
            <param name="policyFlags"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.ContentOfferLoader.IsAssociatedOfferExists(System.UInt32,System.UInt64)">
            
             Associated offers
            
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebBilling.DownloadHistoryFilter.methodName">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebBilling.DownloadHistoryFilter.Locale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebBilling.DownloadHistoryFilter.LegalLocale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebBilling.DownloadHistoryFilter.Store">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebBilling.DownloadHistoryFilter.PageSize">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebBilling.DownloadHistoryFilter.PageNum">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebBilling.DownloadHistoryFilter.DetailView">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebBilling.DownloadHistoryFilter.MediaTypes">
            <summary>
            Required.
            Up to 64 MediaTypes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebBilling.DownloadHistoryFilter.Actions">
            <summary>
            Required.
            Up to 64 Actions may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebBilling.DownloadHistoryFilter.OrderBy">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebBilling.DownloadHistoryFilter.OrderDirection">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebBilling.PurchaseHistoryFilter.methodName">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebBilling.PurchaseHistoryFilter.Locale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebBilling.PurchaseHistoryFilter.LegalLocale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebBilling.PurchaseHistoryFilter.Store">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebBilling.PurchaseHistoryFilter.PageSize">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebBilling.PurchaseHistoryFilter.PageNum">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebBilling.PurchaseHistoryFilter.DetailView">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebBilling.PurchaseHistoryFilter.OfferIds">
            <summary>
            Optional.
            Up to 256 MediaIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebBilling.PurchaseHistoryFilter.MediaTypes">
            <summary>
            Required.
            Up to 64 MediaTypes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebBilling.PurchaseHistoryFilter.OrderBy">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebBilling.PurchaseHistoryFilter.OrderDirection">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.XbosGenre">
            <summary>
            Genre class to add some new genres to both Game and Media
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.XbosTitle">
            <summary>
            Title class for Uodb loading purpose
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.XbosOffer">
            <summary>
            Offer class for Uodb loading purpose
            Cannot guarantee that the offer id is unique in the title
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.XbosContent">
            <summary>
            Content class for Uodb loading purpose
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.XbosSubscription">
             <summary>
             Subscription class for loading as well as knowing the expected output of
             requests.  Subscriptions are non-content offers--similar but less complex.
             One day the two should inherit from each other.
            
             This code has NOT BEEN TESTED yet.  It is put on hold while other items take precedence.
             </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebBilling.PostRequest">
            <summary>
            This class will be used to post the webrequest to corresponding interface
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.ArgoUser">
            <summary>
            Argo user for music and video purchase
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.XeUser.AddPaymentInstrumentVisa">
            <summary>
            Facilitate the easy addition of a visa card to the user's account.
            </summary>
            <returns>Returns the PaymentInstrumentId returned from SCG</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.XeUser.AddPaymentInstrumentVisa(ServerTestFramework.LiveService.UserAccount.XRLXeAddPaymentInstrument@)">
            <summary>
            Facilitate the easy addition of a visa card to the user's account.
            </summary>
            <param name="request">Returns the request object in case the user needs the cc number/details</param>
            <returns>Returns the PaymentInstrumentId returned from SCG</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.XeUser.AddPaymentInstrumentVisa(System.String)">
            <summary>
            Facilitate the easy addition of a visa card with a specific credit card number to this
            user's account.  This allows the return of certain AVS codes returned by a bank emulator on
            the SCG side.
            </summary>
            <param name="request">Returns the request object in case the user needs the cc number/details</param>
            <returns>Returns the PaymentInstrumentId returned from SCG</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.XeUser.AddPaymentInstrumentDirectDebit">
            <summary>
            Facilitate the easy addition of a direct debit payment instrument to the user's account.
            </summary>
            <returns>Returns the PaymentInstrumentId returned from SCG</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.XeUser.GetPaymentInstruments">
            <summary>
            Returns all payment instruments associated with this account
            </summary>
            <returns>Returns an array of payment instrument types</returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.XbosUser">
            <summary>
            Xenon user used by Xbos
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.XbosUser.CheckDefaultPrivileges(System.UInt64,ServerTestFramework.LiveService.Billing.XbosUser.UserSubType)">
            <summary>
            check if the user has the correct privileges
            </summary>
            <param name="userPuid"></param>
            <param name="pType"></param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.XRLAutoUpdateReferral">
            <summary>
            Summary description for XRLOfferingDetails.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.XRLContentAvailable">
            <summary>
            Summary description for XRLContentAvailable.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.XRLContentReferral">
            <summary>
            Summary description for XRLOfferingDetails.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.XRLOfferingCancel">
            <summary>
            using System;
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.XRLOfferingDetails">
            <summary>
            Summary description for XRLOfferingDetails.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.XRLOfferingDetailsNoUser">
            <summary>
            Summary description for XRLOfferingDetails.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.XRLOfferingEnumerate">
            <summary>
            
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.XRLOfferingPurchase">
            <summary>
            using System;
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.XRLVerifyNickname">
            <summary>
            Summary description for XRLVerifyNickname.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Callback.ISvcProvider">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Callback.ISvcProvider.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Callback.ISvcProvider.ProvisionService(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Callback.ISvcProvider.BeginProvisionService(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Callback.ISvcProvider.EndProvisionService(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Callback.ISvcProvider.DeprovisionService(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Callback.ISvcProvider.BeginDeprovisionService(System.Int32,System.Int32,System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Callback.ISvcProvider.EndDeprovisionService(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Callback.ISvcProvider.EnableService(System.Int32,System.Int32,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Callback.ISvcProvider.BeginEnableService(System.Int32,System.Int32,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Callback.ISvcProvider.EndEnableService(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Callback.ISvcProvider.DisableService(System.Int32,System.Int32,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Callback.ISvcProvider.BeginDisableService(System.Int32,System.Int32,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Callback.ISvcProvider.EndDisableService(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Callback.ISvcProvider.ValidateProvisioningData(System.Int32,System.Int32,System.String,System.String,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Callback.ISvcProvider.BeginValidateProvisioningData(System.Int32,System.Int32,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Callback.ISvcProvider.EndValidateProvisioningData(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Callback.ISvcProvider.CheckProvisioningStatus(System.Int32,System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Callback.ISvcProvider.BeginCheckProvisioningStatus(System.Int32,System.Int32,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Callback.ISvcProvider.EndCheckProvisioningStatus(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Callback.SvcProviderWrapper">
            <summary>
            Summary description for SvcProviderWrapper.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Callback.SvcProviderWrapper.ServiceComponentId">
             <summary>
             This is the default ServiceComponentId, which will be used in the event that we cannot look up the service component id using the provided offer or instance id.
             It is the ServiceComponentId for Gold PP 12 Months and can be looked up by running the following SQL query against UODB:
             SELECT vc_billing_svc_component_id FROM t_offers WHERE bi_offer_id=0XFFFE07D18000001A -- 0XFFFE07D18000001A is the offer id for Gold PP 12 Months
            
             TODO - The reason why we need a default ServiceComponentId here is because there are several negative Xcbk test cases that
             test with an invalid Offer Id or Instance Id. Naturally, we won't be able to look up the ServiceComponentId for those invalid Offer Ids from the DB,
             which means when those tests call ProvisionService, DisableService, etc. an error will occur. The short-term fix is to just default to
             a valid service component id; however, the long-term solution is to decouple the logic of looking up the ServiceComponentId from the 
             ProvisionService, DisableService etc. methods, and provide an overload that takes in a service component id. 
             Unfortunately, there are still a lot of open questions regarding the expected behavior of those negative test cases,
             so I am checking this fix in as a temporary stop-gap solution, and will follow up with a more long-term fix for the test cases.
             </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Catalog.MediaRelationshipType">
            <summary>
            Used to specify the media relationship type.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Catalog.TestConnectionFilter">
            <summary>
            TestConnection Filter
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindCategoriesFilter.methodName">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindCategoriesFilter.Locale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindCategoriesFilter.LegalLocale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindCategoriesFilter.Store">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindCategoriesFilter.PageSize">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindCategoriesFilter.PageNum">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindCategoriesFilter.DetailView">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindCategoriesFilter.OfferFilterLevel">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindCategoriesFilter.CategorySystemId">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindCategoriesFilter.CategoryIds">
            <summary>
            Optional.
            Up to 64 CategoryIds can be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindCategoriesFilter.OrderBy">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindCategoriesFilter.OrderDirection">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindCategoriesZuneFilter.methodName">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindCategoriesZuneFilter.Locale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindCategoriesZuneFilter.LegalLocale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindCategoriesZuneFilter.Store">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindCategoriesZuneFilter.PageSize">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindCategoriesZuneFilter.PageNum">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindCategoriesZuneFilter.DetailView">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindCategoriesZuneFilter.OfferFilterLevel">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindCategoriesZuneFilter.CategorySystemId">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindCategoriesZuneFilter.CategoryIds">
            <summary>
            Optional.
            Up to 64 CategoryIds can be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindCategoriesZuneFilter.OrderBy">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindCategoriesZuneFilter.OrderDirection">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindContributorsFilter.methodName">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindContributorsFilter.Locale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindContributorsFilter.LegalLocale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindContributorsFilter.Store">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindContributorsFilter.PageSize">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindContributorsFilter.PageNum">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindContributorsFilter.DetailView">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindContributorsFilter.MediaIds">
            <summary>
            Required.
            Up to 256 MediaIds can be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindContributorsFilter.ContributorLimit">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindContributorsFilter.OrderBy">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindContributorsFilter.OrderDirection">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindFeaturedPodcastsFilter.methodName">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindFeaturedPodcastsFilter.Locale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindFeaturedPodcastsFilter.LegalLocale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindFeaturedPodcastsFilter.PageSize">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindFeaturedPodcastsFilter.PageNum">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindFeaturedPodcastsFilter.DetailView">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindFeaturedPodcastsFilter.CollectionId">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGameOffersFilter.methodName">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGameOffersFilter.Locale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGameOffersFilter.LegalLocale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGameOffersFilter.Store">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGameOffersFilter.PageSize">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGameOffersFilter.PageNum">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGameOffersFilter.DetailView">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGameOffersFilter.OfferIds">
            <summary>
            Optional.
            Up to 256 OfferIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGameOffersFilter.MediaIds">
            <summary>
            Optional.
            Up to 256 MediaIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGameOffersFilter.RatingIds">
            <summary>
            Optional.
            Up to 64 RatingIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGameOffersFilter.UserTypes">
            <summary>
            Optional.
            Up to 64 UserTypes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGameOffersFilter.MediaTypes">
            <summary>
            Required.
            Up to 64 MediaTypes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGameOffersFilter.CategoryIds">
            <summary>
            Optional.
            Up to 64 CategoryIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGameOffersFilter.TitleFilters">
            <summary>
            Optional.
            Up to 64 TitleFilters may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGameOffersFilter.ImageTypeIds">
            <summary>
            Optional.
            Up to 64 ImageTypeIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGameOffersFilter.ImageFormats">
            <summary>
            Optional.
            Up to 64 ImageFormats may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGameOffersFilter.ImageSizes">
            <summary>
            Optional.
            Up to 64 ImageSizes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGameOffersFilter.Relations">
            <summary>
            Optional.
            Up to 64 Relations may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGameOffersFilter.OrderBy">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGameOffersFilter.OrderDirection">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFilter.methodName">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFilter.Locale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFilter.LegalLocale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFilter.Store">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFilter.PageSize">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFilter.PageNum">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFilter.DetailView">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFilter.OfferFilterLevel">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFilter.MediaIds">
            <summary>
            Optional.
            Up to 256 MediaIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFilter.RatingIds">
            <summary>
            Optional.
            Up to 64 RatingIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFilter.UserTypes">
            <summary>
            Optional.
            Up to 64 UserTypes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFilter.MediaTypes">
            <summary>
            Required.
            Up to 64 MediaTypes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFilter.CategoryIds">
            <summary>
            Optional.
            Up to 64 CategoryIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFilter.TitleFilters">
            <summary>
            Optional.
            Up to 64 TitleFilters may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFilter.OfferTargetMediaTypes">
            <summary>
            Required.
            Up to 64 MediaTypes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFilter.ImageTypeIds">
            <summary>
            Optional.
            Up to 64 ImageTypeIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFilter.ImageFormats">
            <summary>
            Optional.
            Up to 64 ImageFormats may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFilter.ImageSizes">
            <summary>
            Optional.
            Up to 64 ImageSizes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFilter.Relations">
            <summary>
            Optional.
            Up to 64 Relations may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFilter.OrderBy">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFilter.OrderDirection">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFTSFilter.methodName">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFTSFilter.Query">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFTSFilter.RankingType">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFTSFilter.Locale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFTSFilter.LegalLocale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFTSFilter.Store">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFTSFilter.PageSize">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFTSFilter.PageNum">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFTSFilter.DetailView">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFTSFilter.OfferFilterLevel">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFTSFilter.ExternalId">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFTSFilter.RatingIds">
            <summary>
            Optional.
            Up to 64 RatingIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFTSFilter.UserTypes">
            <summary>
            Optional.
            Up to 64 UserTypes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFTSFilter.MediaTypes">
            <summary>
            Required.
            Up to 64 MediaTypes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFTSFilter.CategoryIds">
            <summary>
            Optional.
            Up to 64 CategoryIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFTSFilter.OrderBy">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindGamesFTSFilter.OrderDirection">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindImagesFilter.methodName">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindImagesFilter.Locale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindImagesFilter.LegalLocale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindImagesFilter.Store">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindImagesFilter.PageSize">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindImagesFilter.PageNum">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindImagesFilter.DetailView">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindImagesFilter.OfferFilterLevel">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindImagesFilter.MediaIds">
            <summary>
            Optional.
            Up to 256 MediaIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindImagesFilter.MediaTypes">
            <summary>
            Required.
            Up to 64 MediaTypes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindImagesFilter.ImageFormats">
            <summary>
            Optional.
            Up to 64 ImageFormats may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindImagesFilter.ImageSizes">
            <summary>
            Optional.
            Up to 64 ImageSizes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindImagesFilter.OrderBy">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindImagesFilter.OrderDirection">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFilter.methodName">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFilter.Locale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFilter.LegalLocale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFilter.Store">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFilter.PageSize">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFilter.PageNum">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFilter.DetailView">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFilter.OfferFilterLevel">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFilter.MediaIds">
            <summary>
            Optional.
            Up to 256 MediaIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFilter.RatingIds">
            <summary>
            Optional.
            Up to 64 RatingIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFilter.UserTypes">
            <summary>
            Optional.
            Up to 64 UserTypes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFilter.MediaTypes">
            <summary>
            Required.
            Up to 64 MediaTypes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFilter.CategoryIds">
            <summary>
            Optional.
            Up to 64 CategoryIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFilter.OrderBy">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFilter.OrderDirection">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFTSFilter.methodName">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFTSFilter.Query">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFTSFilter.RankingType">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFTSFilter.Locale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFTSFilter.LegalLocale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFTSFilter.Store">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFTSFilter.PageSize">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFTSFilter.PageNum">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFTSFilter.DetailView">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFTSFilter.OfferFilterLevel">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFTSFilter.RatingIds">
            <summary>
            Optional.
            Up to 64 RatingIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFTSFilter.UserTypes">
            <summary>
            Optional.
            Up to 64 UserTypes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFTSFilter.MediaTypes">
            <summary>
            Required.
            Up to 64 MediaTypes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFTSFilter.CategoryIds">
            <summary>
            Optional.
            Up to 64 CategoryIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFTSFilter.OrderBy">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaFTSFilter.OrderDirection">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaOffersFilter.methodName">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaOffersFilter.Locale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaOffersFilter.LegalLocale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaOffersFilter.Store">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaOffersFilter.PageSize">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaOffersFilter.PageNum">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaOffersFilter.DetailView">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaOffersFilter.OfferIds">
            <summary>
            Optional.
            Up to 256 OfferIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaOffersFilter.MediaIds">
            <summary>
            Optional.
            Up to 256 MediaIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaOffersFilter.RatingIds">
            <summary>
            Optional.
            Up to 64 RatingIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaOffersFilter.UserTypes">
            <summary>
            Optional.
            Up to 64 UserTypes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaOffersFilter.MediaTypes">
            <summary>
            Required.
            Up to 64 MediaTypes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaOffersFilter.CategoryIds">
            <summary>
            Optional.
            Up to 64 CategoryIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaOffersFilter.OrderBy">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaOffersFilter.OrderDirection">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindMediaOffersFilter.OtherIds">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFilter.methodName">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFilter.Locale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFilter.LegalLocale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFilter.PageSize">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFilter.PageNum">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFilter.DetailView">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFilter.MediaIds">
            <summary>
            Optional.
            Up to 256 MediaIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFilter.MediaUrls">
            <summary>
            Optional.
            Up to 256 MediaUrls may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFilter.CategoryIds">
            <summary>
            Optional.
            Up to 64 CategoryIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFilter.TitleFilters">
            <summary>
            Optional.
            Up to 256 MediaUrls may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFilter.PodcastType">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFilter.OrderBy">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFilter.OrderDirection">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFTSFilter.methodName">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFTSFilter.Query">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFTSFilter.RankingType">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFTSFilter.Locale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFTSFilter.LegalLocale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFTSFilter.Store">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFTSFilter.PageSize">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFTSFilter.PageNum">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFTSFilter.DetailView">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFTSFilter.MediaUrls">
            <summary>
            Optional.
            Up to 256 MediaUrls may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFTSFilter.RatingIds">
            <summary>
            Optional.
            Up to 64 RatingIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFTSFilter.MediaTypes">
            <summary>
            Required.
            Up to 64 MediaTypes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFTSFilter.CategoryIds">
            <summary>
            Optional.
            Up to 64 CategoryIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFTSFilter.OrderBy">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindPodcastsFTSFilter.OrderDirection">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindRelatedMediaFilter.methodName">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindRelatedMediaFilter.Locale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindRelatedMediaFilter.LegalLocale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindRelatedMediaFilter.Store">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindRelatedMediaFilter.PageSize">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindRelatedMediaFilter.PageNum">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindRelatedMediaFilter.DetailView">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindRelatedMediaFilter.OfferFilterLevel">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindRelatedMediaFilter.MediaIds">
            <summary>
            Required.
            Up to 256 MediaIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindRelatedMediaFilter.MediaRelationshipTypes">
            <summary>
            Required.
            Up to 64 MediaRelationshipTypes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindRelatedMediaFilter.MediaTypes">
            <summary>
            Required.
            Up to 64 MediaTypes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindRelatedMediaFilter.OrderBy">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindRelatedMediaFilter.OrderDirection">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideoOffersFilter.methodName">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideoOffersFilter.Locale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideoOffersFilter.LegalLocale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideoOffersFilter.Store">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideoOffersFilter.PageSize">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideoOffersFilter.PageNum">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideoOffersFilter.DetailView">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideoOffersFilter.OfferIds">
            <summary>
            Optional.
            Up to 256 OfferIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideoOffersFilter.MediaIds">
            <summary>
            Optional.
            Up to 256 MediaIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideoOffersFilter.RatingIds">
            <summary>
            Optional.
            Up to 64 RatingIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideoOffersFilter.UserTypes">
            <summary>
            Optional.
            Up to 64 UserTypes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideoOffersFilter.MediaTypes">
            <summary>
            Required.
            Up to 64 MediaTypes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideoOffersFilter.CategoryIds">
            <summary>
            Optional.
            Up to 64 CategoryIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideoOffersFilter.ImageTypeIds">
            <summary>
            Optional.
            Up to 64 ImageTypeIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideoOffersFilter.ImageFormats">
            <summary>
            Optional.
            Up to 64 ImageFormats may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideoOffersFilter.ImageSizes">
            <summary>
            Optional.
            Up to 64 ImageSizes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideoOffersFilter.TitleFilters">
            <summary>
            Optional.
            Up to 64 TitleFilters may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideoOffersFilter.Relations">
            <summary>
            Optional.
            Up to 64 Relations may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideoOffersFilter.OrderBy">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideoOffersFilter.OrderDirection">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFilter.methodName">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFilter.Locale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFilter.LegalLocale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFilter.Store">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFilter.PageSize">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFilter.PageNum">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFilter.DetailView">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFilter.OfferFilterLevel">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFilter.MediaIds">
            <summary>
            Optional.
            Up to 256 MediaIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFilter.RatingIds">
            <summary>
            Optional.
            Up to 64 RatingIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFilter.UserTypes">
            <summary>
            Optional.
            Up to 64 UserTypes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFilter.MediaTypes">
            <summary>
            Required.
            Up to 64 MediaTypes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFilter.CategoryIds">
            <summary>
            Optional.
            Up to 64 CategoryIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFilter.ImageTypeIds">
            <summary>
            Optional.
            Up to 64 ImageTypeIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFilter.ImageFormats">
            <summary>
            Optional.
            Up to 64 ImageFormats may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFilter.ImageSizes">
            <summary>
            Optional.
            Up to 64 ImageSizes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFilter.TitleFilters">
            <summary>
            Optional.
            Up to 64 TitleFilters may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFilter.Relations">
            <summary>
            Optional.
            Up to 64 Relations may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFilter.VideoFilter">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFilter.OrderBy">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFilter.OrderDirection">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFTSFilter.methodName">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFTSFilter.Query">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFTSFilter.RankingType">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFTSFilter.Locale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFTSFilter.LegalLocale">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFTSFilter.Store">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFTSFilter.PageSize">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFTSFilter.PageNum">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFTSFilter.DetailView">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFTSFilter.OfferFilterLevel">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFTSFilter.RatingIds">
            <summary>
            Optional.
            Up to 64 RatingIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFTSFilter.UserTypes">
            <summary>
            Optional.
            Up to 64 UserTypes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFTSFilter.MediaTypes">
            <summary>
            Required.
            Up to 64 MediaTypes may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFTSFilter.CategoryIds">
            <summary>
            Optional.
            Up to 64 CategoryIds may be specified.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFTSFilter.OrderBy">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.FindVideosFTSFilter.OrderDirection">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.ReportConcernFilter.methodName">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.ReportConcernFilter.MediaId">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.ReportConcernFilter.ConcernId">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.ReportConcernFilter.ConcernText">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.SubmitPodcastFilter.methodName">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Catalog.SubmitPodcastFilter.PodcastUrl">
            <summary>
            Required.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Catalog.CatalogRequest.#ctor(System.String,ServerTestFramework.LiveService.FilterBase)">
            <summary>
            Creates a catalog request of the given operation using values from a 
            provided filter.  This uses the filter name as the method name.
            </summary>
            <param name="operation">The operation to perform</param>
            <param name="filter">The filter to use in the request</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Catalog.CatalogRequest.SendRequest">
            <summary>
            Sends this web request to the Catalog web interface
            </summary>
            <returns>True if the request was successfull, false otherwise</returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Catalog.QueryRequest">
            <summary>
            A basic query request class that can accept a filter
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Catalog.QueryRequest.#ctor(ServerTestFramework.LiveService.FilterBase)">
            <summary>
            Creates a query request with the given filter, and uses the filter name
            as the method name
            </summary>
            <param name="filter">The filter to create the request with</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Catalog.QueryRequest`1">
            <summary>
            A generic query request type that uses a filter of the given type
            </summary>
            <typeparam name="FilterType">The type of filter to use for the request</typeparam>
        </member>
        <member name="M:ServerTestFramework.LiveService.Catalog.QueryRequest`1.#ctor">
            <summary>
            Creates a query request with a filter of the type provided 
            and uses the FilterName as the methodName parameter
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Catalog.QueryRequest`1.Filter">
            <summary>
            Provides access to a strongly typed version of the filter for this request
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGBase.GetCompiledVersion">
            <summary>
            Version shared by client and service to ensure compatability
            IMPORTANT: Increment this when making changes to client / service interaction
            </summary>
            <returns>FakeSG version number</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGBase.GetSingleton">
            <summary>
            Get the current FakeSG Service or Client object
            </summary>
            <returns>Instance of FakeSG Service or Client</returns>
        </member>
        <member name="F:ServerTestFramework.LiveService.FakeSG.FakeSGBase.mmf">
            <summary>
            SPI Auth Data
            Uses Memory Mapped file to allow direct maniplation of slots
            by both Client and Service
            Format:  Header then a table of 0xFFFF slot entries for each local IP (interface)
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGBase.SetUpMMF(System.Int32)">
            <summary>
            Sets up Shared Memory Mapped File
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGBase.GetMMFVersion">
            <summary>
            Gets version in user when MMF was created
            </summary>
            <returns>Version number in MMF header</returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.FakeSG.IFakeSGClient">
            <summary>
            An interface for allowing different implementations of a 'fake' SG.
            </summary>
            <remarks>
            'Slots' are used for authdata lookup requests.
            'Xboxs' are used for qval related stuff.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.IFakeSGClient.ConnectToService">
            <summary>
            Tries to make sure the correct version of FakeSG Service is running and connect to it.
            </summary>
            <returns>True if it is running and the correct version; false otherwise.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.IFakeSGClient.Shutdown">
            <summary>
            Instructs the IFakeSGClient to stop operation and free resources.
            Use of the IFakeSGClient after calling Shutdown is undefined.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.IFakeSGClient.GetSlot">
            <summary>
            Gets a new, initialized CSGInfo struct.
            </summary>
            <returns>Fresh new SPI Auth data.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.IFakeSGClient.PutSlot(ServerTestFramework.LiveService.FakeSG.CSGInfo@,System.Net.IPAddress)">
            <summary>
            Sets the CSGInfo data for a given IP:Port.
            </summary>
            <param name="slot">The authdata to set (contains the port).</param>
            <param name="srcIp">IP address of interface XRL request was sent out on.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.IFakeSGClient.LoadSlot(ServerTestFramework.LiveService.FakeSG.CSGInfo@,System.UInt64)">
            <summary>
            Reads the CSGInfo data based on the given xboxid.
            </summary>
            <param name="sgInfo">The target CSGInfo struct.</param>
            <param name="xboxId">The machine ID of the xbox to look up.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.IFakeSGClient.AddXbox(System.UInt32,System.UInt32,System.UInt64,System.UInt32,System.UInt32,System.UInt32,System.Byte[],System.UInt64,ServerTestFramework.LiveService.FakeSG.CSGInfo.ClientType,System.UInt32)">
            <summary>
            Adds or updates xbox information that is given.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.IFakeSGClient.RemoveXbox(System.UInt64)">
            <summary>
            Removes an xbox from the list.
            </summary>
            <param name="xboxId">The xbox to remove.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.IFakeSGClient.DeadXbox(System.UInt64)">
            <summary>
            Sends a dead xbox message and removes it from the list.
            FakeSGService only sends the dead xbox message to presence.
            </summary>
            <param name="xboxId">The xbox to remove.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.IFakeSGClient.ClearXboxes">
            <summary>
            Removes all xboxs.  Analogous to calling DeadXbox on every xbox.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.IFakeSGClient.SetTitle(System.UInt64,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Update the title information for an xbox.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.IFakeSGClient.SetAltTitle(System.UInt64,System.UInt32,System.Int32)">
            <summary>
            Changes the alternate titles for an xbox.  The given title will be the only alternate title.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.IFakeSGClient.SetAltTitles(System.UInt64,System.UInt32[])">
            <summary>
            Changes the alternate titles for an xbox.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.IFakeSGClient.SetKey(System.UInt64,System.Byte[])">
            <summary>
            Sets the authdata abkey for the given xbox.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.IFakeSGClient.SetUserState(System.UInt64,System.UInt64,System.UInt64,System.UInt32,System.Byte[],System.UInt16)">
            <summary>
            Update state in presence for an xbox with connected user.
            TitleId is opaque and can contain XBOX 1 state or Xenon state but the length
            of titleData cannot exceed 256 bytes.
            
            Does actually cause state update to be queued and sent to presence eventually.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.IFakeSGClient.SetStateEndpoint(System.String)">
            <summary>
            Set the endpoint that the fake SG will use to send client state updates (/xpnfront/state.ashx).
            Should be of the form IP:PORT.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.IFakeSGClient.SetEnableStateBatching(System.Boolean,System.UInt32)">
            <summary>
            Set the batching state and interval for user updates.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.IFakeSGClient.AddUser(System.UInt64,System.UInt64,System.UInt32)">
            <summary>
            Add a user to the xbox or modify their flags.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.IFakeSGClient.RemoveUser(System.UInt64,System.UInt64)">
            <summary>
            Removes a user from the xbox.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.IFakeSGClient.GetUserCount(System.UInt64)">
            <summary>
            Gets the number of users on a given xbox.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.IFakeSGClient.ReadUserQValPacket(System.UInt64,System.UInt64,ServerTestFramework.LiveService.FakeSG.QValPacket@)">
            <summary>
            Reads a qval packet from the user's queue.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="testName">Name of test that will be connecting</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.IsServiceRunning">
            <summary>
            Checks if FakeSG Service is runnning.
            </summary>
            <returns>True if status equals Running</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.StartService">
            <summary>
            Start the FakeSG Service
            </summary>
            <returns>True if service is started</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.StopService">
            <summary>
            Stop the FakeSG Service
            </summary>
            <returns>True if service is stopped</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.IsServiceInstalled">
            <summary>
            Checks if FakeSG Service is installed
            </summary>
            <returns>"FakeSGService" is found in enumeration of installed services</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.InstallService">
            <summary>
            Installs the FakeSG Service
            </summary>
            <returns>Service copied and installed</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.UninstallService">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.CopyRequired(System.String)">
            <summary>
            Copies a required file to Service directory
            </summary>
            <param name="filename">Name of file to copy</param>
            <returns>true if copy succedes</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.CopyOptional(System.String)">
            <summary>
            Copies an optional file to Service directory
            </summary>
            <param name="filename">Name of file to copy</param>
            <returns>true if copy succedes or file is deleted from Service directory</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.InstallUtil(System.String,System.Boolean)">
            <summary>
            Use .NET instalutil to install or uninstall FakeSGservice
            </summary>
            <param name="fileName">Path of Service exe</param>
            <param name="install">True to install, False to uninstal</param>
            <returns>True if instalation succedes</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.InitRemoteControl">
            <summary>
            Sets up Remoting connection to Service
            </summary>
            <returns>Version Number compitled into FakeSG Service exe.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.ConnectToService">
            <summary>
            Tries to make sure correct version of FakeSG Service is running and connect to it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.GetSlot">
            <summary>
            Get a block of slot data ready to be loaded
            </summary>
            <returns>Fresh new SPI Auth data</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.PutSlot(ServerTestFramework.LiveService.FakeSG.CSGInfo@,System.Net.IPAddress)">
            <summary>
            Set a block of SPI Auth data to the Service to use
            </summary>
            <param name="slot">Loaded SPI Auth Data</param>
            <param name="srcIp">IP address of interface XRL request was sent out on</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.LoadSlot(ServerTestFramework.LiveService.FakeSG.CSGInfo@,System.UInt64)">
            <summary>
            Loads an SGInfo slot with the info stored in the service's
            xbox table.  This can be used to
            </summary>
            <param name="sgInfo">The slot to be loaded</param>
            <param name="xboxId">The machine ID of the xbox to use</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.AddXbox(System.UInt32,System.UInt32,System.UInt64,System.UInt32,System.UInt32,System.UInt32,System.Byte[],System.UInt64,ServerTestFramework.LiveService.FakeSG.CSGInfo.ClientType,System.UInt32)">
            <summary>
            Adds an xbox to the service's table.  Represents an xbox connecting to an SG.
            </summary>
            <param name="sgIp"></param>
            <param name="spi"></param>
            <param name="xboxId"></param>
            <param name="titleId"></param>
            <param name="titleVer"></param>
            <param name="titleRegion"></param>
            <param name="key"></param>
            <param name="clientVersion"></param>
            <param name="clientType"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.RemoveXbox(System.UInt64)">
            <summary>
            Removes an xbox to the service's table.  
            </summary>
            <param name="xboxId"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.DeadXbox(System.UInt64)">
            <summary>
            Disconnect the xbox in the fake sg and send the CSgMsgNotifyDelete for the removed
            xbox.
            </summary>
            <param name="xboxId"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.ClearXboxes">
            <summary>
            Clear the FakeSG of any knoledge of XBoxes. Propogate the clear to the presence server.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.SetTitle(System.UInt64,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Modify an xbox in the service's table.  Represents an xbox changing titles.
            </summary>
            <param name="xboxId"></param>
            <param name="titleId"></param>
            <param name="titleVer"></param>
            <param name="titleRegion"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.SetAltTitle(System.UInt64,System.UInt32,System.Int32)">
            <summary>
            Modify an xbox in the service's table.  Sets a single Alt Title
            </summary>
            <param name="xboxId"></param>
            <param name="titleId"></param>
            <param name="pos"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.SetAltTitles(System.UInt64,System.UInt32[])">
            <summary>
            Modify an xbox in the service's table.  Sets full set of Alt Titles
            </summary>
            <param name="xboxId"></param>
            <param name="altTitleIds"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.SetKey(System.UInt64,System.Byte[])">
            <summary>
            Modify an xbox in the service's table.  Changes key
            </summary>
            <param name="xboxId"></param>
            <param name="key"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.SetUserState(System.UInt64,System.UInt64,System.UInt64,System.UInt32,System.Byte[],System.UInt16)">
            <summary>
            Update state in presence for a xbox with connected user.
            TitleId is opaque and contain XBOX 1 state or Xenon state but the length
            of titleData cannot exceed 256 bytes.
            </summary>
            <param name="xboxId"></param>
            <param name="userId"></param>
            <param name="matchId"></param>
            <param name="state"></param>
            <param name="titleId"></param>
            <param name="titleData"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.SetStateEndpoint(System.String)">
            <summary>
            Set the endpoint that the fake SG will use to send client state updates.
            Should be of the form IP:PORT
            </summary>
            <param name="endpoint"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.SetEnableStateBatching(System.Boolean,System.UInt32)">
            <summary>
            Set the endpoint that the fake SG will use to send client state updates.
            </summary>
            <param name="endpoint"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.AddUser(System.UInt64,System.UInt64,System.UInt32)">
            <summary>
            Modify an xbox in the service's table.  Represents a user being logged on.
            </summary>
            <param name="xboxId"></param>
            <param name="userId"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.RemoveUser(System.UInt64,System.UInt64)">
            <summary>
            Modify an xbox in the service's table.  Represents a user being logged off.
            </summary>
            <param name="xboxId"></param>
            <param name="userId"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.GetUserCount(System.UInt64)">
            <summary>
            Queries an xbox in the service's table.  Gets current number of users on xbox.
            </summary>
            <param name="xboxId"></param>
            <param name="userId"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.FakeSGClient.ReadUserQValPacket(System.UInt64,System.UInt64,ServerTestFramework.LiveService.FakeSG.QValPacket@)">
            <summary>
            Queries an xbox in the service's table.  Gets current Qflags for a user.
            </summary>
            <param name="xboxId"></param>
            <param name="userId"></param>
        </member>
        <member name="T:ServerTestFramework.LiveService.FakeSG.QValPacket">
            <summary>
            A representation of the QVAL data that is delivered from notification
            to the SG and from the SG to the client. This class packages up the data
            and flags so that we can percolate the data from the wire up to the test
            infrastructure.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.FakeSG.QValPacket.DeliveryTime">
            <summary>
            File time when this qval was delivered
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.FakeSG.QValPacket.Push">
            <summary>
            Push flag set to indicate urgent data delivery
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.QValPacket.NewMessageId(System.UInt32)">
            <summary>
            The last 3 message IDs that arrived.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.QValPacket.NewMessageData(System.UInt32)">
            <summary>
            Data for the last 3 messages that arrived
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.QValPacket.DeletedMessageId(System.UInt32)">
            <summary>
            Last 3 messages deleted
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.QValPacket.Validate">
            <summary>
            Validate internal consistency of QVAL packet throw an exception
            if something does not match up.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.QValPacket.Copy(ServerTestFramework.LiveService.FakeSG.QValPacket)">
            <summary>
            Perform copy operation on data rather than object assignment.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.QValPacket.Clear">
            <summary>
            Clear the qval payload data.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.QValPacket.FirstMessageIdMatchingType(System.Byte)">
            <summary>
            Find the first matching message type in messaging qvals for provided type ID.
            If no appropriate message is found returns 0.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.FakeSG.QValPacket.Data">
            <summary>
            Set the qvals in the packet, copy them into an internal 
            buffer.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.FakeSG.QValPacket.QVal">
            <summary>
            Notification Queue Flags
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.FakeSG.QValPacket.QFlags">
            <summary>
            Indication of payload available in queue.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.FakeSG.QValPacket.InviteQVal">
            <summary>
            Low byte indicates positive existence
            of invite transient message, high 24 bits
            indicate the sequence number of the invite.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.FakeSG.QValPacket.InviteSequenceNum">
            <summary>
            Read invite sequence from invite qval.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.FakeSG.QValPacket.NewMessageSequenceNum">
            <summary>
            This value is the same for both msg data and id qvals
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.FakeSG.QValPacket.NewMessageDataQVal">
            <summary>
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.FakeSG.QValPacket.DeletedMessageQVal">
            <summary>
            Raw qval value for deleted message payload.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.FakeSG.QValPacket.DeletedMessageSequenceNum">
            <summary>
            Last sequence number for the delete message qval and associated payloads.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.CSGInfo.ChangeClientType(ServerTestFramework.LiveService.FakeSG.CSGInfo.ClientType)">
            <summary>
            Changes ClientType to the one needed because SetClientType only works once
                After machinePuid is newly generated, it's set permanently.
            </summary>
            <param name="type">Client Type Enum</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.CSGInfo.GetTestCaseFlowtoken">
            <summary>
            Gets the test case flowtoken that is associated with the current thread.
            </summary>
            <returns>The test case flowtoken that is associated with the current thread.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.CSGInfo.CopyToAuthdata(ServerTestFramework.LiveService.Auth.Authdata_Base)">
            <summary>
            Copies the data in this CSGInfo to the authdata object given.
            </summary>
            <param name="authdata">The object to write to.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.CSGInfo.CopyToAuthdata(ServerTestFramework.LiveService.Auth.Authdata_Xenon)">
            <summary>
            Copies the data in this CSGInfo to the authdata object given.
            </summary>
            <param name="authdata">The object to write to.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.FakeSG.CSGInfo.CopyFromXkdcAuthdata(ServerTestFramework.LiveService.Auth.XboxAuthDataBase)">
            <summary> Fills in this structure from a real authdata structure. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Feedback.FeedbackWS">
            <summary>
            Summary description for FeedbackSupport.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Feedback.XrlFeedback">
            <summary>
            Summary description for XrlFeedback.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Feedback.SubmitComplaintRequest">
            <summary>
            Summary description for xrlUserComplaint.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Feedback.SubmitReview">
            <summary>
            Summary description for XrlUserReview.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Vortex.MyWebTransaction.endPoint">
            <summary>
            IP or DNS name of server
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Vortex.MyWebTransaction.transport">
            <summary>
            Use the UDP protocol transport for delivery
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.MyWebTransaction.httpStatus">
            <summary>
            http status in response
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.MyWebTransaction.ResponseContents">
            <summary>
            Buffer sized to contain raw contents of response
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.MyWebTransaction.XErr">
            <summary>
            Value returned in XErr header field when http response status is 500.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.MyWebTransaction.XDelay">
            <summary>
            HTTP response header for client-side throttling
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.MyWebTransaction.Transports">
            <summary>
            FD transactions can be UDP or TCP now
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ServerTestFramework.LiveService.Vortex.BaseXomListener" -->
        <member name="M:ServerTestFramework.LiveService.Vortex.BaseXomListener.StartXomListener(System.String,System.String,System.String)">
            <summary>
            Starts listening to the XomLog remote.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.BaseXomListener.StopXomListener(System.String,System.String,System.String)">
            <summary>
            Stops listening to the XomLog remote.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.BaseXomListener.StopAllXomListeners">
            <summary>
            Stops listening to the XomLog remote.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.BaseXomListener.RestartXomListeners">
            <summary>
            Starts everything stopped by StopAllXomListeners()
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.BaseXomListener.FlushXomLogCache">
            <summary>
            Empties out the cache of logs that have been received.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.BaseXomListener.Listener(ServerTestFramework.LiveService.ManagementListener.Datagram)">
            <summary>
            Gets called whenever we receive a log.
            </summary>
            <param name="dgram"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.BaseXomListener.ParseRemoteLog(System.String,System.DateTime@,System.String@,System.String@)">
            <summary>
            Parses out the fields from the incoming xomlog. Moved out mainly to get
            ugly code out of the main methods.
            </summary>
            <param name="incomingString"></param>
            <param name="respTime"></param>
            <param name="payload"></param>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.BaseXomListener.IncomingXomLogs">
            <summary>
            Returns a COPY!!!!!! We don't want anyone screwing with the original.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.BaseXomListener.ReqRefCount">
            <summary>
            Used to add a dependency to the integrity of the incomingXomLogs cache. If something is using the object, we won't clear.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.VortexLogBase">
            <summary>
            Represents a high level log passing through vortex.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Vortex.VortexLogBase.reqTime">
            <summary>
            This is used for logging latency and for timing waits. Start it off with object creation time as a starting value.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Vortex.VortexLogBase.privacyTreatment">
            <summary>
            Long to hold the privacy Treatment flags that we are using
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexLogBase.Validate">
            <summary>
            Actually does the validation by generating an expected logline and matching it to the server code.
            It calls GenerateExpectedLogLine and tries to match it to the incoming xom logs.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexLogBase.SendRequest(System.Boolean)">
            <summary>
            Generates the content and sends the request.
            Starts the validation method.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexLogBase.SendRequest">
            <summary>
            Generates the content and sends the request.
            Starts the validation method.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexLogBase.GenerateExpectedResult">
            <summary>
            Virtual method meant to be overriden by the derived classes. This will be called by clients and
            inside validation methods to generate an expected result to compare against the server result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexLogBase.CompareExpectedVsReceived(System.Object,System.Object)">
            <summary>
            Compares a payload received from the xom listener to the one generated by the class.
            </summary>
            <param name="generatedPayload"></param>
            <param name="serverPayload"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexLogBase.AfterValidationFailure">
            <summary>
            Called after we try to validate and fail.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexLogBase.AfterValidationSuccess">
            <summary>
            Called after we try to validate and succeed. Do nothing by default.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexLogBase.ResetValidationState">
            <summary>
            Called whenever you're done with iterating over the incomingXomLogs so if you do some aggregation type of stuff,
            you can reset your state every time we iterate.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.VortexLogBase.PrivacyTreatment">
            <summary>
            Gets or sets the privacy treatment.
            </summary>
            <value>The privacy treatment.</value>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.VortexLogBase.QueryWindowMS">
            <summary>
            Used to determine the maximum wait.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.VortexLogBase.ValidateNotProcessed">
            <summary>
            If this is set to true, validation checks that the item did not go through to processing.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.VortexStringInputBase">
            <summary>
            Stuff that goes in through string inputs. 
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexStringInputBase.#ctor">
            <summary>
            Initializes a Logstring2 object. Takes in the URL to use for the http requests. 
            </summary>        
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexStringInputBase.GenerateParameters(System.Int32)">
            <summary>
            Generates parameters. They will follow the format XX=valueXX.
            </summary>
            <param name="additionalParameters"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexStringInputBase.AddUpdateParameter(System.String,System.String)">
            <summary>
            Adds or updates a parameter using a straight mapping to an int to identify the field.
            </summary>
            <param name="type"></param>
            <param name="value"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexStringInputBase.AddUpdateParameter(System.String,System.String,System.Boolean)">
            <summary>
            Adds or updates a parameter. If it's filtered it won't show up on the expected output.
            </summary>
            <param name="type"></param>
            <param name="value"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexStringInputBase.AddUpdateParameter(System.Int32,System.String)">
            <summary>
            Adds or updates a parameter. Converts the int into a string.
            </summary>
            <param name="type"></param>
            <param name="value"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexStringInputBase.AddUpdateParameter(System.Int32,System.String,System.Boolean)">
            <summary>
            Adds or updates a parameter using a straight mapping to an int to identify the field.
            </summary>
            <param name="type"></param>
            <param name="value"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexStringInputBase.ClearParameters">
            <summary>
            Starts over on the params.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.VortexProtocolInputBase">
            <summary>
            Stuff that goes in through Vortex protocol stream input.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexProtocolInputBase.#ctor">
            <summary>
            Initializes a Logstring2 object. Takes in the URL to use for the http requests. 
            </summary>        
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexProtocolInputBase.#cctor">
            <summary>
            Static konstructor.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexProtocolInputBase.AddUpdateParameter(ServerTestFramework.LiveService.Vortex.VortexEtxField)">
            <summary>
            Adds or updates a parameter. If it's filtered it won't show up on the expected output.
            </summary>
            <param name="type"></param>
            <param name="value"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexProtocolInputBase.AddUpdateParameter(System.UInt32,ServerTestFramework.LiveService.Vortex.VortexEtxField)">
            <summary>
            Adds or updates a parameter. 
            </summary>
            <param name="type"></param>
            <param name="value"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexProtocolInputBase.AddUpdateHeaderValue(System.UInt32,ServerTestFramework.LiveService.Vortex.VortexEtxField)">
            <summary>
            Adds or updates a parameter. 
            </summary>
            <param name="type"></param>
            <param name="value"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexProtocolInputBase.AddUpdateParameter(System.UInt32,ServerTestFramework.LiveService.Vortex.EtxFieldType,System.UInt32,System.Object)">
            <summary>
            Adds or updates a parameter. 
            </summary>
            <param name="type"></param>
            <param name="value"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexProtocolInputBase.AddUpdateParameter(ServerTestFramework.LiveService.Vortex.EtxFieldType,System.UInt32,System.Object)">
            <summary>
            Adds or updates a parameter. 
            </summary>
            <param name="type"></param>
            <param name="value"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexProtocolInputBase.ClearParameters">
            <summary>
            Starts over on the params.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexProtocolInputBase.ValidateCleanserFiles">
            <summary>
            Checks for both files that match the ETX manifest event fingerprint, and the manifest definition itself.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexProtocolInputBase.GenerateData(xonline.common.core.etx.DataField,ServerTestFramework.LiveService.Vortex.EtxFieldType@,System.Object@)">
            <summary>
            Just generates data for each datatype.
            </summary>
            <param name="inType"></param>
            <param name="outType"></param>
            <param name="data"></param>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.VortexProtocolInputBase.CustomMessage">
            <summary>
            The content of the UDP message.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.VortexProtocolInputBase.CustomContent">
            <summary>
            The content of the HTTP request.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.VortexHTTPString">
            <summary>
            Represents an HTTP request sent to vortex
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexHTTPString.#ctor(System.String)">
            <summary>
            Initializes a Logstring2 object. Takes in the URL to use for the http requests. 
            </summary>
            <param name="url"></param>
            <param name="category"></param>
            <param name="timeStamp"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexHTTPString.GetRequestURL">
            <summary>
            Returns the URL + query string that would be used to hit the server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexHTTPString.SendRequestFast(System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Uses the parameters dictionary to generate a query string, and post it to the reqUrl using TCP haxorz
            </summary>
            <param name="ep"></param>
            <param name="fReadResponse"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexHTTPString.BuildQueryString">
            <summary>
            Generates the query string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexHTTPString.AfterValidationFailure">
            <summary>
            In StreamInsight, we have a set window for our histogram query. This method will sleep for the required time + 1 second, then trigger a CTI event.
            to flush out the logs.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.VortexHTTPString.CustomContent">
            <summary>
            The content of the HTTP request.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.VortexHTTPString.UseXRL">
            <summary>
            Send the request using an XRL object.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.VortexHTTPString.CustomQS">
            <summary>
            Custom query string. Overrides any parameters or any of that crap.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.VortexHTTPString.Method">
            <summary>
            The method of the HTTP request. (i.e. GET)
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.VortexHTTPString.KeepAlive">
            <summary>
            Used for the HTTP request.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.VortexHTTPString.RequestURL">
            <summary>
            URL to hit in the HTTP request.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.VortexUDPBinary">
            <summary>
            Vortex UDP listener + Vortex protocol stream
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexUDPBinary.#ctor(System.String)">
            <summary>
            Initializes a UDP object. 
            </summary>
            <param name="url"></param>
            <param name="category"></param>
            <param name="timeStamp"></param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.VortexUDPBinaryXRL">
            <summary>
            Vortex UDP listener + Vortex protocol stream
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexUDPBinaryXRL.#ctor(System.String)">
            <summary>
            Initializes a VortexHTTPBinary object. Takes in the URL to use for the http requests. 
            </summary>
            <param name="url"></param>        
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.VortexUDPBinaryXRL.RequestURL">
            <summary>
            URL to hit in the HTTP request.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.VortexUDPBinaryXRL.SetSGInfo">
            <summary>
            Set or don't set SGInfo into the fakesg.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.VortexHTTPBinary">
            <summary>
            Vortex UDP listener + Vortex protocol stream
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexHTTPBinary.#ctor(System.String)">
            <summary>
            Initializes a VortexHTTPBinary object. Takes in the URL to use for the http requests. 
            </summary>
            <param name="url"></param>        
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexHTTPBinary.GetRequestURL">
            <summary>
            Returns the URL + query string that would be used to hit the server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexHTTPBinary.SendRequestFast(System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Uses the parameters dictionary to generate a query string, and post it to the reqUrl using TCP haxorz
            </summary>
            <param name="ep"></param>
            <param name="fReadResponse"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexHTTPBinary.BuildQueryString">
            <summary>
            Generates the query string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.VortexHTTPBinary.CustomQS">
            <summary>
            Custom query string. Overrides any parameters or any of that crap.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.VortexHTTPBinary.Method">
            <summary>
            The method of the HTTP request. (i.e. GET)
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.VortexHTTPBinary.KeepAlive">
            <summary>
            Used for the HTTP request.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.VortexHTTPBinary.RequestURL">
            <summary>
            URL to hit in the HTTP request.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.VortexHTTPBinary.SetAAInfo">
            <summary>
            Set or don't set AAInfo in the request header.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.VortexHTTPBinary.SetSGInfo">
            <summary>
            Set or don't set SGInfo into the fakesg.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.VortexHTTPBinary.UseXRL">
            <summary>
            Use the XRL object or just call directly.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.VortexClickstreamCount">
            <summary>
            Used to validate clickstream counts
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexClickstreamCount.GenerateExpectedResult">
            <summary>
            Resets the running count of events of this type we've seen - usually validation is preceded by this generate call. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.VortexEventtypeCount">
            <summary>
            Used to validate event type counts
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexEventtypeCount.GenerateExpectedResult">
            <summary>
            Resets the running count of events of this type we've seen - usually validation is preceded by this generate call. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.VortexTraceListener">
            <summary>
            Used to validate debug traces if needed.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexTraceListener.CheckIfContained(System.String)">
            <summary>
            Traces - not going too hardcore on this one, just going
            to check that a string is contained, like an error code 
            for example.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.LS2Fields">
            <summary>
            Some predefined fields we want to fill out.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexLS2.BuildQueryString">
            <summary>
            Generates the query string.
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServerTestFramework.LiveService.Vortex.VortexLS2.GenerateExpectedResult" -->
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexLS2.AddUpdateParameter(ServerTestFramework.LiveService.Vortex.LS2Fields,System.String)">
            <summary>
            Adds or updates a parameter using the LS2Fields enum to identify the field
            </summary>
            <param name="type"></param>
            <param name="value"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexLS2.AddUpdateParameter(ServerTestFramework.LiveService.Vortex.LS2Fields,System.String,System.Boolean)">
            <summary>
            Adds or updates a parameter using the LS2Fields enum to identify the field
            </summary>
            <param name="type"></param>
            <param name="value"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexLS2.GenerateParameters(System.Int32)">
            <summary>
            Generates parameters. They will follow the format vXX=valueXX.
            </summary>
            <param name="additionalParameters"></param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.VortexLS">
            <summary>
            Logstring format. 2 bytes for length, null character separated strings.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.VortexLS_UDP">
            <summary>
            Represents a UDP log passing through vortex. Not in use right now.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexLS_UDP.#ctor(System.String)">
            <summary>
            Initializes a UDP object. 
            </summary>
            <param name="url"></param>
            <param name="category"></param>
            <param name="timeStamp"></param>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.VortexLS_UDP.CustomMessage">
            <summary>
            The content of the UDP message.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexLSBatch.SendBatchedReq">
            <summary>
            Uses the VortexLS methods to generate a batched request. Individually validates each logline.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexLSBatch.SendBatchedReq(System.Boolean)">
            <summary>
            Uses the VortexLS methods to generate a batched request. Individually validates each logline.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.VortexUtil">
            <summary>
            Generic helper methods.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexUtil.PostRequest(System.String,System.String,System.Byte[],System.Boolean,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Posts an HTTP request to a given endpoint.
            </summary>
            <param name="url"></param>
            <param name="method"></param>
            <param name="content"></param>
            <param name="fKeepAlive"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexUtil.PostRequest(System.String,System.String,System.Byte[],System.Boolean)">
            <summary>
            Sends no special headers.
            </summary>
            <param name="url"></param>
            <param name="method"></param>
            <param name="content"></param>
            <param name="fKeepAlive"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexUtil.GenerateHttpHeader(System.Net.IPEndPoint,System.String,System.String,System.Int32)">
            <summary>
            Generates an HTTP header used by the "PostRequestFast" method which skips HTTPWebRequest 
            and does the TCP dirty work itself.
            </summary>
            <param name="endPoint"></param>
            <param name="httpMethod"></param>
            <param name="httpPath"></param>
            <param name="contentLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexUtil.PostRequestFast(System.Net.IPEndPoint,System.String,System.String,System.Byte[],System.Boolean)">
            <summary>
            Similar to post request, but skips HTTPWebRequest and does the dirty work itself.
            </summary>
            <param name="endPoint"></param>
            <param name="url"></param>
            <param name="method"></param>
            <param name="content"></param>
            <param name="fReadResponse"></param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.LogBinaryTransport">
            <summary>
            Sends packets directly to Vortex via http LogBinary.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.DirectUdpTransport">
            <summary>
            Sends packets directly.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.SgUdpTransport">
            <summary>
            Sends packets through the SG.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.VortexProtocolType">
            <summary>
            Represents one of the defined vortex protocol types.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.EtxFieldType">
            <summary>
            Represents one of the defined vortex field types.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.VortexEtxMessage">
            <summary>
            A vortex etx message. Does all the hard work of writing and validating.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.VortexEtxEventBatch">
            <summary>
            A batch of events.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.VortexEtxEvent">
            <summary>
            A specific etx event. Contains a group of fields.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexEtxEvent.GenPXuid(System.UInt64)">
            <summary>
            Creates the PXUID from the XUID
            </summary>
            <param name="xuid">Xuid that we are transforming</param>
            <returns>The pXuid hash to check against</returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.VortexEtxField">
            <summary>
            A specific etx field.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.VortexProtocolWriter">
            <summary>
            Does all the actual byte stream writing work. 
            7Bit encoding taken from Kevin's code. We do not support .NET's 
            native BinaryWriter.Write7BitEncodedInt - it breaks on read of negative ints.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexProtocolWriter.WriteVarInt(System.UInt64)">
            <summary>
            Snapshot from VortexProt.cs
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexProtocolWriter.WriteVarInt(System.Int64)">
            <summary>
            Snapshot from VortexProt.cs
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.LogCollectorCrypto">
            <summary>
            Helper library pulled from IFLIC test cases.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.AAInfoWrapper">
            <summary>
            This class exposes the protected fields of an AAInfo object for writing.
            Ripped right out of sts test and modified for my convenience.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.CAKE.NPDBSetting">
            <summary>
            Base class for NPDB CAKE settings. Defines the general structure of 
            what it means to be a CAKE npdb setting and how to write yourself into NPDB.
            If you are something that gets written directly into NPDB you must implement
            GetMultisettingName() so that NPDBSetting knows where to write the serialized XML.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexWeb.BuildQueryString">
            <summary>
            Generates the query string from the parameters added with AddUpdateParameter or returns the
            custom querystring if set.
            </summary>
            <returns>QueryString that was built</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexWeb.GenerateExpectedResult">
            <summary>
            For now, we aren't going to parse the whole thing.  Perhaps never.
            This is just going to return the ExpectedString Property
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Vortex.VortexWeb.SendRequestInternal">
            <summary>
            Override to send a request with the cookie header
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.VortexWeb.Cookie">
            <summary>
            The cookie string that will be added to the request headers
       