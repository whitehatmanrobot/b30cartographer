does not change).</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToFirstAttribute">
      <summary>Moves to the first attribute.</summary>
      <returns>true if an attribute exists (the reader moves to the first attribute); otherwise, false (the position of the reader does not change).</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToNextAttribute">
      <summary>Moves to the next attribute.</summary>
      <returns>true if there is a next attribute; false if there are no more attributes.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Name">
      <summary>Gets the qualified name of the current node.</summary>
      <returns>The qualified name of the current node. For example, Name is bk:book for the element &lt;bk:book&gt;.The name returned is dependent on the <see cref="P:System.Xml.XmlNodeReader.NodeType" /> of the node. The following node types return the listed values. All other node types return an empty string.Node Type Name AttributeThe name of the attribute. DocumentTypeThe document type name. ElementThe tag name. EntityReferenceThe name of the entity referenced. ProcessingInstructionThe target of the processing instruction. XmlDeclarationThe literal string xml. </returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NamespaceURI">
      <summary>Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</summary>
      <returns>The namespace URI of the current node; otherwise an empty string.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NameTable">
      <summary>Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this implementation.</summary>
      <returns>The XmlNameTable enabling you to get the atomized version of a string within the node.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>One of the <see cref="T:System.Xml.XmlNodeType" /> values representing the type of the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Prefix">
      <summary>Gets the namespace prefix associated with the current node.</summary>
      <returns>The namespace prefix associated with the current node.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Read">
      <summary>Reads the next node from the stream.</summary>
      <returns>true if the next node was read successfully; false if there are no more nodes to read.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadAttributeValue">
      <summary>Parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.</summary>
      <returns>true if there are nodes to return.false if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.An empty attribute, such as, misc="", returns true with a single node with a value of String.Empty.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the content and returns the Base64 decoded binary bytes.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlNodeReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> is not supported on the current node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the content and returns the BinHex decoded binary bytes.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlNodeReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />  is not supported on the current node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the element and decodes the Base64 content.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.Xml.XmlException">The element contains mixed content.</exception>
      <exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the element and decodes the BinHex content.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.Xml.XmlException">The element contains mixed content.</exception>
      <exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
    </member>
    <member name="P:System.Xml.XmlNodeReader.ReadState">
      <summary>Gets the state of the reader.</summary>
      <returns>One of the <see cref="T:System.Xml.ReadState" /> values.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadString">
      <summary>Reads the contents of an element or text node as a string.</summary>
      <returns>The contents of the element or text-like node (This can include CDATA, Text nodes, and so on). This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.Note: The text node can be either an element or an attribute text node.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ResolveEntity">
      <summary>Resolves the entity reference for EntityReference nodes.</summary>
      <exception cref="T:System.InvalidOperationException">The reader is not positioned on an EntityReference node. </exception>
    </member>
    <member name="P:System.Xml.XmlNodeReader.SchemaInfo">
      <summary>Gets the schema information that has been assigned to the current node.</summary>
      <returns>An <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> object containing the schema information for the current node.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Skip">
      <summary>Skips the children of the current node.</summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> object that contains the namespaces that are in scope.</returns>
      <param name="scope">
        <see cref="T:System.Xml.XmlNamespaceScope" /> object.</param>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary>For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />.</summary>
      <returns>
        <see cref="T:System.String" /> that contains the namespace name.</returns>
      <param name="prefix">
        <see cref="T:System.String" /> that contains the namespace prefix.</param>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary>For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />.</summary>
      <returns>
        <see cref="T:System.String" /> object that contains the namespace prefix.</returns>
      <param name="namespaceName">
        <see cref="T:System.String" /> object that identifies the namespace.</param>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Value">
      <summary>Gets the text value of the current node.</summary>
      <returns>The value returned depends on the <see cref="P:System.Xml.XmlNodeReader.NodeType" /> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.Node Type Value AttributeThe value of the attribute. CDATAThe content of the CDATA section. CommentThe content of the comment. DocumentTypeThe internal subset. ProcessingInstructionThe entire content, excluding the target. SignificantWhitespaceThe white space between markup in a mixed content model. TextThe content of the text node. WhitespaceThe white space between markup. XmlDeclarationThe content of the declaration. </returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.XmlLang">
      <summary>Gets the current xml:lang scope.</summary>
      <returns>The current xml:lang scope.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.XmlSpace">
      <summary>Gets the current xml:space scope.</summary>
      <returns>One of the <see cref="T:System.Xml.XmlSpace" /> values. If no xml:space scope exists, this property defaults to XmlSpace.None.</returns>
    </member>
    <member name="T:System.Xml.XmlNodeType">
      <summary>Specifies the type of node.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.None">
      <summary>This is returned by the <see cref="T:System.Xml.XmlReader" /> if a Read method has not been called.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Element">
      <summary>An element (for example, &lt;item&gt; ).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Attribute">
      <summary>An attribute (for example, id='123' ).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Text">
      <summary>The text content of a node.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.CDATA">
      <summary>A CDATA section (for example, &lt;![CDATA[my escaped text]]&gt; ).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EntityReference">
      <summary>A reference to an entity (for example, &amp;num; ).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Entity">
      <summary>An entity declaration (for example, &lt;!ENTITY...&gt; ).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.ProcessingInstruction">
      <summary>A processing instruction (for example, &lt;?pi test?&gt; ).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Comment">
      <summary>A comment (for example, &lt;!-- my comment --&gt; ).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Document">
      <summary>A document object that, as the root of the document tree, provides access to the entire XML document.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentType">
      <summary>The document type declaration, indicated by the following tag (for example, &lt;!DOCTYPE...&gt; ).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentFragment">
      <summary>A document fragment.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Notation">
      <summary>A notation in the document type declaration (for example, &lt;!NOTATION...&gt; ).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Whitespace">
      <summary>White space between markup.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.SignificantWhitespace">
      <summary>White space between markup in a mixed content model or white space within the xml:space="preserve" scope.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndElement">
      <summary>An end element tag (for example, &lt;/item&gt; ).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndEntity">
      <summary>Returned when XmlReader gets to the end of the entity replacement as a result of a call to <see cref="M:System.Xml.XmlReader.ResolveEntity" />.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.XmlDeclaration">
      <summary>The XML declaration (for example, &lt;?xml version='1.0'?&gt; ).</summary>
    </member>
    <member name="T:System.Xml.XmlNotation">
      <summary>Represents a notation declaration, such as &lt;!NOTATION... &gt;.</summary>
    </member>
    <member name="M:System.Xml.XmlNotation.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node. Notation nodes cannot be cloned. Calling this method on an <see cref="T:System.Xml.XmlNotation" /> object throws an exception.</summary>
      <returns>Returns a <see cref="T:System.Xml.XmlNode" /> copy of the node from which the method is called.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
      <exception cref="T:System.InvalidOperationException">Notation nodes cannot be cloned. Calling this method on an <see cref="T:System.Xml.XmlNotation" /> object throws an exception.</exception>
    </member>
    <member name="P:System.Xml.XmlNotation.InnerXml">
      <summary>Gets the markup representing the children of this node.</summary>
      <returns>For XmlNotation nodes, String.Empty is returned.</returns>
      <exception cref="T:System.InvalidOperationException">Attempting to set the property. </exception>
    </member>
    <member name="P:System.Xml.XmlNotation.IsReadOnly">
      <summary>Gets a value indicating whether the node is read-only.</summary>
      <returns>true if the node is read-only; otherwise false.Because XmlNotation nodes are read-only, this property always returns true.</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.LocalName">
      <summary>Gets the name of the current node without the namespace prefix.</summary>
      <returns>For XmlNotation nodes, this property returns the name of the notation.</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.Name">
      <summary>Gets the name of the current node.</summary>
      <returns>The name of the notation.</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>The node type. For XmlNotation nodes, the value is XmlNodeType.Notation.</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.OuterXml">
      <summary>Gets the markup representing this node and all its children.</summary>
      <returns>For XmlNotation nodes, String.Empty is returned.</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.PublicId">
      <summary>Gets the value of the public identifier on the notation declaration.</summary>
      <returns>The public identifier on the notation. If there is no public identifier, null is returned.</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.SystemId">
      <summary>Gets the value of the system identifier on the notation declaration.</summary>
      <returns>The system identifier on the notation. If there is no system identifier, null is returned.</returns>
    </member>
    <member name="M:System.Xml.XmlNotation.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />. This method has no effect on XmlNotation nodes.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlNotation.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />. This method has no effect on XmlNotation nodes.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlOutputMethod">
      <summary>Specifies the method used to serialize the <see cref="T:System.Xml.XmlWriter" /> output. </summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Xml">
      <summary>Serialize according to the XML 1.0 rules.</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Html">
      <summary>Serialize according to the HTML rules specified by XSLT.</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Text">
      <summary>Serialize text blocks only.</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.AutoDetect">
      <summary>Use the XSLT rules to choose between the <see cref="F:System.Xml.XmlOutputMethod.Xml" /> and <see cref="F:System.Xml.XmlOutputMethod.Html" /> output methods at runtime.</summary>
    </member>
    <member name="T:System.Xml.XmlParserContext">
      <summary>Provides all the context information required by the <see cref="T:System.Xml.XmlReader" /> to parse an XML fragment.</summary>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace)">
      <summary>Initializes a new instance of the XmlParserContext class with the specified <see cref="T:System.Xml.XmlNameTable" />, <see cref="T:System.Xml.XmlNamespaceManager" />, base URI, xml:lang, xml:space, and document type values.</summary>
      <param name="nt">The <see cref="T:System.Xml.XmlNameTable" /> to use to atomize strings. If this is null, the name table used to construct the <paramref name="nsMgr" /> is used instead. For more information about atomized strings, see <see cref="T:System.Xml.XmlNameTable" />. </param>
      <param name="nsMgr">The <see cref="T:System.Xml.XmlNamespaceManager" /> to use for looking up namespace information, or null. </param>
      <param name="docTypeName">The name of the document type declaration. </param>
      <param name="pubId">The public identifier. </param>
      <param name="sysId">The system identifier. </param>
      <param name="internalSubset">The internal DTD subset. The DTD subset is used for entity resolution, not for document validation.</param>
      <param name="baseURI">The base URI for the XML fragment (the location from which the fragment was loaded). </param>
      <param name="xmlLang">The xml:lang scope. </param>
      <param name="xmlSpace">An <see cref="T:System.Xml.XmlSpace" /> value indicating the xml:space scope. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> is not the same XmlNameTable used to construct <paramref name="nsMgr" />. </exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary>Initializes a new instance of the XmlParserContext class with the specified <see cref="T:System.Xml.XmlNameTable" />, <see cref="T:System.Xml.XmlNamespaceManager" />, base URI, xml:lang, xml:space, encoding, and document type values.</summary>
      <param name="nt">The <see cref="T:System.Xml.XmlNameTable" /> to use to atomize strings. If this is null, the name table used to construct the <paramref name="nsMgr" /> is used instead. For more information about atomized strings, see <see cref="T:System.Xml.XmlNameTable" />. </param>
      <param name="nsMgr">The <see cref="T:System.Xml.XmlNamespaceManager" /> to use for looking up namespace information, or null. </param>
      <param name="docTypeName">The name of the document type declaration. </param>
      <param name="pubId">The public identifier. </param>
      <param name="sysId">The system identifier. </param>
      <param name="internalSubset">The internal DTD subset. The DTD is used for entity resolution, not for document validation.</param>
      <param name="baseURI">The base URI for the XML fragment (the location from which the fragment was loaded). </param>
      <param name="xmlLang">The xml:lang scope. </param>
      <param name="xmlSpace">An <see cref="T:System.Xml.XmlSpace" /> value indicating the xml:space scope. </param>
      <param name="enc">An <see cref="T:System.Text.Encoding" /> object indicating the encoding setting. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> is not the same XmlNameTable used to construct <paramref name="nsMgr" />. </exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace)">
      <summary>Initializes a new instance of the XmlParserContext class with the specified <see cref="T:System.Xml.XmlNameTable" />, <see cref="T:System.Xml.XmlNamespaceManager" />, xml:lang, and xml:space values.</summary>
      <param name="nt">The <see cref="T:System.Xml.XmlNameTable" /> to use to atomize strings. If this is null, the name table used to construct the <paramref name="nsMgr" /> is used instead. For more information about atomized strings, see <see cref="T:System.Xml.XmlNameTable" />. </param>
      <param name="nsMgr">The <see cref="T:System.Xml.XmlNamespaceManager" /> to use for looking up namespace information, or null. </param>
      <param name="xmlLang">The xml:lang scope. </param>
      <param name="xmlSpace">An <see cref="T:System.Xml.XmlSpace" /> value indicating the xml:space scope. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> is not the same XmlNameTable used to construct <paramref name="nsMgr" />. </exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary>Initializes a new instance of the XmlParserContext class with the specified <see cref="T:System.Xml.XmlNameTable" />, <see cref="T:System.Xml.XmlNamespaceManager" />, xml:lang, xml:space, and encoding.</summary>
      <param name="nt">The <see cref="T:System.Xml.XmlNameTable" /> to use to atomize strings. If this is null, the name table used to construct the <paramref name="nsMgr" /> is used instead. For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" />. </param>
      <param name="nsMgr">The <see cref="T:System.Xml.XmlNamespaceManager" /> to use for looking up namespace information, or null. </param>
      <param name="xmlLang">The xml:lang scope. </param>
      <param name="xmlSpace">An <see cref="T:System.Xml.XmlSpace" /> value indicating the xml:space scope. </param>
      <param name="enc">An <see cref="T:System.Text.Encoding" /> object indicating the encoding setting. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> is not the same XmlNameTable used to construct <paramref name="nsMgr" />. </exception>
    </member>
    <member name="P:System.Xml.XmlParserContext.BaseURI">
      <summary>Gets or sets the base URI.</summary>
      <returns>The base URI to use to resolve the DTD file.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.DocTypeName">
      <summary>Gets or sets the name of the document type declaration.</summary>
      <returns>The name of the document type declaration.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.Encoding">
      <summary>Gets or sets the encoding type.</summary>
      <returns>An <see cref="T:System.Text.Encoding" /> object indicating the encoding type.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.InternalSubset">
      <summary>Gets or sets the internal DTD subset.</summary>
      <returns>The internal DTD subset. For example, this property returns everything between the square brackets &lt;!DOCTYPE doc [...]&gt;.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.NamespaceManager">
      <summary>Gets or sets the <see cref="T:System.Xml.XmlNamespaceManager" />.</summary>
      <returns>The XmlNamespaceManager.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.NameTable">
      <summary>Gets the <see cref="T:System.Xml.XmlNameTable" /> used to atomize strings. For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" />.</summary>
      <returns>The XmlNameTable.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.PublicId">
      <summary>Gets or sets the public identifier.</summary>
      <returns>The public identifier.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.SystemId">
      <summary>Gets or sets the system identifier.</summary>
      <returns>The system identifier.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlLang">
      <summary>Gets or sets the current xml:lang scope.</summary>
      <returns>The current xml:lang scope. If there is no xml:lang in scope, String.Empty is returned.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlSpace">
      <summary>Gets or sets the current xml:space scope.</summary>
      <returns>An <see cref="T:System.Xml.XmlSpace" /> value indicating the xml:space scope.</returns>
    </member>
    <member name="T:System.Xml.XmlProcessingInstruction">
      <summary>Represents a processing instruction, which XML defines to keep processor-specific information in the text of the document.</summary>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.#ctor(System.String,System.String,System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlProcessingInstruction" /> class.</summary>
      <param name="target">The target of the processing instruction; see the <see cref="P:System.Xml.XmlProcessingInstruction.Target" /> property.</param>
      <param name="data">The content of the instruction; see the <see cref="P:System.Xml.XmlProcessingInstruction.Data" /> property.</param>
      <param name="doc">The parent XML document.</param>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The duplicate node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. </param>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Data">
      <summary>Gets or sets the content of the processing instruction, excluding the target.</summary>
      <returns>The content of the processing instruction, excluding the target.</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.InnerText">
      <summary>Gets or sets the concatenated values of the node and all its children.</summary>
      <returns>The concatenated values of the node and all its children.</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.LocalName">
      <summary>Gets the local name of the node.</summary>
      <returns>For processing instruction nodes, this property returns the target of the processing instruction.</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Name">
      <summary>Gets the qualified name of the node.</summary>
      <returns>For processing instruction nodes, this property returns the target of the processing instruction.</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>For XmlProcessingInstruction nodes, this value is XmlNodeType.ProcessingInstruction.</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Target">
      <summary>Gets the target of the processing instruction.</summary>
      <returns>The target of the processing instruction.</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Value">
      <summary>Gets or sets the value of the node.</summary>
      <returns>The entire content of the processing instruction, excluding the target.</returns>
      <exception cref="T:System.ArgumentException">Node is read-only. </exception>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />. Because ProcessingInstruction nodes do not have children, this method has no effect.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlQualifiedName">
      <summary>Represents an XML qualified name.</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlQualifiedName" /> class.</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlQualifiedName" /> class with the specified name.</summary>
      <param name="name">The local name to use as the name of the <see cref="T:System.Xml.XmlQualifiedName" /> object. </param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlQualifiedName" /> class with the specified name and namespace.</summary>
      <param name="name">The local name to use as the name of the <see cref="T:System.Xml.XmlQualifiedName" /> object. </param>
      <param name="ns">The namespace for the <see cref="T:System.Xml.XmlQualifiedName" /> object. </param>
    </member>
    <member name="F:System.Xml.XmlQualifiedName.Empty">
      <summary>Provides an empty <see cref="T:System.Xml.XmlQualifiedName" />.</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Xml.XmlQualifiedName" /> object is equal to the current <see cref="T:System.Xml.XmlQualifiedName" /> object. </summary>
      <returns>true if the two are the same instance object; otherwise, false.</returns>
      <param name="other">The <see cref="T:System.Xml.XmlQualifiedName" /> to compare. </param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.GetHashCode">
      <summary>Returns the hash code for the <see cref="T:System.Xml.XmlQualifiedName" />.</summary>
      <returns>A hash code for this object.</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.IsEmpty">
      <summary>Gets a value indicating whether the <see cref="T:System.Xml.XmlQualifiedName" /> is empty.</summary>
      <returns>true if name and namespace are empty strings; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Name">
      <summary>Gets a string representation of the qualified name of the <see cref="T:System.Xml.XmlQualifiedName" />.</summary>
      <returns>A string representation of the qualified name or String.Empty if a name is not defined for the object.</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Namespace">
      <summary>Gets a string representation of the namespace of the <see cref="T:System.Xml.XmlQualifiedName" />.</summary>
      <returns>A string representation of the namespace or String.Empty if a namespace is not defined for the object.</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>Compares two <see cref="T:System.Xml.XmlQualifiedName" /> objects.</summary>
      <returns>true if the two objects have the same name and namespace values; otherwise, false.</returns>
      <param name="a">An <see cref="T:System.Xml.XmlQualifiedName" /> to compare. </param>
      <param name="b">An <see cref="T:System.Xml.XmlQualifiedName" /> to compare. </param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>Compares two <see cref="T:System.Xml.XmlQualifiedName" /> objects.</summary>
      <returns>true if the name and namespace values for the two objects differ; otherwise, false.</returns>
      <param name="a">An <see cref="T:System.Xml.XmlQualifiedName" /> to compare. </param>
      <param name="b">An <see cref="T:System.Xml.XmlQualifiedName" /> to compare. </param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString">
      <summary>Returns the string value of the <see cref="T:System.Xml.XmlQualifiedName" />.</summary>
      <returns>The string value of the <see cref="T:System.Xml.XmlQualifiedName" /> in the format of namespace:localname. If the object does not have a namespace defined, this method returns just the local name.</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString(System.String,System.String)">
      <summary>Returns the string value of the <see cref="T:System.Xml.XmlQualifiedName" />.</summary>
      <returns>The string value of the <see cref="T:System.Xml.XmlQualifiedName" /> in the format of namespace:localname. If the object does not have a namespace defined, this method returns just the local name.</returns>
      <param name="name">The name of the object. </param>
      <param name="ns">The namespace of the object. </param>
    </member>
    <member name="T:System.Xml.XmlReader">
      <summary>Represents a reader that provides fast, non-cached, forward-only access to XML data.</summary>
    </member>
    <member name="M:System.Xml.XmlReader.#ctor">
      <summary>Initializes a new instance of the XmlReader class.</summary>
    </member>
    <member name="P:System.Xml.XmlReader.AttributeCount">
      <summary>When overridden in a derived class, gets the number of attributes on the current node.</summary>
      <returns>The number of attributes on the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.BaseURI">
      <summary>When overridden in a derived class, gets the base URI of the current node.</summary>
      <returns>The base URI of the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.CanReadBinaryContent">
      <summary>Gets a value indicating whether the <see cref="T:System.Xml.XmlReader" /> implements the binary content read methods.</summary>
      <returns>true if the binary content read methods are implemented; otherwise false.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.CanReadValueChunk">
      <summary>Gets a value indicating whether the <see cref="T:System.Xml.XmlReader" /> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method. </summary>
      <returns>true if the <see cref="T:System.Xml.XmlReader" /> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method; otherwise false.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.CanResolveEntity">
      <summary>Gets a value indicating whether this reader can parse and resolve entities.</summary>
      <returns>true if the reader can parse and resolve entities; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Close">
      <summary>When overridden in a derived class, changes the <see cref="P:System.Xml.XmlReader.ReadState" /> to Closed.</summary>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified stream.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object used to read the data contained in the stream. </returns>
      <param name="input">The stream containing the XML data. The <see cref="T:System.Xml.XmlReader" /> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> value is null.</exception>
      <exception cref="T:System.Security.SecurityException">The <see cref="T:System.Xml.XmlReader" /> does not have sufficient permissions to access the location of the XML data.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance with the specified stream and <see cref="T:System.Xml.XmlReaderSettings" /> object.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read the XML data.</returns>
      <param name="input">The stream containing the XML data. The <see cref="T:System.Xml.XmlReader" /> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.String)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified stream, base URI, and <see cref="T:System.Xml.XmlReaderSettings" /> object.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</returns>
      <param name="input">The stream containing the XML data. The <see cref="T:System.Xml.XmlReader" /> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
      <param name="baseUri">The base URI for the entity or document being read. This value can be null.Security NoteThe base URI is used to resolve the relative URI of the XML document. Do not use a base URI from an untrusted source.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified stream, <see cref="T:System.Xml.XmlReaderSettings" />, and <see cref="T:System.Xml.XmlParserContext" /> objects.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</returns>
      <param name="input">The stream containing the XML data. The <see cref="T:System.Xml.XmlReader" /> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
      <param name="inputContext">The <see cref="T:System.Xml.XmlParserContext" /> object that provides the context information required to parse the XML fragment. The context information can include the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current xml:lang and xml:space scope, base URI, and document type definition. This value can be null.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance with the specified <see cref="T:System.IO.TextReader" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read the XML data.</returns>
      <param name="input">The <see cref="T:System.IO.TextReader" /> from which to read the XML data. Because a <see cref="T:System.IO.TextReader" /> returns a stream of Unicode characters, the encoding specified in the XML declaration is not used by the <see cref="T:System.Xml.XmlReader" /> to decode the data stream.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified <see cref="T:System.IO.TextReader" /> and <see cref="T:System.Xml.XmlReaderSettings" /> objects.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</returns>
      <param name="input">The <see cref="T:System.IO.TextReader" /> from which to read the XML data. Because a <see cref="T:System.IO.TextReader" /> returns a stream of Unicode characters, the encoding specified in the XML declaration is not used by the <see cref="T:System.Xml.XmlReader" /> to decode the data stream</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" />. This value can be null.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.String)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified <see cref="T:System.IO.TextReader" />, <see cref="T:System.Xml.XmlReaderSettings" />, and base URI.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</returns>
      <param name="input">The <see cref="T:System.IO.TextReader" /> from which to read the XML data. Because a <see cref="T:System.IO.TextReader" /> returns a stream of Unicode characters, the encoding specified in the XML declaration is not used by the <see cref="T:System.Xml.XmlReader" /> to decode the data stream.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
      <param name="baseUri">The base URI for the entity or document being read. This value can be null.Security NoteThe base URI is used to resolve the relative URI of the XML document. Do not use a base URI from an untrusted source.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified <see cref="T:System.IO.TextReader" />, <see cref="T:System.Xml.XmlReaderSettings" />, and <see cref="T:System.Xml.XmlParserContext" /> objects.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</returns>
      <param name="input">The <see cref="T:System.IO.TextReader" /> from which to read the XML data. Because a <see cref="T:System.IO.TextReader" /> returns a stream of Unicode characters, the encoding specified in the XML declaration is not used by the <see cref="T:System.Xml.XmlReader" /> to decode the data stream.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
      <param name="inputContext">The <see cref="T:System.Xml.XmlParserContext" /> object that provides the context information required to parse the XML fragment. The context information can include the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current xml:lang and xml:space scope, base URI, and document type definition. This value can be null.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> value is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Xml.XmlReaderSettings.NameTable" />  and <see cref="P:System.Xml.XmlParserContext.NameTable" /> properties both contain values. (Only one of these NameTable properties can be set and used).</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance with specified URI.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read the XML data. </returns>
      <param name="inputUri">The URI for the file containing the XML data. The <see cref="T:System.Xml.XmlUrlResolver" /> class is used to convert the path to a canonical data representation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="inputUri" /> value is null.</exception>
      <exception cref="T:System.Security.SecurityException">The <see cref="T:System.Xml.XmlReader" /> does not have sufficient permissions to access the location of the XML data.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file identified by the URI does not exist.</exception>
      <exception cref="T:System.UriFormatException">The URI format is not correct.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings)">
      <summary>Creates a new instance with the specified URI and <see cref="T:System.Xml.XmlReaderSettings" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</returns>
      <param name="inputUri">The URI for the file containing the XML data. The <see cref="T:System.Xml.XmlResolver" /> object on the <see cref="T:System.Xml.XmlReaderSettings" /> object is used to convert the path to a canonical data representation. If <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> is null, a new <see cref="T:System.Xml.XmlUrlResolver" /> object is used.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="inputUri" /> value is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified by the URI cannot be found.</exception>
      <exception cref="T:System.UriFormatException">The URI format is not correct.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified URI, <see cref="T:System.Xml.XmlReaderSettings" />, and <see cref="T:System.Xml.XmlParserContext" /> objects.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</returns>
      <param name="inputUri">The URI for the file containing the XML data. The <see cref="T:System.Xml.XmlResolver" /> object on the <see cref="T:System.Xml.XmlReaderSettings" /> object is used to convert the path to a canonical data representation. If <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> is null, a new <see cref="T:System.Xml.XmlUrlResolver" /> object is used.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
      <param name="inputContext">The <see cref="T:System.Xml.XmlParserContext" /> object that provides the context information required to parse the XML fragment. The context information can include the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current xml:lang and xml:space scope, base URI, and document type definition. This value can be null.</param>
      <exception cref="T:System.ArgumentNullException">The inputUri value is null.</exception>
      <exception cref="T:System.Security.SecurityException">The <see cref="T:System.Xml.XmlReader" /> does not have sufficient permissions to access the location of the XML data.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Xml.XmlReaderSettings.NameTable" />  and <see cref="P:System.Xml.XmlParserContext.NameTable" /> properties both contain values. (Only one of these NameTable properties can be set and used).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified by the URI cannot be found.</exception>
      <exception cref="T:System.UriFormatException">The URI format is not correct.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.Xml.XmlReader,System.Xml.XmlReaderSettings)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance with the specified <see cref="T:System.Xml.XmlReader" /> and <see cref="T:System.Xml.XmlReaderSettings" /> objects.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object that is wrapped around the specified <see cref="T:System.Xml.XmlReader" /> object.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> object that you wish to use as the underlying reader.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance.The conformance level of the <see cref="T:System.Xml.XmlReaderSettings" /> object must either match the conformance level of the underlying reader, or it must be set to <see cref="F:System.Xml.ConformanceLevel.Auto" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="reader" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">If the <see cref="T:System.Xml.XmlReaderSettings" /> object specifies a conformance level that is not consistent with conformance level of the underlying reader.-or-The underlying <see cref="T:System.Xml.XmlReader" /> is in an <see cref="F:System.Xml.ReadState.Error" /> or <see cref="F:System.Xml.ReadState.Closed" /> state.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Depth">
      <summary>When overridden in a derived class, gets the depth of the current node in the XML document.</summary>
      <returns>The depth of the current node in the XML document.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Xml.XmlReader" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Xml.XmlReader.EOF">
      <summary>When overridden in a derived class, gets a value indicating whether the reader is positioned at the end of the stream.</summary>
      <returns>true if the reader is positioned at the end of the stream; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.Int32)">
      <summary>When overridden in a derived class, gets the value of the attribute with the specified index.</summary>
      <returns>The value of the specified attribute. This method does not move the reader.</returns>
      <param name="i">The index of the attribute. The index is zero-based. (The first attribute has index 0.) </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> is out of range. It must be non-negative and less than the size of the attribute collection.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String)">
      <summary>When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.Name" />.</summary>
      <returns>The value of the specified attribute. If the attribute is not found or the value is String.Empty, null is returned.</returns>
      <param name="name">The qualified name of the attribute. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)">
      <summary>When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" />.</summary>
      <returns>The value of the specified attribute. If the attribute is not found or the value is String.Empty, null is returned. This method does not move the reader.</returns>
      <param name="name">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.HasAttributes">
      <summary>Gets a value indicating whether the current node has any attributes.</summary>
      <returns>true if the current node has attributes; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.HasValue">
      <summary>When overridden in a derived class, gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlReader.Value" />.</summary>
      <returns>true if the node on which the reader is currently positioned can have a Value; otherwise, false. If false, the node has a value of String.Empty.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.IsDefault">
      <summary>When overridden in a derived class, gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.</summary>
      <returns>true if the current node is an attribute whose value was generated from the default value defined in the DTD or schema; false if the attribute value was explicitly set.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.IsEmptyElement">
      <summary>When overridden in a derived class, gets a value indicating whether the current node is an empty element (for example, &lt;MyElement/&gt;).</summary>
      <returns>true if the current node is an element (<see cref="P:System.Xml.XmlReader.NodeType" /> equals XmlNodeType.Element) that ends with /&gt;; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.IsName(System.String)">
      <summary>Gets a value indicating whether the string argument is a valid XML name.</summary>
      <returns>true if the name is valid; otherwise, false.</returns>
      <param name="str">The name to validate. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="str" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsNameToken(System.String)">
      <summary>Gets a value indicating whether or not the string argument is a valid XML name token.</summary>
      <returns>true if it is a valid name token; otherwise false.</returns>
      <param name="str">The name token to validate. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="str" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement">
      <summary>Calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> and tests if the current content node is a start tag or empty element tag.</summary>
      <returns>true if <see cref="M:System.Xml.XmlReader.MoveToContent" /> finds a start tag or empty element tag; false if a node type other than XmlNodeType.Element was found.</returns>
      <exception cref="T:System.Xml.XmlException">Incorrect XML is encountered in the input stream. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String)">
      <summary>Calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> and tests if the current content node is a start tag or empty element tag and if the <see cref="P:System.Xml.XmlReader.Name" /> property of the element found matches the given argument.</summary>
      <returns>true if the resulting node is an element and the Name property matches the specified string. false if a node type other than XmlNodeType.Element was found or if the element Name property does not match the specified string.</returns>
      <param name="name">The string matched against the Name property of the element found. </param>
      <exception cref="T:System.Xml.XmlException">Incorrect XML is encountered in the input stream. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String,System.String)">
      <summary>Calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> and tests if the current content node is a start tag or empty element tag and if the <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> properties of the element found match the given strings.</summary>
      <returns>true if the resulting node is an element. false if a node type other than XmlNodeType.Element was found or if the LocalName and NamespaceURI properties of the element do not match the specified strings.</returns>
      <param name="localname">The string to match against the LocalName property of the element found. </param>
      <param name="ns">The string to match against the NamespaceURI property of the element found. </param>
      <exception cref="T:System.Xml.XmlException">Incorrect XML is encountered in the input stream. </exception>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.Int32)">
      <summary>When overridden in a derived class, gets the value of the attribute with the specified index.</summary>
      <returns>The value of the specified attribute.</returns>
      <param name="i">The index of the attribute. </param>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String)">
      <summary>When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.Name" />.</summary>
      <returns>The value of the specified attribute. If the attribute is not found, null is returned.</returns>
      <param name="name">The qualified name of the attribute. </param>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String,System.String)">
      <summary>When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" />.</summary>
      <returns>The value of the specified attribute. If the attribute is not found, null is returned.</returns>
      <param name="name">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
    </member>
    <member name="P:System.Xml.XmlReader.LocalName">
      <summary>When overridden in a derived class, gets the local name of the current node.</summary>
      <returns>The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.For node types that do not have a name (like Text, Comment, and so on), this property returns String.Empty.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.LookupNamespace(System.String)">
      <summary>When overridden in a derived class, resolves a namespace prefix in the current element's scope.</summary>
      <returns>The namespace URI to which the prefix maps or null if no matching prefix is found.</returns>
      <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. </param>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.Int32)">
      <summary>When overridden in a derived class, moves to the attribute with the specified index.</summary>
      <param name="i">The index of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String)">
      <summary>When overridden in a derived class, moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.Name" />.</summary>
      <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
      <param name="name">The qualified name of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)">
      <summary>When overridden in a derived class, moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" />.</summary>
      <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
      <param name="name">The local name of the attribute. </param>
      <param name="ns">The namespace URI of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToContent">
      <summary>Checks whether the current node is a content (non-white space text, CDATA, Element, EndElement, EntityReference, or EndEntity) node. If the node is not a content node, the reader skips ahead to the next content node or end of file. It skips over nodes of the following type: ProcessingInstruction, DocumentType, Comment, Whitespace, or SignificantWhitespace.</summary>
      <returns>The <see cref="P:System.Xml.XmlReader.NodeType" /> of the current node found by the method or XmlNodeType.None if the reader has reached the end of the input stream.</returns>
      <exception cref="T:System.Xml.XmlException">Incorrect XML encountered in the input stream. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToElement">
      <summary>When overridden in a derived class, moves to the element that contains the current attribute node.</summary>
      <returns>true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned on an attribute (the position of the reader does not change).</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToFirstAttribute">
      <summary>When overridden in a derived class, moves to the first attribute.</summary>
      <returns>true if an attribute exists (the reader moves to the first attribute); otherwise, false (the position of the reader does not change).</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToNextAttribute">
      <summary>When overridden in a derived class, moves to the next attribute.</summary>
      <returns>true if there is a next attribute; false if there are no more attributes.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Name">
      <summary>When overridden in a derived class, gets the qualified name of the current node.</summary>
      <returns>The qualified name of the current node. For example, Name is bk:book for the element &lt;bk:book&gt;.The name returned is dependent on the <see cref="P:System.Xml.XmlReader.NodeType" /> of the node. The following node types return the listed values. All other node types return an empty string.Node type Name AttributeThe name of the attribute. DocumentTypeThe document type name. ElementThe tag name. EntityReferenceThe name of the entity referenced. ProcessingInstructionThe target of the processing instruction. XmlDeclarationThe literal string xml. </returns>
    </member>
    <member name="P:System.Xml.XmlReader.NamespaceURI">
      <summary>When overridden in a derived class, gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</summary>
      <returns>The namespace URI of the current node; otherwise an empty string.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.NameTable">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this implementation.</summary>
      <returns>The XmlNameTable enabling you to get the atomized version of a string within the node.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.NodeType">
      <summary>When overridden in a derived class, gets the type of the current node.</summary>
      <returns>One of the <see cref="T:System.Xml.XmlNodeType" /> values representing the type of the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Prefix">
      <summary>When overridden in a derived class, gets the namespace prefix associated with the current node.</summary>
      <returns>The namespace prefix associated with the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.QuoteChar">
      <summary>When overridden in a derived class, gets the quotation mark character used to enclose the value of an attribute node.</summary>
      <returns>The quotation mark character (" or ') used to enclose the value of an attribute node.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Read">
      <summary>When overridden in a derived class, reads the next node from the stream.</summary>
      <returns>true if the next node was read successfully; false if there are no more nodes to read.</returns>
      <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadAttributeValue">
      <summary>When overridden in a derived class, parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.</summary>
      <returns>true if there are nodes to return.false if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.An empty attribute, such as, misc="", returns true with a single node with a value of String.Empty.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>Reads the content as an object of the type specified.</summary>
      <returns>The concatenated text content or attribute value converted to the requested type.</returns>
      <param name="returnType">The type of the value to be returned.NoteWith the release of the .NET Framework 3.5, the value of the <paramref name="returnType" /> parameter can now be the <see cref="T:System.DateTimeOffset" /> type.</param>
      <param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object that is used to resolve any namespace prefixes related to type conversion. For example, this can be used when converting an <see cref="T:System.Xml.XmlQualifiedName" /> object to an xs:string.This value can be null.</param>
      <exception cref="T:System.FormatException">The content is not in the correct format for the target type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="returnType" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node is not a supported node type. See the table below for details.</exception>
      <exception cref="T:System.OverflowException">Read Decimal.MaxValue.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the content and returns the Base64 decoded binary bytes.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />  is not supported on the current node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the content and returns the BinHex decoded binary bytes.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> is not supported on the current node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBoolean">
      <summary>Reads the text content at the current position as a Boolean.</summary>
      <returns>The text content as a <see cref="T:System.Boolean" /> object.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDateTime">
      <summary>Reads the text content at the current position as a <see cref="T:System.DateTime" /> object.</summary>
      <returns>The text content as a <see cref="T:System.DateTime" /> object.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDecimal">
      <summary>Reads the text content at the current position as a <see cref="T:System.Decimal" /> object.</summary>
      <returns>The text content at the current position as a <see cref="T:System.Decimal" /> object.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDouble">
      <summary>Reads the text content at the current position as a double-precision floating-point number.</summary>
      <returns>The text content as a double-precision floating-point number.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsFloat">
      <summary>Reads the text content at the current position as a single-precision floating point number.</summary>
      <returns>The text content at the current position as a single-precision floating point number.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsInt">
      <summary>Reads the text content at the current position as a 32-bit signed integer.</summary>
      <returns>The text content as a 32-bit signed integer.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsLong">
      <summary>Reads the text content at the current position as a 64-bit signed integer.</summary>
      <returns>The text content as a 64-bit signed integer.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsObject">
      <summary>Reads the text content at the current position as an <see cref="T:System.Object" />.</summary>
      <returns>The text content as the most appropriate common language runtime (CLR) object.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsString">
      <summary>Reads the text content at the current position as a <see cref="T:System.String" /> object.</summary>
      <returns>The text content as a <see cref="T:System.String" /> object.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>Reads the element content as the requested type.</summary>
      <returns>The element content converted to the requested typed object.</returns>
      <param name="returnType">The type of the value to be returned.NoteWith the release of the .NET Framework 3.5, the value of the <paramref name="returnType" /> parameter can now be the <see cref="T:System.DateTimeOffset" /> type.</param>
      <param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object that is used to resolve any namespace prefixes related to type conversion.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.OverflowException">Read Decimal.MaxValue.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver,System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the element content as the requested type.</summary>
      <returns>The element content converted to the requested typed object.</returns>
      <param name="returnType">The type of the value to be returned.NoteWith the release of the .NET Framework 3.5, the value of the <paramref name="returnType" /> parameter can now be the <see cref="T:System.DateTimeOffset" /> type.</param>
      <param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object that is used to resolve any namespace prefixes related to type conversion.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
      <exception cref="T:System.OverflowException">Read Decimal.MaxValue.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the element and decodes the Base64 content.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</exception>
      <exception cref="T:System.Xml.XmlException">The element contains mixed-content.</exception>
      <exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the element and decodes the BinHex content.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</exception>
      <exception cref="T:System.Xml.XmlException">The element contains mixed-content.</exception>
      <exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBoolean">
      <summary>Reads the current element and returns the contents as a <see cref="T:System.Boolean" /> object.</summary>
      <returns>The element content as a <see cref="T:System.Boolean" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.Boolean" /> object.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBoolean(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.Boolean" /> object.</summary>
      <returns>The element content as a <see cref="T:System.Boolean" /> object.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDateTime">
      <summary>Reads the current element and returns the contents as a <see cref="T:System.DateTime" /> object.</summary>
      <returns>The element content as a <see cref="T:System.DateTime" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.DateTime" /> object.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDateTime(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.DateTime" /> object.</summary>
      <returns>The element contents as a <see cref="T:System.DateTime" /> object.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDecimal">
      <summary>Reads the current element and returns the contents as a <see cref="T:System.Decimal" /> object.</summary>
      <returns>The element content as a <see cref="T:System.Decimal" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.Decimal" />.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDecimal(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.Decimal" /> object.</summary>
      <returns>The element content as a <see cref="T:System.Decimal" /> object.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.Decimal" />.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDouble">
      <summary>Reads the current element and returns the contents as a double-precision floating-point number.</summary>
      <returns>The element content as a double-precision floating-point number.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a double-precision floating-point number.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDouble(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a double-precision floating-point number.</summary>
      <returns>The element content as a double-precision floating-point number.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsFloat">
      <summary>Reads the current element and returns the contents as single-precision floating-point number.</summary>
      <returns>The element content as a single-precision floating point number.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a single-precision floating-point number.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsFloat(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a single-precision floating-point number.</summary>
      <returns>The element content as a single-precision floating point number.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a single-precision floating-point number.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsInt">
      <summary>Reads the current element and returns the contents as a 32-bit signed integer.</summary>
      <returns>The element content as a 32-bit signed integer.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a 32-bit signed integer.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsInt(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 32-bit signed integer.</summary>
      <returns>The element content as a 32-bit signed integer.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a 32-bit signed integer.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsLong">
      <summary>Reads the current element and returns the contents as a 64-bit signed integer.</summary>
      <returns>The element content as a 64-bit signed integer.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a 64-bit signed integer.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsLong(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 64-bit signed integer.</summary>
      <returns>The element content as a 64-bit signed integer.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a 64-bit signed integer.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObject">
      <summary>Reads the current element and returns the contents as an <see cref="T:System.Object" />.</summary>
      <returns>A boxed common language runtime (CLR) object of the most appropriate type. The <see cref="P:System.Xml.XmlReader.ValueType" /> property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObject(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as an <see cref="T:System.Object" />.</summary>
      <returns>A boxed common language runtime (CLR) object of the most appropriate type. The <see cref="P:System.Xml.XmlReader.ValueType" /> property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsString">
      <summary>Reads the current element and returns the contents as a <see cref="T:System.String" /> object.</summary>
      <returns>The element content as a <see cref="T:System.String" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.String" /> object.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.String" /> object.</summary>
      <returns>The element content as a <see cref="T:System.String" /> object.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.String" /> object.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString">
      <summary>Reads a text-only element.</summary>
      <returns>The text contained in the element that was read. An empty string if the element is empty (&lt;item&gt;&lt;/item&gt; or &lt;item/&gt;).</returns>
      <exception cref="T:System.Xml.XmlException">The next content node is not a start tag; or the element found does not contain a simple text value. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString(System.String)">
      <summary>Checks that the <see cref="P:System.Xml.XmlReader.Name" /> property of the element found matches the given string before reading a text-only element.</summary>
      <returns>The text contained in the element that was read. An empty string if the element is empty (&lt;item&gt;&lt;/item&gt; or &lt;item/&gt;).</returns>
      <param name="name">The name to check. </param>
      <exception cref="T:System.Xml.XmlException">If the next content node is not a start tag; if the element Name does not match the given argument; or if the element found does not contain a simple text value. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString(System.String,System.String)">
      <summary>Checks that the <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> properties of the element found matches the given strings before reading a text-only element.</summary>
      <returns>The text contained in the element that was read. An empty string if the element is empty (&lt;item&gt;&lt;/item&gt; or &lt;item/&gt;).</returns>
      <param name="localname">The local name to check. </param>
      <param name="ns">The namespace URI to check. </param>
      <exception cref="T:System.Xml.XmlException">If the next content node is not a start tag; if the element LocalName or NamespaceURI do not match the given arguments; or if the element found does not contain a simple text value. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadEndElement">
      <summary>Checks that the current content node is an end tag and advances the reader to the next node.</summary>
      <exception cref="T:System.Xml.XmlException">The current node is not an end tag or if incorrect XML is encountered in the input stream. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadInnerXml">
      <summary>When overridden in a derived class, reads all the content, including markup, as a string.</summary>
      <returns>All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.If the current node is neither an element nor attribute, an empty string is returned.</returns>
      <exception cref="T:System.Xml.XmlException">The XML was not well-formed, or an error occurred while parsing the XML. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadOuterXml">
      <summary>When overridden in a derived class, reads the content, including markup, representing this node and all its children.</summary>
      <returns>If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.</returns>
      <exception cref="T:System.Xml.XmlException">The XML was not well-formed, or an error occurred while parsing the XML. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement">
      <summary>Checks that the current node is an element and advances the reader to the next node.</summary>
      <exception cref="T:System.Xml.XmlException">Incorrect XML was encountered in the input stream. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String)">
      <summary>Checks that the current content node is an element with the given <see cref="P:System.Xml.XmlReader.Name" /> and advances the reader to the next node.</summary>
      <param name="name">The qualified name of the element. </param>
      <exception cref="T:System.Xml.XmlException">Incorrect XML was encountered in the input stream. -or- The <see cref="P:System.Xml.XmlReader.Name" /> of the element does not match the given <paramref name="name" />. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)">
      <summary>Checks that the current content node is an element with the given <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> and advances the reader to the next node.</summary>
      <param name="localname">The local name of the element. </param>
      <param name="ns">The namespace URI of the element. </param>
      <exception cref="T:System.Xml.XmlException">Incorrect XML was encountered in the input stream.-or-The <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> properties of the element found do not match the given arguments. </exception>
    </member>
    <member name="P:System.Xml.XmlReader.ReadState">
      <summary>When overridden in a derived class, gets the state of the reader.</summary>
      <returns>One of the <see cref="T:System.Xml.ReadState" /> values.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadString">
      <summary>When overridden in a derived class, reads the contents of an element or text node as a string.</summary>
      <returns>The contents of the element or an empty string.</returns>
      <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadSubtree">
      <summary>Returns a new XmlReader instance that can be used to read the current node, and all its descendants.</summary>
      <returns>A new XmlReader instance set to ReadState.Initial. A call to the <see cref="M:System.Xml.XmlReader.Read" /> method positions the new XmlReader on the node that was current before the call to ReadSubtree method.</returns>
      <exception cref="T:System.InvalidOperationException">The XmlReader is not positioned on an element when this method is called.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToDescendant(System.String)">
      <summary>Advances the <see cref="T:System.Xml.XmlReader" /> to the next descendant element with the specified qualified name.</summary>
      <returns>true if a matching descendant element is found; otherwise false. If a matching child element is not found, the <see cref="T:System.Xml.XmlReader" /> is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType" /> is XmlNodeType.EndElement) of the element.If the <see cref="T:System.Xml.XmlReader" /> is not positioned on an element when <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String)" /> was called, this method returns false and the position of the <see cref="T:System.Xml.XmlReader" /> is not changed.</returns>
      <param name="name">The qualified name of the element you wish to move to.</param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)">
      <summary>Advances the <see cref="T:System.Xml.XmlReader" /> to the next descendant element with the specified local name and namespace URI.</summary>
      <returns>true if a matching descendant element is found; otherwise false. If a matching child element is not found, the <see cref="T:System.Xml.XmlReader" /> is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType" /> is XmlNodeType.EndElement) of the element.If the <see cref="T:System.Xml.XmlReader" /> is not positioned on an element when <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)" /> was called, this method returns false and the position of the <see cref="T:System.Xml.XmlReader" /> is not changed.</returns>
      <param name="localName">The local name of the element you wish to move to.</param>
      <param name="namespaceURI">The namespace URI of the element you wish to move to.</param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToFollowing(System.String)">
      <summary>Reads until an element with the specified qualified name is found.</summary>
      <returns>true if a matching element is found; otherwise false and the <see cref="T:System.Xml.XmlReader" /> is in an end of file state.</returns>
      <param name="name">The qualified name of the element.</param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToFollowing(System.String,System.String)">
      <summary>Reads until an element with the specified local name and namespace URI is found.</summary>
      <returns>true if a matching element is found; otherwise false and the <see cref="T:System.Xml.XmlReader" /> is in an end of file state.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToNextSibling(System.String)">
      <summary>Advances the XmlReader to the next sibling element with the specified qualified name.</summary>
      <returns>true if a matching sibling element is found; otherwise false. If a matching sibling element is not found, the XmlReader is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType" /> is XmlNodeType.EndElement) of the parent element.</returns>
      <param name="name">The qualified name of the sibling element you wish to move to.</param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToNextSibling(System.String,System.String)">
      <summary>Advances the XmlReader to the next sibling element with the specified local name and namespace URI.</summary>
      <returns>true if a matching sibling element is found; otherwise false. If a matching sibling element is not found, the XmlReader is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType" /> is XmlNodeType.EndElement) of the parent element.</returns>
      <param name="localName">The local name of the sibling element you wish to move to.</param>
      <param name="namespaceURI">The namespace URI of the sibling element you wish to move to</param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)">
      <summary>Reads large streams of text embedded in an XML document.</summary>
      <returns>The number of characters read into the buffer. The value zero is returned when there is no more text content.</returns>
      <param name="buffer">The array of characters that serves as the buffer to which the text contents are written. This value cannot be null.</param>
      <param name="index">The offset within the buffer where the <see cref="T:System.Xml.XmlReader" /> can start to copy the results.</param>
      <param name="count">The maximum number of characters to copy into the buffer. The actual number of characters copied is returned from this method.</param>
      <exception cref="T:System.InvalidOperationException">The current node does not have a value (<see cref="P:System.Xml.XmlReader.HasValue" /> is false).</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer, or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</exception>
      <exception cref="T:System.Xml.XmlException">The XML data is not well-formed.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ResolveEntity">
      <summary>When overridden in a derived class, resolves the entity reference for EntityReference nodes.</summary>
      <exception cref="T:System.InvalidOperationException">The reader is not positioned on an EntityReference node; this implementation of the reader cannot resolve entities (<see cref="P:System.Xml.XmlReader.CanResolveEntity" /> returns false). </exception>
    </member>
    <member name="P:System.Xml.XmlReader.SchemaInfo">
      <summary>Gets the schema information that has been assigned to the current node as a result of schema validation.</summary>
      <returns>An <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> object containing the schema information for the current node. Schema information can be set on elements, attributes, or on text nodes with a non-null <see cref="P:System.Xml.XmlReader.ValueType" /> (typed values). If the current node is not one of the above node types, or if the XmlReader instance does not report schema information, this property returns null.If this property is called from an <see cref="T:System.Xml.XmlTextReader" /> or an <see cref="T:System.Xml.XmlValidatingReader" /> object, this property always returns null. These XmlReader implementations do not expose schema information through the SchemaInfo property.NoteIf you have to get the post-schema-validation information set (PSVI) for an element, position the reader on the end tag of the element, rather than on the start tag. You get the PSVI through the SchemaInfo property of a reader. The validating reader that is created through <see cref="Overload:System.Xml.XmlReader.Create" /> with the <see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> property set to <see cref="F:System.Xml.ValidationType.Schema" /> has complete PSVI for an element only when the reader is positioned on the end tag of an element.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Settings">
      <summary>Gets the <see cref="T:System.Xml.XmlReaderSettings" /> object used to create this <see cref="T:System.Xml.XmlReader" /> instance.</summary>
      <returns>The <see cref="T:System.Xml.XmlReaderSettings" /> object used to create this reader instance. If this reader was not created using the <see cref="Overload:System.Xml.XmlReader.Create" /> method, this property returns null.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Skip">
      <summary>Skips the children of the current node.</summary>
    </member>
    <member name="M:System.Xml.XmlReader.System#IDisposable#Dispose">
      <summary>For a description of this member, see <see cref="M:System.IDisposable.Dispose" />.</summary>
    </member>
    <member name="P:System.Xml.XmlReader.Value">
      <summary>When overridden in a derived class, gets the text value of the current node.</summary>
      <returns>The value returned depends on the <see cref="P:System.Xml.XmlReader.NodeType" /> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.Node type Value AttributeThe value of the attribute. CDATAThe content of the CDATA section. CommentThe content of the comment. DocumentTypeThe internal subset. ProcessingInstructionThe entire content, excluding the target. SignificantWhitespaceThe white space between markup in a mixed content model. TextThe content of the text node. WhitespaceThe white space between markup. XmlDeclarationThe content of the declaration. </returns>
    </member>
    <member name="P:System.Xml.XmlReader.ValueType">
      <summary>Gets The Common Language Runtime (CLR) type for the current node.</summary>
      <returns>The CLR type that corresponds to the typed value of the node. The default is System.String.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.XmlLang">
      <summary>When overridden in a derived class, gets the current xml:lang scope.</summary>
      <returns>The current xml:lang scope.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.XmlSpace">
      <summary>When overridden in a derived class, gets the current xml:space scope.</summary>
      <returns>One of the <see cref="T:System.Xml.XmlSpace" /> values. If no xml:space scope exists, this property defaults to XmlSpace.None.</returns>
    </member>
    <member name="T:System.Xml.XmlReaderSettings">
      <summary>Specifies a set of features to support on the <see cref="T:System.Xml.XmlReader" /> object created by the <see cref="Overload:System.Xml.XmlReader.Create" /> method. </summary>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlReaderSettings" /> class.</summary>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.CheckCharacters">
      <summary>Gets or sets a value indicating whether to do character checking.</summary>
      <returns>true to do character checking; otherwise false. The default is true.NoteIf the <see cref="T:System.Xml.XmlReader" /> is processing text data, it always checks that the XML names and text content are valid, regardless of the property setting. Setting <see cref="P:System.Xml.XmlReaderSettings.CheckCharacters" /> to false turns off character checking for character entity references.</returns>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.Clone">
      <summary>Creates a copy of the <see cref="T:System.Xml.XmlReaderSettings" /> instance.</summary>
      <returns>The cloned <see cref="T:System.Xml.XmlReaderSettings" /> object.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.CloseInput">
      <summary>Gets or sets a value indicating whether the underlying stream or <see cref="T:System.IO.TextReader" /> should be closed when the reader is closed.</summary>
      <returns>true to close the underlying stream or <see cref="T:System.IO.TextReader" /> when the reader is closed; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ConformanceLevel">
      <summary>Gets or sets the level of conformance which the <see cref="T:System.Xml.XmlReader" /> will comply.</summary>
      <returns>One of the <see cref="T:System.Xml.ConformanceLevel" /> values. The default is ConformanceLevel.Document.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.DtdProcessing">
      <summary>Gets or sets the <see cref="T:System.Xml.DtdProcessing" /> enumeration.</summary>
      <returns>The <see cref="T:System.Xml.DtdProcessing" /> enumeration.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreComments">
      <summary>Gets or sets a value indicating whether to ignore comments.</summary>
      <returns>true to ignore comments; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions">
      <summary>Gets or sets a value indicating whether to ignore processing instructions.</summary>
      <returns>true to ignore processing instructions; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreWhitespace">
      <summary>Gets or sets a value indicating whether to ignore insignificant white space.</summary>
      <returns>true to ignore white space; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.LineNumberOffset">
      <summary>Gets or sets line number offset of the <see cref="T:System.Xml.XmlReader" /> object.</summary>
      <returns>The line number offset. The default is 0.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.LinePositionOffset">
      <summary>Gets or sets line position offset of the <see cref="T:System.Xml.XmlReader" /> object.</summary>
      <returns>The line number offset. The default is 0.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.MaxCharactersFromEntities">
      <summary>Gets or sets a value indicating the maximum allowable number of characters in a document that result from expanding entities.</summary>
      <returns>The maximum allowable number of characters from expanded entities. The default is 0.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.MaxCharactersInDocument">
      <summary>Gets or sets a value indicating the maximum allowable number of characters XML document. A zero (0) value means no limits on the size of the XML document. A non-zero value specifies the maximum size, in characters.</summary>
      <returns>The maximum allowable number of characters in an XML document. The default is 0.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.NameTable">
      <summary>Gets or sets the <see cref="T:System.Xml.XmlNameTable" /> used for atomized string comparisons.</summary>
      <returns>The <see cref="T:System.Xml.XmlNameTable" /> that stores all the atomized strings used by all <see cref="T:System.Xml.XmlReader" /> instances created using this <see cref="T:System.Xml.XmlReaderSettings" /> object.The default is null. The created <see cref="T:System.Xml.XmlReader" /> instance will use a new empty <see cref="T:System.Xml.NameTable" /> if this value is null.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ProhibitDtd">
      <summary>Gets or sets a value indicating whether to prohibit document type definition (DTD) processing. This property is obsolete. Use <see cref="P:System.Xml.XmlTextReader.DtdProcessing" /> instead.</summary>
      <returns>true to prohibit DTD processing; otherwise false. The default is true.</returns>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.Reset">
      <summary>Resets the members of the settings class to their default values.</summary>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.Schemas">
      <summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to use when performing schema validation.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to use. The default is an empty <see cref="T:System.Xml.Schema.XmlSchemaSet" /> object.</returns>
    </member>
    <member name="E:System.Xml.XmlReaderSettings.ValidationEventHandler">
      <summary>Occurs when the reader encounters validation errors.</summary>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ValidationFlags">
      <summary>Gets or sets a value indicating the schema validation settings. This setting applies to schema validating <see cref="T:System.Xml.XmlReader" /> objects (<see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> property set to ValidationType.Schema).</summary>
      <returns>A set of <see cref="T:System.Xml.Schema.XmlSchemaValidationFlags" /> values. <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints" /> and <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes" /> are enabled by default. <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema" />, <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation" />, and <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings" /> are disabled by default.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ValidationType">
      <summary>Gets or sets a value indicating whether the <see cref="T:System.Xml.XmlReader" /> will perform validation or type assignment when reading.</summary>
      <returns>One of the <see cref="T:System.Xml.ValidationType" /> values. The default is ValidationType.None.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.XmlResolver">
      <summary>Sets the <see cref="T:System.Xml.XmlResolver" /> used to access external documents.</summary>
      <returns>An <see cref="T:System.Xml.XmlResolver" /> used to access external documents. If set to null, an <see cref="T:System.Xml.XmlException" /> is thrown when the <see cref="T:System.Xml.XmlReader" /> tries to access an external resource. The default is a new <see cref="T:System.Xml.XmlUrlResolver" /> with no credentials.</returns>
    </member>
    <member name="T:System.Xml.XmlResolver">
      <summary>Resolves external XML resources named by a Uniform Resource Identifier (URI). </summary>
    </member>
    <member name="M:System.Xml.XmlResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlResolver" /> class.</summary>
    </member>
    <member name="P:System.Xml.XmlResolver.Credentials">
      <summary>When overridden in a derived class, sets the credentials used to authenticate Web requests.</summary>
      <returns>An <see cref="T:System.Net.ICredentials" /> object. If this property is not set, the value defaults to null; that is, the XmlResolver has no user credentials.</returns>
    </member>
    <member name="M:System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>When overridden in a derived class, maps a URI to an object containing the actual resource.</summary>
      <returns>A System.IO.Stream object or null if a type other than stream is specified.</returns>
      <param name="absoluteUri">The URI returned from <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />. </param>
      <param name="role">The current version does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can be mapped to the xlink:role and used as an implementation specific argument in other scenarios. </param>
      <param name="ofObjectToReturn">The type of object to return. The current version only returns System.IO.Stream objects. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ofObjectToReturn" /> is not a Stream type. </exception>
      <exception cref="T:System.UriFormatException">The specified URI is not an absolute URI. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="absoluteUri" /> is null. </exception>
      <exception cref="T:System.Exception">There is a runtime error (for example, an interrupted server connection). </exception>
    </member>
    <member name="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)">
      <summary>When overridden in a derived class, resolves the absolute URI from the base and relative URIs.</summary>
      <returns>A <see cref="T:System.Uri" /> representing the absolute URI or null if the relative URI cannot be resolved.</returns>
      <param name="baseUri">The base URI used to resolve the relative URI </param>
      <param name="relativeUri">The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the <paramref name="baseUri" /> value. If relative, it combines with the <paramref name="baseUri" /> to make an absolute URI. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="relativeUri" /> is null</exception>
    </member>
    <member name="M:System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)">
      <summary>This method adds the ability for the resolver to return other types than just <see cref="T:System.IO.Stream" />.</summary>
      <returns>Returns true if the <paramref name="type" /> is supported.</returns>
      <param name="absoluteUri">The URI.</param>
      <param name="type">The type to return.</param>
    </member>
    <member name="T:System.Xml.XmlSecureResolver">
      <summary>Helps to secure another implementation of <see cref="T:System.Xml.XmlResolver" /> by wrapping the <see cref="T:System.Xml.XmlResolver" /> object and restricting the resources that the underlying <see cref="T:System.Xml.XmlResolver" /> has access to.</summary>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.Security.PermissionSet)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlSecureResolver" /> class with the <see cref="T:System.Xml.XmlResolver" /> and <see cref="T:System.Security.PermissionSet" /> specified.</summary>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> wrapped by the <see cref="T:System.Xml.XmlSecureResolver" />. </param>
      <param name="permissionSet">The <see cref="T:System.Security.PermissionSet" /> to apply to the underlying <see cref="T:System.Xml.XmlResolver" />. The <see cref="T:System.Xml.XmlSecureResolver" /> calls <see cref="M:System.Security.PermissionSet.PermitOnly" /> on the <see cref="T:System.Security.PermissionSet" /> before calling <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" /> on the underlying <see cref="T:System.Xml.XmlResolver" />. </param>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.Security.Policy.Evidence)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlSecureResolver" /> class with the <see cref="T:System.Xml.XmlResolver" /> and <see cref="T:System.Security.Policy.Evidence" /> specified.</summary>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> wrapped by the <see cref="T:System.Xml.XmlSecureResolver" />. </param>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> used to create the <see cref="T:System.Security.PermissionSet" /> that will be applied to the underlying <see cref="T:System.Xml.XmlResolver" />. The <see cref="T:System.Xml.XmlSecureResolver" /> calls <see cref="M:System.Security.PermissionSet.PermitOnly" /> on the created <see cref="T:System.Security.PermissionSet" /> before calling <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" /> on the underlying <see cref="T:System.Xml.XmlResolver" />. </param>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlSecureResolver" /> class with the <see cref="T:System.Xml.XmlResolver" /> and URL provided.</summary>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> wrapped by the <see cref="T:System.Xml.XmlSecureResolver" />. </param>
      <param name="securityUrl">The URL used to create the <see cref="T:System.Security.PermissionSet" /> that will be applied to the underlying <see cref="T:System.Xml.XmlResolver" />. The <see cref="T:System.Xml.XmlSecureResolver" /> calls <see cref="M:System.Security.PermissionSet.PermitOnly" /> on the created <see cref="T:System.Security.PermissionSet" /> before calling <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" /> on the underlying <see cref="T:System.Xml.XmlResolver" />. </param>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)">
      <summary>Creates <see cref="T:System.Security.Policy.Evidence" /> using the supplied URL.</summary>
      <returns>The <see cref="T:System.Security.Policy.Evidence" /> object generated from the supplied URL as defined by the default policy.</returns>
      <param name="securityUrl">The URL used to create the <see cref="T:System.Security.Policy.Evidence" /> object. </param>
    </member>
    <member name="P:System.Xml.XmlSecureResolver.Credentials">
      <summary>Sets credentials used to authenticate Web requests.</summary>
      <returns>An <see cref="T:System.Net.ICredentials" /> object. The <see cref="T:System.Xml.XmlSecureResolver" /> sets the given credentials on the underlying <see cref="T:System.Xml.XmlResolver" />. If this property is not set, the value defaults to null; that is, the <see cref="T:System.Xml.XmlSecureResolver" /> has no user credentials.</returns>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>Securely maps a URI to an object containing the actual resource. This method temporarily sets the <see cref="T:System.Security.PermissionSet" /> created in the constructor by calling <see cref="M:System.Security.PermissionSet.PermitOnly" /> before calling GetEntity on the underlying <see cref="T:System.Xml.XmlResolver" /> to open the resource.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> object returned by calling GetEntity on the underlying <see cref="T:System.Xml.XmlResolver" />. If a type other than stream is specified, null is returned.</returns>
      <param name="absoluteUri">The URI returned from <see cref="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" />. </param>
      <param name="role">The current version does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can be mapped to the xlink:role and used as an implementation-specific argument in other scenarios. </param>
      <param name="ofObjectToReturn">The type of object to return. The current version only returns <see cref="T:System.IO.Stream" /> objects. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ofObjectToReturn" /> is neither null nor a <see cref="T:System.IO.Stream" /> type. </exception>
      <exception cref="T:System.UriFormatException">The specified URI is not an absolute URI. </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="absoluteUri" /> is null. </exception>
      <exception cref="T:System.Exception">There is a runtime error (for example, an interrupted server connection). </exception>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)">
      <summary>Resolves the absolute URI from the base and relative URIs by calling ResolveUri on the underlying <see cref="T:System.Xml.XmlResolver" />.</summary>
      <returns>A <see cref="T:System.Uri" /> representing the absolute URI or null if the relative URI cannot be resolved (returned by calling ResolveUri on the underlying <see cref="T:System.Xml.XmlResolver" />).</returns>
      <param name="baseUri">The base URI used to resolve the relative URI. </param>
      <param name="relativeUri">The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the <paramref name="baseUri" /> value. If relative, it combines with the <paramref name="baseUri" /> to make an absolute URI. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="relativeUri" /> is null. </exception>
    </member>
    <member name="T:System.Xml.XmlSignificantWhitespace">
      <summary>Represents white space between markup in a mixed content node or white space within an xml:space= 'preserve' scope. This is also referred to as significant white space.</summary>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlSignificantWhitespace" /> class.</summary>
      <param name="strData">The white space characters of the node.</param>
      <param name="doc">The <see cref="T:System.Xml.XmlDocument" /> object.</param>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The cloned node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. For significant white space nodes, the cloned node always includes the data value, regardless of the parameter setting. </param>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.LocalName">
      <summary>Gets the local name of the node.</summary>
      <returns>For XmlSignificantWhitespace nodes, this property returns #significant-whitespace.</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.Name">
      <summary>Gets the qualified name of the node.</summary>
      <returns>For XmlSignificantWhitespace nodes, this property returns #significant-whitespace.</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>For XmlSignificantWhitespace nodes, this value is XmlNodeType.SignificantWhitespace.</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.ParentNode">
      <summary>Gets the parent of the current node.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> parent node of the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.Value">
      <summary>Gets or sets the value of the node.</summary>
      <returns>The white space characters found in the node.</returns>
      <exception cref="T:System.ArgumentException">Setting Value to invalid white space characters. </exception>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlSpace">
      <summary>Specifies the current xml:space scope.</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.None">
      <summary>No xml:space scope.</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Default">
      <summary>The xml:space scope equals default.</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Preserve">
      <summary>The xml:space scope equals preserve.</summary>
    </member>
    <member name="T:System.Xml.XmlText">
      <summary>Represents the text content of an element or attribute.</summary>
    </member>
    <member name="M:System.Xml.XmlText.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlText" /> class.</summary>
      <param name="strData">The content of the node; see the <see cref="P:System.Xml.XmlText.Value" /> property.</param>
      <param name="doc">The parent XML document.</param>
    </member>
    <member name="M:System.Xml.XmlText.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The cloned node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. </param>
    </member>
    <member name="P:System.Xml.XmlText.LocalName">
      <summary>Gets the local name of the node.</summary>
      <returns>For text nodes, this property returns #text.</returns>
    </member>
    <member name="P:System.Xml.XmlText.Name">
      <summary>Gets the qualified name of the node.</summary>
      <returns>For text nodes, this property returns #text.</returns>
    </member>
    <member name="P:System.Xml.XmlText.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>For text nodes, this value is XmlNodeType.Text.</returns>
    </member>
    <member name="P:System.Xml.XmlText.ParentNode"></member>
    <member name="M:System.Xml.XmlText.SplitText(System.Int32)">
      <summary>Splits the node into two nodes at the specified offset, keeping both in the tree as siblings.</summary>
      <returns>The new node.</returns>
      <param name="offset">The offset at which to split the node. </param>
    </member>
    <member name="P:System.Xml.XmlText.Value">
      <summary>Gets or sets the value of the node.</summary>
      <returns>The content of the text node.</returns>
    </member>
    <member name="M:System.Xml.XmlText.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />. XmlText nodes do not have children, so this method has no effect.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlText.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlTextReader">
      <summary>Represents a reader that provides fast, non-cached, forward-only access to XML data.</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor">
      <summary>Initializes a new instance of the XmlTextReader.</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified stream.</summary>
      <param name="input">The stream containing the XML data to read. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified stream and <see cref="T:System.Xml.XmlNameTable" />.</summary>
      <param name="input">The stream containing the XML data to read. </param>
      <param name="nt">The XmlNameTable to use. </param>
      <exception cref="T:System.NullReferenceException">The <paramref name="input" /> or <paramref name="nt" /> value is null. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified stream, <see cref="T:System.Xml.XmlNodeType" />, and <see cref="T:System.Xml.XmlParserContext" />.</summary>
      <param name="xmlFragment">The stream containing the XML fragment to parse. </param>
      <param name="fragType">The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment. This also determines what the fragment can contain. (See table below.) </param>
      <param name="context">The <see cref="T:System.Xml.XmlParserContext" /> in which the <paramref name="xmlFragment" /> is to be parsed. This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current xml:lang, and the xml:space scope. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> is not an Element, Attribute, or Document XmlNodeType. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlFragment" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified <see cref="T:System.IO.TextReader" />.</summary>
      <param name="input">The TextReader containing the XML data to read. </param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified <see cref="T:System.IO.TextReader" /> and <see cref="T:System.Xml.XmlNameTable" />.</summary>
      <param name="input">The TextReader containing the XML data to read. </param>
      <param name="nt">The XmlNameTable to use. </param>
      <exception cref="T:System.NullReferenceException">The <paramref name="nt" /> value is null. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified file.</summary>
      <param name="url">The URL for the file containing the XML data. The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value. </param>
      <exception cref="T:System.IO.FileNotFoundException">The specified file cannot be found.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Part of the filename or directory cannot be found.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="url" /> is an empty string.</exception>
      <exception cref="T:System.Net.WebException">The remote filename cannot be resolved.-or-An error occurred while processing the request.</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="url" /> is not a valid URI.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL and stream.</summary>
      <param name="url">The URL to use for resolving external resources. The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value. </param>
      <param name="input">The stream containing the XML data to read. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL, stream and <see cref="T:System.Xml.XmlNameTable" />.</summary>
      <param name="url">The URL to use for resolving external resources. The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value. If <paramref name="url" /> is null, BaseURI is set to String.Empty. </param>
      <param name="input">The stream containing the XML data to read. </param>
      <param name="nt">The XmlNameTable to use. </param>
      <exception cref="T:System.NullReferenceException">The <paramref name="input" /> or <paramref name="nt" /> value is null. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL and <see cref="T:System.IO.TextReader" />.</summary>
      <param name="url">The URL to use for resolving external resources. The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value. </param>
      <param name="input">The TextReader containing the XML data to read. </param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL, <see cref="T:System.IO.TextReader" /> and <see cref="T:System.Xml.XmlNameTable" />.</summary>
      <param name="url">The URL to use for resolving external resources. The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value. If <paramref name="url" /> is null, BaseURI is set to String.Empty. </param>
      <param name="input">The TextReader containing the XML data to read. </param>
      <param name="nt">The XmlNameTable to use. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="nt" /> value is null. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified file and <see cref="T:System.Xml.XmlNameTable" />.</summary>
      <param name="url">The URL for the file containing the XML data to read. </param>
      <param name="nt">The XmlNameTable to use. </param>
      <exception cref="T:System.NullReferenceException">The <paramref name="nt" /> value is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The specified file cannot be found.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Part of the filename or directory cannot be found.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="url" /> is an empty string.</exception>
      <exception cref="T:System.Net.WebException">The remote filename cannot be resolved.-or-An error occurred while processing the request.</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="url" /> is not a valid URI.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified string, <see cref="T:System.Xml.XmlNodeType" />, and <see cref="T:System.Xml.XmlParserContext" />.</summary>
      <param name="xmlFragment">The string containing the XML fragment to parse. </param>
      <param name="fragType">The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment. This also determines what the fragment string can contain. (See table below.) </param>
      <param name="context">The <see cref="T:System.Xml.XmlParserContext" /> in which the <paramref name="xmlFragment" /> is to be parsed. This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current xml:lang, and the xml:space scope. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> is not an Element, Attribute, or DocumentXmlNodeType. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlFragment" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.Xml.XmlNameTable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified <see cref="T:System.Xml.XmlNameTable" />.</summary>
      <param name="nt">The XmlNameTable to use. </param>
    </member>
    <member name="P:System.Xml.XmlTextReader.AttributeCount">
      <summary>Gets the number of attributes on the current node.</summary>
      <returns>The number of attributes on the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.BaseURI">
      <summary>Gets the base URI of the current node.</summary>
      <returns>The base URI of the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanReadBinaryContent">
      <summary>Gets a value indicating whether the <see cref="T:System.Xml.XmlTextReader" /> implements the binary content read methods.</summary>
      <returns>true if the binary content read methods are implemented; otherwise false. The <see cref="T:System.Xml.XmlTextReader" /> class always returns true.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanReadValueChunk">
      <summary>Gets a value indicating whether the <see cref="T:System.Xml.XmlTextReader" /> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method.</summary>
      <returns>true if the <see cref="T:System.Xml.XmlTextReader" /> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method; otherwise false. The <see cref="T:System.Xml.XmlTextReader" /> class always returns false.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanResolveEntity">
      <summary>Gets a value indicating whether this reader can parse and resolve entities.</summary>
      <returns>true if the reader can parse and resolve entities; otherwise, false. The XmlTextReader class always returns true.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.Close">
      <summary>Changes the <see cref="P:System.Xml.XmlReader.ReadState" /> to Closed.</summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.Depth">
      <summary>Gets the depth of the current node in the XML document.</summary>
      <returns>The depth of the current node in the XML document.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.DtdProcessing">
      <summary>Gets or sets the <see cref="T:System.Xml.DtdProcessing" /> enumeration.</summary>
      <returns>The <see cref="T:System.Xml.DtdProcessing" /> enumeration.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Encoding">
      <summary>Gets the encoding of the document.</summary>
      <returns>The encoding value. If no encoding attribute exists, and there is no byte-order mark, this defaults to UTF-8.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.EntityHandling">
      <summary>Gets or sets a value that specifies how the reader handles entities.</summary>
      <returns>One of the <see cref="T:System.Xml.EntityHandling" /> values. If no EntityHandling is specified, it defaults to EntityHandling.ExpandCharEntities.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.EOF">
      <summary>Gets a value indicating whether the reader is positioned at the end of the stream.</summary>
      <returns>true if the reader is positioned at the end of the stream; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)">
      <summary>Gets the value of the attribute with the specified index.</summary>
      <returns>The value of the specified attribute.</returns>
      <param name="i">The index of the attribute. The index is zero-based. (The first attribute has index 0.) </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlTextReader.AttributeCount" />. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.String)">
      <summary>Gets the value of the attribute with the specified name.</summary>
      <returns>The value of the specified attribute. If the attribute is not found, null is returned.</returns>
      <param name="name">The qualified name of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)">
      <summary>Gets the value of the attribute with the specified local name and namespace URI.</summary>
      <returns>The value of the specified attribute. If the attribute is not found, null is returned. This method does not move the reader.</returns>
      <param name="localName">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>Gets a collection that contains all namespaces currently in-scope.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> object that contains all the current in-scope namespaces. If the reader is not positioned on an element, an empty dictionary (no namespaces) is returned.</returns>
      <param name="scope">An <see cref="T:System.Xml.XmlNamespaceScope" /> value that specifies the type of namespace nodes to return.</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetRemainder">
      <summary>Gets the remainder of the buffered XML.</summary>
      <returns>A <see cref="T:System.IO.TextReader" /> containing the remainder of the buffered XML.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.HasLineInfo">
      <summary>Gets a value indicating whether the class can return line information.</summary>
      <returns>true if the class can return line information; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.HasValue">
      <summary>Gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlTextReader.Value" /> other than String.Empty.</summary>
      <returns>true if the node on which the reader is currently positioned can have a Value; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.IsDefault">
      <summary>Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.</summary>
      <returns>This property always returns false. (<see cref="T:System.Xml.XmlTextReader" /> does not expand default attributes.) </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.IsEmptyElement">
      <summary>Gets a value indicating whether the current node is an empty element (for example, &lt;MyElement/&gt;).</summary>
      <returns>true if the current node is an element (<see cref="P:System.Xml.XmlTextReader.NodeType" /> equals XmlNodeType.Element) that ends with /&gt;; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LineNumber">
      <summary>Gets the current line number.</summary>
      <returns>The current line number.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LinePosition">
      <summary>Gets the current line position.</summary>
      <returns>The current line position.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LocalName">
      <summary>Gets the local name of the current node.</summary>
      <returns>The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.For node types that do not have a name (like Text, Comment, and so on), this property returns String.Empty.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.LookupNamespace(System.String)">
      <summary>Resolves a namespace prefix in the current element's scope.</summary>
      <returns>The namespace URI to which the prefix maps or null if no matching prefix is found.</returns>
      <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. This string does not have to be atomized. </param>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Xml.XmlTextReader.Namespaces" /> property is set to true and the <paramref name="prefix" /> value is null. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.Int32)">
      <summary>Moves to the attribute with the specified index.</summary>
      <param name="i">The index of the attribute. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlReader.AttributeCount" />. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.String)">
      <summary>Moves to the attribute with the specified name.</summary>
      <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
      <param name="name">The qualified name of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)">
      <summary>Moves to the attribute with the specified local name and namespace URI.</summary>
      <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
      <param name="localName">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToElement">
      <summary>Moves to the element that contains the current attribute node.</summary>
      <returns>true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned on an attribute (the position of the reader does not change).</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToFirstAttribute">
      <summary>Moves to the first attribute.</summary>
      <returns>true if an attribute exists (the reader moves to the first attribute); otherwise, false (the position of the reader does not change).</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToNextAttribute">
      <summary>Moves to the next attribute.</summary>
      <returns>true if there is a next attribute; false if there are no more attributes.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Name">
      <summary>Gets the qualified name of the current node.</summary>
      <returns>The qualified name of the current node. For example, Name is bk:book for the element &lt;bk:book&gt;.The name returned is dependent on the <see cref="P:System.Xml.XmlTextReader.NodeType" /> of the node. The following node types return the listed values. All other node types return an empty string.Node Type Name AttributeThe name of the attribute. DocumentTypeThe document type name. ElementThe tag name. EntityReferenceThe name of the entity referenced. ProcessingInstructionThe target of the processing instruction. XmlDeclarationThe literal string xml. </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Namespaces">
      <summary>Gets or sets a value indicating whether to do namespace support.</summary>
      <returns>true to do namespace support; otherwise, false. The default is true.</returns>
      <exception cref="T:System.InvalidOperationException">Setting this property after a read operation has occurred (<see cref="P:System.Xml.XmlTextReader.ReadState" /> is not ReadState.Initial). </exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.NamespaceURI">
      <summary>Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</summary>
      <returns>The namespace URI of the current node; otherwise an empty string.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.NameTable">
      <summary>Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this implementation.</summary>
      <returns>The XmlNameTable enabling you to get the atomized version of a string within the node.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>One of the <see cref="T:System.Xml.XmlNodeType" /> values representing the type of the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Normalization">
      <summary>Gets or sets a value indicating whether to normalize white space and attribute values.</summary>
      <returns>true to normalize; otherwise, false. The default is false.</returns>
      <exception cref="T:System.InvalidOperationException">Setting this property when the reader is closed (<see cref="P:System.Xml.XmlTextReader.ReadState" /> is ReadState.Closed). </exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.Prefix">
      <summary>Gets the namespace prefix associated with the current node.</summary>
      <returns>The namespace prefix associated with the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.ProhibitDtd">
      <summary>Gets or sets a value indicating whether to allow DTD processing. This property is obsolete. Use <see cref="P:System.Xml.XmlTextReader.DtdProcessing" /> instead.</summary>
      <returns>true to disallow DTD processing; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.QuoteChar">
      <summary>Gets the quotation mark character used to enclose the value of an attribute node.</summary>
      <returns>The quotation mark character (" or ') used to enclose the value of an attribute node.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.Read">
      <summary>Reads the next node from the stream.</summary>
      <returns>true if the next node was read successfully; false if there are no more nodes to read.</returns>
      <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadAttributeValue">
      <summary>Parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.</summary>
      <returns>true if there are nodes to return.false if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.An empty attribute, such as, misc="", returns true with a single node with a value of String.Empty.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Decodes Base64 and returns the decoded binary bytes.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="array">The array of characters that serves as the buffer to which the text contents are written. </param>
      <param name="offset">The zero-based index into the array specifying where the method can begin to write to the buffer. </param>
      <param name="len">The number of bytes to write into the buffer. </param>
      <exception cref="T:System.Xml.XmlException">The Base64 sequence is not valid. </exception>
      <exception cref="T:System.ArgumentNullException">The value of <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> &lt; 0, or <paramref name="len" /> &lt; 0, or <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>Decodes BinHex and returns the decoded binary bytes.</summary>
      <returns>The number of bytes written to your buffer.</returns>
      <param name="array">The byte array that serves as the buffer to which the decoded binary bytes are written. </param>
      <param name="offset">The zero-based index into the array specifying where the method can begin to write to the buffer. </param>
      <param name="len">The number of bytes to write into the buffer. </param>
      <exception cref="T:System.Xml.XmlException">The BinHex sequence is not valid. </exception>
      <exception cref="T:System.ArgumentNullException">The value of <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> &lt; 0, or <paramref name="len" /> &lt; 0, or <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
      <summary>Reads the text contents of an element into a character buffer. This method is designed to read large streams of embedded text by calling it successively.</summary>
      <returns>The number of characters read. This can be 0 if the reader is not positioned on an element or if there is no more text content to return in the current context.</returns>
      <param name="buffer">The array of characters that serves as the buffer to which the text contents are written. </param>
      <param name="index">The position within <paramref name="buffer" /> where the method can begin writing text contents. </param>
      <param name="count">The number of characters to write into <paramref name="buffer" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> is greater than the space specified in the <paramref name="buffer" /> (buffer size - <paramref name="index" />). </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />&lt; 0 or <paramref name="count" />&lt; 0. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the content and returns the Base64 decoded binary bytes.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />  is not supported in the current node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the content and returns the BinHex decoded binary bytes.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />  is not supported on the current node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlTextReader" /> implementation does not support this method.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the element and decodes the Base64 content.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlTextReader" /> implementation does not support this method.</exception>
      <exception cref="T:System.Xml.XmlException">The element contains mixed-content.</exception>
      <exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the element and decodes the BinHex content.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</exception>
      <exception cref="T:System.Xml.XmlException">The element contains mixed-content.</exception>
      <exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.ReadState">
      <summary>Gets the state of the reader.</summary>
      <returns>One of the <see cref="T:System.Xml.ReadState" /> values.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadString">
      <summary>Reads the contents of an element or a text node as a string.</summary>
      <returns>The contents of the element or text node. This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.Note: The text node can be either an element or an attribute text node.</returns>
      <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML. </exception>
      <exception cref="T:System.InvalidOperationException">An invalid operation was attempted. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ResetState">
      <summary>Resets the state of the reader to ReadState.Initial.</summary>
      <exception cref="T:System.InvalidOperationException">Calling ResetState if the reader was constructed using an <see cref="T:System.Xml.XmlParserContext" />. </exception>
      <exception cref="T:System.Xml.XmlException">Documents in a single stream do not share the same encoding.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ResolveEntity">
      <summary>Resolves the entity reference for EntityReference nodes.</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.Skip">
      <summary>Skips the children of the current node.</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> that contains the current in-scope namespaces.</returns>
      <param name="scope">An <see cref="T:System.Xml.XmlNamespaceScope" /> value that specifies the type of namespace nodes to return.</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary>For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />.</summary>
      <returns>The namespace URI that is mapped to the prefix; null if the prefix is not mapped to a namespace URI.</returns>
      <param name="prefix">The prefix whose namespace URI you wish to find.</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary>For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />.</summary>
      <returns>The prefix that is mapped to the namespace URI; null if the namespace URI is not mapped to a prefix.</returns>
      <param name="namespaceName">The namespace URI whose prefix you wish to find.</param>
    </member>
    <member name="P:System.Xml.XmlTextReader.Value">
      <summary>Gets the text value of the current node.</summary>
      <returns>The value returned depends on the <see cref="P:System.Xml.XmlTextReader.NodeType" /> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.Node Type Value AttributeThe value of the attribute. CDATAThe content of the CDATA section. CommentThe content of the comment. DocumentTypeThe internal subset. ProcessingInstructionThe entire content, excluding the target. SignificantWhitespaceThe white space within an xml:space= 'preserve' scope. TextThe content of the text node. WhitespaceThe white space between markup. XmlDeclarationThe content of the declaration. </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.WhitespaceHandling">
      <summary>Gets or sets a value that specifies how white space is handled.</summary>
      <returns>One of the <see cref="T:System.Xml.WhitespaceHandling" /> values. The default is WhitespaceHandling.All (returns Whitespace and SignificantWhitespace nodes).</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Invalid value specified. </exception>
      <exception cref="T:System.InvalidOperationException">Setting this property when the reader is closed (<see cref="P:System.Xml.XmlTextReader.ReadState" /> is ReadState.Closed). </exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlLang">
      <summary>Gets the current xml:lang scope.</summary>
      <returns>The current xml:lang scope.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlResolver">
      <summary>Sets the <see cref="T:System.Xml.XmlResolver" /> used for resolving DTD references.</summary>
      <returns>The XmlResolver to use. If set to null, external resources are not resolved.In version 1.1 of the .NET Framework, the caller must be fully trusted in order to specify an XmlResolver.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlSpace">
      <summary>Gets the current xml:space scope.</summary>
      <returns>One of the <see cref="T:System.Xml.XmlSpace" /> values. If no xml:space scope exists, this property defaults to XmlSpace.None.</returns>
    </member>
    <member name="T:System.Xml.XmlTextWriter">
      <summary>Represents a writer that provides a fast, non-cached, forward-only way of generating streams or files containing XML data that conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations. </summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>Creates an instance of the XmlTextWriter class using the specified stream and encoding.</summary>
      <param name="w">The stream to which you want to write. </param>
      <param name="encoding">The encoding to generate. If encoding is null it writes out the stream as UTF-8 and omits the encoding attribute from the ProcessingInstruction. </param>
      <exception cref="T:System.ArgumentException">The encoding is not supported or the stream cannot be written to. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="w" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
      <summary>Creates an instance of the XmlTextWriter class using the specified <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="w">The TextWriter to write to. It is assumed that the TextWriter is already set to the correct encoding. </param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
      <summary>Creates an instance of the <see cref="T:System.Xml.XmlTextWriter" /> class using the specified file.</summary>
      <param name="filename">The filename to write to. If the file exists, it truncates it and overwrites it with the new content. </param>
      <param name="encoding">The encoding to generate. If encoding is null it writes the file out as UTF-8, and omits the encoding attribute from the ProcessingInstruction. </param>
      <exception cref="T:System.ArgumentException">The encoding is not supported; the filename is empty, contains only white space, or contains one or more invalid characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">Access is denied. </exception>
      <exception cref="T:System.ArgumentNullException">The filename is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory to write to is not found. </exception>
      <exception cref="T:System.IO.IOException">The filename includes an incorrect or invalid syntax for file name, directory name, or volume label syntax. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.BaseStream">
      <summary>Gets the underlying stream object.</summary>
      <returns>The stream to which the XmlTextWriter is writing or null if the XmlTextWriter was constructed using a <see cref="T:System.IO.TextWriter" /> that does not inherit from the <see cref="T:System.IO.StreamWriter" /> class.</returns>
    </member>
    <member name="M:System.Xml.XmlTextWriter.Close">
      <summary>Closes this stream and the underlying stream.</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.Flush">
      <summary>Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.</summary>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Formatting">
      <summary>Indicates how the output is formatted.</summary>
      <returns>One of the <see cref="T:System.Xml.Formatting" /> values. The default is Formatting.None (no special formatting).</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Indentation">
      <summary>Gets or sets how many IndentChars to write for each level in the hierarchy when <see cref="P:System.Xml.XmlTextWriter.Formatting" /> is set to Formatting.Indented.</summary>
      <returns>Number of IndentChars for each level. The default is 2.</returns>
      <exception cref="T:System.ArgumentException">Setting this property to a negative value. </exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.IndentChar">
      <summary>Gets or sets which character to use for indenting when <see cref="P:System.Xml.XmlTextWriter.Formatting" /> is set to Formatting.Indented.</summary>
      <returns>The character to use for indenting. The default is space.NoteThe XmlTextWriter allows you to set this property to any character. To ensure valid XML, you must specify a valid white space character, 0x9, 0x10, 0x13 or 0x20.</returns>
    </member>
    <member name="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
      <summary>Returns the closest prefix defined in the current namespace scope for the namespace URI.</summary>
      <returns>The matching prefix. Or null if no matching namespace URI is found in the current scope.</returns>
      <param name="ns">Namespace URI whose prefix you want to find. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="ns" /> is either null or String.Empty. </exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Namespaces">
      <summary>Gets or sets a value indicating whether to do namespace support.</summary>
      <returns>true to support namespaces; otherwise, false.The default is true.</returns>
      <exception cref="T:System.InvalidOperationException">You can only change this property when in the WriteState.Start state. </exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.QuoteChar">
      <summary>Gets or sets which character to use to quote attribute values.</summary>
      <returns>The character to use to quote attribute values. This must be a single quote (&amp;#39;) or a double quote (&amp;#34;). The default is a double quote.</returns>
      <exception cref="T:System.ArgumentException">Setting this property to something other than either a single or double quote. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Encodes the specified binary bytes as base64 and writes out the resulting text.</summary>
      <param name="buffer">Byte array to encode. </param>
      <param name="index">The position within the buffer indicating the start of the bytes to write. </param>
      <param name="count">The number of bytes to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is Closed. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>Encodes the specified binary bytes as binhex and writes out the resulting text.</summary>
      <param name="buffer">Byte array to encode. </param>
      <param name="index">The position in the buffer indicating the start of the bytes to write. </param>
      <param name="count">The number of bytes to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is Closed. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
      <summary>Writes out a &lt;![CDATA[...]]&gt; block containing the specified text.</summary>
      <param name="text">Text to place inside the CDATA block. </param>
      <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is Closed. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
      <summary>Forces the generation of a character entity for the specified Unicode character value.</summary>
      <param name="ch">Unicode character for which to generate a character entity. </param>
      <exception cref="T:System.ArgumentException">The character is in the surrogate pair character range, 0xd800 - 0xdfff; or the text would result in a non-well formed XML document. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is Closed. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>Writes text one buffer at a time.</summary>
      <param name="buffer">Character array containing the text to write. </param>
      <param name="index">The position in the buffer indicating the start of the text to write. </param>
      <param name="count">The number of characters to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero. -or-The buffer length minus <paramref name="index" /> is less than <paramref name="count" />; the call results in surrogate pair characters being split or an invalid surrogate pair being written.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is Closed. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
      <summary>Writes out a comment &lt;!--...--&gt; containing the specified text.</summary>
      <param name="text">Text to place inside the comment. </param>
      <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is Closed. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>Writes the DOCTYPE declaration with the specified name and optional attributes.</summary>
      <param name="name">The name of the DOCTYPE. This must be non-empty. </param>
      <param name="pubid">If non-null it also writes PUBLIC "pubid" "sysid" where <paramref name="pubid" /> and <paramref name="sysid" /> are replaced with the value of the given arguments. </param>
      <param name="sysid">If <paramref name="pubid" /> is null and <paramref name="sysid" /> is non-null it writes SYSTEM "sysid" where <paramref name="sysid" /> is replaced with the value of this argument. </param>
      <param name="subset">If non-null it writes [subset] where subset is replaced with the value of this argument. </param>
      <exception cref="T:System.InvalidOperationException">This method was called outside the prolog (after the root element). </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or String.Empty-or- the value for <paramref name="name" /> would result in invalid XML. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndAttribute">
      <summary>Closes the previous <see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" /> call.</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndDocument">
      <summary>Closes any open elements or attributes and puts the writer back in the Start state.</summary>
      <exception cref="T:System.ArgumentException">The XML document is invalid. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndElement">
      <summary>Closes one element and pops the corresponding namespace scope.</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
      <summary>Writes out an entity reference as &amp;name;.</summary>
      <param name="name">Name of the entity reference. </param>
      <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document or <paramref name="name" /> is either null or String.Empty. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteFullEndElement">
      <summary>Closes one element and pops the corresponding namespace scope.</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteName(System.String)">
      <summary>Writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</summary>
      <param name="name">Name to write. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is not a valid XML name; or <paramref name="name" /> is either null or String.Empty. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
      <summary>Writes out the specified name, ensuring it is a valid NmToken according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</summary>
      <param name="name">Name to write. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is not a valid NmToken; or <paramref name="name" /> is either null or String.Empty. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>Writes out a processing instruction with a space between the name and text as follows: &lt;?name text?&gt;.</summary>
      <param name="name">Name of the processing instruction. </param>
      <param name="text">Text to include in the processing instruction. </param>
      <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document.<paramref name="name" /> is either null or String.Empty.This method is being used to create an XML declaration after <see cref="M:System.Xml.XmlTextWriter.WriteStartDocument" /> has already been called. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
      <summary>Writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.</summary>
      <param name="localName">The local name to write. </param>
      <param name="ns">The namespace URI to associate with the name. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> is either null or String.Empty.<paramref name="localName" /> is not a valid name according to the W3C Namespaces spec. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>Writes raw markup manually from a character buffer.</summary>
      <param name="buffer">Character array containing the text to write. </param>
      <param name="index">The position within the buffer indicating the start of the text to write. </param>
      <param name="count">The number of characters to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or-The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
      <summary>Writes raw markup manually from a string.</summary>
      <param name="data">String containing the text to write. </param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>Writes the start of an attribute.</summary>
      <param name="prefix">Namespace prefix of the attribute. </param>
      <param name="localName">LocalName of the attribute. </param>
      <param name="ns">NamespaceURI of the attribute </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> is either null or String.Empty. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartDocument">
      <summary>Writes the XML declaration with the version "1.0".</summary>
      <exception cref="T:System.InvalidOperationException">This is not the first write method called after the constructor. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
      <summary>Writes the XML declaration with the version "1.0" and the standalone attribute.</summary>
      <param name="standalone">If true, it writes "standalone=yes"; if false, it writes "standalone=no". </param>
      <exception cref="T:System.InvalidOperationException">This is not the first write method called after the constructor. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>Writes the specified start tag and associates it with the given namespace and prefix.</summary>
      <param name="prefix">The namespace prefix of the element. </param>
      <param name="localName">The local name of the element. </param>
      <param name="ns">The namespace URI to associate with the element. If this namespace is already in scope and has an associated prefix then the writer automatically writes that prefix also. </param>
      <exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.WriteState">
      <summary>Gets the state of the writer.</summary>
      <returns>One of the <see cref="T:System.Xml.WriteState" /> values.</returns>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteString(System.String)">
      <summary>Writes the given text content.</summary>
      <param name="text">Text to write. </param>
      <exception cref="T:System.ArgumentException">The text string contains an invalid surrogate pair. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>Generates and writes the surrogate character entity for the surrogate character pair.</summary>
      <param name="lowChar">The low surrogate. This must be a value between 0xDC00 and 0xDFFF. </param>
      <param name="highChar">The high surrogate. This must be a value between 0xD800 and 0xDBFF. </param>
      <exception cref="T:System.Exception">An invalid surrogate character pair was passed. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
      <summary>Writes out the given white space.</summary>
      <param name="ws">The string of white space characters. </param>
      <exception cref="T:System.ArgumentException">The string contains non-white space characters. </exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.XmlLang">
      <summary>Gets the current xml:lang scope.</summary>
      <returns>The current xml:lang or null if there is no xml:lang in the current scope.</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.XmlSpace">
      <summary>Gets an <see cref="T:System.Xml.XmlSpace" /> representing the current xml:space scope.</summary>
      <returns>An XmlSpace representing the current xml:space scope.Value Meaning None This is the default if no xml:space scope exists. Default The current scope is xml:space="default". Preserve The current scope is xml:space="preserve". </returns>
    </member>
    <member name="T:System.Xml.XmlTokenizedType">
      <summary>Represents the XML type for the string. This allows the string to be read as a particular XML type, for example a CDATA section type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.CDATA">
      <summary>CDATA type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ID">
      <summary>ID type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREF">
      <summary>IDREF type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREFS">
      <summary>IDREFS type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITY">
      <summary>ENTITY type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITIES">
      <summary>ENTITIES type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKEN">
      <summary>NMTOKEN type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKENS">
      <summary>NMTOKENS type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NOTATION">
      <summary>NOTATION type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENUMERATION">
      <summary>ENUMERATION type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.QName">
      <summary>QName type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NCName">
      <summary>NCName type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.None">
      <summary>No type.</summary>
    </member>
    <member name="T:System.Xml.XmlUrlResolver">
      <summary>Resolves external XML resources named by a Uniform Resource Identifier (URI).</summary>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.#ctor">
      <summary>Creates a new instance of the XmlUrlResolver class.</summary>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.CachePolicy">
      <summary>Gets or sets the cache policy for the underlying <see cref="T:System.Net.WebRequest" /> object.</summary>
      <returns>The <see cref="T:System.Net.Cache.RequestCachePolicy" /> object.</returns>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.Credentials">
      <summary>Sets credentials used to authenticate Web requests.</summary>
      <returns>An <see cref="T:System.Net.ICredentials" /> object. If this property is not set, the value defaults to null; that is, the XmlUrlResolver has no user credentials.</returns>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>Maps a URI to an object containing the actual resource.</summary>
      <returns>A System.IO.Stream object or null if a type other than stream is specified.</returns>
      <param name="absoluteUri">The URI returned from <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /></param>
      <param name="role">The current implementation does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can be mapped to the xlink:role and used as an implementation specific argument in other scenarios. </param>
      <param name="ofObjectToReturn">The type of object to return. The current implementation only returns System.IO.Stream objects. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ofObjectToReturn" /> is neither null nor a Stream type. </exception>
      <exception cref="T:System.UriFormatException">The specified URI is not an absolute URI. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="absoluteUri" /> is null. </exception>
      <exception cref="T:System.Exception">There is a runtime error (for example, an interrupted server connection). </exception>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.Proxy">
      <summary>Gets or sets the network proxy for the underlying <see cref="T:System.Net.WebRequest" /> object.</summary>
      <returns>The <see cref="T:System.Net.IwebProxy" /> to use to access the Internet resource.</returns>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)">
      <summary>Resolves the absolute URI from the base and relative URIs.</summary>
      <returns>A <see cref="T:System.Uri" /> representing the absolute URI, or null if the relative URI cannot be resolved.</returns>
      <param name="baseUri">The base URI used to resolve the relative URI.</param>
      <param name="relativeUri">The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the <paramref name="baseUri" /> value. If relative, it combines with the <paramref name="baseUri" /> to make an absolute URI.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri " />is null or <paramref name="relativeUri" /> is null</exception>
    </member>
    <member name="T:System.Xml.XmlValidatingReader">
      <summary>Represents a reader that provides document type definition (DTD), XML-Data Reduced (XDR) schema, and XML Schema definition language (XSD) validation.</summary>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>Initializes a new instance of the XmlValidatingReader class with the specified values.</summary>
      <param name="xmlFragment">The stream containing the XML fragment to parse. </param>
      <param name="fragType">The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment. This determines what the fragment can contain (see table below). </param>
      <param name="context">The <see cref="T:System.Xml.XmlParserContext" /> in which the XML fragment is to be parsed. This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, current xml:lang, and xml:space scope. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> is not one of the node types listed in the table below. </exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>Initializes a new instance of the XmlValidatingReader class with the specified values.</summary>
      <param name="xmlFragment">The string containing the XML fragment to parse. </param>
      <param name="fragType">The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment. This also determines what the fragment string can contain (see table below). </param>
      <param name="context">The <see cref="T:System.Xml.XmlParserContext" /> in which the XML fragment is to be parsed. This includes the <see cref="T:System.Xml.NameTable" /> to use, encoding, namespace scope, current xml:lang, and xml:space scope. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> is not one of the node types listed in the table below. </exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.Xml.XmlReader)">
      <summary>Initializes a new instance of the XmlValidatingReader class that validates the content returned from the given <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="reader">The XmlReader to read from while validating. The current implementation supports only <see cref="T:System.Xml.XmlTextReader" />. </param>
      <exception cref="T:System.ArgumentException">The reader specified is not an XmlTextReader. </exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.AttributeCount">
      <summary>Gets the number of attributes on the current node.</summary>
      <returns>The number of attributes on the current node. This number includes default attributes.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.BaseURI">
      <summary>Gets the base URI of the current node.</summary>
      <returns>The base URI of the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.CanReadBinaryContent">
      <summary>Gets a value indicating whether the <see cref="T:System.Xml.XmlValidatingReader" /> implements the binary content read methods.</summary>
      <returns>true if the binary content read methods are implemented; otherwise false. The <see cref="T:System.Xml.XmlValidatingReader" /> class returns true.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.CanResolveEntity">
      <summary>Gets a value indicating whether this reader can parse and resolve entities.</summary>
      <returns>true if the reader can parse and resolve entities; otherwise, false. XmlValidatingReader always returns true.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.Close">
      <summary>Changes the <see cref="P:System.Xml.XmlReader.ReadState" /> to Closed.</summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Depth">
      <summary>Gets the depth of the current node in the XML document.</summary>
      <returns>The depth of the current node in the XML document.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Encoding">
      <summary>Gets the encoding attribute for the document.</summary>
      <returns>The encoding value. If no encoding attribute exists, and there is not byte-order mark, this defaults to UTF-8.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.EntityHandling">
      <summary>Gets or sets a value that specifies how the reader handles entities.</summary>
      <returns>One of the <see cref="T:System.Xml.EntityHandling" /> values. If no EntityHandling is specified, it defaults to EntityHandling.ExpandEntities.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Invalid value was specified. </exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.EOF">
      <summary>Gets a value indicating whether the reader is positioned at the end of the stream.</summary>
      <returns>true if the reader is positioned at the end of the stream; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.Int32)">
      <summary>Gets the value of the attribute with the specified index.</summary>
      <returns>The value of the specified attribute.</returns>
      <param name="i">The index of the attribute. The index is zero-based. (The first attribute has index 0.) </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlValidatingReader.AttributeCount" />. </exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.String)">
      <summary>Gets the value of the attribute with the specified name.</summary>
      <returns>The value of the specified attribute. If the attribute is not found, null is returned.</returns>
      <param name="name">The qualified name of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.String,System.String)">
      <summary>Gets the value of the attribute with the specified local name and namespace Uniform Resource Identifier (URI).</summary>
      <returns>The value of the specified attribute. If the attribute is not found, null is returned. This method does not move the reader.</returns>
      <param name="localName">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.HasLineInfo">
      <summary>Gets a value indicating whether the class can return line information.</summary>
      <returns>true if the class can return line information; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.HasValue">
      <summary>Gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlValidatingReader.Value" /> other than String.Empty.</summary>
      <returns>true if the node on which the reader is currently positioned can have a Value; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.IsDefault">
      <summary>Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the document type definition (DTD) or schema.</summary>
      <returns>true if the current node is an attribute whose value was generated from the default value defined in the DTD or schema; false if the attribute value was explicitly set.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.IsEmptyElement">
      <summary>Gets a value indicating whether the current node is an empty element (for example, &lt;MyElement/&gt;).</summary>
      <returns>true if the current node is an element (<see cref="P:System.Xml.XmlValidatingReader.NodeType" /> equals XmlNodeType.Element) that ends with /&gt;; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LineNumber">
      <summary>Gets the current line number.</summary>
      <returns>The current line number. The starting value for this property is 1.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LinePosition">
      <summary>Gets the current line position.</summary>
      <returns>The current line position. The starting value for this property is 1.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LocalName">
      <summary>Gets the local name of the current node.</summary>
      <returns>The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.For node types that do not have a name (like Text, Comment, and so on), this property returns String.Empty.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.LookupNamespace(System.String)">
      <summary>Resolves a namespace prefix in the current element's scope.</summary>
      <returns>The namespace URI to which the prefix maps or null if no matching prefix is found.</returns>
      <param name="prefix">The prefix whose namespace Uniform Resource Identifier (URI) you want to resolve. To match the default namespace, pass an empty string. </param>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.Int32)">
      <summary>Moves to the attribute with the specified index.</summary>
      <param name="i">The index of the attribute. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlReader.AttributeCount" />. </exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String)">
      <summary>Moves to the attribute with the specified name.</summary>
      <returns>true if the attribute is found; otherwise, false. If false, the position of the reader does not change.</returns>
      <param name="name">The qualified name of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String,System.String)">
      <summary>Moves to the attribute with the specified local name and namespace Uniform Resource Identifier (URI).</summary>
      <returns>true if the attribute is found; otherwise, false. If false, the position of the reader does not change.</returns>
      <param name="localName">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToElement">
      <summary>Moves to the element that contains the current attribute node.</summary>
      <returns>true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned on an attribute (the position of the reader does not change).</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToFirstAttribute">
      <summary>Moves to the first attribute.</summary>
      <returns>true if an attribute exists (the reader moves to the first attribute); otherwise, false (the position of the reader does not change).</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToNextAttribute">
      <summary>Moves to the next attribute.</summary>
      <returns>true if there is a next attribute; false if there are no more attributes.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Name">
      <summary>Gets the qualified name of the current node.</summary>
      <returns>The qualified name of the current node. For example, Name is bk:book for the element &lt;bk:book&gt;.The name returned is dependent on the <see cref="P:System.Xml.XmlValidatingReader.NodeType" /> of the node. The following node types return the listed values. All other node types return an empty string.Node Type Name AttributeThe name of the attribute. DocumentTypeThe document type name. ElementThe tag name. EntityReferenceThe name of the entity referenced. ProcessingInstructionThe target of the processing instruction. XmlDeclarationThe literal string xml. </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Namespaces">
      <summary>Gets or sets a value indicating whether to do namespace support.</summary>
      <returns>true to do namespace support; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NamespaceURI">
      <summary>Gets the namespace Uniform Resource Identifier (URI) (as defined in the World Wide Web Consortium (W3C) Namespace specification) of the node on which the reader is positioned.</summary>
      <returns>The namespace URI of the current node; otherwise an empty string.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NameTable">
      <summary>Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this implementation.</summary>
      <returns>XmlNameTable that enables you to get the atomized version of a string within the node.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>One of the <see cref="T:System.Xml.XmlNodeType" /> values representing the type of the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Prefix">
      <summary>Gets the namespace prefix associated with the current node.</summary>
      <returns>The namespace prefix associated with the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.QuoteChar">
      <summary>Gets the quotation mark character used to enclose the value of an attribute node.</summary>
      <returns>The quotation mark character (" or ') used to enclose the value of an attribute node.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.Read">
      <summary>Reads the next node from the stream.</summary>
      <returns>true if the next node was read successfully; false if there are no more nodes to read.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadAttributeValue">
      <summary>Parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.</summary>
      <returns>true if there are nodes to return.false if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.An empty attribute, such as, misc="", returns true with a single node with a value of String.Empty.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the content and returns the Base64 decoded binary bytes.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />  is not supported on the current node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the content and returns the BinHex decoded binary bytes.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />  is not supported on the current node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlValidatingReader" /> implementation does not support this method.</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the element and decodes the Base64 content.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlValidatingReader" /> implementation does not support this method.</exception>
      <exception cref="T:System.Xml.XmlException">The element contains mixed-content.</exception>
      <exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the element and decodes the BinHex content.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlValidatingReader" /> implementation does not support this method.</exception>
      <exception cref="T:System.Xml.XmlException">The element contains mixed-content.</exception>
      <exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Reader">
      <summary>Gets the <see cref="T:System.Xml.XmlReader" /> used to construct this XmlValidatingReader.</summary>
      <returns>The XmlReader specified in the constructor.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.ReadState">
      <summary>Gets the state of the reader.</summary>
      <returns>One of the <see cref="T:System.Xml.ReadState" /> values.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadString">
      <summary>Reads the contents of an element or text node as a string.</summary>
      <returns>The contents of the element or text node. This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.NoteThe text node can be either an element or an attribute text node.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadTypedValue">
      <summary>Gets the common language runtime type for the specified XML Schema definition language (XSD) type.</summary>
      <returns>The common language runtime type for the specified XML Schema type.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ResolveEntity">
      <summary>Resolves the entity reference for EntityReference nodes.</summary>
      <exception cref="T:System.InvalidOperationException">The reader is not positioned on an EntityReference node. </exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Schemas">
      <summary>Gets a <see cref="T:System.Xml.Schema.XmlSchemaCollection" /> to use for validation.</summary>
      <returns>The XmlSchemaCollection to use for validation.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.SchemaType">
      <summary>Gets a schema type object.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />, <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />, or <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> depending whether the node value is a built in XML Schema definition language (XSD) type or a user defined simpleType or complexType; null if the current node has no schema type.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />.</summary>
      <returns>An T:System.Collections.IDictionary object that identifies the namespaces in scope.</returns>
      <param name="scope">An <see cref="T:System.Xml.XmlNamespaceScope" /> object that identifies the scope of the reader.</param>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary>For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />.</summary>
      <returns>A string value that contains the namespace Uri that is associated with the prefix.</returns>
      <param name="prefix">The namespace prefix.</param>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary>For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />.</summary>
      <returns>A string value that contains the namespace prefix that is associated with the <paramref name="namespaceName" />.</returns>
      <param name="namespaceName">The namespace that is associated with the prefix.</param>
    </member>
    <member name="E:System.Xml.XmlValidatingReader.ValidationEventHandler">
      <summary>Sets an event handler for receiving information about document type definition (DTD), XML-Data Reduced (XDR) schema, and XML Schema definition language (XSD) schema validation errors.</summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.ValidationType">
      <summary>Gets or sets a value indicating the type of validation to perform.</summary>
      <returns>One of the <see cref="T:System.Xml.ValidationType" /> values. If this property is not set, it defaults to ValidationType.Auto.</returns>
      <exception cref="T:System.InvalidOperationException">Setting the property after a Read has been called. </exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Value">
      <summary>Gets the text value of the current node.</summary>
      <returns>The value returned depends on the <see cref="P:System.Xml.XmlValidatingReader.NodeType" /> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.Node Type Value AttributeThe value of the attribute. CDATAThe content of the CDATA section. CommentThe content of the comment. DocumentTypeThe internal subset. ProcessingInstructionThe entire content, excluding the target. SignificantWhitespaceThe white space between markup in a mixed content model. TextThe content of the text node. WhitespaceThe white space between markup. XmlDeclarationThe content of the declaration. </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlLang">
      <summary>Gets the current xml:lang scope.</summary>
      <returns>The current xml:lang scope.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlResolver">
      <summary>Sets the <see cref="T:System.Xml.XmlResolver" /> used for resolving external document type definition (DTD) and schema location references. The XmlResolver is also used to handle any import or include elements found in XML Schema definition language (XSD) schemas.</summary>
      <returns>The XmlResolver to use. If set to null, external resources are not resolved.In version 1.1 of the .NET Framework, the caller must be fully trusted to specify an XmlResolver.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlSpace">
      <summary>Gets the current xml:space scope.</summary>
      <returns>One of the <see cref="T:System.Xml.XmlSpace" /> values. If no xml:space scope exists, this property defaults to XmlSpace.None.</returns>
    </member>
    <member name="T:System.Xml.XmlWhitespace">
      <summary>Represents white space in element content.</summary>
    </member>
    <member name="M:System.Xml.XmlWhitespace.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlWhitespace" /> class.</summary>
      <param name="strData">The white space characters of the node.</param>
      <param name="doc">The <see cref="T:System.Xml.XmlDocument" /> object.</param>
    </member>
    <member name="M:System.Xml.XmlWhitespace.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The cloned node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. For white space nodes, the cloned node always includes the data value, regardless of the parameter setting. </param>
    </member>
    <member name="P:System.Xml.XmlWhitespace.LocalName">
      <summary>Gets the local name of the node.</summary>
      <returns>For XmlWhitespace nodes, this property returns #whitespace.</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.Name">
      <summary>Gets the qualified name of the node.</summary>
      <returns>For XmlWhitespace nodes, this property returns #whitespace.</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.NodeType">
      <summary>Gets the type of the node.</summary>
      <returns>For XmlWhitespace nodes, the value is <see cref="F:System.Xml.XmlNodeType.Whitespace" />.</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.ParentNode">
      <summary>Gets the parent of the current node.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> parent node of the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.Value">
      <summary>Gets or sets the value of the node.</summary>
      <returns>The white space characters found in the node.</returns>
      <exception cref="T:System.ArgumentException">Setting <see cref="P:System.Xml.XmlWhitespace.Value" /> to invalid white space characters. </exception>
    </member>
    <member name="M:System.Xml.XmlWhitespace.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The <see cref="T:System.Xml.XmlWriter" /> to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlWhitespace.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The <see cref="T:System.Xml.XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="T:System.Xml.XmlWriter">
      <summary>Represents a writer that provides a fast, non-cached, forward-only means of generating streams or files containing XML data.</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlWriter" /> class.</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.Close">
      <summary>When overridden in a derived class, closes this stream and the underlying stream.</summary>
      <exception cref="T:System.InvalidOperationException">A call is made to write more output after Close has been called or the result of this call is an invalid XML document. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.Stream)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified stream.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="output">The stream to which you want to write. The <see cref="T:System.Xml.XmlWriter" /> writes XML 1.0 text syntax and appends it to the specified stream.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="stream" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the stream and <see cref="T:System.Xml.XmlWriterSettings" /> object.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="output">The stream to which you want to write. The <see cref="T:System.Xml.XmlWriter" /> writes XML 1.0 text syntax and appends it to the specified stream</param>
      <param name="settings">The <see cref="T:System.Xml.XmlWriterSettings" /> object used to configure the new <see cref="T:System.Xml.XmlWriter" /> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings" /> with default settings is used.If the <see cref="T:System.Xml.XmlWriter" /> is being used with the <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> method, you should use the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property to obtain an <see cref="T:System.Xml.XmlWriterSettings" /> object with the correct settings. This ensures that the created <see cref="T:System.Xml.XmlWriter" /> object has the correct output settings.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="stream" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.TextWriter)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified <see cref="T:System.IO.TextWriter" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="output">The <see cref="T:System.IO.TextWriter" /> to which you want to write. The <see cref="T:System.Xml.XmlWriter" /> writes XML 1.0 text syntax and appends it to the specified <see cref="T:System.IO.TextWriter" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="text" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the <see cref="T:System.IO.TextWriter" /> and <see cref="T:System.Xml.XmlWriterSettings" /> objects.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="output">The <see cref="T:System.IO.TextWriter" /> to which you want to write. The <see cref="T:System.Xml.XmlWriter" /> writes XML 1.0 text syntax and appends it to the specified <see cref="T:System.IO.TextWriter" />.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlWriterSettings" /> object used to configure the new <see cref="T:System.Xml.XmlWriter" /> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings" /> with default settings is used.If the <see cref="T:System.Xml.XmlWriter" /> is being used with the <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> method, you should use the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property to obtain an <see cref="T:System.Xml.XmlWriterSettings" /> object with the correct settings. This ensures that the created <see cref="T:System.Xml.XmlWriter" /> object has the correct output settings.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="text" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.String)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified filename.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="outputFileName">The file to which you want to write. The <see cref="T:System.Xml.XmlWriter" /> creates a file at the specified path and writes to it in XML 1.0 text syntax. The <paramref name="outputFileName" /> must be a file system path.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.String,System.Xml.XmlWriterSettings)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the filename and <see cref="T:System.Xml.XmlWriterSettings" /> object.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="outputFileName">The file to which you want to write. The <see cref="T:System.Xml.XmlWriter" /> creates a file at the specified path and writes to it in XML 1.0 text syntax. The <paramref name="outputFileName" /> must be a file system path.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlWriterSettings" /> object used to configure the new <see cref="T:System.Xml.XmlWriter" /> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings" /> with default settings is used.If the <see cref="T:System.Xml.XmlWriter" /> is being used with the <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> method, you should use the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property to obtain an <see cref="T:System.Xml.XmlWriterSettings" /> object with the correct settings. This ensures that the created <see cref="T:System.Xml.XmlWriter" /> object has the correct output settings.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified <see cref="T:System.Text.StringBuilder" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="output">The <see cref="T:System.Text.StringBuilder" /> to which to write to. Content written by the <see cref="T:System.Xml.XmlWriter" /> is appended to the <see cref="T:System.Text.StringBuilder" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="builder" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the <see cref="T:System.Text.StringBuilder" /> and <see cref="T:System.Xml.XmlWriterSettings" /> objects.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="output">The <see cref="T:System.Text.StringBuilder" /> to which to write to. Content written by the <see cref="T:System.Xml.XmlWriter" /> is appended to the <see cref="T:System.Text.StringBuilder" />.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlWriterSettings" /> object used to configure the new <see cref="T:System.Xml.XmlWriter" /> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings" /> with default settings is used.If the <see cref="T:System.Xml.XmlWriter" /> is being used with the <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> method, you should use the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property to obtain an <see cref="T:System.Xml.XmlWriterSettings" /> object with the correct settings. This ensures that the created <see cref="T:System.Xml.XmlWriter" /> object has the correct output settings.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="builder" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified <see cref="T:System.Xml.XmlWriter" /> object.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object that is wrapped around the specified <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="output">The <see cref="T:System.Xml.XmlWriter" /> object that you want to use as the underlying writer.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified <see cref="T:System.Xml.XmlWriter" /> and <see cref="T:System.Xml.XmlWriterSettings" /> objects.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object that is wrapped around the specified <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="output">The <see cref="T:System.Xml.XmlWriter" /> object that you want to use as the underlying writer.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlWriterSettings" /> object used to configure the new <see cref="T:System.Xml.XmlWriter" /> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings" /> with default settings is used.If the <see cref="T:System.Xml.XmlWriter" /> is being used with the <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> method, you should use the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property to obtain an <see cref="T:System.Xml.XmlWriterSettings" /> object with the correct settings. This ensures that the created <see cref="T:System.Xml.XmlWriter" /> object has the correct output settings.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Xml.XmlWriter" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.Flush">
      <summary>When overridden in a derived class, flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.LookupPrefix(System.String)">
      <summary>When overridden in a derived class, returns the closest prefix defined in the current namespace scope for the namespace URI.</summary>
      <returns>The matching prefix or null if no matching namespace URI is found in the current scope.</returns>
      <param name="ns">The namespace URI whose prefix you want to find. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="ns" /> is either null or String.Empty. </exception>
    </member>
    <member name="P:System.Xml.XmlWriter.Settings">
      <summary>Gets the <see cref="T:System.Xml.XmlWriterSettings" /> object used to create this <see cref="T:System.Xml.XmlWriter" /> instance.</summary>
      <returns>The <see cref="T:System.Xml.XmlWriterSettings" /> object used to create this writer instance. If this writer was not created using the <see cref="Overload:System.Xml.XmlWriter.Create" /> method, this property returns null.</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.System#IDisposable#Dispose">
      <summary>For a description of this member, see <see cref="M:System.IDisposable.Dispose" />.</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)">
      <summary>When overridden in a derived class, writes out all the attributes found at the current position in the <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="reader">The XmlReader from which to copy the attributes. </param>
      <param name="defattr">true to copy the default attributes from the XmlReader; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null. </exception>
      <exception cref="T:System.Xml.XmlException">The reader is not positioned on an element, attribute or XmlDeclaration node. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)">
      <summary>When overridden in a derived class, writes out the attribute with the specified local name and value.</summary>
      <param name="localName">The local name of the attribute. </param>
      <param name="value">The value of the attribute. </param>
      <exception cref="T:System.InvalidOperationException">The state of writer is not WriteState.Element or writer is closed. </exception>
      <exception cref="T:System.ArgumentException">The xml:space or xml:lang attribute value is invalid. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)">
      <summary>When overridden in a derived class, writes an attribute with the specified local name, namespace URI, and value.</summary>
      <param name="localName">The local name of the attribute. </param>
      <param name="ns">The namespace URI to associate with the attribute. </param>
      <param name="value">The value of the attribute. </param>
      <exception cref="T:System.InvalidOperationException">The state of writer is not WriteState.Element or writer is closed. </exception>
      <exception cref="T:System.ArgumentException">The xml:space or xml:lang attribute value is invalid. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)">
      <summary>When overridden in a derived class, writes out the attribute with the specified prefix, local name, namespace URI, and value.</summary>
      <param name="prefix">The namespace prefix of the attribute. </param>
      <param name="localName">The local name of the attribute. </param>
      <param name="ns">The namespace URI of the attribute. </param>
      <param name="value">The value of the attribute. </param>
      <exception cref="T:System.InvalidOperationException">The state of writer is not WriteState.Element or writer is closed. </exception>
      <exception cref="T:System.ArgumentException">The xml:space or xml:lang attribute value is invalid. </exception>
      <exception cref="T:System.Xml.XmlException">The <paramref name="localName" /> or <paramref name="ns" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, encodes the specified binary bytes as Base64 and writes out the resulting text.</summary>
      <param name="buffer">Byte array to encode. </param>
      <param name="index">The position in the buffer indicating the start of the bytes to write. </param>
      <param name="count">The number of bytes to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero. -or-The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, encodes the specified binary bytes as BinHex and writes out the resulting text.</summary>
      <param name="buffer">Byte array to encode. </param>
      <param name="index">The position in the buffer indicating the start of the bytes to write. </param>
      <param name="count">The number of bytes to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The writer is closed or in error state.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero. -or-The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCData(System.String)">
      <summary>When overridden in a derived class, writes out a &lt;![CDATA[...]]&gt; block containing the specified text.</summary>
      <param name="text">The text to place inside the CDATA block. </param>
      <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharEntity(System.Char)">
      <summary>When overridden in a derived class, forces the generation of a character entity for the specified Unicode character value.</summary>
      <param name="ch">The Unicode character for which to generate a character entity. </param>
      <exception cref="T:System.ArgumentException">The character is in the surrogate pair character range, 0xd800 - 0xdfff. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, writes text one buffer at a time.</summary>
      <param name="buffer">Character array containing the text to write. </param>
      <param name="index">The position in the buffer indicating the start of the text to write. </param>
      <param name="count">The number of characters to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero. -or-The buffer length minus <paramref name="index" /> is less than <paramref name="count" />; the call results in surrogate pair characters being split or an invalid surrogate pair being written.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="buffer" /> parameter value is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteComment(System.String)">
      <summary>When overridden in a derived class, writes out a comment &lt;!--...--&gt; containing the specified text.</summary>
      <param name="text">Text to place inside the comment. </param>
      <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>When overridden in a derived class, writes the DOCTYPE declaration with the specified name and optional attributes.</summary>
      <param name="name">The name of the DOCTYPE. This must be non-empty. </param>
      <param name="pubid">If non-null it also writes PUBLIC "pubid" "sysid" where <paramref name="pubid" /> and <paramref name="sysid" /> are replaced with the value of the given arguments. </param>
      <param name="sysid">If <paramref name="pubid" /> is null and <paramref name="sysid" /> is non-null it writes SYSTEM "sysid" where <paramref name="sysid" /> is replaced with the value of this argument. </param>
      <param name="subset">If non-null it writes [subset] where subset is replaced with the value of this argument. </param>
      <exception cref="T:System.InvalidOperationException">This method was called outside the prolog (after the root element). </exception>
      <exception cref="T:System.ArgumentException">The value for <paramref name="name" /> would result in invalid XML. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String)">
      <summary>Writes an element with the specified local name and value.</summary>
      <param name="localName">The local name of the element. </param>
      <param name="value">The value of the element. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="localName" /> value is null or an empty string.-or-The parameter values are not valid.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)">
      <summary>Writes an element with the specified local name, namespace URI, and value.</summary>
      <param name="localName">The local name of the element. </param>
      <param name="ns">The namespace URI to associate with the element. </param>
      <param name="value">The value of the element. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="localName" /> value is null or an empty string.-or-The parameter values are not valid. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)">
      <summary>Writes an element with the specified local name, namespace URI, and value.</summary>
      <param name="prefix">The prefix of the element.</param>
      <param name="localName">The local name of the element.</param>
      <param name="ns">The namespace URI of the element.</param>
      <param name="value">The value of the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="localName" /> value is null or an empty string.-or-The parameter values are not valid.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndAttribute">
      <summary>When overridden in a derived class, closes the previous <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> call.</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndDocument">
      <summary>When overridden in a derived class, closes any open elements or attributes and puts the writer back in the Start state.</summary>
      <exception cref="T:System.ArgumentException">The XML document is invalid. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndElement">
      <summary>When overridden in a derived class, closes one element and pops the corresponding namespace scope.</summary>
      <exception cref="T:System.InvalidOperationException">This results in an invalid XML document. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEntityRef(System.String)">
      <summary>When overridden in a derived class, writes out an entity reference as &amp;name;.</summary>
      <param name="name">The name of the entity reference. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is either null or String.Empty. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteFullEndElement">
      <summary>When overridden in a derived class, closes one element and pops the corresponding namespace scope.</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteName(System.String)">
      <summary>When overridden in a derived class, writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</summary>
      <param name="name">The name to write. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is not a valid XML name; or <paramref name="name" /> is either null or String.Empty. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNmToken(System.String)">
      <summary>When overridden in a derived class, writes out the specified name, ensuring it is a valid NmToken according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</summary>
      <param name="name">The name to write. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is not a valid NmToken; or <paramref name="name" /> is either null or String.Empty. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)">
      <summary>When overridden in a derived class, copies everything from the reader to the writer and moves the reader to the start of the next sibling.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from. </param>
      <param name="defattr">true to copy the default attributes from the XmlReader; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> contains invalid characters. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNode(System.Xml.XPath.XPathNavigator,System.Boolean)">
      <summary>Copies everything from the <see cref="T:System.Xml.XPath.XPathNavigator" /> object to the writer. The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> remains unchanged.</summary>
      <param name="navigator">The <see cref="T:System.Xml.XPath.XPathNavigator" /> to copy from.</param>
      <param name="defattr">true to copy the default attributes; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>When overridden in a derived class, writes out a processing instruction with a space between the name and text as follows: &lt;?name text?&gt;.</summary>
      <param name="name">The name of the processing instruction. </param>
      <param name="text">The text to include in the processing instruction. </param>
      <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document.<paramref name="name" /> is either null or String.Empty.This method is being used to create an XML declaration after <see cref="M:System.Xml.XmlWriter.WriteStartDocument" /> has already been called. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)">
      <summary>When overridden in a derived class, writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.</summary>
      <param name="localName">The local name to write. </param>
      <param name="ns">The namespace URI for the name. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> is either null or String.Empty.<paramref name="localName" /> is not a valid name. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, writes raw markup manually from a character buffer.</summary>
      <param name="buffer">Character array containing the text to write. </param>
      <param name="index">The position within the buffer indicating the start of the text to write. </param>
      <param name="count">The number of characters to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero. -or-The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.String)">
      <summary>When overridden in a derived class, writes raw markup manually from a string.</summary>
      <param name="data">String containing the text to write. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="data" /> is either null or String.Empty. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String)">
      <summary>Writes the start of an attribute with the specified local name.</summary>
      <param name="localName">The local name of the attribute.</param>
      <exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)">
      <summary>Writes the start of an attribute with the specified local name and namespace URI.</summary>
      <param name="localName">The local name of the attribute. </param>
      <param name="ns">The namespace URI of the attribute. </param>
      <exception cref="T:System.Text.EncoderFallbackException">There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>When overridden in a derived class, writes the start of an attribute with the specified prefix, local name, and namespace URI.</summary>
      <param name="prefix">The namespace prefix of the attribute. </param>
      <param name="localName">The local name of the attribute. </param>
      <param name="ns">The namespace URI for the attribute. </param>
      <exception cref="T:System.Text.EncoderFallbackException">There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument">
      <summary>When overridden in a derived class, writes the XML declaration with the version "1.0".</summary>
      <exception cref="T:System.InvalidOperationException">This is not the first write method called after the constructor. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)">
      <summary>When overridden in a derived class, writes the XML declaration with the version "1.0" and the standalone attribute.</summary>
      <param name="standalone">If true, it writes "standalone=yes"; if false, it writes "standalone=no". </param>
      <exception cref="T:System.InvalidOperationException">This is not the first write method called after the constructor. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String)">
      <summary>When overridden in a derived class, writes out a start tag with the specified local name.</summary>
      <param name="localName">The local name of the element. </param>
      <exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String)">
      <summary>When overridden in a derived class, writes the specified start tag and associates it with the given namespace.</summary>
      <param name="localName">The local name of the element. </param>
      <param name="ns">The namespace URI to associate with the element. If this namespace is already in scope and has an associated prefix, the writer automatically writes that prefix also. </param>
      <exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>When overridden in a derived class, writes the specified start tag and associates it with the given namespace and prefix.</summary>
      <param name="prefix">The namespace prefix of the element. </param>
      <param name="localName">The local name of the element. </param>
      <param name="ns">The namespace URI to associate with the element. </param>
      <exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections. </exception>
    </member>
    <member name="P:System.Xml.XmlWriter.WriteState">
      <summary>When overridden in a derived class, gets the state of the writer.</summary>
      <returns>One of the <see cref="T:System.Xml.WriteState" /> values.</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteString(System.String)">
      <summary>When overridden in a derived class, writes the given text content.</summary>
      <param name="text">The text to write. </param>
      <exception cref="T:System.ArgumentException">The text string contains an invalid surrogate pair. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>When overridden in a derived class, generates and writes the surrogate character entity for the surrogate character pair.</summary>
      <param name="lowChar">The low surrogate. This must be a value between 0xDC00 and 0xDFFF. </param>
      <param name="highChar">The high surrogate. This must be a value between 0xD800 and 0xDBFF. </param>
      <exception cref="T:System.ArgumentException">An invalid surrogate character pair was passed. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Boolean)">
      <summary>Writes a <see cref="T:System.Boolean" /> value.</summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.DateTime)">
      <summary>Writes a <see cref="T:System.DateTime" /> value.</summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Decimal)">
      <summary>Writes a <see cref="T:System.Decimal" /> value.</summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Double)">
      <summary>Writes a <see cref="T:System.Double" /> value.</summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Int32)">
      <summary>Writes a <see cref="T:System.Int32" /> value.</summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Int64)">
      <summary>Writes a <see cref="T:System.Int64" /> value.</summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Object)">
      <summary>Writes the object value.</summary>
      <param name="value">The object value to write. NoteWith the release of the .NET Framework 3.5, this method accepts <see cref="T:System.DateTimeOffset" /> as a parameter.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The writer is closed or in error state.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Single)">
      <summary>Writes a single-precision floating-point number.</summary>
      <param name="value">The single-precision floating-point number to write.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.String)">
      <summary>Writes a <see cref="T:System.String" /> value.</summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteWhitespace(System.String)">
      <summary>When overridden in a derived class, writes out the given white space.</summary>
      <param name="ws">The string of white space characters. </param>
      <exception cref="T:System.ArgumentException">The string contains non-white space characters. </exception>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlLang">
      <summary>When overridden in a derived class, gets the current xml:lang scope.</summary>
      <returns>The current xml:lang scope.</returns>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlSpace">
      <summary>When overridden in a derived class, gets an <see cref="T:System.Xml.XmlSpace" /> representing the current xml:space scope.</summary>
      <returns>An XmlSpace representing the current xml:space scope.Value Meaning NoneThis is the default if no xml:space scope exists. DefaultThe current scope is xml:space="default". PreserveThe current scope is xml:space="preserve". </returns>
    </member>
    <member name="T:System.Xml.XmlWriterSettings">
      <summary>Specifies a set of features to support on the <see cref="T:System.Xml.XmlWriter" /> object created by the <see cref="Overload:System.Xml.XmlWriter.Create" /> method.</summary>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlWriterSettings" /> class.</summary>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CheckCharacters">
      <summary>Gets or sets a value indicating whether to do character checking.</summary>
      <returns>true to do character checking; otherwise false. The default is true.</returns>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.Clone">
      <summary>Creates a copy of the <see cref="T:System.Xml.XmlWriterSettings" /> instance.</summary>
      <returns>The cloned <see cref="T:System.Xml.XmlWriterSettings" /> object.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CloseOutput">
      <summary>Gets or sets a value indicating whether the <see cref="T:System.Xml.XmlWriter" /> should also close the underlying stream or <see cref="T:System.IO.TextWriter" /> when the <see cref="M:System.Xml.XmlWriter.Close" /> method is called.</summary>
      <returns>true to also close the underlying stream or <see cref="T:System.IO.TextWriter" />; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.ConformanceLevel">
      <summary>Gets or sets the level of conformance which the <see cref="T:System.Xml.XmlWriter" /> complies with.</summary>
      <returns>One of the <see cref="T:System.Xml.ConformanceLevel" /> values. The default is ConformanceLevel.Document.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Encoding">
      <summary>Gets or sets the type of text encoding to use.</summary>
      <returns>The text encoding to use. The default is Encoding.UTF8.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Indent">
      <summary>Gets or sets a value indicating whether to indent elements.</summary>
      <returns>true to write individual elements on new lines and indent; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.IndentChars">
      <summary>Gets or sets the character string to use when indenting. This setting is used when the <see cref="P:System.Xml.XmlWriterSettings.Indent" /> property is set to true.</summary>
      <returns>The character string to use when indenting. This can be set to any string value. However, to ensure valid XML, you should specify only valid white space characters, such as space characters, tabs, carriage returns, or line feeds. The default is two spaces.</returns>
      <exception cref="T:System.ArgumentNullException">The value assigned to the <see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> is null. </exception>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NamespaceHandling">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.XmlWriter" /> should remove duplicate namespace declarations when writing XML content. The default behavior is for the writer to output all namespace declarations that are present in the writer's namespace resolver.</summary>
      <returns>The <see cref="T:System.Xml.NamespaceHandling" /> enumeration used to specify whether to remove duplicate namespace declarations in the <see cref="T:System.Xml.XmlWriter" />.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineChars">
      <summary>Gets or sets the character string to use for line breaks. </summary>
      <returns>The character string to use for line breaks. This can be set to any string value. However, to ensure valid XML, you should specify only valid white space characters, such as space characters, tabs, carriage returns, or line feeds. The default is \r\n (carriage return, new line).</returns>
      <exception cref="T:System.ArgumentNullException">The value assigned to the <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> is null. </exception>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineHandling">
      <summary>Gets or sets a value indicating whether to normalize line breaks in the output.</summary>
      <returns>One of the <see cref="T:System.Xml.NewLineHandling" /> values. The default is <see cref="F:System.Xml.NewLineHandling.Replace" />.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineOnAttributes">
      <summary>Gets or sets a value indicating whether to write attributes on a new line.</summary>
      <returns>true to write attributes on individual lines; otherwise false. The default is false.NoteThis setting has no effect when the <see cref="P:System.Xml.XmlWriterSettings.Indent" /> property value is false.When <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> is set to true, each attribute is pre-pended with a new line and one extra level of indentation.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration">
      <summary>Gets or sets a value indicating whether to write an XML declaration.</summary>
      <returns>true to omit the XML declaration; otherwise false. The default is false, an XML declaration is written.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.OutputMethod">
      <summary>Gets the method used to serialize the <see cref="T:System.Xml.XmlWriter" /> output.</summary>
      <returns>One of the <see cref="T:System.Xml.XmlOutputMethod" /> values. The default is <see cref="F:System.Xml.XmlOutputMethod.Xml" />.</returns>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.Reset">
      <summary>Resets the members of the settings class to their default values.</summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.Settings">
      <summary>Gets the <see cref="T:System.Xml.XmlReaderSettings" /> object used to create this <see cref="T:System.Xml.XmlTextReader" /> instance.</summary>
      <returns>The <see cref="T:System.Xml.XmlReaderSettings" /> object used to create this <see cref="T:System.Xml.XmlTextReader" /> instance; null if the reader was not created using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.FromBinHexString(System.String)"></member>
    <member name="M:System.Xml.XmlConvert.ToBinHexString(System.Byte[])"></member>
    <member name="P:System.Xml.XmlResolver.NameTable"></member>
    <member name="T:System.Xml.Resolvers.XmlKnownDtds">
      <summary>The <see cref="T:System.Xml.Resolvers.XmlKnownDtds" /> enumeration is used by the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> and defines which well-known DTDs that the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> recognizes.</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.None">
      <summary>Specifies that the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> will not recognize any of the predefined DTDs.</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.Xhtml10">
      <summary>Specifies that the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> will recognize DTDs and entities that are defined in XHTML 1.0. </summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.Rss091">
      <summary>Specifies that the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> will recognize DTDs and entities that are defined in RSS 0.91.</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.All">
      <summary>Specifies that the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> will recognize all currently supported DTDs. This is the default behavior.</summary>
    </member>
    <member name="T:System.Xml.Resolvers.XmlPreloadedResolver">
      <summary>The <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> type is used to prepopulate the cache with DTDs or XML streams. </summary>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> class. </summary>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.Resolvers.XmlKnownDtds)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> class with the specified preloaded well-known DTDs. </summary>
      <param name="preloadedDtds">The well-known DTDs that should be prepopulated into the cache. </param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> class with the specified fallback resolver.</summary>
      <param name="fallbackResolver">XmlResolver, XmlXapResolver, or your own resolver.</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver,System.Xml.Resolvers.XmlKnownDtds)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> class with the specified fallback resolver and preloaded well-known DTDs. </summary>
      <param name="fallbackResolver">XmlResolver, XmlXapResolver, or your own resolver.</param>
      <param name="preloadedDtds">The well-known DTDs that should be prepopulated into the cache. </param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver,System.Xml.Resolvers.XmlKnownDtds,System.Collections.Generic.IEqualityComparer{System.Uri})">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> class with the specified fallback resolver, preloaded well-known DTDs, and URI equality comparer.</summary>
      <param name="fallbackResolver">XmlResolver, XmlXapResolver, or your own resolver.</param>
      <param name="preloadedDtds">The well-known DTDs that should be prepopulated into cache.</param>
      <param name="uriComparer">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when you compare URIs.</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.Byte[])">
      <summary>Adds a <see cref="T:System.IO.Stream" />, byte array, or string with preloaded data to the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store and maps it to a URI. If the store already contains a mapping for the same URI, the existing mapping is overridden.</summary>
      <param name="uri">The URI of the data that is being added to the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store.</param>
      <param name="value">A byte array with the data that corresponds to the provided URI.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> or <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.Byte[],System.Int32,System.Int32)">
      <summary>Adds a <see cref="T:System.IO.Stream" />, byte array, or string with preloaded data to the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store and maps it to a URI. If the store already contains a mapping for the same URI, the existing mapping is overridden.</summary>
      <param name="uri">The URI of the data that is being added to the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store.</param>
      <param name="value">A byte array with the data that corresponds to the provided URI.</param>
      <param name="offset">The offset in the provided byte array where the data starts.</param>
      <param name="count">The number of bytes to read from the byte array, starting at the provided offset.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> or <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is less than 0.-or-The length of the <paramref name="value" /> minus <paramref name="offset" /> is less than <paramref name="count." /></exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.IO.Stream)">
      <summary>Adds a <see cref="T:System.IO.Stream" />, byte array, or string with preloaded data to the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store and maps it to a URI. If the store already contains a mapping for the same URI, the existing mapping is overridden.</summary>
      <param name="uri">The URI of the data that is being added to the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store.</param>
      <param name="value">A <see cref="T:System.IO.Stream" /> with the data that corresponds to the provided URI.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> or <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.String)">
      <summary>Adds a <see cref="T:System.IO.Stream" />, byte array, or string with preloaded data to the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store and maps it to a URI. If the store already contains a mapping for the same URI, the existing mapping is overridden.</summary>
      <param name="uri">The URI of the data that is being added to the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store.</param>
      <param name="value">A String with the data that corresponds to the provided URI.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> or <paramref name="value" /> is null.</exception>
    </member>
    <member name="P:System.Xml.Resolvers.XmlPreloadedResolver.Credentials">
      <summary>Sets credentials that are used to authenticate underlying <see cref="T:System.Net.WebRequest" />.</summary>
      <returns>An <see cref="T:System.Net.ICredentials" /> object. </returns>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>Maps a URI to an object that contains the actual resource. </summary>
      <returns>A <see cref="T:System.IO.Stream" /> or <see cref="T:System.IO.TextReader" /> object.</returns>
      <param name="absoluteUri">The URI returned from <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />.</param>
      <param name="role">The current version of the .NET Framework for Silverlight does not use this parameter when resolving URIs. This parameter is provided for future extensibility purposes. For example, this parameter can be mapped to the xlink:role and used as an implementation-specific argument in other scenarios.</param>
      <param name="ofObjectToReturn">The type of object to return. The <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> supports <see cref="T:System.IO.Stream" /> objects and <see cref="T:System.IO.TextReader" /> objects for URIs that were added as String. If the requested type is not supported by the resolver, an exception will be thrown. Use the <see cref="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)" /> method to determine whether a certain Type is supported by this resolver.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="absoluteUri" /> is null.</exception>
      <exception cref="T:System.Xml.XmlException">Cannot resolve URI passed in <paramref name="absoluteUri" />.-or-<paramref name="ofObjectToReturn" /> is not of a supported type.</exception>
    </member>
    <member name="P:System.Xml.Resolvers.XmlPreloadedResolver.PreloadedUris">
      <summary>Gets a collection of preloaded URIs.</summary>
      <returns>The collection of preloaded URIs.</returns>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Remove(System.Uri)">
      <summary>Removes the data that corresponds to the URI from the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />. </summary>
      <param name="uri">The URI of the data that should be removed from the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is null.</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.ResolveUri(System.Uri,System.String)">
      <summary>Returns true if the resolver’s GetEntity method can resolve the provided URI into an instance of the provided <see cref="T:System.Type" />.</summary>
      <returns>Returns <see cref="T:System.Uri" /> or null.</returns>
      <param name="baseUri">The URI.</param>
      <param name="relativeUri">A relative Uri as <see cref="T:System.String" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is null.</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)">
      <summary>Returns true if the resolver’s GetEntity method can resolve the provided URI into an instance of the provided <see cref="T:System.Type" />.</summary>
      <returns>Returns true if <see cref="T:System.Type" /> is supported, otherwise false.</returns>
      <param name="absoluteUri"></param>
      <param name="type">The requested <see cref="T:System.Type" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is null.</exception>
    </member>
    <member name="T:System.Xml.Schema.IXmlSchemaInfo">
      <summary>Defines the post-schema-validation infoset of a validated XML node.</summary>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.IsDefault">
      <summary>Gets a value indicating if this validated XML node was set as the result of a default being applied during XML Schema Definition Language (XSD) schema validation.</summary>
      <returns>true if this validated XML node was set as the result of a default being applied during schema validation; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.IsNil">
      <summary>Gets a value indicating if the value for this validated XML node is nil.</summary>
      <returns>true if the value for this validated XML node is nil; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.MemberType">
      <summary>Gets the dynamic schema type for this validated XML node.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute">
      <summary>Gets the compiled <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> that corresponds to this validated XML node.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaElement">
      <summary>Gets the compiled <see cref="T:System.Xml.Schema.XmlSchemaElement" /> that corresponds to this validated XML node.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaElement" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaType">
      <summary>Gets the static XML Schema Definition Language (XSD) schema type of this validated XML node.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaType" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.Validity">
      <summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> value of this validated XML node.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> value.</returns>
    </member>
    <member name="T:System.Xml.Schema.ValidationEventArgs">
      <summary>Returns detailed information related to the ValidationEventHandler.</summary>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Exception">
      <summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaException" /> associated with the validation event.</summary>
      <returns>The XmlSchemaException associated with the validation event.</returns>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Message">
      <summary>Gets the text description corresponding to the validation event.</summary>
      <returns>The text description.</returns>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Severity">
      <summary>Gets the severity of the validation event.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSeverityType" /> value representing the severity of the validation event.</returns>
    </member>
    <member name="T:System.Xml.Schema.ValidationEventHandler">
      <summary>Represents the callback method that will handle XML schema validation events and the <see cref="T:System.Xml.Schema.ValidationEventArgs" />.</summary>
      <param name="sender">The source of the event. Note Determine the type of a sender before using it in your code. You cannot assume that the sender is an instance of a particular type. The sender is also not guaranteed to not  be null. Always surround your casts with failure handling logic.</param>
      <param name="e">The event data. </param>
    </member>
    <member name="T:System.Xml.Schema.XmlAtomicValue">
      <summary>Represents the typed value of a validated XML element or attribute. The <see cref="T:System.Xml.Schema.XmlAtomicValue" /> class cannot be inherited.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.Clone">
      <summary>Returns a copy of this <see cref="T:System.Xml.Schema.XmlAtomicValue" /> object.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlAtomicValue" /> object copy of this <see cref="T:System.Xml.Schema.XmlAtomicValue" /> object.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.IsNode">
      <summary>Gets a value indicating whether the validated XML element or attribute is an XPath node or an atomic value.</summary>
      <returns>true if the validated XML element or attribute is an XPath node; false if the validated XML element or attribute is an atomic value.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.System#ICloneable#Clone">
      <summary>For a description of this member, see <see cref="M:System.Xml.Schema.XmlAtomicValue.Clone" />.</summary>
      <returns>Returns a copy of this <see cref="T:System.Xml.Schema.XmlAtomicValue" /> object.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.ToString">
      <summary>Gets the string value of the validated XML element or attribute.</summary>
      <returns>The string value of the validated XML element or attribute.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.TypedValue">
      <summary>Gets the current validated XML element or attribute as a boxed object of the most appropriate Microsoft .NET Framework type according to its schema type.</summary>
      <returns>The current validated XML element or attribute as a boxed object of the most appropriate .NET Framework type.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.Value">
      <summary>Gets the string value of the validated XML element or attribute.</summary>
      <returns>The string value of the validated XML element or attribute.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>Returns the validated XML element or attribute's value as the type specified using the <see cref="T:System.Xml.IXmlNamespaceResolver" /> object specified to resolve namespace prefixes.</summary>
      <returns>The value of the validated XML element or attribute as the type requested.</returns>
      <param name="type">The type to return the validated XML element or attribute's value as.</param>
      <param name="nsResolver">The <see cref="T:System.Xml.IXmlNamespaceResolver" /> object used to resolve namespace prefixes.</param>
      <exception cref="T:System.FormatException">The validated XML element or attribute's value is not in the correct format for the target type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsBoolean">
      <summary>Gets the validated XML element or attribute's value as a <see cref="T:System.Boolean" />.</summary>
      <returns>The validated XML element or attribute's value as a <see cref="T:System.Boolean" />.</returns>
      <exception cref="T:System.FormatException">The validated XML element or attribute's value is not in the correct format for the <see cref="T:System.Boolean" /> type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Boolean" /> is not valid.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsDateTime">
      <summary>Gets the validated XML element or attribute's value as a <see cref="T:System.DateTime" />.</summary>
      <returns>The validated XML element or attribute's value as a <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.FormatException">The validated XML element or attribute's value is not in the correct format for the <see cref="T:System.DateTime" /> type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.DateTime" /> is not valid.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsDouble">
      <summary>Gets the validated XML element or attribute's value as a <see cref="T:System.Double" />.</summary>
      <returns>The validated XML element or attribute's value as a <see cref="T:System.Double" />.</returns>
      <exception cref="T:System.FormatException">The validated XML element or attribute's value is not in the correct format for the <see cref="T:System.Double" /> type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Double" /> is not valid.</exception>
      <exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsInt">
      <summary>Gets the validated XML element or attribute's value as an <see cref="T:System.Int32" />.</summary>
      <returns>The validated XML element or attribute's value as an <see cref="T:System.Int32" />.</returns>
      <exception cref="T:System.FormatException">The validated XML element or attribute's value is not in the correct format for the <see cref="T:System.Int32" /> type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Int32" /> is not valid.</exception>
      <exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsLong">
      <summary>Gets the validated XML element or attribute's value as an <see cref="T:System.Int64" />.</summary>
      <returns>The validated XML element or attribute's value as an <see cref="T:System.Int64" />.</returns>
      <exception cref="T:System.FormatException">The validated XML element or attribute's value is not in the correct format for the <see cref="T:System.Int64" /> type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Int64" /> is not valid.</exception>
      <exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueType">
      <summary>Gets the Microsoft .NET Framework type of the validated XML element or attribute.</summary>
      <returns>The .NET Framework type of the validated XML element or attribute. The default value is <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.XmlType">
      <summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaType" /> for the validated XML element or attribute.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaType" /> for the validated XML element or attribute.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchema">
      <summary>An in-memory representation of an XML Schema as specified in the World Wide Web Consortium (W3C) XML Schema Part 1: Structures and XML Schema Part 2: Datatypes specifications.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchema" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.AttributeFormDefault">
      <summary>Gets or sets the form for attributes declared in the target namespace of the schema.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaForm" /> value that indicates if attributes from the target namespace are required to be qualified with the namespace prefix. The default is <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.AttributeGroups">
      <summary>Gets the post-schema-compilation value of all the global attribute groups in the schema.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> collection of all the global attribute groups in the schema.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Attributes">
      <summary>Gets the post-schema-compilation value for all the attributes in the schema.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> collection of all the attributes in the schema.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.BlockDefault">
      <summary>Gets or sets the blockDefault attribute which sets the default value of the block attribute on element and complex types in the targetNamespace of the schema.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> value representing the different methods for preventing derivation. The default value is XmlSchemaDerivationMethod.None.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Compile(System.Xml.Schema.ValidationEventHandler)">
      <summary>Compiles the XML Schema Object Model (SOM) into schema information for validation. Used to check the syntactic and semantic structure of the programmatically built SOM. Semantic validation checking is performed during compilation.</summary>
      <param name="validationEventHandler">The validation event handler that receives information about XML Schema validation errors. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Compile(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlResolver)">
      <summary>Compiles the XML Schema Object Model (SOM) into schema information for validation. Used to check the syntactic and semantic structure of the programmatically built SOM. Semantic validation checking is performed during compilation.</summary>
      <param name="validationEventHandler">The validation event handler that receives information about the XML Schema validation errors. </param>
      <param name="resolver">The XmlResolver used to resolve namespaces referenced in include and import elements. </param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.ElementFormDefault">
      <summary>Gets or sets the form for elements declared in the target namespace of the schema.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaForm" /> value that indicates if elements from the target namespace are required to be qualified with the namespace prefix. The default is <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Elements">
      <summary>Gets the post-schema-compilation value for all the elements in the schema.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> collection of all the elements in the schema.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.FinalDefault">
      <summary>Gets or sets the finalDefault attribute which sets the default value of the final attribute on elements and complex types in the target namespace of the schema.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> value representing the different methods for preventing derivation. The default value is XmlSchemaDerivationMethod.None.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Groups">
      <summary>Gets the post-schema-compilation value of all the groups in the schema.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> collection of all the groups in the schema.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Id">
      <summary>Gets or sets the string ID.</summary>
      <returns>The ID of the string. The default value is String.Empty.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Includes">
      <summary>Gets the collection of included and imported schemas.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" /> of the included and imported schemas.</returns>
    </member>
    <member name="F:System.Xml.Schema.XmlSchema.InstanceNamespace">
      <summary>The XML schema instance namespace. This field is constant. </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.IsCompiled">
      <summary>Indicates if the schema has been compiled.</summary>
      <returns>true if schema has been compiled, otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Items">
      <summary>Gets the collection of schema elements in the schema and is used to add new element types at the schema element level.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" /> of schema elements in the schema.</returns>
    </member>
    <member name="F:System.Xml.Schema.XmlSchema.Namespace">
      <summary>The XML schema namespace. This field is constant.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Notations">
      <summary>Gets the post-schema-compilation value for all notations in the schema.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> collection of all notations in the schema.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.IO.Stream,System.Xml.Schema.ValidationEventHandler)">
      <summary>Reads an XML Schema  from the supplied stream.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchema" /> object representing the XML Schema.</returns>
      <param name="stream">The supplied data stream. </param>
      <param name="validationEventHandler">The validation event handler that receives information about XML Schema syntax errors. </param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">An <see cref="T:System.Xml.Schema.XmlSchemaException" /> is raised if no <see cref="T:System.Xml.Schema.ValidationEventHandler" /> is specified.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.IO.TextReader,System.Xml.Schema.ValidationEventHandler)">
      <summary>Reads an XML Schema from the supplied <see cref="T:System.IO.TextReader" />.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchema" /> object representing the XML Schema.</returns>
      <param name="reader">The TextReader containing the XML Schema to read. </param>
      <param name="validationEventHandler">The validation event handler that receives information about the XML Schema syntax errors. </param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">An <see cref="T:System.Xml.Schema.XmlSchemaException" /> is raised if no <see cref="T:System.Xml.Schema.ValidationEventHandler" /> is specified.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.Xml.XmlReader,System.Xml.Schema.ValidationEventHandler)">
      <summary>Reads an XML Schema from the supplied <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchema" /> object representing the XML Schema.</returns>
      <param name="reader">The XmlReader containing the XML Schema to read. </param>
      <param name="validationEventHandler">The validation event handler that receives information about the XML Schema syntax errors. </param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">An <see cref="T:System.Xml.Schema.XmlSchemaException" /> is raised if no <see cref="T:System.Xml.Schema.ValidationEventHandler" /> is specified.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.SchemaTypes">
      <summary>Gets the post-schema-compilation value of all schema types in the schema.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" /> of all schema types in the schema.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.TargetNamespace">
      <summary>Gets or sets the Uniform Resource Identifier (URI) of the schema target namespace.</summary>
      <returns>The schema target namespace.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.UnhandledAttributes">
      <summary>Gets and sets the qualified attributes which do not belong to the schema target namespace.</summary>
      <returns>An array of qualified <see cref="T:System.Xml.XmlAttribute" /> objects that do not belong to the schema target namespace.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Version">
      <summary>Gets or sets the version of the schema.</summary>
      <returns>The version of the schema. The default value is String.Empty.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.Stream)">
      <summary>Writes the XML Schema to the supplied data stream.</summary>
      <param name="stream">The supplied data stream. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.Stream,System.Xml.XmlNamespaceManager)">
      <summary>Writes the XML Schema to the supplied <see cref="T:System.IO.Stream" /> using the <see cref="T:System.Xml.XmlNamespaceManager" /> specified.</summary>
      <param name="stream">The supplied data stream. </param>
      <param name="namespaceManager">The <see cref="T:System.Xml.XmlNamespaceManager" />.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.TextWriter)">
      <summary>Writes the XML Schema to the supplied <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="writer">The <see cref="T:System.IO.TextWriter" /> to write to.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.TextWriter,System.Xml.XmlNamespaceManager)">
      <summary>Writes the XML Schema to the supplied <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="writer">The <see cref="T:System.IO.TextWriter" /> to write to.</param>
      <param name="namespaceManager">The <see cref="T:System.Xml.XmlNamespaceManager" />. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.Xml.XmlWriter)">
      <summary>Writes the XML Schema to the supplied <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.Xml.XmlWriter,System.Xml.XmlNamespaceManager)">
      <summary>Writes the XML Schema to the supplied <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="namespaceManager">The <see cref="T:System.Xml.XmlNamespaceManager" />. </param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAll">
      <summary>Represents the World Wide Web Consortium (W3C) all element (compositor).</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAll.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaAll" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAll.Items">
      <summary>Gets the collection of XmlSchemaElement elements contained within the all compositor.</summary>
      <returns>The collection of elements contained in XmlSchemaAll.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnnotated">
      <summary>The base class for any element that can contain annotation elements.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnnotated.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaAnnotated" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.Annotation">
      <summary>Gets or sets the annotation property.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" /> representing the annotation property.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.Id">
      <summary>Gets or sets the string id.</summary>
      <returns>The string id. The default is String.Empty.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.UnhandledAttributes">
      <summary>Gets or sets the qualified attributes that do not belong to the current schema's target namespace.</summary>
      <returns>An array of qualified <see cref="T:System.Xml.XmlAttribute" /> objects that do not belong to the schema's target namespace.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnnotation">
      <summary>Represents the World Wide Web Consortium (W3C) annotation element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnnotation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.Id">
      <summary>Gets or sets the string id.</summary>
      <returns>The string id. The default is String.Empty.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.Items">
      <summary>Gets the Items collection that is used to store the appinfo and documentation child elements.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" /> of appinfo and documentation child elements.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.UnhandledAttributes">
      <summary>Gets or sets the qualified attributes that do not belong to the schema's target namespace.</summary>
      <returns>An array of <see cref="T:System.Xml.XmlAttribute" /> objects that do not belong to the schema's target namespace.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAny">
      <summary>Represents the World Wide Web Consortium (W3C) any element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAny.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaAny" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAny.Namespace">
      <summary>Gets or sets the namespaces containing the elements that can be used.</summary>
      <returns>Namespaces for elements that are available for use. The default is ##any.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAny.ProcessContents">
      <summary>Gets or sets information about how an application or XML processor should handle the validation of XML documents for the elements specified by the any element.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaContentProcessing" /> values. If no processContents attribute is specified, the default is Strict.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnyAttribute">
      <summary>Represents the World Wide Web Consortium (W3C) anyAttribute element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnyAttribute.Namespace">
      <summary>Gets or sets the namespaces containing the attributes that can be used.</summary>
      <returns>Namespaces for attributes that are available for use. The default is ##any.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnyAttribute.ProcessContents">
      <summary>Gets or sets information about how an application or XML processor should handle the validation of XML documents for the attributes specified by the anyAttribute element.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaContentProcessing" /> values. If no processContents attribute is specified, the default is Strict.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAppInfo">
      <summary>Represents the World Wide Web Consortium (W3C) appinfo element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAppInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaAppInfo" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAppInfo.Markup">
      <summary>Gets or sets an array of <see cref="T:System.Xml.XmlNode" /> objects that represents the appinfo child nodes.</summary>
      <returns>An array of <see cref="T:System.Xml.XmlNode" /> objects that represents the appinfo child nodes.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAppInfo.Source">
      <summary>Gets or sets the source of the application information.</summary>
      <returns>A Uniform Resource Identifier (URI) reference. The default is String.Empty.Optional.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttribute">
      <summary>Represents the attribute element from the XML Schema as specified by the World Wide Web Consortium (W3C). Attributes provide additional information for other document elements. The attribute tag is nested between the tags of a document's element for the schema. The XML document displays attributes as named items in the opening tag of an element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.AttributeSchemaType">
      <summary>Gets an <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> object representing the type of the attribute based on the <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType" /> or <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName" /> of the attribute.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> object.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.AttributeType">
      <summary>Gets the common language runtime (CLR) object based on the <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType" /> or <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName" /> of the attribute that holds the post-compilation value of the AttributeType property.</summary>
      <returns>The common runtime library (CLR) object that holds the post-compilation value of the AttributeType property.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.DefaultValue">
      <summary>Gets or sets the default value for the attribute.</summary>
      <returns>The default value for the attribute. The default is a null reference.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.FixedValue">
      <summary>Gets or sets the fixed value for the attribute.</summary>
      <returns>The fixed value for the attribute. The default is null.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Form">
      <summary>Gets or sets the form for the attribute.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm" /> values. The default is the value of the <see cref="P:System.Xml.Schema.XmlSchema.AttributeFormDefault" /> of the schema element containing the attribute.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Name">
      <summary>Gets or sets the name of the attribute.</summary>
      <returns>The name of the attribute.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.QualifiedName">
      <summary>Gets the qualified name for the attribute.</summary>
      <returns>The post-compilation value of the QualifiedName property.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.RefName">
      <summary>Gets or sets the name of an attribute declared in this schema (or another schema indicated by the specified namespace).</summary>
      <returns>The name of the attribute declared.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType">
      <summary>Gets or sets the attribute type to a simple type.</summary>
      <returns>The simple type defined in this schema.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName">
      <summary>Gets or sets the name of the simple type defined in this schema (or another schema indicated by the specified namespace).</summary>
      <returns>The name of the simple type.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Use">
      <summary>Gets or sets information about how the attribute is used.</summary>
      <returns>One of the following values: None, Prohibited, Optional, or Required. The default is Optional.Optional.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttributeGroup">
      <summary>Represents the attributeGroup element from the XML Schema as specified by the World Wide Web Consortium (W3C). AttributesGroups provides a mechanism to group a set of attribute declarations so that they can be incorporated as a group into complex type definitions.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttributeGroup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.AnyAttribute">
      <summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> component of the attribute group.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.Attributes">
      <summary>Gets the collection of attributes for the attribute group. Contains XmlSchemaAttribute and XmlSchemaAttributeGroupRef elements.</summary>
      <returns>The collection of attributes for the attribute group.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.Name">
      <summary>Gets or sets the name of the attribute group.</summary>
      <returns>The name of the attribute group.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.QualifiedName">
      <summary>Gets the qualified name of the attribute group.</summary>
      <returns>An <see cref="T:System.Xml.XmlQualifiedName" /> object representing the qualified name of the attribute group.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.RedefinedAttributeGroup">
      <summary>Gets the redefined attribute group property from the XML Schema.</summary>
      <returns>The redefined attribute group property.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttributeGroupRef">
      <summary>Represents the attributeGroup element with the ref attribute from the XML Schema as specified by the World Wide Web Consortium (W3C). AttributesGroupRef is the reference for an attributeGroup, name property contains the attribute group being referenced. </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttributeGroupRef.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroupRef.RefName">
      <summary>Gets or sets the name of the referenced attributeGroup element.</summary>
      <returns>The name of the referenced attribute group. The value must be a QName.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaChoice">
      <summary>Represents the choice element (compositor) from the XML Schema as specified by the World Wide Web Consortium (W3C). The choice allows only one of its children to appear in an instance. </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaChoice.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaChoice" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaChoice.Items">
      <summary>Gets the collection of the elements contained with the compositor (choice): XmlSchemaElement, XmlSchemaGroupRef, XmlSchemaChoice, XmlSchemaSequence, or XmlSchemaAny.</summary>
      <returns>The collection of elements contained within XmlSchemaChoice.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCollection">
      <summary>Contains a cache of XML Schema definition language (XSD) and XML-Data Reduced (XDR) schemas. The <see cref="T:System.Xml.Schema.XmlSchemaCollection" /> class class is obsolete. Use <see cref="T:System.Xml.Schema.XmlSchemaSet" /> instead.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.#ctor">
      <summary>Initializes a new instance of the XmlSchemaCollection class.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.#ctor(System.Xml.XmlNameTable)">
      <summary>Initializes a new instance of the XmlSchemaCollection class with the specified <see cref="T:System.Xml.XmlNameTable" />. The XmlNameTable is used when loading schemas.</summary>
      <param name="nametable">The XmlNameTable to use. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.String)">
      <summary>Adds the schema located by the given URL into the schema collection.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchema" /> added to the schema collection; null if the schema being added is an XDR schema or if there are compilation errors in the schema. </returns>
      <param name="ns">The namespace URI associated with the schema. For XML Schemas, this will typically be the targetNamespace. </param>
      <param name="uri">The URL that specifies the schema to load. </param>
      <exception cref="T:System.Xml.XmlException">The schema is not a valid schema. </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.Xml.XmlReader)">
      <summary>Adds the schema contained in the <see cref="T:System.Xml.XmlReader" /> to the schema collection.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchema" /> added to the schema collection; null if the schema being added is an XDR schema or if there are compilation errors in the schema.</returns>
      <param name="ns">The namespace URI associated with the schema. For XML Schemas, this will typically be the targetNamespace. </param>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> containing the schema to add. </param>
      <exception cref="T:System.Xml.XmlException">The schema is not a valid schema. </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.Xml.XmlReader,System.Xml.XmlResolver)">
      <summary>Adds the schema contained in the <see cref="T:System.Xml.XmlReader" /> to the schema collection. The specified <see cref="T:System.Xml.XmlResolver" /> is used to resolve any external resources.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchema" /> added to the schema collection; null if the schema being added is an XDR schema or if there are compilation errors in the schema.</returns>
      <param name="ns">The namespace URI associated with the schema. For XML Schemas, this will typically be the targetNamespace. </param>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> containing the schema to add. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve namespaces referenced in include and import elements or x-schema attribute (XDR schemas). If this is null, external references are not resolved. </param>
      <exception cref="T:System.Xml.XmlException">The schema is not a valid schema. </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchema)">
      <summary>Adds the <see cref="T:System.Xml.Schema.XmlSchema" /> to the collection.</summary>
      <returns>The XmlSchema object.</returns>
      <param name="schema">The XmlSchema to add to the collection. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchema,System.Xml.XmlResolver)">
      <summary>Adds the <see cref="T:System.Xml.Schema.XmlSchema" /> to the collection. The specified <see cref="T:System.Xml.XmlResolver" /> is used to resolve any external references.</summary>
      <returns>The XmlSchema added to the schema collection.</returns>
      <param name="schema">The XmlSchema to add to the collection. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve namespaces referenced in include and import elements. If this is null, external references are not resolved. </param>
      <exception cref="T:System.Xml.XmlException">The schema is not a valid schema. </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchemaCollection)">
      <summary>Adds all the namespaces defined in the given collection (including their associated schemas) to this collection.</summary>
      <param name="schema">The XmlSchemaCollection you want to add to this collection. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Contains(System.String)">
      <summary>Gets a value indicating whether a schema with the specified namespace is in the collection.</summary>
      <returns>true if a schema with the specified namespace is in the collection; otherwise, false.</returns>
      <param name="ns">The namespace URI associated with the schema. For XML Schemas, this will typically be the target namespace. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Contains(System.Xml.Schema.XmlSchema)">
      <summary>Gets a value indicating whether the targetNamespace of the specified <see cref="T:System.Xml.Schema.XmlSchema" /> is in the collection.</summary>
      <returns>true if there is a schema in the collection with the same targetNamespace; otherwise, false.</returns>
      <param name="schema">The XmlSchema object. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
      <summary>Copies all the XmlSchema objects from this collection into the given array starting at the given index.</summary>
      <param name="array">The array to copy the objects to. </param>
      <param name="index">The index in <paramref name="array" /> where copying will begin. </param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.Count">
      <summary>Gets the number of namespaces defined in this collection.</summary>
      <returns>The number of namespaces defined in this collection.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.GetEnumerator">
      <summary>Provides support for the "for each" style iteration over the collection of schemas.</summary>
      <returns>An enumerator for iterating over all schemas in the current collection.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.Item(System.String)">
      <summary>Gets the <see cref="T:System.Xml.Schema.XmlSchema" /> associated with the given namespace URI.</summary>
      <returns>The XmlSchema associated with the namespace URI; null if there is no loaded schema associated with the given namespace or if the namespace is associated with an XDR schema.</returns>
      <param name="ns">The namespace URI associated with the schema you want to return. This will typically be the targetNamespace of the schema. </param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.NameTable">
      <summary>Gets the default XmlNameTable used by the XmlSchemaCollection when loading new schemas.</summary>
      <returns>An XmlNameTable.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Xml.Schema.XmlSchemaCollection.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)" />.</summary>
      <param name="array">The array to copy the objects to. </param>
      <param name="index">The index in <paramref name="array" /> where copying will begin. </param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#Count">
      <summary>For a description of this member, see <see cref="P:System.Xml.Schema.XmlSchemaCollection.Count" />.</summary>
      <returns>Returns the count of the items in the collection.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#IsSynchronized">
      <summary>For a description of this member, see <see cref="P:System.Xml.Schema.XmlSchemaCollection.System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>Returns true if the collection is synchronized, otherwise false.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#SyncRoot">
      <summary>For a description of this member, see <see cref="P:System.Xml.Schema.XmlSchemaCollection.System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>Returns a <see cref="T:System.Collections.ICollection.SyncRoot" /> object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Xml.Schema.XmlSchemaCollection.GetEnumerator" />.</summary>
      <returns>Returns the <see cref="T:System.Collections.IEnumerator" /> for the collection.</returns>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaCollection.ValidationEventHandler">
      <summary>Sets an event handler for receiving information about the XDR and XML schema validation errors.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCollectionEnumerator">
      <summary>Supports a simple iteration over a collection. This class cannot be inherited. </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.Current">
      <summary>Gets the current <see cref="T:System.Xml.Schema.XmlSchema" /> in the collection.</summary>
      <returns>The current XmlSchema in the collection.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.MoveNext">
      <summary>Advances the enumerator to the next schema in the collection.</summary>
      <returns>true if the move was successful; false if the enumerator has passed the end of the collection.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Current">
      <summary>For a description of this member, see <see cref="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.Current" />.</summary>
      <returns>Returns the current node.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#MoveNext">
      <summary>For a description of this member, see <see cref="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.MoveNext" />.</summary>
      <returns>Returns the next node.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Reset">
      <summary>For a description of this member, see <see cref="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System.Collections.IEnumerator.Reset" />.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCompilationSettings">
      <summary>Provides schema compilation options for the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> class This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCompilationSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> class. </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck">
      <summary>Gets or sets a value indicating whether the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> should check for Unique Particle Attribution (UPA) violations.</summary>
      <returns>true if the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> should check for Unique Particle Attribution (UPA) violations; otherwise, false. The default is true.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContent">
      <summary>Represents the complexContent element from XML Schema as specified by the World Wide Web Consortium (W3C). This class represents the complex content model for complex types. It contains extensions or restrictions on a complex type that has either only elements or mixed content.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContent.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaComplexContent" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContent.Content">
      <summary>Gets or sets the content.</summary>
      <returns>One of either the <see cref="T:System.Xml.Schema.XmlSchemaComplexContentRestriction" /> or <see cref="T:System.Xml.Schema.XmlSchemaComplexContentExtension" /> classes.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContent.IsMixed">
      <summary>Gets or sets information that determines if the type has a mixed content model.</summary>
      <returns>If this property is true, character data is allowed to appear between the child elements of the complex type (mixed content model). The default is false.Optional.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContentExtension">
      <summary>Represents the extension element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is for complex types with complex content model derived by extension. It extends the complex type by adding attributes or elements.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContentExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaComplexContentExtension" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.AnyAttribute">
      <summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> component of the complex content model.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> component of the complex content model.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.Attributes">
      <summary>Gets the collection of attributes for the complex content. Contains <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> and <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> elements.</summary>
      <returns>The collection of attributes for the complex content.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.BaseTypeName">
      <summary>Gets or sets the name of the complex type from which this type is derived by extension.</summary>
      <returns>The name of the complex type from which this type is derived by extension.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.Particle">
      <summary>Gets or sets one of the <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />, or <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> classes.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />, or <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> classes.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContentRestriction">
      <summary>Represents the restriction element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is for complex types with a complex content model derived by restriction. It restricts the contents of the complex type to a subset of the inherited complex type.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContentRestriction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaComplexContentRestriction" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.AnyAttribute">
      <summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> component of the complex content model.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> component of the complex content model.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.Attributes">
      <summary>Gets the collection of attributes for the complex type. Contains the <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> and <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> elements.</summary>
      <returns>The collection of attributes for the complex type.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.BaseTypeName">
      <summary>Gets or sets the name of a complex type from which this type is derived by restriction.</summary>
      <returns>The name of the complex type from which this type is derived by restriction.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.Particle">
      <summary>Gets or sets one of the <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />, or <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> classes.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />, or <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> classes.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexType">
      <summary>Represents the complexType element from XML Schema as specified by the World Wide Web Consortium (W3C). This class defines a complex type that determines the set of attributes and content of an element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexType.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AnyAttribute">
      <summary>Gets or sets the value for the <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> component of the complex type.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> component of the complex type.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Attributes">
      <summary>Gets the collection of attributes for the complex type.</summary>
      <returns>Contains <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> and <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> classes.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AttributeUses">
      <summary>Gets the collection of all the complied attributes of this complex type and its base types.</summary>
      <returns>The collection of all the attributes from this complex type and its base types. The post-compilation value of the AttributeUses property.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AttributeWildcard">
      <summary>Gets the post-compilation value for anyAttribute for this complex type and its base type(s).</summary>
      <returns>The post-compilation value of the anyAttribute element.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Block">
      <summary>Gets or sets the block attribute.</summary>
      <returns>The block attribute prevents a complex type from being used in the specified type of derivation. The default is XmlSchemaDerivationMethod.None.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.BlockResolved">
      <summary>Gets the value after the type has been compiled to the post-schema-validation information set (infoset). This value indicates how the type is enforced when xsi:type is used in the instance document.</summary>
      <returns>The post-schema-validated infoset value. The default is BlockDefault value on the schema element.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentModel">
      <summary>Gets or sets the post-compilation <see cref="T:System.Xml.Schema.XmlSchemaContentModel" /> of this complex type.</summary>
      <returns>The content model type that is one of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleContent" /> or <see cref="T:System.Xml.Schema.XmlSchemaComplexContent" /> classes.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentType">
      <summary>Gets the content model of the complex type which holds the post-compilation value.</summary>
      <returns>The post-compilation value of the content model for the complex type.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentTypeParticle">
      <summary>Gets the particle that holds the post-compilation value of the <see cref="P:System.Xml.Schema.XmlSchemaComplexType.ContentType" /> particle.</summary>
      <returns>The particle for the content type. The post-compilation value of the <see cref="P:System.Xml.Schema.XmlSchemaComplexType.ContentType" /> particle.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.IsAbstract">
      <summary>Gets or sets the information that determines if the complexType element can be used in the instance document.</summary>
      <returns>If true, an element cannot use this complexType element directly and must use a complex type that is derived from this complexType element. The default is false.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.IsMixed">
      <summary>Gets or sets information that determines if the complex type has a mixed content model (markup within the content).</summary>
      <returns>true, if character data can appear between child elements of this complex type; otherwise, false. The default is false.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Particle">
      <summary>Gets or sets the compositor type as one of the <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />, or <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> classes.</summary>
      <returns>The compositor type.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContent">
      <summary>An abstract class for schema content.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaContent.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaContent" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentModel">
      <summary>Specifies the order and structure of the child elements of a type.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaContentModel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaContentModel" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaContentModel.Content">
      <summary>Gets or sets the content of the type.</summary>
      <returns>Provides the content of the type.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentProcessing">
      <summary>Provides information about the validation mode of any and anyAttribute element replacements.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.None">
      <summary>Document items are not validated.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Skip">
      <summary>Document items must consist of well-formed XML and are not validated by the schema.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Lax">
      <summary>If the associated schema is found, the document items will be validated. No errors will be thrown otherwise.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Strict">
      <summary>The schema processor must find a schema associated with the indicated namespace to validate the document items.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentType">
      <summary>Enumerations for the content model of the complex type. This represents the content in the post-schema-validation information set (infoset).</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.TextOnly">
      <summary>Text-only content.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.Empty">
      <summary>Empty content.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.ElementOnly">
      <summary>Element-only content.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.Mixed">
      <summary>Mixed content.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDatatype">
      <summary>The <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> class is an abstract class for mapping XML Schema definition language (XSD) types to Common Language Runtime (CLR) types.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> class.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ChangeType(System.Object,System.Type)">
      <summary>Converts the value specified, whose type is one of the valid Common Language Runtime (CLR) representations of the XML schema type represented by the <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />, to the CLR type specified.</summary>
      <returns>The converted input value.</returns>
      <param name="value">The input value to convert to the specified type.</param>
      <param name="targetType">The target type to convert the input value to.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Object" /> or <see cref="T:System.Type" /> parameter is null.</exception>
      <exception cref="T:System.InvalidCastException">The type represented by the <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />   does not support a conversion from type of the value specified to the type specified.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ChangeType(System.Object,System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>Converts the value specified, whose type is one of the valid Common Language Runtime (CLR) representations of the XML schema type represented by the <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />, to the CLR type specified using the <see cref="T:System.Xml.IXmlNamespaceResolver" /> if the <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> represents the xs:QName type or a type derived from it.</summary>
      <returns>The converted input value.</returns>
      <param name="value">The input value to convert to the specified type.</param>
      <param name="targetType">The target type to convert the input value to.</param>
      <param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver" /> used for resolving namespace prefixes. This is only of use if the <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />  represents the xs:QName type or a type derived from it.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Object" /> or <see cref="T:System.Type" /> parameter is null.</exception>
      <exception cref="T:System.InvalidCastException">The type represented by the <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />   does not support a conversion from type of the value specified to the type specified.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)">
      <summary>The <see cref="M:System.Xml.Schema.XmlSchemaDatatype.IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)" /> method always returns false.</summary>
      <returns>Always returns false.</returns>
      <param name="datatype">The <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ParseValue(System.String,System.Xml.XmlNameTable,System.Xml.IXmlNamespaceResolver)">
      <summary>When overridden in a derived class, validates the string specified against a built-in or user-defined simple type.</summary>
      <returns>An <see cref="T:System.Object" /> that can be cast safely to the type returned by the <see cref="P:System.Xml.Schema.XmlSchemaDatatype.ValueType" /> property.</returns>
      <param name="s">The string to validate against the simple type.</param>
      <param name="nameTable">The <see cref="T:System.Xml.XmlNameTable" /> to use for atomization while parsing the string if this <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> object represents the xs:NCName type. </param>
      <param name="nsmgr">The <see cref="T:System.Xml.IXmlNamespaceResolver" /> object to use while parsing the string if this <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> object represents the xs:QName type.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The input value is not a valid instance of this W3C XML Schema type.</exception>
      <exception cref="T:System.ArgumentNullException">The value to parse cannot be null.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.TokenizedType">
      <summary>When overridden in a derived class, gets the type for the string as specified in the World Wide Web Consortium (W3C) XML 1.0 specification.</summary>
      <returns>An <see cref="T:System.Xml.XmlTokenizedType" /> value for the string.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.TypeCode">
      <summary>Gets the <see cref="T:System.Xml.Schema.XmlTypeCode" /> value for the simple type.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlTypeCode" /> value for the simple type.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.ValueType">
      <summary>When overridden in a derived class, gets the Common Language Runtime (CLR) type of the item.</summary>
      <returns>The Common Language Runtime (CLR) type of the item.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.Variety">
      <summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaDatatypeVariety" /> value for the simple type.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaDatatypeVariety" /> value for the simple type.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDatatypeVariety">
      <summary>Specifies the W3C XML schema data type variety of the type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.Atomic">
      <summary>A W3C XML schema atomic type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.List">
      <summary>A W3C XML schema list type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.Union">
      <summary>A W3C XML schema union type.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDerivationMethod">
      <summary>Provides different methods for preventing derivation.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Empty">
      <summary>Override default derivation method to allow any derivation.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Substitution">
      <summary>Refers to derivations by Substitution.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Extension">
      <summary>Refers to derivations by Extension.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Restriction">
      <summary>Refers to derivations by Restriction.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.List">
      <summary>Refers to derivations by List.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Union">
      <summary>Refers to derivations by Union.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.All">
      <summary>#all. Refers to all derivation methods.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.None">
      <summary>Accepts the default derivation method.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDocumentation">
      <summary>Represents the documentation element from XML Schema as specified by the World Wide Web Consortium (W3C). This class specifies information to be read or used by humans within an annotation.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDocumentation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaDocumentation" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Language">
      <summary>Gets or sets the xml:lang attribute. This serves as an indicator of the language used in the contents.</summary>
      <returns>The xml:lang attribute.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Markup">
      <summary>Gets or sets an array of XmlNodes that represents the documentation child nodes.</summary>
      <returns>The array that represents the documentation child nodes.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Source">
      <summary>Gets or sets the Uniform Resource Identifier (URI) source of the information.</summary>
      <returns>A URI reference. The default is String.Empty.Optional.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaElement">
      <summary>Represents the element element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is the base class for all particle types and is used to describe an element in an XML document.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaElement" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Block">
      <summary>Gets or sets a Block derivation.</summary>
      <returns>The attribute used to block a type derivation. Default value is XmlSchemaDerivationMethod.None.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.BlockResolved">
      <summary>Gets the post-compilation value of the Block property.</summary>
      <returns>The post-compilation value of the Block property. The default is the BlockDefault value on the schema element.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Constraints">
      <summary>Gets the collection of constraints on the element.</summary>
      <returns>The collection of constraints.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.DefaultValue">
      <summary>Gets or sets the default value of the element if its content is a simple type or content of the element is textOnly.</summary>
      <returns>The default value for the element. The default is a null reference.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.ElementSchemaType">
      <summary>Gets an <see cref="T:System.Xml.Schema.XmlSchemaType" /> object representing the type of the element based on the <see cref="P:System.Xml.Schema.XmlSchemaElement.SchemaType" /> or <see cref="P:System.Xml.Schema.XmlSchemaElement.SchemaTypeName" /> values of the element.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaType" /> object.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.ElementType">
      <summary>Gets a common language runtime (CLR) object based on the <see cref="T:System.Xml.Schema.XmlSchemaElement" /> or <see cref="T:System.Xml.Schema.XmlSchemaElement" /> of the element, which holds the post-compilation value of the ElementType property.</summary>
      <returns>The common language runtime object. The post-compilation value of the ElementType property.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Final">
      <summary>Gets or sets the Final property to indicate that no further derivations are allowed.</summary>
      <returns>The Final property. The default is XmlSchemaDerivationMethod.None.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.FinalResolved">
      <summary>Gets the post-compilation value of the Final property.</summary>
      <returns>The post-compilation value of the Final property. Default value is the FinalDefault value on the schema element.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.FixedValue">
      <summary>Gets or sets the fixed value.</summary>
      <returns>The fixed value that is predetermined and unchangeable. The default is a null reference.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Form">
      <summary>Gets or sets the form for the element.</summary>
      <returns>The form for the element. The default is the <see cref="P:System.Xml.Schema.XmlSchema.ElementFormDefault" /> value.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.IsAbstract">
      <summary>Gets or sets information to indicate if the element can be used in an instance document.</summary>
      <returns>If true, the element cannot appear in the instance document. The default is false.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.IsNillable">
      <summary>Gets or sets information that indicates if xsi:nil can occur in the instance data. Indicates if an explicit nil value can be assigned to the element.</summary>
      <returns>If nillable is true, this enables an instance of the element to have the nil attribute set to true. The nil attribute is defined as part of the XML Schema namespace for instances. The default is false.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Name">
      <summary>Gets or sets the name of the element.</summary>
      <returns>The name of the element. The default is String.Empty.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.QualifiedName">
      <summary>Gets the actual qualified name for the given element. </summary>
      <returns>The qualified name of the element. The post-compilation value of the QualifiedName property.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.RefName">
      <summary>Gets or sets the reference name of an element declared in this schema (or another schema indicated by the specified namespace).</summary>
      <returns>The reference name of the element.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SchemaType">
      <summary>Gets or sets the type of the element. This can either be a complex type or a simple type.</summary>
      <returns>The type of the element.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SchemaTypeName">
      <summary>Gets or sets the name of a built-in data type defined in this schema or another schema indicated by the specified namespace.</summary>
      <returns>The name of the built-in data type.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SubstitutionGroup">
      <summary>Gets or sets the name of an element that is being substituted by this element.</summary>
      <returns>The qualified name of an element that is being substituted by this element.Optional.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaEnumerationFacet">
      <summary>Represents the enumeration facet from XML Schema as specified by the World Wide Web Consortium (W3C). This class specifies a list of valid values for a simpleType element. Declaration is contained within a restriction declaration.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaEnumerationFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaException">
      <summary>Returns detailed information about the schema exception.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaException" /> class.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Constructs a new XmlSchemaException object with the given SerializationInfo and StreamingContext information that contains all the properties of the XmlSchemaException.</summary>
      <param name="info">SerializationInfo.</param>
      <param name="context">StreamingContext.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaException" /> class with the exception message specified.</summary>
      <param name="message">A string description of the error condition.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaException" /> class with the exception message and original <see cref="T:System.Exception" /> object that caused this exception specified.</summary>
      <param name="message">A string description of the error condition.</param>
      <param name="innerException">The original <see cref="T:System.Exception" /> object that caused this exception.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaException" /> class with the exception message specified, and the original <see cref="T:System.Exception" /> object, line number, and line position of the XML that cause this exception specified.</summary>
      <param name="message">A string description of the error condition.</param>
      <param name="innerException">The original <see cref="T:System.Exception" /> object that caused this exception.</param>
      <param name="lineNumber">The line number of the XML that caused this exception.</param>
      <param name="linePosition">The line position of the XML that caused this exception.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Streams all the XmlSchemaException properties into the SerializationInfo class for the given StreamingContext.</summary>
      <param name="info">The SerializationInfo. </param>
      <param name="context">The StreamingContext information. </param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.LineNumber">
      <summary>Gets the line number indicating where the error occurred.</summary>
      <returns>The line number indicating where the error occurred.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.LinePosition">
      <summary>Gets the line position indicating where the error occurred.</summary>
      <returns>The line position indicating where the error occurred.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.Message">
      <summary>Gets the description of the error condition of this exception.</summary>
      <returns>The description of the error condition of this exception.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.SourceSchemaObject">
      <summary>The XmlSchemaObject that produced the XmlSchemaException.</summary>
      <returns>A valid object instance represents a structural validation error in the XML Schema Object Model (SOM).</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.SourceUri">
      <summary>Gets the Uniform Resource Identifier (URI) location of the schema that caused the exception.</summary>
      <returns>The URI location of the schema that caused the exception.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaExternal">
      <summary>An abstract class. Provides information about the included schema.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaExternal.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaExternal" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.Id">
      <summary>Gets or sets the string id.</summary>
      <returns>The string id. The default is String.Empty.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.Schema">
      <summary>Gets or sets the XmlSchema for the referenced schema.</summary>
      <returns>The XmlSchema for the referenced schema.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.SchemaLocation">
      <summary>Gets or sets the Uniform Resource Identifier (URI) location for the schema, which tells the schema processor where the schema physically resides.</summary>
      <returns>The URI location for the schema.Optional for imported schemas.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.UnhandledAttributes">
      <summary>Gets and sets the qualified attributes, which do not belong to the schema target namespace.</summary>
      <returns>Qualified attributes that belong to another target namespace.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaFacet">
      <summary>Abstract class for all facets that are used when simple types are derived by restriction.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaFacet" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaFacet.IsFixed">
      <summary>Gets or sets information that indicates that this facet is fixed.</summary>
      <returns>If true, value is fixed; otherwise, false. The default is false.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaFacet.Value">
      <summary>Gets or sets the value attribute of the facet.</summary>
      <returns>The value attribute.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaForm">
      <summary>Indicates if attributes or elements need to be qualified with a namespace prefix.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.None">
      <summary>Element and attribute form is not specified in the schema.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Qualified">
      <summary>Elements and attributes must be qualified with a namespace prefix.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Unqualified">
      <summary>Elements and attributes are not required to be qualified with a namespace prefix.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet">
      <summary>Specifies a restriction on the number of digits that can be entered for the fraction value of a simpleType element. The value of fractionDigits must be a positive integer. Represents the World Wide Web Consortium (W3C) fractionDigits facet.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaFractionDigitsFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroup">
      <summary>Represents the group element from XML Schema as specified by the World Wide Web Consortium (W3C). This class defines groups at the schema level that are referenced from the complex types. It groups a set of element declarations so that they can be incorporated as a group into complex type definitions.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaGroup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaGroup" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.Name">
      <summary>Gets or sets the name of the schema group.</summary>
      <returns>The name of the schema group.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.Particle">
      <summary>Gets or sets one of the <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />, or <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> classes.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />, or <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> classes.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.QualifiedName">
      <summary>Gets the qualified name of the schema group.</summary>
      <returns>An <see cref="T:System.Xml.XmlQualifiedName" /> object representing the qualified name of the schema group.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroupBase">
      <summary>An abstract class for <see cref="T:System.Xml.Schema.XmlSchemaAll" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, or <see cref="T:System.Xml.Schema.XmlSchemaSequence" />.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaGroupBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaGroupBase" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupBase.Items">
      <summary>This collection is used to add new elements to the compositor.</summary>
      <returns>An XmlSchemaObjectCollection.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroupRef">
      <summary>Represents the group element with ref attribute from the XML Schema as specified by the World Wide Web Consortium (W3C). This class is used within complex types that reference a group defined at the schema level.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaGroupRef.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupRef.Particle">
      <summary>Gets one of the <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />, or <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> classes, which holds the post-compilation value of the Particle property.</summary>
      <returns>The post-compilation value of the Particle property, which is one of the <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />, or <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> classes.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupRef.RefName">
      <summary>Gets or sets the name of a group defined in this schema (or another schema indicated by the specified namespace).</summary>
      <returns>The name of a group defined in this schema.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaIdentityConstraint">
      <summary>Class for the identity constraints: key, keyref, and unique elements.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaIdentityConstraint.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaIdentityConstraint" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Fields">
      <summary>Gets the collection of fields that apply as children for the XML Path Language (XPath) expression selector.</summary>
      <returns>The collection of fields.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Name">
      <summary>Gets or sets the name of the identity constraint.</summary>
      <returns>The name of the identity constraint.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.QualifiedName">
      <summary>Gets the qualified name of the identity constraint, which holds the post-compilation value of the QualifiedName property.</summary>
      <returns>The post-compilation value of the QualifiedName property.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Selector">
      <summary>Gets or sets the XPath expression selector element.</summary>
      <returns>The XPath expression selector element.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaImport">
      <summary>Represents the import element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is used to import schema components from other schemas.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaImport.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaImport" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaImport.Annotation">
      <summary>Gets or sets the annotation property.</summary>
      <returns>The annotation.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaImport.Namespace">
      <summary>Gets or sets the target namespace for the imported schema as a Uniform Resource Identifier (URI) reference.</summary>
      <returns>The target namespace for the imported schema as a URI reference.Optional.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInclude">
      <summary>Represents the include element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is used to include declarations and definitions from an external schema. The included declarations and definitions are then available for processing in the containing schema.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInclude.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaInclude" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInclude.Annotation">
      <summary>Gets or sets the annotation property.</summary>
      <returns>The annotation.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInference">
      <summary>Infers an XML Schema Definition Language (XSD) schema from an XML document. The <see cref="T:System.Xml.Schema.XmlSchemaInference" /> class cannot be inherited.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaInference" /> class.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader)">
      <summary>Infers an XML Schema Definition Language (XSD) schema from the XML document contained in the <see cref="T:System.Xml.XmlReader" /> object specified.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> object containing the inferred schemas.</returns>
      <param name="instanceDocument">An <see cref="T:System.Xml.XmlReader" /> object containing the XML document to infer a schema from.</param>
      <exception cref="T:System.Xml.XmlException">The XML document is not well-formed.</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaInferenceException">The <see cref="T:System.Xml.XmlReader" /> object is not positioned on the root node or on an element. An error occurs during the schema inference process.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader,System.Xml.Schema.XmlSchemaSet)">
      <summary>Infers an XML Schema Definition Language (XSD) schema from the XML document contained in the <see cref="T:System.Xml.XmlReader" /> object specified, and refines the inferred schema using an existing schema in the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> object specified with the same target namespace.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> object containing the inferred schemas.</returns>
      <param name="instanceDocument">An <see cref="T:System.Xml.XmlReader" /> object containing the XML document to infer a schema from.</param>
      <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> object containing an existing schema used to refine the inferred schema.</param>
      <exception cref="T:System.Xml.XmlException">The XML document is not well-formed.</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaInferenceException">The <see cref="T:System.Xml.XmlReader" /> object is not positioned on the root node or on an element. An error occurs during the schema inference process.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInference.Occurrence">
      <summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> value that affects schema occurrence declarations inferred from the XML document.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> object.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInference.TypeInference">
      <summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> value that affects types inferred from the XML document.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> object.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInference.InferenceOption">
      <summary>Affects occurrence and type information inferred by the <see cref="T:System.Xml.Schema.XmlSchemaInference" /> class for elements and attributes in an XML document. </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted">
      <summary>Indicates that a more restrictive schema declaration should be inferred for a particular element or attribute.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed">
      <summary>Indicates that a less restrictive schema declaration should be inferred for a particular element or attribute.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInferenceException">
      <summary>Returns information about errors encountered by the <see cref="T:System.Xml.Schema.XmlSchemaInference" /> class while inferring a schema from an XML document.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> class.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> class with the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> objects specified that contain all the properties of the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> class with the error message specified.</summary>
      <param name="message">A description of the error.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> class with the error message specified and the original <see cref="T:System.Exception" /> that caused the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> specified.</summary>
      <param name="message">A description of the error.</param>
      <param name="innerException">An <see cref="T:System.Exception" /> object containing the original exception that caused the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> class with the error message specified, the original <see cref="T:System.Exception" /> that caused the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> specified, and the line number and line position of the error in the XML document specified.</summary>
      <param name="message">A description of the error.</param>
      <param name="innerException">An <see cref="T:System.Exception" /> object containing the original exception that caused the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />.</param>
      <param name="lineNumber">The line number in the XML document that caused the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />.</param>
      <param name="linePosition">The line position in the XML document that caused the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Streams all the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> object properties into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object specified for the <see cref="T:System.Runtime.Serialization.StreamingContext" /> object specified.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object.</param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInfo">
      <summary>Represents the post-schema-validation infoset of a validated XML node.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.ContentType">
      <summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaContentType" /> object that corresponds to the content type of this validated XML node.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaContentType" /> object.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.IsDefault">
      <summary>Gets or sets a value indicating if this validated XML node was set as the result of a default being applied during XML Schema Definition Language (XSD) schema validation.</summary>
      <returns>A bool value.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.IsNil">
      <summary>Gets or sets a value indicating if the value for this validated XML node is nil.</summary>
      <returns>A bool value.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.MemberType">
      <summary>Gets or sets the dynamic schema type for this validated XML node.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> object.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute">
      <summary>Gets or sets the compiled <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> object that corresponds to this validated XML node.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> object.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaElement">
      <summary>Gets or sets the compiled <see cref="T:System.Xml.Schema.XmlSchemaElement" /> object that corresponds to this validated XML node.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaElement" /> object.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaType">
      <summary>Gets or sets the static XML Schema Definition Language (XSD) schema type of this validated XML node.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaType" /> object.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.Validity">
      <summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> value of this validated XML node.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> value.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaKey">
      <summary>This class represents the key element from XMLSchema as specified by the World Wide Web Consortium (W3C).</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaKey.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaKey" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaKeyref">
      <summary>This class represents the keyref element from XMLSchema as specified by the World Wide Web Consortium (W3C).</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaKeyref.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaKeyref" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaKeyref.Refer">
      <summary>Gets or sets the name of the key that this constraint refers to in another simple or complex type.</summary>
      <returns>The QName of the key that this constraint refers to.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaLengthFacet">
      <summary>Represents the length facet from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the length of a simpleType element on the data type.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaLengthFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet">
      <summary>Represents the maxExclusive element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the maximum value of a simpleType element. The element value must be less than the value of the maxExclusive element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxExclusiveFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet">
      <summary>Represents the maxInclusive element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the maximum value of a simpleType element. The element value must be less than or equal to the value of the maxInclusive element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxInclusiveFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxLengthFacet">
      <summary>Represents the maxLength element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the maximum length of the data value of a simpleType element. The length must be less than the value of the maxLength element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxLengthFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet">
      <summary>Represents the minExclusive element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the minimum value of a simpleType element. The element value must be greater than the value of the minExclusive element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinExclusiveFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet">
      <summary>Represents the minInclusive element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the minimum value of a simpleType element. The element value must be greater than or equal to the value of the minInclusive element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinInclusiveFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinLengthFacet">
      <summary>Represents the minLength element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the minimum length of the data value of a simpleType element. The length must be greater than the value of the minLength element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinLengthFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaNotation">
      <summary>Represents the notation element from XML Schema as specified by the World Wide Web Consortium (W3C). An XML Schema notation declaration is a reconstruction of XML 1.0 NOTATION declarations. The purpose of notations is to describe the format of non-XML data within an XML document.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaNotation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaNotation" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.Name">
      <summary>Gets or sets the name of the notation.</summary>
      <returns>The name of the notation.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.Public">
      <summary>Gets or sets the public identifier.</summary>
      <returns>The public identifier. The value must be a valid Uniform Resource Identifier (URI).</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.System">
      <summary>Gets or sets the system identifier.</summary>
      <returns>The system identifier. The value must be a valid URI.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaNumericFacet">
      <summary>Abstract class for defining numeric facets. This class is the base class for numeric facet classes such as <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" /></summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaNumericFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaNumericFacet" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObject">
      <summary>Represents the root class for the Xml schema object model hierarchy and serves as a base class for classes such as the <see cref="T:System.Xml.Schema.XmlSchema" /> class.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaObject" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.LineNumber">
      <summary>Gets or sets the line number in the file to which the schema element refers.</summary>
      <returns>The line number.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.LinePosition">
      <summary>Gets or sets the line position in the file to which the schema element refers.</summary>
      <returns>The line position.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.Namespaces">
      <summary>Gets or sets the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> to use with this schema object.</summary>
      <returns>The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> property for the schema object.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.Parent">
      <summary>Gets or sets the parent of this <see cref="T:System.Xml.Schema.XmlSchemaObject" />.</summary>
      <returns>The parent <see cref="T:System.Xml.Schema.XmlSchemaObject" /> of this <see cref="T:System.Xml.Schema.XmlSchemaObject" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.SourceUri">
      <summary>Gets or sets the source location for the file that loaded the schema.</summary>
      <returns>The source location (URI) for the file.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectCollection">
      <summary>A collection of <see cref="T:System.Xml.Schema.XmlSchemaObject" />s.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.#ctor">
      <summary>Initializes a new instance of the XmlSchemaObjectCollection class.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.#ctor(System.Xml.Schema.XmlSchemaObject)">
      <summary>Initializes a new instance of the XmlSchemaObjectCollection class that takes an <see cref="T:System.Xml.Schema.XmlSchemaObject" />.</summary>
      <param name="parent">The <see cref="T:System.Xml.Schema.XmlSchemaObject" />. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Add(System.Xml.Schema.XmlSchemaObject)">
      <summary>Adds an <see cref="T:System.Xml.Schema.XmlSchemaObject" /> to the XmlSchemaObjectCollection.</summary>
      <returns>The index at which the item has been added.</returns>
      <param name="item">The <see cref="T:System.Xml.Schema.XmlSchemaObject" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or- <paramref name="index" /> is greater than Count. </exception>
      <exception cref="T:System.InvalidCastException">The <see cref="T:System.Xml.Schema.XmlSchemaObject" /> parameter specified is not of type <see cref="T:System.Xml.Schema.XmlSchemaExternal" /> or its derived types <see cref="T:System.Xml.Schema.XmlSchemaImport" />, <see cref="T:System.Xml.Schema.XmlSchemaInclude" />, and <see cref="T:System.Xml.Schema.XmlSchemaRedefine" />.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Contains(System.Xml.Schema.XmlSchemaObject)">
      <summary>Indicates if the specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> is in the XmlSchemaObjectCollection.</summary>
      <returns>true if the specified qualified name is in the collection; otherwise, returns false. If null is supplied, false is returned because there is no qualified name with a null name.</returns>
      <param name="item">The <see cref="T:System.Xml.Schema.XmlSchemaObject" />. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.CopyTo(System.Xml.Schema.XmlSchemaObject[],System.Int32)">
      <summary>Copies all the <see cref="T:System.Xml.Schema.XmlSchemaObject" />s from the collection into the given array, starting at the given index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the XmlSchemaObjectCollection. The array must have zero-based indexing. </param>
      <param name="index">The zero-based index in the array at which copying begins. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is a null reference (Nothing in Visual Basic). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multi-dimensional.- or - <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.- or - The number of elements in the source <see cref="T:System.Xml.Schema.XmlSchemaObject" /> is greater than the available space from index to the end of the destination array. </exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Xml.Schema.XmlSchemaObject" /> cannot be cast automatically to the type of the destination array. </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.GetEnumerator">
      <summary>Returns an enumerator for iterating through the XmlSchemaObjects contained in the XmlSchemaObjectCollection.</summary>
      <returns>The iterator returns <see cref="T:System.Xml.Schema.XmlSchemaObjectEnumerator" />.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.IndexOf(System.Xml.Schema.XmlSchemaObject)">
      <summary>Gets the collection index corresponding to the specified <see cref="T:System.Xml.Schema.XmlSchemaObject" />.</summary>
      <returns>The index corresponding to the specified <see cref="T:System.Xml.Schema.XmlSchemaObject" />.</returns>
      <param name="item">The <see cref="T:System.Xml.Schema.XmlSchemaObject" /> whose index you want to return. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Insert(System.Int32,System.Xml.Schema.XmlSchemaObject)">
      <summary>Inserts an <see cref="T:System.Xml.Schema.XmlSchemaObject" /> to the XmlSchemaObjectCollection.</summary>
      <param name="index">The zero-based index at which an item should be inserted. </param>
      <param name="item">The <see cref="T:System.Xml.Schema.XmlSchemaObject" /> to insert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or- <paramref name="index" /> is greater than Count. </exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectCollection.Item(System.Int32)">
      <summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaObject" /> at the specified index.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaObject" /> at the specified index.</returns>
      <param name="index">The index of the <see cref="T:System.Xml.Schema.XmlSchemaObject" />. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnClear">
      <summary>OnClear is invoked before the standard Clear behavior. For more information, see OnClear method for <see cref="T:System.Collections.CollectionBase" />.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnInsert(System.Int32,System.Object)">
      <summary>OnInsert is invoked before the standard Insert behavior. For more information, see OnInsert method <see cref="T:System.Collections.CollectionBase" />.</summary>
      <param name="index">The index of <see cref="T:System.Xml.Schema.XmlSchemaObject" />. </param>
      <param name="item">The item. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnRemove(System.Int32,System.Object)">
      <summary>OnRemove is invoked before the standard Remove behavior. For more information, see the OnRemove method for <see cref="T:System.Collections.CollectionBase" />.</summary>
      <param name="index">The index of <see cref="T:System.Xml.Schema.XmlSchemaObject" />. </param>
      <param name="item">The item. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>OnSet is invoked before the standard Set behavior. For more information, see the OnSet method for <see cref="T:System.Collections.CollectionBase" />.</summary>
      <param name="index">The index of <see cref="T:System.Xml.Schema.XmlSchemaObject" />. </param>
      <param name="oldValue">The old value. </param>
      <param name="newValue">The new value. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Remove(System.Xml.Schema.XmlSchemaObject)">
      <summary>Removes an <see cref="T:System.Xml.Schema.XmlSchemaObject" /> from the XmlSchemaObjectCollection.</summary>
      <param name="item">The <see cref="T:System.Xml.Schema.XmlSchemaObject" /> to remove. </param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectEnumerator">
      <summary>Represents the enumerator for the <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectEnumerator.Current">
      <summary>Gets the current <see cref="T:System.Xml.Schema.XmlSchemaObject" /> in the collection.</summary>
      <returns>The current <see cref="T:System.Xml.Schema.XmlSchemaObject" />.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.MoveNext">
      <summary>Moves to the next item in the collection.</summary>
      <returns>false at the end of the collection.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.Reset">
      <summary>Resets the enumerator to the start of the collection.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary>For a description of this member, see <see cref="P:System.Xml.Schema.XmlSchemaObjectEnumerator.Current" />.</summary>
      <returns>The current <see cref="T:System.Xml.Schema.XmlSchemaObject" />.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#MoveNext">
      <summary>For a description of this member, see <see cref="M:System.Xml.Schema.XmlSchemaObjectEnumerator.MoveNext" />.</summary>
      <returns>The next <see cref="T:System.Xml.Schema.XmlSchemaObject" />.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#Reset">
      <summary>For a description of this member, see <see cref="M:System.Xml.Schema.XmlSchemaObjectEnumerator.Reset" />.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectTable">
      <summary>Provides the collections for contained elements in the <see cref="T:System.Xml.Schema.XmlSchema" /> class (for example, Attributes, AttributeGroups, Elements, and so on).</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectTable.Contains(System.Xml.XmlQualifiedName)">
      <summary>Determines if the qualified name specified exists in the collection.</summary>
      <returns>true if the qualified name specified exists in the collection; otherwise, false.</returns>
      <param name="name">The <see cref="T:System.Xml.XmlQualifiedName" />.</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Count">
      <summary>Gets the number of items contained in the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />.</summary>
      <returns>The number of items contained in the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectTable.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />.</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator" /> that can iterate through <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Item(System.Xml.XmlQualifiedName)">
      <summary>Returns the element in the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> specified by qualified name.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaObject" /> of the element in the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> specified by qualified name.</returns>
      <param name="name">The <see cref="T:System.Xml.XmlQualifiedName" /> of the element to return.</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Names">
      <summary>Returns a collection of all the named elements in the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />.</summary>
      <returns>A collection of all the named elements in the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Values">
      <summary>Returns a collection of all the values for all the elements in the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />.</summary>
      <returns>A collection of all the values for all the elements in the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaParticle">
      <summary>Abstract class for that is the base class for all particle types (e.g. <see cref="T:System.Xml.Schema.XmlSchemaAny" />).</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaParticle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaParticle" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MaxOccurs">
      <summary>Gets or sets the maximum number of times the particle can occur.</summary>
      <returns>The maximum number of times the particle can occur. The default is 1.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MaxOccursString">
      <summary>Gets or sets the number as a string value. Maximum number of times the particle can occur.</summary>
      <returns>The number as a string value. String.Empty indicates that MaxOccurs is equal to the default value. The default is a null reference.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MinOccurs">
      <summary>Gets or sets the minimum number of times the particle can occur.</summary>
      <returns>The minimum number of times the particle can occur. The default is 1.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MinOccursString">
      <summary>Gets or sets the number as a string value. The minimum number of times the particle can occur.</summary>
      <returns>The number as a string value. String.Empty indicates that MinOccurs is equal to the default value. The default is a null reference.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaPatternFacet">
      <summary>Represents the pattern element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the value entered for a simpleType element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaPatternFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaRedefine">
      <summary>Represents the redefine element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to allow simple and complex types, groups and attribute groups from external schema files to be redefined in the current schema. This class can also be used to provide versioning for the schema elements.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaRedefine.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaRedefine" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.AttributeGroups">
      <summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> , for all attributes in the schema, which holds the post-compilation value of the AttributeGroups property.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> for all attributes in the schema. The post-compilation value of the AttributeGroups property.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.Groups">
      <summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />, for all groups in the schema, which holds the post-compilation value of the Groups property.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> for all groups in the schema. The post-compilation value of the Groups property.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.Items">
      <summary>Gets the collection of the following classes: <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />, <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup" />, <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />, <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />, and <see cref="T:System.Xml.Schema.XmlSchemaGroup" />.</summary>
      <returns>The elements contained within the redefine element.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.SchemaTypes">
      <summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />, for all simple and complex types in the schema, which holds the post-compilation value of the SchemaTypes property.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> for all schema types in the schema. The post-compilation value of the SchemaTypes property.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSequence">
      <summary>Represents the sequence element (compositor) from the XML Schema as specified by the World Wide Web Consortium (W3C). The sequence requires the elements in the group to appear in the specified sequence within the containing element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSequence.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSequence.Items">
      <summary>The elements contained within the compositor. Collection of <see cref="T:System.Xml.Schema.XmlSchemaElement" />, <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaSequence" />, or <see cref="T:System.Xml.Schema.XmlSchemaAny" />.</summary>
      <returns>The elements contained within the compositor.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSet">
      <summary>Contains a cache of XML Schema definition language (XSD) schemas. </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> class.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> class with the specified <see cref="T:System.Xml.XmlNameTable" />.</summary>
      <param name="nameTable">The <see cref="T:System.Xml.XmlNameTable" /> object to use.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlNameTable" /> object passed as a parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)">
      <summary>Adds the XML Schema definition language (XSD) schema at the URL specified to the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchema" /> object if the schema is valid. If the schema is not valid and a <see cref="T:System.Xml.Schema.ValidationEventHandler" /> is specified, then null is returned and the appropriate validation event is raised. Otherwise, an <see cref="T:System.Xml.Schema.XmlSchemaException" /> is thrown.</returns>
      <param name="targetNamespace">The schema targetNamespace property, or null to use the targetNamespace specified in the schema.</param>
      <param name="schemaUri">The URL that specifies the schema to load.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">The schema is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">The URL passed as a parameter is null or <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)">
      <summary>Adds the XML Schema definition language (XSD) schema contained in the <see cref="T:System.Xml.XmlReader" /> to the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchema" /> object if the schema is valid. If the schema is not valid and a <see cref="T:System.Xml.Schema.ValidationEventHandler" /> is specified, then null is returned and the appropriate validation event is raised. Otherwise, an <see cref="T:System.Xml.Schema.XmlSchemaException" /> is thrown.</returns>
      <param name="targetNamespace">The schema targetNamespace property, or null to use the targetNamespace specified in the schema.</param>
      <param name="schemaDocument">The <see cref="T:System.Xml.XmlReader" /> object.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">The schema is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlReader" /> object passed as a parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)">
      <summary>Adds the given <see cref="T:System.Xml.Schema.XmlSchema" /> to the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchema" /> object if the schema is valid. If the schema is not valid and a <see cref="T:System.Xml.Schema.ValidationEventHandler" /> is specified, then null is returned and the appropriate validation event is raised. Otherwise an <see cref="T:System.Xml.Schema.XmlSchemaException" /> is thrown.</returns>
      <param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema" /> object to add to the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">The schema is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.Schema.XmlSchema" /> object passed as a parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)">
      <summary>Adds all the XML Schema definition language (XSD) schemas in the given <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <param name="schemas">The <see cref="T:System.Xml.Schema.XmlSchemaSet" /> object.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">A schema in the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.Schema.XmlSchemaSet" /> object passed as a parameter is null.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.CompilationSettings">
      <summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> for the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> for the <see cref="T:System.Xml.Schema.XmlSchemaSet" />. The default is an <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> instance with the <see cref="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck" /> property set to true.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Compile">
      <summary>Compiles the XML Schema definition language (XSD) schemas added to the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into one logical schema.</summary>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">An error occurred when validating and compiling the schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Contains(System.String)">
      <summary>Indicates whether an XML Schema definition language (XSD) schema with the specified target namespace URI is in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>Returns true if a schema with the specified target namespace URI is in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />; otherwise, false.</returns>
      <param name="targetNamespace">The schema targetNamespace property.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)">
      <summary>Indicates whether the specified XML Schema definition language (XSD) <see cref="T:System.Xml.Schema.XmlSchema" /> object is in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.Schema.XmlSchema" /> object is in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />; otherwise, false.</returns>
      <param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema" /> object.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.Schema.XmlSchemaSet" /> passed as a parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
      <summary>Copies all the <see cref="T:System.Xml.Schema.XmlSchema" /> objects from the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to the given array, starting at the given index.</summary>
      <param name="schemas">The array to copy the objects to.</param>
      <param name="index">The index in the array where copying will begin.</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.Count">
      <summary>Gets the number of logical XML Schema definition language (XSD) schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>The number of logical schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes">
      <summary>Gets all the global attributes in all the XML Schema definition language (XSD) schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalElements">
      <summary>Gets all the global elements in all the XML Schema definition language (XSD) schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes">
      <summary>Gets all of the global simple and complex types in all the XML Schema definition language (XSD) schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.IsCompiled">
      <summary>Indicates if the XML Schema definition language (XSD) schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> have been compiled.</summary>
      <returns>Returns true if the schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> have been compiled since the last time a schema was added or removed from the <see cref="T:System.Xml.Schema.XmlSchemaSet" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.NameTable">
      <summary>Gets the default <see cref="T:System.Xml.XmlNameTable" /> used by the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> when loading new XML Schema definition language (XSD) schemas.</summary>
      <returns>An <see cref="T:System.Xml.XmlNameTable" />.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)">
      <summary>Removes the specified XML Schema definition language (XSD) schema from the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchema" /> object removed from the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> or null if the schema was not found in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</returns>
      <param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema" /> object to remove from the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">The schema is not a valid schema.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.Schema.XmlSchema" /> passed as a parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)">
      <summary>Removes the specified XML Schema definition language (XSD) schema and all the schemas it imports from the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.Schema.XmlSchema" /> object and all its imports were successfully removed; otherwise, false.</returns>
      <param name="schemaToRemove">The <see cref="T:System.Xml.Schema.XmlSchema" /> object to remove from the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.Schema.XmlSchema" /> passed as a parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)">
      <summary>Reprocesses an XML Schema definition language (XSD) schema that already exists in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchema" /> object if the schema is a valid schema. If the schema is not valid and a <see cref="T:System.Xml.Schema.ValidationEventHandler" /> is specified, null is returned and the appropriate validation event is raised. Otherwise, an <see cref="T:System.Xml.Schema.XmlSchemaException" /> is thrown.</returns>
      <param name="schema">The schema to reprocess.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">The schema is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.Schema.XmlSchema" /> object passed as a parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.Schema.XmlSchema" /> object passed as a parameter does not already exist in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Schemas">
      <summary>Returns a collection of all the XML Schema definition language (XSD) schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> object containing all the schemas that have been added to the <see cref="T:System.Xml.Schema.XmlSchemaSet" />. If no schemas have been added to the <see cref="T:System.Xml.Schema.XmlSchemaSet" />, an empty <see cref="T:System.Collections.ICollection" /> object is returned.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Schemas(System.String)">
      <summary>Returns a collection of all the XML Schema definition language (XSD) schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that belong to the given namespace.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> object containing all the schemas that have been added to the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that belong to the given namespace. If no schemas have been added to the <see cref="T:System.Xml.Schema.XmlSchemaSet" />, an empty <see cref="T:System.Collections.ICollection" /> object is returned.</returns>
      <param name="targetNamespace">The schema targetNamespace property.</param>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler">
      <summary>Sets an event handler for receiving information about XML Schema definition language (XSD) schema validation errors.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.XmlResolver">
      <summary>Sets the <see cref="T:System.Xml.XmlResolver" /> used to resolve namespaces or locations referenced in include and import elements of a schema.</summary>
      <returns>The <see cref="T:System.Xml.XmlResolver" /> used to resolve namespaces or locations referenced in include and import elements of a schema.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContent">
      <summary>Represents the simpleContent element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is for simple and complex types with simple content model.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContent.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleContent" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContent.Content">
      <summary>Gets one of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction" /> or <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentExtension" />.</summary>
      <returns>The content contained within the XmlSchemaSimpleContentRestriction or XmlSchemaSimpleContentExtension class.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContentExtension">
      <summary>Represents the extension element for simple content from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to derive simple types by extension. Such derivations are used to extend the simple type content of the element by adding attributes.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContentExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentExtension" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.AnyAttribute">
      <summary>Gets or sets the XmlSchemaAnyAttribute to be used for the attribute value.</summary>
      <returns>The XmlSchemaAnyAttribute.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.Attributes">
      <summary>Gets the collection of <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> and <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" />.</summary>
      <returns>The collection of attributes for the simpleType element.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.BaseTypeName">
      <summary>Gets or sets the name of a built-in data type or simple type from which this type is extended.</summary>
      <returns>The base type name.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction">
      <summary>Represents the restriction element for simple content from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to derive simple types by restriction. Such derivations can be used to restrict the range of values for the element to a subset of the values specified in the inherited simple type.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContentRestriction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.AnyAttribute">
      <summary>Gets or sets an <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> to be used for the attribute value.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> for the attribute value.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.Attributes">
      <summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> and <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> collection of attributes for the simple type.</summary>
      <returns>The collection of attributes for a simple type.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.BaseType">
      <summary>Gets or sets the simple type base value.</summary>
      <returns>The simple type base value.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.BaseTypeName">
      <summary>Gets or sets the name of the built-in data type or simple type from which this type is derived.</summary>
      <returns>The name of the base type.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.Facets">
      <summary>Gets or sets an Xml Schema facet. </summary>
      <returns>One of the following facet classes:<see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" />.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleType">
      <summary>Represents the simpleType element for simple content from XML Schema as specified by the World Wide Web Consortium (W3C). This class defines a simple type. Simple types can specify information and constraints for the value of attributes or elements with text-only content.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleType.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleType.Content">
      <summary>Gets or sets one of <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion" />, <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeList" />, or <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction" />.</summary>
      <returns>One of XmlSchemaSimpleTypeUnion, XmlSchemaSimpleTypeList, or XmlSchemaSimpleTypeRestriction.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeContent">
      <summary>Abstract class for simple type content classes.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeContent.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeContent" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeList">
      <summary>Represents the list element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to define a simpleType element as a list of values of a specified data type.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeList.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeList" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.BaseItemType">
      <summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> representing the type of the simpleType element based on the <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemType" /> and <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemTypeName" /> values of the simple type.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> representing the type of the simpleType element.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemType">
      <summary>Gets or sets the simpleType element that is derived from the type specified by the base value.</summary>
      <returns>The item type for the simple type element.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemTypeName">
      <summary>Gets or sets the name of a built-in data type or simpleType element defined in this schema (or another schema indicated by the specified namespace).</summary>
      <returns>The type name of the simple type list.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction">
      <summary>Represents the restriction element for simple types from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used restricting simpleType element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.BaseType">
      <summary>Gets or sets information on the base type.</summary>
      <returns>The base type for the simpleType element.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.BaseTypeName">
      <summary>Gets or sets the name of the qualified base type.</summary>
      <returns>The qualified name of the simple type restriction base type.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.Facets">
      <summary>Gets or sets an Xml Schema facet. </summary>
      <returns>One of the following facet classes:<see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" />.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion">
      <summary>Represents the union element for simple types from XML Schema as specified by the World Wide Web Consortium (W3C). A union datatype can be used to specify the content of a simpleType. The value of the simpleType element must be any one of a set of alternative datatypes specified in the union. Union types are always derived types and must comprise at least two alternative datatypes.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeUnion.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseMemberTypes">
      <summary>Gets an array of <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> objects representing the type of the simpleType element based on the <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseTypes" /> and <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.MemberTypes" /> values of the simple type.</summary>
      <returns>An array of <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> objects representing the type of the simpleType element.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseTypes">
      <summary>Gets the collection of base types.</summary>
      <returns>The collection of simple type base values.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.MemberTypes">
      <summary>Gets or sets the array of qualified member names of built-in data types or simpleType elements defined in this schema (or another schema indicated by the specified namespace).</summary>
      <returns>An array that consists of a list of members of built-in data types or simple types.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet">
      <summary>Represents the totalDigits facet from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the number of digits that can be entered for the value of a simpleType element. That value of totalDigits must be a positive integer.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaTotalDigitsFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaType">
      <summary>The base class for all simple types and complex types.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaType" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.BaseSchemaType">
      <summary>Gets the post-compilation object type or the built-in XML Schema Definition Language (XSD) data type, simpleType element, or complexType element. This is a post-schema-compilation infoset property.</summary>
      <returns>The built-in XSD data type, simpleType element, or complexType element.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType">
      <summary>Gets the post-compilation value for the base type of this schema type.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaType" /> object representing the base type of this schema type.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Datatype">
      <summary>Gets the post-compilation value for the data type of the complex type.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> post-schema-compilation value.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.DerivedBy">
      <summary>Gets the post-compilation information on how this element was derived from its base type.</summary>
      <returns>One of the valid <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> values.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Final">
      <summary>Gets or sets the final attribute of the type derivation that indicates if further derivations are allowed.</summary>
      <returns>One of the valid <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> values. The default is <see cref="F:System.Xml.Schema.XmlSchemaDerivationMethod.None" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.FinalResolved">
      <summary>Gets the post-compilation value of the <see cref="P:System.Xml.Schema.XmlSchemaType.Final" /> property.</summary>
      <returns>The post-compilation value of the <see cref="P:System.Xml.Schema.XmlSchemaType.Final" /> property. The default is the finalDefault attribute value of the schema element.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.Schema.XmlTypeCode)">
      <summary>Returns an <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> that represents the built-in complex type of the complex type specified.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> that represents the built-in complex type.</returns>
      <param name="typeCode">One of the <see cref="T:System.Xml.Schema.XmlTypeCode" /> values representing the complex type.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.XmlQualifiedName)">
      <summary>Returns an <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> that represents the built-in complex type of the complex type specified by qualified name.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> that represents the built-in complex type.</returns>
      <param name="qualifiedName">The <see cref="T:System.Xml.XmlQualifiedName" /> of the complex type.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlQualifiedName" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.Schema.XmlTypeCode)">
      <summary>Returns an <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> that represents the built-in simple type of the specified simple type.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> that represents the built-in simple type.</returns>
      <param name="typeCode">One of the <see cref="T:System.Xml.Schema.XmlTypeCode" /> values representing the simple type.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.XmlQualifiedName)">
      <summary>Returns an <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> that represents the built-in simple type of the simple type that is specified by the qualified name.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> that represents the built-in simple type.</returns>
      <param name="qualifiedName">The <see cref="T:System.Xml.XmlQualifiedName" /> of the simple type.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlQualifiedName" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.IsDerivedFrom(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaDerivationMethod)">
      <summary>Returns a value indicating if the derived schema type specified is derived from the base schema type specified</summary>
      <returns>true if the derived type is derived from the base type; otherwise, false.</returns>
      <param name="derivedType">The derived <see cref="T:System.Xml.Schema.XmlSchemaType" /> to test.</param>
      <param name="baseType">The base <see cref="T:System.Xml.Schema.XmlSchemaType" /> to test the derived <see cref="T:System.Xml.Schema.XmlSchemaType" /> against.</param>
      <param name="except">One of the <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> values representing a type derivation method to exclude from testing.</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.IsMixed">
      <summary>Gets or sets a value indicating if this type has a mixed content model. This property is only valid in a complex type.</summary>
      <returns>true if the type has a mixed content model; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Name">
      <summary>Gets or sets the name of the type.</summary>
      <returns>The name of the type.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.QualifiedName">
      <summary>Gets the qualified name for the type built from the Name attribute of this type. This is a post-schema-compilation property.</summary>
      <returns>The <see cref="T:System.Xml.XmlQualifiedName" /> for the type built from the Name attribute of this type.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.TypeCode">
      <summary>Gets the <see cref="T:System.Xml.Schema.XmlTypeCode" /> of the type.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlTypeCode" /> values.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaUnique">
      <summary>Represents the unique element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to identify a unique constraint among a set of elements.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaUnique.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaUnique" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaUse">
      <summary>Indicator of how the attribute is used.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.None">
      <summary>Attribute use not specified.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Optional">
      <summary>Attribute is optional.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Prohibited">
      <summary>Attribute cannot be used.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Required">
      <summary>Attribute must appear once.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidationException">
      <summary>Represents the exception thrown when XML Schema Definition Language (XSD) schema validation errors and warnings are encountered in an XML document being validated. </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> class.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> class with the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> objects specified.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> class with the exception message specified.</summary>
      <param name="message">A string description of the error condition.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> class with the exception message and original <see cref="T:System.Exception" /> object that caused this exception specified.</summary>
      <param name="message">A string description of the error condition.</param>
      <param name="innerException">The original <see cref="T:System.Exception" /> object that caused this exception.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> class with the exception message specified, and the original <see cref="T:System.Exception" /> object, line number, and line position of the XML that cause this exception specified.</summary>
      <param name="message">A string description of the error condition.</param>
      <param name="innerException">The original <see cref="T:System.Exception" /> object that caused this exception.</param>
      <param name="lineNumber">The line number of the XML that caused this exception.</param>
      <param name="linePosition">The line position of the XML that caused this exception.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Constructs a new <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> object with the given <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> information that contains all the properties of the <see cref="T:System.Xml.Schema.XmlSchemaValidationException" />.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />
      </param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />
      </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.SetSourceObject(System.Object)">
      <summary>Sets the XML node that causes the error.</summary>
      <param name="sourceObject">The source object.</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidationException.SourceObject">
      <summary>Gets the XML node that caused this <see cref="T:System.Xml.Schema.XmlSchemaValidationException" />.</summary>
      <returns>The XML node that caused this <see cref="T:System.Xml.Schema.XmlSchemaValidationException" />.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidationFlags">
      <summary>Specifies schema validation options used by the <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> and <see cref="T:System.Xml.XmlReader" /> classes.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.None">
      <summary>Do not process identity constraints, inline schemas, schema location hints, or report schema validation warnings.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema">
      <summary>Process inline schemas encountered during validation.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation">
      <summary>Process schema location hints (xsi:schemaLocation, xsi:noNamespaceSchemaLocation) encountered during validation.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings">
      <summary>Report schema validation warnings encountered during validation.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints">
      <summary>Process identity constraints (xs:ID, xs:IDREF, xs:key, xs:keyref, xs:unique) encountered during validation.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes">
      <summary>Allow xml:* attributes even if they are not defined in the schema. The attributes will be validated based on their data type.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidator">
      <summary>Represents an XML Schema Definition Language (XSD) Schema validation engine. The <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> class cannot be inherited.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> class.</summary>
      <param name="nameTable">An <see cref="T:System.Xml.XmlNameTable" /> object containing element and attribute names as atomized strings.</param>
      <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> object containing the XML Schema Definition Language (XSD) schemas used for validation.</param>
      <param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object used for resolving namespaces encountered during validation.</param>
      <param name="validationFlags">An <see cref="T:System.Xml.Schema.XmlSchemaValidationFlags" /> value specifying schema validation options.</param>
      <exception cref="T:System.ArgumentNullException">One or more of the parameters specified are null.</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">An error occurred while compiling schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> parameter.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)">
      <summary>Adds an XML Schema Definition Language (XSD) schema to the set of schemas used for validation.</summary>
      <param name="schema">An <see cref="T:System.Xml.Schema.XmlSchema" /> object to add to the set of schemas used for validation.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.Schema.XmlSchema" /> parameter specified is null.</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The target namespace of the <see cref="T:System.Xml.Schema.XmlSchema" /> parameter matches that of any element or attribute already encountered by the <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> object.</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">The <see cref="T:System.Xml.Schema.XmlSchema" /> parameter is invalid.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.EndValidation">
      <summary>Ends validation and checks identity constraints for the entire XML document.</summary>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">An identity constraint error was found in the XML document.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes">
      <summary>Returns the expected attributes for the current element context.</summary>
      <returns>An array of <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> objects or an empty array if there are no expected attributes.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles">
      <summary>Returns the expected particles in the current element context.</summary>
      <returns>An array of <see cref="T:System.Xml.Schema.XmlSchemaParticle" /> objects or an empty array if there are no expected particles.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes(System.Collections.ArrayList)">
      <summary>Validates identity constraints on the default attributes and populates the <see cref="T:System.Collections.ArrayList" /> specified with <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> objects for any attributes with default values that have not been previously validated using the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> method in the element context. </summary>
      <param name="defaultAttributes">An <see cref="T:System.Collections.ArrayList" /> to populate with <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> objects for any attributes not yet encountered during validation in the element context.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.Initialize">
      <summary>Initializes the state of the <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> object.</summary>
      <exception cref="T:System.InvalidOperationException">Calling the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /> method is valid immediately after the construction of an <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> object or after a call to <see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /> only.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)">
      <summary>Initializes the state of the <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> object using the <see cref="T:System.Xml.Schema.XmlSchemaObject" /> specified for partial validation.</summary>
      <param name="partialValidationType">An <see cref="T:System.Xml.Schema.XmlSchemaElement" />, <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />, or <see cref="T:System.Xml.Schema.XmlSchemaType" /> object used to initialize the validation context of the <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> object for partial validation.</param>
      <exception cref="T:System.InvalidOperationException">Calling the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /> method is valid immediately after the construction of an <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> object or after a call to <see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /> only.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.Schema.XmlSchemaObject" /> parameter is not an <see cref="T:System.Xml.Schema.XmlSchemaElement" />, <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />, or <see cref="T:System.Xml.Schema.XmlSchemaType" /> object.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.Schema.XmlSchemaObject" /> parameter cannot be null.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.LineInfoProvider">
      <summary>Gets or sets the line number information for the XML node being validated.</summary>
      <returns>An <see cref="T:System.Xml.IXmlLineInfo" /> object.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)">
      <summary>Skips validation of the current element content and prepares the <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> object to validate content in the parent element's context.</summary>
      <param name="schemaInfo">An <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> object whose properties are set if the current element content is successfully skipped. This parameter can be null.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> method was not called in the correct sequence. For example, calling <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> after calling <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.SourceUri">
      <summary>Gets or sets the source URI for the XML node being validated.</summary>
      <returns>A <see cref="T:System.Uri" /> object representing the source URI for the XML node being validated; the default is null.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
      <summary>Validates the attribute name, namespace URI, and value in the current element context.</summary>
      <returns>The validated attribute's value.</returns>
      <param name="localName">The local name of the attribute to validate.</param>
      <param name="namespaceUri">The namespace URI of the attribute to validate.</param>
      <param name="attributeValue">The value of the attribute to validate.</param>
      <param name="schemaInfo">An <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> object whose properties are set on successful validation of the attribute. This parameter can be null.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The attribute is not valid in the current element context.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> method was not called in the correct sequence. For example, calling <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> after calling <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />.</exception>
      <exception cref="T:System.ArgumentNullException">One or more of the parameters specified are null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
      <summary>Validates the attribute name, namespace URI, and value in the current element context.</summary>
      <returns>The validated attribute's value.</returns>
      <param name="localName">The local name of the attribute to validate.</param>
      <param name="namespaceUri">The namespace URI of the attribute to validate.</param>
      <param name="attributeValue">An <see cref="T:System.Xml.Schema.XmlValueGetter" />delegate used to pass the attribute's value as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute.</param>
      <param name="schemaInfo">An <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> object whose properties are set on successful validation of the attribute. This parameter and can be null.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The attribute is not valid in the current element context.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> method was not called in the correct sequence. For example, calling <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> after calling <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />.</exception>
      <exception cref="T:System.ArgumentNullException">One or more of the parameters specified are null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
      <summary>Validates the element in the current context.</summary>
      <param name="localName">The local name of the element to validate.</param>
      <param name="namespaceUri">The namespace URI of the element to validate.</param>
      <param name="schemaInfo">An <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> object whose properties are set on successful validation of the element's name. This parameter can be null.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The element's name is not valid in the current context.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> method was not called in the correct sequence. For example, the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> method is called after calling <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
      <summary>Validates the element in the current context with the xsi:Type, xsi:Nil, xsi:SchemaLocation, and xsi:NoNamespaceSchemaLocation attribute values specified.</summary>
      <param name="localName">The local name of the element to validate.</param>
      <param name="namespaceUri">The namespace URI of the element to validate.</param>
      <param name="schemaInfo">An <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> object whose properties are set on successful validation of the element's name. This parameter can be null.</param>
      <param name="xsiType">The xsi:Type attribute value of the element. This parameter can be null.</param>
      <param name="xsiNil">The xsi:Nil attribute value of the element. This parameter can be null.</param>
      <param name="xsiSchemaLocation">The xsi:SchemaLocation attribute value of the element. This parameter can be null.</param>
      <param name="xsiNoNamespaceSchemaLocation">The xsi:NoNamespaceSchemaLocation attribute value of the element. This parameter can be null.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The element's name is not valid in the current context.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> method was not called in the correct sequence. For example, the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> method is called after calling <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)">
      <summary>Verifies if the text content of the element is valid according to its data type for elements with simple content, and verifies if the content of the current element is complete for elements with complex content.</summary>
      <returns>The parsed, typed text value of the element if the element has simple content.</returns>
      <param name="schemaInfo">An <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> object whose properties are set on successful validation of the element. This parameter can be null.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The element's content is not valid.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> method was not called in the correct sequence. For example, if the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> method is called after calling <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
      <summary>Verifies if the text content of the element specified is valid according to its data type.</summary>
      <returns>The parsed, typed simple content of the element.</returns>
      <param name="schemaInfo">An <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> object whose properties are set on successful validation of the text content of the element. This parameter can be null.</param>
      <param name="typedValue">The typed text content of the element.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The element's text content is not valid.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> method was not called in the correct sequence (for example, if the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> method is called after calling <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />), calls to the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> method have been previously made, or the element has complex content.</exception>
      <exception cref="T:System.ArgumentNullException">The typed text content parameter cannot be null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)">
      <summary>Verifies whether all the required attributes in the element context are present and prepares the <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> object to validate the child content of the element.</summary>
      <param name="schemaInfo">An <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> object whose properties are set on successful verification that all the required attributes in the element context are present. This parameter can be null.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">One or more of the required attributes in the current element context were not found.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> method was not called in the correct sequence. For example, calling <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> after calling <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />.</exception>
      <exception cref="T:System.ArgumentNullException">One or more of the parameters specified are null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)">
      <summary>Validates whether the text string specified is allowed in the current element context, and accumulates the text for validation if the current element has simple content.</summary>
      <param name="elementValue">A text string to validate in the current element context.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The text string specified is not allowed in the current element context.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> method was not called in the correct sequence. For example, the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> method is called after calling <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />.</exception>
      <exception cref="T:System.ArgumentNullException">The text string parameter cannot be null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)">
      <summary>Validates whether the text returned by the <see cref="T:System.Xml.Schema.XmlValueGetter" /> object specified is allowed in the current element context, and accumulates the text for validation if the current element has simple content.</summary>
      <param name="elementValue">An <see cref="T:System.Xml.Schema.XmlValueGetter" />delegate used to pass the text value as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The text string specified is not allowed in the current element context.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> method was not called in the correct sequence. For example, the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> method is called after calling <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />.</exception>
      <exception cref="T:System.ArgumentNullException">The text string parameter cannot be null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.String)">
      <summary>Validates whether the white space in the string specified is allowed in the current element context, and accumulates the white space for validation if the current element has simple content.</summary>
      <param name="elementValue">A white space string to validate in the current element context.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">White space is not allowed in the current element context.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> method was not called in the correct sequence. For example, if the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> method is called after calling <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.Xml.Schema.XmlValueGetter)">
      <summary>Validates whether the white space returned by the <see cref="T:System.Xml.Schema.XmlValueGetter" /> object specified is allowed in the current element context, and accumulates the white space for validation if the current element has simple content.</summary>
      <param name="elementValue">An <see cref="T:System.Xml.Schema.XmlValueGetter" />delegate used to pass the white space value as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">White space is not allowed in the current element context.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> method was not called in the correct sequence. For example, if the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> method is called after calling <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />.</exception>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler">
      <summary>The <see cref="T:System.Xml.Schema.ValidationEventHandler" /> that receives schema validation warnings and errors encountered during schema validation.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.ValidationEventSender">
      <summary>Gets or sets the object sent as the sender object of a validation event.</summary>
      <returns>An <see cref="T:System.Object" />; the default is this <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> object.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.XmlResolver">
      <summary>Sets the <see cref="T:System.Xml.XmlResolver" /> object used to resolve xs:import and xs:include elements as well as xsi:schemaLocation and xsi:noNamespaceSchemaLocation attributes.</summary>
      <returns>An <see cref="T:System.Xml.XmlResolver" /> object; the default is an <see cref="T:System.Xml.XmlUrlResolver" /> object.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidity">
      <summary>Represents the validity of an XML item validated by the <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> class.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.NotKnown">
      <summary>The validity of the XML item is not known.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.Valid">
      <summary>The XML item is valid.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.Invalid">
      <summary>The XML item is invalid.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet">
      <summary>Represents the World Wide Web Consortium (W3C) whiteSpace facet.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaWhiteSpaceFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaXPath">
      <summary>Represents the World Wide Web Consortium (W3C) selector element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaXPath.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaXPath" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaXPath.XPath">
      <summary>Gets or sets the attribute for the XPath expression.</summary>
      <returns>The string attribute value for the XPath expression.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSeverityType">
      <summary>Represents the severity of the validation event.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Error">
      <summary>Indicates a validation error occurred when validating the instance document. This applies to document type definitions (DTDs) and XML Schema definition language (XSD) schemas. The World Wide Web Consortium (W3C) validity constraints are considered errors. If no validation event handler has been created, errors throw an exception.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Warning">
      <summary>Indicates that a validation event occurred that is not an error. A warning is typically issued when there is no DTD, or XML Schema to validate a particular element or attribute against. Unlike errors, warnings do not throw an exception if there is no validation event handler.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlTypeCode">
      <summary>Represents the W3C XML Schema Definition Language (XSD) schema types.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.None">
      <summary>No type information.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Item">
      <summary>An item such as a node or atomic value.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Node">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Document">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Element">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Attribute">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Namespace">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.ProcessingInstruction">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Comment">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Text">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.AnyAtomicType">
      <summary>Any atomic value of a union.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UntypedAtomic">
      <summary>An untyped atomic value.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.String">
      <summary>A W3C XML Schema xs:string type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Boolean">
      <summary>A W3C XML Schema xs:boolean type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Decimal">
      <summary>A W3C XML Schema xs:decimal type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Float">
      <summary>A W3C XML Schema xs:float type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Double">
      <summary>A W3C XML Schema xs:double type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Duration">
      <summary>A W3C XML Schema xs:Duration type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.DateTime">
      <summary>A W3C XML Schema xs:dateTime type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Time">
      <summary>A W3C XML Schema xs:time type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Date">
      <summary>A W3C XML Schema xs:date type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GYearMonth">
      <summary>A W3C XML Schema xs:gYearMonth type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GYear">
      <summary>A W3C XML Schema xs:gYear type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GMonthDay">
      <summary>A W3C XML Schema xs:gMonthDay type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GDay">
      <summary>A W3C XML Schema xs:gDay type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GMonth">
      <summary>A W3C XML Schema xs:gMonth type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.HexBinary">
      <summary>A W3C XML Schema xs:hexBinary type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Base64Binary">
      <summary>A W3C XML Schema xs:base64Binary type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.AnyUri">
      <summary>A W3C XML Schema xs:anyURI type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.QName">
      <summary>A W3C XML Schema xs:QName type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Notation">
      <summary>A W3C XML Schema xs:NOTATION type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NormalizedString">
      <summary>A W3C XML Schema xs:normalizedString type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Token">
      <summary>A W3C XML Schema xs:token type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Language">
      <summary>A W3C XML Schema xs:language type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NmToken">
      <summary>A W3C XML Schema xs:NMTOKEN type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Name">
      <summary>A W3C XML Schema xs:Name type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NCName">
      <summary>A W3C XML Schema xs:NCName type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Id">
      <summary>A W3C XML Schema xs:ID type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Idref">
      <summary>A W3C XML Schema xs:IDREF type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Entity">
      <summary>A W3C XML Schema xs:ENTITY type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Integer">
      <summary>A W3C XML Schema xs:integer type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NonPositiveInteger">
      <summary>A W3C XML Schema xs:nonPositiveInteger type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NegativeInteger">
      <summary>A W3C XML Schema xs:negativeInteger type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Long">
      <summary>A W3C XML Schema xs:long type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Int">
      <summary>A W3C XML Schema xs:int type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Short">
      <summary>A W3C XML Schema xs:short type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Byte">
      <summary>A W3C XML Schema xs:byte type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NonNegativeInteger">
      <summary>A W3C XML Schema xs:nonNegativeInteger type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedLong">
      <summary>A W3C XML Schema xs:unsignedLong type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedInt">
      <summary>A W3C XML Schema xs:unsignedInt type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedShort">
      <summary>A W3C XML Schema xs:unsignedShort type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedByte">
      <summary>A W3C XML Schema xs:unsignedByte type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.PositiveInteger">
      <summary>A W3C XML Schema xs:positiveInteger type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.YearMonthDuration">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.DayTimeDuration">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlValueGetter">
      <summary>A delegate used by the <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> class to pass attribute, text, and white space values as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute, text, or white space.</summary>
      <returns>An object containing the attribute, text, or white space value. The object is a CLR type that that corresponds to the XSD type of the attribute, text, or white space value.</returns>
    </member>
    <member name="T:System.Xml.Serialization.CodeExporter">
      <summary>Represents a class that can generate proxy code from an XML representation of a data structure.</summary>
    </member>
    <member name="P:System.Xml.Serialization.CodeExporter.IncludeMetadata">
      <summary>Gets a collection of code attribute metadata that is included when the code is exported.</summary>
      <returns>A collection of <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> objects that represent metadata that is included when the code is exported.</returns>
    </member>
    <member name="T:System.Xml.Serialization.CodeGenerationOptions">
      <summary>Specifies various options to use when generating .NET Framework types for use with an XML Web Service.</summary>
    </member>
    <member name="F:System.Xml.Serialization.CodeGenerationOptions.None">
      <summary>Represents primitive types by fields and primitive types by <see cref="N:System" /> namespace types.</summary>
    </member>
    <member name="F:System.Xml.Serialization.CodeGenerationOptions.GenerateProperties">
      <summary>Represents primitive types by properties.</summary>
    </member>
    <member name="F:System.Xml.Serialization.CodeGenerationOptions.GenerateNewAsync">
      <summary>Creates events for the asynchronous invocation of Web methods.</summary>
    </member>
    <member name="F:System.Xml.Serialization.CodeGenerationOptions.GenerateOldAsync">
      <summary>Creates Begin and End methods for the asynchronous invocation of Web methods.</summary>
    </member>
    <member name="F:System.Xml.Serialization.CodeGenerationOptions.GenerateOrder">
      <summary>Generates explicitly ordered serialization code as specified through the Order property of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />, <see cref="T:System.Xml.Serialization.XmlArrayAttribute" />, and <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> attributes. </summary>
    </member>
    <member name="F:System.Xml.Serialization.CodeGenerationOptions.EnableDataBinding">
      <summary>Enables data binding.</summary>
    </member>
    <member name="T:System.Xml.Serialization.CodeIdentifier">
      <summary>Provides static methods to convert input text into names for code entities.</summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifier.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.CodeIdentifier" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifier.MakeCamel(System.String)">
      <summary>Produces a camel-case string from an input string. </summary>
      <returns>A camel-case version of the parameter string.</returns>
      <param name="identifier">The name of a code entity, such as a method parameter, typically taken from an XML element or attribute name.</param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifier.MakePascal(System.String)">
      <summary>Produces a Pascal-case string from an input string. </summary>
      <returns>A Pascal-case version of the parameter string.</returns>
      <param name="identifier">The name of a code entity, such as a method parameter, typically taken from an XML element or attribute name.</param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifier.MakeValid(System.String)">
      <summary>Produces a valid code entity name from an input string. </summary>
      <returns>A string that can be used as a code identifier, such as the name of a method parameter.</returns>
      <param name="identifier">The name of a code entity, such as a method parameter, typically taken from an XML element or attribute name.</param>
    </member>
    <member name="T:System.Xml.Serialization.CodeIdentifiers">
      <summary>Maintains a group of names for related code entities or type mappings that are generated by the .NET Framework's XML serialization infrastructure.</summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> class and determines whether code identifiers are case sensitive.</summary>
      <param name="caseSensitive">true if identifiers are case sensitive; otherwise, false. </param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.Add(System.String,System.Object)">
      <summary>Adds a named code entity or type mapping to the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope. </summary>
      <param name="identifier">A name that is used to index the code entity.</param>
      <param name="value">The code entity or type mapping information.</param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.AddReserved(System.String)">
      <summary>Prevents a specified name from being used within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope. </summary>
      <param name="identifier">A name that will not be available within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" />instance's scope.</param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.AddUnique(System.String,System.Object)">
      <summary>Adds a named code entity or type mapping to the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope, ensuring that the name is unique within the scope. </summary>
      <returns>The identifier parameter value or a modified string if there is a name collision.</returns>
      <param name="identifier">A candidate name that is used to index the code entity.</param>
      <param name="value">The code entity or type mapping information.</param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.Clear">
      <summary>Removes all code entities or type mappings, including their names, from the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope. </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.IsInUse(System.String)">
      <summary>Determines whether a specified name is already being used within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope. </summary>
      <returns>true if the name is already in use; otherwise, false.</returns>
      <param name="identifier">The name to check for use within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope.</param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.MakeRightCase(System.String)">
      <summary>Ensures that the input is of the correct case by modifying the name according to the value of the <see cref="P:System.Xml.Serialization.CodeIdentifiers.UseCamelCasing" /> property. </summary>
      <returns>A string that is the same as the input identifier or has the first letter's case modified.</returns>
      <param name="identifier">The name to possibly modify.</param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.MakeUnique(System.String)">
      <summary>Determines whether the input name conflicts with another name within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope and, if it does, generates a modified string. </summary>
      <returns>The identifier parameter value or a modified string if there is a name collision.</returns>
      <param name="identifier">The name to modify if it is not already unique.</param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.Remove(System.String)">
      <summary>Removes from the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope the code entity or type mapping identified by the input name. </summary>
      <param name="identifier">The name of the code entity or type mapping information to remove.</param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.RemoveReserved(System.String)">
      <summary>Removes the input name from the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's reserved names. </summary>
      <param name="identifier">A name that will be made available within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope.</param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.ToArray(System.Type)">
      <summary>Returns an array of the code entities or type mappings within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope. </summary>
      <returns>An array of the code entities or type mappings that is stored by the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> object.</returns>
      <param name="type">The type of all the code entities or type mappings for the instance.</param>
    </member>
    <member name="P:System.Xml.Serialization.CodeIdentifiers.UseCamelCasing">
      <summary>Gets or sets a value that indicates whether the instance uses camel case. </summary>
      <returns>true to indicate that the instance uses camel case; false to indicate that the instance uses Pascal case.</returns>
    </member>
    <member name="T:System.Xml.Serialization.ImportContext">
      <summary>Describes the context in which a set of schema is bound to .NET Framework code entities.</summary>
    </member>
    <member name="M:System.Xml.Serialization.ImportContext.#ctor(System.Xml.Serialization.CodeIdentifiers,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.ImportContext" /> class for the given code identifiers, with the given type-sharing option.</summary>
      <param name="identifiers">The code entities to which the context applies.</param>
      <param name="shareTypes">A <see cref="T:System.Boolean" /> value that determines whether custom types are shared among schema.</param>
    </member>
    <member name="P:System.Xml.Serialization.ImportContext.ShareTypes">
      <summary>Gets a value that determines whether custom types are shared.</summary>
      <returns>true, if custom types are shared among schema; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.ImportContext.TypeIdentifiers">
      <summary>Gets a set of code entities to which the context applies.</summary>
      <returns>A <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> that specifies the code entities to which the context applies.</returns>
    </member>
    <member name="P:System.Xml.Serialization.ImportContext.Warnings">
      <summary>Gets a collection of warnings that are generated when importing the code entity descriptions.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.StringCollection" /> that contains warnings that were generated when importing the code entity descriptions.</returns>
    </member>
    <member name="T:System.Xml.Serialization.IXmlSerializable">
      <summary>Provides custom formatting for XML serialization and deserialization.</summary>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
      <summary>This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</returns>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
      <summary>Generates an object from its XML representation.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized. </param>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
      <summary>Converts an object into its XML representation.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized. </param>
    </member>
    <member name="T:System.Xml.Serialization.IXmlTextParser">
      <summary>Establishes a <see cref="P:System.Xml.Serialization.IXmlTextParser.Normalized" /> property for use by the .NET Framework infrastructure.</summary>
    </member>
    <member name="P:System.Xml.Serialization.IXmlTextParser.Normalized">
      <summary>Gets or sets whether white space and attribute values are normalized.</summary>
      <returns>true if white space attributes values are normalized; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.IXmlTextParser.WhitespaceHandling">
      <summary>Gets or sets how white space is handled when parsing XML.</summary>
      <returns>A member of the <see cref="T:System.Xml.WhitespaceHandling" /> enumeration that describes how whites pace is handled when parsing XML.</returns>
    </member>
    <member name="T:System.Xml.Serialization.SchemaImporter">
      <summary>Describes a schema importer.</summary>
    </member>
    <member name="P:System.Xml.Serialization.SchemaImporter.Extensions">
      <summary>Gets a collection of schema importer extensions.</summary>
      <returns>A <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection" /> containing a collection of schema importer extensions.</returns>
    </member>
    <member name="T:System.Xml.Serialization.SoapAttributeAttribute">
      <summary>Specifies that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize the class member as an encoded SOAP attribute.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapAttributeAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapAttributeAttribute" /> class using the specified value as the name of the XML attribute.</summary>
      <param name="attributeName">The name of the XML attribute. </param>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributeAttribute.AttributeName">
      <summary>Gets or sets the name of the XML attribute generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <returns>The name of the XML attribute. The default is the member identifier.</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributeAttribute.DataType">
      <summary>Gets or sets the XML Schema definition language (XSD) data type of the SOAP attribute generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <returns>An XML Schema data type, as defined by the World Wide Web Consortium (www.w3.org) document named "XML Schema Part 2: Datatypes".</returns>
      <exception cref="T:System.Exception">The XML Schema data type you have specified cannot be mapped to the .NET data type. </exception>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributeAttribute.Namespace">
      <summary>Gets or sets the XML namespace of the XML attribute.</summary>
      <returns>The XML namespace of the XML attribute.</returns>
    </member>
    <member name="T:System.Xml.Serialization.SoapAttributeOverrides">
      <summary>Allows you to override attributes applied to properties, fields, and classes when you use an <see cref="T:System.Xml.Serialization.XmlSerializer" /> to serialize or deserialize an object as encoded SOAP.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributeOverrides.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapAttributeOverrides" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributeOverrides.Add(System.Type,System.String,System.Xml.Serialization.SoapAttributes)">
      <summary>Adds a <see cref="T:System.Xml.Serialization.SoapAttributes" /> to the collection of <see cref="T:System.Xml.Serialization.SoapAttributes" /> objects contained by the <see cref="T:System.Xml.Serialization.SoapAttributeOverrides" />. The <paramref name="type" /> parameter specifies the object to be overridden by the <see cref="T:System.Xml.Serialization.SoapAttributes" />. The <paramref name="member" /> parameter specifies the name of a member that is overridden.</summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to override. </param>
      <param name="member">The name of the member to override. </param>
      <param name="attributes">A <see cref="T:System.Xml.Serialization.SoapAttributes" /> that represents the overriding attributes. </param>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributeOverrides.Add(System.Type,System.Xml.Serialization.SoapAttributes)">
      <summary>Adds a <see cref="T:System.Xml.Serialization.SoapAttributes" /> to a collection of <see cref="T:System.Xml.Serialization.SoapAttributes" /> objects. The <paramref name="type" /> parameter specifies an object to be overridden by the <see cref="T:System.Xml.Serialization.SoapAttributes" />.</summary>
      <param name="type">The <see cref="T:System.Type" /> of the object that is overridden. </param>
      <param name="attributes">A <see cref="T:System.Xml.Serialization.SoapAttributes" /> that represents the overriding attributes. </param>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributeOverrides.Item(System.Type)">
      <summary>Gets the object associated with the specified (base class) type.</summary>
      <returns>A <see cref="T:System.Xml.Serialization.SoapAttributes" /> that represents the collection of overriding attributes.</returns>
      <param name="type">The base class <see cref="T:System.Type" /> that is associated with the collection of attributes you want to retrieve. </param>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributeOverrides.Item(System.Type,System.String)">
      <summary>Gets the object associated with the specified (base class) type. The <paramref name="member" /> parameter specifies the base class member that is overridden.</summary>
      <returns>A <see cref="T:System.Xml.Serialization.SoapAttributes" /> that represents the collection of overriding attributes.</returns>
      <param name="type">The base class <see cref="T:System.Type" /> that is associated with the collection of attributes you want to override. </param>
      <param name="member">The name of the overridden member that specifies the <see cref="T:System.Xml.Serialization.SoapAttributes" /> to return. </param>
    </member>
    <member name="T:System.Xml.Serialization.SoapAttributes">
      <summary>Represents a collection of attribute objects that control how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes and deserializes SOAP methods.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributes.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapAttributes" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributes.#ctor(System.Reflection.ICustomAttributeProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapAttributes" /> class using the specified custom type.</summary>
      <param name="provider">Any object that implements the <see cref="T:System.Reflection.ICustomAttributeProvider" /> interface, such as the <see cref="T:System.Type" /> class. </param>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapAttribute">
      <summary>Gets or sets the <see cref="T:System.Xml.Serialization.SoapAttributeAttribute" /> to override.</summary>
      <returns>A <see cref="T:System.Xml.Serialization.SoapAttributeAttribute" /> that overrides the behavior of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> when the member is serialized.</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapDefaultValue">
      <summary>Gets or sets the default value of an XML element or attribute.</summary>
      <returns>An object that represents the default value of an XML element or attribute.</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapElement">
      <summary>Gets or sets a <see cref="T:System.Xml.Serialization.SoapElementAttribute" /> to override.</summary>
      <returns>The <see cref="T:System.Xml.Serialization.SoapElementAttribute" /> to override.</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapEnum">
      <summary>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a SOAP enumeration.</summary>
      <returns>A <see cref="T:System.Xml.Serialization.SoapEnumAttribute" />.</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapIgnore">
      <summary>Gets or sets a value that specifies whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a public field or property as encoded SOAP XML.</summary>
      <returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must not serialize the field or property; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapType">
      <summary>Gets or sets an object that instructs the <see cref="T:System.Xml.Serialization.XmlSerializer" /> how to serialize an object type into encoded SOAP XML.</summary>
      <returns>A <see cref="T:System.Xml.Serialization.SoapTypeAttribute" /> that either overrides a <see cref="T:System.Xml.Serialization.SoapTypeAttribute" /> applied to a class declaration, or is applied to a class declaration.</returns>
    </member>
    <member name="T:System.Xml.Serialization.SoapCodeExporter">
      <summary>Generates types and attribute declarations from internal type mapping information for SOAP-encoded message parts defined in a WSDL document. </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.#ctor(System.CodeDom.CodeNamespace)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapCodeExporter" /> class, assuming no code compile unit. </summary>
      <param name="codeNamespace">A <see cref="T:System.CodeDom.CodeNamespace" /> that specifies the namespace of the types to generate.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapCodeExporter" /> class, specifying a code compile unit parameter in addition to a namespace parameter.</summary>
      <param name="codeNamespace">A <see cref="T:System.CodeDom.CodeNamespace" /> that specifies the namespace of the types to generate.</param>
      <param name="codeCompileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" /> that identifies the program graph container to which used assembly references are automatically added.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit,System.CodeDom.Compiler.CodeDomProvider,System.Xml.Serialization.CodeGenerationOptions,System.Collections.Hashtable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapCodeExporter" /> class, specifying a code namespace, a code compile unit, a code generator, code generation options, and mappings.</summary>
      <param name="codeNamespace">A <see cref="T:System.CodeDom.CodeNamespace" /> that specifies the namespace of the types to generate.</param>
      <param name="codeCompileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" /> that identifies the program graph container to which used assembly references are automatically added.</param>
      <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />  that is used to create the code.</param>
      <param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> enumeration that specifies the options with which exported code is generated.</param>
      <param name="mappings">A <see cref="T:System.Collections.Hashtable" /> that contains <see cref="T:System.Xml.Serialization.XmlMapping" /> objects.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit,System.Xml.Serialization.CodeGenerationOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapCodeExporter" /> class, specifying a code namespace, a code compile unit, and code generation options.</summary>
      <param name="codeNamespace">A <see cref="T:System.CodeDom.CodeNamespace" /> that specifies the namespace of the types to generate.</param>
      <param name="codeCompileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" /> that identifies the program graph container to which used assembly references are automatically added.</param>
      <param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> enumeration that specifies the options with which exported code is generated.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit,System.Xml.Serialization.CodeGenerationOptions,System.Collections.Hashtable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapCodeExporter" /> class, specifying a code namespace, a code compile unit, code generation options, and mappings.</summary>
      <param name="codeNamespace">A <see cref="T:System.CodeDom.CodeNamespace" /> that specifies the namespace of the types to generate.</param>
      <param name="codeCompileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" /> that identifies the program graph container to which used assembly references are automatically added.</param>
      <param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> enumeration that specifies the options with which exported code is generated.</param>
      <param name="mappings">A <see cref="T:System.Collections.Hashtable" /> that contains <see cref="T:System.Xml.Serialization.XmlMapping" /> objects.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.AddMappingMetadata(System.CodeDom.CodeAttributeDeclarationCollection,System.Xml.Serialization.XmlMemberMapping)">
      <summary>Add a <see cref="T:System.Xml.Serialization.SoapElementAttribute" /> declaration to a method parameter or return value corresponding to a part element of a SOAP message definition in a WSDL document. </summary>
      <param name="metadata">The collection of <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> objects for the generated type, to which the method adds an attribute declaration.</param>
      <param name="member">An internal .NET Framework type mapping for a single part of a WSDL message definition.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.AddMappingMetadata(System.CodeDom.CodeAttributeDeclarationCollection,System.Xml.Serialization.XmlMemberMapping,System.Boolean)">
      <summary>Adds a <see cref="T:System.Xml.Serialization.SoapElementAttribute" /> declaration to a method parameter or return value that corresponds to a part element of a SOAP message definition in a WSDL document. </summary>
      <param name="metadata">The collection of <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> objects for the generated type to which the method adds an attribute declaration.</param>
      <param name="member">An internal .NET Framework type mapping for a single part of a WSDL message definition.</param>
      <param name="forceUseMemberName">true to add an initial argument that contains the XML element name for the attribute declaration that is being generated; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping)">
      <summary>Generates a .NET Framework type, plus attribute declarations, for each of the parts that belong to a SOAP message definition in a WSDL document. </summary>
      <param name="xmlMembersMapping">Internal .NET Framework type mappings for the element parts of a WSDL message definition.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.ExportTypeMapping(System.Xml.Serialization.XmlTypeMapping)">
      <summary>Generates a .NET Framework type, plus attribute declarations, for a SOAP header. </summary>
      <param name="xmlTypeMapping">Internal .NET Framework type mapping information for a SOAP header element.</param>
    </member>
    <member name="T:System.Xml.Serialization.SoapElementAttribute">
      <summary>Specifies that the public member value be serialized by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> as an encoded SOAP XML element.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapElementAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapElementAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapElementAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapElementAttribute" /> class and specifies the name of the XML element.</summary>
      <param name="elementName">The XML element name of the serialized member. </param>
    </member>
    <member name="P:System.Xml.Serialization.SoapElementAttribute.DataType">
      <summary>Gets or sets the XML Schema definition language (XSD) data type of the generated XML element.</summary>
      <returns>One of the XML Schema data types.</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapElementAttribute.ElementName">
      <summary>Gets or sets the name of the generated XML element.</summary>
      <returns>The name of the generated XML element. The default is the member identifier.</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapElementAttribute.IsNullable">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize a member that has the xsi:null attribute set to "1".</summary>
      <returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates the xsi:null attribute; otherwise, false.</returns>
    </member>
    <member name="T:System.Xml.Serialization.SoapEnumAttribute">
      <summary>Controls how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes an enumeration member.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapEnumAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapEnumAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapEnumAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapEnumAttribute" /> class using the specified element name.</summary>
      <param name="name">The XML element name generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />. </param>
    </member>
    <member name="P:System.Xml.Serialization.SoapEnumAttribute.Name">
      <summary>Gets or sets the value generated in an XML document when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes an enumeration, or the value recognized when it deserializes the enumeration member.</summary>
      <returns>The value generated in an XML document when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes the enumeration, or the value recognized when it deserializes the enumeration member.</returns>
    </member>
    <member name="T:System.Xml.Serialization.SoapIgnoreAttribute">
      <summary>Instructs the <see cref="T:System.Xml.Serialization.XmlSerializer" /> not to serialize the public field or public read/write property value.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapIgnoreAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapIgnoreAttribute" /> class.</summary>
    </member>
    <member name="T:System.Xml.Serialization.SoapIncludeAttribute">
      <summary>Allows the <see cref="T:System.Xml.Serialization.XmlSerializer" /> to recognize a type when it serializes or deserializes an object as encoded SOAP XML.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapIncludeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapIncludeAttribute" /> class using the specified type.</summary>
      <param name="type">The type of the object to include. </param>
    </member>
    <member name="P:System.Xml.Serialization.SoapIncludeAttribute.Type">
      <summary>Gets or sets the type of the object to use when serializing or deserializing an object.</summary>
      <returns>The type of the object to include.</returns>
    </member>
    <member name="T:System.Xml.Serialization.SoapReflectionImporter">
      <summary>Generates mappings to SOAP-encoded messages from .NET Framework types or Web service method information. </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapReflectionImporter" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapReflectionImporter" /> class, specifying a default XML namespace for imported type mappings. </summary>
      <param name="defaultNamespace">The default XML namespace to use for imported type mappings.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.#ctor(System.Xml.Serialization.SoapAttributeOverrides)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapReflectionImporter" /> class, specifying overrides for XML serialization. </summary>
      <param name="attributeOverrides">A <see cref="T:System.Xml.Serialization.SoapAttributeOverrides" /> object that overrides how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class serializes mapped types using SOAP encoding.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.#ctor(System.Xml.Serialization.SoapAttributeOverrides,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapReflectionImporter" /> class, specifying XML serialization overrides and a default XML namespace. </summary>
      <param name="attributeOverrides">A <see cref="T:System.Xml.Serialization.SoapAttributeOverrides" /> object that overrides how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class serializes mapped types using SOAP encoding.</param>
      <param name="defaultNamespace">The default XML namespace to use for imported type mappings.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[])">
      <summary>Generates internal type mappings for information that is gathered from a Web service method. </summary>
      <returns>Internal .NET Framework type mappings to the element parts of a WSDL message definition.</returns>
      <param name="elementName">An XML element name produced from the Web service method.</param>
      <param name="ns">An XML element namespace produced from the Web service method.</param>
      <param name="members">An array of .NET Framework code entities that belong to a Web service method.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean)">
      <summary>Generates internal type mappings for information that is gathered from a Web service method. </summary>
      <returns>Internal .NET Framework type mappings to the element parts of a WSDL message definition.</returns>
      <param name="elementName">An XML element name produced from the Web service method.</param>
      <param name="ns">An XML element namespace produced from the Web service method.</param>
      <param name="members">An array of .NET Framework code entities that belong to a Web service method.</param>
      <param name="hasWrapperElement">true to indicate that elements that correspond to WSDL message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, false.</param>
      <param name="writeAccessors">true to indicate an RPC-style Web service binding; false to indicate a document-style Web service binding or a SOAP header.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean,System.Boolean)">
      <summary>Generates internal type mappings for information that is gathered from a Web service method. </summary>
      <returns>Internal .NET Framework type mappings to the element parts of a WSDL message definition.</returns>
      <param name="elementName">An XML element name produced from the Web service method.</param>
      <param name="ns">An XML element namespace produced from the Web service method.</param>
      <param name="members">An array of .NET Framework code entities that belong to a Web service method.</param>
      <param name="hasWrapperElement">true to indicate that elements that correspond to WSDL message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, false.</param>
      <param name="writeAccessors">true to indicate an RPC-style Web service binding; false to indicate a document-style Web service binding or a SOAP header.</param>
      <param name="validate">true to indicate that a generated deserializer should check for the expected qualified name of the wrapper element; otherwise, false. This parameter's value is relevant only if the <paramref name="hasWrapperElement" /> parameter's value is true.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean,System.Boolean,System.Xml.Serialization.XmlMappingAccess)">
      <summary>Generates internal type mappings for information that is gathered from a Web service method.</summary>
      <returns>Internal .NET Framework type mappings to the element parts of a WSDL message definition.</returns>
      <param name="elementName">An XML element name produced from the Web service method.</param>
      <param name="ns">An XML element namespace produced from the Web service method.</param>
      <param name="members">An array of .NET Framework code entities that belong to a Web service method.</param>
      <param name="hasWrapperElement">true to indicate that elements that correspond to WSDL message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, false.</param>
      <param name="writeAccessors">true to indicate an RPC-style Web service binding; false to indicate a document-style Web service binding or a SOAP header.</param>
      <param name="validate">true to indicate that a generated deserializer should check for the expected qualified name of the wrapper element; otherwise, false. This parameter's value is relevant only if the <paramref name="hasWrapperElement" /> parameter's value is true.</param>
      <param name="access">One of the <see cref="T:System.Xml.Serialization.XmlMappingAccess" /> values.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportTypeMapping(System.Type)">
      <summary>Generates a mapping to an XML Schema element for a .NET Framework type.</summary>
      <returns>Internal .NET Framework mapping of a type to an XML Schema element. </returns>
      <param name="type">The .NET Framework type for which to generate a type mapping. </param>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportTypeMapping(System.Type,System.String)">
      <summary>Generates a mapping to an XML Schema element for a .NET Framework type.</summary>
      <returns>Internal .NET Framework mapping of a type to an XML Schema element.</returns>
      <param name="type">The .NET Framework type for which to generate a type mapping. </param>
      <param name="defaultNamespace">The default XML namespace to use.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.IncludeType(System.Type)">
      <summary>Places mappings for a type in the <see cref="T:System.Xml.Serialization.SoapReflectionImporter" /> instance's context for later use when import methods are invoked. </summary>
      <param name="type">The .NET Framework type for which to save type mapping information.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.IncludeTypes(System.Reflection.ICustomAttributeProvider)">
      <summary>Places mappings for derived types in the <see cref="T:System.Xml.Serialization.SoapReflectionImporter" /> instance's context for later use when import methods are invoked. </summary>
      <param name="provider">An <see cref="T:System.Reflection.ICustomAttributeProvider" /> reflection object that contains custom attributes that are derived from the <see cref="T:System.Xml.Serialization.SoapIncludeAttribute" /> attribute.</param>
    </member>
    <member name="T:System.Xml.Serialization.SoapSchemaExporter">
      <summary>Populates <see cref="T:System.Xml.Schema.XmlSchema" /> objects with XML Schema data type definitions for .NET Framework types that are serialized using SOAP encoding.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaExporter.#ctor(System.Xml.Serialization.XmlSchemas)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapSchemaExporter" /> class, which supplies the collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects to which XML Schema element declarations are to be added.</summary>
      <param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects to which element declarations obtained from type mappings are to be added.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping)">
      <summary>Adds to the applicable <see cref="T:System.Xml.Schema.XmlSchema" /> object a data type definition for each of the element parts of a SOAP-encoded message definition.</summary>
      <param name="xmlMembersMapping">Internal .NET Framework type mappings for the element parts of a WSDL message definition.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping,System.Boolean)">
      <summary>Adds to the applicable <see cref="T:System.Xml.Schema.XmlSchema" /> object a data type definition for each of the element parts of a SOAP-encoded message definition.</summary>
      <param name="xmlMembersMapping">Internal .NET Framework type mappings for the element parts of a WSDL message definition.</param>
      <param name="exportEnclosingType">true to export a type definition for the parent element of the WSDL parts; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaExporter.ExportTypeMapping(System.Xml.Serialization.XmlTypeMapping)">
      <summary>Adds to the applicable <see cref="T:System.Xml.Schema.XmlSchema" /> object a data type definition for a .NET Framework type.</summary>
      <param name="xmlTypeMapping">An internal mapping between a .NET Framework type and an XML Schema element.</param>
    </member>
    <member name="T:System.Xml.Serialization.SoapSchemaImporter">
      <summary>Used within the .NET Framework to generate internal mappings to .NET Framework types for SOAP-encoded message parts in a WSDL document. </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapSchemaImporter" /> class, specifying <see cref="T:System.Xml.Schema.XmlSchema" /> objects representing the XML schemas used by SOAP encoded messages defined in a WSDL document. </summary>
      <param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider,System.Xml.Serialization.ImportContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapSchemaImporter" /> class specifying the schemas, compiler options, and names of related code entities.</summary>
      <param name="schemas">An <see cref="T:System.Xml.Serialization.XmlSchemas" />  containing a collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects.</param>
      <param name="options">One of the <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> that specifies various options for generating a .NET Framework type.</param>
      <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />  used to generate the serialization code.</param>
      <param name="context">An <see cref="T:System.Xml.Serialization.ImportContext" /> that describes the context in which a set of schema are bound to .NET Framework code entities.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeGenerationOptions,System.Xml.Serialization.ImportContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapSchemaImporter" /> class specifying the schemas, compiler options, and the context of the schemas.</summary>
      <param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects.</param>
      <param name="options">One of the <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> that specifies various options for generating a .NET Framework type.</param>
      <param name="context">An <see cref="T:System.Xml.Serialization.ImportContext" /> that describes the context in which a set of schema are bound to .NET Framework code entities. </param>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeIdentifiers)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapSchemaImporter" /> class, specifying <see cref="T:System.Xml.Schema.XmlSchema" /> objects representing the XML schemas used by SOAP encoded messages, plus classes being generated for bindings defined in a WSDL document. </summary>
      <param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects.</param>
      <param name="typeIdentifiers">A <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> object that specifies a collection of classes being generated for bindings defined in a WSDL document.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeIdentifiers,System.Xml.Serialization.CodeGenerationOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapSchemaImporter" /> class specifying the schemas, compiler options, and names of related code entities.</summary>
      <param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects.</param>
      <param name="typeIdentifiers">A <see cref="T:System.Xml.Serialization.CodeIdentifiers" />  that maintains a group of names for related code entities or type mappings that are generated by the .NET Framework's XML serialization infrastructure.</param>
      <param name="options">One of the <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> that specifies various options for generating a .NET Framework type.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.ImportDerivedTypeMapping(System.Xml.XmlQualifiedName,System.Type,System.Boolean)">
      <summary>Generates internal type mapping information for the type of a SOAP-encoded element part defined in a WSDL document where a base type is specified. </summary>
      <returns>The .NET Framework type mapping information for a derived type corresponding to a WSDL message part.</returns>
      <param name="name">An <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the name of an element's type for which a .NET Framework type is being generated.</param>
      <param name="baseType">A base type for the .NET Framework type being generated.</param>
      <param name="baseTypeCanBeIndirect">true to indicate that the type being generated may indirectly inherit from the base type; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.SoapSchemaMember)">
      <summary>Generates internal type mapping information for a single SOAP-encoded element part defined in a WSDL document. </summary>
      <returns>The .NET Framework type mapping for a single element part of a WSDL message definition.</returns>
      <param name="name">The message name.</param>
      <param name="ns">The message namespace.</param>
      <param name="member">A <see cref="T:System.Xml.Serialization.SoapSchemaMember" /> object that provides information about the part element.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.SoapSchemaMember[])">
      <summary>Generates internal type mapping information for the element parts of a SOAP-encoded message defined in a WSDL document. </summary>
      <returns>The .NET Framework type mappings for the element parts of a WSDL message definition.</returns>
      <param name="name">The message name.</param>
      <param name="ns">The message namespace.</param>
      <param name="members">An array of type <see cref="T:System.Xml.Serialization.SoapSchemaMember" /> that provides information about the part elements.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.SoapSchemaMember[],System.Boolean)">
      <summary>Generates internal type mapping information for the element parts of a SOAP-encoded message defined in a WSDL document. </summary>
      <returns>The .NET Framework type mappings for the element parts of a WSDL message definition.</returns>
      <param name="name">The message name.</param>
      <param name="ns">The message namespace.</param>
      <param name="members">An array of type <see cref="T:System.Xml.Serialization.SoapSchemaMember" /> that provides information about the part elements.</param>
      <param name="hasWrapperElement">true to have elements defined by the parts enclosed in an extra, wrapper element in a SOAP message; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.SoapSchemaMember[],System.Boolean,System.Type,System.Boolean)">
      <summary>Generates internal type mapping information for the element parts of a SOAP-encoded message defined in a WSDL document.</summary>
      <returns>The .NET Framework type mappings for the element parts of a WSDL message definition.</returns>
      <param name="name">The message name.</param>
      <param name="ns">The message namespace.</param>
      <param name="members">An array of type <see cref="T:System.Xml.Serialization.SoapSchemaMember" /> that provides information about the part elements.</param>
      <param name="hasWrapperElement">true to have elements defined by the parts enclosed in an extra, wrapper element in a SOAP message; otherwise, false.</param>
      <param name="baseType">A base type for all .NET Framework types that are generated to correspond to message parts.</param>
      <param name="baseTypeCanBeIndirect">true to indicate that types corresponding to message parts can indirectly inherit from the base type; otherwise, false.</param>
    </member>
    <member name="T:System.Xml.Serialization.SoapSchemaMember">
      <summary>Represents certain attributes of a XSD &lt;part&gt; element in a WSDL document for generating classes from the document. </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaMember.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapSchemaMember" /> class. </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapSchemaMember.MemberName">
      <summary>Gets or sets a value that corresponds to the name attribute of the WSDL part element. </summary>
      <returns>The element name.</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapSchemaMember.MemberType">
      <summary>Gets or sets a value that corresponds to the type attribute of the WSDL part element.</summary>
      <returns>An <see cref="T:System.Xml.XmlQualifiedName" /> that corresponds to the XML type.</returns>
    </member>
    <member name="T:System.Xml.Serialization.SoapTypeAttribute">
      <summary>Controls the schema generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> when a class instance is serialized as SOAP encoded XML.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapTypeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapTypeAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapTypeAttribute" /> class and specifies the name of the XML type.</summary>
      <param name="typeName">The name of the XML type that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates when it serializes the class instance (and recognizes when it deserializes the class instance). </param>
    </member>
    <member name="M:System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapTypeAttribute" /> class and specifies the name and XML namespace of the type.</summary>
      <param name="typeName">The name of the XML type that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates when it serializes the class instance (and recognizes when it deserializes the class instance). </param>
      <param name="ns">The XML namespace of the type. </param>
    </member>
    <member name="P:System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema">
      <summary>Gets or sets a value that indicates whether to include the type in SOAP-encoded XML Schema documents.</summary>
      <returns>true to include the type in SOAP-encoded XML Schema documents; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapTypeAttribute.Namespace">
      <summary>Gets or sets the namespace of the XML type.</summary>
      <returns>The namespace of the XML type. The default is an empty string ("").</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapTypeAttribute.TypeName">
      <summary>Gets or sets the name of the XML type.</summary>
      <returns>The name of the XML type. The default is the class name.</returns>
    </member>
    <member name="T:System.Xml.Serialization.UnreferencedObjectEventArgs">
      <summary>Provides data for the known, but unreferenced, object found in an encoded SOAP XML stream during deserialization.</summary>
    </member>
    <member name="M:System.Xml.Serialization.UnreferencedObjectEventArgs.#ctor(System.Object,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.UnreferencedObjectEventArgs" /> class.</summary>
      <param name="o">The unreferenced object. </param>
      <param name="id">A unique string used to identify the unreferenced object. </param>
    </member>
    <member name="P:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedId">
      <summary>Gets the ID of the object.</summary>
      <returns>The ID of the object.</returns>
    </member>
    <member name="P:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedObject">
      <summary>Gets the deserialized, but unreferenced, object.</summary>
      <returns>The deserialized, but unreferenced, object.</returns>
    </member>
    <member name="T:System.Xml.Serialization.UnreferencedObjectEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject" /> event of an <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <param name="sender">The source of the event. </param>
      <param name="e">An <see cref="T:System.Xml.Serialization.UnreferencedObjectEventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyAttributeAttribute">
      <summary>Specifies that the member (a field that returns an array of <see cref="T:System.Xml.XmlAttribute" /> objects) can contain any XML attributes.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyAttributeAttribute.#ctor">
      <summary>Constructs a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" /> class.</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyElementAttribute">
      <summary>Specifies that the member (a field that returns an array of <see cref="T:System.Xml.XmlElement" /> or <see cref="T:System.Xml.XmlNode" /> objects) contains objects that represent any XML element that has no corresponding member in the object being serialized or deserialized.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> class and specifies the XML element name generated in the XML document.</summary>
      <param name="name">The name of the XML element that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> class and specifies the XML element name generated in the XML document and its XML namespace.</summary>
      <param name="name">The name of the XML element that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates. </param>
      <param name="ns">The XML namespace of the XML element. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Name">
      <summary>Gets or sets the XML element name.</summary>
      <returns>The name of the XML element.</returns>
      <exception cref="T:System.InvalidOperationException">The element name of an array member does not match the element name specified by the <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> property. </exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace">
      <summary>Gets or sets the XML namespace generated in the XML document.</summary>
      <returns>An XML namespace.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Order">
      <summary>Gets or sets the explicit order in which the elements are serialized or deserialized.</summary>
      <returns>The order of the code generation.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyElementAttributes">
      <summary>Represents a collection of <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> objects.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttributes" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Add(System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>Adds an <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> to the collection.</summary>
      <returns>The index of the newly added <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> to add. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Contains(System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>Gets a value that indicates whether the specified <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> exists in the collection.</summary>
      <returns>true if the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> exists in the collection; otherwise, false.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> you are interested in. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.CopyTo(System.Xml.Serialization.XmlAnyElementAttribute[],System.Int32)">
      <summary>Copies the entire collection to a compatible one-dimensional array of <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> objects, starting at the specified index of the target array. </summary>
      <param name="array">The one-dimensional array of <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> objects that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.IndexOf(System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>Gets the index of the specified <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />.</summary>
      <returns>The index of the specified <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> whose index you want. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Insert(System.Int32,System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>Inserts an <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> into the collection at the specified index.</summary>
      <param name="index">The index where the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> is inserted. </param>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> to insert. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttributes.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> at the specified index.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> at the specified index.</returns>
      <param name="index">The index of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Remove(System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>Removes the specified <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> from the collection.</summary>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> to remove. </param>
    </member>
    <member name="T:System.Xml.Serialization.XmlArrayAttribute">
      <summary>Specifies that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize a particular class member as an array of XML elements.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayAttribute" /> class and specifies the XML element name generated in the XML document instance.</summary>
      <param name="elementName">The name of the XML element that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.ElementName">
      <summary>Gets or sets the XML element name given to the serialized array.</summary>
      <returns>The XML element name of the serialized array. The default is the name of the member to which the <see cref="T:System.Xml.Serialization.XmlArrayAttribute" /> is assigned.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.Form">
      <summary>Gets or sets a value that indicates whether the XML element name generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> is qualified or unqualified.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm" /> values. The default is XmlSchemaForm.None.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.IsNullable">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize a member as an empty XML tag with the xsi:nil attribute set to true.</summary>
      <returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates the xsi:nil attribute; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.Namespace">
      <summary>Gets or sets the namespace of the XML element.</summary>
      <returns>The namespace of the XML element.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.Order">
      <summary>Gets or sets the explicit order in which the elements are serialized or deserialized.</summary>
      <returns>The order of the code generation.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlArrayItemAttribute">
      <summary>Specifies the derived types that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> can place in a serialized array.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> class and specifies the name of the XML element generated in the XML document.</summary>
      <param name="elementName">The name of the XML element. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> class and specifies the name of the XML element generated in the XML document and the <see cref="T:System.Type" /> that can be inserted into the generated XML document.</summary>
      <param name="elementName">The name of the XML element. </param>
      <param name="type">The <see cref="T:System.Type" /> of the object to serialize. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> class and specifies the <see cref="T:System.Type" /> that can be inserted into the serialized array.</summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to serialize. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.DataType">
      <summary>Gets or sets the XML data type of the generated XML element.</summary>
      <returns>An XML Schema definition (XSD) data type, as defined by the World Wide Web Consortium (www.w3.org) document "XML Schema Part 2: DataTypes".</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.ElementName">
      <summary>Gets or sets the name of the generated XML element.</summary>
      <returns>The name of the generated XML element. The default is the member identifier.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Form">
      <summary>Gets or sets a value that indicates whether the name of the generated XML element is qualified.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm" /> values. The default is XmlSchemaForm.None.</returns>
      <exception cref="T:System.Exception">The <see cref="P:System.Xml.Serialization.XmlArrayItemAttribute.Form" /> property is set to XmlSchemaForm.Unqualified and a <see cref="P:System.Xml.Serialization.XmlArrayItemAttribute.Namespace" /> value is specified. </exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize a member as an empty XML tag with the xsi:nil attribute set to true.</summary>
      <returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates the xsi:nil attribute; otherwise, false, and no instance is generated. The default is true.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Namespace">
      <summary>Gets or sets the namespace of the generated XML element.</summary>
      <returns>The namespace of the generated XML element.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel">
      <summary>Gets or sets the level in a hierarchy of XML elements that the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> affects.</summary>
      <returns>The zero-based index of a set of indexes in an array of arrays.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Type">
      <summary>Gets or sets the type allowed in an array.</summary>
      <returns>A <see cref="T:System.Type" /> that is allowed in the array.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlArrayItemAttributes">
      <summary>Represents a collection of <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> objects.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttributes" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.Add(System.Xml.Serialization.XmlArrayItemAttribute)">
      <summary>Adds an <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> to the collection.</summary>
      <returns>The index of the added item.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> to add to the collection. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.Contains(System.Xml.Serialization.XmlArrayItemAttribute)">
      <summary>Determines whether the collection contains the specified <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />. </summary>
      <returns>true if the collection contains the specified <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />; otherwise, false.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> to check for.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.CopyTo(System.Xml.Serialization.XmlArrayItemAttribute[],System.Int32)">
      <summary>Copies an <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> array to the collection, starting at a specified target index. </summary>
      <param name="array">The array of <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> objects to copy to the collection.</param>
      <param name="index">The index at which the copied attributes begin.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.IndexOf(System.Xml.Serialization.XmlArrayItemAttribute)">
      <summary>Returns the zero-based index of the first occurrence of the specified <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> in the collection or 1 if the attribute is not found in the collection. </summary>
      <returns>The first index of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> in the collection or -1 if the attribute is not found in the collection.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> to locate in the collection.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.Insert(System.Int32,System.Xml.Serialization.XmlArrayItemAttribute)">
      <summary>Inserts an <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> into the collection at the specified index. </summary>
      <param name="index">The index at which the attribute is inserted.</param>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />  to insert.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttributes.Item(System.Int32)">
      <summary>Gets or sets the item at the specified index.</summary>
      <returns>The <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> at the specified index.</returns>
      <param name="index">The zero-based index of the collection member to get or set. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.Remove(System.Xml.Serialization.XmlArrayItemAttribute)">
      <summary>Removes an <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> from the collection, if it is present. </summary>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> to remove.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeAttribute">
      <summary>Specifies that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize the class member as an XML attribute.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> class and specifies the name of the generated XML attribute.</summary>
      <param name="attributeName">The name of the XML attribute that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> class.</summary>
      <param name="attributeName">The name of the XML attribute that is generated. </param>
      <param name="type">The <see cref="T:System.Type" /> used to store the attribute. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> class.</summary>
      <param name="type">The <see cref="T:System.Type" /> used to store the attribute. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.AttributeName">
      <summary>Gets or sets the name of the XML attribute.</summary>
      <returns>The name of the XML attribute. The default is the member name.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.DataType">
      <summary>Gets or sets the XSD data type of the XML attribute generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <returns>An XSD (XML Schema Document) data type, as defined by the World Wide Web Consortium (www.w3.org) document named "XML Schema: DataTypes".</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Form">
      <summary>Gets or sets a value that indicates whether the XML attribute name generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> is qualified.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm" /> values. The default is XmlForm.None.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Namespace">
      <summary>Gets or sets the XML namespace of the XML attribute.</summary>
      <returns>The XML namespace of the XML attribute.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Type">
      <summary>Gets or sets the complex type of the XML attribute.</summary>
      <returns>The type of the XML attribute.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeEventArgs">
      <summary>Provides data for the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" /> event.</summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeEventArgs.Attr">
      <summary>Gets an object that represents the unknown XML attribute.</summary>
      <returns>An <see cref="T:System.Xml.XmlAttribute" /> that represents the unknown XML attribute.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeEventArgs.ExpectedAttributes">
      <summary>Gets a comma-delimited list of XML attribute names expected to be in an XML document instance.</summary>
      <returns>A comma-delimited list of XML attribute names. Each name is in the following format: <paramref name="namespace" />:<paramref name="name" />.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeEventArgs.LineNumber">
      <summary>Gets the line number of the unknown XML attribute.</summary>
      <returns>The line number of the unknown XML attribute.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeEventArgs.LinePosition">
      <summary>Gets the position in the line of the unknown XML attribute.</summary>
      <returns>The position number of the unknown XML attribute.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeEventArgs.ObjectBeingDeserialized">
      <summary>Gets the object being deserialized.</summary>
      <returns>The object being deserialized.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" /></summary>
      <param name="sender">The source of the event. </param>
      <param name="e">An <see cref="T:System.Xml.Serialization.XmlAttributeEventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeOverrides">
      <summary>Allows you to override property, field, and class attributes when you use the <see cref="T:System.Xml.Serialization.XmlSerializer" /> to serialize or deserialize an object.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeOverrides.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeOverrides.Add(System.Type,System.String,System.Xml.Serialization.XmlAttributes)">
      <summary>Adds an <see cref="T:System.Xml.Serialization.XmlAttributes" /> object to the collection of <see cref="T:System.Xml.Serialization.XmlAttributes" /> objects. The <paramref name="type" /> parameter specifies an object to be overridden. The <paramref name="member" /> parameter specifies the name of a member that is overridden.</summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to override. </param>
      <param name="member">The name of the member to override. </param>
      <param name="attributes">An <see cref="T:System.Xml.Serialization.XmlAttributes" /> object that represents the overriding attributes. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeOverrides.Add(System.Type,System.Xml.Serialization.XmlAttributes)">
      <summary>Adds an <see cref="T:System.Xml.Serialization.XmlAttributes" /> object to the collection of <see cref="T:System.Xml.Serialization.XmlAttributes" /> objects. The <paramref name="type" /> parameter specifies an object to be overridden by the <see cref="T:System.Xml.Serialization.XmlAttributes" /> object.</summary>
      <param name="type">The <see cref="T:System.Type" /> of the object that is overridden. </param>
      <param name="attributes">An <see cref="T:System.Xml.Serialization.XmlAttributes" /> object that represents the overriding attributes. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeOverrides.Item(System.Type)">
      <summary>Gets the object associated with the specified, base-class, type.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlAttributes" /> that represents the collection of overriding attributes.</returns>
      <param name="type">The base class <see cref="T:System.Type" /> that is associated with the collection of attributes you want to retrieve. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeOverrides.Item(System.Type,System.String)">
      <summary>Gets the object associated with the specified (base-class) type. The member parameter specifies the base-class member that is overridden.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlAttributes" /> that represents the collection of overriding attributes.</returns>
      <param name="type">The base class <see cref="T:System.Type" /> that is associated with the collection of attributes you want. </param>
      <param name="member">The name of the overridden member that specifies the <see cref="T:System.Xml.Serialization.XmlAttributes" /> to return. </param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributes">
      <summary>Represents a collection of attribute objects that control how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes and deserializes an object.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributes.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributes" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributes.#ctor(System.Reflection.ICustomAttributeProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributes" /> class and customizes how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes and deserializes an object. </summary>
      <param name="provider">A class that can provide alternative implementations of attributes that control XML serialization.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlAnyAttribute">
      <summary>Gets or sets the <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" /> to override.</summary>
      <returns>The <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" /> to override.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlAnyElements">
      <summary>Gets the collection of <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> objects to override.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlAnyElementAttributes" /> object that represents the collection of <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> objects.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlArray">
      <summary>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a public field or read/write property that returns an array.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlArrayAttribute" /> that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a public field or read/write property that returns an array.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlArrayItems">
      <summary>Gets or sets a collection of objects that specify how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes items inserted into an array returned by a public field or read/write property.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlArrayItemAttributes" /> object that contains a collection of <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> objects.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlAttribute">
      <summary>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a public field or public read/write property as an XML attribute.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> that controls the serialization of a public field or read/write property as an XML attribute.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlChoiceIdentifier">
      <summary>Gets or sets an object that allows you to distinguish between a set of choices.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /> that can be applied to a class member that is serialized as an xsi:choice element.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue">
      <summary>Gets or sets the default value of an XML element or attribute.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the default value of an XML element or attribute.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlElements">
      <summary>Gets a collection of objects that specify how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a public field or read/write property as an XML element.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlElementAttributes" /> that contains a collection of <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> objects.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlEnum">
      <summary>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes an enumeration member.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes an enumeration member.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlIgnore">
      <summary>Gets or sets a value that specifies whether or not the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a public field or public read/write property.</summary>
      <returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must not serialize the field or property; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.Xmlns">
      <summary>Gets or sets a value that specifies whether to keep all namespace declarations when an object containing a member that returns an <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> object is overridden.</summary>
      <returns>true if the namespace declarations should be kept; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlRoot">
      <summary>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a class as an XML root element.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> that overrides a class attributed as an XML root element.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlText">
      <summary>Gets or sets an object that instructs the <see cref="T:System.Xml.Serialization.XmlSerializer" /> to serialize a public field or public read/write property as XML text.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> that overrides the default serialization of a public property or field.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlType">
      <summary>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a class to which the <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> has been applied.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> that overrides an <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> applied to a class declaration.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
      <summary>Specifies that the member can be further detected by using an enumeration.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /> class.</summary>
      <param name="name">The member name that returns the enumeration used to detect a choice. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName">
      <summary>Gets or sets the name of the field that returns the enumeration to use when detecting types.</summary>
      <returns>The name of a field that returns an enumeration.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlCodeExporter">
      <summary>Generates types and attribute declarations from internal type mapping information for XML schema element declarations.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.#ctor(System.CodeDom.CodeNamespace)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlCodeExporter" /> class using the specified namespace. </summary>
      <param name="codeNamespace">The namespace of the types to generate.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlCodeExporter" /> class using the specified namespace and code compile unit.</summary>
      <param name="codeNamespace">The namespace of the types to generate.</param>
      <param name="codeCompileUnit">A CodeDOM graph container to which used assembly references are automatically added.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit,System.CodeDom.Compiler.CodeDomProvider,System.Xml.Serialization.CodeGenerationOptions,System.Collections.Hashtable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlCodeExporter" /> class using the specified .NET Framework namespace, code compile unit containing the graph of the objects, an enumeration specifying code options, and a collection of mapping objects.</summary>
      <param name="codeNamespace">The namespace of the types to generate.</param>
      <param name="codeCompileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" />  program graph container to which used assembly references are automatically added.</param>
      <param name="codeProvider">An enumeration value that provides options for generating .NET Framework types from XML schema custom data types.</param>
      <param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> that contains special instructions for code creation.</param>
      <param name="mappings">A <see cref="T:System.Collections.Hashtable" /> that contains <see cref="T:System.Xml.Serialization.XmlMapping" /> objects.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit,System.Xml.Serialization.CodeGenerationOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlCodeExporter" /> class using the specified namespace, code compile unit, and code generation options.</summary>
      <param name="codeNamespace">The namespace of the types to generate.</param>
      <param name="codeCompileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" /> program graph container to which used assembly references are automatically added.</param>
      <param name="options">An enumeration value that provides options for generating .NET Framework types from XML schema custom data types.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit,System.Xml.Serialization.CodeGenerationOptions,System.Collections.Hashtable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlCodeExporter" /> class using the specified .NET Framework namespace, code compile unit containing the graph of the objects, an object representing code generation options, and a collection of mapping objects.</summary>
      <param name="codeNamespace">The namespace of the types to generate.</param>
      <param name="codeCompileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" /> program graph container to which used assembly references are automatically added.</param>
      <param name="options">An enumeration value that provides options for generating .NET Framework types from XML schema custom data types.</param>
      <param name="mappings">A <see cref="T:System.Collections.Hashtable" /> that contains <see cref="T:System.Xml.Serialization.XmlMapping" /> objects.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.AddMappingMetadata(System.CodeDom.CodeAttributeDeclarationCollection,System.Xml.Serialization.XmlMemberMapping,System.String)">
      <summary>Adds an <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> declaration to a method parameter or return value that corresponds to a &lt;part&gt; element of a SOAP message definition in a Web Services Description Language (WSDL) document. </summary>
      <param name="metadata">The collection of <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> objects for the generated type to which the method adds an attribute declaration.</param>
      <param name="member">An internal .NET Framework type mapping for a single element part of a WSDL message definition.</param>
      <param name="ns">The XML namespace of the SOAP message part for which the type mapping information in the member parameter has been generated.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.AddMappingMetadata(System.CodeDom.CodeAttributeDeclarationCollection,System.Xml.Serialization.XmlMemberMapping,System.String,System.Boolean)">
      <summary>Adds an <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> declaration to a method parameter or return value that corresponds to a &lt;part&gt; element of a SOAP message definition in a Web Services Description Language (WSDL) document. </summary>
      <param name="metadata">The collection of <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> objects for the generated type to which the method adds an attribute declaration.</param>
      <param name="member">An internal .NET Framework type mapping for a single element part of a WSDL message definition.</param>
      <param name="ns">The XML namespace of the SOAP message part for which the type mapping information in the member parameter has been generated.</param>
      <param name="forceUseMemberName">Flag that helps determine whether to add an initial argument containing the XML element name for the attribute declaration being generated.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.AddMappingMetadata(System.CodeDom.CodeAttributeDeclarationCollection,System.Xml.Serialization.XmlTypeMapping,System.String)">
      <summary>Adds an <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> declaration to a method return value that corresponds to a &lt;part&gt; element of a non-SOAP message definition in a Web Services Description Language (WSDL) document. </summary>
      <param name="metadata">The collection of <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> objects for the generated type to which the method adds an attribute declaration.</param>
      <param name="mapping">The internal .NET Framework type mapping information for an XML schema element.</param>
      <param name="ns">The XML namespace of the SOAP message part for which the type mapping information in the member parameter has been generated.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping)">
      <summary>Generates a .NET Framework type, plus attribute declarations, for each of the parts that belong to a SOAP message definition in a Web Services Description Language (WSDL) document. </summary>
      <param name="xmlMembersMapping">The internal .NET Framework type mappings for the element parts of a WSDL message definition.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.ExportTypeMapping(System.Xml.Serialization.XmlTypeMapping)">
      <summary>Generates a .NET Framework type, plus attribute declarations, for an XML schema element. </summary>
      <param name="xmlTypeMapping">The internal .NET Framework type mapping information for an XML schema element.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlDeserializationEvents">
      <summary>Contains fields that can be used to pass event delegates to a thread-safe <see cref="Overload:System.Xml.Serialization.XmlSerializer.Deserialize" /> method of the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlDeserializationEvents.OnUnknownAttribute">
      <summary>Gets or sets an object that represents the method that handles the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" /> event.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlAttributeEventHandler" /> that points to the event handler.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlDeserializationEvents.OnUnknownElement">
      <summary>Gets or sets an object that represents the method that handles the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement" /> event.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlElementEventHandler" /> that points to the event handler.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlDeserializationEvents.OnUnknownNode">
      <summary>Gets or sets an object that represents the method that handles the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" /> event.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlNodeEventHandler" /> that points to the event handler.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlDeserializationEvents.OnUnreferencedObject">
      <summary>Gets or sets an object that represents the method that handles the <see cref="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject" /> event.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.UnreferencedObjectEventHandler" /> that points to the event handler.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementAttribute">
      <summary>Indicates that a public field or property represents an XML element when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes or deserializes the object that contains it.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> class and specifies the name of the XML element.</summary>
      <param name="elementName">The XML element name of the serialized member. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> and specifies the name of the XML element and a derived type for the member to which the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> is applied. This member type is used when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes the object that contains it.</summary>
      <param name="elementName">The XML element name of the serialized member. </param>
      <param name="type">The <see cref="T:System.Type" /> of an object derived from the member's type. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> class and specifies a type for the member to which the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> is applied. This type is used by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> when serializing or deserializing object that contains it.</summary>
      <param name="type">The <see cref="T:System.Type" /> of an object derived from the member's type. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.DataType">
      <summary>Gets or sets the XML Schema definition (XSD) data type of the XML element generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <returns>An XML Schema data type, as defined by the World Wide Web Consortium (www.w3.org) document named "XML Schema Part 2: Datatypes".</returns>
      <exception cref="T:System.Exception">The XML Schema data type you have specified cannot be mapped to the.NET data type. </exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.ElementName">
      <summary>Gets or sets the name of the generated XML element.</summary>
      <returns>The name of the generated XML element. The default is the member identifier.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Form">
      <summary>Gets or sets a value that indicates whether the element is qualified.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm" /> values. The default is <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.IsNullable">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize a member that is set to null as an empty tag with the xsi:nil attribute set to true.</summary>
      <returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates the xsi:nil attribute; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Namespace">
      <summary>Gets or sets the namespace assigned to the XML element that results when the class is serialized.</summary>
      <returns>The namespace of the XML element.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Order">
      <summary>Gets or sets the explicit order in which the elements are serialized or deserialized.</summary>
      <returns>The order of the code generation.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Type">
      <summary>Gets or sets the object type used to represent the XML element.</summary>
      <returns>The <see cref="T:System.Type" /> of the member.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementAttributes">
      <summary>Represents a collection of <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> objects used by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> to override the default way it serializes a class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttributes" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.Add(System.Xml.Serialization.XmlElementAttribute)">
      <summary>Adds an <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> to the collection.</summary>
      <returns>The zero-based index of the newly added item.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> to add. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.Contains(System.Xml.Serialization.XmlElementAttribute)">
      <summary>Gets a value that specifies whether the collection contains the specified object.</summary>
      <returns>true, if the object exists in the collection; otherwise, false.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlElementAttribute" />  in question. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.CopyTo(System.Xml.Serialization.XmlElementAttribute[],System.Int32)">
      <summary>Copies the <see cref="T:System.Xml.Serialization.XmlElementAttributes" />, or a portion of it to a one-dimensional array.</summary>
      <param name="array">The <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> array to copy to. </param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.IndexOf(System.Xml.Serialization.XmlElementAttribute)">
      <summary>Gets the index of the specified <see cref="T:System.Xml.Serialization.XmlElementAttribute" />.</summary>
      <returns>The zero-based index of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlElementAttribute" />  you are interested in.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.Insert(System.Int32,System.Xml.Serialization.XmlElementAttribute)">
      <summary>Inserts an <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> into the collection.</summary>
      <param name="index">The zero-based index where the member is added. </param>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> to insert. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttributes.Item(System.Int32)">
      <summary>Gets or sets an <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> from the collection.</summary>
      <returns>The <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> at the specified index.</returns>
      <param name="index">The zero-based index of the collection member to get or set. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.Remove(System.Xml.Serialization.XmlElementAttribute)">
      <summary>Removes the specified object from the collection.</summary>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> to remove from the collection. </param>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementEventArgs">
      <summary>Provides data for the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement" /> event.</summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementEventArgs.Element">
      <summary>Gets the object that represents the unknown XML element.</summary>
      <returns>An <see cref="T:System.Xml.XmlElement" />.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementEventArgs.ExpectedElements">
      <summary>Gets a comma-delimited list of XML element names expected to be in an XML document instance.</summary>
      <returns>A comma-delimited list of XML element names. Each name is in the following format: <paramref name="namespace" />:<paramref name="name" />.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementEventArgs.LineNumber">
      <summary>Gets the line number where the unknown element was encountered if the XML reader is an <see cref="T:System.Xml.XmlTextReader" />.</summary>
      <returns>The line number where the unknown element was encountered if the XML reader is an <see cref="T:System.Xml.XmlTextReader" />; otherwise, -1.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementEventArgs.LinePosition">
      <summary>Gets the place in the line where the unknown element occurs if the XML reader is an <see cref="T:System.Xml.XmlTextReader" />.</summary>
      <returns>The number in the line where the unknown element occurs if the XML reader is an <see cref="T:System.Xml.XmlTextReader" />; otherwise, -1.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementEventArgs.ObjectBeingDeserialized">
      <summary>Gets the object the <see cref="T:System.Xml.Serialization.XmlSerializer" /> is deserializing.</summary>
      <returns>The object that is being deserialized by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement" /> event of an <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <param name="sender">The source of the event. </param>
      <param name="e">A <see cref="T:System.Xml.Serialization.XmlElementEventArgs" />  that contains the event data. </param>
    </member>
    <member name="T:System.Xml.Serialization.XmlEnumAttribute">
      <summary>Controls how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes an enumeration member.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> class, and specifies the XML value that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates or recognizes (when it serializes or deserializes the enumeration, respectively).</summary>
      <param name="name">The overriding name of the enumeration member. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlEnumAttribute.Name">
      <summary>Gets or sets the value generated in an XML-document instance when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes an enumeration, or the value recognized when it deserializes the enumeration member.</summary>
      <returns>The value generated in an XML-document instance when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes the enumeration, or the value recognized when it is deserializes the enumeration member.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlIgnoreAttribute">
      <summary>Instructs the <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> method of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> not to serialize the public field or public read/write property value.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlIgnoreAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlIgnoreAttribute" /> class.</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlIncludeAttribute">
      <summary>Allows the <see cref="T:System.Xml.Serialization.XmlSerializer" /> to recognize a type when it serializes or deserializes an object.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlIncludeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlIncludeAttribute" /> class.</summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to include. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlIncludeAttribute.Type">
      <summary>Gets or sets the type of the object to include.</summary>
      <returns>The <see cref="T:System.Type" /> of the object to include.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlMapping">
      <summary>Supports mappings between .NET Framework types and XML Schema data types. </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMapping.ElementName">
      <summary>Get the name of the mapped element.</summary>
      <returns>The name of the mapped element.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMapping.Namespace">
      <summary>Gets the namespace of the mapped element.</summary>
      <returns>The namespace of the mapped element.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlMapping.SetKey(System.String)">
      <summary>Sets the key used to look up the mapping.</summary>
      <param name="key">A <see cref="T:System.String" /> that contains the lookup key.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlMapping.XsdElementName">
      <summary>Gets the name of the XSD element of the mapping.</summary>
      <returns>The XSD element name.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlMappingAccess">
      <summary>Specifies whether a mapping is read, write, or both.</summary>
    </member>
    <member name="F:System.Xml.Serialization.XmlMappingAccess.None">
      <summary>Both read and write methods are generated.</summary>
    </member>
    <member name="F:System.Xml.Serialization.XmlMappingAccess.Read">
      <summary>Read methods are generated.</summary>
    </member>
    <member name="F:System.Xml.Serialization.XmlMappingAccess.Write">
      <summary>Write methods are generated.</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlMemberMapping">
      <summary>Maps a code entity in a .NET Framework Web service method to an element in a Web Services Description Language (WSDL) message.</summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.Any">
      <summary>Gets or sets a value that indicates whether the .NET Framework type maps to an XML element or attribute of any type. </summary>
      <returns>true, if the type maps to an XML any element or attribute; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.CheckSpecified">
      <summary>Gets a value that indicates whether the accompanying field in the .NET Framework type has a value specified.</summary>
      <returns>true, if the accompanying field has a value specified; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.ElementName">
      <summary>Gets the unqualified name of the XML element declaration that applies to this mapping. </summary>
      <returns>The unqualified name of the XML element declaration that applies to this mapping.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlMemberMapping.GenerateTypeName(System.CodeDom.Compiler.CodeDomProvider)">
      <summary>Returns the name of the type associated with the specified <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</summary>
      <returns>The name of the type.</returns>
      <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />  that contains the name of the type.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.MemberName">
      <summary>Gets the name of the Web service method member that is represented by this mapping. </summary>
      <returns>The name of the Web service method member represented by this mapping.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.Namespace">
      <summary>Gets the XML namespace that applies to this mapping. </summary>
      <returns>The XML namespace that applies to this mapping.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.TypeFullName">
      <summary>Gets the fully qualified type name of the .NET Framework type for this mapping. </summary>
      <returns>The fully qualified type name of the .NET Framework type for this mapping.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.TypeName">
      <summary>Gets the type name of the .NET Framework type for this mapping. </summary>
      <returns>The type name of the .NET Framework type for this mapping.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.TypeNamespace">
      <summary>Gets the namespace of the .NET Framework type for this mapping.</summary>
      <returns>The namespace of the .NET Framework type for this mapping.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.XsdElementName">
      <summary>Gets the XML element name as it appears in the service description document.</summary>
      <returns>The XML element name.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlMembersMapping">
      <summary>Provides mappings between .NET Framework Web service methods and Web Services Description Language (WSDL) messages that are defined for SOAP Web services. </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.Count">
      <summary>Gets the number of .NET Framework code entities that belong to a Web service method to which a SOAP message is being mapped. </summary>
      <returns>The number of mappings in the collection.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.Item(System.Int32)">
      <summary>Gets an item that contains internal type mapping information for a .NET Framework code entity that belongs to a Web service method being mapped to a SOAP message.</summary>
      <returns>The requested <see cref="T:System.Xml.Serialization.XmlMemberMapping" />.</returns>
      <param name="index">The index of the mapping to return.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.TypeName">
      <summary>Gets the name of the .NET Framework type being mapped to the data type of an XML Schema element that represents a SOAP message.</summary>
      <returns>The name of the .NET Framework type.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.TypeNamespace">
      <summary>Gets the namespace of the .NET Framework type being mapped to the data type of an XML Schema element that represents a SOAP message.</summary>
      <returns>The .NET Framework namespace of the mapping.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute">
      <summary>Specifies that the target property, parameter, return value, or class member contains prefixes associated with namespaces that are used within an XML document.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute" /> class.</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlNodeEventArgs">
      <summary>Provides data for the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" /> event.</summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.LineNumber">
      <summary>Gets the line number of the unknown XML node.</summary>
      <returns>The line number of the unknown XML node.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.LinePosition">
      <summary>Gets the position in the line of the unknown XML node.</summary>
      <returns>The position number of the unknown XML node.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.LocalName">
      <summary>Gets the XML local name of the XML node being deserialized.</summary>
      <returns>The XML local name of the node being deserialized.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.Name">
      <summary>Gets the name of the XML node being deserialized.</summary>
      <returns>The name of the node being deserialized.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.NamespaceURI">
      <summary>Gets the namespace URI that is associated with the XML node being deserialized.</summary>
      <returns>The namespace URI that is associated with the XML node being deserialized.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.NodeType">
      <summary>Gets the type of the XML node being deserialized.</summary>
      <returns>The <see cref="T:System.Xml.XmlNodeType" /> that represents the XML node being deserialized.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.ObjectBeingDeserialized">
      <summary>Gets the object being deserialized.</summary>
      <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.Text">
      <summary>Gets the text of the XML node being deserialized.</summary>
      <returns>The text of the XML node being deserialized.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlNodeEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" /> event of an <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <param name="sender">The source of the event. </param>
      <param name="e">An <see cref="T:System.Xml.Serialization.XmlNodeEventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:System.Xml.Serialization.XmlReflectionImporter">
      <summary>Generates mappings to XML schema element declarations, including literal XML Schema Definition (XSD) message parts in a Web Services Description Language (WSDL) document, for .NET Framework types or Web service method information. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlReflectionImporter" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlReflectionImporter" /> class using the specified default XML namespace. </summary>
      <param name="defaultNamespace">The default XML namespace to use for imported type mappings.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor(System.Xml.Serialization.XmlAttributeOverrides)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlReflectionImporter" /> class using the specified XML serialization overrides. </summary>
      <param name="attributeOverrides">An object that overrides how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class serializes mapped types.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor(System.Xml.Serialization.XmlAttributeOverrides,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlReflectionImporter" /> class using the specified XML serialization overrides and default XML namespace. </summary>
      <param name="attributeOverrides">An object that overrides how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class serializes mapped types.</param>
      <param name="defaultNamespace">The default XML namespace to use for imported type mappings.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean)">
      <summary>Generates internal type mappings for information from a Web service method. </summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlMembersMapping" /> with mappings to the element parts of a WSDL message definition.</returns>
      <param name="elementName">An XML element name produced from the Web service method.</param>
      <param name="ns">An XML element namespace produced from the Web service method.</param>
      <param name="members">An array of <see cref="T:System.Xml.Serialization.XmlReflectionMember" />  objects that contain .NET Framework code entities that belong to a Web service method.</param>
      <param name="hasWrapperElement">true if elements that correspond to Web Services Description Language (WSDL) message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean)">
      <summary>Returns internal type mappings using information from a Web service method, and allows you to specify an XML element name, XML namespace, and other options.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlMembersMapping" /> that contains the mappings.</returns>
      <param name="elementName">An XML element name produced from the Web service method.</param>
      <param name="ns">An XML element namespace produced from the Web service method.</param>
      <param name="members">An array of <see cref="T:System.Xml.Serialization.XmlReflectionMember" />  objects that contain .NET Framework code entities that belong to a Web service method.</param>
      <param name="hasWrapperElement">true if elements that correspond to Web Services Description Language (WSDL) message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, false.</param>
      <param name="rpc">true if the method is a remote procedure call; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean,System.Boolean)">
      <summary>Returns internal type mappings using information from a Web service method, and allows you to specify an XML element name, XML namespace, and other options.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlMembersMapping" /> that contains the mappings.</returns>
      <param name="elementName">An XML element name produced from the Web service method.</param>
      <param name="ns">An XML element namespace produced from the Web service method.</param>
      <param name="members">An array of <see cref="T:System.Xml.Serialization.XmlReflectionMember" />  objects that contain .NET Framework code entities that belong to a Web service method.</param>
      <param name="hasWrapperElement">true if elements that correspond to Web Services Description Language (WSDL) message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, false.</param>
      <param name="rpc">true if the method is a remote procedure call; otherwise, false.</param>
      <param name="openModel">true to specify that the generated schema type will be marked with the &lt;xs:anyAttribute&gt; element; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean,System.Boolean,System.Xml.Serialization.XmlMappingAccess)">
      <summary>Generates internal type mappings for information from a Web service method.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlMembersMapping" /> that contains the mappings.</returns>
      <param name="elementName">An XML element name produced from the Web service method.</param>
      <param name="ns">An XML element namespace produced from the Web service method.</param>
      <param name="members">An array of <see cref="T:System.Xml.Serialization.XmlReflectionMember" />  objects that contain .NET Framework code entities that belong to a Web service method.</param>
      <param name="hasWrapperElement">true if elements that correspond to Web Services Description Language (WSDL) message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, false.</param>
      <param name="rpc">true if the method is a remote procedure call; otherwise, false.</param>
      <param name="openModel">true to specify that the generated schema type will be marked with the &lt;xs:anyAttribute&gt; element; otherwise, false.</param>
      <param name="access">One of the <see cref="T:System.Xml.Serialization.XmlMappingAccess" /> values. The default is None.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type)">
      <summary>Generates a mapping to an XML Schema element for a specified .NET Framework type. </summary>
      <returns>Internal .NET Framework mapping of a type to an XML Schema element.</returns>
      <param name="type">The .NET Framework type for which to generate a type mapping.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type,System.String)">
      <summary>Generates a mapping to an XML Schema element for a .NET Framework type, using the specified type and namespace. </summary>
      <returns>Internal .NET Framework mapping of a type to an XML Schema element.</returns>
      <param name="type">The .NET Framework type for which to generate a type mapping.</param>
      <param name="defaultNamespace">The default XML namespace to use.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type,System.Xml.Serialization.XmlRootAttribute)">
      <summary>Generates a mapping to an XML Schema element for a .NET Framework type, using the specified type and attribute. </summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> that represents a mapping of a .NET Framework type to an XML Schema element.</returns>
      <param name="type">The .NET Framework type for which to generate a type mapping.</param>
      <param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> attribute that is applied to the type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type,System.Xml.Serialization.XmlRootAttribute,System.String)">
      <summary>Generates a mapping to an XML Schema element for a .NET Framework type, using the specified type, attribute, and namespace. </summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> that contains the internal .NET Framework mapping of a type to an XML Schema element.</returns>
      <param name="type">The .NET Framework type for which to generate a type mapping.</param>
      <param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> attribute that is applied to the type.</param>
      <param name="defaultNamespace">The default XML namespace to use.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.IncludeType(System.Type)">
      <summary>Includes mappings for a type for later use when import methods are invoked. </summary>
      <param name="type">The .NET Framework type for which to save type mapping information.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.IncludeTypes(System.Reflection.ICustomAttributeProvider)">
      <summary>Includes mappings for derived types for later use when import methods are invoked. </summary>
      <param name="provider">An instance of the <see cref="T:System.Reflection.ICustomAttributeProvider" />  class that contains custom attributes derived from the <see cref="T:System.Xml.Serialization.XmlIncludeAttribute" /> attribute.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlReflectionMember">
      <summary>Provides mappings between code entities in .NET Framework Web service methods and the content of Web Services Description Language (WSDL) messages that are defined for SOAP Web services. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionMember.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlReflectionMember" /> class. </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.IsReturnValue">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlReflectionMember" /> represents a Web service method return value, as opposed to an output parameter. </summary>
      <returns>true, if the member represents a Web service return value; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.MemberName">
      <summary>Gets or sets the name of the Web service method member for this mapping. </summary>
      <returns>The name of the Web service method.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.MemberType">
      <summary>Gets or sets the type of the Web service method member code entity that is represented by this mapping. </summary>
      <returns>The <see cref="T:System.Type" /> of the Web service method member code entity that is represented by this mapping.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.OverrideIsNullable">
      <summary>Gets or sets a value that indicates that the value of the corresponding XML element definition's isNullable attribute is false.</summary>
      <returns>True to override the <see cref="P:System.Xml.Serialization.XmlElementAttribute.IsNullable" /> property; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.SoapAttributes">
      <summary>Gets or sets a <see cref="T:System.Xml.Serialization.SoapAttributes" /> with the collection of SOAP-related attributes that have been applied to the member code entity. </summary>
      <returns>A <see cref="T:System.Xml.Serialization.SoapAttributes" /> that contains the objects that represent SOAP attributes applied to the member.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.XmlAttributes">
      <summary>Gets or sets an <see cref="T:System.Xml.Serialization.XmlAttributes" /> with the collection of <see cref="T:System.Xml.Serialization.XmlSerializer" />-related attributes that have been applied to the member code entity. </summary>
      <returns>An <see cref="T:System.XML.Serialization.XmlAttributes" /> that represents XML attributes that have been applied to the member code.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlRootAttribute">
      <summary>Controls XML serialization of the attribute target as an XML root element.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> class and specifies the name of the XML root element.</summary>
      <param name="elementName">The name of the XML root element. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.DataType">
      <summary>Gets or sets the XSD data type of the XML root element.</summary>
      <returns>An XSD (XML Schema Document) data type, as defined by the World Wide Web Consortium (www.w3.org) document named "XML Schema: DataTypes".</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.ElementName">
      <summary>Gets or sets the name of the XML element that is generated and recognized by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class's <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> and <see cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" /> methods, respectively.</summary>
      <returns>The name of the XML root element that is generated and recognized in an XML-document instance. The default is the name of the serialized class.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.IsNullable">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize a member that is set to null into the xsi:nil attribute set to true.</summary>
      <returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates the xsi:nil attribute; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.Namespace">
      <summary>Gets or sets the namespace for the XML root element.</summary>
      <returns>The namespace for the XML element.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSchemaEnumerator">
      <summary>Enables iteration over a collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaEnumerator.#ctor(System.Xml.Serialization.XmlSchemas)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemaEnumerator" /> class. </summary>
      <param name="list">The <see cref="T:System.Xml.Serialization.XmlSchemas" /> object you want to iterate over.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaEnumerator.Current">
      <summary>Gets the current element in the collection.</summary>
      <returns>The current <see cref="T:System.Xml.Schema.XmlSchema" /> object in the collection.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaEnumerator.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Xml.Serialization.XmlSchemaEnumerator" />.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaEnumerator.MoveNext">
      <summary>Advances the enumerator to the next item in the collection.</summary>
      <returns>true if the move is successful; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaEnumerator.System#Collections#IEnumerator#Current"></member>
    <member name="M:System.Xml.Serialization.XmlSchemaEnumerator.System#Collections#IEnumerator#Reset"></member>
    <member name="T:System.Xml.Serialization.XmlSchemaExporter">
      <summary>Populates <see cref="T:System.Xml.Schema.XmlSchema" /> objects with XML schema element declarations that are found in type mapping objects. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.#ctor(System.Xml.Serialization.XmlSchemas)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemaExporter" /> class. </summary>
      <param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects to which element declarations obtained from type mappings are added.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportAnyType(System.String)">
      <summary>Exports an &lt;any&gt; element to the <see cref="T:System.Xml.Schema.XmlSchema" /> object that is identified by the specified namespace.</summary>
      <returns>An arbitrary name assigned to the &lt;any&gt; element declaration.</returns>
      <param name="ns">The namespace of the XML schema document to which to add an &lt;any&gt; element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportAnyType(System.Xml.Serialization.XmlMembersMapping)">
      <summary>Adds an element declaration for an object or type to a SOAP message or to an <see cref="T:System.Xml.Schema.XmlSchema" /> object.</summary>
      <returns>The string "any" with an appended integer. </returns>
      <param name="members">An <see cref="T:System.Xml.Serialization.XmlMembersMapping" />  that contains mappings to export.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping)">
      <summary>Adds an element declaration to the applicable <see cref="T:System.Xml.Schema.XmlSchema" /> for each of the element parts of a literal SOAP message definition. </summary>
      <param name="xmlMembersMapping">The internal .NET Framework type mappings for the element parts of a Web Services Description Language (WSDL) message definition.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping,System.Boolean)">
      <summary>Adds an element declaration to the applicable <see cref="T:System.Xml.Schema.XmlSchema" /> for each of the element parts of a literal SOAP message definition, and specifies whether enclosing elements are included.</summary>
      <param name="xmlMembersMapping">The internal mapping between a .NET Framework type and an XML schema element.</param>
      <param name="exportEnclosingType">true if the schema elements that enclose the schema are to be included; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportTypeMapping(System.Xml.Serialization.XmlMembersMapping)">
      <summary>Adds an element declaration to the applicable <see cref="T:System.Xml.Schema.XmlSchema" /> object for a single element part of a literal SOAP message definition.</summary>
      <returns>An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the qualified XML name of the exported element declaration.</returns>
      <param name="xmlMembersMapping">Internal .NET Framework type mappings for the element parts of a Web Services Description Language (WSDL) message definition.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportTypeMapping(System.Xml.Serialization.XmlTypeMapping)">
      <summary>Adds an element declaration for a .NET Framework type to the applicable <see cref="T:System.Xml.Schema.XmlSchema" /> object. </summary>
      <param name="xmlTypeMapping">The internal mapping between a .NET Framework type and an XML schema element.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlSchemaImporter">
      <summary>Generates internal mappings to .NET Framework types for XML schema element declarations, including literal XSD message parts in a WSDL document. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemaImporter" /> class, taking a collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects representing the XML schemas used by SOAP literal messages defined in a WSDL document. </summary>
      <param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider,System.Xml.Serialization.ImportContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemaImporter" /> class. </summary>
      <param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects.</param>
      <param name="options">A bitwise combination of the <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> values that specifies the options to use when generating .NET Framework types for a Web service.</param>
      <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> used to generate the serialization code.</param>
      <param name="context">A <see cref="T:System.Xml.Serialization.ImportContext" /> instance that specifies the import context.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeGenerationOptions,System.Xml.Serialization.ImportContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemaImporter" /> class for a collection of XML schemas, using the specified code generation options and import context.</summary>
      <param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects.</param>
      <param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> enumeration that specifies code generation options.</param>
      <param name="context">A <see cref="T:System.Xml.Serialization.ImportContext" /> instance that specifies the import context.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeIdentifiers)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemaImporter" /> class, taking a collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects that represents the XML schemas used by SOAP literal messages, plus classes being generated for bindings defined in a Web Services Description Language (WSDL) document. </summary>
      <param name="schemas">An <see cref="T:System.Xml.Serialization.XmlSchemas" /> object.</param>
      <param name="typeIdentifiers">A <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> object that specifies a collection of classes being generated for bindings defined in a WSDL document.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeIdentifiers,System.Xml.Serialization.CodeGenerationOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemaImporter" /> class, taking a collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects that represents the XML schemas used by SOAP literal messages, plus classes being generated for bindings defined in a WSDL document, and a <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> enumeration value.</summary>
      <param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects.</param>
      <param name="typeIdentifiers">A <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> object that specifies a collection of classes being generated for bindings defined in a WSDL document.</param>
      <param name="options">A bitwise combination of the <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> values that specifies the options to use when generating .NET Framework types for a Web service.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportAnyType(System.Xml.XmlQualifiedName,System.String)">
      <summary>Generates internal type mapping information for a single, (SOAP) literal element part defined in a WSDL document.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlMembersMapping" /> representing the .NET Framework type mapping for a single element part of a WSDL message definition.</returns>
      <param name="typeName">An <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the name of an element's type for which a .NET Framework type is generated.</param>
      <param name="elementName">The name of the part element in the WSDL document.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportDerivedTypeMapping(System.Xml.XmlQualifiedName,System.Type)">
      <summary>Generates internal type mapping information for an element defined in an XML schema document. </summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> representing the.NET Framework type mapping information for an XML schema element.</returns>
      <param name="name">An <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the name of an element defined in an XML schema document.</param>
      <param name="baseType">A base type for the .NET Framework type that is generated to correspond to an XSD element's type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportDerivedTypeMapping(System.Xml.XmlQualifiedName,System.Type,System.Boolean)">
      <summary>Generates internal type mapping information for an element defined in an XML schema document or as a part in a WSDL document.</summary>
      <returns>The .NET Framework type mapping information for an XML schema element.</returns>
      <param name="name">An <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the name of an element defined in an XML schema document.</param>
      <param name="baseType">A base type for the .NET Framework type that is generated to correspond to an XSD element's type.</param>
      <param name="baseTypeCanBeIndirect">true to indicate that the type corresponding to an XSD element can indirectly inherit from the base type; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.SoapSchemaMember[])">
      <summary>Generates internal type mapping information for the element parts of a literal-use SOAP message defined in a WSDL document.</summary>
      <returns>A <see cref="T:System.Xml.Serialization.XmlMembersMapping" /> that contains type mapping information.</returns>
      <param name="name">The name of the element for which to generate a mapping.</param>
      <param name="ns">The namespace of the element for which to generate a mapping.</param>
      <param name="members">An array of <see cref="T:System.Xml.Serialization.SoapSchemaMember" /> instances that specifies the members of the element for which to generate a mapping.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportMembersMapping(System.Xml.XmlQualifiedName)">
      <summary>Generates internal type mapping information for a single element part of a literal-use SOAP message defined in a WSDL document. </summary>
      <returns>The .NET Framework type mapping for a WSDL message definition containing a single element part.</returns>
      <param name="name">An <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the name of the message part.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportMembersMapping(System.Xml.XmlQualifiedName[])">
      <summary>Generates internal type mapping information for the element parts of a literal-use SOAP message defined in a WSDL document. </summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlMembersMapping" /> that represents the .NET Framework type mappings for the element parts of a WSDL message definition.</returns>
      <param name="names">An array of type <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the names of the message parts.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportMembersMapping(System.Xml.XmlQualifiedName[],System.Type,System.Boolean)">
      <summary>Generates internal type mapping information for the element parts of a literal-use SOAP message defined in a WSDL document.</summary>
      <returns>The .NET Framework type mappings for the element parts of a WSDL message definition.</returns>
      <param name="names">An array of type <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the names of the message parts.</param>
      <param name="baseType">A base type for all .NET Framework types that are generated to correspond to message parts.</param>
      <param name="baseTypeCanBeIndirect">true to indicate that the types corresponding to message parts can indirectly inherit from the base type; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportSchemaType(System.Xml.XmlQualifiedName)">
      <summary>Generates internal type mapping information for an element defined in an XML schema document. </summary>
      <returns>A <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> object that describes a type mapping.</returns>
      <param name="typeName">A <see cref="T:System.Xml.XmlQualifiedName" /> that specifies an XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportSchemaType(System.Xml.XmlQualifiedName,System.Type)">
      <summary>Generates internal type mapping information for an element defined in an XML schema document. </summary>
      <returns>A <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> object that describes a type mapping.</returns>
      <param name="typeName">A <see cref="T:System.Xml.XmlQualifiedName" /> that specifies an XML element.</param>
      <param name="baseType">A <see cref="T:System.Type" /> object that specifies a base type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportSchemaType(System.Xml.XmlQualifiedName,System.Type,System.Boolean)">
      <summary>Generates internal type mapping information for an element defined in an XML schema document. </summary>
      <returns>A <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> object that describes a type mapping.</returns>
      <param name="typeName">A <see cref="T:System.Xml.XmlQualifiedName" /> that specifies an XML element.</param>
      <param name="baseType">A <see cref="T:System.Type" /> object that specifies a base type.</param>
      <param name="baseTypeCanBeIndirect">A <see cref="T:System.Boolean" /> value that specifies whether the generated type can indirectly inherit the <paramref name="baseType" />.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportTypeMapping(System.Xml.XmlQualifiedName)">
      <summary>Generates internal type mapping information for an element defined in an XML schema document. </summary>
      <returns>The .NET Framework type mapping information for an XML schema element.</returns>
      <param name="name">An <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the name of an element defined in an XML schema document.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlSchemaProviderAttribute">
      <summary>When applied to a type, stores the name of a static method of the type that returns an XML schema and a <see cref="T:System.Xml.XmlQualifiedName" /> (or <see cref="T:System.Xml.Schema.XmlSchemaType" /> for anonymous types) that controls the serialization of the type.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaProviderAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> class, taking the name of the static method that supplies the type's XML schema.</summary>
      <param name="methodName">The name of the static method that must be implemented.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.IsAny">
      <summary>Gets or sets a value that determines whether the target class is a wildcard, or that the schema for the class has contains only an xs:any element.</summary>
      <returns>true, if the class is a wildcard, or if the schema contains only the xs:any element; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.MethodName">
      <summary>Gets the name of the static method that supplies the type's XML schema and the name of its XML Schema data type.</summary>
      <returns>The name of the method that is invoked by the XML infrastructure to return an XML schema.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSchemas">
      <summary>Represents the collection of XML schemas.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemas" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Add(System.Xml.Schema.XmlSchema)">
      <summary>Adds an object to the end of the collection.</summary>
      <returns>The index at which the <see cref="T:System.Xml.Schema.XmlSchema" /> is added.</returns>
      <param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema" /> object to be added to the collection of objects. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Add(System.Xml.Schema.XmlSchema,System.Uri)">
      <summary>Adds an <see cref="T:System.Xml.Schema.XmlSchema" /> object that represents an assembly reference to the collection.</summary>
      <returns>The index at which the <see cref="T:System.Xml.Schema.XmlSchema" /> is added.</returns>
      <param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema" /> to add.</param>
      <param name="baseUri">The <see cref="T:System.Uri" /> of the schema object.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Add(System.Xml.Serialization.XmlSchemas)">
      <summary>Adds an instance of the <see cref="T:System.Xml.Serialization.XmlSchemas" /> class to the end of the collection.</summary>
      <param name="schemas">The <see cref="T:System.Xml.Serialization.XmlSchemas" /> object to be added to the end of the collection. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.AddReference(System.Xml.Schema.XmlSchema)">
      <summary>Adds an <see cref="T:System.Xml.Schema.XmlSchema" /> object that represents an assembly reference to the collection.</summary>
      <param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema" /> to add.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Compile(System.Xml.Schema.ValidationEventHandler,System.Boolean)">
      <summary>Processes the element and attribute names in the XML schemas and, optionally, validates the XML schemas. </summary>
      <param name="handler">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> that specifies the callback method that handles errors and warnings during XML Schema validation, if the strict parameter is set to true.</param>
      <param name="fullCompile">true to validate the XML schemas in the collection using the <see cref="M:System.Xml.Serialization.XmlSchemas.Compile(System.Xml.Schema.ValidationEventHandler,System.Boolean)" /> method of the <see cref="T:System.Xml.Serialization.XmlSchemas" /> class; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Contains(System.String)">
      <summary>Returns a value that indicates whether the collection contains an <see cref="T:System.Xml.Schema.XmlSchema" /> object that belongs to the specified namespace.</summary>
      <returns>true if the item is found; otherwise, false.</returns>
      <param name="targetNamespace">The namespace of the item to check for.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Contains(System.Xml.Schema.XmlSchema)">
      <summary>Determines whether the <see cref="T:System.Xml.Serialization.XmlSchemas" /> contains a specific schema.</summary>
      <returns>true, if the collection contains the specified item; otherwise, false.</returns>
      <param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema" /> object to locate. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
      <summary>Copies the entire <see cref="T:System.Xml.Serialization.XmlSchemas" /> to a compatible one-dimensional <see cref="T:System.Array" />, which starts at the specified index of the target array.</summary>
      <param name="array"></param>
      <param name="index"></param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Find(System.Xml.XmlQualifiedName,System.Type)">
      <summary>Locates in one of the XML schemas an <see cref="T:System.Xml.Schema.XmlSchemaObject" /> of the specified name and type. </summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> instance, such as an <see cref="T:System.Xml.Schema.XmlSchemaElement" /> or <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />.</returns>
      <param name="name">An <see cref="T:System.Xml.XmlQualifiedName" /> that specifies a fully qualified name with a namespace used to locate an <see cref="T:System.Xml.Schema.XmlSchema" /> object in the collection.</param>
      <param name="type">The <see cref="T:System.Type" /> of the object to find. Possible types include: <see cref="T:System.Xml.Schema.XmlSchemaGroup" />, <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup" />, <see cref="T:System.Xml.Schema.XmlSchemaElement" />, <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />, and <see cref="T:System.Xml.Schema.XmlSchemaNotation" />.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.GetSchemas(System.String)">
      <summary>Gets a collection of schemas that belong to the same namespace.</summary>
      <returns>An <see cref="T:System.Collections.IList" /> implementation that contains the schemas.</returns>
      <param name="ns">The namespace of the schemas to retrieve.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.IndexOf(System.Xml.Schema.XmlSchema)">
      <summary>Searches for the specified schema and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Xml.Serialization.XmlSchemas" />.</summary>
      <returns>The zero-based index of the first occurrence of the value within the entire <see cref="T:System.Xml.Serialization.XmlSchemas" />, if found; otherwise, -1.</returns>
      <param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema" /> to locate. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Insert(System.Int32,System.Xml.Schema.XmlSchema)">
      <summary>Inserts a schema into the <see cref="T:System.Xml.Serialization.XmlSchemas" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="schema" /> should be inserted. </param>
      <param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema" /> object to be inserted. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemas.IsCompiled">
      <summary>Gets a value that indicates whether the schemas have been compiled.</summary>
      <returns>true, if the schemas have been compiled; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.IsDataSet(System.Xml.Schema.XmlSchema)">
      <summary>Static method that determines whether the specified XML schema contains a custom IsDataSet attribute set to true, or its equivalent. </summary>
      <returns>true if the specified schema exists; otherwise, false.</returns>
      <param name="schema">The XML schema to check for an IsDataSet attribute with a true value.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemas.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchema" /> object at the specified index. </summary>
      <returns>The specified <see cref="T:System.Xml.Schema.XmlSchema" />.</returns>
      <param name="index">The index of the item to retrieve.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemas.Item(System.String)">
      <summary>Gets a specified <see cref="T:System.Xml.Schema.XmlSchema" /> object that represents the XML schema associated with the specified namespace.</summary>
      <returns>The specified <see cref="T:System.Xml.Schema.XmlSchema" /> object.</returns>
      <param name="ns">The namespace of the specified object.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.OnClear">
      <summary>Performs additional custom processes when clearing the contents of the <see cref="T:System.Xml.Serialization.XmlSchemas" /> instance.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.OnInsert(System.Int32,System.Object)">
      <summary>Performs additional custom processes before inserting a new element into the <see cref="T:System.Xml.Serialization.XmlSchemas" /> instance.</summary>
      <param name="index">The zero-based index at which to insert <paramref name="value" />. </param>
      <param name="value">The new value of the element at <paramref name="index" />. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.OnRemove(System.Int32,System.Object)">
      <summary>Performs additional custom processes when removing an element from the <see cref="T:System.Xml.Serialization.XmlSchemas" /> instance.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> can be found. </param>
      <param name="value">The value of the element to remove at <paramref name="index" />. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.OnSet(System.Int32,System.Object,System.Object)">
      <summary>Performs additional custom processes before setting a value in the <see cref="T:System.Xml.Serialization.XmlSchemas" /> instance.</summary>
      <param name="index">The zero-based index at which <paramref name="oldValue" /> can be found. </param>
      <param name="oldValue">The value to replace with <paramref name="newValue" />. </param>
      <param name="newValue">The new value of the element at <paramref name="index" />. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Remove(System.Xml.Schema.XmlSchema)">
      <summary>Removes the first occurrence of a specific schema from the <see cref="T:System.Xml.Serialization.XmlSchemas" />.</summary>
      <param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema" /> to remove. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection of XML schemas.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationCollectionFixupCallback">
      <summary>Delegate used by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class for deserialization of SOAP-encoded XML data types that map to collections or enumerations. </summary>
      <param name="collection"></param>
      <param name="collectionItems"></param>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationFixupCallback">
      <summary>Delegate used by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class for deserialization of SOAP-encoded XML data. </summary>
      <param name="fixup"></param>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationGeneratedCode">
      <summary>An abstract class that is the base class for <see cref="T:System.Xml.Serialization.XmlSerializationReader" /> and <see cref="T:System.Xml.Serialization.XmlSerializationWriter" /> and that contains methods common to both of these types.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationGeneratedCode.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Xml.Serialization.XmlSerializationGeneratedCode" /> class. </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationReadCallback">
      <summary>Delegate used by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class for deserialization of types from SOAP-encoded, non-root XML data. </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationReader">
      <summary>Controls deserialization by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializationReader" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.AddFixup(System.Xml.Serialization.XmlSerializationReader.CollectionFixup)">
      <summary>Stores an object that contains a callback method that will be called, as necessary, to fill in .NET Framework collections or enumerations that map to SOAP-encoded arrays or SOAP-encoded, multi-referenced elements. </summary>
      <param name="fixup">A <see cref="T:System.Xml.Serialization.XmlSerializationCollectionFixupCallback" /> delegate and the callback method's input data.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.AddFixup(System.Xml.Serialization.XmlSerializationReader.Fixup)">
      <summary>Stores an object that contains a callback method instance that will be called, as necessary, to fill in the objects in a SOAP-encoded array. </summary>
      <param name="fixup">An <see cref="T:System.Xml.Serialization.XmlSerializationFixupCallback" /> delegate and the callback method's input data.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.AddReadCallback(System.String,System.String,System.Type,System.Xml.Serialization.XmlSerializationReadCallback)">
      <summary>Stores an implementation of the <see cref="T:System.Xml.Serialization.XmlSerializationReadCallback" /> delegate and its input data for a later invocation. </summary>
      <param name="name">The name of the .NET Framework type that is being deserialized.</param>
      <param name="ns">The namespace of the .NET Framework type that is being deserialized.</param>
      <param name="type">The <see cref="T:System.Type" /> to be deserialized.</param>
      <param name="read">An <see cref="T:System.Xml.Serialization.XmlSerializationReadCallback" /> delegate.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.AddTarget(System.String,System.Object)">
      <summary>Stores an object that is being deserialized from a SOAP-encoded multiRef element for later access through the <see cref="M:System.Xml.Serialization.XmlSerializationReader.GetTarget(System.String)" /> method. </summary>
      <param name="id">The value of the id attribute of a multiRef element that identifies the element.</param>
      <param name="o">The object that is deserialized from the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CheckReaderCount(System.Int32@,System.Int32@)">
      <summary>Checks whether the deserializer has advanced.</summary>
      <param name="whileIterations">The current count in a while loop.</param>
      <param name="readerCount">The current <see cref="P:System.Xml.Serialization.XmlSerializationReader.ReaderCount" />. </param>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.Serialization.XmlSerializationReader.ReaderCount" /> has not advanced. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CollapseWhitespace(System.String)">
      <summary>Removes all occurrences of white space characters from the beginning and end of the specified string.</summary>
      <returns>The trimmed string.</returns>
      <param name="value">The string that will have its white space trimmed.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateAbstractTypeException(System.String,System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that an object being deserialized should be abstract. </summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="name">The name of the abstract type.</param>
      <param name="ns">The .NET Framework namespace of the abstract type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateBadDerivationException(System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>Populates an object from its XML representation at the current location of the <see cref="T:System.Xml.XmlReader" />, with an option to read the inner element.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="xsdDerived">The local name of the derived XML Schema data type.</param>
      <param name="nsDerived">The namespace of the derived XML Schema data type.</param>
      <param name="xsdBase">The local name of the base XML Schema data type.</param>
      <param name="nsBase">The namespace of the base XML Schema data type.</param>
      <param name="clrDerived">The namespace of the derived .NET Framework type.</param>
      <param name="clrBase">The name of the base .NET Framework type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateCtorHasSecurityException(System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that an object being deserialized cannot be instantiated because the constructor throws a security exception.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="typeName">The name of the type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateInaccessibleConstructorException(System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that an object being deserialized cannot be instantiated because there is no constructor available.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="typeName">The name of the type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateInvalidCastException(System.Type,System.Object)">
      <summary>Creates an <see cref="T:System.InvalidCastException" /> that indicates that an explicit reference conversion failed.</summary>
      <returns>An <see cref="T:System.InvalidCastException" /> exception.</returns>
      <param name="type">The <see cref="T:System.Type" /> that an object cannot be cast to. This type is incorporated into the exception message.</param>
      <param name="value">The object that cannot be cast. This object is incorporated into the exception message.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateInvalidCastException(System.Type,System.Object,System.String)">
      <summary>Creates an <see cref="T:System.InvalidCastException" /> that indicates that an explicit reference conversion failed.</summary>
      <returns>An <see cref="T:System.InvalidCastException" /> exception.</returns>
      <param name="type">The <see cref="T:System.Type" /> that an object cannot be cast to. This type is incorporated into the exception message.</param>
      <param name="value">The object that cannot be cast. This object is incorporated into the exception message.</param>
      <param name="id">A string identifier.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateMissingIXmlSerializableType(System.String,System.String,System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that a derived type that is mapped to an XML Schema data type cannot be located.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="name">The local name of the XML Schema data type that is mapped to the unavailable derived type.</param>
      <param name="ns">The namespace of the XML Schema data type that is mapped to the unavailable derived type.</param>
      <param name="clrType">The full name of the .NET Framework base type for which a derived type cannot be located.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateReadOnlyCollectionException(System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that a SOAP-encoded collection type cannot be modified and its values cannot be filled in. </summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="name">The fully qualified name of the .NET Framework type for which there is a mapping.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateUnknownConstantException(System.String,System.Type)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that an enumeration value is not valid. </summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="value">The enumeration value that is not valid.</param>
      <param name="enumType">The enumeration type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateUnknownNodeException">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that the current position of <see cref="T:System.Xml.XmlReader" /> represents an unknown XML node. </summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateUnknownTypeException(System.Xml.XmlQualifiedName)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that a type is unknown. </summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="type">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the name of the unknown type.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.DecodeName">
      <summary>Gets or sets a value that determines whether XML strings are translated into valid .NET Framework type names.</summary>
      <returns>true if XML strings are decoded into valid .NET Framework type names; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.Document">
      <summary>Gets the XML document object into which the XML document is being deserialized. </summary>
      <returns>An <see cref="T:System.Xml.XmlDocument" /> that represents the deserialized <see cref="T:System.Xml.XmlDocument" /> data.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.EnsureArrayIndex(System.Array,System.Int32,System.Type)">
      <summary>Ensures that a given array, or a copy, is large enough to contain a specified index. </summary>
      <returns>The existing <see cref="T:System.Array" />, if it is already large enough; otherwise, a new, larger array that contains the original array's elements.</returns>
      <param name="a">The <see cref="T:System.Array" /> that is being checked.</param>
      <param name="index">The required index.</param>
      <param name="elementType">The <see cref="T:System.Type" /> of the array's elements.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.FixupArrayRefs(System.Object)">
      <summary>Fills in the values of a SOAP-encoded array whose data type maps to a .NET Framework reference type. </summary>
      <param name="fixup">An object that contains the array whose values are filled in.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.GetArrayLength(System.String,System.String)">
      <summary>Gets the length of the SOAP-encoded array where the <see cref="T:System.Xml.XmlReader" /> is currently positioned. </summary>
      <returns>The length of the SOAP array.</returns>
      <param name="name">The local name that the array should have.</param>
      <param name="ns">The namespace that the array should have.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.GetNullAttr">
      <summary>Determines whether the XML element where the <see cref="T:System.Xml.XmlReader" /> is currently positioned has a null attribute set to the value true.</summary>
      <returns>true if <see cref="T:System.Xml.XmlReader" /> is currently positioned over a null attribute with the value true; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.GetTarget(System.String)">
      <summary>Gets an object that is being deserialized from a SOAP-encoded multiRef element and that was stored earlier by <see cref="M:System.Xml.Serialization.XmlSerializationReader.AddTarget(System.String,System.Object)" />.  </summary>
      <returns>An object to be deserialized from a SOAP-encoded multiRef element.</returns>
      <param name="id">The value of the id attribute of a multiRef element that identifies the element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.GetXsiType">
      <summary>Gets the value of the xsi:type attribute for the XML element at the current location of the <see cref="T:System.Xml.XmlReader" />. </summary>
      <returns>An XML qualified name that indicates the data type of an XML element.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.InitCallbacks">
      <summary>Initializes callback methods that populate objects that map to SOAP-encoded XML data. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.InitIDs">
      <summary>Stores element and attribute names in a <see cref="T:System.Xml.NameTable" /> object. </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.IsReturnValue">
      <summary>Gets or sets a value that should be true for a SOAP 1.1 return value.</summary>
      <returns>true, if the value is a return value. </returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.IsXmlnsAttribute(System.String)">
      <summary>Determines whether an XML attribute name indicates an XML namespace. </summary>
      <returns>true if the XML attribute name indicates an XML namespace; otherwise, false.</returns>
      <param name="name">The name of an XML attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ParseWsdlArrayType(System.Xml.XmlAttribute)">
      <summary>Sets the value of the XML attribute if it is of type arrayType from the Web Services Description Language (WSDL) namespace. </summary>
      <param name="attr">An <see cref="T:System.Xml.XmlAttribute" /> that may have the type wsdl:array.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadElementQualifiedName">
      <summary>Makes the <see cref="T:System.Xml.XmlReader" /> read the fully qualified name of the element where it is currently positioned. </summary>
      <returns>The fully qualified name of the current XML element.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadEndElement">
      <summary>Makes the <see cref="T:System.Xml.XmlReader" /> read an XML end tag. </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.Reader">
      <summary>Gets the <see cref="T:System.Xml.XmlReader" /> object that is being used by <see cref="T:System.Xml.Serialization.XmlSerializationReader" />. </summary>
      <returns>The <see cref="T:System.Xml.XmlReader" /> that is being used by the <see cref="T:System.Xml.Serialization.XmlSerializationReader" />.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.ReaderCount">
      <summary>Gets the current count of the <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>The current count of an <see cref="T:System.Xml.XmlReader" />.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadNull">
      <summary>Instructs the <see cref="T:System.Xml.XmlReader" /> to read the current XML element if the element has a null attribute with the value true. </summary>
      <returns>true if the element has a null="true" attribute value and has been read; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadNullableQualifiedName">
      <summary>Instructs the <see cref="T:System.Xml.XmlReader" /> to read the fully qualified name of the element where it is currently positioned. </summary>
      <returns>A <see cref="T:System.Xml.XmlQualifiedName" /> that represents the fully qualified name of the current XML element; otherwise, null if a null="true" attribute value is present.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadNullableString">
      <summary>Instructs the <see cref="T:System.Xml.XmlReader" /> to read a simple, text-only XML element that could be null. </summary>
      <returns>The string value; otherwise, null.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReference(System.String@)">
      <summary>Reads the value of the href attribute (ref attribute for SOAP 1.2) that is used to refer to an XML element in SOAP encoding. </summary>
      <returns>true if the value was read; otherwise, false.</returns>
      <param name="fixupReference">An output string into which the href attribute value is read.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencedElement">
      <summary>Deserializes an object from a SOAP-encoded multiRef XML element. </summary>
      <returns>The value of the referenced element in the document.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencedElement(System.String,System.String)">
      <summary>Deserializes an object from a SOAP-encoded multiRef XML element. </summary>
      <returns>The value of the referenced element in the document.</returns>
      <param name="name">The local name of the element's XML Schema data type.</param>
      <param name="ns">The namespace of the element's XML Schema data type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencedElements">
      <summary>Deserializes objects from the SOAP-encoded multiRef elements in a SOAP message. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencingElement(System.String,System.String,System.Boolean,System.String@)">
      <summary>Deserializes an object from an XML element in a SOAP message that contains a reference to a multiRef element.</summary>
      <returns>The deserialized object.</returns>
      <param name="name">The local name of the element's XML Schema data type.</param>
      <param name="ns">The namespace of the element's XML Schema data type.</param>
      <param name="elementCanBeType">true if the element name is also the XML Schema data type name; otherwise, false.</param>
      <param name="fixupReference">An output string into which the value of the href attribute is read.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencingElement(System.String,System.String,System.String@)">
      <summary>Deserializes an object from an XML element in a SOAP message that contains a reference to a multiRef element. </summary>
      <returns>The deserialized object.</returns>
      <param name="name">The local name of the element's XML Schema data type.</param>
      <param name="ns">The namespace of the element's XML Schema data type.</param>
      <param name="fixupReference">An output string into which the href attribute value is read.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencingElement(System.String@)">
      <summary>Deserializes an object from an XML element in a SOAP message that contains a reference to a multiRef element. </summary>
      <returns>The deserialized object.</returns>
      <param name="fixupReference">An output string into which the href attribute value is read.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadSerializable(System.Xml.Serialization.IXmlSerializable)">
      <summary>Populates an object from its XML representation at the current location of the <see cref="T:System.Xml.XmlReader" />. </summary>
      <returns>An object that implements the <see cref="T:System.Xml.Serialization.IXmlSerializable" /> interface with its members populated from the location of the <see cref="T:System.Xml.XmlReader" />.</returns>
      <param name="serializable">An <see cref="T:System.Xml.Serialization.IXmlSerializable" /> that corresponds to the current position of the <see cref="T:System.Xml.XmlReader" />.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadSerializable(System.Xml.Serialization.IXmlSerializable,System.Boolean)"></member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadString(System.String)">
      <summary>Produces the result of a call to the <see cref="M:System.Xml.XmlReader.ReadString" /> method appended to the input value. </summary>
      <returns>The result of call to the <see cref="M:System.Xml.XmlReader.ReadString" /> method appended to the input value.</returns>
      <param name="value">A string to prefix to the result of a call to the <see cref="M:System.Xml.XmlReader.ReadString" /> method.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadString(System.String,System.Boolean)">
      <summary>Returns the result of a call to the <see cref="M:System.Xml.XmlReader.ReadString" /> method of the <see cref="T:System.Xml.XmlReader" /> class, trimmed of white space if needed, and appended to the input value.</summary>
      <returns>The result of the read operation appended to the input value.</returns>
      <param name="value">A string that will be appended to.</param>
      <param name="trim">true if the result of the read operation should be trimmed; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadTypedNull(System.Xml.XmlQualifiedName)">
      <summary>Reads an XML element that allows null values (xsi:nil = 'true') and returns a generic <see cref="T:System.Nullable`1" /> value. </summary>
      <returns>A generic <see cref="T:System.Nullable`1" /> that represents a null XML value.</returns>
      <param name="type">The <see cref="T:System.Xml.XmlQualifiedName" /> that represents the simple data type for the current location of the <see cref="T:System.Xml.XmlReader" />.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadTypedPrimitive(System.Xml.XmlQualifiedName)">
      <summary>Gets the value of the XML node at which the <see cref="T:System.Xml.XmlReader" /> is currently positioned. </summary>
      <returns>The value of the node as a .NET Framework value type, if the value is a simple XML Schema data type.</returns>
      <param name="type">The <see cref="T:System.Xml.XmlQualifiedName" /> that represents the simple data type for the current location of the <see cref="T:System.Xml.XmlReader" />.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadXmlDocument(System.Boolean)">
      <summary>Instructs the <see cref="T:System.Xml.XmlReader" /> to read an XML document root element at its current position.</summary>
      <returns>An <see cref="T:System.Xml.XmlDocument" /> that contains the root element that has been read.</returns>
      <param name="wrapped">true if the method should read content only after reading the element's start element; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadXmlNode(System.Boolean)">
      <summary>Instructs the <see cref="T:System.Xml.XmlReader" /> to read the XML node at its current position. </summary>
      <returns>An <see cref="T:System.Xml.XmlNode" /> that represents the XML node that has been read.</returns>
      <param name="wrapped">true to read content only after reading the element's start element; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.Referenced(System.Object)">
      <summary>Stores an object to be deserialized from a SOAP-encoded multiRef element.</summary>
      <param name="o">The object to be deserialized.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ResolveDynamicAssembly(System.String)">
      <summary>Gets a dynamically generated assembly by name.</summary>
      <returns>A dynamically generated <see cref="T:System.Reflection.Assembly" />.</returns>
      <param name="assemblyFullName">The full name of the assembly.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ShrinkArray(System.Array,System.Int32,System.Type,System.Boolean)">
      <summary>Ensures that a given array, or a copy, is no larger than a specified length. </summary>
      <returns>The existing <see cref="T:System.Array" />, if it is already small enough; otherwise, a new, smaller array that contains the original array's elements up to the size of<paramref name=" length" />.</returns>
      <param name="a">The array that is being checked.</param>
      <param name="length">The maximum length of the array.</param>
      <param name="elementType">The <see cref="T:System.Type" /> of the array's elements.</param>
      <param name="isNullable">true if null for the array, if present for the input array, can be returned; otherwise, a new, smaller array.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayBase64(System.Boolean)">
      <summary>Instructs the <see cref="T:System.Xml.XmlReader" /> to read the string value at its current position and return it as a base-64 byte array.</summary>
      <returns>A base-64 byte array; otherwise, null if the value of the <paramref name="isNull" /> parameter is true.</returns>
      <param name="isNull">true to return null; false to return a base-64 byte array.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayBase64(System.String)">
      <summary>Produces a base-64 byte array from an input string. </summary>
      <returns>A base-64 byte array.</returns>
      <param name="value">A string to translate into a base-64 byte array.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayHex(System.Boolean)">
      <summary>Instructs the <see cref="T:System.Xml.XmlReader" /> to read the string value at its current position and return it as a hexadecimal byte array.</summary>
      <returns>A hexadecimal byte array; otherwise, null if the value of the <paramref name="isNull" /> parameter is true. </returns>
      <param name="isNull">true to return null; false to return a hexadecimal byte array.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayHex(System.String)">
      <summary>Produces a hexadecimal byte array from an input string.</summary>
      <returns>A hexadecimal byte array.</returns>
      <param name="value">A string to translate into a hexadecimal byte array.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToChar(System.String)">
      <summary>Produces a <see cref="T:System.Char" /> object from an input string. </summary>
      <returns>A <see cref="T:System.Char" /> object.</returns>
      <param name="value">A string to translate into a <see cref="T:System.Char" /> object.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToDate(System.String)">
      <summary>Produces a <see cref="T:System.DateTime" /> object from an input string. </summary>
      <returns>A <see cref="T:System.DateTime" />object.</returns>
      <param name="value">A string to translate into a <see cref="T:System.DateTime" /> class object.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToDateTime(System.String)">
      <summary>Produces a <see cref="T:System.DateTime" /> object from an input string. </summary>
      <returns>A <see cref="T:System.DateTime" /> object.</returns>
      <param name="value">A string to translate into a <see cref="T:System.DateTime" /> object.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToEnum(System.String,System.Collections.Hashtable,System.String)">
      <summary>Produces a numeric enumeration value from a string that consists of delimited identifiers that represent constants from the enumerator list. </summary>
      <returns>A long value that consists of the enumeration value as a series of bitwise OR operations.</returns>
      <param name="value">A string that consists of delimited identifiers where each identifier represents a constant from the set enumerator list.</param>
      <param name="h">A <see cref="T:System.Collections.Hashtable" /> that consists of the identifiers as keys and the constants as integral numbers.</param>
      <param name="typeName">The name of the enumeration type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToTime(System.String)">
      <summary>Produces a <see cref="T:System.DateTime" /> from a string that represents the time. </summary>
      <returns>A <see cref="T:System.DateTime" /> object.</returns>
      <param name="value">A string to translate into a <see cref="T:System.DateTime" /> object.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlName(System.String)">
      <summary>Decodes an XML name.</summary>
      <returns>A decoded string.</returns>
      <param name="value">An XML name to be decoded.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlNCName(System.String)">
      <summary>Decodes an XML name.</summary>
      <returns>A decoded string.</returns>
      <param name="value">An XML name to be decoded.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlNmToken(System.String)">
      <summary>Decodes an XML name.</summary>
      <returns>A decoded string.</returns>
      <param name="value">An XML name to be decoded.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlNmTokens(System.String)">
      <summary>Decodes an XML name.</summary>
      <returns>A decoded string.</returns>
      <param name="value">An XML name to be decoded.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlQualifiedName(System.String)">
      <summary>Obtains an <see cref="T:System.Xml.XmlQualifiedName" /> from a name that may contain a prefix. </summary>
      <returns>An <see cref="T:System.Xml.XmlQualifiedName" /> that represents a namespace-qualified XML name.</returns>
      <param name="value">A name that may contain a prefix.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownAttribute(System.Object,System.Xml.XmlAttribute)">
      <summary>Raises an <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" /> event for the current position of the <see cref="T:System.Xml.XmlReader" />. </summary>
      <param name="o">An object that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> is attempting to deserialize, subsequently accessible through the <see cref="P:System.Xml.Serialization.XmlAttributeEventArgs.ObjectBeingDeserialized" /> property.</param>
      <param name="attr">An <see cref="T:System.Xml.XmlAttribute" /> that represents the attribute in question.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownAttribute(System.Object,System.Xml.XmlAttribute,System.String)">
      <summary>Raises an <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" /> event for the current position of the <see cref="T:System.Xml.XmlReader" />. </summary>
      <param name="o">An object that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> is attempting to deserialize, subsequently accessible through the <see cref="P:System.Xml.Serialization.XmlAttributeEventArgs.ObjectBeingDeserialized" /> property.</param>
      <param name="attr">A <see cref="T:System.Xml.XmlAttribute" /> that represents the attribute in question.</param>
      <param name="qnames">A comma-delimited list of XML qualified names.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownElement(System.Object,System.Xml.XmlElement)">
      <summary>Raises an <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement" /> event for the current position of the <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="o">The <see cref="T:System.Object" /> that is being deserialized.</param>
      <param name="elem">The <see cref="T:System.Xml.XmlElement" /> for which an event is raised.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownElement(System.Object,System.Xml.XmlElement,System.String)">
      <summary>Raises an <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement" /> event for the current position of the <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="o">An object that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> is attempting to deserialize, subsequently accessible through the <see cref="P:System.Xml.Serialization.XmlAttributeEventArgs.ObjectBeingDeserialized" /> property.</param>
      <param name="elem">The <see cref="T:System.Xml.XmlElement" /> for which an event is raised.</param>
      <param name="qnames">A comma-delimited list of XML qualified names.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownNode(System.Object)">
      <summary>Raises an <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" /> event for the current position of the <see cref="T:System.Xml.XmlReader" />. </summary>
      <param name="o">The object that is being deserialized.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownNode(System.Object,System.String)">
      <summary>Raises an <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" /> event for the current position of the <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="o">The object being deserialized.</param>
      <param name="qnames">A comma-delimited list of XML qualified names.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnreferencedObject(System.String,System.Object)">
      <summary>Raises an <see cref="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject" /> event for the current position of the <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="id">A unique string that is used to identify the unreferenced object, subsequently accessible through the <see cref="P:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedId" /> property.</param>
      <param name="o">An object that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> is attempting to deserialize, subsequently accessible through the <see cref="P:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedObject" /> property.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationReader.CollectionFixup">
      <summary>Holds an <see cref="T:System.Xml.Serialization.XmlSerializationCollectionFixupCallback" /> delegate instance, plus the method's inputs; also supplies the method's parameters. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CollectionFixup.#ctor(System.Object,System.Xml.Serialization.XmlSerializationCollectionFixupCallback,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializationReader.CollectionFixup" /> class with parameters for a callback method. </summary>
      <param name="collection">A collection into which the callback method copies the collection items array.</param>
      <param name="callback">A method that instantiates the <see cref="T:System.Xml.Serialization.XmlSerializationCollectionFixupCallback" /> delegate.</param>
      <param name="collectionItems">An array into which the callback method copies a collection.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.CollectionFixup.Callback">
      <summary>Gets the callback method that instantiates the <see cref="T:System.Xml.Serialization.XmlSerializationCollectionFixupCallback" /> delegate. </summary>
      <returns>The <see cref="T:System.Xml.Serialization.XmlSerializationCollectionFixupCallback" /> delegate that points to the callback method.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.CollectionFixup.Collection">
      <summary>Gets the <paramref name="object collection" /> for the callback method. </summary>
      <returns>The collection that is used for the fixup.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.CollectionFixup.CollectionItems">
      <summary>Gets the array into which the callback method copies a collection. </summary>
      <returns>The array into which the callback method copies a collection.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationReader.Fixup">
      <summary>Holds an <see cref="T:System.Xml.Serialization.XmlSerializationFixupCallback" /> delegate instance, plus the method's inputs; also serves as the parameter for the method. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.Fixup.#ctor(System.Object,System.Xml.Serialization.XmlSerializationFixupCallback,System.Int32)">
      <summary>Receives the size of a string array to generate. </summary>
      <param name="o">The object that contains other objects whose values get filled in by the callback implementation.</param>
      <param name="callback">A method that instantiates the <see cref="T:System.Xml.Serialization.XmlSerializationFixupCallback" /> delegate.</param>
      <param name="count">The size of the string array obtained through the <see cref="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Ids" /> property.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.Fixup.#ctor(System.Object,System.Xml.Serialization.XmlSerializationFixupCallback,System.String[])">
      <summary>Receives a string array. </summary>
      <param name="o">The object that contains other objects whose values get filled in by the callback implementation.</param>
      <param name="callback">A method that instantiates the <see cref="T:System.Xml.Serialization.XmlSerializationFixupCallback" /> delegate.</param>
      <param name="ids">The string array obtained through the <see cref="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Ids" /> property.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Callback">
      <summary>Gets the callback method that creates an instance of the <see cref="T:System.Xml.Serialization.XmlSerializationFixupCallback" /> delegate. </summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlSerializationFixupCallback" />. </returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Ids">
      <summary>Gets or sets an array of keys for the objects that belong to the <see cref="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Source" /> property whose values get filled in by the callback implementation. </summary>
      <returns>The array of keys.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Source">
      <summary>Gets or sets the object that contains other objects whose values get filled in by the callback implementation.</summary>
      <returns>The source containing objects with values to fill.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationWriteCallback">
      <summary>Delegate that is used by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class for serialization of types from SOAP-encoded, non-root XML data. </summary>
      <param name="o"></param>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationWriter">
      <summary>Abstract class used for controlling serialization by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializationWriter" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.AddWriteCallback(System.Type,System.String,System.String,System.Xml.Serialization.XmlSerializationWriteCallback)">
      <summary>Stores an implementation of the <see cref="T:System.Xml.Serialization.XmlSerializationWriteCallback" /> delegate and the type it applies to, for a later invocation. </summary>
      <param name="type">The <see cref="T:System.Type" /> of objects that are serialized.</param>
      <param name="typeName">The name of the type of objects that are serialized.</param>
      <param name="typeNs">The namespace of the type of objects that are serialized.</param>
      <param name="callback">An instance of the <see cref="T:System.Xml.Serialization.XmlSerializationWriteCallback" /> delegate.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateChoiceIdentifierValueException(System.String,System.String,System.String,System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates an unexpected name for an element that adheres to an XML Schema choice element declaration.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="value">The name that is not valid.</param>
      <param name="identifier">The choice element declaration that the name belongs to.</param>
      <param name="name">The expected local name of an element.</param>
      <param name="ns">The expected namespace of an element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateInvalidAnyTypeException(System.Object)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> has been invalidly applied to a member; only members that are of type <see cref="T:System.Xml.XmlNode" />, or derived from <see cref="T:System.Xml.XmlNode" />, are valid.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="o">The object that represents the invalid member.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateInvalidAnyTypeException(System.Type)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> has been invalidly applied to a member; only members that are of type <see cref="T:System.Xml.XmlNode" />, or derived from <see cref="T:System.Xml.XmlNode" />, are valid.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="type">The <see cref="T:System.Type" /> that is invalid.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateInvalidChoiceIdentifierValueException(System.String,System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates a failure while writing an array where an XML Schema choice element declaration is applied.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="type">The type being serialized.</param>
      <param name="identifier">A name for the choice element declaration.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateInvalidEnumValueException(System.Object,System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> for an invalid enumeration value.</summary>
      <returns>An <see cref="T:System.ComponentModel.InvalidEnumArgumentException" />.</returns>
      <param name="value">An object that represents the invalid enumeration.</param>
      <param name="typeName">The XML type name.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateMismatchChoiceException(System.String,System.String,System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that a value for an XML element does not match an enumeration type.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="value">The value that is not valid.</param>
      <param name="elementName">The name of the XML element with an invalid value.</param>
      <param name="enumValue">The valid value.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateUnknownAnyElementException(System.String,System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that an XML element that should adhere to the XML Schema any element declaration cannot be processed.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="name">The XML element that cannot be processed.</param>
      <param name="ns">The namespace of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateUnknownTypeException(System.Object)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that a type being serialized is not being used in a valid manner or is unexpectedly encountered. </summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="o">The object whose type cannot be serialized.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateUnknownTypeException(System.Type)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that a type being serialized is not being used in a valid manner or is unexpectedly encountered. </summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="type">The type that cannot be serialized.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationWriter.EscapeName">
      <summary>Gets or sets a value that indicates whether the <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" /> method is used to write valid XML.</summary>
      <returns>true if the <see cref="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlQualifiedName(System.Xml.XmlQualifiedName)" /> method returns an encoded name; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromByteArrayBase64(System.Byte[])">
      <summary>Processes a base-64 byte array.</summary>
      <returns>The same byte array that was passed in as an argument.</returns>
      <param name="value">A base-64 <see cref="T:System.Byte" /> array.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromByteArrayHex(System.Byte[])">
      <summary>Produces a string from an input hexadecimal byte array.</summary>
      <returns>The byte array value converted to a string.</returns>
      <param name="value">A hexadecimal byte array to translate to a string.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromChar(System.Char)">
      <summary>Produces a string from an input <see cref="T:System.Char" />.</summary>
      <returns>The <see cref="T:System.Char" /> value converted to a string.</returns>
      <param name="value">A <see cref="T:System.Char" /> to translate to a string.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromDate(System.DateTime)">
      <summary>Produces a string from a <see cref="T:System.DateTime" /> object.</summary>
      <returns>A string representation of the <see cref="T:System.DateTime" /> that shows the date but no time.</returns>
      <param name="value">A <see cref="T:System.DateTime" /> to translate to a string.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromDateTime(System.DateTime)">
      <summary>Produces a string from an input <see cref="T:System.DateTime" />.</summary>
      <returns>A string representation of the <see cref="T:System.DateTime" /> that shows the date and time.</returns>
      <param name="value">A <see cref="T:System.DateTime" /> to translate to a string.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromEnum(System.Int64,System.String[],System.Int64[])">
      <summary>Produces a string that consists of delimited identifiers that represent the enumeration members that have been set.</summary>
      <returns>A string that consists of delimited identifiers, where each represents a member from the set enumerator list.</returns>
      <param name="value">The enumeration value as a series of bitwise OR operations.</param>
      <param name="values">The enumeration's name values.</param>
      <param name="ids">The enumeration's constant values.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromEnum(System.Int64,System.String[],System.Int64[],System.String)">
      <summary>Takes a numeric enumeration value and the names and constants from the enumerator list for the enumeration and returns a string that consists of delimited identifiers that represent the enumeration members that have been set.</summary>
      <returns>A string that consists of delimited identifiers, where each item is one of the values set by the bitwise operation.</returns>
      <param name="value">The enumeration value as a series of bitwise OR operations.</param>
      <param name="values">The values of the enumeration.</param>
      <param name="ids">The constants of the enumeration.</param>
      <param name="typeName">The name of the type </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromTime(System.DateTime)">
      <summary>Produces a string from a <see cref="T:System.DateTime" /> object.</summary>
      <returns>A string representation of the <see cref="T:System.DateTime" /> object that shows the time but no date.</returns>
      <param name="value">A <see cref="T:System.DateTime" /> that is translated to a string.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlName(System.String)">
      <summary>Encodes a valid XML name by replacing characters that are not valid with escape sequences.</summary>
      <returns>An encoded string.</returns>
      <param name="name">A string to be used as an XML name.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlNCName(System.String)">
      <summary>Encodes a valid XML local name by replacing characters that are not valid with escape sequences.</summary>
      <returns>An encoded string.</returns>
      <param name="ncName">A string to be used as a local (unqualified) XML name.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlNmToken(System.String)">
      <summary>Encodes an XML name.</summary>
      <returns>An encoded string.</returns>
      <param name="nmToken">An XML name to be encoded.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlNmTokens(System.String)">
      <summary>Encodes a space-delimited sequence of XML names into a single XML name.</summary>
      <returns>An encoded string.</returns>
      <param name="nmTokens">A space-delimited sequence of XML names to be encoded.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlQualifiedName(System.Xml.XmlQualifiedName)">
      <summary>Returns an XML qualified name, with invalid characters replaced by escape sequences. </summary>
      <returns>An XML qualified name, with invalid characters replaced by escape sequences.</returns>
      <param name="xmlQualifiedName">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the XML to be written.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlQualifiedName(System.Xml.XmlQualifiedName,System.Boolean)">
      <summary>Produces a string that can be written as an XML qualified name, with invalid characters replaced by escape sequences. </summary>
      <returns>An XML qualified name, with invalid characters replaced by escape sequences.</returns>
      <param name="xmlQualifiedName">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the XML to be written.</param>
      <param name="ignoreEmpty">true to ignore empty spaces in the string; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.InitCallbacks">
      <summary>Initializes instances of the <see cref="T:System.Xml.Serialization.XmlSerializationWriteCallback" /> delegate to serialize SOAP-encoded XML data. </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationWriter.Namespaces">
      <summary>Gets or sets a list of XML qualified name objects that contain the namespaces and prefixes used to produce qualified names in XML documents. </summary>
      <returns>An <see cref="T:System.Collections.ArrayList" /> that contains the namespaces and prefix pairs.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.ResolveDynamicAssembly(System.String)">
      <summary>Gets a dynamically generated assembly by name.</summary>
      <returns>A dynamically generated assembly.</returns>
      <param name="assemblyFullName">The full name of the assembly.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.TopLevelElement">
      <summary>Initializes object references only while serializing a SOAP-encoded SOAP message.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.Byte[])">
      <summary>Instructs an <see cref="T:System.Xml.XmlWriter" /> object to write an XML attribute that has no namespace specified for its name.</summary>
      <param name="localName">The local name of the XML attribute.</param>
      <param name="value">The value of the XML attribute as a byte array.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String)">
      <summary>Instructs the <see cref="T:System.Xml.XmlWriter" /> to write an XML attribute that has no namespace specified for its name. </summary>
      <param name="localName">The local name of the XML attribute.</param>
      <param name="value">The value of the XML attribute as a string.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String,System.Byte[])">
      <summary>Instructs an <see cref="T:System.Xml.XmlWriter" /> object to write an XML attribute.</summary>
      <param name="localName">The local name of the XML attribute.</param>
      <param name="ns">The namespace of the XML attribute.</param>
      <param name="value">The value of the XML attribute as a byte array.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String,System.String)">
      <summary>Writes an XML attribute. </summary>
      <param name="localName">The local name of the XML attribute.</param>
      <param name="ns">The namespace of the XML attribute.</param>
      <param name="value">The value of the XML attribute as a string.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String,System.String,System.String)">
      <summary>Writes an XML attribute where the namespace prefix is provided manually. </summary>
      <param name="prefix">The namespace prefix to write.</param>
      <param name="localName">The local name of the XML attribute.</param>
      <param name="ns">The namespace represented by the prefix.</param>
      <param name="value">The value of the XML attribute as a string.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementEncoded(System.Xml.XmlNode,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>Writes an XML node object within the body of a named XML element.</summary>
      <param name="node">The XML node to write, possibly a child XML element.</param>
      <param name="name">The local name of the parent XML element to write.</param>
      <param name="ns">The namespace of the parent XML element to write.</param>
      <param name="isNullable">true to write an xsi:nil='true' attribute if the object to serialize is null; otherwise, false.</param>
      <param name="any">true to indicate that the node, if an XML element, adheres to an XML Schema any element declaration; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementLiteral(System.Xml.XmlNode,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>Instructs an <see cref="T:System.Xml.XmlWriter" /> object to write an <see cref="T:System.Xml.XmlNode" /> object within the body of a named XML element.</summary>
      <param name="node">The XML node to write, possibly a child XML element.</param>
      <param name="name">The local name of the parent XML element to write.</param>
      <param name="ns">The namespace of the parent XML element to write.</param>
      <param name="isNullable">true to write an xsi:nil='true' attribute if the object to serialize is null; otherwise, false.</param>
      <param name="any">true to indicate that the node, if an XML element, adheres to an XML Schema any element declaration; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified qualified name in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="ns">The namespace of the XML element.</param>
      <param name="value">The name to write, using its prefix if namespace-qualified, in the element text.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.String,System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified qualified name in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="ns">The namespace of the XML element.</param>
      <param name="value">The name to write, using its prefix if namespace-qualified, in the element text.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified qualified name in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="value">The name to write, using its prefix if namespace-qualified, in the element text.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified qualified name in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="value">The name to write, using its prefix if namespace-qualified, in the element text.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String)">
      <summary>Writes an XML element with a specified value in its body. </summary>
      <param name="localName">The local name of the XML element to be written without namespace qualification.</param>
      <param name="value">The text value of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String,System.String)">
      <summary>Writes an XML element with a specified value in its body. </summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="ns">The namespace of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="ns">The namespace of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.Byte[])">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.Byte[],System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String)">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.Byte[])">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="ns">The namespace of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.Byte[],System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="ns">The namespace of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.String)">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="ns">The namespace of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="ns">The namespace of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEmptyTag(System.String)">
      <summary>Writes an XML element whose body is empty. </summary>
      <param name="name">The local name of the XML element to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEmptyTag(System.String,System.String)">
      <summary>Writes an XML element whose body is empty.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEndElement">
      <summary>Writes a &lt;closing&gt; element tag.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEndElement(System.Object)">
      <summary>Writes a closing element tag.</summary>
      <param name="o">The object being serialized.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteId(System.Object)">
      <summary>Writes an id attribute that appears in a SOAP-encoded multiRef element. </summary>
      <param name="o">The object being serialized.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNamespaceDeclarations(System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>Writes namespace declaration attributes.</summary>
      <param name="xmlns">The XML namespaces to declare.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableQualifiedNameEncoded(System.String,System.String,System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element whose body contains a valid XML qualified name. <see cref="T:System.Xml.XmlWriter" /> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="value">The XML qualified name to write in the body of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableQualifiedNameLiteral(System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element whose body contains a valid XML qualified name. <see cref="T:System.Xml.XmlWriter" /> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="value">The XML qualified name to write in the body of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringEncoded(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element that contains a string as the body. <see cref="T:System.Xml.XmlWriter" /> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="value">The string to write in the body of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringEncodedRaw(System.String,System.String,System.Byte[],System.Xml.XmlQualifiedName)">
      <summary>Writes a byte array as the body of an XML element. <see cref="T:System.Xml.XmlWriter" /> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="value">The byte array to write in the body of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringEncodedRaw(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element that contains a string as the body. <see cref="T:System.Xml.XmlWriter" /> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="value">The string to write in the body of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringLiteral(System.String,System.String,System.String)">
      <summary>Writes an XML element that contains a string as the body. <see cref="T:System.Xml.XmlWriter" /> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="value">The string to write in the body of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringLiteralRaw(System.String,System.String,System.Byte[])">
      <summary>Writes a byte array as the body of an XML element. <see cref="T:System.Xml.XmlWriter" /> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="value">The byte array to write in the body of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringLiteralRaw(System.String,System.String,System.String)">
      <summary>Writes an XML element that contains a string as the body. <see cref="T:System.Xml.XmlWriter" /> inserts a xsi:nil='true' attribute if the string's value is null.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="value">The string to write in the body of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagEncoded(System.String)">
      <summary>Writes an XML element with an xsi:nil='true' attribute.</summary>
      <param name="name">The local name of the XML element to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagEncoded(System.String,System.String)">
      <summary>Writes an XML element with an xsi:nil='true' attribute.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagLiteral(System.String)">
      <summary>Writes an XML element with an xsi:nil='true' attribute.</summary>
      <param name="name">The local name of the XML element to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagLiteral(System.String,System.String)">
      <summary>Writes an XML element with an xsi:nil='true' attribute. </summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WritePotentiallyReferencingElement(System.String,System.String,System.Object)">
      <summary>Writes a SOAP message XML element that can contain a reference to a &lt;multiRef&gt; XML element for a given object. </summary>
      <param name="n">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="o">The object being serialized either in the current XML element or a multiRef element that is referenced by the current element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WritePotentiallyReferencingElement(System.String,System.String,System.Object,System.Type)">
      <summary>Writes a SOAP message XML element that can contain a reference to a &lt;multiRef&gt; XML element for a given object. </summary>
      <param name="n">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="o">The object being serialized either in the current XML element or a multiRef element that referenced by the current element.</param>
      <param name="ambientType">The type stored in the object's type mapping (as opposed to the object's type found directly through the typeof operation).</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WritePotentiallyReferencingElement(System.String,System.String,System.Object,System.Type,System.Boolean)">
      <summary>Writes a SOAP message XML element that can contain a reference to a &lt;multiRef&gt; XML element for a given object.</summary>
      <param name="n">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="o">The object being serialized either in the current XML element or a multiRef element that is referenced by the current element.</param>
      <param name="ambientType">The type stored in the object's type mapping (as opposed to the object's type found directly through the typeof operation).</param>
      <param name="suppressReference">true to serialize the object directly into the XML element rather than make the element reference another element that contains the data; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WritePotentiallyReferencingElement(System.String,System.String,System.Object,System.Type,System.Boolean,System.Boolean)">
      <summary>Writes a SOAP message XML element that can contain a reference to a multiRef XML element for a given object.</summary>
      <param name="n">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="o">The object being serialized either in the current XML element or a multiRef element that referenced by the current element.</param>
      <param name="ambientType">The type stored in the object's type mapping (as opposed to the object's type found directly through the typeof operation).</param>
      <param name="suppressReference">true to serialize the object directly into the XML element rather than make the element reference another element that contains the data; otherwise, false.</param>
      <param name="isNullable">true to write an xsi:nil='true' attribute if the object to serialize is null; otherwise, false.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationWriter.Writer">
      <summary>Gets the <see cref="T:System.Xml.XmlWriter" /> that is being used by the <see cref="T:System.Xml.Serialization.XmlSerializationWriter" />. </summary>
      <returns>The <see cref="T:System.Xml.XmlWriter" /> used by the class instance.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteReferencedElements">
      <summary>Serializes objects into SOAP-encoded multiRef XML elements in a SOAP message. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteReferencingElement(System.String,System.String,System.Object)">
      <summary>Writes a SOAP message XML element that contains a reference to a multiRef element for a given object. </summary>
      <param name="n">The local name of the referencing element being written.</param>
      <param name="ns">The namespace of the referencing element being written.</param>
      <param name="o">The object being serialized.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteReferencingElement(System.String,System.String,System.Object,System.Boolean)">
      <summary>Writes a SOAP message XML element that contains a reference to a multiRef element for a given object.</summary>
      <param name="n">The local name of the referencing element being written.</param>
      <param name="ns">The namespace of the referencing element being written.</param>
      <param name="o">The object being serialized.</param>
      <param name="isNullable">true to write an xsi:nil='true' attribute if the object to serialize is null; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteRpcResult(System.String,System.String)">
      <summary>Writes a SOAP 1.2 RPC result element with a specified qualified name in its body.</summary>
      <param name="name">The local name of the result body.</param>
      <param name="ns">The namespace of the result body.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteSerializable(System.Xml.Serialization.IXmlSerializable,System.String,System.String,System.Boolean)">
      <summary>Writes an object that uses custom XML formatting as an XML element. </summary>
      <param name="serializable">An object that implements the <see cref="T:System.Xml.Serialization.IXmlSerializable" /> interface that uses custom XML formatting.</param>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="isNullable">true to write an xsi:nil='true' attribute if the <see cref="T:System.Xml.Serialization.IXmlSerializable" /> class object is null; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteSerializable(System.Xml.Serialization.IXmlSerializable,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>Instructs <see cref="T:System.Xml.XmlNode" /> to write an object that uses custom XML formatting as an XML element. </summary>
      <param name="serializable">An object that implements the <see cref="T:System.Xml.Serialization.IXmlSerializable" /> interface that uses custom XML formatting.</param>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="isNullable">true to write an xsi:nil='true' attribute if the <see cref="T:System.Xml.Serialization.IXmlSerializable" /> object is null; otherwise, false.</param>
      <param name="wrapped">true to ignore writing the opening element tag; otherwise, false to write the opening element tag.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartDocument">
      <summary>Writes the XML declaration if the writer is positioned at the start of an XML document. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String)">
      <summary>Writes an opening element tag, including any attributes. </summary>
      <param name="name">The local name of the XML element to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String)">
      <summary>Writes an opening element tag, including any attributes. </summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String,System.Boolean)">
      <summary>Writes an opening element tag, including any attributes.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="writePrefixed">true to write the element name with a prefix if none is available for the specified namespace; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String,System.Object)">
      <summary>Writes an opening element tag, including any attributes.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="o">The object being serialized as an XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String,System.Object,System.Boolean)">
      <summary>Writes an opening element tag, including any attributes.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="o">The object being serialized as an XML element.</param>
      <param name="writePrefixed">true to write the element name with a prefix if none is available for the specified namespace; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String,System.Object,System.Boolean,System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>Writes an opening element tag, including any attributes. </summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="o">The object being serialized as an XML element.</param>
      <param name="writePrefixed">true to write the element name with a prefix if none is available for the specified namespace; otherwise, false.</param>
      <param name="xmlns">An instance of the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> class that contains prefix and namespace pairs to be used in the generated XML.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteTypedPrimitive(System.String,System.String,System.Object,System.Boolean)">
      <summary>Writes an XML element whose text body is a value of a simple XML Schema data type. </summary>
      <param name="name">The local name of the element to write.</param>
      <param name="ns">The namespace of the element to write.</param>
      <param name="o">The object to be serialized in the element body.</param>
      <param name="xsiType">true if the XML element explicitly specifies the text value's type using the xsi:type attribute; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteValue(System.Byte[])">
      <summary>Writes a base-64 byte array.</summary>
      <param name="value">The byte array to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteValue(System.String)">
      <summary>Writes a specified string.</summary>
      <param name="value">The string to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteXmlAttribute(System.Xml.XmlNode)">
      <summary>Writes the specified <see cref="T:System.Xml.XmlNode" /> as an XML attribute.</summary>
      <param name="node">An <see cref="T:System.Xml.XmlAttribute" /> object.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteXmlAttribute(System.Xml.XmlNode,System.Object)">
      <summary>Writes the specified <see cref="T:System.Xml.XmlNode" /> object as an XML attribute.</summary>
      <param name="node">An <see cref="T:System.Xml.XmlNode" /> of <see cref="T:System.Xml.XmlAttribute" /> type.</param>
      <param name="container">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> object (or null) used to generate a qualified name value for an arrayType attribute from the Web Services Description Language (WSDL) namespace ("http://schemas.xmlsoap.org/wsdl/").</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteXsiType(System.String,System.String)">
      <summary>Writes an xsi:type attribute for an XML element that is being serialized into a document. </summary>
      <param name="name">The local name of an XML Schema data type.</param>
      <param name="ns">The namespace of an XML Schema data type.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializer">
      <summary>Serializes and deserializes objects into and from XML documents. The <see cref="T:System.Xml.Serialization.XmlSerializer" /> enables you to control how objects are encoded into XML.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML documents, and deserialize XML documents into objects of the specified type.</summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML documents, and deserialize XML documents into objects of the specified type. Specifies the default namespace for all the XML elements.</summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize. </param>
      <param name="defaultNamespace">The default namespace to use for all the XML elements. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML documents, and deserialize XML documents into object of a specified type. If a property or field returns an array, the <paramref name="extraTypes" /> parameter specifies objects that can be inserted into the array.</summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize. </param>
      <param name="extraTypes">A <see cref="T:System.Type" /> array of additional object types to serialize. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML documents, and deserialize XML documents into objects of the specified type. Each object to be serialized can itself contain instances of classes, which this overload can override with other classes.</summary>
      <param name="type">The type of the object to serialize. </param>
      <param name="overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" />. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of type <see cref="T:System.Object" /> into XML document instances, and deserialize XML document instances into objects of type <see cref="T:System.Object" />. Each object to be serialized can itself contain instances of classes, which this overload overrides with other classes. This overload also specifies the default namespace for all the XML elements and the class to use as the XML root element.</summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize. </param>
      <param name="overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> that extends or overrides the behavior of the class specified in the <paramref name="type" /> parameter. </param>
      <param name="extraTypes">A <see cref="T:System.Type" /> array of additional object types to serialize. </param>
      <param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> that defines the XML root element properties. </param>
      <param name="defaultNamespace">The default namespace of all XML elements in the XML document. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String)"></member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String,System.Security.Policy.Evidence)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML document instances, and deserialize XML document instances into objects of the specified type. This overload allows you to supply other types that can be encountered during a serialization or deserialization operation, as well as a default namespace for all XML elements, the class to use as the XML root element, its location, and credentials required for access.</summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize.</param>
      <param name="overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> that extends or overrides the behavior of the class specified in the <paramref name="type" /> parameter.</param>
      <param name="extraTypes">A <see cref="T:System.Type" /> array of additional object types to serialize.</param>
      <param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> that defines the XML root element properties.</param>
      <param name="defaultNamespace">The default namespace of all XML elements in the XML document.</param>
      <param name="location">The location of the types.</param>
      <param name="evidence">An instance of the <see cref="T:System.Security.Policy.Evidence" /> class that contains credentials required to access types.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlRootAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML documents, and deserialize an XML document into object of the specified type. It also specifies the class to use as the XML root element.</summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize. </param>
      <param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> that represents the XML root element. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Xml.Serialization.XmlTypeMapping)">
      <summary>Initializes an instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class using an object that maps one type to another.</summary>
      <param name="xmlTypeMapping">An <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> that maps one type to another. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can deserialize a specified XML document.</summary>
      <returns>true if this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can deserialize the object that the <see cref="T:System.Xml.XmlReader" /> points to; otherwise, false.</returns>
      <param name="xmlReader">An <see cref="T:System.Xml.XmlReader" /> that points to the document to deserialize. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.CreateReader">
      <summary>Returns an object used to read the XML document to be serialized.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlSerializationReader" /> used to read the XML document.</returns>
      <exception cref="T:System.NotImplementedException">Any attempt is made to access the method when the method is not overridden in a descendant class. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.CreateWriter">
      <summary>When overridden in a derived class, returns a writer used to serialize the object.</summary>
      <returns>An instance that implements the <see cref="T:System.Xml.Serialization.XmlSerializationWriter" /> class.</returns>
      <exception cref="T:System.NotImplementedException">Any attempt is made to access the method when the method is not overridden in a descendant class. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)">
      <summary>Deserializes the XML document contained by the specified <see cref="T:System.IO.Stream" />.</summary>
      <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
      <param name="stream">The <see cref="T:System.IO.Stream" /> that contains the XML document to deserialize. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)">
      <summary>Deserializes the XML document contained by the specified <see cref="T:System.IO.TextReader" />.</summary>
      <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
      <param name="textReader">The <see cref="T:System.IO.TextReader" /> that contains the XML document to deserialize. </param>
      <exception cref="T:System.InvalidOperationException">An error occurred during deserialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.Serialization.XmlSerializationReader)">
      <summary>Deserializes the XML document contained by the specified <see cref="T:System.Xml.Serialization.XmlSerializationReader" />.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">The <see cref="T:System.Xml.Serialization.XmlSerializationReader" /> that contains the XML document to deserialize. </param>
      <exception cref="T:System.NotImplementedException">Any attempt is made to access the method when the method is not overridden in a descendant class. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader)">
      <summary>Deserializes the XML document contained by the specified <see cref="T:System.xml.XmlReader" />.</summary>
      <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
      <param name="xmlReader">The <see cref="T:System.xml.XmlReader" /> that contains the XML document to deserialize. </param>
      <exception cref="T:System.InvalidOperationException">An error occurred during deserialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String)">
      <summary>Deserializes the XML document contained by the specified <see cref="T:System.xml.XmlReader" /> and encoding style.</summary>
      <returns>The deserialized object.</returns>
      <param name="xmlReader">The <see cref="T:System.xml.XmlReader" /> that contains the XML document to deserialize. </param>
      <param name="encodingStyle">The encoding style of the serialized XML. </param>
      <exception cref="T:System.InvalidOperationException">An error occurred during deserialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String,System.Xml.Serialization.XmlDeserializationEvents)">
      <summary>Deserializes the object using the data contained by the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>The object being deserialized.</returns>
      <param name="xmlReader">An instance of the <see cref="T:System.Xml.XmlReader" /> class used to read the document.</param>
      <param name="encodingStyle">The encoding used.</param>
      <param name="events">An instance of the <see cref="T:System.Xml.Serialization.XmlDeserializationEvents" /> class. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.Xml.Serialization.XmlDeserializationEvents)">
      <summary>Deserializes an XML document contained by the specified <see cref="T:System.Xml.XmlReader" /> and allows the overriding of events that occur during deserialization.</summary>
      <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
      <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" /> that contains the document to deserialize.</param>
      <param name="events">An instance of the <see cref="T:System.Xml.Serialization.XmlDeserializationEvents" /> class. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[])">
      <summary>Returns an array of <see cref="T:System.Xml.Serialization.XmlSerializer" /> objects created from an array of <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> objects.</summary>
      <returns>An array of <see cref="T:System.Xml.Serialization.XmlSerializer" /> objects.</returns>
      <param name="mappings">An array of <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> that maps one type to another. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[],System.Security.Policy.Evidence)">
      <summary>Returns an instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class created from mappings of one XML type to another.</summary>
      <returns>An instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class.</returns>
      <param name="mappings">An array of <see cref="T:System.Xml.Serialization.XmlMapping" /> objects used to map one type to another.</param>
      <param name="evidence">An instance of the <see cref="T:System.Security.Policy.Evidence" /> class that contains host and assembly data presented to the common language runtime policy system.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[],System.Type)">
      <summary>Returns an instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class from the specified mappings.</summary>
      <returns>An instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class.</returns>
      <param name="mappings">An array of <see cref="T:System.Xml.Serialization.XmlMapping" /> objects.</param>
      <param name="type">The <see cref="T:System.Type" /> of the deserialized object.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.FromTypes(System.Type[])">
      <summary>Returns an array of <see cref="T:System.Xml.Serialization.XmlSerializer" /> objects created from an array of types.</summary>
      <returns>An array of <see cref="T:System.Xml.Serialization.XmlSerializer" /> objects.</returns>
      <param name="types">An array of <see cref="T:System.Type" /> objects. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.GenerateSerializer(System.Type[],System.Xml.Serialization.XmlMapping[])">
      <summary>Returns an assembly that contains custom-made serializers used to serialize or deserialize the specified type or types, using the specified mappings.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> object that contains serializers for the supplied types and mappings.</returns>
      <param name="types">A collection of types.</param>
      <param name="mappings">A collection of <see cref="T:System.Xml.Serialization.XmlMapping" /> objects used to convert one type to another.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.GenerateSerializer(System.Type[],System.Xml.Serialization.XmlMapping[],System.CodeDom.Compiler.CompilerParameters)">
      <summary>Returns an assembly that contains custom-made serializers used to serialize or deserialize the specified type or types, using the specified mappings and compiler settings and options. </summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> that contains special versions of the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</returns>
      <param name="types">An array of type <see cref="T:System.Type" /> that contains objects used to serialize and deserialize data.</param>
      <param name="mappings">An array of type <see cref="T:System.Xml.Serialization.XmlMapping" /> that maps the XML data to the type data.</param>
      <param name="parameters">An instance of the <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> class that represents the parameters used to invoke a compiler.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type)">
      <summary>Returns the name of the assembly that contains one or more versions of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> especially created to serialize or deserialize the specified type.</summary>
      <returns>The name of the assembly that contains an <see cref="T:System.Xml.Serialization.XmlSerializer" /> for the type.</returns>
      <param name="type">The <see cref="T:System.Type" /> you are deserializing.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type,System.String)">
      <summary>Returns the name of the assembly that contains the serializer for the specified type in the specified namespace.</summary>
      <returns>The name of the assembly that contains specially built serializers.</returns>
      <param name="type">The <see cref="T:System.Type" /> you are interested in.</param>
      <param name="defaultNamespace">The namespace of the type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)">
      <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> used to write the XML document. </param>
      <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
      <exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.IO.Stream" />that references the specified namespaces.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> used to write the XML document. </param>
      <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
      <param name="namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> referenced by the object. </param>
      <exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)">
      <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the XML document. </param>
      <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.IO.TextWriter" /> and references the specified namespaces.</summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the XML document. </param>
      <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
      <param name="namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> that contains namespaces for the generated XML document. </param>
      <exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Object,System.Xml.Serialization.XmlSerializationWriter)">
      <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.Xml.Serialization.XmlSerializationWriter" />.</summary>
      <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
      <param name="writer">The <see cref="T:System.Xml.Serialization.XmlSerializationWriter" /> used to write the XML document. </param>
      <exception cref="T:System.NotImplementedException">Any attempt is made to access the method when the method is not overridden in a descendant class. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)">
      <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="xmlWriter">The <see cref="T:System.xml.XmlWriter" /> used to write the XML document. </param>
      <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
      <exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.Xml.XmlWriter" /> and references the specified namespaces.</summary>
      <param name="xmlWriter">The <see cref="T:System.xml.XmlWriter" /> used to write the XML document. </param>
      <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
      <param name="namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> referenced by the object. </param>
      <exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String)">
      <summary>Serializes the specified object and writes the XML document to a file using the specified <see cref="T:System.Xml.XmlWriter" /> and references the specified namespaces and encoding style.</summary>
      <param name="xmlWriter">The <see cref="T:System.xml.XmlWriter" /> used to write the XML document. </param>
      <param name="o">The object to serialize. </param>
      <param name="namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> referenced by the object. </param>
      <param name="encodingStyle">The encoding style of the serialized XML. </param>
      <exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String,System.String)">
      <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.Xml.XmlWriter" />, XML namespaces, and encoding. </summary>
      <param name="xmlWriter">The <see cref="T:System.Xml.XmlWriter" /> used to write the XML document.</param>
      <param name="o">The object to serialize.</param>
      <param name="namespaces">An instance of the XmlSerializaerNamespaces that contains namespaces and prefixes to use.</param>
      <param name="encodingStyle">The encoding used in the document.</param>
      <param name="id">For SOAP encoded messages, the base used to generate id attributes. </param>
    </member>
    <member name="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute">
      <summary>Occurs when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> encounters an XML attribute of unknown type during deserialization.</summary>
    </member>
    <member name="E:System.Xml.Serialization.XmlSerializer.UnknownElement">
      <summary>Occurs when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> encounters an XML element of unknown type during deserialization.</summary>
    </member>
    <member name="E:System.Xml.Serialization.XmlSerializer.UnknownNode">
      <summary>Occurs when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> encounters an XML node of unknown type during deserialization.</summary>
    </member>
    <member name="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject">
      <summary>Occurs during deserialization of a SOAP-encoded XML stream, when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> encounters a recognized type that is not used or is unreferenced.</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializerAssemblyAttribute">
      <summary>Applied to a Web service client proxy, enables you to specify an assembly that contains custom-made serializers. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerAssemblyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerAssemblyAttribute" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerAssemblyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerAssemblyAttribute" /> class with the specified assembly name.</summary>
      <param name="assemblyName">The simple, unencrypted name of the assembly. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerAssemblyAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerAssemblyAttribute" /> class with the specified assembly name and location of the assembly.</summary>
      <param name="assemblyName">The simple, unencrypted name of the assembly. </param>
      <param name="codeBase">A string that is the URL location of the assembly.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerAssemblyAttribute.AssemblyName">
      <summary>Gets or sets the name of the assembly that contains serializers for a specific set of types.</summary>
      <returns>The simple, unencrypted name of the assembly. </returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerAssemblyAttribute.CodeBase">
      <summary>Gets or sets the location of the assembly that contains the serializers.</summary>
      <returns>A location, such as a path or URI, that points to the assembly.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializerFactory">
      <summary>Creates typed versions of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> for more efficient serialization.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerFactory" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type)">
      <summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializerFactory" /> class that is used to serialize the specified type.</summary>
      <returns>A derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that is specifically created to serialize the specified type.</returns>
      <param name="type">The <see cref="T:System.Type" /> to serialize.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.String)">
      <summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializerFactory" /> class that is used to serialize the specified type and namespace.</summary>
      <returns>A derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that is specifically created to serialize the specified type.</returns>
      <param name="type">The <see cref="T:System.Type" /> to serialize.</param>
      <param name="defaultNamespace">The default namespace to use for all the XML elements. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Type[])">
      <summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializerFactory" /> class that is used to serialize the specified type. If a property or field returns an array, the <paramref name="extraTypes" /> parameter specifies objects that can be inserted into the array.</summary>
      <returns>A derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</returns>
      <param name="type">The <see cref="T:System.Type" /> to serialize.</param>
      <param name="extraTypes">A <see cref="T:System.Type" /> array of additional object types to serialize.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Xml.Serialization.XmlAttributeOverrides)">
      <summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML documents, and vice versa. Each object to be serialized can itself contain instances of classes, which this overload can override with other classes.</summary>
      <returns>A derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</returns>
      <param name="type">The <see cref="T:System.Type" /> to serialize.</param>
      <param name="overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> that contains fields that override the default serialization behavior.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
      <summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML document instances, and vice versa. Each object to be serialized can itself contain instances of classes, which this overload can override with other classes. This overload also specifies the default namespace for all the XML elements, and the class to use as the XML root element.</summary>
      <returns>A derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</returns>
      <param name="type">The <see cref="T:System.Type" /> to serialize.</param>
      <param name="overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> that contains fields that override the default serialization behavior.</param>
      <param name="extraTypes">A <see cref="T:System.Type" /> array of additional object types to serialize.</param>
      <param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> that represents the XML root element.</param>
      <param name="defaultNamespace">The default namespace of all XML elements in the XML document. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String)"></member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String,System.Security.Policy.Evidence)">
      <summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML document instances, and vice versa. Each object to be serialized can itself contain instances of classes, which this overload can override with other classes. This overload also specifies the default namespace for all the XML elements, and the class to use as the XML root element.</summary>
      <returns>A derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</returns>
      <param name="type">The <see cref="T:System.Type" /> of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize.</param>
      <param name="overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> that extends or overrides the behavior of the class specified in the type parameter.</param>
      <param name="extraTypes">A <see cref="T:System.Type" /> array of additional object types to serialize.</param>
      <param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> that defines the XML root element properties.</param>
      <param name="defaultNamespace">The default namespace of all XML elements in the XML document.</param>
      <param name="location">The path that specifies the location of the types.</param>
      <param name="evidence">An instance of the <see cref="T:System.Security.Policy.Evidence" /> class that contains credentials needed to access types.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Xml.Serialization.XmlRootAttribute)">
      <summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML documents, and vice versa. Specifies the object that represents the XML root element.</summary>
      <returns>A derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</returns>
      <param name="type">The <see cref="T:System.Type" /> to serialize.</param>
      <param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> that represents the XML root element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Xml.Serialization.XmlTypeMapping)">
      <summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializerFactory" /> class using an object that maps one type to another.</summary>
      <returns>A derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that is specifically created to serialize the mapped type.</returns>
      <param name="xmlTypeMapping">An <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> that maps one type to another.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializerImplementation">
      <summary>Defines the reader, writer, and methods for pre-generated, typed serializers.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerImplementation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerImplementation" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerImplementation.CanSerialize(System.Type)">
      <summary>Gets a value that determines whether a type can be serialized.</summary>
      <returns>true if the type can be serialized; otherwise, false.</returns>
      <param name="type">The <see cref="T:System.Type" /> to be serialized.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerImplementation.GetSerializer(System.Type)">
      <summary>Returns a serializer for the specified type.</summary>
      <returns>An instance of a type derived from the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class. </returns>
      <param name="type">The <see cref="T:System.Type" /> to be serialized.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerImplementation.Reader">
      <summary>Gets the XML reader object that is used by the serializer.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlSerializationReader" /> that is used to read an XML document or data stream.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerImplementation.ReadMethods">
      <summary>Gets the collection of methods that is used to read a data stream.</summary>
      <returns>A <see cref="T:System.Collections.Hashtable" /> that contains the methods.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerImplementation.TypedSerializers">
      <summary>Gets the collection of typed serializers that is found in the assembly.</summary>
      <returns>A <see cref="T:System.Collections.Hashtable" /> that contains the typed serializers.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerImplementation.WriteMethods">
      <summary>Get the collection of methods that is used to write to a data stream.</summary>
      <returns>A <see cref="T:System.Collections.Hashtable" /> that contains the methods.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerImplementation.Writer">
      <summary>Gets the XML writer object for the serializer.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlSerializationWriter" /> that is used to write to an XML data stream or document.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializerNamespaces">
      <summary>Contains the XML namespaces and prefixes that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> uses to generate qualified names in an XML-document instance.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor(System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> class, using the specified instance of XmlSerializerNamespaces containing the collection of prefix and namespace pairs.</summary>
      <param name="namespaces">An instance of the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />containing the namespace and prefix pairs. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor(System.Xml.XmlQualifiedName[])">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> class.</summary>
      <param name="namespaces">An array of <see cref="T:System.Xml.XmlQualifiedName" /> objects. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.Add(System.String,System.String)">
      <summary>Adds a prefix and namespace pair to an <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> object.</summary>
      <param name="prefix">The prefix associated with an XML namespace. </param>
      <param name="ns">An XML namespace. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerNamespaces.Count">
      <summary>Gets the number of prefix and namespace pairs in the collection.</summary>
      <returns>The number of prefix and namespace pairs in the collection.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.ToArray">
      <summary>Gets the array of prefix and namespace pairs in an <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> object.</summary>
      <returns>An array of <see cref="T:System.Xml.XmlQualifiedName" /> objects that are used as qualified names in an XML document.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializerVersionAttribute">
      <summary>Signifies that the code was generated by the serialization infrastructure and can be reused for increased performance, when this attribute is applied to an assembly.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerVersionAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerVersionAttribute" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerVersionAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerVersionAttribute" /> class for the specified type.</summary>
      <param name="type">The type that is being serialized.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerVersionAttribute.Namespace">
      <summary>Gets or sets the common language runtime (CLR) namespace of the assembly.</summary>
      <returns>A <see cref="T:System.String" /> containing the common language runtime (CLR) namespace of the assembly.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerVersionAttribute.ParentAssemblyId">
      <summary>Gets or sets the identity of the parent assembly.</summary>
      <returns>The version of the parent assembly.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerVersionAttribute.Type">
      <summary>Gets or sets the type that the serializer operates on.</summary>
      <returns>The <see cref="T:System.Type" /> to be serialized.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerVersionAttribute.Version">
      <summary>Gets or sets the assembly's version number.</summary>
      <returns>The version of the assembly.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlTextAttribute">
      <summary>Indicates to the <see cref="T:System.Xml.Serialization.XmlSerializer" /> that the member must be treated as XML text when the class that contains it is serialized or deserialized.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> class.</summary>
      <param name="type">The <see cref="T:System.Type" /> of the member to be serialized. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.DataType">
      <summary>Gets or sets the XML Schema definition language (XSD) data type of the text generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <returns>An XML Schema (XSD) data type, as defined by the World Wide Web Consortium (www.w3.org) document "XML Schema Part 2: Datatypes".</returns>
      <exception cref="T:System.Exception">The XML Schema data type you have specified cannot be mapped to the .NET data type. </exception>
      <exception cref="T:System.InvalidOperationException">The XML Schema data type you have specified is invalid for the property and cannot be converted to the member type. </exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.Type">
      <summary>Gets or sets the type of the member.</summary>
      <returns>The <see cref="T:System.Type" /> of the member.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlTypeAttribute">
      <summary>Controls the XML schema that is generated when the attribute target is serialized by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTypeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTypeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> class and specifies the name of the XML type.</summary>
      <param name="typeName">The name of the XML type that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates when it serializes the class instance (and recognizes when it deserializes the class instance). </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.AnonymousType">
      <summary>Gets or sets a value that determines whether the resulting schema type is an XSD anonymous type.</summary>
      <returns>true, if the resulting schema type is an XSD anonymous type; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.IncludeInSchema">
      <summary>Gets or sets a value that indicates whether to include the type in XML schema documents.</summary>
      <returns>true to include the type in XML schema documents; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.Namespace">
      <summary>Gets or sets the namespace of the XML type.</summary>
      <returns>The namespace of the XML type.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.TypeName">
      <summary>Gets or sets the name of the XML type.</summary>
      <returns>The name of the XML type.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlTypeMapping">
      <summary>Contains a mapping of one type to another.</summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeMapping.TypeFullName">
      <summary>The fully qualified type name that includes the namespace (or namespaces) and type.</summary>
      <returns>The fully qualified type name.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeMapping.TypeName">
      <summary>Gets the type name of the mapped object.</summary>
      <returns>The type name of the mapped object.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeMapping.XsdTypeName">
      <summary>Gets the XML element name of the mapped object.</summary>
      <returns>The XML element name of the mapped object. The default is the class name of the object.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeMapping.XsdTypeNamespace">
      <summary>Gets the XML namespace of the mapped object.</summary>
      <returns>The XML namespace of the mapped object. The default is an empty string ("").</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.IsNullableSpecified"></member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.IsNullableSpecified"></member>
    <member name="T:System.Xml.Serialization.Advanced.SchemaImporterExtension">
      <summary>Allows you to customize the code generated from a Web Services Description Language (WSDL) document when using automated query tools.</summary>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportAnyElement(System.Xml.Schema.XmlSchemaAny,System.Boolean,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)">
      <summary>Handles the importation of the &lt;xsd:any&gt; elements in the schema.</summary>
      <returns>The name of the CLR type that the element maps to. </returns>
      <param name="any">An <see cref="T:System.Xml.Schema.XmlSchemaAny" /> that represents the xsd:any element found in the XML Schema Document (XSD).</param>
      <param name="mixed">A <see cref="T:System.Boolean" /> that indicates whether the XSD complex attribute has been set to "mixed". true, if the attribute has been set to mixed, otherwise false. </param>
      <param name="schemas">An <see cref="T:System.Xml.Serialization.XmlSchemas" /> that contains the collection of schemas found in the XSD.</param>
      <param name="importer">The <see cref="T:System.Xml.Serialization.XmlSchemaImporter" /> that is the importer being used.</param>
      <param name="compileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" /> to which you can add CodeDOM structures to generate alternative code for the XSD. </param>
      <param name="mainNamespace">A <see cref="T:System.CodeDom.CodeNamespace" /> that represents the current namespace for the element.</param>
      <param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> for the setting options on the code compiler.</param>
      <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> that is the CodeDOM provider used to generate the new code. </param>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportDefaultValue(System.String,System.String)">
      <summary>Allows you to specify the default value for the XSD type being imported.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression" /> setting the new default value.</returns>
      <param name="value">The value found in the original XSD.</param>
      <param name="type">The XSD type name.</param>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType(System.String,System.String,System.Xml.Schema.XmlSchemaObject,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)">
      <summary>Allows you to manipulate the code generated by examining the imported schema and specifying the CLR type that it maps to.</summary>
      <returns>The name of the CLR type that this maps to.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="context">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that represents schema information, such as the line number of the XML element.</param>
      <param name="schemas">An <see cref="T:System.Xml.Serialization.XmlSchemas" /> that contains the collection of schemas in the document.</param>
      <param name="importer">The <see cref="T:System.Xml.Serialization.XmlSchemaImporter" /> that is the importer being used.</param>
      <param name="compileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" /> to which you can add CodeDOM structures to generate alternative code for the XSD.</param>
      <param name="mainNamespace">A <see cref="T:System.CodeDom.CodeNamespace" /> that represents the current namespace for the element.</param>
      <param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> for the setting options on the code compiler.</param>
      <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> that is used to generate the new code.</param>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaObject,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)">
      <summary>Allows you to manipulate the code generated by examining the imported schema and specifying the CLR type that it maps to.</summary>
      <returns>The name of the CLR type that this maps to.</returns>
      <param name="type">An <see cref="T:System.Xml.Schema.XmlSchemaType" /> that represents the XSD type.</param>
      <param name="context">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that represents schema information, such as the line number of the XML element.</param>
      <param name="schemas">An <see cref="T:System.Xml.Serialization.XmlSchemas" /> that contains the collection of schemas in the document.</param>
      <param name="importer">The <see cref="T:System.Xml.Serialization.XmlSchemaImporter" /> that is the importer being used.</param>
      <param name="compileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" /> to which you can add CodeDOM structures to generate alternative code for the XSD.</param>
      <param name="mainNamespace">A <see cref="T:System.CodeDom.CodeNamespace" /> that represents the current namespace for the element.</param>
      <param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> for the setting options on the code compiler.</param>
      <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> that is used to generate the new code.</param>
    </member>
    <member name="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection">
      <summary>Represents a collection of <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" /> objects.</summary>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Add(System.String,System.Type)">
      <summary>Adds the specified importer extension to the collection. The name parameter allows you to supply a custom name for the extension.</summary>
      <returns>The index of the newly added item.</returns>
      <param name="name">A custom name for the extension.</param>
      <param name="type">The <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection" /> to add.</param>
      <exception cref="T:System.ArgumentException">The value of type does not inherit from <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection" />.</exception>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Add(System.Xml.Serialization.Advanced.SchemaImporterExtension)">
      <summary>Adds the specified importer extension to the collection.</summary>
      <returns>The index of the added extension.</returns>
      <param name="extension">The <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection" /> to add.</param>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Clear">
      <summary>Clears the collection of importer extensions.</summary>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Contains(System.Xml.Serialization.Advanced.SchemaImporterExtension)">
      <summary>Gets a value that indicates whether the specified importer extension exists in the collection.</summary>
      <returns>true if the extension is found; otherwise, false.</returns>
      <param name="extension">The <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection" /> to search for.</param>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.CopyTo(System.Xml.Serialization.Advanced.SchemaImporterExtension[],System.Int32)">
      <summary>Copies all the elements of the current <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection" /> to the specified array of <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" /> objects at the specified index. </summary>
      <param name="array">The <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" /> to copy the current collection to.</param>
      <param name="index">The zero-based index at which the collection is added.</param>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.IndexOf(System.Xml.Serialization.Advanced.SchemaImporterExtension)">
      <summary>Searches for the specified item and returns the zero-based index of the first occurrence within the collection.</summary>
      <returns>The index of the found item.</returns>
      <param name="extension">The <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" /> to search for.</param>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Insert(System.Int32,System.Xml.Serialization.Advanced.SchemaImporterExtension)">
      <summary>Inserts the specified <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" /> into the collection at the specified index.</summary>
      <param name="index">The zero-base index at which the extension should be inserted.</param>
      <param name="extension">The <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" /> to insert.</param>
    </member>
    <member name="P:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Item(System.Int32)">
      <summary>Gets the <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection" /> at the specified index.</summary>
      <returns>The <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection" /> at the specified index.</returns>
      <param name="index">The index of the item to find.</param>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Remove(System.String)">
      <summary>Removes the <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" />, specified by name, from the collection.</summary>
      <param name="name">The name of the <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" /> to remove. The name is set using the <see cref="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Add(System.String,System.Type)" /> method.</param>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Remove(System.Xml.Serialization.Advanced.SchemaImporterExtension)">
      <summary>Removes the specified <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" /> from the collection.</summary>
      <param name="extension">The <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" /> to remove. </param>
    </member>
    <member name="T:System.Xml.Serialization.Configuration.DateTimeSerializationSection">
      <summary>Handles configuration settings for XML serialization of <see cref="T:System.DateTime" /> instances.</summary>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.DateTimeSerializationSection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.DateTimeSerializationSection" /> class.</summary>
    </member>
    <member name="P:System.Xml.Serialization.Configuration.DateTimeSerializationSection.Mode">
      <summary>Gets or sets a value that determines the serialization format.</summary>
      <returns>One of the <see cref="T:System.Xml.Serialization.Configuration.DateTimeSerializationSection.DateTimeSerializationMode" /> values.</returns>
    </member>
    <member name="T:System.Xml.Serialization.Configuration.DateTimeSerializationSection.DateTimeSerializationMode">
      <summary>Determines XML serialization format of <see cref="T:System.DateTime" /> objects.</summary>
    </member>
    <member name="F:System.Xml.Serialization.Configuration.DateTimeSerializationSection.DateTimeSerializationMode.Default">
      <summary>Same as Roundtrip.</summary>
    </member>
    <member name="F:System.Xml.Serialization.Configuration.DateTimeSerializationSection.DateTimeSerializationMode.Roundtrip">
      <summary>The serializer examines individual <see cref="T:System.DateTime" />  instances to determine the serialization format: UTC, local, or unspecified.</summary>
    </member>
    <member name="F:System.Xml.Serialization.Configuration.DateTimeSerializationSection.DateTimeSerializationMode.Local">
      <summary>The serializer formats all <see cref="T:System.DateTime" /> objects as local time. This is for version 1.0 and 1.1 compatibility.</summary>
    </member>
    <member name="T:System.Xml.Serialization.Configuration.RootedPathValidator">
      <summary>Validates the rules governing the use of the tempFilesLocation configuration switch. </summary>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.RootedPathValidator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.RootedPathValidator" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.RootedPathValidator.CanValidate(System.Type)">
      <summary>Determines whether the type of the object can be validated.</summary>
      <returns>true if the <paramref name="type" /> parameter matches a valid XMLSerializer object; otherwise, false.</returns>
      <param name="type">The type of the object.</param>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.RootedPathValidator.Validate(System.Object)">
      <summary>Determines whether the value of an object is valid.</summary>
      <param name="value">The value of an object.</param>
    </member>
    <member name="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement">
      <summary>Handles the configuration for the <see cref="T:System.Xml.Serialization.XmlSchemaImporter" /> class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement" /> class and specifies the name and type of the extension.</summary>
      <param name="name">The name of the new extension. The name must be unique.</param>
      <param name="type">The type of the new extension, specified as a string.</param>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement" /> class using the specified name and type.</summary>
      <param name="name">The name of the new extension. The name must be unique.</param>
      <param name="type">The <see cref="T:System.Type" /> of the new extension.</param>
    </member>
    <member name="P:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement.Name">
      <summary>Gets or sets the name of the extension.</summary>
      <returns>The name of the extension.</returns>
    </member>
    <member name="P:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement.Type">
      <summary>Gets or sets the type of the extension.</summary>
      <returns>A type of the extension.</returns>
    </member>
    <member name="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection">
      <summary>Handles the XML elements used to configure the operation of the <see cref="T:System.Xml.Serialization.XmlSchemaImporter" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.Add(System.Xml.Serialization.Configuration.SchemaImporterExtensionElement)">
      <summary>Adds an item to the end of the collection.</summary>
      <param name="element">The <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement" /> to add to the collection.</param>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.Clear">
      <summary>Removes all items from the collection.</summary>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.IndexOf(System.Xml.Serialization.Configuration.SchemaImporterExtensionElement)">
      <summary>Returns the zero-based index of the first element in the collection with the specified value.</summary>
      <returns>The index of the found element.</returns>
      <param name="element">The <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement" /> to find.</param>
    </member>
    <member name="P:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.Item(System.Int32)">
      <summary>Gets or sets the object that represents the XML element at the specified index.</summary>
      <returns>The <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement" /> at the specified index.</returns>
      <param name="index">The zero-based index of the XML element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or- <paramref name="index" /> is equal to or greater than Count.</exception>
    </member>
    <member name="P:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.Item(System.String)">
      <summary>Gets or sets the item with the specified name.</summary>
      <returns>The <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement" /> with the specified name.</returns>
      <param name="name">The name of the item to get or set.</param>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.Remove(System.String)">
      <summary>Removes the item with the specified name from the collection.</summary>
      <param name="name">The name of the item to remove.</param>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.Remove(System.Xml.Serialization.Configuration.SchemaImporterExtensionElement)">
      <summary>Removes the first occurrence of a specific item from the collection.</summary>
      <param name="element">The <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement" /> to remove.</param>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.RemoveAt(System.Int32)">
      <summary>Removes the item at the specified index from the collection.</summary>
      <param name="index">The index of the object to remove.</param>
    </member>
    <member name="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection">
      <summary>Handles the configuration for the <see cref="T:System.Xml.Serialization.XmlSchemaImporter" /> class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection" /> class.</summary>
    </member>
    <member name="P:System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection.SchemaImporterExtensions">
      <summary>Gets the object that represents the collection of extensions.</summary>
      <returns>A <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection" /> that contains the objects that represent configuration elements.</returns>
    </member>
    <member name="T:System.Xml.Serialization.Configuration.SerializationSectionGroup">
      <summary>Handles the XML elements used to configure XML serialization.</summary>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.SerializationSectionGroup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.SerializationSectionGroup" /> class.</summary>
    </member>
    <member name="P:System.Xml.Serialization.Configuration.SerializationSectionGroup.DateTimeSerialization">
      <summary>Gets the object that represents the <see cref="T:System.DateTime" /> serialization configuration element.</summary>
      <returns>The <see cref="T:System.Xml.Serialization.Configuration.DateTimeSerializationSection" /> object that represents the configuration element.</returns>
    </member>
    <member name="P:System.Xml.Serialization.Configuration.SerializationSectionGroup.SchemaImporterExtensions">
      <summary>Gets the object that represents the section that contains configuration elements for the <see cref="T:System.Xml.Serialization.XmlSchemaImporter" />.</summary>
      <returns>The <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection" /> that represents the schemaImporterExtenstion element in the configuration file.</returns>
    </member>
    <member name="P:System.Xml.Serialization.Configuration.SerializationSectionGroup.XmlSerializer">
      <summary>Gets the object that represents the configuration group for the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <returns>The <see cref="T:System.Xml.Serialization.Configuration.XmlSerializerSection" /> that represents the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</returns>
    </member>
    <member name="T:System.Xml.Serialization.Configuration.XmlSerializerSection">
      <summary>Handles the XML elements used to configure XML serialization. </summary>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.XmlSerializerSection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.XmlSerializerSection" /> class. </summary>
    </member>
    <member name="P:System.Xml.Serialization.Configuration.XmlSerializerSection.CheckDeserializeAdvances">
      <summary>Gets or sets a value that determines whether an additional check of progress of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> is done.</summary>
      <returns>true if the check is made; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Xml.Serialization.Configuration.XmlSerializerSection.TempFilesLocation"></member>
    <member name="T:System.Xml.XPath.IXPathNavigable">
      <summary>Provides an accessor to the <see cref="T:System.Xml.XPath.XPathNavigator" /> class.</summary>
    </member>
    <member name="M:System.Xml.XPath.IXPathNavigable.CreateNavigator">
      <summary>Returns a new <see cref="T:System.Xml.XPath.XPathNavigator" /> object. </summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</returns>
    </member>
    <member name="T:System.Xml.XPath.XmlCaseOrder">
      <summary>Specifies the sort order for uppercase and lowercase letters.</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.None">
      <summary>Ignore the case.</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.UpperFirst">
      <summary>Uppercase letters are sorted before lowercase letters.</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.LowerFirst">
      <summary>Lowercase letters are sorted before uppercase letters.</summary>
    </member>
    <member name="T:System.Xml.XPath.XmlDataType">
      <summary>Specifies the data type used to determine sort order.</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlDataType.Text">
      <summary>Values are sorted alphabetically.</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlDataType.Number">
      <summary>Values are sorted numerically.</summary>
    </member>
    <member name="T:System.Xml.XPath.XmlSortOrder">
      <summary>Specifies the sort order.</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlSortOrder.Ascending">
      <summary>Nodes are sorted in ascending order. For example, if the numbers 1,2,3, and 4 are sorted in ascending order, they appear as 1,2,3,4.</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlSortOrder.Descending">
      <summary>Nodes are sorted in descending order. For example, if the numbers 1,2,3, and 4 are sorted in descending order, they appear as, 4,3,2,1. </summary>
    </member>
    <member name="T:System.Xml.XPath.XPathDocument">
      <summary>Provides a fast, read-only, in-memory representation of an XML document by using the XPath data model.</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathDocument" /> class from the XML data in the specified <see cref="T:System.IO.Stream" /> object.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> object that contains the XML data.</param>
      <exception cref="T:System.Xml.XmlException">An error was encountered in the XML data. The <see cref="T:System.Xml.XPath.XPathDocument" /> remains empty. </exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.IO.Stream" /> object passed as a parameter is null.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.#ctor(System.IO.TextReader)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathDocument" /> class from the XML data that is contained in the specified <see cref="T:System.IO.TextReader" /> object.</summary>
      <param name="textReader">The <see cref="T:System.IO.TextReader" /> object that contains the XML data.</param>
      <exception cref="T:System.Xml.XmlException">An error was encountered in the XML data. The <see cref="T:System.Xml.XPath.XPathDocument" /> remains empty. </exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.IO.TextReader" /> object passed as a parameter is null.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathDocument" /> class from the XML data in the specified file.</summary>
      <param name="uri">The path of the file that contains the XML data.</param>
      <exception cref="T:System.Xml.XmlException">An error was encountered in the XML data. The <see cref="T:System.Xml.XPath.XPathDocument" /> remains empty. </exception>
      <exception cref="T:System.ArgumentNullException">The file path parameter is null.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.#ctor(System.String,System.Xml.XmlSpace)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathDocument" /> class from the XML data in the file specified with the white space handling specified.</summary>
      <param name="uri">The path of the file that contains the XML data.</param>
      <param name="space">An <see cref="T:System.Xml.XmlSpace" /> object.</param>
      <exception cref="T:System.Xml.XmlException">An error was encountered in the XML data. The <see cref="T:System.Xml.XPath.XPathDocument" /> remains empty. </exception>
      <exception cref="T:System.ArgumentNullException">The file path parameter or <see cref="T:System.Xml.XmlSpace" /> object parameter is null.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.#ctor(System.Xml.XmlReader)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathDocument" /> class from the XML data that is contained in the specified <see cref="T:System.Xml.XmlReader" /> object.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> object that contains the XML data. </param>
      <exception cref="T:System.Xml.XmlException">An error was encountered in the XML data. The <see cref="T:System.Xml.XPath.XPathDocument" /> remains empty. </exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlReader" /> object passed as a parameter is null.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.#ctor(System.Xml.XmlReader,System.Xml.XmlSpace)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathDocument" /> class from the XML data that is contained in the specified <see cref="T:System.Xml.XmlReader" /> object with the specified white space handling.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> object that contains the XML data.</param>
      <param name="space">An <see cref="T:System.Xml.XmlSpace" /> object.</param>
      <exception cref="T:System.Xml.XmlException">An error was encountered in the XML data. The <see cref="T:System.Xml.XPath.XPathDocument" /> remains empty. </exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlReader" /> object parameter or <see cref="T:System.Xml.XmlSpace" /> object parameter is null.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.CreateNavigator">
      <summary>Initializes a read-only <see cref="T:System.Xml.XPath.XPathNavigator" /> object for navigating through nodes in this <see cref="T:System.Xml.XPath.XPathDocument" />.</summary>
      <returns>A read-only <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathException">
      <summary>Provides the exception thrown when an error occurs while processing an XPath expression. </summary>
    </member>
    <member name="M:System.Xml.XPath.XPathException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathException" /> class.</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Uses the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> objects to initialize a new instance of the <see cref="T:System.Xml.XPath.XPathException" /> class.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains all the properties of an <see cref="T:System.Xml.XPath.XPathException" />. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object. </param>
    </member>
    <member name="M:System.Xml.XPath.XPathException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathException" /> class with the specified exception message.</summary>
      <param name="message">The description of the error condition.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathException" /> class using the specified exception message and <see cref="T:System.Exception" /> object.</summary>
      <param name="message">The description of the error condition. </param>
      <param name="innerException">The <see cref="T:System.Exception" /> that threw the <see cref="T:System.Xml.XPath.XPathException" />, if any. This value can be null. </param>
    </member>
    <member name="M:System.Xml.XPath.XPathException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Streams all the <see cref="T:System.Xml.XPath.XPathException" /> properties into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class for the specified <see cref="T:System.Runtime.Serialization.StreamingContext" />.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object.</param>
    </member>
    <member name="P:System.Xml.XPath.XPathException.Message">
      <summary>Gets the description of the error condition for this exception.</summary>
      <returns>The string description of the error condition for this exception.</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathExpression">
      <summary>Provides a typed class that represents a compiled XPath expression.</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Collections.IComparer)">
      <summary>When overridden in a derived class, sorts the nodes selected by the XPath expression according to the specified <see cref="T:System.Collections.IComparer" /> object.</summary>
      <param name="expr">An object representing the sort key. This can be the string value of the node or an <see cref="T:System.Xml.XPath.XPathExpression" /> object with a compiled XPath expression.</param>
      <param name="comparer">An <see cref="T:System.Collections.IComparer" /> object that provides the specific data type comparisons for comparing two objects for equivalence. </param>
      <exception cref="T:System.Xml.XPath.XPathException">The <see cref="T:System.Xml.XPath.XPathExpression" /> or sort key includes a prefix and either an <see cref="T:System.Xml.XmlNamespaceManager" /> is not provided, or the prefix cannot be found in the supplied <see cref="T:System.Xml.XmlNamespaceManager" />.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType)">
      <summary>When overridden in a derived class, sorts the nodes selected by the XPath expression according to the supplied parameters.</summary>
      <param name="expr">An object representing the sort key. This can be the string value of the node or an <see cref="T:System.Xml.XPath.XPathExpression" /> object with a compiled XPath expression. </param>
      <param name="order">An <see cref="T:System.Xml.XPath.XmlSortOrder" /> value indicating the sort order. </param>
      <param name="caseOrder">An <see cref="T:System.Xml.XPath.XmlCaseOrder" /> value indicating how to sort uppercase and lowercase letters.</param>
      <param name="lang">The language to use for comparison. Uses the <see cref="T:System.Globalization.CultureInfo" /> class that can be passed to the <see cref="Overload:System.String.Compare" /> method for the language types, for example, "us-en" for U.S. English. If an empty string is specified, the system environment is used to determine the <see cref="T:System.Globalization.CultureInfo" />. </param>
      <param name="dataType">An <see cref="T:System.Xml.XPath.XmlDataType" /> value indicating the sort order for the data type. </param>
      <exception cref="T:System.Xml.XPath.XPathException">The <see cref="T:System.Xml.XPath.XPathExpression" /> or sort key includes a prefix and either an <see cref="T:System.Xml.XmlNamespaceManager" /> is not provided, or the prefix cannot be found in the supplied <see cref="T:System.Xml.XmlNamespaceManager" />. </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Clone">
      <summary>When overridden in a derived class, returns a clone of this <see cref="T:System.Xml.XPath.XPathExpression" />.</summary>
      <returns>A new <see cref="T:System.Xml.XPath.XPathExpression" /> object.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Compile(System.String)">
      <summary>Compiles the XPath expression specified and returns an <see cref="T:System.Xml.XPath.XPathExpression" /> object representing the XPath expression.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathExpression" /> object.</returns>
      <param name="xpath">An XPath expression.</param>
      <exception cref="T:System.ArgumentException">The XPath expression parameter is not a valid XPath expression.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Compile(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>Compiles the specified XPath expression, with the <see cref="T:System.Xml.IXmlNamespaceResolver" /> object specified for namespace resolution, and returns an <see cref="T:System.Xml.XPath.XPathExpression" /> object that represents the XPath expression.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathExpression" /> object.</returns>
      <param name="xpath">An XPath expression.</param>
      <param name="nsResolver">An object that implements the <see cref="T:System.Xml.IXmlNamespaceResolver" /> interface for namespace resolution.</param>
      <exception cref="T:System.ArgumentException">The XPath expression parameter is not a valid XPath expression.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathExpression.Expression">
      <summary>When overridden in a derived class, gets a string representation of the <see cref="T:System.Xml.XPath.XPathExpression" />.</summary>
      <returns>A string representation of the <see cref="T:System.Xml.XPath.XPathExpression" />.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathExpression.ReturnType">
      <summary>When overridden in a derived class, gets the result type of the XPath expression.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathResultType" /> value representing the result type of the XPath expression.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.IXmlNamespaceResolver)">
      <summary>When overridden in a derived class, specifies the <see cref="T:System.Xml.IXmlNamespaceResolver" /> object to use for namespace resolution.</summary>
      <param name="nsResolver">An object that implements the <see cref="T:System.Xml.IXmlNamespaceResolver" /> interface to use for namespace resolution.</param>
      <exception cref="T:System.Xml.XPath.XPathException">The <see cref="T:System.Xml.IXmlNamespaceResolver" /> object parameter is not derived from <see cref="T:System.Xml.IXmlNamespaceResolver" />. </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)">
      <summary>When overridden in a derived class, specifies the <see cref="T:System.Xml.XmlNamespaceManager" /> object to use for namespace resolution.</summary>
      <param name="nsManager">An <see cref="T:System.Xml.XmlNamespaceManager" /> object to use for namespace resolution. </param>
      <exception cref="T:System.Xml.XPath.XPathException">The <see cref="T:System.Xml.XmlNamespaceManager" /> object parameter is not derived from the <see cref="T:System.Xml.XmlNamespaceManager" /> class. </exception>
    </member>
    <member name="T:System.Xml.XPath.XPathItem">
      <summary>Represents an item in the XQuery 1.0 and XPath 2.0 Data Model.</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathItem" /> class.</summary>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.IsNode">
      <summary>When overridden in a derived class, gets a value indicating whether the item represents an XPath node or an atomic value.</summary>
      <returns>true if the item represents an XPath node; false if the item represents an atomic value.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.TypedValue">
      <summary>When overridden in a derived class, gets the current item as a boxed object of the most appropriate .NET Framework version 2.0 type according to its schema type.</summary>
      <returns>The current item as a boxed object of the most appropriate .NET Framework type.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.Value">
      <summary>When overridden in a derived class, gets the string value of the item.</summary>
      <returns>The string value of the item.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.ValueAs(System.Type)">
      <summary>Returns the item's value as the specified type.</summary>
      <returns>The value of the item as the type requested.</returns>
      <param name="returnType">The type to return the item value as.</param>
      <exception cref="T:System.FormatException">The item's value is not in the correct format for the target type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>When overridden in a derived class, returns the item's value as the type specified using the <see cref="T:System.Xml.IXmlNamespaceResolver" /> object specified to resolve namespace prefixes.</summary>
      <returns>The value of the item as the type requested.</returns>
      <param name="returnType">The type to return the item's value as.</param>
      <param name="nsResolver">The <see cref="T:System.Xml.IXmlNamespaceResolver" /> object used to resolve namespace prefixes.</param>
      <exception cref="T:System.FormatException">The item's value is not in the correct format for the target type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsBoolean">
      <summary>When overridden in a derived class, gets the item's value as a <see cref="T:System.Boolean" />.</summary>
      <returns>The item's value as a <see cref="T:System.Boolean" />.</returns>
      <exception cref="T:System.FormatException">The item's value is not in the correct format for the <see cref="T:System.Boolean" /> type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Boolean" /> is not valid.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsDateTime">
      <summary>When overridden in a derived class, gets the item's value as a <see cref="T:System.DateTime" />.</summary>
      <returns>The item's value as a <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.FormatException">The item's value is not in the correct format for the <see cref="T:System.DateTime" /> type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.DateTime" /> is not valid.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsDouble">
      <summary>When overridden in a derived class, gets the item's value as a <see cref="T:System.Double" />.</summary>
      <returns>The item's value as a <see cref="T:System.Double" />.</returns>
      <exception cref="T:System.FormatException">The item's value is not in the correct format for the <see cref="T:System.Double" /> type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Double" /> is not valid.</exception>
      <exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsInt">
      <summary>When overridden in a derived class, gets the item's value as an <see cref="T:System.Int32" />.</summary>
      <returns>The item's value as an <see cref="T:System.Int32" />.</returns>
      <exception cref="T:System.FormatException">The item's value is not in the correct format for the <see cref="T:System.Int32" /> type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Int32" /> is not valid.</exception>
      <exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsLong">
      <summary>When overridden in a derived class, gets the item's value as an <see cref="T:System.Int64" />.</summary>
      <returns>The item's value as an <see cref="T:System.Int64" />.</returns>
      <exception cref="T:System.FormatException">The item's value is not in the correct format for the <see cref="T:System.Int64" /> type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Int64" /> is not valid.</exception>
      <exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueType">
      <summary>When overridden in a derived class, gets the .NET Framework version 2.0 type of the item.</summary>
      <returns>The .NET Framework type of the item. The default value is <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.XmlType">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Xml.Schema.XmlSchemaType" /> for the item.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaType" /> for the item.</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNamespaceScope">
      <summary>Defines the namespace scope.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.All">
      <summary>Returns all namespaces defined in the scope of the current node. This includes the xmlns:xml namespace which is always declared implicitly. The order of the namespaces returned is not defined.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.ExcludeXml">
      <summary>Returns all namespaces defined in the scope of the current node, excluding the xmlns:xml namespace. The xmlns:xml namespace is always declared implicitly. The order of the namespaces returned is not defined.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.Local">
      <summary>Returns all namespaces that are defined locally at the current node. </summary>
    </member>
    <member name="T:System.Xml.XPath.XPathNavigator">
      <summary>Provides a cursor model for navigating and editing XML data.</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathNavigator" /> class.</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild">
      <summary>Returns an <see cref="T:System.Xml.XmlWriter" /> object used to create one or more new child nodes at the end of the list of child nodes of the current node. </summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object used to create new child nodes at the end of the list of child nodes of the current node.</returns>
      <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on is not the root node or an element node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.String)">
      <summary>Creates a new child node at the end of the list of child nodes of the current node using the XML data string specified.</summary>
      <param name="newChild">The XML data string for the new child node.</param>
      <exception cref="T:System.ArgumentNullException">The XML data string parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on is not the root node or an element node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
      <exception cref="T:System.Xml.XmlException">The XML data string parameter is not well-formed.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XmlReader)">
      <summary>Creates a new child node at the end of the list of child nodes of the current node using the XML contents of the <see cref="T:System.Xml.XmlReader" /> object specified.</summary>
      <param name="newChild">An <see cref="T:System.Xml.XmlReader" /> object positioned on the XML data for the new child node.</param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.XmlReader" /> object is in an error state or closed.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlReader" /> object parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on is not the root node or an element node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
      <exception cref="T:System.Xml.XmlException">The XML contents of the <see cref="T:System.Xml.XmlReader" /> object parameter is not well-formed.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XPath.XPathNavigator)">
      <summary>Creates a new child node at the end of the list of child nodes of the current node using the nodes in the <see cref="T:System.Xml.XPath.XPathNavigator" /> specified.</summary>
      <param name="newChild">An <see cref="T:System.Xml.XPath.XPathNavigator" /> object positioned on the node to add as the new child node.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> object parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on is not the root node or an element node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChildElement(System.String,System.String,System.String,System.String)">
      <summary>Creates a new child element node at the end of the list of child nodes of the current node using the namespace prefix, local name and namespace URI specified with the value specified.</summary>
      <param name="prefix">The namespace prefix of the new child element node (if any).</param>
      <param name="localName">The local name of the new child element node (if any).</param>
      <param name="namespaceURI">The namespace URI of the new child element node (if any). <see cref="F:System.String.Empty" /> and null are equivalent.</param>
      <param name="value">The value of the new child element node. If <see cref="F:System.String.Empty" /> or null are passed, an empty element is created.</param>
      <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on is not the root node or an element node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.BaseURI">
      <summary>When overridden in a derived class, gets the base URI for the current node.</summary>
      <returns>The location from which the node was loaded, or <see cref="F:System.String.Empty" /> if there is no value.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.CanEdit">
      <summary>Gets a value indicating whether the <see cref="T:System.Xml.XPath.XPathNavigator" /> can edit the underlying XML data.</summary>
      <returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> can edit the underlying XML data; otherwise false.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
      <summary>Verifies that the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> conforms to the XML Schema definition language (XSD) schema provided.</summary>
      <returns>true if no schema validation errors occurred; otherwise, false.</returns>
      <param name="schemas">The <see cref="T:System.Xml.Schema.XmlSchemaSet" /> containing the schemas used to validate the XML data contained in the <see cref="T:System.Xml.XPath.XPathNavigator" />.</param>
      <param name="validationEventHandler">The <see cref="T:System.Xml.Schema.ValidationEventHandler" /> that receives information about schema validation warnings and errors.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">A schema validation error occurred, and no <see cref="T:System.Xml.Schema.ValidationEventHandler" /> was specified to handle validation errors.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on a node that is not an element, attribute, or the root node or there is not type information to perform validation.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="M:System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)" /> method was called with an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> parameter when the <see cref="T:System.Xml.XPath.XPathNavigator" /> was not positioned on the root node of the XML data.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Clone">
      <summary>When overridden in a derived class, creates a new <see cref="T:System.Xml.XPath.XPathNavigator" /> positioned at the same node as this <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
      <returns>A new <see cref="T:System.Xml.XPath.XPathNavigator" /> positioned at the same node as this <see cref="T:System.Xml.XPath.XPathNavigator" />.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ComparePosition(System.Xml.XPath.XPathNavigator)">
      <summary>Compares the position of the current <see cref="T:System.Xml.XPath.XPathNavigator" /> with the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> specified.</summary>
      <returns>An <see cref="T:System.Xml.XmlNodeOrder" /> value representing the comparative position of the two <see cref="T:System.Xml.XPath.XPathNavigator" /> objects.</returns>
      <param name="nav">The <see cref="T:System.Xml.XPath.XPathNavigator" /> to compare against.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Compile(System.String)">
      <summary>Compiles a string representing an XPath expression and returns an <see cref="T:System.Xml.XPath.XPathExpression" /> object.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathExpression" /> object representing the XPath expression.</returns>
      <param name="xpath">A string representing an XPath expression.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="xpath" /> parameter contains an XPath expression that is not valid.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateAttribute(System.String,System.String,System.String,System.String)">
      <summary>Creates an attribute node on the current element node using the namespace prefix, local name and namespace URI specified with the value specified.</summary>
      <param name="prefix">The namespace prefix of the new attribute node (if any).</param>
      <param name="localName">The local name of the new attribute node which cannot <see cref="F:System.String.Empty" /> or null.</param>
      <param name="namespaceURI">The namespace URI for the new attribute node (if any).</param>
      <param name="value">The value of the new attribute node. If <see cref="F:System.String.Empty" /> or null are passed, an empty attribute node is created.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateAttributes">
      <summary>Returns an <see cref="T:System.Xml.XmlWriter" /> object used to create new attributes on the current element.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object used to create new attributes on the current element.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateNavigator">
      <summary>Returns a copy of the <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNavigator" /> copy of this <see cref="T:System.Xml.XPath.XPathNavigator" />.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.DeleteRange(System.Xml.XPath.XPathNavigator)">
      <summary>Deletes a range of sibling nodes from the current node to the node specified.</summary>
      <param name="lastSiblingToDelete">An <see cref="T:System.Xml.XPath.XPathNavigator" /> positioned on the last sibling node in the range to delete.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> specified is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
      <exception cref="T:System.InvalidOperationException">The last node to delete specified is not a valid sibling node of the current node.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.DeleteSelf">
      <summary>Deletes the current node and its child nodes.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on a node that cannot be deleted such as the root node or a namespace node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.String)">
      <summary>Evaluates the specified XPath expression and returns the typed result.</summary>
      <returns>The result of the expression (Boolean, number, string, or node set). This maps to <see cref="T:System.Boolean" />, <see cref="T:System.Double" />, <see cref="T:System.String" />, or <see cref="T:System.Xml.XPath.XPathNodeIterator" /> objects respectively.</returns>
      <param name="xpath">A string representing an XPath expression that can be evaluated.</param>
      <exception cref="T:System.ArgumentException">The return type of the XPath expression is a node set.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>Evaluates the specified XPath expression and returns the typed result, using the <see cref="T:System.Xml.IXmlNamespaceResolver" /> object specified to resolve namespace prefixes in the XPath expression.</summary>
      <returns>The result of the expression (Boolean, number, string, or node set). This maps to <see cref="T:System.Boolean" />, <see cref="T:System.Double" />, <see cref="T:System.String" />, or <see cref="T:System.Xml.XPath.XPathNodeIterator" /> objects respectively.</returns>
      <param name="xpath">A string representing an XPath expression that can be evaluated.</param>
      <param name="resolver">The <see cref="T:System.Xml.IXmlNamespaceResolver" /> object used to resolve namespace prefixes in the XPath expression.</param>
      <exception cref="T:System.ArgumentException">The return type of the XPath expression is a node set.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression)">
      <summary>Evaluates the <see cref="T:System.Xml.XPath.XPathExpression" /> and returns the typed result.</summary>
      <returns>The result of the expression (Boolean, number, string, or node set). This maps to <see cref="T:System.Boolean" />, <see cref="T:System.Double" />, <see cref="T:System.String" />, or <see cref="T:System.Xml.XPath.XPathNodeIterator" /> objects respectively.</returns>
      <param name="expr">An <see cref="T:System.Xml.XPath.XPathExpression" /> that can be evaluated.</param>
      <exception cref="T:System.ArgumentException">The return type of the XPath expression is a node set.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression,System.Xml.XPath.XPathNodeIterator)">
      <summary>Uses the supplied context to evaluate the <see cref="T:System.Xml.XPath.XPathExpression" />, and returns the typed result.</summary>
      <returns>The result of the expression (Boolean, number, string, or node set). This maps to <see cref="T:System.Boolean" />, <see cref="T:System.Double" />, <see cref="T:System.String" />, or <see cref="T:System.Xml.XPath.XPathNodeIterator" /> objects respectively.</returns>
      <param name="expr">An <see cref="T:System.Xml.XPath.XPathExpression" /> that can be evaluated.</param>
      <param name="context">An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that points to the selected node set that the evaluation is to be performed on.</param>
      <exception cref="T:System.ArgumentException">The return type of the XPath expression is a node set.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetAttribute(System.String,System.String)">
      <summary>Gets the value of the attribute with the specified local name and namespace URI.</summary>
      <returns>A <see cref="T:System.String" /> that contains the value of the specified attribute; <see cref="F:System.String.Empty" /> if a matching attribute is not found, or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element node.</returns>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceURI">The namespace URI of the attribute.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetNamespace(System.String)">
      <summary>Returns the value of the namespace node corresponding to the specified local name.</summary>
      <returns>A <see cref="T:System.String" /> that contains the value of the namespace node; <see cref="F:System.String.Empty" /> if a matching namespace node is not found, or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element node.</returns>
      <param name="name">The local name of the namespace node.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>Returns the in-scope namespaces of the current node.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IDictionary`2" /> collection of namespace names keyed by prefix.</returns>
      <param name="scope">An <see cref="T:System.Xml.XmlNamespaceScope" /> value specifying the namespaces to return.</param>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.HasAttributes">
      <summary>Gets a value indicating whether the current node has any attributes.</summary>
      <returns>Returns true if the current node has attributes; returns false if the current node has no attributes, or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element node.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.HasChildren">
      <summary>Gets a value indicating whether the current node has any child nodes.</summary>
      <returns>Returns true if the current node has any child nodes; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.InnerXml">
      <summary>Gets or sets the markup representing the child nodes of the current node.</summary>
      <returns>A <see cref="T:System.String" /> that contains the markup of the child nodes of the current node.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XPath.XPathNavigator.InnerXml" /> property cannot be set.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter">
      <summary>Returns an <see cref="T:System.Xml.XmlWriter" /> object used to create a new sibling node after the currently selected node.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object used to create a new sibling node after the currently selected node.</returns>
      <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted after the current node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.String)">
      <summary>Creates a new sibling node after the currently selected node using the XML string specified.</summary>
      <param name="newSibling">The XML data string for the new sibling node.</param>
      <exception cref="T:System.ArgumentNullException">The XML string parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted after the current node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
      <exception cref="T:System.Xml.XmlException">The XML string parameter is not well-formed.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XmlReader)">
      <summary>Creates a new sibling node after the currently selected node using the XML contents of the <see cref="T:System.Xml.XmlReader" /> object specified.</summary>
      <param name="newSibling">An <see cref="T:System.Xml.XmlReader" /> object positioned on the XML data for the new sibling node.</param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.XmlReader" /> object is in an error state or closed.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlReader" /> object parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted after the current node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
      <exception cref="T:System.Xml.XmlException">The XML contents of the <see cref="T:System.Xml.XmlReader" /> object parameter is not well-formed.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XPath.XPathNavigator)">
      <summary>Creates a new sibling node after the currently selected node using the nodes in the <see cref="T:System.Xml.XPath.XPathNavigator" /> object specified.</summary>
      <param name="newSibling">An <see cref="T:System.Xml.XPath.XPathNavigator" /> object positioned on the node to add as the new sibling node.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> object parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted after the current node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore">
      <summary>Returns an <see cref="T:System.Xml.XmlWriter" /> object used to create a new sibling node before the currently selected node.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object used to create a new sibling node before the currently selected node.</returns>
      <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted before the current node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.String)">
      <summary>Creates a new sibling node before the currently selected node using the XML string specified.</summary>
      <param name="newSibling">The XML data string for the new sibling node.</param>
      <exception cref="T:System.ArgumentNullException">The XML string parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted before the current node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
      <exception cref="T:System.Xml.XmlException">The XML string parameter is not well-formed.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XmlReader)">
      <summary>Creates a new sibling node before the currently selected node using the XML contents of the <see cref="T:System.Xml.XmlReader" /> object specified.</summary>
      <param name="newSibling">An <see cref="T:System.Xml.XmlReader" /> object positioned on the XML data for the new sibling node.</param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.XmlReader" /> object is in an error state or closed.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlReader" /> object parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted before the current node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
      <exception cref="T:System.Xml.XmlException">The XML contents of the <see cref="T:System.Xml.XmlReader" /> object parameter is not well-formed.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XPath.XPathNavigator)">
      <summary>Creates a new sibling node before the currently selected node using the nodes in the <see cref="T:System.Xml.XPath.XPathNavigator" /> specified.</summary>
      <param name="newSibling">An <see cref="T:System.Xml.XPath.XPathNavigator" /> object positioned on the node to add as the new sibling node.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> object parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted before the current node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertElementAfter(System.String,System.String,System.String,System.String)">
      <summary>Creates a new sibling element after the current node using the namespace prefix, local name and namespace URI specified, with the value specified.</summary>
      <param name="prefix">The namespace prefix of the new child element (if any).</param>
      <param name="localName">The local name of the new child element (if any).</param>
      <param name="namespaceURI">The namespace URI of the new child element (if any). <see cref="F:System.String.Empty" /> and null are equivalent.</param>
      <param name="value">The value of the new child element. If <see cref="F:System.String.Empty" /> or null are passed, an empty element is created.</param>
      <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted after the current node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertElementBefore(System.String,System.String,System.String,System.String)">
      <summary>Creates a new sibling element before the current node using the namespace prefix, local name, and namespace URI specified, with the value specified.</summary>
      <param name="prefix">The namespace prefix of the new child element (if any).</param>
      <param name="localName">The local name of the new child element (if any).</param>
      <param name="namespaceURI">The namespace URI of the new child element (if any). <see cref="F:System.String.Empty" /> and null are equivalent.</param>
      <param name="value">The value of the new child element. If <see cref="F:System.String.Empty" /> or null are passed, an empty element is created.</param>
      <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted before the current node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.IsDescendant(System.Xml.XPath.XPathNavigator)">
      <summary>Determines whether the specified <see cref="T:System.Xml.XPath.XPathNavigator" /> is a descendant of the current <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
      <returns>Returns true if the specified <see cref="T:System.Xml.XPath.XPathNavigator" /> is a descendant of the current <see cref="T:System.Xml.XPath.XPathNavigator" />; otherwise, false.</returns>
      <param name="nav">The <see cref="T:System.Xml.XPath.XPathNavigator" /> to compare to this <see cref="T:System.Xml.XPath.XPathNavigator" />.</param>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.IsEmptyElement">
      <summary>When overridden in a derived class, gets a value indicating whether the current node is an empty element without an end element tag.</summary>
      <returns>Returns true if the current node is an empty element; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.IsNode">
      <summary>Gets a value indicating if the current node represents an XPath node.</summary>
      <returns>Always returns true.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
      <summary>When overridden in a derived class, determines whether the current <see cref="T:System.Xml.XPath.XPathNavigator" /> is at the same position as the specified <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
      <returns>Returns true if the two <see cref="T:System.Xml.XPath.XPathNavigator" /> objects have the same position; otherwise, false.</returns>
      <param name="other">The <see cref="T:System.Xml.XPath.XPathNavigator" /> to compare to this <see cref="T:System.Xml.XPath.XPathNavigator" />.</param>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.LocalName">
      <summary>When overridden in a derived class, gets the <see cref="P:System.Xml.XPath.XPathNavigator.Name" /> of the current node without any namespace prefix.</summary>
      <returns>A <see cref="T:System.String" /> that contains the local name of the current node, or <see cref="F:System.String.Empty" /> if the current node does not have a name (for example, text or comment nodes).</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.LookupNamespace(System.String)">
      <summary>Gets the namespace URI for the specified prefix.</summary>
      <returns>A <see cref="T:System.String" /> that contains the namespace URI assigned to the namespace prefix specified; null if no namespace URI is assigned to the prefix specified. The <see cref="T:System.String" /> returned is atomized.</returns>
      <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass <see cref="F:System.String.Empty" />.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.LookupPrefix(System.String)">
      <summary>Gets the prefix declared for the specified namespace URI.</summary>
      <returns>A <see cref="T:System.String" /> that contains the namespace prefix assigned to the namespace URI specified; otherwise, <see cref="F:System.String.Empty" /> if no prefix is assigned to the namespace URI specified. The <see cref="T:System.String" /> returned is atomized.</returns>
      <param name="namespaceURI">The namespace URI to resolve for the prefix.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Matches(System.String)">
      <summary>Determines whether the current node matches the specified XPath expression.</summary>
      <returns>Returns true if the current node matches the specified XPath expression; otherwise, false.</returns>
      <param name="xpath">The XPath expression.</param>
      <exception cref="T:System.ArgumentException">The XPath expression cannot be evaluated.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Matches(System.Xml.XPath.XPathExpression)">
      <summary>Determines whether the current node matches the specified <see cref="T:System.Xml.XPath.XPathExpression" />.</summary>
      <returns>Returns true if the current node matches the <see cref="T:System.Xml.XPath.XPathExpression" />; otherwise, false.</returns>
      <param name="expr">An <see cref="T:System.Xml.XPath.XPathExpression" /> object containing the compiled XPath expression.</param>
      <exception cref="T:System.ArgumentException">The XPath expression cannot be evaluated.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
      <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the same position as the specified <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the same position as the specified <see cref="T:System.Xml.XPath.XPathNavigator" />; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
      <param name="other">The <see cref="T:System.Xml.XPath.XPathNavigator" /> positioned on the node that you want to move to. </param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToAttribute(System.String,System.String)">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the attribute with the matching local name and namespace URI.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the attribute; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceURI">The namespace URI of the attribute; null for an empty namespace.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToChild(System.String,System.String)">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the child node with the local name and namespace URI specified.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the child node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
      <param name="localName">The local name of the child node to move to.</param>
      <param name="namespaceURI">The namespace URI of the child node to move to.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToChild(System.Xml.XPath.XPathNodeType)">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the child node of the <see cref="T:System.Xml.XPath.XPathNodeType" /> specified.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the child node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
      <param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType" /> of the child node to move to.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirst">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the first sibling node of the current node.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the first sibling node of the current node; false if there is no first sibling, or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is currently positioned on an attribute node. If the <see cref="T:System.Xml.XPath.XPathNavigator" /> is already positioned on the first sibling, <see cref="T:System.Xml.XPath.XPathNavigator" /> will return true and will not move its position.If <see cref="T:System.Xml.XPath.XPathNavigator.MoveToFirst" /> returns false because there is no first sibling, or if <see cref="T:System.Xml.XPath.XPathNavigator" /> is currently positioned on an attribute, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstAttribute">
      <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the first attribute of the current node.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the first attribute of the current node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstChild">
      <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the first child node of the current node.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the first child node of the current node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to first namespace node of the current node.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the first namespace node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
      <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the first namespace node that matches the <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> specified.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the first namespace node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
      <param name="namespaceScope">An <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> value describing the namespace scope. </param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String)">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the element with the local name and namespace URI specified in document order.</summary>
      <returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> moved successfully; otherwise false.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String,System.Xml.XPath.XPathNavigator)">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the element with the local name and namespace URI specified, to the boundary specified, in document order.</summary>
      <returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> moved successfully; otherwise false.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <param name="end">The <see cref="T:System.Xml.XPath.XPathNavigator" /> object positioned on the element boundary which the current <see cref="T:System.Xml.XPath.XPathNavigator" /> will not move past while searching for the following element.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType)">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the following element of the <see cref="T:System.Xml.XPath.XPathNodeType" /> specified in document order.</summary>
      <returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> moved successfully; otherwise false.</returns>
      <param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType" /> of the element. The <see cref="T:System.Xml.XPath.XPathNodeType" /> cannot be <see cref="F:System.Xml.XPath.XPathNodeType.Attribute" /> or <see cref="F:System.Xml.XPath.XPathNodeType.Namespace" />.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType,System.Xml.XPath.XPathNavigator)">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the following element of the <see cref="T:System.Xml.XPath.XPathNodeType" /> specified, to the boundary specified, in document order.</summary>
      <returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> moved successfully; otherwise false.</returns>
      <param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType" /> of the element. The <see cref="T:System.Xml.XPath.XPathNodeType" /> cannot be <see cref="F:System.Xml.XPath.XPathNodeType.Attribute" /> or <see cref="F:System.Xml.XPath.XPathNodeType.Namespace" />.</param>
      <param name="end">The <see cref="T:System.Xml.XPath.XPathNavigator" /> object positioned on the element boundary which the current <see cref="T:System.Xml.XPath.XPathNavigator" /> will not move past while searching for the following element.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToId(System.String)">
      <summary>When overridden in a derived class, moves to the node that has an attribute of type ID whose value matches the specified <see cref="T:System.String" />.</summary>
      <returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving; otherwise, false. If false, the position of the navigator is unchanged.</returns>
      <param name="id">A <see cref="T:System.String" /> representing the ID value of the node to which you want to move.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNamespace(System.String)">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the namespace node with the specified namespace prefix.</summary>
      <returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the specified namespace; false if a matching namespace node was not found, or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element node. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
      <param name="name">The namespace prefix of the namespace node.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext">
      <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the next sibling node of the current node.</summary>
      <returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the next sibling node; otherwise, false if there are no more siblings or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is currently positioned on an attribute node. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext(System.String,System.String)">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the next sibling node with the local name and namespace URI specified.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the next sibling node; false if there are no more siblings, or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is currently positioned on an attribute node. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
      <param name="localName">The local name of the next sibling node to move to.</param>
      <param name="namespaceURI">The namespace URI of the next sibling node to move to.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext(System.Xml.XPath.XPathNodeType)">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the next sibling node of the current node that matches the <see cref="T:System.Xml.XPath.XPathNodeType" /> specified.</summary>
      <returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the next sibling node; otherwise, false if there are no more siblings or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is currently positioned on an attribute node. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
      <param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType" /> of the sibling node to move to.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextAttribute">
      <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the next attribute.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the next attribute; false if there are no more attributes. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the next namespace node.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the next namespace node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
      <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the next namespace node matching the <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> specified.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the next namespace node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
      <param name="namespaceScope">An <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> value describing the namespace scope. </param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToParent">
      <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the parent node of the current node.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the parent node of the current node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToPrevious">
      <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the previous sibling node of the current node.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the previous sibling node; otherwise, false if there is no previous sibling node or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is currently positioned on an attribute node. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToRoot">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the root node that the current node belongs to.</summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.Name">
      <summary>When overridden in a derived class, gets the qualified name of the current node.</summary>
      <returns>A <see cref="T:System.String" /> that contains the qualified <see cref="P:System.Xml.XPath.XPathNavigator.Name" /> of the current node, or <see cref="F:System.String.Empty" /> if the current node does not have a name (for example, text or comment nodes).</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NamespaceURI">
      <summary>When overridden in a derived class, gets the namespace URI of the current node.</summary>
      <returns>A <see cref="T:System.String" /> that contains the namespace URI of the current node, or <see cref="F:System.String.Empty" /> if the current node has no namespace URI.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NameTable">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Xml.XmlNameTable" /> of the <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlNameTable" /> object enabling you to get the atomized version of a <see cref="T:System.String" /> within the XML document.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NavigatorComparer">
      <summary>Gets an <see cref="T:System.Collections.IEqualityComparer" /> used for equality comparison of <see cref="T:System.Xml.XPath.XPathNavigator" /> objects.</summary>
      <returns>An <see cref="T:System.Collections.IEqualityComparer" /> used for equality comparison of <see cref="T:System.Xml.XPath.XPathNavigator" /> objects.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NodeType">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Xml.XPath.XPathNodeType" /> of the current node.</summary>
      <returns>One of the <see cref="T:System.Xml.XPath.XPathNodeType" /> values representing the current node.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.OuterXml">
      <summary>Gets or sets the markup representing the opening and closing tags of the current node and its child nodes.</summary>
      <returns>A <see cref="T:System.String" /> that contains the markup representing the opening and closing tags of the current node and its child nodes.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.Prefix">
      <summary>When overridden in a derived class, gets the namespace prefix associated with the current node.</summary>
      <returns>A <see cref="T:System.String" /> that contains the namespace prefix associated with the current node.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild">
      <summary>Returns an <see cref="T:System.Xml.XmlWriter" /> object used to create a new child node at the beginning of the list of child nodes of the current node.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object used to create a new child node at the beginning of the list of child nodes of the current node.</returns>
      <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on does not allow a new child node to be prepended.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.String)">
      <summary>Creates a new child node at the beginning of the list of child nodes of the current node using the XML string specified.</summary>
      <param name="newChild">The XML data string for the new child node.</param>
      <exception cref="T:System.ArgumentNullException">The XML string parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on does not allow a new child node to be prepended.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
      <exception cref="T:System.Xml.XmlException">The XML string parameter is not well-formed.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XmlReader)">
      <summary>Creates a new child node at the beginning of the list of child nodes of the current node using the XML contents of the <see cref="T:System.Xml.XmlReader" /> object specified.</summary>
      <param name="newChild">An <see cref="T:System.Xml.XmlReader" /> object positioned on the XML data for the new child node.</param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.XmlReader" /> object is in an error state or closed.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlReader" /> object parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on does not allow a new child node to be prepended.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
      <exception cref="T:System.Xml.XmlException">The XML contents of the <see cref="T:System.Xml.XmlReader" /> object parameter is not well-formed.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XPath.XPathNavigator)">
      <summary>Creates a new child node at the beginning of the list of child nodes of the current node using the nodes in the <see cref="T:System.Xml.XPath.XPathNavigator" /> object specified.</summary>
      <param name="newChild">An <see cref="T:System.Xml.XPath.XPathNavigator" /> object positioned on the node to add as the new child node.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> object parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on does not allow a new child node to be prepended.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChildElement(System.String,System.String,System.String,System.String)">
      <summary>Creates a new child element at the beginning of the list of child nodes of the current node using the namespace prefix, local name, and namespace URI specified with the value specified.</summary>
      <param name="prefix">The namespace prefix of the new child element (if any).</param>
      <param name="localName">The local name of the new child element (if any).</param>
      <param name="namespaceURI">The namespace URI of the new child element (if any). <see cref="F:System.String.Empty" /> and null are equivalent.</param>
      <param name="value">The value of the new child element. If <see cref="F:System.String.Empty" /> or null are passed, an empty element is created.</param>
      <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on does not allow a new child node to be prepended.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReadSubtree">
      <summary>Returns an <see cref="T:System.Xml.XmlReader" /> object that contains the current node and its child nodes.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object that contains the current node and its child nodes.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element node or the root node.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceRange(System.Xml.XPath.XPathNavigator)">
      <summary>Replaces a range of sibling nodes from the current node to the node specified.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object used to specify the replacement range.</returns>
      <param name="lastSiblingToReplace">An <see cref="T:System.Xml.XPath.XPathNavigator" /> positioned on the last sibling node in the range to replace.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> specified is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
      <exception cref="T:System.InvalidOperationException">The last node to replace specified is not a valid sibling node of the current node.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.String)">
      <summary>Replaces the current node with the content of the string specified.</summary>
      <param name="newNode">The XML data string for the new node.</param>
      <exception cref="T:System.ArgumentNullException">The XML string parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element, text, processing instruction, or comment node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
      <exception cref="T:System.Xml.XmlException">The XML string parameter is not well-formed.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XmlReader)">
      <summary>Replaces the current node with the contents of the <see cref="T:System.Xml.XmlReader" /> object specified.</summary>
      <param name="newNode">An <see cref="T:System.Xml.XmlReader" /> object positioned on the XML data for the new node.</param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.XmlReader" /> object is in an error state or closed.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlReader" /> object parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element, text, processing instruction, or comment node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
      <exception cref="T:System.Xml.XmlException">The XML contents of the <see cref="T:System.Xml.XmlReader" /> object parameter is not well-formed.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XPath.XPathNavigator)">
      <summary>Replaces the current node with the contents of the <see cref="T:System.Xml.XPath.XPathNavigator" /> object specified.</summary>
      <param name="newNode">An <see cref="T:System.Xml.XPath.XPathNavigator" /> object positioned on the new node.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> object parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element, text, processing instruction, or comment node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
      <exception cref="T:System.Xml.XmlException">The XML contents of the <see cref="T:System.Xml.XPath.XPathNavigator" /> object parameter is not well-formed.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.SchemaInfo">
      <summary>Gets the schema information that has been assigned to the current node as a result of schema validation.</summary>
      <returns>An <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> object that contains the schema information for the current node.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.String)">
      <summary>Selects a node set, using the specified XPath expression.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> pointing to the selected node set.</returns>
      <param name="xpath">A <see cref="T:System.String" /> representing an XPath expression.</param>
      <exception cref="T:System.ArgumentException">The XPath expression contains an error or its return type is not a node set.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>Selects a node set using the specified XPath expression with the <see cref="T:System.Xml.IXmlNamespaceResolver" /> object specified to resolve namespace prefixes.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that points to the selected node set.</returns>
      <param name="xpath">A <see cref="T:System.String" /> representing an XPath expression.</param>
      <param name="resolver">The <see cref="T:System.Xml.IXmlNamespaceResolver" /> object used to resolve namespace prefixes.</param>
      <exception cref="T:System.ArgumentException">The XPath expression contains an error or its return type is not a node set.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.Xml.XPath.XPathExpression)">
      <summary>Selects a node set using the specified <see cref="T:System.Xml.XPath.XPathExpression" />.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that points to the selected node set.</returns>
      <param name="expr">An <see cref="T:System.Xml.XPath.XPathExpression" /> object containing the compiled XPath query.</param>
      <exception cref="T:System.ArgumentException">The XPath expression contains an error or its return type is not a node set.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.String,System.String,System.Boolean)">
      <summary>Selects all the ancestor nodes of the current node that have the specified local name and namespace URI.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that contains the selected nodes. The returned nodes are in reverse document order.</returns>
      <param name="name">The local name of the ancestor nodes.</param>
      <param name="namespaceURI">The namespace URI of the ancestor nodes.</param>
      <param name="matchSelf">To include the context node in the selection, true; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">null cannot be passed as a parameter.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.Xml.XPath.XPathNodeType,System.Boolean)">
      <summary>Selects all the ancestor nodes of the current node that have a matching <see cref="T:System.Xml.XPath.XPathNodeType" />.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that contains the selected nodes. The returned nodes are in reverse document order.</returns>
      <param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType" /> of the ancestor nodes.</param>
      <param name="matchSelf">To include the context node in the selection, true; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectChildren(System.String,System.String)">
      <summary>Selects all the child nodes of the current node that have the local name and namespace URI specified.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that contains the selected nodes.</returns>
      <param name="name">The local name of the child nodes. </param>
      <param name="namespaceURI">The namespace URI of the child nodes. </param>
      <exception cref="T:System.ArgumentNullException">null cannot be passed as a parameter.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectChildren(System.Xml.XPath.XPathNodeType)">
      <summary>Selects all the child nodes of the current node that have the matching <see cref="T:System.Xml.XPath.XPathNodeType" />.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that contains the selected nodes.</returns>
      <param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType" /> of the child nodes.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.String,System.String,System.Boolean)">
      <summary>Selects all the descendant nodes of the current node with the local name and namespace URI specified.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that contains the selected nodes.</returns>
      <param name="name">The local name of the descendant nodes. </param>
      <param name="namespaceURI">The namespace URI of the descendant nodes. </param>
      <param name="matchSelf">true to include the context node in the selection; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">null cannot be passed as a parameter.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.Xml.XPath.XPathNodeType,System.Boolean)">
      <summary>Selects all the descendant nodes of the current node that have a matching <see cref="T:System.Xml.XPath.XPathNodeType" />.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that contains the selected nodes.</returns>
      <param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType" /> of the descendant nodes.</param>
      <param name="matchSelf">true to include the context node in the selection; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String)">
      <summary>Selects a single node in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified XPath query.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNavigator" /> object that contains the first matching node for the XPath query specified; otherwise, null if there are no query results.</returns>
      <param name="xpath">A <see cref="T:System.String" /> representing an XPath expression.</param>
      <exception cref="T:System.ArgumentException">An error was encountered in the XPath query or the return type of the XPath expression is not a node.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath query is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>Selects a single node in the <see cref="T:System.Xml.XPath.XPathNavigator" /> object using the specified XPath query with the <see cref="T:System.Xml.IXmlNamespaceResolver" /> object specified to resolve namespace prefixes.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNavigator" /> object that contains the first matching node for the XPath query specified; otherwise null if there are no query results.</returns>
      <param name="xpath">A <see cref="T:System.String" /> representing an XPath expression.</param>
      <param name="resolver">The <see cref="T:System.Xml.IXmlNamespaceResolver" /> object used to resolve namespace prefixes in the XPath query.</param>
      <exception cref="T:System.ArgumentException">An error was encountered in the XPath query or the return type of the XPath expression is not a node.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath query is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.Xml.XPath.XPathExpression)">
      <summary>Selects a single node in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified <see cref="T:System.Xml.XPath.XPathExpression" /> object.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNavigator" /> object that contains the first matching node for the XPath query specified; otherwise null if there are no query results.</returns>
      <param name="expression">An <see cref="T:System.Xml.XPath.XPathExpression" /> object containing the compiled XPath query.</param>
      <exception cref="T:System.ArgumentException">An error was encountered in the XPath query or the return type of the XPath expression is not a node.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath query is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SetTypedValue(System.Object)">
      <summary>Sets the typed value of the current node.</summary>
      <param name="typedValue">The new typed value of the node.</param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support the type of the object specified.</exception>
      <exception cref="T:System.ArgumentNullException">The value specified cannot be null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element or attribute node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SetValue(System.String)">
      <summary>Sets the value of the current node.</summary>
      <param name="value">The new value of the node.</param>
      <exception cref="T:System.ArgumentNullException">The value parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on the root node, a namespace node, or the specified value is invalid.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.System#ICloneable#Clone">
      <summary>For a description of this member, see <see cref="M:System.Xml.XPath.XPathNavigator.Clone" />.</summary>
      <returns>An <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ToString">
      <summary>Gets the text value of the current node.</summary>
      <returns>A string that contains the text value of the current node.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.TypedValue">
      <summary>Gets the current node as a boxed object of the most appropriate .NET Framework type.</summary>
      <returns>The current node as a boxed object of the most appropriate .NET Framework type.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.UnderlyingObject">
      <summary>Used by <see cref="T:System.Xml.XPath.XPathNavigator" /> implementations which provide a "virtualized" XML view over a store, to provide access to underlying objects.</summary>
      <returns>The default is null.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>Gets the current node's value as the <see cref="T:System.Type" /> specified, using the <see cref="T:System.Xml.IXmlNamespaceResolver" /> object specified to resolve namespace prefixes.</summary>
      <returns>The value of the current node as the <see cref="T:System.Type" /> requested.</returns>
      <param name="returnType">The <see cref="T:System.Type" /> to return the current node's value as.</param>
      <param name="nsResolver">The <see cref="T:System.Xml.IXmlNamespaceResolver" /> object used to resolve namespace prefixes.</param>
      <exception cref="T:System.FormatException">The current node's value is not in the correct format for the target type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsBoolean">
      <summary>Gets the current node's value as a <see cref="T:System.Boolean" />.</summary>
      <returns>The current node's value as a <see cref="T:System.Boolean" />.</returns>
      <exception cref="T:System.FormatException">The current node's string value cannot be converted to a <see cref="T:System.Boolean" />.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Boolean" /> is not valid.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsDateTime">
      <summary>Gets the current node's value as a <see cref="T:System.DateTime" />.</summary>
      <returns>The current node's value as a <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.FormatException">The current node's string value cannot be converted to a <see cref="T:System.DateTime" />.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.DateTime" /> is not valid.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsDouble">
      <summary>Gets the current node's value as a <see cref="T:System.Double" />.</summary>
      <returns>The current node's value as a <see cref="T:System.Double" />.</returns>
      <exception cref="T:System.FormatException">The current node's string value cannot be converted to a <see cref="T:System.Double" />.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Double" /> is not valid.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsInt">
      <summary>Gets the current node's value as an <see cref="T:System.Int32" />.</summary>
      <returns>The current node's value as an <see cref="T:System.Int32" />.</returns>
      <exception cref="T:System.FormatException">The current node's string value cannot be converted to a <see cref="T:System.Int32" />.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Int32" /> is not valid.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsLong">
      <summary>Gets the current node's value as an <see cref="T:System.Int64" />.</summary>
      <returns>The current node's value as an <see cref="T:System.Int64" />.</returns>
      <exception cref="T:System.FormatException">The current node's string value cannot be converted to a <see cref="T:System.Int64" />.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Int64" /> is not valid.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueType">
      <summary>Gets the .NET Framework <see cref="T:System.Type" /> of the current node.</summary>
      <returns>The .NET Framework <see cref="T:System.Type" /> of the current node. The default value is <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.WriteSubtree(System.Xml.XmlWriter)">
      <summary>Streams the current node and its child nodes to the <see cref="T:System.Xml.XmlWriter" /> object specified.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> object to stream to.</param>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.XmlLang">
      <summary>Gets the xml:lang scope for the current node.</summary>
      <returns>A <see cref="T:System.String" /> that contains the value of the xml:lang scope, or <see cref="F:System.String.Empty" /> if the current node has no xml:lang scope value to return.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.XmlType">
      <summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaType" /> information for the current node.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaType" /> object; default is null.</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNodeIterator">
      <summary>Provides an iterator over a selected set of nodes.</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathNodeIterator" /> class.</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.Clone">
      <summary>When overridden in a derived class, returns a clone of this <see cref="T:System.Xml.XPath.XPathNodeIterator" /> object.</summary>
      <returns>A new <see cref="T:System.Xml.XPath.XPathNodeIterator" /> object clone of this <see cref="T:System.Xml.XPath.XPathNodeIterator" /> object.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.Count">
      <summary>Gets the index of the last node in the selected set of nodes.</summary>
      <returns>The int index of the last node in the selected set of nodes, or 0 if there are no selected nodes.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.Current">
      <summary>When overridden in a derived class, returns the <see cref="T:System.Xml.XPath.XPathNavigator" /> object for this <see cref="T:System.Xml.XPath.XPathNodeIterator" />, positioned on the current context node.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNavigator" /> object positioned on the context node from which the node set was selected. The <see cref="M:System.Xml.XPath.XPathNodeIterator.MoveNext" /> method must be called to move the <see cref="T:System.Xml.XPath.XPathNodeIterator" /> to the first node in the selected set.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.CurrentPosition">
      <summary>When overridden in a derived class, gets the index of the current position in the selected set of nodes.</summary>
      <returns>The int index of the current position.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> object to iterate through the selected node set.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object to iterate through the selected node set.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.MoveNext">
      <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> object returned by the <see cref="P:System.Xml.XPath.XPathNodeIterator.Current" /> property to the next node in the selected node set.</summary>
      <returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> object moved to the next node; false if there are no more selected nodes.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.System#ICloneable#Clone">
      <summary>For a description of this member, see <see cref="M:System.Xml.XPath.XPathNodeIterator.Clone" />.</summary>
      <returns>An <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNodeType">
      <summary>Defines the XPath node types that can be returned from the <see cref="T:System.Xml.XPath.XPathNavigator" /> class.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Root">
      <summary>The root node of the XML document or node tree.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Element">
      <summary>An element, such as &lt;element&gt;.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Attribute">
      <summary>An attribute, such as id='123'.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Namespace">
      <summary>A namespace, such as xmlns="namespace".</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Text">
      <summary>The text content of a node. Equivalent to the Document Object Model (DOM) Text and CDATA node types. Contains at least one character.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.SignificantWhitespace">
      <summary>A node with white space characters and xml:space set to preserve.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Whitespace">
      <summary>A node with only white space characters and no significant white space. White space characters are #x20, #x9, #xD, or #xA.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.ProcessingInstruction">
      <summary>A processing instruction, such as &lt;?pi test?&gt;. This does not include XML declarations, which are not visible to the <see cref="T:System.Xml.XPath.XPathNavigator" /> class. </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Comment">
      <summary>A comment, such as &lt;!-- my comment --&gt;</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.All">
      <summary>Any of the <see cref="T:System.Xml.XPath.XPathNodeType" /> node types.</summary>
    </member>
    <member name="T:System.Xml.XPath.XPathResultType">
      <summary>Specifies the return type of the XPath expression.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Number">
      <summary>A numeric value.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.String">
      <summary>A <see cref="T:System.String" /> value.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Boolean">
      <summary>A <see cref="T:System.Boolean" />true or false value.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.NodeSet">
      <summary>A node collection.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Navigator">
      <summary>A tree fragment.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Any">
      <summary>Any of the XPath node types.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Error">
      <summary>The expression does not evaluate to the correct XPath type.</summary>
    </member>
    <member name="T:System.Xml.Xsl.IXsltContextFunction">
      <summary>Provides an interface to a given function defined in the Extensible Stylesheet Language for Transformations (XSLT) style sheet during runtime execution.</summary>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.ArgTypes">
      <summary>Gets the supplied XML Path Language (XPath) types for the function's argument list. This information can be used to discover the signature of the function which allows you to differentiate between overloaded functions.</summary>
      <returns>An array of <see cref="T:System.Xml.XPath.XPathResultType" /> representing the types for the function's argument list.</returns>
    </member>
    <member name="M:System.Xml.Xsl.IXsltContextFunction.Invoke(System.Xml.Xsl.XsltContext,System.Object[],System.Xml.XPath.XPathNavigator)">
      <summary>Provides the method to invoke the function with the given arguments in the given context.</summary>
      <returns>An <see cref="T:System.Object" /> representing the return value of the function.</returns>
      <param name="xsltContext">The XSLT context for the function call. </param>
      <param name="args">The arguments of the function call. Each argument is an element in the array. </param>
      <param name="docContext">The context node for the function call. </param>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.Maxargs">
      <summary>Gets the maximum number of arguments for the function. This enables the user to differentiate between overloaded functions.</summary>
      <returns>The maximum number of arguments for the function.</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.Minargs">
      <summary>Gets the minimum number of arguments for the function. This enables the user to differentiate between overloaded functions.</summary>
      <returns>The minimum number of arguments for the function.</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.ReturnType">
      <summary>Gets the <see cref="T:System.Xml.XPath.XPathResultType" /> representing the XPath type returned by the function.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathResultType" /> representing the XPath type returned by the function </returns>
    </member>
    <member name="T:System.Xml.Xsl.IXsltContextVariable">
      <summary>Provides an interface to a given variable that is defined in the style sheet during runtime execution.</summary>
    </member>
    <member name="M:System.Xml.Xsl.IXsltContextVariable.Evaluate(System.Xml.Xsl.XsltContext)">
      <summary>Evaluates the variable at runtime and returns an object that represents the value of the variable.</summary>
      <returns>An <see cref="T:System.Object" /> representing the value of the variable. Possible return types include number, string, Boolean, document fragment, or node set.</returns>
      <param name="xsltContext">An <see cref="T:System.Xml.Xsl.XsltContext" /> representing the execution context of the variable. </param>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.IsLocal">
      <summary>Gets a value indicating whether the variable is local.</summary>
      <returns>true if the variable is a local variable in the current context; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.IsParam">
      <summary>Gets a value indicating whether the variable is an Extensible Stylesheet Language Transformations (XSLT) parameter. This can be a parameter to a style sheet or a template.</summary>
      <returns>true if the variable is an XSLT parameter; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.VariableType">
      <summary>Gets the <see cref="T:System.Xml.XPath.XPathResultType" /> representing the XML Path Language (XPath) type of the variable.</summary>
      <returns>The <see cref="T:System.Xml.XPath.XPathResultType" /> representing the XPath type of the variable.</returns>
    </member>
    <member name="T:System.Xml.Xsl.XslCompiledTransform">
      <summary>Transforms XML data using an XSLT style sheet.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> class. </summary>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> class with the specified debug setting. </summary>
      <param name="enableDebug">true to generate debug information; otherwise false. Setting this to true enables you to debug the style sheet with the Microsoft Visual Studio Debugger.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)">
      <summary>Compiles an XSLT style sheet to a specified type.</summary>
      <returns>A <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> object containing compiler errors and warnings that indicate the results of the compilation.</returns>
      <param name="stylesheet">An <see cref="T:System.Xml.XmlReader" /> positioned at the beginning of the style sheet to be compiled.</param>
      <param name="settings">The <see cref="T:System.Xml.Xsl.XsltSettings" /> to be applied to the style sheet. If this is null, the <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> will be applied.</param>
      <param name="stylesheetResolver">The <see cref="T:System.Xml.XmlResolver" /> use to resolve style sheet modules referenced in xsl:import and xsl:include elements. If this is null, external resources will not be resolved.</param>
      <param name="debug">Setting this to true enables debugging the style sheet with a debugger.</param>
      <param name="typeBuilder">The <see cref="T:System.Reflection.Emit.TypeBuilder" /> used for the style sheet compilation. The provided TypeBuilder is used to generate the resulting type.</param>
      <param name="scriptAssemblyPath">The base path for the assemblies generated for msxsl:script elements. If only one script assembly is generated, this parameter specifies the path for that assembly. In case of multiple script assemblies, a distinctive suffix will be appended to the file name to ensure uniqueness of assembly names.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])">
      <summary>Loads a method from a style sheet compiled using the XSLTC.exe utility.</summary>
      <param name="executeMethod">A <see cref="T:System.Reflection.MethodInfo" /> object representing the compiler-generated <paramref name="execute" /> method of the compiled style sheet.</param>
      <param name="queryData">A byte array of serialized data structures in the <paramref name="staticData" /> field of the compiled style sheet as generated by the <see cref="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" /> method.</param>
      <param name="earlyBoundTypes">An array of types stored in the compiler-generated <paramref name="ebTypes" /> field of the compiled style sheet.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String)">
      <summary>Loads and compiles the style sheet located at the specified URI.</summary>
      <param name="stylesheetUri">The URI of the style sheet.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="stylesheetUri" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">The style sheet contains an error.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The style sheet cannot be found.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="stylesheetUri" /> value includes a filename or directory that cannot be found.</exception>
      <exception cref="T:System.Net.WebException">The <paramref name="stylesheetUri" /> value cannot be resolved.-or-An error occurred while processing the request.</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="stylesheetUri" /> is not a valid URI.</exception>
      <exception cref="T:System.Xml.XmlException">There was a parsing error loading the style sheet.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary>Loads and compiles the XSLT style sheet specified by the URI. The <see cref="T:System.Xml.XmlResolver" /> resolves any XSLT import or include elements and the XSLT settings determine the permissions for the style sheet.</summary>
      <param name="stylesheetUri">The URI of the style sheet.</param>
      <param name="settings">The <see cref="T:System.Xml.Xsl.XsltSettings" /> to apply to the style sheet. If this is null, the <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> setting is applied.</param>
      <param name="stylesheetResolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the style sheet URI and any style sheets referenced in XSLT import and include elements. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="stylesheetUri" /> or <paramref name="stylesheetResolver" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">The style sheet contains an error.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The style sheet cannot be found.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="stylesheetUri" /> value includes a filename or directory that cannot be found.</exception>
      <exception cref="T:System.Net.WebException">The <paramref name="stylesheetUri" /> value cannot be resolved.-or-An error occurred while processing the request.</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="stylesheetUri" /> is not a valid URI.</exception>
      <exception cref="T:System.Xml.XmlException">There was a parsing error loading the style sheet.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Type)">
      <summary>Loads the compiled style sheet that was created using the XSLT Compiler (xsltc.exe).</summary>
      <param name="compiledStylesheet">The name of the class that contains the compiled style sheet. This is usually the name of the style sheet. Unless otherwise specified, the xsltc.exe tool uses the name of the style sheet for the class and assembly names.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)">
      <summary>Compiles the style sheet contained in the <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="stylesheet">An <see cref="T:System.Xml.XmlReader" /> containing the style sheet.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="stylesheet" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">The style sheet contains an error.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary>Compiles the XSLT style sheet contained in the <see cref="T:System.Xml.XmlReader" />. The <see cref="T:System.Xml.XmlResolver" /> resolves any XSLT import or include elements and the XSLT settings determine the permissions for the style sheet.</summary>
      <param name="stylesheet">The <see cref="T:System.Xml.XmlReader" /> containing the style sheet.</param>
      <param name="settings">The <see cref="T:System.Xml.Xsl.XsltSettings" /> to apply to the style sheet. If this is null, the <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> setting is applied.</param>
      <param name="stylesheetResolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve any style sheets referenced in XSLT import and include elements. If this is null, external resources are not resolved.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="stylesheet" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">The style sheet contains an error.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)">
      <summary>Compiles the style sheet contained in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> object.</summary>
      <param name="stylesheet">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the style sheet.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="stylesheet" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">The style sheet contains an error.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary>Compiles the XSLT style sheet contained in the <see cref="T:System.Xml.XPath.IXPathNavigable" />. The <see cref="T:System.Xml.XmlResolver" /> resolves any XSLT import or include elements and the XSLT settings determine the permissions for the style sheet.</summary>
      <param name="stylesheet">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the style sheet.</param>
      <param name="settings">The <see cref="T:System.Xml.Xsl.XsltSettings" /> to apply to the style sheet. If this is null, the <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> setting is applied.</param>
      <param name="stylesheetResolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve any style sheets referenced in XSLT import and include elements. If this is null, external resources are not resolved.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="stylesheet" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">The style sheet contains an error.</exception>
    </member>
    <member name="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings">
      <summary>Gets an <see cref="T:System.Xml.XmlWriterSettings" /> object that contains the output information derived from the xsl:output element of the style sheet.</summary>
      <returns>A read-only <see cref="T:System.Xml.XmlWriterSettings" /> object that contains the output information derived from the xsl:output element of the style sheet. This value can be null.</returns>
    </member>
    <member name="P:System.Xml.Xsl.XslCompiledTransform.TemporaryFiles">
      <summary>Gets the <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> that contains the temporary files generated on disk after a successful call to the <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> method. </summary>
      <returns>The <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> that contains the temporary files generated on disk. This value is null if the <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> method has not been successfully called, or if debugging has not been enabled.</returns>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)">
      <summary>Executes the transform using the input document specified by the URI and outputs the results to a file.</summary>
      <param name="inputUri">The URI of the input document.</param>
      <param name="resultsFile">The URI of the output file.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="inputUri" /> or <paramref name="resultsFile" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The input document cannot be found.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="inputUri" /> or <paramref name="resultsFile" /> value includes a filename or directory cannot be found.</exception>
      <exception cref="T:System.Net.WebException">The <paramref name="inputUri" /> or <paramref name="resultsFile" /> value cannot be resolved.-or-An error occurred while processing the request</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> or <paramref name="resultsFile" /> is not a valid URI.</exception>
      <exception cref="T:System.Xml.XmlException">There was a parsing error loading the input document.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)">
      <summary>Executes the transform using the input document specified by the URI and outputs the results to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="inputUri">The URI of the input document.</param>
      <param name="results">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output.If the style sheet contains an xsl:output element, you should create the <see cref="T:System.Xml.XmlWriter" /> using the <see cref="T:System.Xml.XmlWriterSettings" /> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property. This ensures that the <see cref="T:System.Xml.XmlWriter" /> has the correct output settings.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="inputUri" /> or <paramref name="results" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="inputUri" /> value includes a filename or directory cannot be found.</exception>
      <exception cref="T:System.Net.WebException">The <paramref name="inputUri" /> value cannot be resolved.-or-An error occurred while processing the request.</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> is not a valid URI.</exception>
      <exception cref="T:System.Xml.XmlException">There was a parsing error loading the input document.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>Executes the transform using the input document specified by the URI and outputs the results to stream. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments.</summary>
      <param name="inputUri">The URI of the input document.</param>
      <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
      <param name="results">The stream to which you want to output.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="inputUri" /> or <paramref name="results" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="inputUri" /> value includes a filename or directory cannot be found.</exception>
      <exception cref="T:System.Net.WebException">The <paramref name="inputUri" /> value cannot be resolved.-or-An error occurred while processing the request</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> is not a valid URI.</exception>
      <exception cref="T:System.Xml.XmlException">There was a parsing error loading the input document.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>Executes the transform using the input document specified by the URI and outputs the results to a <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="inputUri">The URI of the input document.</param>
      <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
      <param name="results">The <see cref="T:System.IO.TextWriter" /> to which you want to output.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="inputUri" /> or <paramref name="results" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="inputUri" /> value includes a filename or directory cannot be found.</exception>
      <exception cref="T:System.Net.WebException">The <paramref name="inputUri" /> value cannot be resolved.-or-An error occurred while processing the request</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> is not a valid URI.</exception>
      <exception cref="T:System.Xml.XmlException">There was a parsing error loading the input document.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>Executes the transform using the input document specified by the URI and outputs the results to an <see cref="T:System.Xml.XmlWriter" />. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments.</summary>
      <param name="inputUri">The URI of the input document.</param>
      <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
      <param name="results">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output.If the style sheet contains an xsl:output element, you should create the <see cref="T:System.Xml.XmlWriter" /> using the <see cref="T:System.Xml.XmlWriterSettings" /> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property. This ensures that the <see cref="T:System.Xml.XmlWriter" /> has the correct output settings.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="inputUri" /> or <paramref name="results" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="inputtUri" /> value includes a filename or directory cannot be found.</exception>
      <exception cref="T:System.Net.WebException">The <paramref name="inputUri" /> value cannot be resolved.-or-An error occurred while processing the request.</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> is not a valid URI.</exception>
      <exception cref="T:System.Xml.XmlException">There was a parsing error loading the input document.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)">
      <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XmlReader" /> object and outputs the results to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="input">The <see cref="T:System.Xml.XmlReader" /> containing the input document.</param>
      <param name="results">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output.If the style sheet contains an xsl:output element, you should create the <see cref="T:System.Xml.XmlWriter" /> using the <see cref="T:System.Xml.XmlWriterSettings" /> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property. This ensures that the <see cref="T:System.Xml.XmlWriter" /> has the correct output settings.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XmlReader" /> object and outputs the results to a stream. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments.</summary>
      <param name="input">An <see cref="T:System.Xml.XmlReader" /> containing the input document.</param>
      <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
      <param name="results">The stream to which you want to output.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XmlReader" /> object and outputs the results to a <see cref="T:System.IO.TextWriter" />. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments.</summary>
      <param name="input">An <see cref="T:System.Xml.XmlReader" /> containing the input document.</param>
      <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
      <param name="results">The <see cref="T:System.IO.TextWriter" /> to which you want to output.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XmlReader" /> object and outputs the results to an <see cref="T:System.Xml.XmlWriter" />. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments.</summary>
      <param name="input">An <see cref="T:System.Xml.XmlReader" /> containing the input document.</param>
      <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
      <param name="results">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output.If the style sheet contains an xsl:output element, you should create the <see cref="T:System.Xml.XmlWriter" /> using the <see cref="T:System.Xml.XmlWriterSettings" /> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property. This ensures that the <see cref="T:System.Xml.XmlWriter" /> has the correct output settings.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XmlReader" /> object and outputs the results to an <see cref="T:System.Xml.XmlWriter" />. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments and the XmlResolver resolves the XSLT document() function.</summary>
      <param name="input">An <see cref="T:System.Xml.XmlReader" /> containing the input document.</param>
      <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
      <param name="results">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output.If the style sheet contains an xsl:output element, you should create the <see cref="T:System.Xml.XmlWriter" /> using the <see cref="T:System.Xml.XmlWriterSettings" /> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property. This ensures that the <see cref="T:System.Xml.XmlWriter" /> has the correct output settings.</param>
      <param name="documentResolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)">
      <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XPath.IXPathNavigable" /> object and outputs the results to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed.</param>
      <param name="results">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output.If the style sheet contains an xsl:output element, you should create the <see cref="T:System.Xml.XmlWriter" /> using the <see cref="T:System.Xml.XmlWriterSettings" /> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property. This ensures that the <see cref="T:System.Xml.XmlWriter" /> has the correct output settings.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XPath.IXPathNavigable" /> object and outputs the results to a stream. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional runtime arguments.</summary>
      <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed.</param>
      <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
      <param name="results">The stream to which you want to output.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XPath.IXPathNavigable" /> object and outputs the results to an <see cref="T:System.IO.TextWriter" />. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments.</summary>
      <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed.</param>
      <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
      <param name="results">The <see cref="T:System.IO.TextWriter" /> to which you want to output.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XPath.IXPathNavigable" /> object and outputs the results to an <see cref="T:System.Xml.XmlWriter" />. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments.</summary>
      <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed.</param>
      <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
      <param name="results">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output.If the style sheet contains an xsl:output element, you should create the <see cref="T:System.Xml.XmlWriter" /> using the <see cref="T:System.Xml.XmlWriterSettings" /> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property. This ensures that the <see cref="T:System.Xml.XmlWriter" /> has the correct output settings.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>Executes the transform by using the input document that is specified by the <see cref="T:System.Xml.XPath.IXPathNavigable" /> object and outputs the results to an <see cref="T:System.Xml.XmlWriter" />. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments and the <see cref="T:System.Xml.XmlResolver" /> resolves the XSLT document() function.</summary>
      <param name="input">The document to transform that is specified by the <see cref="T:System.Xml.XPath.IXPathNavigable" /> object.</param>
      <param name="arguments">Argument list as <see cref="T:System.Xml.Xsl.XsltArgumentList" />.</param>
      <param name="results">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output.If the style sheet contains an xsl:output element, you should create the <see cref="T:System.Xml.XmlWriter" /> by using the <see cref="T:System.Xml.XmlWriterSettings" /> object that is returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property. This ensures that the <see cref="T:System.Xml.XmlWriter" /> has the correct output settings.</param>
      <param name="documentResolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.</param>
    </member>
    <member name="T:System.Xml.Xsl.XsltArgumentList">
      <summary>Contains a variable number of arguments which are either XSLT parameters or extension objects.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.#ctor">
      <summary>Implements a new instance of the <see cref="T:System.Xml.Xsl.XsltArgumentList" />.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.AddExtensionObject(System.String,System.Object)">
      <summary>Adds a new object to the <see cref="T:System.Xml.Xsl.XsltArgumentList" /> and associates it with the namespace URI.</summary>
      <param name="namespaceUri">The namespace URI to associate with the object. To use the default namespace, specify an empty string. </param>
      <param name="extension">The object to add to the list. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="namespaceUri" /> is either null or http://www.w3.org/1999/XSL/Transform The <paramref name="namespaceUri" /> already has an extension object associated with it. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have sufficient permissions to call this method. </exception>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.AddParam(System.String,System.String,System.Object)">
      <summary>Adds a parameter to the <see cref="T:System.Xml.Xsl.XsltArgumentList" /> and associates it with the namespace qualified name.</summary>
      <param name="name">The name to associate with the parameter. </param>
      <param name="namespaceUri">The namespace URI to associate with the parameter. To use the default namespace, specify an empty string. </param>
      <param name="parameter">The parameter value or object to add to the list. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="namespaceUri" /> is either null or http://www.w3.org/1999/XSL/Transform.The <paramref name="name" /> is not a valid name according to the W3C XML specification.The <paramref name="namespaceUri" /> already has a parameter associated with it. </exception>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.Clear">
      <summary>Removes all parameters and extension objects from the <see cref="T:System.Xml.Xsl.XsltArgumentList" />.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.GetExtensionObject(System.String)">
      <summary>Gets the object associated with the given namespace.</summary>
      <returns>The namespace URI object or null if one was not found.</returns>
      <param name="namespaceUri">The namespace URI of the object. </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.GetParam(System.String,System.String)">
      <summary>Gets the parameter associated with the namespace qualified name.</summary>
      <returns>The parameter object or null if one was not found.</returns>
      <param name="name">The name of the parameter. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> does not check to ensure the name passed is a valid local name; however, the name cannot be null. </param>
      <param name="namespaceUri">The namespace URI associated with the parameter. </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.RemoveExtensionObject(System.String)">
      <summary>Removes the object with the namespace URI from the <see cref="T:System.Xml.Xsl.XsltArgumentList" />.</summary>
      <returns>The object with the namespace URI or null if one was not found.</returns>
      <param name="namespaceUri">The namespace URI associated with the object to remove. </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.RemoveParam(System.String,System.String)">
      <summary>Removes the parameter from the <see cref="T:System.Xml.Xsl.XsltArgumentList" />.</summary>
      <returns>The parameter object or null if one was not found.</returns>
      <param name="name">The name of the parameter to remove. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> does not check to ensure the name passed is a valid local name; however, the name cannot be null. </param>
      <param name="namespaceUri">The namespace URI of the parameter to remove. </param>
    </member>
    <member name="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered">
      <summary>Occurs when a message is specified in the style sheet by the xsl:message element. </summary>
    </member>
    <member name="T:System.Xml.Xsl.XsltCompileException">
      <summary>The exception that is thrown by the Load method when an error is found in the XSLT style sheet.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltCompileException" /> class.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.Exception,System.String,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the XsltCompileException class.</summary>
      <param name="inner">The <see cref="T:System.Exception" /> that threw the XsltCompileException. </param>
      <param name="sourceUri">The location path of the style sheet. </param>
      <param name="lineNumber">The line number indicating where the error occurred in the style sheet. </param>
      <param name="linePosition">The line position indicating where the error occurred in the style sheet. </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the XsltCompileException class using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> objects.</summary>
      <param name="info">The SerializationInfo object containing all the properties of an XsltCompileException. </param>
      <param name="context">The StreamingContext object containing the context information. </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltCompileException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltCompileException" /> class specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception, or null if no inner exception is specified. </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Streams all the XsltCompileException properties into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class for the given <see cref="T:System.Runtime.Serialization.StreamingContext" />.</summary>
      <param name="info">The SerializationInfo object. </param>
      <param name="context">The StreamingContext object. </param>
    </member>
    <member name="T:System.Xml.Xsl.XsltContext">
      <summary>Encapsulates the current execution context of the Extensible Stylesheet Language for Transformations (XSLT) processor allowing XML Path Language (XPath) to resolve functions, parameters, and namespaces within XPath expressions.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltContext" /> class.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.#ctor(System.Xml.NameTable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltContext" /> class with the specified <see cref="T:System.Xml.NameTable" />.</summary>
      <param name="table">The <see cref="T:System.Xml.NameTable" /> to use. </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.CompareDocument(System.String,System.String)">
      <summary>When overridden in a derived class, compares the base Uniform Resource Identifiers (URIs) of two documents based upon the order the documents were loaded by the XSLT processor (that is, the <see cref="T:System.Xml.Xsl.XslTransform" /> class).</summary>
      <returns>An integer value describing the relative order of the two base URIs: -1 if <paramref name="baseUri" /> occurs before <paramref name="nextbaseUri" />; 0 if the two base URIs are identical; and 1 if <paramref name="baseUri" /> occurs after <paramref name="nextbaseUri" />.</returns>
      <param name="baseUri">The base URI of the first document to compare. </param>
      <param name="nextbaseUri">The base URI of the second document to compare. </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
      <summary>When overridden in a derived class, evaluates whether to preserve white space nodes or strip them for the given context.</summary>
      <returns>Returns true if the white space is to be preserved or false if the white space is to be stripped.</returns>
      <param name="node">The white space node that is to be preserved or stripped in the current context. </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
      <summary>When overridden in a derived class, resolves a function reference and returns an <see cref="T:System.Xml.Xsl.IXsltContextFunction" /> representing the function. The <see cref="T:System.Xml.Xsl.IXsltContextFunction" /> is used at execution time to get the return value of the function.</summary>
      <returns>An <see cref="T:System.Xml.Xsl.IXsltContextFunction" /> representing the function.</returns>
      <param name="prefix">The prefix of the function as it appears in the XPath expression. </param>
      <param name="name">The name of the function. </param>
      <param name="ArgTypes">An array of argument types for the function being resolved. This allows you to select between methods with the same name (for example, overloaded methods). </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.ResolveVariable(System.String,System.String)">
      <summary>When overridden in a derived class, resolves a variable reference and returns an <see cref="T:System.Xml.Xsl.IXsltContextVariable" /> representing the variable.</summary>
      <returns>An <see cref="T:System.Xml.Xsl.IXsltContextVariable" /> representing the variable at runtime.</returns>
      <param name="prefix">The prefix of the variable as it appears in the XPath expression. </param>
      <param name="name">The name of the variable. </param>
    </member>
    <member name="P:System.Xml.Xsl.XsltContext.Whitespace">
      <summary>When overridden in a derived class, gets a value indicating whether to include white space nodes in the output.</summary>
      <returns>true to check white space nodes in the source document for inclusion in the output; false to not evaluate white space nodes. The default is true.</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltException">
      <summary>The exception that is thrown when an error occurs while processing an XSLT transformation.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltException" /> class.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the XsltException class using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> objects.</summary>
      <param name="info">The SerializationInfo object containing all the properties of an XsltException. </param>
      <param name="context">The StreamingContext object. </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltException" /> class with a specified error message. </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the XsltException class.</summary>
      <param name="message">The description of the error condition. </param>
      <param name="innerException">The <see cref="T:System.Exception" /> which threw the XsltException, if any. This value can be null. </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Streams all the XsltException properties into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class for the given <see cref="T:System.Runtime.Serialization.StreamingContext" />.</summary>
      <param name="info">The SerializationInfo object. </param>
      <param name="context">The StreamingContext object. </param>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.LineNumber">
      <summary>Gets the line number indicating where the error occurred in the style sheet.</summary>
      <returns>The line number indicating where the error occurred in the style sheet.</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.LinePosition">
      <summary>Gets the line position indicating where the error occurred in the style sheet.</summary>
      <returns>The line position indicating where the error occurred in the style sheet.</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.Message">
      <summary>Gets the formatted error message describing the current exception.</summary>
      <returns>The formatted error message describing the current exception.</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.SourceUri">
      <summary>Gets the location path of the style sheet.</summary>
      <returns>The location path of the style sheet.</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs">
      <summary>Provides data for the <see cref="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered" /> event.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltMessageEncounteredEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" /> class.</summary>
    </member>
    <member name="P:System.Xml.Xsl.XsltMessageEncounteredEventArgs.Message">
      <summary>Gets the contents of the xsl:message element.</summary>
      <returns>The contents of the xsl:message element.</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltMessageEncounteredEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered" /> event.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" /> containing the event data.</param>
    </member>
    <member name="T:System.Xml.Xsl.XslTransform">
      <summary>Transforms XML data using an Extensible Stylesheet Language for Transformations (XSLT) style sheet.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XslTransform" /> class.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.String)">
      <summary>Loads the XSLT style sheet specified by a URL.</summary>
      <param name="url">The URL that specifies the XSLT style sheet to load. </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The loaded resource is not a valid style sheet. </exception>
      <exception cref="T:System.Security.SecurityException">The style sheet contains embedded script, and the caller does not have UnmanagedCode permission. </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)">
      <summary>Loads the XSLT style sheet specified by a URL.</summary>
      <param name="url">The URL that specifies the XSLT style sheet to load. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> to use to load the style sheet and any style sheet(s) referenced in xsl:import and xsl:include elements.If this is null, a default <see cref="T:System.Xml.XmlUrlResolver" /> with no user credentials is used to open the style sheet. The default <see cref="T:System.Xml.XmlUrlResolver" /> is not used to resolve any external resources in the style sheet, so xsl:import and xsl:include elements are not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)" /> method completes. </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The loaded resource is not a valid style sheet. </exception>
      <exception cref="T:System.Security.SecurityException">The style sheet contains embedded script, and the caller does not have UnmanagedCode permission. </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader)">
      <summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="stylesheet">An <see cref="T:System.Xml.XmlReader" /> object that contains the XSLT style sheet. </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The current node does not conform to a valid style sheet. </exception>
      <exception cref="T:System.Security.SecurityException">The style sheet contains embedded scripts, and the caller does not have UnmanagedCode permission. </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)">
      <summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="stylesheet">An <see cref="T:System.Xml.XmlReader" /> object that contains the XSLT style sheet. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to load any style sheets referenced in xsl:import and xsl:include elements. If this is null, external resources are not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)" />  method completes. </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The current node does not conform to a valid style sheet. </exception>
      <exception cref="T:System.Security.SecurityException">The style sheet contains embedded scripts, and the caller does not have UnmanagedCode permission. </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver,System.Security.Policy.Evidence)">
      <summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XmlReader" />. This method allows you to limit the permissions of the style sheet by specifying evidence.</summary>
      <param name="stylesheet">An <see cref="T:System.Xml.XmlReader" /> object containing the style sheet to load. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to load any style sheets referenced in xsl:import and xsl:include elements. If this is null, external resources are not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> method completes. </param>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> set on the assembly generated for the script block in the XSLT style sheet.If this is null, script blocks are not processed, the XSLT document() function is not supported, and privileged extension objects are disallowed.The caller must have ControlEvidence permission in order to supply evidence for the script assembly. Semi-trusted callers can set this parameter to null. </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The current node does not conform to a valid style sheet. </exception>
      <exception cref="T:System.Security.SecurityException">The referenced style sheet requires functionality that is not allowed by the evidence provided.The caller tries to supply evidence and does not have ControlEvidence permission. </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable)">
      <summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XPath.IXPathNavigable" />.</summary>
      <param name="stylesheet">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the XSLT style sheet. </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The loaded resource is not a valid style sheet. </exception>
      <exception cref="T:System.Security.SecurityException">The style sheet contains embedded scripts, and the caller does not have UnmanagedCode permission. </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver)">
      <summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XPath.IXPathNavigable" />.</summary>
      <param name="stylesheet">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the XSLT style sheet. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to load any style sheets referenced in xsl:import and xsl:include elements. If this is null, external resources are not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> method completes. </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The loaded resource is not a valid style sheet. </exception>
      <exception cref="T:System.Security.SecurityException">The style sheet contains embedded scripts, and the caller does not have UnmanagedCode permission. </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver,System.Security.Policy.Evidence)">
      <summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XPath.IXPathNavigable" />. This method allows you to limit the permissions of the style sheet by specifying evidence.</summary>
      <param name="stylesheet">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the XSLT style sheet. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to load any style sheets referenced in xsl:import and xsl:include elements. If this is null, external resources are not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> method completes. </param>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> set on the assembly generated for the script block in the XSLT style sheet.If this is null, script blocks are not processed, the XSLT document() function is not supported, and privileged extension objects are disallowed.The caller must have ControlEvidence permission in order to supply evidence for the script assembly. Semi-trusted callers can set this parameter to null. </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The loaded resource is not a valid style sheet. </exception>
      <exception cref="T:System.Security.SecurityException">The referenced style sheet requires functionality that is not allowed by the evidence provided.The caller tries to supply evidence and does not have ControlEvidence permission. </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator)">
      <summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
      <param name="stylesheet">An <see cref="T:System.Xml.XPath.XPathNavigator" /> object that contains the XSLT style sheet. </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The current node does not conform to a valid style sheet. </exception>
      <exception cref="T:System.Security.SecurityException">The style sheet contains embedded scripts, and the caller does not have UnmanagedCode permission. </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver)">
      <summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
      <param name="stylesheet">An <see cref="T:System.Xml.XPath.XPathNavigator" /> object that contains the XSLT style sheet. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to load any style sheets referenced in xsl:import and xsl:include elements. If this is null, external resources are not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> method completes. </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The current node does not conform to a valid style sheet. </exception>
      <exception cref="T:System.Security.SecurityException">The style sheet contains embedded scripts, and the caller does not have UnmanagedCode permission. </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver,System.Security.Policy.Evidence)">
      <summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XPath.XPathNavigator" />. This method allows you to limit the permissions of the style sheet by specifying evidence.</summary>
      <param name="stylesheet">An <see cref="T:System.Xml.XPath.XPathNavigator" /> object containing the style sheet to load. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to load any style sheets referenced in xsl:import and xsl:include elements. If this is null, external resources are not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> method completes. </param>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> set on the assembly generated for the script block in the XSLT style sheet.If this is null, script blocks are not processed, the XSLT document() function is not supported, and privileged extension objects are disallowed.The caller must have ControlEvidence permission in order to supply evidence for the script assembly. Semi-trusted callers can set this parameter to null. </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The current node does not conform to a valid style sheet. </exception>
      <exception cref="T:System.Security.SecurityException">The referenced style sheet requires functionality that is not allowed by the evidence provided.The caller tries to supply evidence and does not have ControlEvidence permission. </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String)">
      <summary>Transforms the XML data in the input file and outputs the result to an output file.</summary>
      <param name="inputfile">The URL of the source document to be transformed. </param>
      <param name="outputfile">The URL of the output file. </param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String,System.Xml.XmlResolver)">
      <summary>Transforms the XML data in the input file and outputs the result to an output file.</summary>
      <param name="inputfile">The URL of the source document to be transformed. </param>
      <param name="outputfile">The URL of the output file. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> method completes. </param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> using the specified <paramref name="args" /> and outputs the result to an <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> containing the results of the transformation.</returns>
      <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> using the specified <paramref name="args" /> and outputs the result to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="output">The stream to which you want to output. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation.Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> using the specified <paramref name="args" /> and outputs the result to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="output">The stream to which you want to output. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> method completes. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation. Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> using the specified <paramref name="args" /> and outputs the result to a <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="output">The <see cref="T:System.IO.TextWriter" /> to which you want to output. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation. Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> using the specified <paramref name="args" /> and outputs the result to a <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="output">The <see cref="T:System.IO.TextWriter" /> to which you want to output. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" /> method completes. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation. Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> using the specified <paramref name="args" /> and outputs the result to an <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> containing the results of the transformation.</returns>
      <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" /> method completes. </param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> using the specified <paramref name="args" /> and outputs the result to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="output">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation. Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> using the specified <paramref name="args" /> and outputs the result to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="output">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" /> method completes. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation. Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified <paramref name="args" /> and outputs the result to an <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> containing the results of the transformation.</returns>
      <param name="input">An <see cref="T:System.Xml.XPath.XPathNavigator" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation. Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified <paramref name="args" /> and outputs the result to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="input">An <see cref="T:System.Xml.XPath.XPathNavigator" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="output">The stream to which you want to output. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation. Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified <paramref name="args" /> and outputs the result to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="input">An <see cref="T:System.Xml.XPath.XPathNavigator" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="output">The stream to which you want to output. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" /> method completes. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation. Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified <paramref name="args" /> and outputs the result to a <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="input">An <see cref="T:System.Xml.XPath.XPathNavigator" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="output">The <see cref="T:System.IO.TextWriter" /> to which you want to output. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation. Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified <paramref name="args" /> and outputs the result to a <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="input">An <see cref="T:System.Xml.XPath.XPathNavigator" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="output">The <see cref="T:System.IO.TextWriter" /> to which you want to output. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" /> method completes. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation. Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified <paramref name="args" /> and outputs the result to an <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> containing the results of the transformation.</returns>
      <param name="input">An <see cref="T:System.Xml.XPath.XPathNavigator" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" /> method completes. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation. Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified args and outputs the result to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="input">An <see cref="T:System.Xml.XPath.XPathNavigator" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="output">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation. Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified args and outputs the result to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="input">An <see cref="T:System.Xml.XPath.XPathNavigator" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="output">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" /> method completes. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation. Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="P:System.Xml.Xsl.XslTransform.XmlResolver">
      <summary>Sets the <see cref="T:System.Xml.XmlResolver" /> used to resolve external resources when the <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> method is called.</summary>
      <returns>The <see cref="T:System.Xml.XmlResolver" /> to use during transformation. If set to null, the XSLT document() function is not resolved.</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltSettings">
      <summary>Specifies the XSLT features to support during execution of the XSLT style sheet.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltSettings" /> class with default settings.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltSettings.#ctor(System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltSettings" /> class with the specified settings.</summary>
      <param name="enableDocumentFunction">true to enable support for the XSLT document() function; otherwise, false.</param>
      <param name="enableScript">true to enable support for embedded scripts blocks; otherwise, false.</param>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.Default">
      <summary>Gets an <see cref="T:System.Xml.Xsl.XsltSettings" /> object with default settings. Support for the XSLT document() function and embedded script blocks is disabled.</summary>
      <returns>An <see cref="T:System.Xml.Xsl.XsltSettings" /> object with the <see cref="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction" /> and <see cref="P:System.Xml.Xsl.XsltSettings.EnableScript" /> properties set to false.</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction">
      <summary>Gets or sets a value indicating whether to enable support for the XSLT document() function.</summary>
      <returns>true to support the XSLT document() function; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.EnableScript">
      <summary>Gets or sets a value indicating whether to enable support for embedded script blocks.</summary>
      <returns>true to support script blocks in XSLT style sheets; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.TrustedXslt">
      <summary>Gets an <see cref="T:System.Xml.Xsl.XsltSettings" /> object that enables support for the XSLT document() function and embedded script blocks.</summary>
      <returns>An <see cref="T:System.Xml.Xsl.XsltSettings" /> object with the <see cref="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction" /> and <see cref="P:System.Xml.Xsl.XsltSettings.EnableScript" /> properties set to true.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\WindowsFormsIntegration.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>WindowsFormsIntegration</name>
  </assembly>
  <members>
    <member name="T:System.Windows.Automation.Peers.WindowsFormsHostAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> types to UI Automation. </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.WindowsFormsHostAutomationPeer.#ctor(System.Windows.Forms.Integration.WindowsFormsHost)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.WindowsFormsHostAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.WindowsFormsHostAutomationPeer" />.</param>
    </member>
    <member name="T:System.Windows.Forms.Integration.ChildChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Forms.Integration.WindowsFormsHost.ChildChanged" /> and <see cref="E:System.Windows.Forms.Integration.ElementHost.ChildChanged" /> events. </summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.ChildChangedEventArgs.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Integration.ChildChangedEventArgs" /> class. </summary>
      <param name="previousChild">The value of the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Child" /> property before the new value was assigned.</param>
    </member>
    <member name="P:System.Windows.Forms.Integration.ChildChangedEventArgs.PreviousChild">
      <summary>Gets the value of the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Child" /> property before the new value was assigned.</summary>
      <returns>The value of the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Child" /> property before the new value was assigned.</returns>
    </member>
    <member name="T:System.Windows.Forms.Integration.ElementHost">
      <summary>A Windows Forms control that can be used to host a Windows Presentation Foundation (WPF) element. </summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Integration.ElementHost" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.Integration.ElementHost.AutoSize">
      <summary>Gets or sets a value indicating whether the control is automatically resized to display its entire contents.</summary>
      <returns>true if the control adjusts its size to closely fit its contents; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Windows.Forms.Integration.ElementHost.BackColorTransparent">
      <summary>Gets or sets a value indicating whether the hosted element has a transparent background. </summary>
      <returns>true if the hosted element has a transparent background; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.BindingContextChanged">
      <summary>Occurs when the value of the <see cref="T:System.Windows.Forms.BindingContext" /> property changes.</summary>
    </member>
    <member name="P:System.Windows.Forms.Integration.ElementHost.CanEnableIme">
      <summary>Gets a value that indicates whether the <see cref="P:System.Windows.Forms.Control.ImeMode" /> property can be set to an active value to enable IME support.</summary>
      <returns>true if <see cref="T:System.Windows.Forms.Integration.ElementHost" /> has a <see cref="P:System.Windows.Forms.Integration.ElementHost.Child" /> element; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Forms.Integration.ElementHost.Child">
      <summary>Gets or sets the <see cref="T:System.Windows.UIElement" /> hosted by the <see cref="T:System.Windows.Forms.Integration.ElementHost" /> control. </summary>
      <returns>The hosted Windows Presentation Foundation (WPF) element.</returns>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.ChildChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Child" /> property is set.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.Click">
      <summary>Occurs when the control is clicked.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.ClientSizeChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.Control.ClientSize" /> property changes.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.ControlAdded">
      <summary>Occurs when a new control is added to the <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.ControlRemoved">
      <summary>Occurs when a control is removed from the <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.CursorChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.Control.Cursor" /> property changes.</summary>
    </member>
    <member name="P:System.Windows.Forms.Integration.ElementHost.DefaultSize">
      <summary>Gets the default size of the control.</summary>
      <returns>The default <see cref="T:System.Drawing.Size" /> of the control.</returns>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.Dispose(System.Boolean)">
      <summary>Immediately frees any system resources used by the <see cref="T:System.Windows.Forms.Integration.ElementHost" /> control. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.DoubleClick">
      <summary>Occurs when the control is double-clicked.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.DragDrop">
      <summary>Occurs when a drag-and-drop operation is completed.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.DragEnter">
      <summary>Occurs when an object is dragged into the control's bounds.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.DragLeave">
      <summary>Occurs when an object is dragged out of the control's bounds.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.DragOver">
      <summary>Occurs when an object is dragged over the control's bounds.</summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.EnableModelessKeyboardInterop(System.Windows.Window)">
      <summary>Enables a <see cref="T:System.Windows.Window" /> to receive keyboard messages correctly when it is opened modelessly from Windows Forms.</summary>
      <param name="window">The Windows Presentation Foundation (WPF) window to be opened modelessly.</param>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.Enter">
      <summary>Occurs when the control is entered.</summary>
    </member>
    <member name="P:System.Windows.Forms.Integration.ElementHost.Focused">
      <summary>Gets a value that indicates whether the control has input focus.</summary>
      <returns>true if the control has focus; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.FontChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Forms.Control.Font" /> property value changes.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.ForeColorChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Forms.Control.ForeColor" /> property value changes.</summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.GetPreferredSize(System.Drawing.Size)">
      <summary>Overrides the base class implementation <see cref="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" /> to provide correct layout behavior for the hosted Windows Presentation Foundation (WPF) elements.</summary>
      <returns>The <see cref="T:System.Drawing.Size" /> computed by the <see cref="T:System.Windows.Forms.Integration.ElementHost" /> control, given the constraints specified by <paramref name="proposedSize" />.</returns>
      <param name="proposedSize">The custom-sized area for a WPF element. </param>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.GiveFeedback">
      <summary>Occurs during a drag operation.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.GotFocus">
      <summary>Occurs when the control receives focus.</summary>
    </member>
    <member name="P:System.Windows.Forms.Integration.ElementHost.HostContainer">
      <summary>Gets the parent container of the hosted Windows Presentation Foundation (WPF) element. </summary>
      <returns>The parent container.</returns>
    </member>
    <member name="P:System.Windows.Forms.Integration.ElementHost.ImeModeBase">
      <summary>Gets or sets the IME mode of a control.</summary>
      <returns>The IME mode of the control.</returns>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.Invalidated">
      <summary>Occurs when a control's display requires redrawing.</summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.IsInputChar(System.Char)">
      <summary>Ensures that all WM_CHAR key messages are forwarded to the hosted element.</summary>
      <returns>true in all cases.</returns>
      <param name="charCode">The character to forward.</param>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.KeyDown">
      <summary>Occurs when a key is pressed while the control has focus.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.KeyPress">
      <summary>Occurs when a key is pressed while the control has focus.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.KeyUp">
      <summary>Occurs when a key is released while the control has focus.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.Layout">
      <summary>Occurs when a control should reposition its child controls.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.Leave">
      <summary>Occurs when the input focus leaves the control.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.LostFocus">
      <summary>Occurs when the control loses focus.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.MouseCaptureChanged">
      <summary>Occurs when the control loses or gains mouse capture.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.MouseClick">
      <summary>Occurs when the control is clicked by the mouse.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.MouseDoubleClick">
      <summary>Occurs when the control is double clicked by the mouse.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.MouseDown">
      <summary>Occurs when the mouse pointer is over the control and a mouse button is pressed.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.MouseEnter">
      <summary>Occurs when the mouse pointer enters the control.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.MouseHover">
      <summary>Occurs when the mouse pointer rests on the control.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.MouseLeave">
      <summary>Occurs when the mouse pointer leaves the control.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.MouseMove">
      <summary>Occurs when the mouse pointer is moved over the control.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.MouseUp">
      <summary>Occurs when the mouse pointer is over the control and a mouse button is released.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.MouseWheel">
      <summary>Occurs when the mouse wheel moves while the control has focus.</summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.OnEnabledChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Forms.Control.EnabledChanged" /> event.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.OnGotFocus(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Forms.Integration.ElementHost.GotFocus" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.OnHandleCreated(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.OnLeave(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Forms.Control.Leave" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
      <summary>Paints the background of the control.</summary>
      <param name="pevent">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains information about the control to paint.</param>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.OnPrint(System.Windows.Forms.PaintEventArgs)">
      <summary>Renders the control using the provided <see cref="T:System.Drawing.Graphics" /> object.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.OnPropertyChanged(System.String,System.Object)">
      <summary>Notifies the <see cref="P:System.Windows.Forms.Integration.ElementHost.PropertyMap" /> that a property has changed. </summary>
      <param name="propertyName">The name of the property that has changed and requires translation.</param>
      <param name="value">The new value of the property.</param>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.OnVisibleChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.PaddingChanged">
      <summary>Occurs when the control's padding changes.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.Paint">
      <summary>Occurs when the <see cref="T:System.Windows.Forms.Integration.ElementHost" /> control is redrawn. </summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.PreviewKeyDown">
      <summary>Occurs before the <see cref="E:System.Windows.Forms.Control.KeyDown" /> event when a key is pressed while focus is on this control.</summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
      <summary>Processes a command key, ensuring that the hosted element has an opportunity to handle the command before normal Windows Forms processing.</summary>
      <returns>true if the character is a Windows Presentation Foundation (WPF) shortcut key; otherwise, false.</returns>
      <param name="msg">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</param>
      <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values representing the key to process.</param>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.ProcessMnemonic(System.Char)">
      <summary>Processes a mnemonic character, ensuring that the hosted element has an opportunity to handle the mnemonic before normal Windows Forms processing.</summary>
      <returns>true if the character is a Windows Presentation Foundation (WPF) shortcut key; otherwise, false.</returns>
      <param name="charCode">The character to process.</param>
    </member>
    <member name="P:System.Windows.Forms.Integration.ElementHost.PropertyMap">
      <summary>Gets the property map, which determines how setting properties on the <see cref="T:System.Windows.Forms.Integration.ElementHost" /> control affects the hosted Windows Presentation Foundation (WPF) element.</summary>
      <returns>A <see cref="T:System.Windows.Forms.Integration.PropertyMap" /> that maps <see cref="T:System.Windows.Forms.Integration.ElementHost" /> to properties on the hosted WPF element.</returns>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.QueryContinueDrag">
      <summary>Occurs during a drag-and-drop operation and enables the drag source to determine whether the drag-and-drop operation should be canceled.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.Resize">
      <summary>Occurs when the control is resized.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.RightToLeftChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property value changes.</summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.ScaleCore(System.Single,System.Single)">
      <summary>Scales the parent container and the hosted Windows Forms control.</summary>
      <param name="dx">The scaling factor for the x-axis.</param>
      <param name="dy">The scaling factor for the y-axis.</param>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.Select(System.Boolean,System.Boolean)">
      <summary>Activates the hosted element. </summary>
      <param name="directed">true to specify the direction of the control to select; otherwise, false. </param>
      <param name="forward">true to move forward in the tab order; false to move backward in the tab order.</param>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.SizeChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Forms.Control.Size" /> property value changes.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.TextChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Forms.Control.Text" /> property value changes.</summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.WndProc(System.Windows.Forms.Message@)">
      <summary>Processes Windows messages.</summary>
      <param name="m">A message to process.</param>
    </member>
    <member name="T:System.Windows.Forms.Integration.IntegrationExceptionEventArgs">
      <summary>Provides a base class for <see cref="T:System.EventArgs" /> classes which support optionally raising exceptions. </summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.IntegrationExceptionEventArgs.#ctor(System.Boolean,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Integration.IntegrationExceptionEventArgs" /> class. </summary>
      <param name="throwException">true to raise the <see cref="T:System.Exception" /> specified by <paramref name="exception" />; otherwise, false. </param>
      <param name="exception">The <see cref="T:System.Exception" /> to raise.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Forms.Integration.IntegrationExceptionEventArgs.Exception">
      <summary>Gets the <see cref="T:System.Exception" /> associated with this <see cref="T:System.Windows.Forms.Integration.IntegrationExceptionEventArgs" />.</summary>
      <returns>The <see cref="T:System.Exception" /> associated with this <see cref="T:System.Windows.Forms.Integration.IntegrationExceptionEventArgs" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.Integration.IntegrationExceptionEventArgs.ThrowException">
      <summary>Gets or sets a value indicating whether to raise the <see cref="T:System.Exception" /> specified by the <see cref="P:System.Windows.Forms.Integration.IntegrationExceptionEventArgs.Exception" /> property. </summary>
      <returns>true if <see cref="P:System.Windows.Forms.Integration.IntegrationExceptionEventArgs.Exception" /> will be raised; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.Windows.Forms.Integration.LayoutExceptionEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Forms.Integration.WindowsFormsHost.LayoutError" /> event. </summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.LayoutExceptionEventArgs.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Integration.LayoutExceptionEventArgs" /> class. </summary>
      <param name="exception">The <see cref="T:System.Exception" /> to raise.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> is null.</exception>
    </member>
    <member name="T:System.Windows.Forms.Integration.PropertyMap">
      <summary>Provides a way to translate property values between Windows Forms controls and Windows Presentation Foundation (WPF) elements. </summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.PropertyMap.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Integration.PropertyMap" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.PropertyMap.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Integration.PropertyMap" /> class with the given source object.</summary>
      <param name="source"></param>
    </member>
    <member name="M:System.Windows.Forms.Integration.PropertyMap.Add(System.String,System.Windows.Forms.Integration.PropertyTranslator)">
      <summary>Adds a <see cref="T:System.Windows.Forms.Integration.PropertyTranslator" /> delegate for the given property to the <see cref="T:System.Windows.Forms.Integration.PropertyMap" />. </summary>
      <param name="propertyName">The name of the property to map.</param>
      <param name="translator">The <see cref="T:System.Windows.Forms.Integration.PropertyTranslator" /> delegate which is called when <paramref name="propertyName" /> changes.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="propertyName" /> has an existing mapping.</exception>
    </member>
    <member name="M:System.Windows.Forms.Integration.PropertyMap.Apply(System.String)">
      <summary>Runs the property translator for the given property, based on the source object's current property value.</summary>
      <param name="propertyName">The name of the property to translate.</param>
      <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on <see cref="P:System.Windows.Forms.Integration.PropertyMap.SourceObject" />.</exception>
    </member>
    <member name="M:System.Windows.Forms.Integration.PropertyMap.ApplyAll">
      <summary>Runs the property translator for each mapped property, based on the source object's current property values.</summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.PropertyMap.Clear">
      <summary>Removes all property mappings. </summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.PropertyMap.Contains(System.String)">
      <summary>Gets a value indicating whether the given property is mapped. </summary>
      <returns>true if <paramref name="propertyName" /> exists in the property map; otherwise, false.</returns>
      <param name="propertyName">The name of the property to search for.</param>
    </member>
    <member name="P:System.Windows.Forms.Integration.PropertyMap.DefaultTranslators">
      <summary>Gets a collection of property mappings which are defined by default. </summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> which maps property names to corresponding <see cref="T:System.Windows.Forms.Integration.PropertyTranslator" /> delegates.</returns>
    </member>
    <member name="P:System.Windows.Forms.Integration.PropertyMap.Item(System.String)">
      <summary>Gets or sets the <see cref="T:System.Windows.Forms.Integration.PropertyTranslator" /> delegate for the given property.</summary>
      <returns>The <see cref="T:System.Windows.Forms.Integration.PropertyTranslator" /> delegate corresponding to the property specified by <paramref name="propertyName" />. </returns>
      <param name="propertyName">The name of the property to map.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null or an empty string; the specified <see cref="T:System.Windows.Forms.Integration.PropertyTranslator" /> delegate is null.</exception>
      <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on <see cref="P:System.Windows.Forms.Integration.PropertyMap.SourceObject" />.</exception>
    </member>
    <member name="P:System.Windows.Forms.Integration.PropertyMap.Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> object containing the property names in the <see cref="T:System.Windows.Forms.Integration.PropertyMap" /> collection.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> object containing the property names of the <see cref="T:System.Windows.Forms.Integration.PropertyMap" /> collection.</returns>
    </member>
    <member name="E:System.Windows.Forms.Integration.PropertyMap.PropertyMappingError">
      <summary>Occurs when an exception is raised by a property translator. </summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.PropertyMap.Remove(System.String)">
      <summary>Deletes the given property from the mapping.</summary>
      <param name="propertyName">The name of the property to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Forms.Integration.PropertyMap.Reset(System.String)">
      <summary>Restores the default property mapping for the given property.</summary>
      <param name="propertyName">The name of the property to restore.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Forms.Integration.PropertyMap.ResetAll">
      <summary>Restores the default property mappings.</summary>
    </member>
    <member name="P:System.Windows.Forms.Integration.PropertyMap.SourceObject">
      <summary>Gets the object which has the properties to be translated.</summary>
      <returns>The object which has the properties to be translated.</returns>
    </member>
    <member name="P:System.Windows.Forms.Integration.PropertyMap.Values">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> containing the property translators in the <see cref="T:System.Windows.Forms.Integration.PropertyMap" /> collection.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> containing the property translators in the <see cref="T:System.Windows.Forms.Integration.PropertyMap" /> collection.</returns>
    </member>
    <member name="T:System.Windows.Forms.Integration.PropertyMappingExceptionEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Forms.Integration.PropertyMap.PropertyMappingError" /> event. </summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.PropertyMappingExceptionEventArgs.#ctor(System.Exception,System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Integration.PropertyMappingExceptionEventArgs" /> class. </summary>
      <param name="exception">The <see cref="T:System.Exception" /> to raise.</param>
      <param name="propertyName">The name of the property associated with the property-mapping error.</param>
      <param name="propertyValue">The value of the property associated with the property-mapping error.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> is null; <paramref name="propertyName" /> is null or refers to an empty string.</exception>
    </member>
    <member name="P:System.Windows.Forms.Integration.PropertyMappingExceptionEventArgs.PropertyName">
      <summary>Gets the name of the property associated with the property-mapping error.</summary>
      <returns>A string representing the name of the property associated with the property-mapping error.</returns>
    </member>
    <member name="P:System.Windows.Forms.Integration.PropertyMappingExceptionEventArgs.PropertyValue">
      <summary>Gets the value of the property associated with the property-mapping error.</summary>
      <returns>An object representing the value of the property associated with the property-mapping error.</returns>
    </member>
    <member name="T:System.Windows.Forms.Integration.PropertyTranslator">
      <summary>Provides a translation function for a mapped property of the host control. </summary>
      <param name="host">The host control whose property is being mapped. The host control is either a <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> or an <see cref="T:System.Windows.Forms.Integration.ElementHost" />.</param>
      <param name="propertyName">The name of the property being translated.</param>
      <param name="value">The new value of the property.</param>
    </member>
    <member name="T:System.Windows.Forms.Integration.WindowsFormsHost">
      <summary>An element that allows you to host a Windows Forms control on a WPF page. </summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.WindowsFormsHost.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> class. </summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.WindowsFormsHost.ArrangeOverride(System.Windows.Size)">
      <summary>When implemented in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" />-derived class.</summary>
      <returns>The actual size used.</returns>
      <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
    </member>
    <member name="P:System.Windows.Forms.Integration.WindowsFormsHost.Background">
      <summary>Gets or sets the hosted control's background as an ambient property.  </summary>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> set to the background color.</returns>
    </member>
    <member name="F:System.Windows.Forms.Integration.WindowsFormsHost.BackgroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Background" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Background" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Forms.Integration.WindowsFormsHost.BuildWindowCore(System.Runtime.InteropServices.HandleRef)">
      <summary>Overrides the base class implementation of <see cref="M:System.Windows.Interop.HwndHost.BuildWindowCore(System.Runtime.InteropServices.HandleRef)" /> to build the hosted Windows Forms control. </summary>
      <returns>The window handle for this object.</returns>
      <param name="hwndParent">The parent window's handle (HWND).</param>
    </member>
    <member name="P:System.Windows.Forms.Integration.WindowsFormsHost.Child">
      <summary>Gets or sets the child control hosted by the <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> element. </summary>
      <returns>The hosted Windows Forms control.</returns>
      <exception cref="T:System.ArgumentException">An attempt was made to assign a top-level form as the hosted control. </exception>
    </member>
    <member name="E:System.Windows.Forms.Integration.WindowsFormsHost.ChildChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Child" /> property is set. </summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.WindowsFormsHost.DestroyWindowCore(System.Runtime.InteropServices.HandleRef)">
      <summary>Overrides <see cref="M:System.Windows.Interop.HwndHost.DestroyWindowCore(System.Runtime.InteropServices.HandleRef)" /> to delete the window containing this object.</summary>
      <param name="hwnd">A window handle. This parameter is not used.</param>
    </member>
    <member name="M:System.Windows.Forms.Integration.WindowsFormsHost.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" />, and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.Windows.Forms.Integration.WindowsFormsHost.EnableWindowsFormsInterop">
      <summary>Enables a <see cref="T:System.Windows.Forms.Form" /> to function correctly when it is opened modelessly from WPF.</summary>
    </member>
    <member name="P:System.Windows.Forms.Integration.WindowsFormsHost.FontFamily">
      <summary>Gets or sets the hosted control's font family.  </summary>
      <returns>The font family used in the hosted control.</returns>
    </member>
    <member name="F:System.Windows.Forms.Integration.WindowsFormsHost.FontFamilyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.FontFamily" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.FontFamily" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Forms.Integration.WindowsFormsHost.FontSize">
      <summary>Gets or sets the hosted control's font size.  </summary>
      <returns>The font size used in the hosted control.</returns>
    </member>
    <member name="F:System.Windows.Forms.Integration.WindowsFormsHost.FontSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.FontSize" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.FontSize" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Forms.Integration.WindowsFormsHost.FontStyle">
      <summary>Gets or sets the hosted control's font style.  </summary>
      <returns>The font style used in the hosted control.</returns>
    </member>
    <member name="F:System.Windows.Forms.Integration.WindowsFormsHost.FontStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.FontStyle" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.FontStyle" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Forms.Integration.WindowsFormsHost.FontWeight">
      <summary>Gets or sets the hosted control's font weight.  </summary>
      <returns>The font weight used in the hosted control.</returns>
    </member>
    <member name="F:System.Windows.Forms.Integration.WindowsFormsHost.FontWeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.FontWeight" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.FontWeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Forms.Integration.WindowsFormsHost.Foreground">
      <summary>Gets or sets the hosted control's foreground color.  </summary>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> used to set the foreground color for the hosted control.</returns>
    </member>
    <member name="F:System.Windows.Forms.Integration.WindowsFormsHost.ForegroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Foreground" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Foreground" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Forms.Integration.WindowsFormsHost.LayoutError">
      <summary>Occurs when a layout error, such as a skew or rotation that <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> does not support, is encountered.</summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.WindowsFormsHost.MeasureOverride(System.Windows.Size)">
      <summary>Overrides the base class implementation of <see cref="M:System.Windows.Interop.HwndHost.MeasureOverride(System.Windows.Size)" /> to measure the size of a <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> object and return proper sizes to the layout engine. </summary>
      <returns>The desired size of the <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> object.</returns>
      <param name="constraint">The available size for the <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> object.</param>
    </member>
    <member name="M:System.Windows.Forms.Integration.WindowsFormsHost.OnCreateAutomationPeer">
      <summary>Creates a <see cref="T:System.Windows.Automation.Peers.WindowsFormsHostAutomationPeer" /> for the <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> element.</summary>
      <returns>A new <see cref="T:System.Windows.Automation.Peers.WindowsFormsHostAutomationPeer" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Integration.WindowsFormsHost.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Forces the translation of a mapped property. </summary>
      <param name="e">Arguments that identify the property that changed as well as providing that property's old and new values.</param>
    </member>
    <member name="P:System.Windows.Forms.Integration.WindowsFormsHost.Padding">
      <summary>Specifies the size of the desired padding within the hosted Windows Forms control. </summary>
      <returns>A <see cref="T:System.Windows.Thickness" /> structure representing the padding pf the hosted Windows Forms control. </returns>
    </member>
    <member name="F:System.Windows.Forms.Integration.WindowsFormsHost.PaddingProperty">
      <summary>Identifies the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Padding" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Padding" /> dependency property. </returns>
    </member>
    <member name="P:System.Windows.Forms.Integration.WindowsFormsHost.PropertyMap">
      <summary>Gets the property map that determines how setting properties on the <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> element affects the hosted Windows Forms control.</summary>
      <returns>A <see cref="T:System.Windows.Forms.Integration.PropertyMap" /> that maps <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> properties to properties on the hosted Windows Forms control.</returns>
    </member>
    <member name="M:System.Windows.Forms.Integration.WindowsFormsHost.ScaleChild(System.Windows.Vector)">
      <summary>Scales the hosted Windows Forms control, and tracks the scale factor.</summary>
      <returns>A <see cref="T:System.Windows.Vector" /> which represents the scale factor applied to the hosted Windows Forms control. </returns>
      <param name="newScale">The new scale factor.</param>
    </member>
    <member name="P:System.Windows.Forms.Integration.WindowsFormsHost.TabIndex">
      <summary>Gets or sets the hosted control's tab index.   </summary>
      <returns>The tab index for tab navigation and focus.</returns>
    </member>
    <member name="F:System.Windows.Forms.Integration.WindowsFormsHost.TabIndexProperty">
      <summary>Identifies the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.TabIndex" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.TabIndex" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Forms.Integration.WindowsFormsHost.TabInto(System.Windows.Input.TraversalRequest)">
      <summary>Forwards focus from WPF to the hosted Windows Forms control.</summary>
      <returns>true if a control was activated; otherwise, false. </returns>
      <param name="request">A <see cref="T:System.Windows.Input.TraversalRequest" /> that specifies the focus behavior. </param>
    </member>
    <member name="M:System.Windows.Forms.Integration.WindowsFormsHost.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
      <summary>When implemented in a derived class, accesses the window process of the hosted child window.</summary>
      <returns>The window handle of the child window.</returns>
      <param name="hwnd">Window handle of the hosted window.</param>
      <param name="msg">Message to act upon.</param>
      <param name="wParam">Information that may be relevant to handling the message. This is typically used to store small pieces of information, such as flags.</param>
      <param name="lParam">Information that may be relevant to handling the message. This is typically used to reference an object.</param>
      <param name="handled">Whether events resulting should be marked handled.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\PermissionSets\FullTrust.xml ===
﻿<PermissionSet
   version="1"
   class="System.Security.PermissionSet"
   Unrestricted="true" />
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\WindowsBase.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>WindowsBase</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Specialized.CollectionChangedEventManager">
      <summary>Provides a <see cref="T:System.Windows.WeakEventManager" /> implementation so that you can use the "weak event listener" pattern to attach listeners for the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event.</summary>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.AddListener(System.Collections.Specialized.INotifyCollectionChanged,System.Windows.IWeakEventListener)">
      <summary>Adds the specified listener to the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event of the specified source.</summary>
      <param name="source">The object with the event.</param>
      <param name="listener">The object to add as a listener.</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.RemoveListener(System.Collections.Specialized.INotifyCollectionChanged,System.Windows.IWeakEventListener)">
      <summary>Removes the specified listener from the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event of the specified source.</summary>
      <param name="source">The object with the event.</param>
      <param name="listener">The listener to remove.</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.StartListening(System.Object)">
      <summary>Begins listening for the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event on the specified source.</summary>
      <param name="source">The object with the event.</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.StopListening(System.Object)">
      <summary>Stops listening for the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event on the specified source.</summary>
      <param name="source">The object with the event.</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangedEventManager">
      <summary>Provides a <see cref="T:System.Windows.WeakEventManager" /> implementation so that you can use the "weak event listener" pattern to attach listeners for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> event.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.AddListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>Adds the specified listener to the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> event of the specified source.</summary>
      <param name="source">The object with the event.</param>
      <param name="listener">The object to add as a listener.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.RemoveListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>Removes the specified listener from the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> event of the specified source.</summary>
      <param name="source">The object with the event.</param>
      <param name="listener">The listener to remove.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.StartListening(System.Object)">
      <summary>Begins listening for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> event on the specified source.</summary>
      <param name="source">The object with the event.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.StopListening(System.Object)">
      <summary>Stops listening for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> event on the specified source.</summary>
      <param name="source">The object with the event.</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventArgs">
      <summary>Provides information for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> class with the specified <paramref name="isCancelable" /> value.</summary>
      <param name="isCancelable">A value that indicates whether the event is cancelable.</param>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.Cancel">
      <summary>Gets or sets a value that indicates whether to cancel the event.</summary>
      <returns>true if the event is to be canceled; otherwise, false. The default value is false.</returns>
      <exception cref="T:System.InvalidOperationException">If the value of <see cref="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable" /> is false.</exception>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable">
      <summary>Gets a value that indicates whether the event is cancelable.</summary>
      <returns>true if the event is cancelable, otherwise, false. The default value is true.</returns>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Windows.Data.CollectionView.CurrentChanging" /> event.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">Information about the event.</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventManager">
      <summary>Provides a <see cref="T:System.Windows.WeakEventManager" /> implementation so that you can use the "weak event listener" pattern to attach listeners for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.AddListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>Adds the specified listener to the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event of the specified source.</summary>
      <param name="source">The object with the event.</param>
      <param name="listener">The object to add as a listener.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.RemoveListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>Removes the specified listener from the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event of the specified source.</summary>
      <param name="source">The object with the event.</param>
      <param name="listener">The listener to remove.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.StartListening(System.Object)">
      <summary>Begins listening for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event on the specified source.</summary>
      <param name="source">The object with the event.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.StopListening(System.Object)">
      <summary>Stops listening for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event on the specified source.</summary>
      <param name="source">The object with the event.</param>
    </member>
    <member name="T:System.ComponentModel.DependencyPropertyDescriptor">
      <summary>Provides an extension of <see cref="T:System.ComponentModel.PropertyDescriptor" /> that accounts for the additional property characteristics of a dependency property.</summary>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary>Enables other objects to be notified when this property changes. </summary>
      <param name="component">The component to add the handler for.</param>
      <param name="handler">The delegate to add as a listener.</param>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Attributes">
      <summary>Gets the collection of attributes for this member.</summary>
      <returns>The <see cref="T:System.ComponentModel.AttributeCollection" /> collection of attributes.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.CanResetValue(System.Object)">
      <summary>Returns whether resetting an object changes its value.</summary>
      <returns>true if resetting the component changes its value; otherwise, false.</returns>
      <param name="component">The component to test for reset capability. </param>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Category">
      <summary>Gets the name of the category that the member belongs to, as specified in the <see cref="T:System.ComponentModel.CategoryAttribute" />.</summary>
      <returns>The name of the category to which the member belongs. If there is no <see cref="T:System.ComponentModel.CategoryAttribute" />, the category name is set to the default category, Misc.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.ComponentType">
      <summary>Gets the type of the component this property is bound to.</summary>
      <returns>A <see cref="T:System.Type" /> that represents the type of component this property is bound to. When <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)" /> or <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" /> are invoked, the object specified might be an instance of this type.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Converter">
      <summary>Gets the type converter for this property.</summary>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter" /> that is used to convert the <see cref="T:System.Type" /> of this property.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DependencyProperty">
      <summary>Returns the dependency property identifier.</summary>
      <returns>The dependency property identifier.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Description">
      <summary>Gets the description of the member, as specified in the <see cref="T:System.ComponentModel.DescriptionAttribute" />.</summary>
      <returns>The description of the member. If there is no <see cref="T:System.ComponentModel.DescriptionAttribute" />, the property value is set to the default, which is an empty string ("").</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DesignerCoerceValueCallback">
      <summary>Gets or sets a callback that designers use to modify the effective value of a dependency property before the dependency property value is stored in the dependency property engine.</summary>
      <returns>A callback that designers use to modify the effective value of a dependency property before the dependency property value is stored in the dependency property engine.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DesignTimeOnly">
      <summary>Gets whether this member should be set only at design time, as specified in the <see cref="T:System.ComponentModel.DesignOnlyAttribute" />.</summary>
      <returns>true if this member should be set only at design time; false if the member can be set during run time. If there is no <see cref="T:System.ComponentModel.DesignOnlyAttribute" />, the return value is the default, which is false.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DisplayName">
      <summary>Gets the name that can be displayed in a window, such as a Properties window.</summary>
      <returns>The name to display for the property.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.Equals(System.Object)">
      <summary>Compares two <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> instances for equality.</summary>
      <returns>true if the values are equivalent; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />  to compare with the current instance. </param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromName(System.String,System.Type,System.Type)">
      <summary>Returns a <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> for a provided property name.</summary>
      <returns>The requested <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />.</returns>
      <param name="name">The registered name of a dependency property or an attached property.</param>
      <param name="ownerType">The <see cref="T:System.Type" /> of the object that owns the property definition.</param>
      <param name="targetType">The <see cref="T:System.Type" /> of the object you want to set the property for.</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromName(System.String,System.Type,System.Type,System.Boolean)">
      <summary>Returns a <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> for a provided property name.</summary>
      <returns>The requested <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />.</returns>
      <param name="name">The registered name of a dependency property or an attached property.</param>
      <param name="ownerType">The <see cref="T:System.Type" /> of the object that owns the property definition.</param>
      <param name="targetType">The <see cref="T:System.Type" /> of the object you want to set the property for.</param>
      <param name="ignorePropertyType">Specifies to ignore the property type.</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromProperty(System.ComponentModel.PropertyDescriptor)">
      <summary>Returns a <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> for a provided <see cref="T:System.ComponentModel.PropertyDescriptor" />.</summary>
      <returns>If the property described by <paramref name="property" /> is a dependency property, returns a valid <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />. Otherwise, returns a null<see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />.</returns>
      <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> to check.</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromProperty(System.Windows.DependencyProperty,System.Type)">
      <summary>Returns a <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> for a provided dependency property and target type.</summary>
      <returns>A <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> for the provided dependency property.</returns>
      <param name="dependencyProperty">The identifier for a dependency property.</param>
      <param name="targetType">The type of the object where the property is set.</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.</summary>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties that match the specified attributes for the specified component.</returns>
      <param name="instance">A component to get the properties for.</param>
      <param name="filter">An array of type <see cref="T:System.Attribute" /> to use as a filter. </param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetEditor(System.Type)">
      <summary>Gets an editor of the specified type.</summary>
      <returns>An instance of the requested editor type, or null if an editor cannot be found.</returns>
      <param name="editorBaseType">The base type of editor, which is used to differentiate between multiple editors that a property supports. </param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />.</summary>
      <returns>A 32-bit signed integer hash code. </returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)">
      <summary>Resturns the current value of the property on a component.</summary>
      <returns>The requested value.</returns>
      <param name="component">The component instance.</param>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsAttached">
      <summary>Gets a value that indicates whether the property is registered as an attached property and is being used through an attached usage.</summary>
      <returns>true if the property is an attached property; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsBrowsable">
      <summary>Gets a value that indicates the value of the <see cref="T:System.ComponentModel.BrowsableAttribute" /> on the property.</summary>
      <returns>true if the <see cref="T:System.ComponentModel.BrowsableAttribute" /> was specified on the property; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsLocalizable">
      <summary>Gets a value indicating whether this property should be localized, as specified in the <see cref="T:System.ComponentModel.LocalizableAttribute" />.</summary>
      <returns>true if the member is marked with the <see cref="T:System.ComponentModel.LocalizableAttribute" /> constructor of the value true; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsReadOnly">
      <summary>Gets a value indicating whether this property is read-only.</summary>
      <returns>true if the property is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Metadata">
      <summary>Gets the metadata associated with the dependency property.</summary>
      <returns>The dependency property metadata.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.PropertyType">
      <summary>Gets the represented <see cref="T:System.Type" /> of the dependency property.</summary>
      <returns>The <see cref="T:System.Type" /> of the dependency property.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary>Enables other objects to be notified when this property changes.</summary>
      <param name="component">The component to add the handler for. </param>
      <param name="handler">The delegate to add as a listener. </param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ResetValue(System.Object)">
      <summary>Resets the value for this property of the component to the default value.</summary>
      <param name="component">The component with the property value that is to be reset to the default value. </param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>Sets the value of the component to a different value.</summary>
      <param name="component">The component with the property value that is to be set. </param>
      <param name="value">The new value.</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>Indicates whether the value of this property needs to be persisted by serialization processes.</summary>
      <returns>true if the property should be persisted; otherwise, false.</returns>
      <param name="component">The component with the property to be examined for persistence.</param>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.SupportsChangeEvents">
      <summary>Indicates whether value change notifications for this property may originate from outside the property descriptor, such as from the component itself, or whether notifications will only originate from direct calls made to <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" />. </summary>
      <returns>true if notifications for this property may originate from outside the property descriptor, such as from the component itself. false if notifications will only originate from direct calls made to <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ToString">
      <summary>Converts the value of this instance to its equivalent string representation.</summary>
      <returns>Returns the <see cref="P:System.ComponentModel.MemberDescriptor.Name" /> value.</returns>
    </member>
    <member name="T:System.ComponentModel.GroupDescription">
      <summary>Provides an abstract base class for types that describe how to divide the items in a collection into groups.</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.GroupDescription" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.GroupNameFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
      <summary>Returns the group name(s) for the given item.</summary>
      <returns>The group name(s) for the given item.</returns>
      <param name="item">The item to return group names for.</param>
      <param name="level">The level of grouping.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to supply to the converter.</param>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.GroupNames">
      <summary>Gets the collection of names that are used to initialize a group with a set of subgroups with the given names.</summary>
      <returns>The collection of names that are used to initialize a group with a set of subgroups with the given names.</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.NamesMatch(System.Object,System.Object)">
      <summary>Returns a value that indicates whether the group name and the item name match such that the item belongs to the group.</summary>
      <returns>true if the names match and the item belongs to the group; otherwise, false.</returns>
      <param name="groupName">The name of the group to check.</param>
      <param name="itemName">The name of the item to check.</param>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.GroupDescription.PropertyChanged" /> event.</summary>
      <param name="e">Arguments of the event being raised.</param>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.ShouldSerializeGroupNames">
      <summary>Returns whether serialization processes should serialize the effective value of the <see cref="P:System.ComponentModel.GroupDescription.GroupNames" /> property on instances of this class.</summary>
      <returns>Returns true if the <see cref="P:System.ComponentModel.GroupDescription.GroupNames" /> property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="T:System.ComponentModel.ICollectionView">
      <summary>Enables collections to have the functionalities of current record management, custom sorting, filtering, and grouping.</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanFilter">
      <summary>Gets a value that indicates whether this view supports filtering via the <see cref="P:System.ComponentModel.ICollectionView.Filter" /> property.</summary>
      <returns>true if this view support filtering; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanGroup">
      <summary>Gets a value that indicates whether this view supports grouping via the <see cref="P:System.ComponentModel.ICollectionView.GroupDescriptions" /> property.</summary>
      <returns>true if this view supports grouping; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanSort">
      <summary>Gets a value that indicates whether this view supports sorting via the <see cref="P:System.ComponentModel.ICollectionView.SortDescriptions" /> property.</summary>
      <returns>true if this view supports sorting; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Contains(System.Object)">
      <summary>Returns a value that indicates whether a given item belongs to this collection view.</summary>
      <returns>true if the item belongs to this collection view; otherwise, false.</returns>
      <param name="item">The object to check.</param>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Culture">
      <summary>Gets or sets the cultural info for any operations of the view that may differ by culture, such as sorting.</summary>
      <returns>The culture to use during sorting.</returns>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanged">
      <summary>When implementing this interface, raise this event after the current item has been changed.</summary>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanging">
      <summary>When implementing this interface, raise this event before changing the current item. Event handler can cancel this event.</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentItem">
      <summary>Gets the current item in the view.</summary>
      <returns>The current item of the view or null if there is no current item.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentPosition">
      <summary>Gets the ordinal position of the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> within the view.</summary>
      <returns>The ordinal position of the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> within the view.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.DeferRefresh">
      <summary>Enters a defer cycle that you can use to merge changes to the view and delay automatic refresh.</summary>
      <returns>An <see cref="T:System.IDisposable" /> object that you can use to dispose of the calling object.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Filter">
      <summary>Gets or sets a callback used to determine if an item is suitable for inclusion in the view.</summary>
      <returns>A method used to determine if an item is suitable for inclusion in the view.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.GroupDescriptions">
      <summary>Gets a collection of <see cref="T:System.ComponentModel.GroupDescription" /> objects that describe how the items in the collection are grouped in the view.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.GroupDescription" /> objects that describe how the items in the collection are grouped in the view.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Groups">
      <summary>Gets the top-level groups.</summary>
      <returns>A read-only collection of the top-level groups or null if there are no groups.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentAfterLast">
      <summary>Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the end of the collection.</summary>
      <returns>Returns true if the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the end of the collection; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentBeforeFirst">
      <summary>Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the beginning of the collection.</summary>
      <returns>Returns true if the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the beginning of the collection; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsEmpty">
      <summary>Returns a value that indicates whether the resulting view is empty.</summary>
      <returns>true if the resulting view is empty; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentTo(System.Object)">
      <summary>Sets the specified item to be the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view.</summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is within the view; otherwise, false.</returns>
      <param name="item">The item to set as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</param>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToFirst">
      <summary>Sets the first item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item within the view; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToLast">
      <summary>Sets the last item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item within the view; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToNext">
      <summary>Sets the item after the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item within the view; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPosition(System.Int32)">
      <summary>Sets the item at the specified index to be the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view.</summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item within the view; otherwise, false.</returns>
      <param name="position">The index to set the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> to.</param>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPrevious">
      <summary>Sets the item before the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item within the view; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Refresh">
      <summary>Recreates the view.</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SortDescriptions">
      <summary>Gets a collection of <see cref="T:System.ComponentModel.SortDescription" /> objects that describe how the items in the collection are sorted in the view.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.SortDescription" /> objects that describe how the items in the collection are sorted in the view.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SourceCollection">
      <summary>Returns the underlying collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerable" /> object that is the underlying collection.</returns>
    </member>
    <member name="T:System.ComponentModel.ICollectionViewFactory">
      <summary>An interface that enables implementing collections to create a view to their data. Normally, user code does not call methods on this interface.</summary>
    </member>
    <member name="M:System.ComponentModel.ICollectionViewFactory.CreateView">
      <summary>Creates a new view on the collection that implements this interface. Typically, user code does not call this method.</summary>
      <returns>The newly created view.</returns>
    </member>
    <member name="T:System.ComponentModel.IEditableCollectionView">
      <summary>Defines methods and properties that a <see cref="T:System.Windows.Data.CollectionView" /> implements to provide editing capabilities to a collection.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.AddNew">
      <summary>Adds a new item to the collection.</summary>
      <returns>The new item that is added to the collection.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanAddNew">
      <summary>Gets a value that indicates whether a new item can be added to the collection.</summary>
      <returns>true if a new item can be added to the collection; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanCancelEdit">
      <summary>Gets a value that indicates whether the collection view can discard pending changes and restore the original values of an edited object.</summary>
      <returns>true if the collection view can discard pending changes and restore the original values of an edited object; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CancelEdit">
      <summary>Ends the edit transaction and, if possible, restores the original value to the item.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CancelNew">
      <summary>Ends the add transaction and discards the pending new item.</summary>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanRemove">
      <summary>Gets a value that indicates whether an item can be removed from the collection.</summary>
      <returns>true if an item can be removed from the collection; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CommitEdit">
      <summary>Ends the edit transaction and saves the pending changes.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CommitNew">
      <summary>Ends the add transaction and saves the pending new item.</summary>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CurrentAddItem">
      <summary>Gets the item that is being added during the current add transaction.</summary>
      <returns>The item that is being added if <see cref="P:System.ComponentModel.IEditableCollectionView.IsAddingNew" /> is true; otherwise, null.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CurrentEditItem">
      <summary>Gets the item in the collection that is being edited.</summary>
      <returns>The item in the collection that is being edited if <see cref="P:System.ComponentModel.IEditableCollectionView.IsEditingItem" /> is true; otherwise, null.</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.EditItem(System.Object)">
      <summary>Begins an edit transaction of the specified item.</summary>
      <param name="item">The item to edit.</param>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.IsAddingNew">
      <summary>Gets a value that indicates whether an add transaction is in progress.</summary>
      <returns>true if an add transaction is in progress; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.IsEditingItem">
      <summary>Gets a value that indicates whether an edit transaction is in progress.</summary>
      <returns>true if an edit transaction is in progress; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition">
      <summary>Gets or sets the position of the new item placeholder in the collection view.</summary>
      <returns>One of the enumeration values that specifies the position of the new item placeholder in the collection view.</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.Remove(System.Object)">
      <summary>Removes the specified item from the collection.</summary>
      <param name="item">The item to remove.</param>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.RemoveAt(System.Int32)">
      <summary>Removes the item at the specified position from the collection.</summary>
      <param name="index">The position of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than the number of items in the collection view.</exception>
    </member>
    <member name="T:System.ComponentModel.IEditableCollectionViewAddNewItem">
      <summary>Defines methods and properties that a <see cref="T:System.Windows.Data.CollectionView" /> implements to enable specifying adding items of a specific type.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionViewAddNewItem.AddNewItem(System.Object)">
      <summary>Adds the specified object to the collection.</summary>
      <returns>The object that is added to the collection.</returns>
      <param name="newItem">The object to add to the collection.</param>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionViewAddNewItem.CanAddNewItem">
      <summary>Gets a value that indicates whether a specified object can be added to the collection.</summary>
      <returns>true if a specified object can be added to the collection; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.IItemProperties">
      <summary>Defines a property that provides information about an object's properties.</summary>
    </member>
    <member name="P:System.ComponentModel.IItemProperties.ItemProperties">
      <summary>Gets a collection that contains information about the properties that are available on the items in a collection.</summary>
      <returns>A collection that contains information about the properties that are available on the items in a collection.</returns>
    </member>
    <member name="T:System.ComponentModel.ItemPropertyInfo">
      <summary>Contains information about a property.</summary>
    </member>
    <member name="M:System.ComponentModel.ItemPropertyInfo.#ctor(System.String,System.Type,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ItemPropertyInfo" /> class. </summary>
      <param name="name">The name of the property.</param>
      <param name="type">The type of the property.</param>
      <param name="descriptor">An object that contains additional information about the property.</param>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.Descriptor">
      <summary>Get an object that contains additional information about the property.</summary>
      <returns>An object that contains additional information about the property.</returns>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.Name">
      <summary>Gets the name of the property.</summary>
      <returns>The name of the property.</returns>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.PropertyType">
      <summary>Gets the type of the property.</summary>
      <returns>The type of the property.</returns>
    </member>
    <member name="T:System.ComponentModel.NewItemPlaceholderPosition">
      <summary>Specifies where the placeholder for a new item appears in the collection.</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.None">
      <summary>The collection does not use a new item placeholder. The position of items that are added depends on the underlying collection.  Usually, they are added at the end of the collection.</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.AtBeginning">
      <summary>The placeholder for a new item appears at the beginning of the collection.  New items are at the beginning of the collection, after the new item placeholder. </summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.AtEnd">
      <summary>The placeholder for a new item appears at the end of the collection. New items are added at the end of the collection, before the new item placeholder.</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventManager">
      <summary>Provides a <see cref="T:System.Windows.WeakEventManager" /> implementation so that you can use the "weak event listener" pattern to attach listeners for the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.AddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
      <summary>Adds the specified listener to the list of listeners on the specified source.</summary>
      <param name="source">The object with the event.</param>
      <param name="listener">The object to add as a listener.</param>
      <param name="propertyName">The name of the property that exists on <paramref name="source" /> upon which to listen for changes. Set to <see cref="F:System.String.Empty" /> to indicate "any property".</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.Purge(System.Object,System.Object,System.Boolean)">
      <summary>Removes listeners that are no longer active from the data for the provided source. </summary>
      <returns>true if some entries were removed; otherwise, false.</returns>
      <param name="source">Source object to remove all listeners from.</param>
      <param name="data">The data to purge. This is expected to be a <see cref="T:System.Collections.Specialized.HybridDictionary" />.</param>
      <param name="purgeAll">Set to true to stop listening and to completely remove all data.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.RemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
      <summary>Removes the specified listener from the list of listeners on the provided source.</summary>
      <param name="source">The object to remove the listener from.</param>
      <param name="listener">The listener to remove.</param>
      <param name="propertyName">The name of the property that exists on <paramref name="source" /> upon which to stop listening for changes. Set to <see cref="F:System.String.Empty" /> to indicate "any property".</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.StartListening(System.Object)">
      <summary>Begins listening for the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event on the provided source.</summary>
      <param name="source">The object on which to start listening for <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.StopListening(System.Object)">
      <summary>Stops listening for the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event on the provided source.</summary>
      <param name="source">The source object on which to stop listening for <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</param>
    </member>
    <member name="T:System.ComponentModel.PropertyFilterAttribute">
      <summary>Specifies which properties should be reported by type descriptors, specifically the <see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)" /> method.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.#ctor(System.ComponentModel.PropertyFilterOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> class.</summary>
      <param name="filter">The options that describe this property filter.</param>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterAttribute.Default">
      <summary>This member supports the Microsoft .NET Framework infrastructure and is not intended to be used directly from your code. </summary>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework attribute is equal to a specified object.</summary>
      <returns>true if the specified <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> is equal to the current <see cref="T:System.ComponentModel.PropertyFilterAttribute" />; otherwise, false. </returns>
      <param name="value">The object to compare to this <see cref="T:System.ComponentModel.PropertyFilterAttribute" />.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyFilterAttribute.Filter">
      <summary>Gets the filter options for this <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework attribute.</summary>
      <returns>The property filter options.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework attribute. </summary>
      <returns>A signed 32-bit integer value.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.Match(System.Object)">
      <summary>Returns a value that indicates whether the property filter options of the current <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework attribute match the property filter options of the provided object. </summary>
      <returns>true if a match exists; otherwise, false.</returns>
      <param name="value">The object to compare. This object is expected to be a <see cref="T:System.ComponentModel.PropertyFilterAttribute" />.</param>
    </member>
    <member name="T:System.ComponentModel.PropertyFilterOptions">
      <summary>Specifies which properties should be reported by type descriptors, specifically the <see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)" /> method. This enumeration is used to specify the value of the <see cref="P:System.ComponentModel.PropertyFilterAttribute.Filter" /> property.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.None">
      <summary>Return no properties</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.Invalid">
      <summary>Return only those properties that are not valid given the current context of the object. See Remarks.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.SetValues">
      <summary>Return only those properties that have local values currently set.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.UnsetValues">
      <summary>Return only those properties whose local values are not set, or do not have properties set in an external expression store (such as binding or deferred resource).</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.Valid">
      <summary>Return any property that is valid on the  object in the current scope. See Remarks.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.All">
      <summary>Return all properties.</summary>
    </member>
    <member name="T:System.ComponentModel.SortDescription">
      <summary>Defines the direction and the property name to be used as the criteria for sorting a collection.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescription.#ctor(System.String,System.ComponentModel.ListSortDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.SortDescription" /> structure.</summary>
      <param name="propertyName">The name of the property to sort the list by.</param>
      <param name="direction">The sort order.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter cannot be null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="propertyName" /> parameter cannot be empty</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The <paramref name="direction" /> parameter does not specify a valid value.</exception>
    </member>
    <member name="P:System.ComponentModel.SortDescription.Direction">
      <summary>Gets or sets a value that indicates whether to sort in ascending or descending order.</summary>
      <returns>A <see cref="T:System.ComponentModel.ListSortDirection" /> value to indicate whether to sort in ascending or descending order.</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.Equals(System.Object)">
      <summary>Compares the specified instance and the current instance of <see cref="T:System.ComponentModel.SortDescription" /> for value equality.</summary>
      <returns>true if <paramref name="obj" /> and this instance of <see cref="T:System.ComponentModel.SortDescription" /> have the same values.</returns>
      <param name="obj">The <see cref="T:System.ComponentModel.SortDescription" /> instance to compare.</param>
    </member>
    <member name="M:System.ComponentModel.SortDescription.GetHashCode">
      <summary>Returns the hash code for this instance of <see cref="T:System.ComponentModel.SortDescription" />.</summary>
      <returns>The hash code for this instance of <see cref="T:System.ComponentModel.SortDescription" />.</returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.IsSealed">
      <summary>Gets a value that indicates whether this object is in an immutable state.</summary>
      <returns>true if this object is in use; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Equality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary>Compares two <see cref="T:System.ComponentModel.SortDescription" /> objects for value equality.</summary>
      <returns>true if the two objects are equal; otherwise, false.</returns>
      <param name="sd1">The first instance to compare.</param>
      <param name="sd2">The second instance to compare.</param>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Inequality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary>Compares two <see cref="T:System.ComponentModel.SortDescription" /> objects for value inequality.</summary>
      <returns>true if the values are not equal; otherwise, false.</returns>
      <param name="sd1">The first instance to compare.</param>
      <param name="sd2">The second instance to compare.</param>
    </member>
    <member name="P:System.ComponentModel.SortDescription.PropertyName">
      <summary>Gets or sets the property name being used as the sorting criteria.</summary>
      <returns>The default value is null.</returns>
    </member>
    <member name="T:System.ComponentModel.SortDescriptionCollection">
      <summary>Represents a collection of <see cref="T:System.ComponentModel.SortDescription" /> objects.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.SortDescriptionCollection" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.ClearItems">
      <summary>Removes all items from the collection.</summary>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.CollectionChanged">
      <summary>Occurs when an item is added or removed.</summary>
    </member>
    <member name="F:System.ComponentModel.SortDescriptionCollection.Empty">
      <summary>Gets an empty and non-modifiable instance of <see cref="T:System.ComponentModel.SortDescriptionCollection" />. </summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.InsertItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary>Inserts an item into the collection at the specified index.</summary>
      <param name="index">The zero-based index where the <paramref name="item" /> is inserted.</param>
      <param name="item">The object to insert.</param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.RemoveItem(System.Int32)">
      <summary>Removes the item at the specified index in the collection.</summary>
      <param name="index">The zero-based index of the element to remove.</param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.SetItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary>Replaces the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>Occurs when an item is added or removed.</summary>
    </member>
    <member name="T:System.Diagnostics.PresentationTraceLevel">
      <summary>Describes the level of detail to trace about a particular object.</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.None">
      <summary>Traces no available additional information.</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.Low">
      <summary>Traces some additional information.</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.Medium">
      <summary>Traces a medium amount of additional information.</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.High">
      <summary>Traces all additional information.</summary>
    </member>
    <member name="T:System.Diagnostics.PresentationTraceSources">
      <summary>Provides debug tracing support that is specifically targeted for Windows Presentation Foundation (WPF) applications. This is an abstract class.</summary>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.AnimationSource">
      <summary>Gets an animation trace source.</summary>
      <returns>An animation trace source.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DataBindingSource">
      <summary>Gets a data-binding trace source.</summary>
      <returns>A data-binding trace source.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DependencyPropertySource">
      <summary>Gets a dependency property trace source.</summary>
      <returns>A dependency property trace source.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DocumentsSource">
      <summary>Gets a document trace source.</summary>
      <returns>A document trace source.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.FreezableSource">
      <summary>Gets a Freezable trace source.</summary>
      <returns>A Freezable trace source.</returns>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.GetTraceLevel(System.Object)">
      <summary>Gets the value of the <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> attached property for a specified element.</summary>
      <returns>The <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> property value for the element.</returns>
      <param name="element">The element from which the property value is read.</param>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.HwndHostSource">
      <summary>Gets an hwnd host trace source.</summary>
      <returns>An hwnd host trace source.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.MarkupSource">
      <summary>Gets a markup trace source.</summary>
      <returns>A markup trace source.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.NameScopeSource">
      <summary>Gets a name scope trace source.</summary>
      <returns>A name scope trace source.</returns>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.Refresh">
      <summary>Refreshes trace sources, by forcing the app.config file to be re-read.</summary>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.ResourceDictionarySource">
      <summary>Gets a resource dictionary trace source.</summary>
      <returns>A resource dictionary trace source.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.RoutedEventSource">
      <summary>Gets a routed event trace source.</summary>
      <returns>A routed event trace source.</returns>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.SetTraceLevel(System.Object,System.Diagnostics.PresentationTraceLevel)">
      <summary>Sets the value of the <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> attached property to a specified element.</summary>
      <param name="element">The element to which the attached property is written.</param>
      <param name="traceLevel">The needed <see cref="T:System.Diagnostics.PresentationTraceLevel" /> value.</param>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.ShellSource">
      <summary>Gets a shell trace source.</summary>
      <returns>A shell trace source.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.TraceLevel">
      <summary>Gets or sets a value that specifies the level of detail to trace about a particular object.</summary>
      <returns>A <see cref="T:System.Diagnostics.PresentationTraceLevel" /> value that indicates the level of detail to trace about a particular object.</returns>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceSources.TraceLevelProperty">
      <summary>Identifies the <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> attached property.</summary>
    </member>
    <member name="T:System.IO.FileFormatException">
      <summary>The exception that is thrown when an input file or a data stream that is supposed to conform to a certain file format specification is malformed.</summary>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" /> class.</summary>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" /> class and initializes it with serialized data. This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> value that represents the error message.</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" /> class with a specified error message and exception type.</summary>
      <param name="message">A <see cref="T:System.String" /> value that represents the error message.</param>
      <param name="innerException">The value of the <see cref="P:System.Exception.InnerException" /> property, which represents the cause of the current exception.</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri)">
      <summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" /> class with a source URI value.</summary>
      <param name="sourceUri">The <see cref="T:System.Uri" /> value of the file that caused this error.</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" /> class with a source URI value and an exception type.</summary>
      <param name="sourceUri">The <see cref="T:System.Uri" /> value of the file that caused this error.</param>
      <param name="innerException">The value of the <see cref="P:System.Exception.InnerException" /> property, which represents the cause of the current exception.</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" /> class with a source URI value and a specified error message.</summary>
      <param name="sourceUri">The <see cref="T:System.Uri" /> value of the file that caused this error.</param>
      <param name="message">A <see cref="T:System.String" /> value that represents the error message.</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri,System.String,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" /> class with a source URI value, a specified error message, and an exception type.</summary>
      <param name="sourceUri">The <see cref="T:System.Uri" /> value of the file that caused this error.</param>
      <param name="message">A <see cref="T:System.String" /> value that represents the error message.</param>
      <param name="innerException">The value of the <see cref="P:System.Exception.InnerException" /> property, which represents the cause of the current exception.</param>
    </member>
    <member name="M:System.IO.FileFormatException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the file name and additional exception information.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="P:System.IO.FileFormatException.SourceUri">
      <summary>Gets the name of a file that caused the <see cref="T:System.IO.FileFormatException" />.</summary>
      <returns>A <see cref="T:System.Uri" /> that represents the name the file that caused the exception.</returns>
    </member>
    <member name="T:System.IO.Packaging.CertificateEmbeddingOption">
      <summary>Specifies the location where the X.509 certificate that is used in signing is stored.</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.InCertificatePart">
      <summary>The certificate is embedded in its own <see cref="T:System.IO.Packaging.PackagePart" />.</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.InSignaturePart">
      <summary>The certificate is embedded in the <see cref="P:System.IO.Packaging.PackageDigitalSignature.SignaturePart" /> that is created for the signature being added.</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.NotEmbedded">
      <summary>The certificate in not embedded in the package.</summary>
    </member>
    <member name="T:System.IO.Packaging.CompressionOption">
      <summary>Specifies the compression level for content that is stored in a <see cref="T:System.IO.Packaging.PackagePart" />. </summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.NotCompressed">
      <summary>Compression is turned off. </summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.Normal">
      <summary>Compression is optimized for a balance between size and performance. </summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.Maximum">
      <summary>Compression is optimized for size. </summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.Fast">
      <summary>Compression is optimized for performance. </summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.SuperFast">
      <summary>Compression is optimized for high performance.</summary>
    </member>
    <member name="T:System.IO.Packaging.EncryptedPackageEnvelope">
      <summary>Represents an OLE compound file that contains an encrypted package.</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Close">
      <summary>Closes the encrypted package and the OLE compound file that holds it.</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> on the specified stream.</summary>
      <returns>The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />. </returns>
      <param name="envelopeStream">The stream on which to create the file.</param>
      <param name="publishLicense">The publish license that is embedded in the compound file.</param>
      <param name="cryptoProvider">An object that determines what operations the current user is allowed to perform on the encrypted content.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeStream" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="envelopeStream" /> does not provide read/write access.</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> and gives it the specified file name.</summary>
      <returns>The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />. </returns>
      <param name="envelopeFileName">The name of the OLE compound file.</param>
      <param name="publishLicense">The publish license that is embedded in the compound file.</param>
      <param name="cryptoProvider">An object that determines what operations the current user is allowed to perform on the encrypted content.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeFileName" /> is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> (on the specified stream) that uses the specified unencrypted package as its content.</summary>
      <returns>The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />. </returns>
      <param name="envelopeStream">The stream on which to create the file.</param>
      <param name="packageStream">The stream representing the existing unencrypted package.</param>
      <param name="publishLicense">The publish license that is embedded in the compound file.</param>
      <param name="cryptoProvider">An object that determines what operations the current user is allowed to perform on the encrypted content.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeStream" /> or <paramref name="packageStream" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="envelopeStream" /> does not provide read/write access.</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that uses the specified unencrypted package as its content, and gives it the specified file name.</summary>
      <returns>The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</returns>
      <param name="envelopeFileName">The name of the OLE compound file.</param>
      <param name="packageStream">The stream representing the existing unencrypted package.</param>
      <param name="publishLicense">The publish license that is embedded in the compound file.</param>
      <param name="cryptoProvider">An object that determines what operations the current user is allowed to perform on the encrypted content.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeFileName" /> or <paramref name="packageStream" /> is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />. </summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess">
      <summary>Gets a value that specifies whether the file was opened with access to read, write, or both.</summary>
      <returns>The <see cref="T:System.IO.FileAccess" /> value that was used to open the file. </returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Flush">
      <summary>Flush the stream for both the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> and its package content.</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.GetPackage">
      <summary>Gets the encrypted package inside the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</summary>
      <returns>The <see cref="T:System.IO.Packaging.Package" /> in the envelope. </returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.IO.Stream)">
      <summary>Gets a value specifying whether the specified stream is an OLE compound file with an encrypted package stream.</summary>
      <returns>true if the specified stream is an OLE compound file with an encrypted package stream; otherwise, false. </returns>
      <param name="stream">The stream that is tested.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.String)">
      <summary>Gets a value specifying whether the specified file is an OLE compound file with an encrypted package stream.</summary>
      <returns>true if the specified file is an OLE compound file with an encrypted package stream; otherwise, false. </returns>
      <param name="fileName">The file that is tested.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.IO.Stream)">
      <summary>Open the encrypted package in the specified stream.</summary>
      <returns>The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that is opened.</returns>
      <param name="envelopeStream">The stream containing the encrypted package.</param>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String)">
      <summary>Open the encrypted package in the specified file as read only and unshared.</summary>
      <returns>The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that is opened.</returns>
      <param name="envelopeFileName">The file containing the encrypted package.</param>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess)">
      <summary>Open the encrypted package in the specified file as unshared and with the specified access.</summary>
      <returns>The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that is opened.</returns>
      <param name="envelopeFileName">The file containing the encrypted package.</param>
      <param name="access">The type of access.</param>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess,System.IO.FileShare)">
      <summary>Open the encrypted package in the specified file and gives it the specified access and sharing.</summary>
      <returns>The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that is opened.</returns>
      <param name="envelopeFileName">The file containing the encrypted package.</param>
      <param name="access">The type of access.</param>
      <param name="sharing">The type of sharing.</param>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties">
      <summary>Gets the core package properties (such as Title and Subject) of the rights managed document.</summary>
      <returns>The <see cref="T:System.IO.Packaging.PackageProperties" /> for the package.</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation">
      <summary>Gets the rights management information stored in the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />; specifically, the <see cref="T:System.Security.RightsManagement.PublishLicense" /> and the <see cref="T:System.Security.RightsManagement.UseLicense" />s stored in the OLE compound file that embodies the rights-management protected package</summary>
      <returns>The <see cref="T:System.IO.Packaging.RightsManagementInformation" /> for the package.</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo">
      <summary>Gets an object that provides access to the compound file streams outside the encrypted package.</summary>
      <returns>A <see cref="T:System.IO.Packaging.StorageInfo" /> representing streams in the OLE compound file that are outside the encrypted package.</returns>
    </member>
    <member name="T:System.IO.Packaging.EncryptionOption">
      <summary>Specifies the encryption option for parts in a <see cref="T:System.IO.Packaging.Package" />.</summary>
    </member>
    <member name="F:System.IO.Packaging.EncryptionOption.None">
      <summary>No encryption.</summary>
    </member>
    <member name="F:System.IO.Packaging.EncryptionOption.RightsManagement">
      <summary>Encryption supported through rights management.</summary>
    </member>
    <member name="T:System.IO.Packaging.InvalidSignatureEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent" /> that is raised when <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" /> detects an invalid signature.</summary>
      <param name="sender">The invalid <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.IO.Packaging.Package">
      <summary>Represents a container that can store multiple data objects.</summary>
    </member>
    <member name="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.Package" /> class that uses a given <see cref="T:System.IO.FileAccess" />.</summary>
      <param name="openFileAccess">The file IO permissions for the package.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The value for <paramref name="openFileAccess" /> is not valid.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.Package" /> class that uses a given <see cref="T:System.IO.FileAccess" /> and streaming option.</summary>
      <param name="openFileAccess">The file IO permissions for the package.</param>
      <param name="streaming">true to open the package for streaming; otherwise, false.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The value for <paramref name="openFileAccess" /> is not valid.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Close">
      <summary>Saves and closes the package plus all underlying part streams.</summary>
    </member>
    <member name="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String)">
      <summary>Creates a new uncompressed part with a given URI and content type.</summary>
      <returns>The new created part.</returns>
      <param name="partUri">The uniform resource identifier (URI) of the new part.</param>
      <param name="contentType">The content type of the data stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> or <paramref name="contentType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> is not a valid <see cref="T:System.IO.Packaging.PackagePart" /> URI.</exception>
      <exception cref="T:System.InvalidOperationException">A part with the specified <paramref name="partUri" /> is already present in the package.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is read-only (a new part cannot be added).</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)">
      <summary>Creates a new part with a given URI, content type, and compression option.</summary>
      <returns>The new created part.</returns>
      <param name="partUri">The URI of the new part.</param>
      <param name="contentType">The content type of the data stream.</param>
      <param name="compressionOption">The compression option for the data stream, <see cref="F:System.IO.Packaging.CompressionOption.NotCompressed" /> or <see cref="F:System.IO.Packaging.CompressionOption.Normal" /> compression.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> or <paramref name="contentType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> is not a valid <see cref="T:System.IO.Packaging.PackagePart" /> uniform resource identifier (URI).</exception>
      <exception cref="T:System.InvalidOperationException">A part with the specified <paramref name="partUri" /> is already present in the package.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="compressionOption" /> value is not valid.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is read-only (a new part cannot be added).</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)">
      <summary>When overridden in a derived class, creates a new part in the package.</summary>
      <returns>The created part.</returns>
      <param name="partUri">The uniform resource identifier (URI) for the part being created.</param>
      <param name="contentType">The content type of the data stream.</param>
      <param name="compressionOption">The compression option for the data stream.</param>
    </member>
    <member name="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)">
      <summary>Creates a package-level relationship to a part with a given URI, target mode, and relationship type. </summary>
      <returns>The package-level relationship to the specified part.</returns>
      <param name="targetUri">The uniform resource identifier (URI) of the target part.</param>
      <param name="targetMode">Indicates if the target part is <see cref="F:System.IO.Packaging.TargetMode.Internal" /> or <see cref="F:System.IO.Packaging.TargetMode.External" /> to the package.</param>
      <param name="relationshipType">A URI that uniquely defines the role of the relationship.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetUri" /> or <paramref name="relationshipType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="targetUri" /> part is a <see cref="T:System.IO.Packaging.PackageRelationship" />, or <paramref name="targetMode" /> is <see cref="F:System.IO.Packaging.TargetMode.Internal" /> and <paramref name="targetUri" /> is an absolute URI.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value for <paramref name="targetMode" /> is not valid.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is read-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)">
      <summary>Creates a package-level relationship to a part with a given URI, target mode, relationship type, and identifier (ID).</summary>
      <returns>The package-level relationship to the specified part.</returns>
      <param name="targetUri">The uniform resource identifier (URI) of the target part.</param>
      <param name="targetMode">Indicates if the target part is <see cref="F:System.IO.Packaging.TargetMode.Internal" /> or <see cref="F:System.IO.Packaging.TargetMode.External" /> to the package.</param>
      <param name="relationshipType">A URI that uniquely defines the role of the relationship.</param>
      <param name="id">A unique XML identifier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetUri" /> or <paramref name="relationshipType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="targetUri" /> part is a <see cref="T:System.IO.Packaging.PackageRelationship" />, or <paramref name="targetMode" /> is <see cref="F:System.IO.Packaging.TargetMode.Internal" /> and <paramref name="targetUri" /> is an absolute URI.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value for <paramref name="targetMode" /> is not valid.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is read-only.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> is not a valid XML identifier; or a part with the specified <paramref name="id" /> already occurs in the package.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.DeletePart(System.Uri)">
      <summary>Deletes a part with a given URI from the package.</summary>
      <param name="partUri">The URI of the part to delete.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> is not a valid <see cref="T:System.IO.Packaging.PackagePart" /> URI.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is read-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)">
      <summary>When overridden in a derived class, deletes a part with a given URI. </summary>
      <param name="partUri">The <see cref="P:System.IO.Packaging.PackagePart.Uri" /> of the <see cref="T:System.IO.Packaging.PackagePart" /> to delete.</param>
    </member>
    <member name="M:System.IO.Packaging.Package.DeleteRelationship(System.String)">
      <summary>Deletes a package-level relationship.</summary>
      <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> of the <see cref="T:System.IO.Packaging.PackageRelationship" /> to delete.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is read-only.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> is not a valid XML identifier.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Dispose(System.Boolean)">
      <summary>Flushes and saves the content of all parts and relationships, closes the package, and releases all resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.IO.Packaging.Package.FileOpenAccess">
      <summary>Gets the file access setting for the package.</summary>
      <returns>One of the <see cref="T:System.IO.FileAccess" /> values: <see cref="F:System.IO.FileAccess.Read" />, <see cref="F:System.IO.FileAccess.Write" />, or <see cref="F:System.IO.FileAccess.ReadWrite" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Flush">
      <summary>Saves the contents of all parts and relationships that are contained in the package.</summary>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is read-only and cannot be modified.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.FlushCore">
      <summary>When overridden in a derived class, saves the content of all parts and relationships to the derived class store.</summary>
    </member>
    <member name="M:System.IO.Packaging.Package.GetPart(System.Uri)">
      <summary>Returns the part with a given URI.</summary>
      <returns>The part with the specified <paramref name="partUri" />.</returns>
      <param name="partUri">The uniform resource identifier (URI) of the part to return.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> is not a valid <see cref="T:System.IO.Packaging.PackagePart" /> uniform resource identifier (URI).</exception>
      <exception cref="T:System.InvalidOperationException">A part with the specified <paramref name="partUri" /> is not in the package.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetPartCore(System.Uri)">
      <summary>When overridden in a derived class, returns the part addressed by a given URI.</summary>
      <returns>The requested part; or null, if a part with the specified <paramref name="partUri" /> is not in the package.</returns>
      <param name="partUri">The uniform resource identifier (URI) of the part to retrieve.</param>
    </member>
    <member name="M:System.IO.Packaging.Package.GetParts">
      <summary>Returns a collection of all the parts in the package.</summary>
      <returns>A collection of all the <see cref="T:System.IO.Packaging.PackagePart" /> elements that are contained in the package.</returns>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetPartsCore">
      <summary>When overridden in a derived class, returns an array of all the parts in the package. </summary>
      <returns>An array of all the parts that are contained in the package.</returns>
    </member>
    <member name="M:System.IO.Packaging.Package.GetRelationship(System.String)">
      <summary>Returns the package-level relationship with a given identifier.</summary>
      <returns>The package-level relationship with the specified <paramref name="id" />.</returns>
      <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> of the relationship to return.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is null.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> is not a valid XML identifier.</exception>
      <exception cref="T:System.InvalidOperationException">A relationship with the specified <paramref name="id" /> is not in the package.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetRelationships">
      <summary>Returns a collection of all the package-level relationships.</summary>
      <returns>A collection of all the package-level relationships that are contained in the package.</returns>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)">
      <summary>Returns a collection of all the package-level relationships that match a given <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />. </summary>
      <returns>A collection of package-level relationships that match the specified <paramref name="relationshipType" />.</returns>
      <param name="relationshipType">The <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />  to match and return in the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relationshipType" /> is an empty string.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.IO.Stream)">
      <summary>Opens a package on a given IO stream.</summary>
      <returns>The opened package.</returns>
      <param name="stream">The IO stream on which to open the package.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
      <exception cref="T:System.IO.IOException">The package to open requires read or read/write permission and the specified <paramref name="stream" /> is write-only; or, the package to open requires write or read/write permission and the specified <paramref name="stream" /> is read-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode)">
      <summary>Opens a package with a given IO stream and file mode.</summary>
      <returns>The opened package.</returns>
      <param name="stream">The IO stream on which to open the package.</param>
      <param name="packageMode">The file mode in which to open the package.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="packageMode" /> value is not valid.</exception>
      <exception cref="T:System.IO.IOException">The package to open requires read or read/write permission and the specified <paramref name="stream" /> is write-only; or, the package to open requires write or read/write permission and the specified <paramref name="stream" /> is read-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)">
      <summary>Opens a package with a given IO stream, file mode, and file access setting.</summary>
      <returns>The opened package.</returns>
      <param name="stream">The IO stream on which to open the package.</param>
      <param name="packageMode">The file mode in which to open the package.</param>
      <param name="packageAccess">The file access in which to open the package.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value for <paramref name="packageMode" /> or <paramref name="packageAccess" /> is not valid.</exception>
      <exception cref="T:System.IO.IOException">The package to open requires read or read/write permission and the specified <paramref name="stream" /> is write-only; or the package to open requires write or read/write permission and the specified <paramref name="stream" /> is read-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String)">
      <summary>Opens a package at a given path and file name.</summary>
      <returns>The opened package.</returns>
      <param name="path">The path and file name of the package.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode)">
      <summary>Opens a package at a given path using a given file mode. </summary>
      <returns>The opened package.</returns>
      <param name="path">The path and file name of the package.</param>
      <param name="packageMode">The file mode in which to open the package.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Value for <paramref name="packageMode" /> is not valid.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>Opens a package at a given path using a given file mode and file access setting.</summary>
      <returns>The opened package.</returns>
      <param name="path">The path and file name of the package.</param>
      <param name="packageMode">The file mode in which to open the package.</param>
      <param name="packageAccess">The file access in which to open the package.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Value for <paramref name="packageMode" /> or <paramref name="packageAccess" /> is not valid.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>Opens a package at a given path using a given file mode, file access, and file share setting.</summary>
      <returns>The opened package.</returns>
      <param name="path">The path and file name of the package.</param>
      <param name="packageMode">The file mode in which to open the package.</param>
      <param name="packageAccess">The file access in which to open the package.</param>
      <param name="packageShare">The file sharing mode in which to open the package.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value for <paramref name="packageMode" />, <paramref name="packageAccess" />, or <paramref name="packageShare" /> is not valid.</exception>
    </member>
    <member name="P:System.IO.Packaging.Package.PackageProperties">
      <summary>Gets the core properties of the package.</summary>
      <returns>The core properties of the package.</returns>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.PartExists(System.Uri)">
      <summary>Indicates whether a part with a given URI is in the package.</summary>
      <returns>true if a part with the specified <paramref name="partUri" /> is in the package; otherwise, false.</returns>
      <param name="partUri">The <see cref="T:System.Uri" /> of the part to check for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> is not a valid <see cref="T:System.IO.Packaging.PackagePart" /> uniform resource identifier (URI).</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only (information cannot be read).</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.RelationshipExists(System.String)">
      <summary>Indicates whether a package-level relationship with a given ID is contained in the package.</summary>
      <returns>true if a package-level relationship with the specified <paramref name="id" /> is in the package; otherwise, false.</returns>
      <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> of the relationship to check for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is null.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> is not a valid XML identifier.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.System#IDisposable#Dispose">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended for application use.  Use the type-safe <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> method instead. </summary>
    </member>
    <member name="T:System.IO.Packaging.PackageDigitalSignature">
      <summary>Represents a digital signature that is applied to a set of package parts and relationships.</summary>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.CertificateEmbeddingOption">
      <summary>Gets the X.509 certificate embedding option. </summary>
      <returns>One of the <see cref="T:System.IO.Packaging.CertificateEmbeddingOption" /> values that specifies the option for the digital signature.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.GetPartTransformList(System.Uri)">
      <summary>Returns an ordered list of the <see cref="T:System.Security.Cryptography.Xml.Transform" /> operations applied to a given part. </summary>
      <returns>An ordered list of URI strings, such as <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl" /> or <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />, that represents the canonical XML transformations applied to the part with the given <paramref name="partName" /> URI.</returns>
      <param name="partName">The <see cref="T:System.Uri" /> of the <see cref="T:System.IO.Packaging.PackagePart" /> to return the transform list for.</param>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.Signature">
      <summary>Gets or sets the XML digital signature.</summary>
      <returns>The XML digital signature.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignaturePart">
      <summary>Gets the <see cref="T:System.IO.Packaging.PackagePart" /> that contains the signature. </summary>
      <returns>The package part that contains the signature.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignatureType">
      <summary>Gets the URI string that identifies the signature type. </summary>
      <returns>A URI string that identifies the signature type. The default is <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignatureValue">
      <summary>Gets the encrypted hash value of the <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />. </summary>
      <returns>A byte array that contains the encrypted hash value of the <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignedParts">
      <summary>Gets a collection of all the <see cref="T:System.IO.Packaging.PackagePart" /> objects signed with the signature. </summary>
      <returns>A collection that contains all the package parts signed with the signature.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignedRelationshipSelectors">
      <summary>Gets the list of the <see cref="T:System.IO.Packaging.PackageRelationship" /> parts that have been signed with the signature.</summary>
      <returns>The list of the <see cref="T:System.IO.Packaging.PackageRelationship" /> parts that have been signed with the signature.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.Signer">
      <summary>Gets the X.509 certificate of the signer. </summary>
      <returns>The digital certificate of the signer, or null if the certificate is not stored in the <see cref="T:System.IO.Packaging.Package" />.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SigningTime">
      <summary>Gets the date and time that the signature was created. </summary>
      <returns>The date and time that the signature was created.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.TimeFormat">
      <summary>Gets the format of the date and time returned by the <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> property. </summary>
      <returns>The format of the date and time returned by the <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> property.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.Verify">
      <summary>Verifies the digital signature against an X.509 certificate. </summary>
      <returns>
        <see cref="F:System.IO.Packaging.VerifyResult.Success" /> if the verification succeeded; otherwise, one of the <see cref="T:System.IO.Packaging.VerifyResult" /> values that identifies a problem. </returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.Verify(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Verifies the digital signature against a given X.509 certificate. </summary>
      <returns>
        <see cref="F:System.IO.Packaging.VerifyResult.Success" /> if the verification succeeded; otherwise, one of the <see cref="T:System.IO.Packaging.VerifyResult" /> values that identifies a problem.</returns>
      <param name="signingCertificate">The signer's X.509 certificate to verify the digital signature against.</param>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="T:System.IO.Packaging.PackageDigitalSignatureManager">
      <summary>Provides a utility class for the creation and verification of digital signatures in a <see cref="T:System.IO.Packaging.Package" />.    </summary>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.#ctor(System.IO.Packaging.Package)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackageDigitalSignatureManager" /> class for use with a specified <see cref="T:System.IO.Packaging.Package" />. </summary>
      <param name="package">The package associated with this signature manager.</param>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption">
      <summary>Gets or sets the X.509 certificate embedding option used by the <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})" /> method to digitally sign package parts. </summary>
      <returns>One of the <see cref="T:System.IO.Packaging.CertificateEmbeddingOption" /> values. </returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign">
      <summary>Countersigns all the signatures in the package with a user-selected X.509 certificate.</summary>
      <returns>The signature that was added as a countersign; or null if no certificate could be located or the user canceled the certificate selection dialog.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Countersigns all the signatures in the package with a specified X.509 certificate. </summary>
      <returns>The signature that was added as a countersign.</returns>
      <param name="certificate">The X.509 certificate to add as a countersign signature.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is null</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>Countersigns a list of signatures with a given X.509 certificate.</summary>
      <returns>The digital signature used to countersign each of the <paramref name="signatures" />.</returns>
      <param name="certificate">The X.509 certificate to countersign each of the specified <paramref name="signatures" />.</param>
      <param name="signatures">The list of signatures to countersign.</param>
      <exception cref="T:System.ArgumentNullException">Either the <paramref name="certificate" /> or <paramref name="signatures" /> parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The package contains no signed <see cref="T:System.IO.Packaging.PackagePart" /> objects.</exception>
      <exception cref="T:System.ArgumentException">The package contains no <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> parts.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm">
      <summary>Gets a URI string that identifies the default hash algorithm used to create and verify signatures. </summary>
      <returns>A URI string that identifies the default hash algorithm used to create and verify signatures.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.GetSignature(System.Uri)">
      <summary>Returns the digital signature for a given signature uniform resource identifier (URI). </summary>
      <returns>The digital signature for the specified <paramref name="signatureUri" />, or null if a signature for the given <paramref name="signatureUri" /> cannot be found.</returns>
      <param name="signatureUri">The URI of the digital signature to return.</param>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm">
      <summary>Gets or sets the URI identifier for the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> instance used to create and verify signatures. </summary>
      <returns>The <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> URI identifier for the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> instance used to create and verify signatures.</returns>
      <exception cref="T:System.ArgumentNullException">The string for the URI to set is null.</exception>
      <exception cref="T:System.ArgumentException">The string for the URI to set is empty.</exception>
    </member>
    <member name="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent">
      <summary>Occurs when <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" /> encounters an invalid signature. </summary>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.IsSigned">
      <summary>Gets a value that indicates whether the package contains any signatures. </summary>
      <returns>true if the package contains signatures; otherwise, false.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow">
      <summary>Gets or sets a handle to the parent window for displaying a certificate selection dialog box. </summary>
      <returns>The handle of the parent window to use to display the certificate selection dialog box.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.RemoveAllSignatures">
      <summary>Removes all digital signatures from the package. </summary>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature(System.Uri)">
      <summary>Removes the digital signature with a given signature uniform resource identifier (URI). </summary>
      <param name="signatureUri">The URI of the <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> to remove.</param>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>Prompts the user for an X.509 certificate, which is then used to digitally sign a specified list of package parts.</summary>
      <returns>The digital signature used to sign the list of <paramref name="parts" />.</returns>
      <param name="parts">The list of uniform resource identifiers (URIs) for the <see cref="T:System.IO.Packaging.PackagePart" /> elements to sign.</param>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Signs a list of package parts with a given X.509 certificate. </summary>
      <returns>The digital signature used to sign the given list of <paramref name="parts" />; or null if no certificate could be found or the user clicked "Cancel" in the certificate selection dialog box.</returns>
      <param name="parts">The list of uniform resource identifiers (URIs) for the <see cref="T:System.IO.Packaging.PackagePart" /> elements to sign.</param>
      <param name="certificate">The X.509 certificate to use to digitally sign each of the specified <paramref name="parts" />.</param>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector})">
      <summary>Signs a list of package parts and package relationships with a given X.509 certificate. </summary>
      <returns>The digital signature used to sign the elements specified in the <paramref name="parts" /> and <paramref name="relationshipSelectors" /> lists.</returns>
      <param name="parts">The list of uniform resource identifiers (URIs) for the <see cref="T:System.IO.Packaging.PackagePart" /> objects to sign.</param>
      <param name="certificate">The X.509 certificate to use to digitally sign each of the specified parts and relationships.</param>
      <param name="relationshipSelectors">The list of <see cref="T:System.IO.Packaging.PackageRelationship" /> objects to sign.</param>
      <exception cref="T:System.ArgumentException">Neither <paramref name="parts" /> nor <paramref name="relationshipSelectors" /> specify any objects to sign.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String)">
      <summary>Signs a list of package parts and package relationships with a given X.509 certificate and identifier (ID).</summary>
      <returns>The digital signature used to sign the elements specified in the <paramref name="parts" /> and <paramref name="relationshipSelectors" /> lists.</returns>
      <param name="parts">The list of uniform resource identifiers (URIs) for the <see cref="T:System.IO.Packaging.PackagePart" /> objects to sign.</param>
      <param name="certificate">The X.509 certificate to use to digitally sign each of the specified parts and relationships.</param>
      <param name="relationshipSelectors">The list of <see cref="T:System.IO.Packaging.PackageRelationship" /> objects to sign.</param>
      <param name="signatureId">An identification string to associate with the signature.</param>
      <exception cref="T:System.ArgumentException">Neither <paramref name="parts" /> nor <paramref name="relationshipSelectors" /> specify any elements to sign.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String,System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.DataObject},System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.Reference})">
      <summary>Signs a list of package parts, package relationships, or custom objects with a specified X.509 certificate and signature identifier (ID).</summary>
      <returns>The digital signature used to sign the elements specified in the <paramref name="parts" /> and <paramref name="relationshipSelectors" /> lists.</returns>
      <param name="parts">The list of uniform resource identifiers (URIs) for the <see cref="T:System.IO.Packaging.PackagePart" /> objects to sign.</param>
      <param name="certificate">The X.509 certificate to use to digitally sign each of the specified parts and relationships.</param>
      <param name="relationshipSelectors">The list of <see cref="T:System.IO.Packaging.PackageRelationship" /> objects to sign.</param>
      <param name="signatureId">An identification string to associate with the signature.</param>
      <param name="signatureObjects">A list of custom data objects to sign.</param>
      <param name="objectReferences">A list of references to custom objects to sign.</param>
      <exception cref="T:System.ArgumentException">Neither <paramref name="parts" />, <paramref name="relationshipSelectors" />, <paramref name="signatureObjects" />, nor <paramref name="objectReferences" /> specify any elements to sign.</exception>
      <exception cref="T:System.InvalidOperationException">A <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> of a part being signed references an empty, null, or undefined <see cref="P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping" />.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="signatureId" /> is not null and is not a valid XML schema ID (for example, begins with a leading numeric digit).</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin">
      <summary>Gets the uniform resource identifier (URI) of the signature origin part.</summary>
      <returns>The URI of the signature origin part.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType">
      <summary>Gets the type of default signature origin relationship.</summary>
      <returns>The type of default signature origin relationship.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.Signatures">
      <summary>Gets a collection of all the signatures contained in the package. </summary>
      <returns>A collection of all the <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> objects.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat">
      <summary>Gets or sets the date/time format used to create a signature <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />. </summary>
      <returns>The date/time format used to create a signature <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping">
      <summary>Gets a dictionary that contains each defined <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> and its associated XML <see cref="T:System.Security.Cryptography.Xml.Transform" />.<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" /> identifier. </summary>
      <returns>A dictionary that contains each defined <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> and its associated XML <see cref="T:System.Security.Cryptography.Xml.Transform" />.<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" /> identifier.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Verifies a given X.509 certificate. </summary>
      <returns>
        <see cref="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoError" /> (value 0) if the certificate verified successfully; otherwise, a bitwise enumeration of error flags.</returns>
      <param name="certificate">The X.509 certificate to verify.</param>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)">
      <summary>Verifies the signatures on all signed parts within the package. </summary>
      <returns>
        <see cref="F:System.IO.Packaging.VerifyResult.Success" /> (value 0) if all signatures are verified successfully; otherwise, an enumeration that identifies the error.</returns>
      <param name="exitOnFailure">true to exit on first failure; otherwise, false to continue and check all signatures.</param>
    </member>
    <member name="T:System.IO.Packaging.PackagePart">
      <summary>Provides a base class for parts stored in a <see cref="T:System.IO.Packaging.Package" />.  This class is abstract.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackagePart" /> class with a specified parent <see cref="P:System.IO.Packaging.PackagePart.Package" /> and part URI.</summary>
      <param name="package">The parent <see cref="T:System.IO.Packaging.Package" /> of the part.</param>
      <param name="partUri">The URI of the part, relative to the parent <see cref="T:System.IO.Packaging.Package" /> root.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="package" /> or <paramref name="partUri" /> is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackagePart" /> class with a specified parent <see cref="P:System.IO.Packaging.PackagePart.Package" />, part URI, and MIME content type.</summary>
      <param name="package">The parent <see cref="T:System.IO.Packaging.Package" /> of the part.</param>
      <param name="partUri">The URI of the part, relative to the parent <see cref="T:System.IO.Packaging.Package" /> root.</param>
      <param name="contentType">The MIME content type of the part data stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="package" /> or <paramref name="partUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> is not a valid <see cref="T:System.IO.Packaging.PackagePart" /> URI.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri,System.String,System.IO.Packaging.CompressionOption)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackagePart" /> class with a specified parent <see cref="P:System.IO.Packaging.PackagePart.Package" />, part URI, MIME content type, and <see cref="T:System.IO.Packaging.CompressionOption" />.</summary>
      <param name="package">The parent <see cref="T:System.IO.Packaging.Package" /> of the part.</param>
      <param name="partUri">The URI of the part, relative to the parent <see cref="T:System.IO.Packaging.Package" /> root.</param>
      <param name="contentType">The MIME content type of the part's data stream.</param>
      <param name="compressionOption">The compression option of the part data stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="package" /> or <paramref name="partUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> is not a valid <see cref="T:System.IO.Packaging.PackagePart" /> URI.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="compressionOption" /> value is not valid.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.CompressionOption">
      <summary>Gets the compression option of the part content stream.</summary>
      <returns>The compression option of the part content stream.</returns>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.ContentType">
      <summary>Gets the MIME type of the content stream.</summary>
      <returns>The MIME type of the content data stream for the part.</returns>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).-or-The string returned by the derived class <see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore" /> method is empty.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)">
      <summary>Creates a part-level relationship between this <see cref="T:System.IO.Packaging.PackagePart" /> to a specified target <see cref="T:System.IO.Packaging.PackagePart" /> or external resource.</summary>
      <returns>The part-level relationship between this <see cref="T:System.IO.Packaging.PackagePart" /> to the target <see cref="T:System.IO.Packaging.PackagePart" /> or external resource.</returns>
      <param name="targetUri">The URI of the target part.</param>
      <param name="targetMode">One of the enumeration values. For example, <see cref="F:System.IO.Packaging.TargetMode.Internal" /> if the target part is inside the <see cref="T:System.IO.Packaging.Package" />; or <see cref="F:System.IO.Packaging.TargetMode.External" /> if the target is a resource outside the <see cref="T:System.IO.Packaging.Package" />.</param>
      <param name="relationshipType">The role of the relationship.</param>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetUri" /> or <paramref name="relationshipType" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="targetMode" /> parameter is not a valid <see cref="T:System.IO.Packaging.TargetMode" /> enumeration value.</exception>
      <exception cref="T:System.ArgumentException">The part identified by the <paramref name="targetUri" /> is a relationship (the target of a relationship cannot be another relationship).-or-<paramref name="targetMode" /> is specified as <see cref="F:System.IO.Packaging.TargetMode.Internal" /> but <paramref name="targetUri" /> is an absolute external URI.</exception>
      <exception cref="T:System.IO.IOException">The package is read-only (a new relationship cannot be added).</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)">
      <summary>Creates a part-level relationship between this <see cref="T:System.IO.Packaging.PackagePart" /> to a specified target <see cref="T:System.IO.Packaging.PackagePart" /> or external resource.</summary>
      <returns>The part-level relationship between this <see cref="T:System.IO.Packaging.PackagePart" /> to the target <see cref="T:System.IO.Packaging.PackagePart" /> or external resource.</returns>
      <param name="targetUri">The URI of the target part.</param>
      <param name="targetMode">One of the enumeration values. For example, <see cref="F:System.IO.Packaging.TargetMode.Internal" /> if the target part is inside the <see cref="T:System.IO.Packaging.Package" />; or <see cref="F:System.IO.Packaging.TargetMode.External" /> if the target is a resource outside the <see cref="T:System.IO.Packaging.Package" />.</param>
      <param name="relationshipType">The role of the relationship.</param>
      <param name="id">A unique ID for the relationship.</param>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetUri" /> or <paramref name="relationshipType" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="targetMode" /> parameter is not a valid <see cref="T:System.IO.Packaging.TargetMode" /> enumeration value.</exception>
      <exception cref="T:System.ArgumentException">The part identified by the <paramref name="targetUri" /> is a relationship (the target of a relationship cannot be another relationship).-or-<paramref name="targetMode" /> is specified as <see cref="F:System.IO.Packaging.TargetMode.Internal" /> but <paramref name="targetUri" /> is an absolute external URI.</exception>
      <exception cref="T:System.IO.IOException">The package is read-only (a new relationship cannot be added).</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> is not a valid XML identifier.-or-A part with the specified <paramref name="id" /> already exists.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)">
      <summary>Deletes a specified part-level <see cref="T:System.IO.Packaging.PackageRelationship" />.</summary>
      <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> of the relationship to delete.</param>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is null.</exception>
      <exception cref="T:System.IO.IOException">The package is read-only (relationships cannot be deleted).</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> is not a valid XML identifier.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetContentTypeCore">
      <summary>When overridden in a derived class, returns the MIME type of the part content.</summary>
      <returns>The MIME type of the part content.</returns>
      <exception cref="T:System.NotSupportedException">The derived class does not provide an override implementation required for the <see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore" /> method.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)">
      <summary>Returns the relationship that has a specified <see cref="P:System.IO.Packaging.PackageRelationship.Id" />. </summary>
      <returns>The relationship that matches the specified <paramref name="id" />.</returns>
      <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> of the relationship to return.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is null.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> is not a valid XML identifier.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relationshipType" /> is an empty string.</exception>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).-or-A relationship with the specified <paramref name="id" /> does not exist in the package.</exception>
      <exception cref="T:System.IO.IOException">The package is write-only (relationship information cannot be read).</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetRelationships">
      <summary>Returns a collection of all the relationships that are owned by this part.</summary>
      <returns>A collection of all the relationships that are owned by the part.</returns>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only (relationship information cannot be read).</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)">
      <summary>Returns a collection of the relationships that match a specified <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />.</summary>
      <returns>A collection of the relationships that match the specified <paramref name="relationshipType" />.</returns>
      <param name="relationshipType">The <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" /> of the relationships to locate and return in the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relationshipType" /> is an empty string.</exception>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only (relationship information cannot be read).</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStream">
      <summary>Returns the part content data stream.</summary>
      <returns>The content data stream for the part.</returns>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The stream object returned by the <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> method of the derived subclass is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode)">
      <summary>Returns the content stream opened in a specified I/O <see cref="T:System.IO.FileMode" />.</summary>
      <returns>The content stream of the part.</returns>
      <param name="mode">The I/O mode in which to open the content stream.</param>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="mode" /> parameter is not a valid <see cref="T:System.IO.FileMode" /> enumeration value.</exception>
      <exception cref="T:System.IO.IOException">The <paramref name="mode" /> parameter is not compatible with the package and part stream.-or-The stream object returned by the <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> method of the derived subclass is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode,System.IO.FileAccess)">
      <summary>Returns the part content stream opened with a specified <see cref="T:System.IO.FileMode" /> and <see cref="T:System.IO.FileAccess" />.</summary>
      <returns>The content stream for the part.</returns>
      <param name="mode">The I/O mode in which to open the content stream.</param>
      <param name="access">The access permissions to use in opening the content stream.</param>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="mode" /> parameter is not a valid <see cref="T:System.IO.FileMode" /> enumeration value.-or-The <paramref name="access" /> parameter is not a valid <see cref="T:System.IO.FileAccess" /> enumeration value.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="mode" /> or <paramref name="access" /> is not compatible with the package and part stream.-or-The <paramref name="access" /> parameter is specified as <see cref="F:System.IO.FileAccess.Read" /> but the <paramref name="mode" /> parameter requires write access.  (<see cref="T:System.IO.FileMode" /> values of <see cref="F:System.IO.FileMode.Create" />, <see cref="F:System.IO.FileMode.CreateNew" />, <see cref="F:System.IO.FileMode.Truncate" />, and <see cref="F:System.IO.FileMode.Append" /> require <see cref="F:System.IO.FileAccess.Write" /> or <see cref="F:System.IO.FileAccess.ReadWrite" /> access.)-or-The stream object returned by the <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> method of the derived subclass is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)">
      <summary>When overridden in a derived class, returns the part content stream opened with a specified <see cref="T:System.IO.FileMode" /> and <see cref="T:System.IO.FileAccess" />.</summary>
      <returns>The content data stream of the part.</returns>
      <param name="mode">The I/O mode in which to open the content stream.</param>
      <param name="access">The access permissions to use in opening the content stream.</param>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.Package">
      <summary>Gets the parent <see cref="T:System.IO.Packaging.Package" /> of the part.</summary>
      <returns>The parent package of the part.</returns>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.RelationshipExists(System.String)">
      <summary>Returns a value that indicates whether this part owns a relationship with a specified <see cref="P:System.IO.Packaging.PackageRelationship.Id" />.</summary>
      <returns>true if this part owns a relationship with the specified <paramref name="id" />; otherwise, false.</returns>
      <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> of the relationship to check for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is null.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> is not a valid XML identifier.</exception>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only (relationship information cannot be read).</exception>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.Uri">
      <summary>Gets the URI of the part.</summary>
      <returns>The URI of the part relative to the package root.</returns>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
    </member>
    <member name="T:System.IO.Packaging.PackagePartCollection">
      <summary>Represents a collection of <see cref="T:System.IO.Packaging.PackagePart" /> objects.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackagePartCollection.GetEnumerator">
      <summary>Returns an enumerator for iterating through the parts in the collection. </summary>
      <returns>An enumerator for iterating through the <see cref="T:System.IO.Packaging.PackagePart" /> elements in the collection.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackagePartCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackagePartCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections." /><see cref="IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageProperties">
      <summary>Represents the core properties of a <see cref="T:System.IO.Packaging.Package" />.    </summary>
    </member>
    <member name="M:System.IO.Packaging.PackageProperties.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackageProperties" /> class. </summary>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Category">
      <summary>When overridden in a derived class, gets or sets the category of the <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>The category of the content that is contained in the <see cref="T:System.IO.Packaging.Package" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.ContentStatus">
      <summary>When overridden in a derived class, gets or sets a value that represents the status of the <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>The status of the <see cref="T:System.IO.Packaging.Package" /> content.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.ContentType">
      <summary>When overridden in a derived class, gets or sets a value that represents the type of content that is contained in the <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>The type of content that is contained in the <see cref="T:System.IO.Packaging.Package" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Created">
      <summary>When overridden in a derived class, gets or sets the date and time the <see cref="T:System.IO.Packaging.Package" /> was created.</summary>
      <returns>The date and time the <see cref="T:System.IO.Packaging.Package" /> was initially created.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Creator">
      <summary>When overridden in a derived class, gets or sets a value that identifies the individual or entity that created the <see cref="T:System.IO.Packaging.Package" /> and its content.</summary>
      <returns>The individual or entity that created the <see cref="T:System.IO.Packaging.Package" /> and its content.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Description">
      <summary>When overridden in a derived class, gets or sets a description of the content contained in the <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>A description of the content contained in the <see cref="T:System.IO.Packaging.Package" />.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageProperties.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IO.Packaging.PackageProperties" /> instance.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageProperties.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.Packaging.PackageProperties" /> instance and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Identifier">
      <summary>When overridden in a derived class, gets or sets a value that unambiguously identifies the <see cref="T:System.IO.Packaging.Package" /> and its content.</summary>
      <returns>A value that unambiguously identifies the <see cref="T:System.IO.Packaging.Package" /> and its content.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Keywords">
      <summary>When overridden in a derived class, gets or sets a value that define a delimited set of keywords to support searching and indexing the <see cref="T:System.IO.Packaging.Package" /> and its content.</summary>
      <returns>A delimited set of keywords to support searching and indexing the <see cref="T:System.IO.Packaging.Package" /> and content.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Language">
      <summary>When overridden in a derived class, gets or sets a value that identifies the language of the <see cref="T:System.IO.Packaging.Package" /> content.</summary>
      <returns>A value that identifies the <see cref="T:System.IO.Packaging.Package" /> content language.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.LastModifiedBy">
      <summary>When overridden in a derived class, gets or sets a value that identifies the user who last modified the <see cref="T:System.IO.Packaging.Package" /> content.</summary>
      <returns>The user who last modified the <see cref="T:System.IO.Packaging.Package" /> content.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.LastPrinted">
      <summary>When overridden in a derived class, gets or sets the date and time the <see cref="T:System.IO.Packaging.Package" /> content was last printed.</summary>
      <returns>The date and time the <see cref="T:System.IO.Packaging.Package" /> content was last printed.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Modified">
      <summary>When overridden in a derived class, gets or sets the date and time the <see cref="T:System.IO.Packaging.Package" /> was last changed.</summary>
      <returns>The date and time the <see cref="T:System.IO.Packaging.Package" /> was last changed.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Revision">
      <summary>When overridden in a derived class, gets or sets the revision number of the <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>The revision number of the <see cref="T:System.IO.Packaging.Package" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Subject">
      <summary>When overridden in a derived class, gets or sets the topic of the <see cref="T:System.IO.Packaging.Package" /> content.</summary>
      <returns>The topic of the <see cref="T:System.IO.Packaging.Package" /> content.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Title">
      <summary>When overridden in a derived class, gets or sets the name given to the <see cref="T:System.IO.Packaging.Package" /> and its content.</summary>
      <returns>The name given to the <see cref="T:System.IO.Packaging.Package" /> and its content.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Version">
      <summary>When overridden in a derived class, gets or sets the version number of the <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>The version number of the <see cref="T:System.IO.Packaging.Package" />.</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationship">
      <summary>Represents an association between a source <see cref="T:System.IO.Packaging.Package" /> or <see cref="T:System.IO.Packaging.PackagePart" />, and a target object which can be a <see cref="T:System.IO.Packaging.PackagePart" /> or external resource.</summary>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.Id">
      <summary>Gets a string that identifies the relationship.</summary>
      <returns>A string that identifies the relationship.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.Package">
      <summary>Gets the <see cref="T:System.IO.Packaging.Package" /> that contains this relationship.</summary>
      <returns>The package that contains this relationship.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.RelationshipType">
      <summary>Gets the qualified type name of the relationship. </summary>
      <returns>The qualified type name of the relationship.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.SourceUri">
      <summary>Gets the URI of the package or part that owns the relationship.</summary>
      <returns>The URI of the <see cref="T:System.IO.Packaging.Package" /> or <see cref="T:System.IO.Packaging.PackagePart" /> that owns the relationship.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.TargetMode">
      <summary>Gets a value that indicates whether the target of the relationship is <see cref="F:System.IO.Packaging.TargetMode.Internal" /> or <see cref="F:System.IO.Packaging.TargetMode.External" /> to the <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>An enumeration value that indicates whether <see cref="P:System.IO.Packaging.PackageRelationship.TargetUri" /> references a resource <see cref="F:System.IO.Packaging.TargetMode.Internal" /> or <see cref="F:System.IO.Packaging.TargetMode.External" /> to the <see cref="T:System.IO.Packaging.Package" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.TargetUri">
      <summary>Gets the URI of the target resource of the relationship.</summary>
      <returns>The URI of the target resource.</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationshipCollection">
      <summary>Represents a collection of <see cref="T:System.IO.Packaging.PackageRelationship" /> elements that are owned by a given <see cref="T:System.IO.Packaging.PackagePart" /> or the <see cref="T:System.IO.Packaging.Package" />. </summary>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipCollection.GetEnumerator">
      <summary>Returns an enumerator for iterating through the relationships in the collection. </summary>
      <returns>An enumerator for iterating through the <see cref="T:System.IO.Packaging.PackageRelationship" /> elements in the collection.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>This type or member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <returns>Do not use—use <see cref="M:System.IO.Packaging.PackageRelationshipCollection.GetEnumerator" />.</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationshipSelector">
      <summary>Defines <see cref="T:System.IO.Packaging.PackageRelationship" /> criteria to select part-level or package-level relationships.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackageRelationshipSelector" /> class.</summary>
      <param name="sourceUri">The uniform resource identifier (URI) of the <see cref="T:System.IO.Packaging.PackagePart" /> or the <see cref="T:System.IO.Packaging.Package" /> (<paramref name="SourceUri" />="/") that owns the relationship.</param>
      <param name="selectorType">The type of the <paramref name="selectionCriteria" />, either by relationship <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" /> or relationship <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" />.</param>
      <param name="selectionCriteria">The qualification string that is used to select the relationships based on the <paramref name="selectorType" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceUri" /> or <paramref name="selectionCriteria" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="selectorType" /> parameter is not valid.</exception>
      <exception cref="T:System.Xml.XmlException">The <paramref name="selectorType" /> parameter is <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" /> but <paramref name="selectionCriteria" /> is not a valid XML Schema Definition (XSD) identifier (ID).</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="selectionCriteria" /> is not valid for the specified <paramref name="selectorType" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="sourceUri" /> is not the <see cref="T:System.IO.Packaging.Package" /> root ("/") and is also not a valid <see cref="T:System.IO.Packaging.PackagePart" /> URI.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipSelector.Select(System.IO.Packaging.Package)">
      <summary>Returns a list of <see cref="T:System.IO.Packaging.PackageRelationship" /> objects that match the defined <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SourceUri" />, <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType" />, and <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectionCriteria" />.</summary>
      <returns>A list of relationships that match the selection parameters specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> constructor.</returns>
      <param name="package">The package from which to select the relationships based on the selection criteria.</param>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationshipSelector.SelectionCriteria">
      <summary>Gets the selection criteria specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> constructor.</summary>
      <returns>The selection criteria based on the <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType" /> of <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" /> or <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" /> specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> constructor.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType">
      <summary>Gets the <see cref="T:System.IO.Packaging.PackageRelationshipSelectorType" /> specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> constructor.</summary>
      <returns>The selector type of <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" /> or <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" /> specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> constructor.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationshipSelector.SourceUri">
      <summary>Gets the root package URI ("/") or part <see cref="P:System.IO.Packaging.PackagePart.Uri" /> specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> constructor as the owner of the relationship.</summary>
      <returns>The root package URI ("/") or part <see cref="P:System.IO.Packaging.PackagePart.Uri" /> specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> constructor as the owner of the relationship.</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationshipSelectorType">
      <summary>Specifies the type of selection criteria that is used to match and return <see cref="T:System.IO.Packaging.PackageRelationship" /> selections through a <see cref="T:System.IO.Packaging.PackageRelationshipSelector" />.     </summary>
    </member>
    <member name="F:System.IO.Packaging.PackageRelationshipSelectorType.Id">
      <summary>
        <see cref="T:System.IO.Packaging.PackageRelationship" /> selections are by <see cref="P:System.IO.Packaging.PackageRelationship.Id" />.</summary>
    </member>
    <member name="F:System.IO.Packaging.PackageRelationshipSelectorType.Type">
      <summary>
        <see cref="T:System.IO.Packaging.PackageRelationship" /> selections are by <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />.</summary>
    </member>
    <member name="T:System.IO.Packaging.PackUriHelper">
      <summary>Provides utility methods to compose and parse pack URI objects.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.ComparePackUri(System.Uri,System.Uri)">
      <summary>Returns a value that indicates whether two pack URIs are equivalent.</summary>
      <returns>A signed integer indicating the relationship between <paramref name="firstPackUri" /> and <paramref name="secondPackUri" />.ValueMeaningLess than 0<paramref name="firstPackUri" /> is less than <paramref name="secondPackUri" />.0<paramref name="firstPackUri" /> is equivalent to <paramref name="secondPackUri" />.Greater than 0<paramref name="firstPackUri" /> is greater than <paramref name="secondPackUri" />.</returns>
      <param name="firstPackUri">The first pack URI.</param>
      <param name="secondPackUri">The second pack URI.</param>
      <exception cref="T:System.ArgumentException">Either <paramref name="firstPackUri" /> or <paramref name="secondPackUri" /> is not an absolute URI.-or-Either <paramref name="firstPackUri" /> or <paramref name="secondPackUri" /> do not begin with a "pack://" scheme.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.ComparePartUri(System.Uri,System.Uri)">
      <summary>Returns a value that indicates whether two package part URIs are equivalent.</summary>
      <returns>A value that indicates the relationship between <paramref name="firstPartUri" /> and <paramref name="secondPartUri" />.ValueMeaningLess than 0<paramref name="firstPartUri" /> is less than <paramref name="secondPartUri" />.0<paramref name="firstPartUri" /> is equivalent to <paramref name="secondPartUri" />.Greater than 0<paramref name="firstPartUri" /> is greater than <paramref name="secondPartUri" />.</returns>
      <param name="firstPartUri">The URI of the first <see cref="T:System.IO.Packaging.PackagePart" />.</param>
      <param name="secondPartUri">The URI of the second <see cref="T:System.IO.Packaging.PackagePart" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="firstPartUri" /> or <paramref name="secondPartUri" /> is not a valid part URI syntax.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.Create(System.Uri)">
      <summary>Creates a new pack URI that points to a package. </summary>
      <returns>The pack URI for the <see cref="T:System.IO.Packaging.Package" /> referenced by the given <paramref name="packageUri" />.</returns>
      <param name="packageUri">The URI of the referenced <see cref="T:System.IO.Packaging.Package" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packageUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packageUri" /> is not an absolute URI.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.Create(System.Uri,System.Uri)">
      <summary>Creates a pack URI given a <see cref="T:System.IO.Packaging.Package" /> URI and the URI of a part in the package.</summary>
      <returns>The pack URI of the given <see cref="T:System.IO.Packaging.PackagePart" />.</returns>
      <param name="packageUri">The URI of the <see cref="T:System.IO.Packaging.Package" />.</param>
      <param name="partUri">The URI of the <see cref="T:System.IO.Packaging.PackagePart" /> in the package.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packageUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packageUri" /> is not an absolute URI.-or-<paramref name="partUri" /> is not a valid part URI syntax.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.Create(System.Uri,System.Uri,System.String)">
      <summary>Creates a pack URI given a <see cref="T:System.IO.Packaging.Package" /> URI, the URI of a part in the package, and a "#" fragment to append.</summary>
      <returns>The pack URI that identifies the specified package, package part, and fragment.</returns>
      <param name="packageUri">The URI of the <see cref="T:System.IO.Packaging.Package" />.</param>
      <param name="partUri">The URI of the <see cref="T:System.IO.Packaging.PackagePart" /> in the package.</param>
      <param name="fragment">A "#" reference identifying an element within the package part.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packageUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packageUri" /> is not an absolute URI.-or-<paramref name="partUri" /> is not a valid part URI syntax. -or-<paramref name="fragment" /> is empty or does begin with "#".</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)">
      <summary>Creates a formatted <see cref="T:System.IO.Packaging.PackagePart" /> URI. </summary>
      <returns>A formatted <see cref="T:System.IO.Packaging.PackagePart" /> URI.</returns>
      <param name="partUri">The URI of the <see cref="T:System.IO.Packaging.PackagePart" /> within the package.</param>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetNormalizedPartUri(System.Uri)">
      <summary>Returns the normalized form of a specified <see cref="T:System.IO.Packaging.PackagePart" /> URI. </summary>
      <returns>The normalized form of the given <paramref name="partUri" />.</returns>
      <param name="partUri">The <see cref="T:System.IO.Packaging.PackagePart" /> URI to normalize.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetPackageUri(System.Uri)">
      <summary>Returns the inner URI that points to the entire package of a specified pack URI. </summary>
      <returns>The URI of the <see cref="T:System.IO.Packaging.Package" /> from the specified <paramref name="packUri" />.</returns>
      <param name="packUri">The pack URI from which to return the URI of the <see cref="T:System.IO.Packaging.Package" />.</param>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)">
      <summary>Returns the URI of a <see cref="T:System.IO.Packaging.PackagePart" /> within a specified pack URI. </summary>
      <returns>The URI of the <see cref="T:System.IO.Packaging.PackagePart" /> in the given <paramref name="packUri" />, or null if <paramref name="packUri" /> points to a package instead of a <see cref="T:System.IO.Packaging.PackagePart" />. </returns>
      <param name="packUri">The pack URI from which to return the <see cref="T:System.IO.Packaging.PackagePart" /> URI.</param>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetRelationshipPartUri(System.Uri)">
      <summary>Returns the URI of the relationship part associated with a specified <see cref="T:System.IO.Packaging.PackagePart" />.</summary>
      <returns>The URI of the <see cref="T:System.IO.Packaging.PackageRelationship" /> part associated with the <see cref="T:System.IO.Packaging.PackagePart" /> identified by <paramref name="partUri" />.</returns>
      <param name="partUri">The <see cref="P:System.IO.Packaging.PackagePart.Uri" /> of the <see cref="T:System.IO.Packaging.PackagePart" /> to return the URI for the associated <see cref="T:System.IO.Packaging.PackageRelationship" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> syntax is not valid for a package part URI.-or-<paramref name="partUri" /> is an absolute URI.-or-<paramref name="partUri" /> references a relationship part.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetRelativeUri(System.Uri,System.Uri)">
      <summary>Returns the relative URI between two specified <see cref="T:System.IO.Packaging.PackagePart" /> URIs.</summary>
      <returns>The relative URI from <paramref name="sourcePartUri" /> to <paramref name="targetPartUri" />.</returns>
      <param name="sourcePartUri">The URI of the source part.</param>
      <param name="targetPartUri">The URI of the target part.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourcePartUri" /> or <paramref name="targetPartUri" /> is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetSourcePartUriFromRelationshipPartUri(System.Uri)">
      <summary>Returns the <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> from the <see cref="T:System.IO.Packaging.PackageRelationship" /> with a specified URI.</summary>
      <returns>The <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> of the <see cref="T:System.IO.Packaging.PackagePart" /> from the relationship with the specified <paramref name="relationshipPartUri" />.</returns>
      <param name="relationshipPartUri">The URI of the relationship part to return the <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> from.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipPartUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relationshipPartUri" /> is an absolute URI.-or-<paramref name="relationshipPartUri" /> syntax is not valid for a <see cref="T:System.IO.Packaging.PackagePart" />.-or-<paramref name="relationshipPartUri" /> does not reference a relationship part.-or-The <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> of the relationship part references another relationship part (not valid, see Remarks).</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.IsRelationshipPartUri(System.Uri)">
      <summary>Returns a value that indicates whether a specified URI is the URI of a <see cref="T:System.IO.Packaging.PackageRelationship" /> part.</summary>
      <returns>true if <paramref name="partUri" /> identifies a <see cref="T:System.IO.Packaging.PackageRelationship" /> part; otherwise, false.</returns>
      <param name="partUri">The URI to check for a <see cref="T:System.IO.Packaging.PackageRelationship" /> part.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> is an absolute URI.-or-<paramref name="partUri" /> is an invalid <see cref="T:System.IO.Packaging.PackagePart" /> syntax.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)">
      <summary>Returns a part URI given a source part URI and a URI with a relative path to a target part.</summary>
      <returns>The URI of the target part resolved between the specified <paramref name="SourcePartUri" /> and the <paramref name="targetUri" /> parameters.</returns>
      <param name="sourcePartUri">The URI of the source part, or "/" to designate the <see cref="T:System.IO.Packaging.Package" /> root.</param>
      <param name="targetUri">The relative URI to the target part.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourcePartUri" /> or <paramref name="targetUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourcePartUri" /> is not a valid part URI.-or-<paramref name="targetUri" /> is not a valid relative URI.</exception>
    </member>
    <member name="F:System.IO.Packaging.PackUriHelper.UriSchemePack">
      <summary>Defines the pack URI scheme name "pack".</summary>
      <returns>The pack URI scheme name string "pack".</returns>
    </member>
    <member name="T:System.IO.Packaging.RightsManagementInformation">
      <summary>Represents Digital Rights Management (DRM) information that is stored in an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</summary>
    </member>
    <member name="P:System.IO.Packaging.RightsManagementInformation.CryptoProvider">
      <summary>Gets or sets the <see cref="T:System.Security.RightsManagement.CryptoProvider" /> for accessing the package's encrypted rights management data stream.</summary>
      <returns>The <see cref="T:System.Security.RightsManagement.CryptoProvider" /> for accessing the rights management information.</returns>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.DeleteUseLicense(System.Security.RightsManagement.ContentUser)">
      <summary>Deletes the <see cref="T:System.Security.RightsManagement.UseLicense" /> for a specified user from the encrypted rights management data stream.</summary>
      <param name="userKey">The user of the <see cref="T:System.Security.RightsManagement.UseLicense" />   to be deleted.</param>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.GetEmbeddedUseLicenses">
      <summary>Returns a dictionary collection of user and <see cref="T:System.Security.RightsManagement.UseLicense" /> key/value pairs from the encrypted rights management data stream.</summary>
      <returns>A collection of user and <see cref="T:System.Security.RightsManagement.UseLicense" /> key/value pairs that are contained in the rights managed protected package.</returns>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.LoadPublishLicense">
      <summary>Returns the embedded <see cref="T:System.Security.RightsManagement.PublishLicense" /> from the encrypted rights management data stream.</summary>
      <returns>The embedded <see cref="T:System.Security.RightsManagement.PublishLicense" />; or null, if the package does not contain a <see cref="T:System.Security.RightsManagement.PublishLicense" />.</returns>
      <exception cref="T:System.IO.FileFormatException">The rights management information in this package cannot be read by the current version of this class.</exception>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.LoadUseLicense(System.Security.RightsManagement.ContentUser)">
      <summary>Returns a specified user's embedded <see cref="T:System.Security.RightsManagement.UseLicense" /> from the encrypted rights management data stream.</summary>
      <returns>The <see cref="T:System.Security.RightsManagement.UseLicense" /> for the specified user; or null, if the package does not contain a <see cref="T:System.Security.RightsManagement.UseLicense" /> that matches the given <paramref name="userKey" />.</returns>
      <param name="userKey">The user or user group to return the <see cref="T:System.Security.RightsManagement.UseLicense" /> for.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="userKey" /> parameter is null.</exception>
      <exception cref="T:System.IO.FileFormatException">The rights management information in this package cannot be read by the current version of this class.</exception>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.SavePublishLicense(System.Security.RightsManagement.PublishLicense)">
      <summary>Saves a given <see cref="T:System.Security.RightsManagement.PublishLicense" /> to the encrypted rights management data stream.</summary>
      <param name="publishLicense">The publish license to store and embed in the package.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="publishLicense" /> parameter is null.</exception>
      <exception cref="T:System.IO.FileFormatException">The rights management information in this package cannot be read by the current version of this class.</exception>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.SaveUseLicense(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.UseLicense)">
      <summary>Saves a given <see cref="T:System.Security.RightsManagement.UseLicense" /> for a specified user to the encrypted rights management data stream.</summary>
      <param name="userKey">The user of the <see cref="T:System.Security.RightsManagement.UseLicense" />.</param>
      <param name="useLicense">The use license to store and embed in the package.</param>
      <exception cref="T:System.ArgumentNullException">Either the <paramref name="userKey" /> or <paramref name="useLicense" /> parameter is null.</exception>
      <exception cref="T:System.IO.FileFormatException">The rights management information in this package cannot be read by the current version of this class.</exception>
    </member>
    <member name="T:System.IO.Packaging.SignatureVerificationEventArgs">
      <summary> Specifies the event args provided to the <see cref="T:System.IO.Packaging.InvalidSignatureEventHandler" />. </summary>
    </member>
    <member name="P:System.IO.Packaging.SignatureVerificationEventArgs.Signature">
      <summary> Gets the digital signature being verified. </summary>
      <returns>The digital signature being verified.</returns>
    </member>
    <member name="P:System.IO.Packaging.SignatureVerificationEventArgs.VerifyResult">
      <summary> Gets the signature verification error. </summary>
      <returns>The signature verification error.</returns>
    </member>
    <member name="T:System.IO.Packaging.StorageInfo">
      <summary>Provides access and information for manipulating data stores in a <see cref="T:System.IO.Packaging.Package" />.    </summary>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateStream(System.String)">
      <summary>Creates a new stream with a given name.</summary>
      <returns>The new stream with the specified <paramref name="name" />.</returns>
      <param name="name">The name for the new stream.</param>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateStream(System.String,System.IO.Packaging.CompressionOption,System.IO.Packaging.EncryptionOption)">
      <summary>Creates a new stream with a given name, <see cref="T:System.IO.Packaging.CompressionOption" />, and <see cref="T:System.IO.Packaging.EncryptionOption" />.</summary>
      <returns>The new stream with the specified <paramref name="name" />, <paramref name="compressionOption" />, and <paramref name="encryptionOption" />.</returns>
      <param name="name">The name for the new stream.</param>
      <param name="compressionOption">The compression option for the data stream.</param>
      <param name="encryptionOption">The encryption option for the data stream.</param>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateSubStorage(System.String)">
      <summary>Creates a new child <see cref="T:System.IO.Packaging.StorageInfo" /> with this <see cref="T:System.IO.Packaging.StorageInfo" /> as the parent.</summary>
      <returns>The new child data store.</returns>
      <param name="name">The name for the new child data store.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.DeleteStream(System.String)">
      <summary>Deletes the stream with a specified name. </summary>
      <param name="name">The <see cref="T:System.IO.Packaging.StreamInfo" /> name of the stream to delete.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.DeleteSubStorage(System.String)">
      <summary>Deletes a specified sub-store.</summary>
      <param name="name">The name of the sub-store to delete.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetStreamInfo(System.String)">
      <summary>Returns the <see cref="T:System.IO.Packaging.StreamInfo" /> instance with the given name.</summary>
      <returns>The stream with the specified <paramref name="name" />.</returns>
      <param name="name">The name of the <see cref="T:System.IO.Packaging.StreamInfo" /> instance to return.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetStreams">
      <summary>Returns an array of the <see cref="T:System.IO.Packaging.StreamInfo" /> instances that are currently contained in this store.</summary>
      <returns>An array of the <see cref="T:System.IO.Packaging.StreamInfo" /> objects, each pointing to an I/O steam defined within this store.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetSubStorageInfo(System.String)">
      <summary>Returns the child sub-store with a given name.</summary>
      <returns>The child sub-store with the specified <paramref name="name" />.</returns>
      <param name="name">The name of the sub-store to return.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetSubStorages">
      <summary>Returns an array of the child sub-stores that are currently contained in this store.</summary>
      <returns>An array of <see cref="T:System.IO.Packaging.StorageInfo" /> objects, each pointing to a sub-store defined within this store.</returns>
    </member>
    <member name="P:System.IO.Packaging.StorageInfo.Name">
      <summary>Gets the name of the store.</summary>
      <returns>The name of this store.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.StreamExists(System.String)">
      <summary>Returns a value that indicates whether a given stream exists.</summary>
      <returns>true if a stream with the specified <paramref name="name" /> exists; otherwise, false.</returns>
      <param name="name">The <see cref="T:System.IO.Packaging.StreamInfo" /> name to check for.</param>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.SubStorageExists(System.String)">
      <summary>Returns a value that indicates whether a given child sub-store exists.</summary>
      <returns>true if a child sub-store with the specified <paramref name="name" /> exists; otherwise, false.</returns>
      <param name="name">The child <see cref="T:System.IO.Packaging.StorageInfo" /> name to check for.</param>
    </member>
    <member name="T:System.IO.Packaging.StreamInfo">
      <summary>Provides access and information for manipulating I/O streams within a <see cref="T:System.IO.Packaging.Package" />.    </summary>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.CompressionOption">
      <summary>Gets the <see cref="T:System.IO.Packaging.CompressionOption" /> setting for the stream.</summary>
      <returns>The compression option setting for the package stream.</returns>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.EncryptionOption">
      <summary>Gets the <see cref="T:System.IO.Packaging.EncryptionOption" /> setting for the stream.</summary>
      <returns>The encryption option setting for the package stream.</returns>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream">
      <summary>Returns a stream opened in a default <see cref="T:System.IO.FileMode" /> and <see cref="T:System.IO.FileAccess" />.</summary>
      <returns>The I/O stream opened in a default <see cref="T:System.IO.Packaging.Package" /> root <see cref="T:System.IO.FileMode" /> and <see cref="T:System.IO.FileAccess" />..</returns>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream(System.IO.FileMode)">
      <summary>Returns an I/O stream opened in a specified <see cref="T:System.IO.FileMode" />.</summary>
      <returns>The stream opened in the specified file <paramref name="mode" />.</returns>
      <param name="mode">The file mode in which to open the stream.</param>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream(System.IO.FileMode,System.IO.FileAccess)">
      <summary>Returns an I/O stream opened in a specified <see cref="T:System.IO.FileMode" /> and with a given <see cref="T:System.IO.FileAccess" />.</summary>
      <returns>The I/O stream opened in the specified <see cref="T:System.IO.FileMode" /> and with a given <see cref="T:System.IO.FileAccess" />.</returns>
      <param name="mode">The file mode in which to open the stream.</param>
      <param name="access">The file access mode in which to read or write to the stream.</param>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.Name">
      <summary>Gets the name of the stream.</summary>
      <returns>The name of this stream.</returns>
    </member>
    <member name="T:System.IO.Packaging.TargetMode">
      <summary>Specifies whether the target of a <see cref="T:System.IO.Packaging.PackageRelationship" /> is inside or outside the <see cref="T:System.IO.Packaging.Package" />. </summary>
    </member>
    <member name="F:System.IO.Packaging.TargetMode.Internal">
      <summary>The relationship references a part that is inside the package. </summary>
    </member>
    <member name="F:System.IO.Packaging.TargetMode.External">
      <summary>The relationship references a resource that is external to the package. </summary>
    </member>
    <member name="T:System.IO.Packaging.VerifyResult">
      <summary>Specifies the result of a certificate or signature verification.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.Success">
      <summary>The verification was successful.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.InvalidSignature">
      <summary>The signature is not valid.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.CertificateRequired">
      <summary>The X.509 certificate is not available to verify the signature.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.InvalidCertificate">
      <summary>The X.509 certificate is not valid.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.ReferenceNotFound">
      <summary>A reference relationship to the signature was not found.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.NotSigned">
      <summary>The specified package or part has no signature.</summary>
    </member>
    <member name="T:System.IO.Packaging.ZipPackage">
      <summary>Implements a derived subclass of the abstract <see cref="T:System.IO.Packaging.Package" /> base class—the <see cref="T:System.IO.Packaging.ZipPackage" /> class uses a ZIP archive as the container store. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.IO.Packaging.ZipPackagePart">
      <summary>Represents a part that is stored in a <see cref="T:System.IO.Packaging.ZipPackage" />.</summary>
    </member>
    <member name="T:System.Security.Permissions.MediaPermission">
      <summary>The <see cref="T:System.Security.Permissions.MediaPermission" /> describes a set of security permissions that controls the ability for audio, image, and video media to work in a partial-trust Windows Presentation Foundation (WPF) application.</summary>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission" /> class.</summary>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionAudio)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission" /> class by specifying the audio permission level.</summary>
      <param name="permissionAudio">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionAudio" />.</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionAudio,System.Security.Permissions.MediaPermissionVideo,System.Security.Permissions.MediaPermissionImage)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission" /> class by specifying the audio, video, and image permission levels.</summary>
      <param name="permissionAudio">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionAudio" />.</param>
      <param name="permissionVideo">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionVideo" />.</param>
      <param name="permissionImage">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionImage" />.</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionImage)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission" /> class by specifying the image permission level.</summary>
      <param name="permissionImage">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionImage" />.</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionVideo)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission" /> class by specifying the video permission level.</summary>
      <param name="permissionVideo">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionVideo" />.</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission" /> class by specifying a permission state.</summary>
      <param name="state">An enumerated value of <see cref="T:System.Security.Permissions.PermissionState" />.</param>
    </member>
    <member name="P:System.Security.Permissions.MediaPermission.Audio">
      <summary>Gets the current value of the audio permission level.</summary>
      <returns>The audio permission level.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>A copy of the current permission.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="securityElement">The XML encoding to use to reconstruct the permission.</param>
    </member>
    <member name="P:System.Security.Permissions.MediaPermission.Image">
      <summary>Gets the current value of the image permission level.</summary>
      <returns>The image permission level.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <returns>The intersection of two permissions is a permission that describes the state that they both describe in common. Only a demand that passes both original permissions will be valid for the intersected permission.</returns>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns>true if the audio, image, and video permissions are all unrestricted; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns>An XML encoding of the permission, including any state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission. </param>
    </member>
    <member name="P:System.Security.Permissions.MediaPermission.Video">
      <summary>Gets the current value of the video permission level.</summary>
      <returns>The media permission level.</returns>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Security.Permissions.MediaPermission" /> to be applied to code using declarative security.</summary>
    </member>
    <member name="M:System.Security.Permissions.MediaPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of <see cref="T:System.Security.Permissions.MediaPermissionAttribute" />.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" /> values.</param>
    </member>
    <member name="P:System.Security.Permissions.MediaPermissionAttribute.Audio">
      <summary>Gets or sets the audio permission level for the <see cref="T:System.Security.Permissions.MediaPermissionAttribute" />.</summary>
      <returns>The state of the <see cref="T:System.Security.Permissions.MediaPermissionAudio" />.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new <see cref="T:System.Security.Permissions.MediaPermission" />.</summary>
      <returns>A <see cref="T:System.Security.Permissions.MediaPermission" /> that corresponds to this attribute.</returns>
    </member>
    <member name="P:System.Security.Permissions.MediaPermissionAttribute.Image">
      <summary>Gets or sets the image permission level for the <see cref="T:System.Security.Permissions.MediaPermissionAttribute" />.</summary>
      <returns>The state of the <see cref="T:System.Security.Permissions.MediaPermissionImage" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.MediaPermissionAttribute.Video">
      <summary>Gets or sets the video permission level for the <see cref="T:System.Security.Permissions.MediaPermissionAttribute" />.</summary>
      <returns>The state of the <see cref="T:System.Security.Permissions.MediaPermissionVideo" />.</returns>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionAudio">
      <summary>Specifies the permission level for audio.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.NoAudio">
      <summary>Permission that denies all audio playback.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.SiteOfOriginAudio">
      <summary>Permission that only allows audio playback of files that are located at the application's site of origin.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.SafeAudio">
      <summary>Permission that allows safe, limited audio playback, which includes denying stream access to the image file.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.AllAudio">
      <summary>Permission that allows unrestricted audio playback.</summary>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionImage">
      <summary>Specifies the permission level for images.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.NoImage">
      <summary>Permission that denies all images to be displayed.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.SiteOfOriginImage">
      <summary>Permission that only allows display of images that are located at the application's site of origin.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.SafeImage">
      <summary>Permission that allows safe, limited image display, which includes denying stream access to the image file.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.AllImage">
      <summary>Permission that allows unrestricted image display.</summary>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionVideo">
      <summary>Specifies the permission level for video.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.NoVideo">
      <summary>Permission that denies all video playback.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.SiteOfOriginVideo">
      <summary>Permission that only allows video playback of files that are located at the application's site of origin.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.SafeVideo">
      <summary>Permission that allows safe, limited video playback, which includes denying stream access to the image file.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.AllVideo">
      <summary>Permission that allows unrestricted video playback.</summary>
    </member>
    <member name="T:System.Security.Permissions.WebBrowserPermission">
      <summary>The <see cref="T:System.Security.Permissions.WebBrowserPermission" /> object controls the ability to create the WebBrowser control.</summary>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.WebBrowserPermission" /> class.</summary>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.WebBrowserPermission" /> class by specifying a permission state.</summary>
      <param name="state">An enumerated value of <see cref="T:System.Security.Permissions.PermissionState" />.</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.#ctor(System.Security.Permissions.WebBrowserPermissionLevel)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.WebBrowserPermission" /> class by specifying the Web browser permission level.</summary>
      <param name="webBrowserPermissionLevel">An enumerated value of <see cref="T:System.Security.Permissions.WebBrowserPermissionLevel" />.</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>A copy of the current permission.</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="securityElement">The XML encoding to use to reconstruct the permission.</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <returns>The intersection of two permissions is a permission that describes the state that they both describe in common. Only a demand that passes both original permissions will be valid for the intersected permission.</returns>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns>true if the <see cref="P:System.Security.Permissions.WebBrowserPermission.Level" /> property is set to <see cref="F:System.Security.Permissions.WebBrowserPermissionLevel.Unrestricted" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.WebBrowserPermission.Level">
      <summary>Gets or sets the current value of the Web browser permission level.</summary>
      <returns>The current value of the Web browser permission level.</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns>An XML encoding of the permission, including any state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
    </member>
    <member name="T:System.Security.Permissions.WebBrowserPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Security.Permissions.WebBrowserPermission" /> to be applied to code using declarative security.</summary>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.WebBrowserPermissionAttribute" /> class with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" /> values.</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new instance of the <see cref="T:System.Security.Permissions.WebBrowserPermission" /> class.</summary>
      <returns>A <see cref="T:System.Security.Permissions.WebBrowserPermission" /> corresponding to the security declaration.</returns>
    </member>
    <member name="P:System.Security.Permissions.WebBrowserPermissionAttribute.Level">
      <summary>Gets or sets the current Web browser permission level for the <see cref="T:System.Security.Permissions.WebBrowserPermissionAttribute" />.</summary>
      <returns>The state of the current Web browser permission level.</returns>
    </member>
    <member name="T:System.Security.Permissions.WebBrowserPermissionLevel">
      <summary>Specifies the permission level for a Web browser.</summary>
    </member>
    <member name="F:System.Security.Permissions.WebBrowserPermissionLevel.None">
      <summary>A Web browser that cannot navigate frames to HTML.</summary>
    </member>
    <member name="F:System.Security.Permissions.WebBrowserPermissionLevel.Safe">
      <summary>A Web browser that can safely navigate frames to HTML but with several restrictions.</summary>
    </member>
    <member name="F:System.Security.Permissions.WebBrowserPermissionLevel.Unrestricted">
      <summary>A Web browser that can navigate without restrictions.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.AuthenticationType">
      <summary>Specifies the method of rights management authentication.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Windows">
      <summary>
            Windows authentication in a corporate domain environment.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Passport">
      <summary>
            Windows Live ID authentication.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.WindowsPassport">
      <summary>Either Windows authentication or Windows Live ID authentication.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Internal">
      <summary>Implicit authentication to any requesting user.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.ContentGrant">
      <summary>Represents a right granted to a user to access information in a rights managed document.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.ContentGrant" /> class that grants a specified <see cref="T:System.Security.RightsManagement.ContentUser" /> a specified <see cref="T:System.Security.RightsManagement.ContentRight" />.</summary>
      <param name="user">The user the access right is granted to.</param>
      <param name="right">The access right that is granted.</param>
    </member>
    <member name="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight,System.DateTime,System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.ContentGrant" /> class that grants a specified <see cref="T:System.Security.RightsManagement.ContentUser" /> a specified <see cref="T:System.Security.RightsManagement.ContentRight" /> for a specified <see cref="T:System.DateTime" /> duration.</summary>
      <param name="user">The user the access right is granted to.</param>
      <param name="right">The access right that is granted.</param>
      <param name="validFrom">The starting date and time that the right begins.</param>
      <param name="validUntil">The ending date and time that the right expires.</param>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.Right">
      <summary>Gets the <see cref="T:System.Security.RightsManagement.ContentRight" /> that is granted.</summary>
      <returns>The access right that is granted to the <see cref="P:System.Security.RightsManagement.ContentGrant.User" />, as specified to the <see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)" /> constructor.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.User">
      <summary>Gets the user who is granted the access <see cref="P:System.Security.RightsManagement.ContentGrant.Right" />.</summary>
      <returns>The user that the access <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> is granted to, as specified to the <see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)" /> constructor.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.ValidFrom">
      <summary>Gets the starting date and time that the granted <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> begins.</summary>
      <returns>The start date and time that the granted <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> begins, or <see cref="T:System.DateTime" />.<see cref="F:System.DateTime.MinValue" /> if there is there is no starting limitation.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.ValidUntil">
      <summary>Gets the ending date and time that the granted <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> expires.</summary>
      <returns>The end date and time that the granted <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> expires, or <see cref="T:System.DateTime" />.<see cref="F:System.DateTime.MaxValue" /> if there is no ending limitation.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.ContentRight">
      <summary>Specifies rights that can be granted to users for accessing content in a rights managed document.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.View">
      <summary>The user can view the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Edit">
      <summary>The user can edit and encrypt the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Print">
      <summary>The user can print the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Extract">
      <summary>The user can extract (copy and paste) the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ObjectModel">
      <summary>The user can control programmed access to the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Owner">
      <summary>The user is the content owner.  The owner can edit and encrypt the protected content, and decrypt the signed <see cref="T:System.Security.RightsManagement.PublishLicense" />.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ViewRightsData">
      <summary>The user can decrypt and view the rights specified in the signed <see cref="T:System.Security.RightsManagement.PublishLicense" />.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Forward">
      <summary>The user can forward the protected content to another user.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Reply">
      <summary>The user can reply to the sender of the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ReplyAll">
      <summary>The user can "reply all" to recipients of the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Sign">
      <summary>The user can digitally sign the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.DocumentEdit">
      <summary>The user can edit the document that contains the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Export">
      <summary>The user can export the protected content.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.ContentUser">
      <summary>Represents a user or user-group for granting access to rights managed content.     </summary>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.ContentUser" /> class.</summary>
      <param name="name">The user or group name.</param>
      <param name="authenticationType">The method for authentication.</param>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.AnyoneUser">
      <summary>Gets an instance of the "Anyone" <see cref="T:System.Security.RightsManagement.ContentUser" /> persona.</summary>
      <returns>An instance of the "Anyone" <see cref="T:System.Security.RightsManagement.ContentUser" /> persona.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.AuthenticationType">
      <summary>Gets the <see cref="T:System.Security.RightsManagement.AuthenticationType" /> specified to the <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> constructor.</summary>
      <returns>The <see cref="T:System.Security.RightsManagement.AuthenticationType" /> specified to the <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> constructor.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.Equals(System.Object)">
      <summary>Returns a value that indicates whether this <see cref="T:System.Security.RightsManagement.ContentUser" /> is equivalent to another given instance.</summary>
      <returns>true if <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> and <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" /> are the same for both this user and the given user; otherwise, false.</returns>
      <param name="obj">The user instance to compare for equality.</param>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.GetHashCode">
      <summary>Returns a computed hash code based on the user <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> and <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" />.</summary>
      <returns>A hash code computed from the user <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> and <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" />.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.IsAuthenticated">
      <summary>Returns a value that indicates whether the user is currently authenticated.</summary>
      <returns>true if the user is currently authenticated; otherwise, false.  The default is false until authenticated.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.Name">
      <summary>Gets the user or group name specified to the <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> constructor.</summary>
      <returns>The user or group name specified to the <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> constructor.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.OwnerUser">
      <summary>Gets an instance of the "Owner" <see cref="T:System.Security.RightsManagement.ContentUser" /> persona.</summary>
      <returns>An instance of the "Owner" <see cref="T:System.Security.RightsManagement.ContentUser" /> persona.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.CryptoProvider">
      <summary>Provides digital rights management services for encrypting and decrypting protected content.     </summary>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.BlockSize">
      <summary>Gets the cipher block size, in bytes. </summary>
      <returns>The cipher block size, in bytes.  The default block size for Advanced Encryption Standard (AES) is 8.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.BoundGrants">
      <summary>Gets a collection listing the rights that passed verification and that are granted to the user.</summary>
      <returns>A collection enumerating the rights that passed verification and that are granted to the user.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanDecrypt">
      <summary>Gets a value that indicates whether the user has rights to decrypt. </summary>
      <returns>true if the <see cref="T:System.Security.RightsManagement.UseLicense" /> grants the user rights to decrypt; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanEncrypt">
      <summary>Gets a value that indicates whether the user has rights to encrypt. </summary>
      <returns>true if the <see cref="T:System.Security.RightsManagement.UseLicense" /> grants the user rights to encrypt; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks">
      <summary>Gets a value that indicates whether <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> and <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /> can accept buffers that are different block sizes in length.</summary>
      <returns>true if the buffer passed to <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> can be a different length from the buffer passed to <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" />; otherwise, false if the buffers passed to <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> and <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /> must be the exact same length.  For Advanced Encryption Standard (AES) the default is true.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])">
      <summary>Decrypts cipher text to clear text. </summary>
      <returns>The decrypted clear text of <paramref name="cryptoText" />.</returns>
      <param name="cryptoText">The cipher text to decrypt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cipherText" /> is null.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">Decryption right not granted.</exception>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Security.RightsManagement.CryptoProvider" />. </summary>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Security.RightsManagement.CryptoProvider" /> and optionally releases the managed resources.  </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])">
      <summary>Encrypts clear text to cipher text. </summary>
      <returns>Encrypted cipher text of the given <paramref name="clearText" />.</returns>
      <param name="clearText">The clear text content to encrypt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clearText" /> is null.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">Encryption is not permitted.</exception>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Finalize">
      <summary>Frees resources and performs internal cleanup before the instance is reclaimed by garbage collection.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.LocalizedNameDescriptionPair">
      <summary>Represents an immutable (read-only) pair of "Name" and "Description" strings.    </summary>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" /> class.</summary>
      <param name="name">The value for the locale <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> property.</param>
      <param name="description">The value for the locale <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> property.</param>
      <exception cref="T:System.ArgumentNullException">Either the <paramref name="name" /> parameter or <paramref name="description" /> parameter is null.</exception>
    </member>
    <member name="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description">
      <summary>Gets the locale description.</summary>
      <returns>The locale description.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.Equals(System.Object)">
      <summary>Indicates whether the <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> and <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> properties of a given object match those of this <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" />.</summary>
      <returns>true if the <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> and <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> properties of the given object match those of this instance; otherwise, false.</returns>
      <param name="obj">The object to compare the <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> and <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> properties of.</param>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.GetHashCode">
      <summary>Gets a computed hash code based on the <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> and <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> properties.</summary>
      <returns>A computed hash code based on the <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> and <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> properties of this <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" />.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name">
      <summary>Gets the locale name.</summary>
      <returns>The locale name.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.PublishLicense">
      <summary>Represents a signed rights managed publish license.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.PublishLicense" /> class from a specified serialized and signed <see cref="T:System.Security.RightsManagement.PublishLicense" />.</summary>
      <param name="signedPublishLicense">A signed and serialized publish license.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="signedPublishLicense" /> is null.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">The license is invalid.</exception>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.AcquireUseLicense(System.Security.RightsManagement.SecureEnvironment)">
      <summary>Attempts to acquire a <see cref="T:System.Security.RightsManagement.UseLicense" /> for a user or user group in a specified <see cref="T:System.Security.RightsManagement.SecureEnvironment" />.</summary>
      <returns>The <see cref="T:System.Security.RightsManagement.UseLicense" /> for a user or user group in the specified <paramref name="secureEnvironment" />.</returns>
      <param name="secureEnvironment">The secure environment for license activation and binding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="secureEnvironment" /> is null.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">The authentication failed.</exception>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(System.Security.RightsManagement.SecureEnvironment)">
      <summary>Attempts to acquire a <see cref="T:System.Security.RightsManagement.UseLicense" /> for a user or user group in a specified <see cref="T:System.Security.RightsManagement.SecureEnvironment" />.</summary>
      <returns>The <see cref="T:System.Security.RightsManagement.UseLicense" /> for a user or user group in the specified <paramref name="secureEnvironment" />.</returns>
      <param name="secureEnvironment">The secure environment for license activation and binding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="secureEnvironment" /> is null.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">The authentication failed.</exception>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ContentId">
      <summary>Gets the publisher-created content identifier. </summary>
      <returns>The publisher-created content identifier.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(System.Security.RightsManagement.CryptoProvider)">
      <summary>Returns a decrypted <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> version of this signed <see cref="T:System.Security.RightsManagement.PublishLicense" />.</summary>
      <returns>A decrypted, unsigned version of this license.</returns>
      <param name="cryptoProvider">The rights management service to use for decrypting the license.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cryptoProvider" /> is null.</exception>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ReferralInfoName">
      <summary>Gets the contact name for the author or publisher of the content.</summary>
      <returns>The contact name for the author or publisher of the content.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ReferralInfoUri">
      <summary>Gets the contact URI for the author or publisher of the content.</summary>
      <returns>The contact uniform resource identifier (URI) for the author or publisher of the content.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.ToString">
      <summary>Returns the serialized XrML string that was used to create this license.</summary>
      <returns>The serialized Extensible Rights Markup Language (XrML) string that was used to create this license.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl">
      <summary>Gets the URI to use for acquiring a <see cref="T:System.Security.RightsManagement.UseLicense" />.</summary>
      <returns>The URI to use for acquiring a <see cref="T:System.Security.RightsManagement.UseLicense" />.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.RightsManagementException">
      <summary>Represents an error condition when a rights management operation cannot complete successfully.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" /> class.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" /> class and sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store with information about the exception.</summary>
      <param name="info">The object that holds the serialized data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" /> class with a given <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />.</summary>
      <param name="failureCode">The failure code for the error.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" /> class with a given <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> and <see cref="P:System.Exception.InnerException" />.</summary>
      <param name="failureCode">The failure code for the error.</param>
      <param name="innerException">The exception instance that caused the error.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" /> class with a given <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> and <see cref="P:System.Exception.Message" />.</summary>
      <param name="failureCode">The failure code for the error.</param>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" /> class with a given <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />, <see cref="P:System.Exception.Message" /> and <see cref="P:System.Exception.InnerException" />.</summary>
      <param name="failureCode">The failure code for the error.</param>
      <param name="message">A message that describes the error.</param>
      <param name="innerException">The exception instance that caused the error.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" /> class with a given message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" /> class with a given <see cref="P:System.Exception.Message" /> and <see cref="P:System.Exception.InnerException" />.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="innerException">The exception instance that caused this exception.</param>
    </member>
    <member name="P:System.Security.RightsManagement.RightsManagementException.FailureCode">
      <summary>Gets the <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> for the error.</summary>
      <returns>The failure code for the error.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store with the parameter name and information about the exception.</summary>
      <param name="info">The object that holds the serialized data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null.</exception>
    </member>
    <member name="T:System.Security.RightsManagement.RightsManagementFailureCode">
      <summary>Specifies error conditions that can occur when performing a rights management operation. </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.Success">
      <summary>Operation has competed successfully.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLicense">
      <summary>The license structure in one of the certificates is invalid. </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InfoNotInLicense">
      <summary>When creating a bound license, an issuance license, not an end-use license, was specified.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLicenseSignature">
      <summary>Rights management signed digital certificate cannot be validated. (The signed certificate may have been tampered.)</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EncryptionNotPermitted">
      <summary>Encryption is not permitted. </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RightNotGranted">
      <summary>The current user does not have rights to access the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidVersion">
      <summary>The rights management version is incorrect.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidEncodingType">
      <summary>The specified encoding type is invalid. </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidNumericalValue">
      <summary>The numeric value specified is invalid.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidAlgorithmType">
      <summary>The algorithm type specified is invalid.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnvironmentNotLoaded">
      <summary>The <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> cannot load.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnvironmentCannotLoad">
      <summary>The <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> cannot load.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.TooManyLoadedEnvironments">
      <summary>Too many <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> instance have been created.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.IncompatibleObjects">
      <summary>An object type passed is incompatible with this operation.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LibraryFail">
      <summary>A library operation failed.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnablingPrincipalFailure">
      <summary>The specified principal cannot be enabled</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InfoNotPresent">
      <summary>Some information is missing.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BadGetInfoQuery">
      <summary>An invalid constant was passed.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.KeyTypeUnsupported">
      <summary>The key type specified in a key/value pair is not supported.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.CryptoOperationUnsupported">
      <summary>A cryptographic operation that was requested is not supported. For example, passing an RMS encrypting object for decrypting purposes.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ClockRollbackDetected">
      <summary>Clock rollback has been detected.  Protected content cannot be accessed.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.QueryReportsNoResults">
      <summary>No instances of the requested attribute exist. </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.UnexpectedException">
      <summary>An unspecified error occurred.  Also thrown when an application runs in debug mode. </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindValidityTimeViolated">
      <summary>The defined time period for the protected content has expired; access is no longer permitted.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BrokenCertChain">
      <summary>The rights management certificate chain is broken.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindPolicyViolation">
      <summary>The current user does not have rights to access the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ManifestPolicyViolation">
      <summary>An operation is in violation of the rights management manifest policy.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedLicense">
      <summary>The current user does not have rights to access the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedIssuer">
      <summary>The current user does not have rights to access the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedPrincipal">
      <summary>The current user does not have rights to access the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedResource">
      <summary>The current user does not have rights to access the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedModule">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindContentNotInEndUseLicense">
      <summary>The specified resource is not contained in any WORK node of the license.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindAccessPrincipalNotEnabling">
      <summary>The access condition is not matched to the enabling principal that is handed into the bind.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindAccessUnsatisfied">
      <summary>The current user does not satisfy the conditions defined in the End Use License (EUL).</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindIndicatedPrincipalMissing">
      <summary>The enabling principal does not match the issued principal of the End Use License (EUL).</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindMachineNotFoundInGroupIdentity">
      <summary>The current machine is not defined within the rights managed group identity.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LibraryUnsupportedPlugIn">
      <summary>The specified library plug-in is not supported.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevocationListStale">
      <summary>The license requires that a new revocation list must be acquired.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindNoApplicableRevocationList">
      <summary>The current user does not have rights to access the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidHandle">
      <summary>Either the environment or the enabling principal handle is invalid. </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindIntervalTimeViolated">
      <summary>The defined time period for the protected content has expired; access is no longer permitted.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindNoSatisfiedRightsGroup">
      <summary>The specified rights group is not contained in the End Use License (EUL).</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindSpecifiedWorkMissing">
      <summary>The End Use License (EUL) contains no WORK node.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoMoreData">
      <summary>No license or certificate exists at the specified index. </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LicenseAcquisitionFailed">
      <summary>An End Use License (EUL) could not be acquired from the rights management server.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.IdMismatch">
      <summary>The content ID from the license does not match the content ID the license storage session</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.TooManyCertificates">
      <summary>The number of certificates has exceeded the maximum number allowed.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoDistributionPointUrlFound">
      <summary>The protected content is corrupted.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AlreadyInProgress">
      <summary>The requested operation is already in progress.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.GroupIdentityNotSet">
      <summary>A user name was not specified for the client session</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RecordNotFound">
      <summary>The specified license was not found. </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoConnect">
      <summary>Rights management cannot connect to the URI specified for the license server.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoLicense">
      <summary>A required license is not available.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NeedsMachineActivation">
      <summary>The computer must be activated before the user can be activated. </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NeedsGroupIdentityActivation">
      <summary>The user is not activated, or no Rights Account Certificate (RAC) was submitted and none was found in the license store to match the license associated with this session.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ActivationFailed">
      <summary>License activation failed; rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.Aborted">
      <summary>Asynchronous operation canceled, or a non-recoverable error has occurred.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OutOfQuota">
      <summary>The license server's maximum quota of End Use Licenses (EULs) has been reached.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AuthenticationFailed">
      <summary>Possible authentication error (HTTP error 401) returned by an Internet request. Or, the current user does not have valid domain credentials in a silent user activation attempt. Or, the certification server in silent user activation is not in the local intranet or trusted sites zone.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServerError">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InstallationFailed">
      <summary>An installation operation failed.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.HidCorrupted">
      <summary>The Hardware ID (HID) used in a machine activation attempt is incorrectly formatted. Rights management services are not properly configured.  </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidServerResponse">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceNotFound">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault">
      <summary>If a request is made for computer activation or a rights account certificate, receiving <see cref="F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault" /> indicates that the application should pass null into the ActServInfo parameter</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServerNotFound">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidEmail">
      <summary>RMS Server email address verification failed.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ValidityTimeViolation">
      <summary>The defined time period for the protected content has expired; access is no longer permitted.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OutdatedModule">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceMoved">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceGone">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AdEntryNotFound">
      <summary>The current user was not found in the Active Directory (AD) for certification under Windows authentication.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NotAChain">
      <summary>Rights managed content is corrupted.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RequestDenied">
      <summary>The Rights Management server does not allow temporary certification of the current user.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NotSet">
      <summary>The item requested to delete does not exist. </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.MetadataNotSet">
      <summary>The specified metadata could net be set.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RevocationInfoNotSet">
      <summary>Certificate or license revocation information has not been set.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidTimeInfo">
      <summary>The time information specified is invalid.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RightNotSet">
      <summary>The requested right was not specified when the content was published with rights management.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LicenseBindingToWindowsIdentityFailed">
      <summary>The current user credentials are not valid for acquiring a license.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidIssuanceLicenseTemplate">
      <summary>The Rights Management Services template contains one or more errors.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidKeyLength">
      <summary>The key length specified in a key/value pair is invalid.   </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ExpiredOfficialIssuanceLicenseTemplate">
      <summary>The authorized time period defined in the issuance license template has expired; access is no longer permitted.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidClientLicensorCertificate">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.HidInvalid">
      <summary>The Hardware ID (HID) used in a machine activation attempt is invalid. Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EmailNotVerified">
      <summary>The user's email address cannot be verified.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.DebuggerDetected">
      <summary>Cannot open or publish content with restricted permissions because a debugger has been detected. </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLockboxType">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLockboxPath">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidRegistryPath">
      <summary>The specified registry path is invalid.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoAesCryptoProvider">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.GlobalOptionAlreadySet">
      <summary>The option specified has already been set.  </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OwnerLicenseNotFound">
      <summary>The document does not contain an Owner License.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.SecureEnvironment">
      <summary>Represents a secure client session for user activation, license binding, and other rights management operations.</summary>
    </member>
    <member name="P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest">
      <summary>Gets the <see cref="P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest" /> specified when the <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> was created.</summary>
      <returns>The application manifest specified to the <see cref="Overload:System.Security.RightsManagement.SecureEnvironment.Create" /> method when the <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> is created.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)">
      <summary>Creates a secure client session given an application rights manifest, <see cref="T:System.Security.RightsManagement.AuthenticationType" />, and <see cref="T:System.Security.RightsManagement.UserActivationMode" />.</summary>
      <returns>A secure client session for activation, license binding, and other rights management operations.</returns>
      <param name="applicationManifest">The application rights manifest.</param>
      <param name="authentication">The method of authentication.</param>
      <param name="userActivationMode">The type of the user rights account certificate.</param>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)">
      <summary>Creates a secure client session for a specified user with a given rights manifest.</summary>
      <returns>A secure client session for activation, license binding, and other rights management operations.</returns>
      <param name="applicationManifest">The application rights manifest.</param>
      <param name="user">The user or user-group for granting access to rights managed content.</param>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Security.RightsManagement.SecureEnvironment" />.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers">
      <summary>Returns a list of the activated users.</summary>
      <returns>A list of the currently activated users.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.IsUserActivated(System.Security.RightsManagement.ContentUser)">
      <summary>Indicates whether a given user has been activated for accessing rights managed content.</summary>
      <returns>true if the given <paramref name="user" /> has been activated for accessing rights managed content; otherwise, false.</returns>
      <param name="user">The user or user-group for granting access to rights managed content.</param>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(System.Security.RightsManagement.ContentUser)">
      <summary>Removes the license activation for a specified user.</summary>
      <param name="user">The user to remove the license activation for.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="user" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The given <paramref name="user" /> is not authenticated with either Windows authentication or Passport authentication.</exception>
    </member>
    <member name="P:System.Security.RightsManagement.SecureEnvironment.User">
      <summary>Gets the user or user-group specified when the <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> was created. </summary>
      <returns>The user or user-group specified to the <see cref="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)" /> method when the <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> was created.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UnsignedPublishLicense">
      <summary>Represents an unsigned rights managed <see cref="T:System.Security.RightsManagement.PublishLicense" /> or an unsigned <see cref="T:System.Security.RightsManagement.PublishLicense" /> template.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> class. </summary>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> class from a specified XrML publish-license template. </summary>
      <param name="publishLicenseTemplate">The Extensible Rights Markup Language (XrML) publish-license template to use to create this license.</param>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ContentId">
      <summary>Gets or sets the publisher-created content identifier. </summary>
      <returns>The publisher-created rights-managed content identifier.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.Grants">
      <summary>Gets a collection of assigned user rights.</summary>
      <returns>A collection of the assigned user rights that are provided in this license.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.LocalizedNameDescriptionDictionary">
      <summary>Gets a collection of name and description pairs.</summary>
      <returns>A collection of name and description pairs.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.Owner">
      <summary>Gets or sets the content owner. </summary>
      <returns>The user who owns the published content.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ReferralInfoName">
      <summary>Gets or sets the contact name for the author or publisher of the content.</summary>
      <returns>The contact name for the author or publisher of the content.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ReferralInfoUri">
      <summary>Gets or sets the contact URI for the author or publisher of the content.</summary>
      <returns>The contact uniform resource identifier (URI) for the author or publisher of the content.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.Sign(System.Security.RightsManagement.SecureEnvironment,System.Security.RightsManagement.UseLicense@)">
      <summary>Creates a signed <see cref="T:System.Security.RightsManagement.PublishLicense" /> and returns a <see cref="T:System.Security.RightsManagement.UseLicense" /> for the document author.</summary>
      <returns>The signed <see cref="T:System.Security.RightsManagement.PublishLicense" /> that is created by signing this <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />.</returns>
      <param name="secureEnvironment">The secure environment for license activation and binding.</param>
      <param name="authorUseLicense">A returned <see cref="T:System.Security.RightsManagement.UseLicense" /> for the document author.</param>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.ToString">
      <summary>Returns a serialized template created from the XrML of the <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />.</summary>
      <returns>A serialized template created from the XrML of the <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UseLicense">
      <summary>Represents a license that enables access to protected rights managed content.    </summary>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.UseLicense" /> class. </summary>
      <param name="useLicense">A use license in serialized Extensible Rights Markup Language (XrML) form.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="useLicense" /> is null.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">
        <paramref name="useLicense" /> is invalid.</exception>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.ApplicationData">
      <summary>Gets the application data dictionary that contains key/value pairs passed from the publishing application to the consuming application.</summary>
      <returns>The application data dictionary that contains key/value pairs passed from the publishing application to the consuming application.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.Bind(System.Security.RightsManagement.SecureEnvironment)">
      <summary>Binds the license to a given <see cref="T:System.Security.RightsManagement.SecureEnvironment" />.</summary>
      <returns>A <see cref="T:System.Security.RightsManagement.CryptoProvider" /> instance if the license binding succeeded; otherwise, null.</returns>
      <param name="secureEnvironment">The environment to bind the license to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="secureEnvironment" /> is null.</exception>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.ContentId">
      <summary>Gets the content identifier created by the publisher.</summary>
      <returns>The content identifier created by the publisher.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.Equals(System.Object)">
      <summary>Indicates if this license is equivalent to another given license.</summary>
      <returns>true if both licenses are the equivalent; otherwise, false.</returns>
      <param name="x">The license to compare.</param>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.GetHashCode">
      <summary>Returns the hash code associated with this license.</summary>
      <returns>A hash code for this license. </returns>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.Owner">
      <summary>Gets the owner of the license. </summary>
      <returns>The owner of the license. </returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.ToString">
      <summary>Returns the serialized XrML string used to create this license.</summary>
      <returns>The serialized Extensible Rights Markup Language (XrML) string originally passed to the <see cref="M:System.Security.RightsManagement.UseLicense.#ctor(System.String)" /> constructor.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UserActivationMode">
      <summary>Specifies the type of user Rights Account Certificate to request for rights management activation.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.UserActivationMode.Permanent">
      <summary>A permanent Rights Account Certificate.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.UserActivationMode.Temporary">
      <summary>A temporary Rights Account Certificate.</summary>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableAttribute">
      <summary>Provides a base class for .NET Framework attributes that report the use scope of attached properties.</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.AttachedPropertyBrowsableAttribute" /> class.</summary>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute">
      <summary>Specifies that an attached property is browsable only for elements that derive from a specified type.</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> class, using the provided <paramref name="targetType" />.</summary>
      <param name="targetType">The intended type that scopes the use of the attached property.where this .NET Framework attribute applies.</param>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.Equals(System.Object)">
      <summary>Determines whether the current <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> .NET Framework attribute is equal to a specified object.</summary>
      <returns>true if the specified <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> is equal to the current <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> to compare to the current <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />.</param>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> .NET Framework attribute.</summary>
      <returns>An unsigned 32-bit integer value.</returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableForTypeAttribute.TargetType">
      <summary>Gets the base type that scopes the use of the attached property where this .NET Framework attribute applies.</summary>
      <returns>The requested <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableForTypeAttribute.TypeId">
      <summary>Gets a unique type identifier for this <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> .NET Framework attribute.</summary>
      <returns>An object that is a unique identifier for the <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />.</returns>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute">
      <summary>Specifies that an attached property is only browsable on an element that also has another specific  .NET Framework attribute applied to its class definition.</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> class.</summary>
      <param name="attributeType">The <see cref="T:System.Type" /> of the  .NET Framework attribute that must also be applied on a class in order for the attached property to be browsable on the class where <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> is applied..</param>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.AttributeType">
      <summary>Gets the type of the  .NET Framework attribute that must also be applied on a class.</summary>
      <returns>The  .NET Framework attribute type.</returns>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.Equals(System.Object)">
      <summary>Determines whether the current <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> .NET Framework attribute is equal to a specified object.</summary>
      <returns>true if the specified <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> is equal to the current <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> to compare to the current <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />.</param>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> .NET Framework attribute.</summary>
      <returns>An unsigned 32-bit integer value.</returns>
    </member>
    <member name="T:System.Windows.CoerceValueCallback">
      <summary>Provides a template for a method that is called whenever a dependency property value is being re-evaluated, or coercion is specifically requested.</summary>
      <returns>The coerced value (with appropriate type). </returns>
      <param name="d">The object that the property exists on. When the callback is invoked, the property system will pass this value.</param>
      <param name="baseValue">The new value of the property, prior to any coercion attempt.</param>
    </member>
    <member name="T:System.Windows.DependencyObject">
      <summary>Represents an object that participates in the dependency property system.</summary>
    </member>
    <member name="M:System.Windows.DependencyObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DependencyObject" /> class. </summary>
    </member>
    <member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
      <summary>Clears the local value of a property. The property to be cleared is specified by a <see cref="T:System.Windows.DependencyProperty" /> identifier. </summary>
      <param name="dp">The dependency property to be cleared, identified by a <see cref="T:System.Windows.DependencyProperty" /> object reference.</param>
      <exception cref="T:System.InvalidOperationException">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
      <summary>Clears the local value of a read-only property. The property to be cleared is specified by a <see cref="T:System.Windows.DependencyPropertyKey" />. </summary>
      <param name="key">The key for the dependency property to be cleared.</param>
      <exception cref="T:System.InvalidOperationException">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
      <summary>Coerces the value of the specified dependency property. This is accomplished by invoking any <see cref="T:System.Windows.CoerceValueCallback" /> function specified in property metadata for the dependency property as it exists on the calling <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="dp">The identifier for the dependency property to coerce.</param>
      <exception cref="T:System.InvalidOperationException">The specified <paramref name="dp" /> or its value were invalid or do not exist.</exception>
    </member>
    <member name="P:System.Windows.DependencyObject.DependencyObjectType">
      <summary>Gets the <see cref="T:System.Windows.DependencyObjectType" /> that wraps the CLR type of this instance. </summary>
      <returns>A <see cref="T:System.Windows.DependencyObjectType" /> that wraps the CLR type of this instance. </returns>
    </member>
    <member name="M:System.Windows.DependencyObject.Equals(System.Object)">
      <summary>Determines whether a provided <see cref="T:System.Windows.DependencyObject" /> is equivalent to the current <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>true if the two instances are the same; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Windows.DependencyObject" />  to compare to the current instance.</param>
    </member>
    <member name="M:System.Windows.DependencyObject.GetHashCode">
      <summary>Gets a hash code for this <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>A signed 32-bit integer hash code.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
      <summary>Creates a specialized enumerator for determining which dependency properties have locally set values on this <see cref="T:System.Windows.DependencyObject" />. </summary>
      <returns>A specialized local value enumerator.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
      <summary>Returns the current effective value of a dependency property on this instance of a <see cref="T:System.Windows.DependencyObject" />. </summary>
      <returns>Returns the current effective value.</returns>
      <param name="dp">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</param>
      <exception cref="T:System.InvalidOperationException">The specified <paramref name="dp" /> or its value was invalid, or the specified <paramref name="dp" /> does not exist.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
      <summary>Re-evaluates the effective value for the specified dependency property</summary>
      <param name="dp">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to invalidate.</param>
    </member>
    <member name="P:System.Windows.DependencyObject.IsSealed">
      <summary>Gets a value that indicates whether this instance is currently sealed (read-only).</summary>
      <returns>true if this instance is sealed; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject" /> has been updated. The specific dependency property that changed is reported in the event data. </summary>
      <param name="e">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</param>
    </member>
    <member name="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
      <summary>Returns the local value of a dependency property, if it exists. </summary>
      <returns>Returns the local value, or returns the sentinel value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> if no local value is set.</returns>
      <param name="dp">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</param>
    </member>
    <member name="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
      <summary>Sets the value of a dependency property without changing its value source. </summary>
      <param name="dp">The identifier of the dependency property to set.</param>
      <param name="value">The new local value.</param>
      <exception cref="T:System.InvalidOperationException">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
      <summary>Sets the local value of a dependency property, specified by its dependency property identifier. </summary>
      <param name="dp">The identifier of the dependency property to set.</param>
      <param name="value">The new local value.</param>
      <exception cref="T:System.InvalidOperationException">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
      <summary>Sets the local value of a read-only dependency property, specified by the <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the dependency property. </summary>
      <param name="key">The <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the property to set.</param>
      <param name="value">The new local value.</param>
    </member>
    <member name="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
      <summary>Returns a value that indicates whether serialization processes should serialize the value for the provided dependency property.</summary>
      <returns>true if the dependency property that is supplied should be value-serialized; otherwise, false.</returns>
      <param name="dp">The identifier for the dependency property that should be serialized.</param>
    </member>
    <member name="T:System.Windows.DependencyObjectType">
      <summary>Implements an underlying type cache for all <see cref="T:System.Windows.DependencyObject" /> derived types.</summary>
    </member>
    <member name="P:System.Windows.DependencyObjectType.BaseType">
      <summary>Gets the <see cref="T:System.Windows.DependencyObjectType" /> of the immediate base class of the current <see cref="T:System.Windows.DependencyObjectType" />. </summary>
      <returns>The type of the base class.</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.FromSystemType(System.Type)">
      <summary>Returns a <see cref="T:System.Windows.DependencyObjectType" /> that represents a given system (CLR) type.</summary>
      <returns>A <see cref="T:System.Windows.DependencyObjectType" /> that represents the system (CLR) type.</returns>
      <param name="systemType">The system (CLR) type to convert.</param>
    </member>
    <member name="M:System.Windows.DependencyObjectType.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Windows.DependencyObjectType" />.</summary>
      <returns>A 32-bit signed integer hash code. </returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.Id">
      <summary>Gets a zero-based unique identifier for constant-time array lookup operations.</summary>
      <returns>An internal identifier.</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.IsInstanceOfType(System.Windows.DependencyObject)">
      <summary>Determines whether the specified object is an instance of the current <see cref="T:System.Windows.DependencyObjectType" />.</summary>
      <returns>true if the class represented by the current <see cref="T:System.Windows.DependencyObjectType" /> is in the inheritance hierarchy of the <see cref="T:System.Windows.DependencyObject" /> passed as <paramref name="d" />; otherwise, false.</returns>
      <param name="dependencyObject">The object to compare with the current <see cref="T:System.Windows.DependencyObjectType" />.</param>
    </member>
    <member name="M:System.Windows.DependencyObjectType.IsSubclassOf(System.Windows.DependencyObjectType)">
      <summary>Determines whether the current <see cref="T:System.Windows.DependencyObjectType" /> derives from the specified <see cref="T:System.Windows.DependencyObjectType" />.</summary>
      <returns>true if the <paramref name="dependencyObjectType" /> parameter and the current <see cref="T:System.Windows.DependencyObjectType" /> represent types of classes, and the class represented by the current <see cref="T:System.Windows.DependencyObjectType" /> derives from the class represented by <paramref name="dependencyObjectType" />. Otherwise, false. This method also returns false if <paramref name="dependencyObjectType" /> and the current <see cref="T:System.Windows.DependencyObjectType" /> represent the same class.</returns>
      <param name="dependencyObjectType">The <see cref="T:System.Windows.DependencyObjectType" /> to compare.</param>
    </member>
    <member name="P:System.Windows.DependencyObjectType.Name">
      <summary>Gets the name of the represented common language runtime (CLR) system type. </summary>
      <returns>The name of the represented CLR system type.</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.SystemType">
      <summary> Gets the common language runtime (CLR) system type represented by this <see cref="T:System.Windows.DependencyObjectType" />. </summary>
      <returns>The CLR system type represented by this <see cref="T:System.Windows.DependencyObjectType" />.</returns>
    </member>
    <member name="T:System.Windows.DependencyProperty">
      <summary>Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.</summary>
    </member>
    <member name="M:System.Windows.DependencyProperty.AddOwner(System.Type)">
      <summary>Adds another type as an owner of a dependency property that has already been registered.</summary>
      <returns>A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property. This identifier should be exposed by the adding class as a public static readonly field.</returns>
      <param name="ownerType">The type to add as an owner of this dependency property.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)">
      <summary>Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type. </summary>
      <returns>A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property. This identifier should be exposed by the adding class as a public static readonly field.</returns>
      <param name="ownerType">The type to add as owner of this dependency property.</param>
      <param name="typeMetadata">The metadata that qualifies the dependency property as it exists on the provided type.</param>
    </member>
    <member name="P:System.Windows.DependencyProperty.DefaultMetadata">
      <summary>Gets the default metadata of the dependency property. </summary>
      <returns>The default metadata of the dependency property.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetHashCode">
      <summary>Returns a hash code for this <see cref="T:System.Windows.DependencyProperty" />.</summary>
      <returns>The hash code for this <see cref="T:System.Windows.DependencyProperty" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Type)">
      <summary>Returns the metadata for this dependency property as it exists on a specified existing type. </summary>
      <returns>A property metadata object.</returns>
      <param name="forType">The specific type from which to retrieve the dependency property metadata.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)">
      <summary>Returns the metadata for this dependency property as it exists on the specified object instance. </summary>
      <returns>A property metadata object.</returns>
      <param name="dependencyObject">A dependency object that is checked for type, to determine which type-specific version of the dependency property the metadata should come from.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)">
      <summary> Returns the metadata for this dependency property as it exists on a specified type. </summary>
      <returns>A property metadata object.</returns>
      <param name="dependencyObjectType">A specific object that records the dependency object type from which the dependency property metadata is desired.</param>
    </member>
    <member name="P:System.Windows.DependencyProperty.GlobalIndex">
      <summary>Gets an internally generated value that uniquely identifies the dependency property.</summary>
      <returns>A unique numeric identifier.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.IsValidType(System.Object)">
      <summary>Determines whether a specified value is acceptable for this dependency property's type, as checked against the property type provided in the original dependency property registration. </summary>
      <returns>true if the specified value is the registered property type or an acceptable derived type; otherwise, false.</returns>
      <param name="value">The value to check.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.IsValidValue(System.Object)">
      <summary>Determines whether the provided value is accepted for the type of property through basic type checking, and also potentially if it is within the allowed range of values for that type. </summary>
      <returns>true if the value is acceptable and is of the correct type or a derived type; otherwise, false.</returns>
      <param name="value">The value to check.</param>
    </member>
    <member name="P:System.Windows.DependencyProperty.Name">
      <summary>Gets the name of the dependency property. </summary>
      <returns>The name of the property.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)">
      <summary>Specifies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the dependency property as it was inherited from base types.</summary>
      <param name="forType">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</param>
      <param name="typeMetadata">The metadata to apply to the dependency property on the overriding type.</param>
      <exception cref="T:System.InvalidOperationException">An attempt was made to override metadata on a read-only dependency property (that operation cannot be done using this signature).</exception>
      <exception cref="T:System.ArgumentException">Metadata was already established for the dependency property as it exists on the provided type.</exception>
    </member>
    <member name="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)">
      <summary>Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration. You must pass the <see cref="T:System.Windows.DependencyPropertyKey" /> for the read-only dependency property to avoid raising an exception.</summary>
      <param name="forType">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</param>
      <param name="typeMetadata">The metadata to apply to the dependency property on the overriding type.</param>
      <param name="key">The access key for a read-only dependency property. </param>
    </member>
    <member name="P:System.Windows.DependencyProperty.OwnerType">
      <summary>Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property. </summary>
      <returns>The type of the object that registered the property or added itself as owner of the property.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.PropertyType">
      <summary>Gets the type that the dependency property uses for its value. </summary>
      <returns>The <see cref="T:System.Type" /> of the property value.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.ReadOnly">
      <summary>Gets a value that indicates whether the dependency property identified by this <see cref="T:System.Windows.DependencyProperty" /> instance is a read-only dependency property.</summary>
      <returns>true if the dependency property is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)">
      <summary>Registers a dependency property with the specified property name, property type, and owner type. </summary>
      <returns>A dependency property identifier that should be used to set the value of a public static readonly field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
      <param name="name">The name of the dependency property to register. The name must be unique within the registration namespace of the owner type.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>Registers a dependency property with the specified property name, property type, owner type, and property metadata. </summary>
      <returns>A dependency property identifier that should be used to set the value of a public static readonly field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="typeMetadata">Property metadata for the dependency property.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property. </summary>
      <returns>A dependency property identifier that should be used to set the value of a public static readonly field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="typeMetadata">Property metadata for the dependency property.</param>
      <param name="validateValueCallback">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)">
      <summary>Registers an attached property with the specified property name, property type, and owner type. </summary>
      <returns>A dependency property identifier that should be used to set the value of a public static readonly field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>Registers an attached property with the specified property name, property type, owner type, and property metadata. </summary>
      <returns>A dependency property identifier that should be used to set the value of a public static readonly field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="defaultMetadata">Property metadata for the dependency property. This can include the default value as well as other characteristics.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property. </summary>
      <returns>A dependency property identifier that should be used to set the value of a public static readonly field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="defaultMetadata">Property metadata for the dependency property. This can include the default value as well as other characteristics.</param>
      <param name="validateValueCallback">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>Registers a read-only attached property, with the specified property type, owner type, and property metadata. </summary>
      <returns>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</returns>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="defaultMetadata">Property metadata for the dependency property.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback. </summary>
      <returns>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</returns>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="defaultMetadata">Property metadata for the dependency property.</param>
      <param name="validateValueCallback">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary> Registers a read-only dependency property, with the specified property type, owner type, and property metadata. </summary>
      <returns>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</returns>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="typeMetadata">Property metadata for the dependency property.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback. </summary>
      <returns>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</returns>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="typeMetadata">Property metadata for the dependency property.</param>
      <param name="validateValueCallback">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.ToString">
      <summary> Returns the string representation of the dependency property. </summary>
      <returns>The string representation of the dependency property.</returns>
    </member>
    <member name="F:System.Windows.DependencyProperty.UnsetValue">
      <summary>Specifies a static value that is used by the WPF property system rather than null to indicate that the property exists, but does not have its value set by the property system.</summary>
      <returns>An unset value. This is effectively the result of a call to the <see cref="T:System.Object" /> constructor.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.ValidateValueCallback">
      <summary>Gets the value validation callback for the dependency property. </summary>
      <returns>The value validation callback for this dependency property, as provided for the <paramref name="validateValueCallback" /> parameter in the original dependency property registration.</returns>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventArgs">
      <summary>Provides data for various property changed events. Typically these events report effective value changes in the value of a read-only dependency property. Another usage is as part of a <see cref="T:System.Windows.PropertyChangedCallback" /> implementation.</summary>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> class.</summary>
      <param name="property">The identifier for the dependency property that changed.</param>
      <param name="oldValue">The value of the property before the change reported by the relevant event or state change.</param>
      <param name="newValue">The value of the property after the change reported by the relevant event or state change.</param>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)">
      <summary>Determines whether the provided object is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</summary>
      <returns>true if the provided object is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />; otherwise, false.</returns>
      <param name="obj">The object to compare to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</param>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Determines whether the provided <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</summary>
      <returns>true if the provided <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />; otherwise, false.</returns>
      <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /></param>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.GetHashCode">
      <summary>Gets a hash code  for this <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />. </summary>
      <returns>A signed 32-bit integer hash code. </returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
      <summary>Gets the value of the property after the change.</summary>
      <returns>The property value after the change.</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
      <summary>Gets the value of the property before the change.</summary>
      <returns>The property value before the change.</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Determines whether two specified <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> objects have the same value.</summary>
      <returns>true if the two <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instances are equivalent; otherwise, false.</returns>
      <param name="left">The first <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare.</param>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Determines whether two specified <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> objects are different.</summary>
      <returns>true if the two <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instances are different; otherwise, false.</returns>
      <param name="left">The first <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare.</param>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
      <summary>Gets the identifier for the dependency property where the value change occurred.</summary>
      <returns>The identifier field of the dependency property where the value change occurred.</returns>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventHandler">
      <summary>Represents the method that will handle events raised when a <see cref="T:System.Windows.DependencyProperty" /> is changed on a particular <see cref="T:System.Windows.DependencyObject" /> implementation.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.DependencyPropertyKey">
      <summary>Provides a dependency property identifier for limited write access to a read-only dependency property.</summary>
    </member>
    <member name="P:System.Windows.DependencyPropertyKey.DependencyProperty">
      <summary>Gets the dependency property identifier associated with this specialized read-only dependency property identifier. </summary>
      <returns>The relevant dependency property identifier.</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)">
      <summary>Overrides the metadata of a read-only dependency property that is represented by this dependency property identifier.</summary>
      <param name="forType">The type on which this dependency property exists and metadata should be overridden.</param>
      <param name="typeMetadata">Metadata supplied for this type.</param>
      <exception cref="T:System.InvalidOperationException">Attempted metadata override on a read-write dependency property (cannot be done using this signature).</exception>
      <exception cref="T:System.ArgumentException">Metadata was already established for the property as it exists on the provided type.</exception>
    </member>
    <member name="T:System.Windows.Expression">
      <summary>This type supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. </summary>
    </member>
    <member name="T:System.Windows.ExpressionConverter">
      <summary>Converts instances of <see cref="T:System.Windows.Expression" />  to and from other types. </summary>
    </member>
    <member name="M:System.Windows.ExpressionConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.ExpressionConverter" /> class. </summary>
    </member>
    <member name="M:System.Windows.ExpressionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns whether this converter can convert from a source object to an <see cref="T:System.Windows.Expression" /> object. </summary>
      <returns>Always false.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you wish to convert from.</param>
    </member>
    <member name="M:System.Windows.ExpressionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns whether this converter can convert an <see cref="T:System.Windows.Expression" /> object to a specific destination type. </summary>
      <returns>Always false.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you wish to convert to.</param>
    </member>
    <member name="M:System.Windows.ExpressionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the provided value to the <see cref="T:System.Windows.Expression" /> type. </summary>
      <returns>Always throws an exception and returns null.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture. </param>
      <param name="value">The object to convert.</param>
    </member>
    <member name="M:System.Windows.ExpressionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the provided <see cref="T:System.Windows.Expression" /> object to the specified type.</summary>
      <returns>Always throws an exception and returns null.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture. </param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you wish to convert to.</param>
    </member>
    <member name="T:System.Windows.Freezable">
      <summary>Defines an object that has a modifiable state and a read-only (frozen) state. Classes that derive from <see cref="T:System.Windows.Freezable" /> provide detailed change notification, can be made immutable, and can clone themselves. </summary>
    </member>
    <member name="M:System.Windows.Freezable.#ctor">
      <summary>Initializes a new instance of a <see cref="T:System.Windows.Freezable" /> derived class. </summary>
    </member>
    <member name="P:System.Windows.Freezable.CanFreeze">
      <summary>Gets a value that indicates whether the object can be made unmodifiable. </summary>
      <returns>true if the current object can be made unmodifiable or is already unmodifiable; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.Freezable.Changed">
      <summary>Occurs when the <see cref="T:System.Windows.Freezable" /> or an object it contains is modified. </summary>
    </member>
    <member name="M:System.Windows.Freezable.Clone">
      <summary>Creates a modifiable clone of the <see cref="T:System.Windows.Freezable" />, making deep copies of the object's values. When copying the object's dependency properties, this method copies expressions (which might no longer resolve) but not animations or their current values. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true.</returns>
    </member>
    <member name="M:System.Windows.Freezable.CloneCore(System.Windows.Freezable)">
      <summary>Makes the instance a clone (deep copy) of the specified <see cref="T:System.Windows.Freezable" /> using base (non-animated) property values. </summary>
      <param name="sourceFreezable">The object to clone.</param>
    </member>
    <member name="M:System.Windows.Freezable.CloneCurrentValue">
      <summary>Creates a modifiable clone (deep copy) of the <see cref="T:System.Windows.Freezable" /> using its current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true.</returns>
    </member>
    <member name="M:System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Makes the instance a modifiable clone (deep copy) of the specified <see cref="T:System.Windows.Freezable" /> using current property values.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Freezable" /> to be cloned.</param>
    </member>
    <member name="M:System.Windows.Freezable.CreateInstance">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Freezable" /> class. </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:System.Windows.Freezable.CreateInstanceCore">
      <summary>When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable" /> derived class. </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:System.Windows.Freezable.Freeze">
      <summary>Makes the current object unmodifiable and sets its <see cref="P:System.Windows.Freezable.IsFrozen" /> property to true. </summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Freezable" /> cannot be made unmodifiable. </exception>
    </member>
    <member name="M:System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)">
      <summary>If the <paramref name="isChecking" /> parameter is true, this method indicates whether the specified <see cref="T:System.Windows.Freezable" /> can be made unmodifiable. If the <paramref name="isChecking" /> parameter is false, this method attempts to make the specified <see cref="T:System.Windows.Freezable" /> unmodifiable and indicates whether the operation succeeded.</summary>
      <returns>If <paramref name="isChecking" /> is true, this method returns true if the specified <see cref="T:System.Windows.Freezable" /> can be made unmodifiable, or false if it cannot be made unmodifiable. If <paramref name="isChecking" /> is false, this method returns true if the specified <see cref="T:System.Windows.Freezable" /> is now unmodifiable, or false if it cannot be made unmodifiable. </returns>
      <param name="freezable">The object to check or make unmodifiable. If <paramref name="isChecking" /> is true, the object is checked to determine whether it can be made unmodifiable. If <paramref name="isChecking" /> is false, the object is made unmodifiable, if possible.</param>
      <param name="isChecking">true to return an indication of whether the object can be frozen (without actually freezing it); false to actually freeze the object.</param>
      <exception cref="T:System.InvalidOperationException">When <paramref name="isChecking" /> is false, the attempt to make <paramref name="freezable" /> unmodifiable was unsuccessful; the object is now in an unknown state (it might be partially frozen).  </exception>
    </member>
    <member name="M:System.Windows.Freezable.FreezeCore(System.Boolean)">
      <summary>Makes the <see cref="T:System.Windows.Freezable" /> object unmodifiable or tests whether it can be made unmodifiable.</summary>
      <returns>If <paramref name="isChecking" /> is true, this method returns true if the <see cref="T:System.Windows.Freezable" /> can be made unmodifiable, or false if it cannot be made unmodifiable. If <paramref name="isChecking" /> is false, this method returns true if the if the specified <see cref="T:System.Windows.Freezable" /> is now unmodifiable, or false if it cannot be made unmodifiable. </returns>
      <param name="isChecking">true to return an indication of whether the object can be frozen (without actually freezing it); false to actually freeze the object.</param>
    </member>
    <member name="M:System.Windows.Freezable.GetAsFrozen">
      <summary>Creates a frozen copy of the <see cref="T:System.Windows.Freezable" />, using base (non-animated) property values. Because the copy is frozen, any frozen sub-objects are copied by reference. </summary>
      <returns>A frozen copy of the <see cref="T:System.Windows.Freezable" />. The copy's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is set to true. </returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Freezable" /> cannot be frozen because it contains expressions or animated properties.</exception>
    </member>
    <member name="M:System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes the instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" /> using base (non-animated) property values.</summary>
      <param name="sourceFreezable">The instance to copy.</param>
    </member>
    <member name="M:System.Windows.Freezable.GetCurrentValueAsFrozen">
      <summary>Creates a frozen copy of the <see cref="T:System.Windows.Freezable" /> using current property values. Because the copy is frozen, any frozen sub-objects are copied by reference.</summary>
      <returns>A frozen copy of the <see cref="T:System.Windows.Freezable" />. The copy's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is set to true.</returns>
    </member>
    <member name="M:System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes the current instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" />. If the object has animated dependency properties, their current animated values are copied.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Freezable" /> to copy and freeze.</param>
    </member>
    <member name="P:System.Windows.Freezable.IsFrozen">
      <summary>Gets a value that indicates whether the object is currently modifiable. </summary>
      <returns>true if the object is frozen and cannot be modified; false if the object can be modified.</returns>
    </member>
    <member name="M:System.Windows.Freezable.OnChanged">
      <summary>Called when the current <see cref="T:System.Windows.Freezable" /> object is modified. </summary>
    </member>
    <member name="M:System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
      <summary>Ensures that appropriate context pointers are established for a <see cref="T:System.Windows.DependencyObjectType" /> data member that has just been set.</summary>
      <param name="oldValue">The previous value of the data member.</param>
      <param name="newValue">The current value of the data member.</param>
    </member>
    <member name="M:System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <param name="oldValue">The previous value of the data member.</param>
      <param name="newValue">The current value of the data member.</param>
      <param name="property">The property that changed. </param>
    </member>
    <member name="M:System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Overrides the <see cref="T:System.Windows.DependencyObject" /> implementation of <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" /> to also invoke any <see cref="E:System.Windows.Freezable.Changed" /> handlers in response to a changing dependency property of type <see cref="T:System.Windows.Freezable" />.</summary>
      <param name="e">Event data that contains information about which property changed, and its old and new values.</param>
    </member>
    <member name="M:System.Windows.Freezable.ReadPreamble">
      <summary>Ensures that the <see cref="T:System.Windows.Freezable" /> is being accessed from a valid thread. Inheritors of <see cref="T:System.Windows.Freezable" /> must call this method at the beginning of any API that reads data members that are not dependency properties.</summary>
    </member>
    <member name="M:System.Windows.Freezable.WritePostscript">
      <summary>Raises the <see cref="E:System.Windows.Freezable.Changed" /> event for the <see cref="T:System.Windows.Freezable" /> and invokes its <see cref="M:System.Windows.Freezable.OnChanged" /> method. Classes that derive from <see cref="T:System.Windows.Freezable" /> should call this method at the end of any API that modifies class members that are not stored as dependency properties.</summary>
    </member>
    <member name="M:System.Windows.Freezable.WritePreamble">
      <summary>Verifies that the <see cref="T:System.Windows.Freezable" /> is not frozen and that it is being accessed from a valid threading context. <see cref="T:System.Windows.Freezable" /> inheritors should call this method at the beginning of any API that writes to data members that are not dependency properties. </summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Freezable" /> instance is frozen and cannot have its members written to.</exception>
    </member>
    <member name="T:System.Windows.Int32Rect">
      <summary>Describes the width, height, and location of an integer rectangle.</summary>
    </member>
    <member name="M:System.Windows.Int32Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of an <see cref="T:System.Windows.Int32Rect" /> with the specified <see cref="P:System.Windows.Int32Rect.X" /> and <see cref="P:System.Windows.Int32Rect.Y" /> coordinates and the specified <see cref="P:System.Windows.Int32Rect.Width" /> and <see cref="P:System.Windows.Int32Rect.Height" />. </summary>
      <param name="x">The <see cref="P:System.Windows.Int32Rect.X" /> of the new <see cref="T:System.Windows.Int32Rect" /> instance which specifies the x-coordinate of the top-left corner of the rectangle.</param>
      <param name="y">The <see cref="P:System.Windows.Int32Rect.Y" /> of the new <see cref="T:System.Windows.Int32Rect" /> instance which specifies the y-coordinate of the top-left corner of the rectangle.</param>
      <param name="width">The <see cref="P:System.Windows.Int32Rect.Width" /> of the new <see cref="T:System.Windows.Int32Rect" /> instance which specifies the width of the rectangle.</param>
      <param name="height">The <see cref="P:System.Windows.Int32Rect.Height" /> of the new <see cref="T:System.Windows.Int32Rect" /> instance which specifies the height of the rectangle.</param>
    </member>
    <member name="P:System.Windows.Int32Rect.Empty">
      <summary>Gets the empty rectangle, a special value that represents a rectangle with no position or area. </summary>
      <returns>An empty rectangle with no position or area.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Object)">
      <summary>Determines whether the specified rectangle is equal to this rectangle.</summary>
      <returns>true if o is an <see cref="T:System.Windows.Int32Rect" /> and the same <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" />, and <see cref="P:System.Windows.Int32Rect.Height" /> as this rectangle; otherwise, false.</returns>
      <param name="o">The object to compare to the current rectangle.</param>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Windows.Int32Rect)">
      <summary>Determines whether the specified rectangle is equal to this rectangle.</summary>
      <returns>true if both rectangles have the same <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" />, and <see cref="P:System.Windows.Int32Rect.Height" /> as this rectangle; otherwise, false.</returns>
      <param name="value">The rectangle to compare to the current rectangle.</param>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>Determines whether the specified rectangles are equal.</summary>
      <returns>true if int32Rect1 and int32Rect2 have the same <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" />, and <see cref="P:System.Windows.Int32Rect.Height" />; otherwise, false.</returns>
      <param name="int32Rect1">The first rectangle to compare.</param>
      <param name="int32Rect2">The second rectangle to compare.</param>
    </member>
    <member name="M:System.Windows.Int32Rect.GetHashCode">
      <summary>Creates a hash code from this rectangle's <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" />, and <see cref="P:System.Windows.Int32Rect.Height" /> values.</summary>
      <returns>This rectangle's hash code.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Height">
      <summary>Gets or sets the height of the rectangle.</summary>
      <returns>The height of the rectangle. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.IsEmpty">
      <summary>Gets a value indicating whether the rectangle is empty.</summary>
      <returns>true if the rectangle is empty; otherwise, false. The default value is true.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.op_Equality(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>Compares two rectangles for exact equality.</summary>
      <returns>true if int32Rect1 and int32Rect2 have the same <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" />, and <see cref="P:System.Windows.Int32Rect.Height" />; otherwise, false.</returns>
      <param name="int32Rect1">The first rectangle to compare.</param>
      <param name="int32Rect2">The second rectangle to compare.</param>
    </member>
    <member name="M:System.Windows.Int32Rect.op_Inequality(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>Compares two rectangles for inequality.</summary>
      <returns>false if int32Rect1 and int32Rect2 have the same <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" />, and <see cref="P:System.Windows.Int32Rect.Height" />; otherwise, if all of these values are the same, then true.</returns>
      <param name="int32Rect1">The first rectangle to compare.</param>
      <param name="int32Rect2">The second rectangle to compare.</param>
    </member>
    <member name="M:System.Windows.Int32Rect.Parse(System.String)">
      <summary>Creates an <see cref="T:System.Windows.Int32Rect" /> structure from the specified <see cref="T:System.String" /> representation.</summary>
      <returns>The equivalent <see cref="T:System.Windows.Int32Rect" /> structure.</returns>
      <param name="source">A string representation of an <see cref="T:System.Windows.Int32Rect" />.</param>
    </member>
    <member name="M:System.Windows.Int32Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>Formats the value of the current instance using the specified format.</summary>
      <returns>The value of the current instance in the specified format.</returns>
      <param name="format">The format to use.</param>
      <param name="provider">The provider to use to format the value</param>
    </member>
    <member name="M:System.Windows.Int32Rect.ToString">
      <summary>Creates a string representation of this <see cref="T:System.Windows.Int32Rect" />.</summary>
      <returns>A string containing the same <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" />, and <see cref="P:System.Windows.Int32Rect.Height" /> values of this <see cref="T:System.Windows.Int32Rect" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.ToString(System.IFormatProvider)">
      <summary>Creates a string representation of this <see cref="T:System.Windows.Int32Rect" /> based on the supplied <see cref="T:System.IFormatProvider" />.</summary>
      <returns>A string representation of this instance of <see cref="T:System.Windows.Int32Rect" />.</returns>
      <param name="provider">The format provider to use. If provider is null, the current culture is used.</param>
    </member>
    <member name="P:System.Windows.Int32Rect.Width">
      <summary>Gets or sets the width of the rectangle.</summary>
      <returns>The width of the rectangle. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.X">
      <summary>Gets or sets the x-coordinate of the top-left corner of the rectangle.</summary>
      <returns>The x-coordinate of the top-left corner of the rectangle. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Y">
      <summary>Gets or sets the y-coordinate of the top-left corner of the rectangle.</summary>
      <returns>The y-coordinate of the top-left corner of the rectangle. The default value is 0.</returns>
    </member>
    <member name="T:System.Windows.Int32RectConverter">
      <summary>Converts instances of other types to and from an <see cref="T:System.Windows.Int32Rect" />.</summary>
    </member>
    <member name="M:System.Windows.Int32RectConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Int32RectConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.Int32RectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object can be converted from a given type to an instance of an <see cref="T:System.Windows.Int32Rect" />.  </summary>
      <returns>true if the type can be converted to an <see cref="T:System.Windows.Int32Rect" />; otherwise, false.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="sourceType">The type of the source that is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Int32RectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of an <see cref="T:System.Windows.Int32Rect" /> can be converted to a different type.</summary>
      <returns>true if this <see cref="T:System.Windows.Int32Rect" /> can be converted to <paramref name="destinationType" />; otherwise, false.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="destinationType">The desired type this <see cref="T:System.Windows.Int32Rect" /> is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Int32RectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified type to an <see cref="T:System.Windows.Int32Rect" />.</summary>
      <returns>The <see cref="T:System.Windows.Int32Rect" /> created from converting <paramref name="value" />.</returns>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="culture">Cultural information to respect during conversion.</param>
      <param name="value">The object being converted.</param>
      <exception cref="T:System.NotSupportedException">Thrown if the specified object is NULL or is a type that cannot be converted to an <see cref="T:System.Windows.Int32Rect" />.</exception>
    </member>
    <member name="M:System.Windows.Int32RectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert an <see cref="T:System.Windows.Int32Rect" /> to a specified type.</summary>
      <returns>The object created from converting this <see cref="T:System.Windows.Int32Rect" />.</returns>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="culture">Cultural information to respect during conversion.</param>
      <param name="value">The <see cref="T:System.Windows.Int32Rect" /> to convert.</param>
      <param name="destinationType">The type to convert this <see cref="T:System.Windows.Int32Rect" /> to.</param>
      <exception cref="T:System.NotSupportedException">Thrown if <paramref name="value" /> is null or is not an <see cref="T:System.Windows.Int32Rect" />, or if the <paramref name="destinationType" /> is not one of the valid types for conversion.</exception>
    </member>
    <member name="T:System.Windows.IWeakEventListener">
      <summary>Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <see cref="T:System.Windows.WeakEventManager" />.</summary>
    </member>
    <member name="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>Receives events from the centralized event manager.</summary>
      <returns>true if the listener handled the event. It is considered an error by the <see cref="T:System.Windows.WeakEventManager" /> handling in WPF to register a listener for an event that the listener does not handle. Regardless, the method should return false if it receives an event that it does not recognize or handle.</returns>
      <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</param>
      <param name="sender">Object that originated the event.</param>
      <param name="e">Event data.</param>
    </member>
    <member name="T:System.Windows.LocalValueEntry">
      <summary>Represents a property identifier and the property value for a locally set dependency property.</summary>
    </member>
    <member name="M:System.Windows.LocalValueEntry.Equals(System.Object)">
      <summary>Determines whether two <see cref="T:System.Windows.LocalValueEntry" /> instances are equal.</summary>
      <returns>This <see cref="M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)" /> implementation compares the values of the <see cref="P:System.Windows.LocalValueEntry.Property" />, and potentially compares the values of <see cref="P:System.Windows.LocalValueEntry.Value" />. The <see cref="P:System.Windows.LocalValueEntry.Property" /> component of a <see cref="T:System.Windows.LocalValueEntry" /> is a value type, so will always be a bitwise comparison. For the <see cref="P:System.Windows.LocalValueEntry.Value" /> component, this implementation employs a bitwise comparison if it is a value type. For locally set properties that have reference types, the behavior is deferred to that type's equality determination mechanisms, because it just uses the == operator on the two values internally. By default, this would be a reference equality of the values and thus the equality of the entire <see cref="T:System.Windows.LocalValueEntry" /> would become a reference equality. </returns>
      <param name="obj">The <see cref="T:System.Windows.LocalValueEntry" /> to compare with the current <see cref="T:System.Windows.LocalValueEntry" />.</param>
    </member>
    <member name="M:System.Windows.LocalValueEntry.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Windows.LocalValueEntry" />.</summary>
      <returns>A signed 32-bit integer value.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)">
      <summary>Compares the specified <see cref="T:System.Windows.LocalValueEntry" /> instances to determine whether they are the same.</summary>
      <returns>true if the <paramref name="obj1" /> <see cref="T:System.Windows.LocalValueEntry" /> is equal to the <paramref name="obj2" /> <see cref="T:System.Windows.LocalValueEntry" />; otherwise, false.</returns>
      <param name="obj1">The first instance to compare.</param>
      <param name="obj2">The second instance to compare.</param>
    </member>
    <member name="M:System.Windows.LocalValueEntry.op_Inequality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)">
      <summary>Compares the specified <see cref="T:System.Windows.LocalValueEnumerator" /> instances to determine whether they are different.</summary>
      <returns>This implementation compares the values of the <see cref="P:System.Windows.LocalValueEntry.Property" /> and <see cref="P:System.Windows.LocalValueEntry.Value" /> components of a <see cref="T:System.Windows.LocalValueEntry" />. The <see cref="P:System.Windows.LocalValueEntry.Property" /> component of a <see cref="T:System.Windows.LocalValueEntry" /> is always a value type, so this comparison will always be a bitwise comparison. For the <see cref="P:System.Windows.LocalValueEntry.Value" /> component, this implementation employs a bitwise comparison if it is a value type. For locally set properties that have reference types, the behavior is deferred to that type's equality determination mechanisms, because it uses the == operator on the two values internally. By default, this is a reference equality of the values. </returns>
      <param name="obj1">The first instance to compare.</param>
      <param name="obj2">The second instance to compare.</param>
    </member>
    <member name="P:System.Windows.LocalValueEntry.Property">
      <summary>Gets the identifier for the locally set dependency property that is represented by this entry. </summary>
      <returns>The identifier for the locally set dependency property.</returns>
    </member>
    <member name="P:System.Windows.LocalValueEntry.Value">
      <summary>Gets the value of the locally set dependency property. </summary>
      <returns>The value of the locally set dependency property as an object. </returns>
    </member>
    <member name="T:System.Windows.LocalValueEnumerator">
      <summary>Provides enumeration support for the local values of any dependency properties that exist on a <see cref="T:System.Windows.DependencyObject" />.</summary>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.Count">
      <summary>Gets the number of items that are represented in the collection. </summary>
      <returns>The number of items in the collection.</returns>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.Current">
      <summary>Gets the current element in the collection.</summary>
      <returns>The current <see cref="T:System.Windows.LocalValueEntry" /> in the collection.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.Equals(System.Object)">
      <summary>Determines whether the provided <see cref="T:System.Windows.LocalValueEnumerator" /> is equivalent to this <see cref="T:System.Windows.LocalValueEnumerator" />.</summary>
      <returns>true if the specified <see cref="T:System.Windows.LocalValueEnumerator" /> is equal to the current <see cref="T:System.Windows.LocalValueEnumerator" />; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Windows.LocalValueEnumerator" /> to compare with the current <see cref="T:System.Windows.LocalValueEnumerator" />.</param>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.GetHashCode">
      <summary>Returns a hash code for the current <see cref="T:System.Windows.LocalValueEnumerator" />.</summary>
      <returns>A 32-bit integer hash code.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.op_Equality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)">
      <summary>Compares whether two specified <see cref="T:System.Windows.LocalValueEnumerator" /> objects are the same.</summary>
      <returns>true if the <paramref name="obj1" /><see cref="T:System.Windows.LocalValueEnumerator" /> is equal to the <paramref name="obj2" /><see cref="T:System.Windows.LocalValueEnumerator" />; otherwise, false.</returns>
      <param name="obj1">The first object to compare.</param>
      <param name="obj2">The second object to compare.</param>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.op_Inequality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)">
      <summary>Compares two specified <see cref="T:System.Windows.LocalValueEnumerator" /> objects to determine whether they are not the same.</summary>
      <returns>true if the instances are not equal; otherwise, false.</returns>
      <param name="obj1">The first object to compare.</param>
      <param name="obj2">The second object to compare.</param>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.System#Collections#IEnumerator#Current">
      <summary>For a description of this members, see <see cref="P:System.Collections.IEnumerator.Current" />.</summary>
      <returns>The current element in the collection.</returns>
    </member>
    <member name="T:System.Windows.NameScope">
      <summary>Implements base WPF support for the <see cref="T:System.Windows.Markup.INameScope" /> methods that store or retrieve name-object mappings into a particular XAML namescope. Adds attached property support to make it simpler to get or set XAML namescope names dynamically at the element level..</summary>
    </member>
    <member name="M:System.Windows.NameScope.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.NameScope" /> class.</summary>
    </member>
    <member name="M:System.Windows.NameScope.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Adds an item to the collection.</summary>
      <param name="item">A <see cref="T:System.Collections.Generic.KeyValuePair`2" />  (key is <see cref="T:System.String" />, value is <see cref="T:System.Object" />) that represents the name mapping to add to the XAML namescope.</param>
      <exception cref="T:System.ArgumentException">Either or both components of <paramref name="item" /> are null.</exception>
    </member>
    <member name="M:System.Windows.NameScope.Add(System.String,System.Object)">
      <summary>Adds an item to the collection.</summary>
      <param name="key">The string key, which is the name of the XAML namescope mapping to add.</param>
      <param name="value">The object value, which is the object reference of the XAML namescope mapping to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> or <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Windows.NameScope.Clear">
      <summary>Removes all items from the collection.</summary>
    </member>
    <member name="M:System.Windows.NameScope.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Determines whether the collection contains a specified item. </summary>
      <returns>true if the specified <see cref="T:System.Collections.Generic.KeyValuePair`2" /> identifies an existing mapping in this <see cref="T:System.Windows.NameScope" /> . false if the specified <see cref="T:System.Collections.Generic.KeyValuePair`2" /> does not exist in the current <see cref="T:System.Windows.NameScope" />.</returns>
      <param name="item">The item to find in the collection, specified as a <see cref="T:System.Collections.Generic.KeyValuePair`2" />  (key is <see cref="T:System.String" />, value is <see cref="T:System.Object" />).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Windows.NameScope.ContainsKey(System.String)">
      <summary>Returns whether a provided name already exists in this <see cref="T:System.Windows.NameScope" />.</summary>
      <returns>true if the specified <paramref name="key" /> identifies a name for an existing mapping in this <see cref="T:System.Windows.NameScope" />. false if the specified <paramref name="key" /> does not exist in the current <see cref="T:System.Windows.NameScope" />.</returns>
      <param name="key">The string key to find.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Windows.NameScope.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Copies the elements of the collection to an array, starting at a particular array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the collection The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Windows.NameScope.Count">
      <summary>Returns the number of items in the collection of mapped names in this <see cref="T:System.Windows.NameScope" />.</summary>
      <returns>The number of items in the collection.</returns>
    </member>
    <member name="M:System.Windows.NameScope.FindName(System.String)">
      <summary>Returns the corresponding object in the XAML namescope maintained by this <see cref="T:System.Windows.NameScope" />, based on a provided name string.</summary>
      <returns>The requested object that is mapped with <paramref name="name" />. Can return null if <paramref name="name" /> was provided as null or empty string, or if no matching object was found.</returns>
      <param name="name">Name portion of an existing mapping to retrieve the object portion for.</param>
    </member>
    <member name="M:System.Windows.NameScope.GetNameScope(System.Windows.DependencyObject)">
      <summary>Provides the attached property get accessor for the <see cref="P:System.Windows.NameScope.NameScope" /> attached property.</summary>
      <returns>A XAML namescope, as an <see cref="T:System.Windows.Markup.INameScope" /> instance.</returns>
      <param name="dependencyObject">The object to get the XAML namescope from.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> is null.</exception>
    </member>
    <member name="P:System.Windows.NameScope.IsReadOnly">
      <summary>Gets a value indicating whether the collection is read-only.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="P:System.Windows.NameScope.Item(System.String)">
      <summary>Gets or sets the item with the specified key. </summary>
      <returns>The value of the object mapped by the XAML name provided as <paramref name="key" />.</returns>
      <param name="key">The string name for the XAML name mapping to get or set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is provided as null.-or-<paramref name="value" /> is provided as null for a set operation.</exception>
    </member>
    <member name="P:System.Windows.NameScope.Keys">
      <summary>Gets a collection of the keys in the <see cref="T:System.Windows.NameScope" /> dictionary.</summary>
      <returns>A collection of the keys in the <see cref="T:System.Windows.NameScope" /> dictionary.</returns>
    </member>
    <member name="P:System.Windows.NameScope.NameScope">
      <summary>Gets or sets dynamically attached <see cref="T:System.Windows.NameScope" /> instances. </summary>
      <returns>The attached name scope on a particular object.</returns>
    </member>
    <member name="F:System.Windows.NameScope.NameScopeProperty">
      <summary>Identifies the <see cref="P:System.Windows.NameScope.NameScope" />  attached property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.NameScope.NameScope" /> attached property.</returns>
    </member>
    <member name="M:System.Windows.NameScope.RegisterName(System.String,System.Object)">
      <summary>Registers a new name-object pair into the current XAML namescope.</summary>
      <param name="name">The name to use for mapping the given object.</param>
      <param name="scopedElement">The object to be mapped to the provided name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="scopedElement" /> was provided as null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> was provided as empty string- or -<paramref name="name" /> provided was rejected by the parser, because it contained characters that are invalid for a XAML name- or -<paramref name="name" /> provided would result in a duplicate name registration.</exception>
    </member>
    <member name="M:System.Windows.NameScope.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Removes the specific object from the collection.</summary>
      <returns>true if item was successfully removed from the collection, otherwise false. Also returns false if the item was not found in the collection.</returns>
      <param name="item">The object to remove from the collection, specified as a <see cref="T:System.Collections.Generic.KeyValuePair`2" />  (key is <see cref="T:System.String" />, value is <see cref="T:System.Object" />).</param>
    </member>
    <member name="M:System.Windows.NameScope.Remove(System.String)">
      <summary>Removes a mapping for a specified name from the collection.</summary>
      <returns>true if item was successfully removed from the collection, otherwise false. Also returns false if the item was not found in the collection.</returns>
      <param name="key">The string key, which is the name of the XAML namescope mapping to remove.</param>
    </member>
    <member name="M:System.Windows.NameScope.SetNameScope(System.Windows.DependencyObject,System.Windows.Markup.INameScope)">
      <summary>Provides the attached property set accessor for the <see cref="P:System.Windows.NameScope.NameScope" /> attached property.</summary>
      <param name="dependencyObject">Object to change XAML namescope for.</param>
      <param name="value">The new XAML namescope, using an interface cast.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> is null.</exception>
    </member>
    <member name="M:System.Windows.NameScope.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An enumerator that iterates through a collection.</returns>
    </member>
    <member name="M:System.Windows.NameScope.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An enumerator that iterates through a collection.</returns>
    </member>
    <member name="M:System.Windows.NameScope.TryGetValue(System.String,System.Object@)">
      <summary>Gets the value associated with the specified key.</summary>
      <returns>true if the <see cref="T:System.Windows.NameScope" /> contains a mapping for the name provided as <paramref name="key" />. Otherwise, false.</returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, a null object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Windows.NameScope.UnregisterName(System.String)">
      <summary>Removes a name-object mapping from the XAML namescope.</summary>
      <param name="name">The name of the mapping to remove.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> was provided as empty string.- or -<paramref name="name" /> provided had not been registered.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="P:System.Windows.NameScope.Values">
      <summary>Gets a collection of the values in the <see cref="T:System.Windows.NameScope" /> dictionary.</summary>
      <returns>A collection of the values in the <see cref="T:System.Windows.NameScope" /> dictionary.</returns>
    </member>
    <member name="T:System.Windows.Point">
      <summary>Represents an x- and y-coordinate pair in two-dimensional space.</summary>
    </member>
    <member name="M:System.Windows.Point.#ctor(System.Double,System.Double)">
      <summary>Creates a new <see cref="T:System.Windows.Point" /> structure that contains the specified coordinates. </summary>
      <param name="x">The x-coordinate of the new <see cref="T:System.Windows.Point" /> structure. </param>
      <param name="y">The y-coordinate of the new <see cref="T:System.Windows.Point" /> structure. </param>
    </member>
    <member name="M:System.Windows.Point.Add(System.Windows.Point,System.Windows.Vector)">
      <summary>Adds a <see cref="T:System.Windows.Vector" /> to a <see cref="T:System.Windows.Point" /> and returns the result as a <see cref="T:System.Windows.Point" /> structure.</summary>
      <returns>Returns the sum of <paramref name="point" /> and <paramref name="vector" />.</returns>
      <param name="point">The <see cref="T:System.Windows.Point" /> structure to add.</param>
      <param name="vector">The <see cref="T:System.Windows.Vector" /> structure to add. </param>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is a <see cref="T:System.Windows.Point" /> and whether it contains the same coordinates as this <see cref="T:System.Windows.Point" />. </summary>
      <returns>true if <paramref name="o" /> is a <see cref="T:System.Windows.Point" /> and contains the same <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values as this <see cref="T:System.Windows.Point" />; otherwise, false.</returns>
      <param name="o">The <see cref="T:System.Object" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Windows.Point)">
      <summary>Compares two <see cref="T:System.Windows.Point" /> structures for equality.</summary>
      <returns>true if both <see cref="T:System.Windows.Point" /> structures contain the same <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values; otherwise, false.</returns>
      <param name="value">The point to compare to this instance.</param>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Windows.Point,System.Windows.Point)">
      <summary>Compares two <see cref="T:System.Windows.Point" /> structures for equality. </summary>
      <returns>true if <paramref name="point1" /> and <paramref name="point2" /> contain the same <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values; otherwise, false.</returns>
      <param name="point1">The first point to compare.</param>
      <param name="point2">The second point to compare.</param>
    </member>
    <member name="M:System.Windows.Point.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Windows.Point" />.</summary>
      <returns>The hash code for this <see cref="T:System.Windows.Point" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Point.Multiply(System.Windows.Point,System.Windows.Media.Matrix)">
      <summary>Transforms the specified <see cref="T:System.Windows.Point" /> structure by the specified <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <returns>The transformed point. </returns>
      <param name="point">The point to transform.</param>
      <param name="matrix">The transformation matrix.</param>
    </member>
    <member name="M:System.Windows.Point.Offset(System.Double,System.Double)">
      <summary>Offsets a point's <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> coordinates by the specified amounts.</summary>
      <param name="offsetX">The amount to offset the point's<see cref="P:System.Windows.Point.X" /> coordinate. </param>
      <param name="offsetY">The amount to offset thepoint's <see cref="P:System.Windows.Point.Y" /> coordinate.</param>
    </member>
    <member name="M:System.Windows.Point.op_Addition(System.Windows.Point,System.Windows.Vector)">
      <summary>Translates the specified <see cref="T:System.Windows.Point" /> by the specified <see cref="T:System.Windows.Vector" /> and returns the result.</summary>
      <returns>The result of translating the specified point by the specified vector.</returns>
      <param name="point">The point to translate.</param>
      <param name="vector">The amount by which to translate <paramref name="point" />.</param>
    </member>
    <member name="M:System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)">
      <summary>Compares two <see cref="T:System.Windows.Point" /> structures for equality. </summary>
      <returns>true if both the <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> coordinates of <paramref name="point1" /> and <paramref name="point2" /> are equal; otherwise, false.</returns>
      <param name="point1">The first <see cref="T:System.Windows.Point" /> structure to compare.</param>
      <param name="point2">The second <see cref="T:System.Windows.Point" /> structure to compare.</param>
    </member>
    <member name="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Vector">
      <summary>Creates a <see cref="T:System.Windows.Vector" /> structure with an <see cref="P:System.Windows.Vector.X" /> value equal to the point's <see cref="P:System.Windows.Point.X" /> value and a <see cref="P:System.Windows.Vector.Y" /> value equal to the point's <see cref="P:System.Windows.Point.Y" /> value.</summary>
      <returns>A vector with an <see cref="P:System.Windows.Vector.X" /> value equal to the point's <see cref="P:System.Windows.Point.X" /> value and a <see cref="P:System.Windows.Vector.Y" /> value equal to the point's <see cref="P:System.Windows.Point.Y" /> value.</returns>
      <param name="point">The point to convert.</param>
    </member>
    <member name="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Size">
      <summary>Creates a <see cref="T:System.Windows.Size" /> structure with a <see cref="P:System.Windows.Size.Width" /> equal to this point's <see cref="P:System.Windows.Point.X" /> value and a <see cref="P:System.Windows.Size.Height" /> equal to this point's <see cref="P:System.Windows.Point.Y" /> value.</summary>
      <returns>A <see cref="T:System.Windows.Size" /> structure with a <see cref="P:System.Windows.Size.Width" /> equal to this point's <see cref="P:System.Windows.Point.X" /> value and a <see cref="P:System.Windows.Size.Height" /> equal to this point's <see cref="P:System.Windows.Point.Y" /> value.</returns>
      <param name="point">The point to convert.</param>
    </member>
    <member name="M:System.Windows.Point.op_Inequality(System.Windows.Point,System.Windows.Point)">
      <summary>Compares two <see cref="T:System.Windows.Point" /> structures for inequality. </summary>
      <returns>true if <paramref name="point1" /> and <paramref name="point2" /> have different <see cref="P:System.Windows.Point.X" /> or <see cref="P:System.Windows.Point.Y" /> coordinates; false if <paramref name="point1" /> and <paramref name="point2" /> have the same <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> coordinates.</returns>
      <param name="point1">The first point to compare.</param>
      <param name="point2">The second point to compare.</param>
    </member>
    <member name="M:System.Windows.Point.op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)">
      <summary>Transforms the specified <see cref="T:System.Windows.Point" /> by the specified <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>The result of transforming the specified point using the specified matrix.</returns>
      <param name="point">The point to transform. </param>
      <param name="matrix">The transformation matrix. </param>
    </member>
    <member name="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Point)">
      <summary>Subtracts the specified <see cref="T:System.Windows.Point" /> from another specified <see cref="T:System.Windows.Point" /> and returns the difference as a <see cref="T:System.Windows.Vector" />.</summary>
      <returns>The difference between <paramref name="point1" /> and <paramref name="point2" />.</returns>
      <param name="point1">The point from which <paramref name="point2" /> is subtracted.</param>
      <param name="point2">The point to subtract from <paramref name="point1" />.</param>
    </member>
    <member name="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Vector)">
      <summary>Subtracts the specified <see cref="T:System.Windows.Vector" /> from the specified <see cref="T:System.Windows.Point" /> and returns the resulting <see cref="T:System.Windows.Point" />.</summary>
      <returns>The difference between <paramref name="point" /> and <paramref name="vector" />.</returns>
      <param name="point">The point from which <paramref name="vector" /> is subtracted. </param>
      <param name="vector">The vector to subtract from <paramref name="point1" /></param>
    </member>
    <member name="M:System.Windows.Point.Parse(System.String)">
      <summary>Constructs a <see cref="T:System.Windows.Point" /> from the specified <see cref="T:System.String" />.</summary>
      <returns>The equivalent <see cref="T:System.Windows.Point" /> structure. </returns>
      <param name="source">A string representation of a point.</param>
      <exception cref="T:System.FormatException">
        <paramref name="source" /> is not composed of two comma- or space-delimited double values.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> does not contain two numbers.-or-<paramref name="source" /> contains too many delimiters.</exception>
    </member>
    <member name="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Point)">
      <summary>Subtracts the specified <see cref="T:System.Windows.Point" /> from another specified <see cref="T:System.Windows.Point" /> and returns the difference as a <see cref="T:System.Windows.Vector" />.</summary>
      <returns>The difference between <paramref name="point1" /> and <paramref name="point2" />.</returns>
      <param name="point1">The point from which <paramref name="point2" /> is subtracted. </param>
      <param name="point2">The point to subtract from <paramref name="point1" />.</param>
    </member>
    <member name="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Vector)">
      <summary>Subtracts the specified <see cref="T:System.Windows.Vector" /> from the specified <see cref="T:System.Windows.Point" /> and returns the resulting <see cref="T:System.Windows.Point" />. </summary>
      <returns>The difference between <paramref name="point" /> and <paramref name="vector" />.</returns>
      <param name="point">The point from which <paramref name="vector" /> is subtracted.</param>
      <param name="vector">The <paramref name="vector" /> to subtract from <paramref name="point" />.</param>
    </member>
    <member name="M:System.Windows.Point.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <returns>A string containing the value of the current instance in the specified format. </returns>
      <param name="format">The string specifying the format to use. -or- null to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
      <param name="provider">The IFormatProvider to use to format the value. -or- null to obtain the numeric format information from the current locale setting of the operating system.</param>
    </member>
    <member name="M:System.Windows.Point.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Point" />. </summary>
      <returns>A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values of this <see cref="T:System.Windows.Point" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Point.ToString(System.IFormatProvider)">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Point" />. </summary>
      <returns>A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values of this <see cref="T:System.Windows.Point" /> structure.</returns>
      <param name="provider">Culture-specific formatting information.</param>
    </member>
    <member name="P:System.Windows.Point.X">
      <summary>Gets or sets the <see cref="P:System.Windows.Point.X" />-coordinate value of this <see cref="T:System.Windows.Point" /> structure. </summary>
      <returns>The <see cref="P:System.Windows.Point.X" />-coordinate value of this <see cref="T:System.Windows.Point" /> structure.  The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Point.Y">
      <summary>Gets or sets the <see cref="P:System.Windows.Point.Y" />-coordinate value of this <see cref="T:System.Windows.Point" />. </summary>
      <returns>The <see cref="P:System.Windows.Point.Y" />-coordinate value of this <see cref="T:System.Windows.Point" /> structure.  The default value is 0.</returns>
    </member>
    <member name="T:System.Windows.PointConverter">
      <summary>Converts instances of other types to and from a <see cref="T:System.Windows.Point" />. </summary>
    </member>
    <member name="M:System.Windows.PointConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.PointConverter" /> class. </summary>
    </member>
    <member name="M:System.Windows.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object can be converted from a given type to an instance of a <see cref="T:System.Windows.Point" />.  </summary>
      <returns>true if the type can be converted to a <see cref="T:System.Windows.Point" />; otherwise, false.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="sourceType">The type of the source that is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of a <see cref="T:System.Windows.Point" /> can be converted to a different type. </summary>
      <returns>true if this <see cref="T:System.Windows.Point" /> can be converted to <paramref name="destinationType" />; otherwise, false.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="destinationType">The desired type this <see cref="T:System.Windows.Point" /> is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Point" />. </summary>
      <returns>The <see cref="T:System.Windows.Point" /> created from converting <paramref name="value" />.</returns>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="culture">Cultural information to respect during conversion.</param>
      <param name="value">The object being converted.</param>
      <exception cref="T:System.NotSupportedException">Thrown if the specified object is NULL or is a type that cannot be converted to a <see cref="T:System.Windows.Point" />.</exception>
    </member>
    <member name="M:System.Windows.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert a <see cref="T:System.Windows.Point" /> to a specified type. </summary>
      <returns>The object created from converting this <see cref="T:System.Windows.Point" />.</returns>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="culture">Cultural information to respect during conversion.</param>
      <param name="value">The <see cref="T:System.Windows.Point" /> to convert.</param>
      <param name="destinationType">The type to convert this <see cref="T:System.Windows.Point" /> to.</param>
      <exception cref="T:System.NotSupportedException">Thrown if <paramref name="value" /> is null or is not a <see cref="T:System.Windows.Point" />, or if the <paramref name="destinationType" /> is not one of the valid types for conversion.</exception>
    </member>
    <member name="T:System.Windows.PropertyChangedCallback">
      <summary>Represents the callback that is invoked when the effective property value of a dependency property changes.</summary>
      <param name="d">The <see cref="T:System.Windows.DependencyObject" /> on which the property has changed value.</param>
      <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
    </member>
    <member name="T:System.Windows.PropertyMetadata">
      <summary>Defines certain behavior aspects of a dependency property as it is applied to a specific type, including conditions it was registered with. </summary>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class. </summary>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class with a specified default value for the dependency property that this metadata will be applied to. </summary>
      <param name="defaultValue">The default value to specify for a dependency property, usually provided as a value of some specific type.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="defaultValue" /> cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue" />; see Remarks.</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class with the specified default value and <see cref="T:System.Windows.PropertyChangedCallback" /> implementation reference. </summary>
      <param name="defaultValue">The default value of the dependency property, usually provided as a value of some specific type.</param>
      <param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="defaultValue" /> cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue" />; see Remarks.</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class with the specified default value and callbacks. </summary>
      <param name="defaultValue">The default value of the dependency property, usually provided as a value of some specific type.</param>
      <param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
      <param name="coerceValueCallback">Reference to a handler implementation that is to be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="defaultValue" /> cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue" />; see Remarks.</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class with the specified <see cref="T:System.Windows.PropertyChangedCallback" /> implementation reference. </summary>
      <param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
    </member>
    <member name="P:System.Windows.PropertyMetadata.CoerceValueCallback">
      <summary>Gets or sets a reference to a <see cref="T:System.Windows.CoerceValueCallback" /> implementation specified in this metadata.</summary>
      <returns>A <see cref="T:System.Windows.CoerceValueCallback" /> implementation reference.</returns>
      <exception cref="T:System.InvalidOperationException">Cannot set a metadata property once it is applied to a dependency property operation.</exception>
    </member>
    <member name="P:System.Windows.PropertyMetadata.DefaultValue">
      <summary> Gets or sets the default value of the dependency property. </summary>
      <returns>The default value of the property. The default value on a <see cref="T:System.Windows.PropertyMetadata" /> instance created with the parameterless constructor will be <see cref="F:System.Windows.DependencyProperty.UnsetValue" />; see Remarks.</returns>
      <exception cref="T:System.ArgumentException">Cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> once created; see Remarks.</exception>
      <exception cref="T:System.InvalidOperationException">Cannot set a metadata property once it is applied to a dependency property operation.</exception>
    </member>
    <member name="P:System.Windows.PropertyMetadata.IsSealed">
      <summary>Gets a value that determines whether the metadata has been applied to a property in some way, resulting in the immutable state of that metadata instance. </summary>
      <returns>true if the metadata instance is immutable; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)">
      <summary>Merges this metadata with the base metadata. </summary>
      <param name="baseMetadata">The base metadata to merge with this instance's values.</param>
      <param name="dp">The dependency property to which this metadata is being applied.</param>
    </member>
    <member name="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)">
      <summary>Called when this metadata has been applied to a property, which indicates that the metadata is being sealed. </summary>
      <param name="dp">The dependency property to which the metadata has been applied.</param>
      <param name="targetType">The type associated with this metadata if this is type-specific metadata. If this is default metadata, this value is a null reference.</param>
    </member>
    <member name="P:System.Windows.PropertyMetadata.PropertyChangedCallback">
      <summary>Gets or sets a reference to a <see cref="T:System.Windows.PropertyChangedCallback" /> implementation specified in this metadata.</summary>
      <returns>A <see cref="T:System.Windows.PropertyChangedCallback" /> implementation reference.</returns>
      <exception cref="T:System.InvalidOperationException">Cannot set a metadata property once it is applied to a dependency property operation.</exception>
    </member>
    <member name="T:System.Windows.Rect">
      <summary>Describes the width, height, and location of a rectangle. </summary>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that has the specified x-coordinate, y-coordinate, width, and height. </summary>
      <param name="x">The x-coordinate of the top-left corner of the rectangle.</param>
      <param name="y">The y-coordinate of the top-left corner of the rectangle.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="width" /> is a negative value.-or-<paramref name="height" /> is a negative value.</exception>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Point)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that is exactly large enough to contain the two specified points. </summary>
      <param name="point1">The first point that the new rectangle must contain.</param>
      <param name="point2">The second point that the new rectangle must contain.</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Size)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that has the specified top-left corner location and the specified width and height. </summary>
      <param name="location">A point that specifies the location of the top-left corner of the rectangle.</param>
      <param name="size">A <see cref="T:System.Windows.Size" /> structure that specifies the width and height of the rectangle.</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Vector)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that is exactly large enough to contain the specified point and the sum of the specified point and the specified vector. </summary>
      <param name="point">The first point the rectangle must contain.</param>
      <param name="vector">The amount to offset the specified point. The resulting rectangle will be exactly large enough to contain both points.</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Size)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that is of the specified size and is located at (0,0).  </summary>
      <param name="size">A <see cref="T:System.Windows.Size" /> structure that specifies the width and height of the rectangle.</param>
    </member>
    <member name="P:System.Windows.Rect.Bottom">
      <summary>Gets the y-axis value of the bottom of the rectangle. </summary>
      <returns>The y-axis value of the bottom of the rectangle. If the rectangle is empty, the value is <see cref="F:System.Double.NegativeInfinity" /> .</returns>
    </member>
    <member name="P:System.Windows.Rect.BottomLeft">
      <summary>Gets the position of the bottom-left corner of the rectangle </summary>
      <returns>The position of the bottom-left corner of the rectangle.</returns>
    </member>
    <member name="P:System.Windows.Rect.BottomRight">
      <summary>Gets the position of the bottom-right corner of the rectangle. </summary>
      <returns>The position of the bottom-right corner of the rectangle.</returns>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Double,System.Double)">
      <summary>Indicates whether the rectangle contains the specified x-coordinate and y-coordinate. </summary>
      <returns>true if (<paramref name="x" />, <paramref name="y" />) is contained by the rectangle; otherwise, false.</returns>
      <param name="x">The x-coordinate of the point to check.</param>
      <param name="y">The y-coordinate of the point to check.</param>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Windows.Point)">
      <summary>Indicates whether the rectangle contains the specified point.</summary>
      <returns>true if the rectangle contains the specified point; otherwise, false.</returns>
      <param name="point">The point to check.</param>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Windows.Rect)">
      <summary>Indicates whether the rectangle contains the specified rectangle. </summary>
      <returns>true if <paramref name="rect" /> is entirely contained by the rectangle; otherwise, false.</returns>
      <param name="rect">The rectangle to check.</param>
    </member>
    <member name="P:System.Windows.Rect.Empty">
      <summary>Gets a special value that represents a rectangle with no position or area. </summary>
      <returns>The empty rectangle, which has <see cref="P:System.Windows.Rect.X" /> and <see cref="P:System.Windows.Rect.Y" /> property values of <see cref="F:System.Double.PositiveInfinity" />, and has <see cref="P:System.Windows.Rect.Width" /> and <see cref="P:System.Windows.Rect.Height" /> property values of <see cref="F:System.Double.NegativeInfinity" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Object)">
      <summary>Indicates whether the specified object is equal to the current rectangle.</summary>
      <returns>true if <paramref name="o" /> is a <see cref="T:System.Windows.Rect" /> and has the same <see cref="P:System.Windows.Rect.Location" /> and <see cref="P:System.Windows.Rect.Size" /> values as the current rectangle; otherwise, false.</returns>
      <param name="o">The object to compare to the current rectangle.</param>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Windows.Rect)">
      <summary>Indicates whether the specified rectangle is equal to the current rectangle. </summary>
      <returns>true if the specified rectangle has the same <see cref="P:System.Windows.Rect.Location" /> and <see cref="P:System.Windows.Rect.Size" /> values as the current rectangle; otherwise, false.</returns>
      <param name="value">The rectangle to compare to the current rectangle.</param>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Windows.Rect,System.Windows.Rect)">
      <summary>Indicates whether the specified rectangles are equal. </summary>
      <returns>true if the rectangles have the same <see cref="P:System.Windows.Rect.Location" /> and <see cref="P:System.Windows.Rect.Size" /> values; otherwise, false.</returns>
      <param name="rect1">The first rectangle to compare.</param>
      <param name="rect2">The second rectangle to compare.</param>
    </member>
    <member name="M:System.Windows.Rect.GetHashCode">
      <summary>Creates a hash code for the rectangle. </summary>
      <returns>A hash code for the current <see cref="T:System.Windows.Rect" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Rect.Height">
      <summary>Gets or sets the height of the rectangle. </summary>
      <returns>A positive number that represents the height of the rectangle. The default is 0.</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Rect.Height" /> is set to a negative value.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Height" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle. </exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Double,System.Double)">
      <summary>Expands or shrinks the rectangle by using the specified width and height amounts, in all directions. </summary>
      <param name="width">The amount by which to expand or shrink the left and right sides of the rectangle.</param>
      <param name="height">The amount by which to expand or shrink the top and bottom sides of the rectangle.</param>
      <exception cref="T:System.InvalidOperationException">This method is called on the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Double,System.Double)">
      <summary>Creates a rectangle that results from expanding or shrinking the specified rectangle by the specified width and height amounts, in all directions. </summary>
      <returns>The resulting rectangle. </returns>
      <param name="rect">The <see cref="T:System.Windows.Rect" /> structure to modify.</param>
      <param name="width">The amount by which to expand or shrink the left and right sides of the rectangle.</param>
      <param name="height">The amount by which to expand or shrink the top and bottom sides of the rectangle.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> is an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Windows.Size)">
      <summary>Returns the rectangle that results from expanding the specified rectangle by the specified <see cref="T:System.Windows.Size" />, in all directions. </summary>
      <returns>The resulting rectangle.</returns>
      <param name="rect">The <see cref="T:System.Windows.Rect" /> structure to modify.</param>
      <param name="size">Specifies the amount to expand the rectangle. The <see cref="T:System.Windows.Size" /> structure's <see cref="P:System.Windows.Size.Width" /> property specifies the amount to increase the rectangle's <see cref="P:System.Windows.Rect.Left" /> and <see cref="P:System.Windows.Rect.Right" /> properties. The <see cref="T:System.Windows.Size" /> structure's <see cref="P:System.Windows.Size.Height" /> property specifies the amount to increase the rectangle's <see cref="P:System.Windows.Rect.Top" /> and <see cref="P:System.Windows.Rect.Bottom" /> properties.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> is an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Size)">
      <summary>Expands the rectangle by using the specified <see cref="T:System.Windows.Size" />, in all directions. </summary>
      <param name="size">Specifies the amount to expand the rectangle. The <see cref="T:System.Windows.Size" /> structure's <see cref="P:System.Windows.Size.Width" /> property specifies the amount to increase the rectangle's <see cref="P:System.Windows.Rect.Left" /> and <see cref="P:System.Windows.Rect.Right" /> properties. The <see cref="T:System.Windows.Size" /> structure's <see cref="P:System.Windows.Size.Height" /> property specifies the amount to increase the rectangle's <see cref="P:System.Windows.Rect.Top" /> and <see cref="P:System.Windows.Rect.Bottom" /> properties. </param>
      <exception cref="T:System.InvalidOperationException">This method is called on the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</exception>
    </member>
    <member name="M:System.Windows.Rect.Intersect(System.Windows.Rect)">
      <summary>Finds the intersection of the current rectangle and the specified rectangle, and stores the result as the current rectangle. </summary>
      <param name="rect">The rectangle to intersect with the current rectangle.</param>
    </member>
    <member name="M:System.Windows.Rect.Intersect(System.Windows.Rect,System.Windows.Rect)">
      <summary>Returns the intersection of the specified rectangles. </summary>
      <returns>The intersection of the two rectangles, or <see cref="P:System.Windows.Rect.Empty" /> if no intersection exists.</returns>
      <param name="rect1">The first rectangle to compare.</param>
      <param name="rect2">The second rectangle to compare.</param>
    </member>
    <member name="M:System.Windows.Rect.IntersectsWith(System.Windows.Rect)">
      <summary>Indicates whether the specified rectangle intersects with the current rectangle. </summary>
      <returns>true if the specified rectangle intersects with the current rectangle; otherwise, false.</returns>
      <param name="rect">The rectangle to check.</param>
    </member>
    <member name="P:System.Windows.Rect.IsEmpty">
      <summary>Gets a value that indicates whether the rectangle is the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</summary>
      <returns>true if the rectangle is the <see cref="P:System.Windows.Rect.Empty" /> rectangle; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Rect.Left">
      <summary>Gets the x-axis value of the left side of the rectangle. </summary>
      <returns>The x-axis value of the left side of the rectangle.</returns>
    </member>
    <member name="P:System.Windows.Rect.Location">
      <summary>Gets or sets the position of the top-left corner of the rectangle.</summary>
      <returns>The position of the top-left corner of the rectangle. The default is (0, 0). </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Location" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle. </exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Double,System.Double)">
      <summary>Moves the rectangle by the specified horizontal and vertical amounts. </summary>
      <param name="offsetX">The amount to move the rectangle horizontally.</param>
      <param name="offsetY">The amount to move the rectangle vertically.</param>
      <exception cref="T:System.InvalidOperationException">This method is called on the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Double,System.Double)">
      <summary>Returns a rectangle that is offset from the specified rectangle by using the specified horizontal and vertical amounts. </summary>
      <returns>The resulting rectangle.</returns>
      <param name="rect">The rectangle to move.</param>
      <param name="offsetX">The horizontal offset for the new rectangle.</param>
      <param name="offsetY">The vertical offset for the new rectangle.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> is <see cref="P:System.Windows.Rect.Empty" />.</exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Windows.Vector)">
      <summary>Returns a rectangle that is offset from the specified rectangle by using the specified vector. </summary>
      <returns>The resulting rectangle.</returns>
      <param name="rect">The original rectangle.</param>
      <param name="offsetVector">A vector that specifies the horizontal and vertical offsets for the new rectangle.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> is <see cref="P:System.Windows.Rect.Empty" />.</exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Vector)">
      <summary>Moves the rectangle by the specified vector. </summary>
      <param name="offsetVector">A vector that specifies the horizontal and vertical amounts to move the rectangle.</param>
      <exception cref="T:System.InvalidOperationException">This method is called on the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</exception>
    </member>
    <member name="M:System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)">
      <summary>Compares two rectangles for exact equality.</summary>
      <returns>true if the rectangles have the same <see cref="P:System.Windows.Rect.Location" /> and <see cref="P:System.Windows.Rect.Size" /> values; otherwise, false.</returns>
      <param name="rect1">The first rectangle to compare.</param>
      <param name="rect2">The second rectangle to compare.</param>
    </member>
    <member name="M:System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)">
      <summary>Compares two rectangles for inequality.  </summary>
      <returns>true if the rectangles do not have the same <see cref="P:System.Windows.Rect.Location" /> and <see cref="P:System.Windows.Rect.Size" /> values; otherwise, false.</returns>
      <param name="rect1">The first rectangle to compare.</param>
      <param name="rect2">The second rectangle to compare.</param>
    </member>
    <member name="M:System.Windows.Rect.Parse(System.String)">
      <summary>Creates a new rectangle from the specified string representation. </summary>
      <returns>The resulting rectangle.</returns>
      <param name="source">The string representation of the rectangle, in the form "x, y, width, height".</param>
    </member>
    <member name="P:System.Windows.Rect.Right">
      <summary>Gets the x-axis value of the right side of the rectangle.  </summary>
      <returns>The x-axis value of the right side of the rectangle.</returns>
    </member>
    <member name="M:System.Windows.Rect.Scale(System.Double,System.Double)">
      <summary>Multiplies the size of the current rectangle by the specified x and y values.</summary>
      <param name="scaleX">The scale factor in the x-direction.</param>
      <param name="scaleY">The scale factor in the y-direction.</param>
    </member>
    <member name="P:System.Windows.Rect.Size">
      <summary>Gets or sets the width and height of the rectangle. </summary>
      <returns>A <see cref="T:System.Windows.Size" /> structure that specifies the width and height of the rectangle.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Size" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle. </exception>
    </member>
    <member name="M:System.Windows.Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>Formats the value of the current instance using the specified format.</summary>
      <returns>A string representation of the rectangle.</returns>
      <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation. </param>
      <param name="provider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system. </param>
    </member>
    <member name="P:System.Windows.Rect.Top">
      <summary>Gets the y-axis position of the top of the rectangle. </summary>
      <returns>The y-axis position of the top of the rectangle.</returns>
    </member>
    <member name="P:System.Windows.Rect.TopLeft">
      <summary>Gets the position of the top-left corner of the rectangle. </summary>
      <returns>The position of the top-left corner of the rectangle.</returns>
    </member>
    <member name="P:System.Windows.Rect.TopRight">
      <summary>Gets the position of the top-right corner of the rectangle. </summary>
      <returns>The position of the top-right corner of the rectangle.</returns>
    </member>
    <member name="M:System.Windows.Rect.ToString">
      <summary>Returns a string representation of the rectangle. </summary>
      <returns>A string representation of the current rectangle. The string has the following form: "<see cref="P:System.Windows.Rect.X" />,<see cref="P:System.Windows.Rect.Y" />,<see cref="P:System.Windows.Rect.Width" />,<see cref="P:System.Windows.Rect.Height" />".</returns>
    </member>
    <member name="M:System.Windows.Rect.ToString(System.IFormatProvider)">
      <summary>Returns a string representation of the rectangle by using the specified format provider. </summary>
      <returns>A string representation of the current rectangle that is determined by the specified format provider.</returns>
      <param name="provider">Culture-specific formatting information.</param>
    </member>
    <member name="M:System.Windows.Rect.Transform(System.Windows.Media.Matrix)">
      <summary>Transforms the rectangle by applying the specified matrix. </summary>
      <param name="matrix">A matrix that specifies the transformation to apply.</param>
    </member>
    <member name="M:System.Windows.Rect.Transform(System.Windows.Rect,System.Windows.Media.Matrix)">
      <summary>Returns the rectangle that results from applying the specified matrix to the specified rectangle. </summary>
      <returns>The rectangle that results from the operation.</returns>
      <param name="rect">A rectangle that is the basis for the transformation.</param>
      <param name="matrix">A matrix that specifies the transformation to apply.</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Point)">
      <summary>Expands the current rectangle exactly enough to contain the specified point. </summary>
      <param name="point">The point to include.</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect)">
      <summary>Expands the current rectangle exactly enough to contain the specified rectangle. </summary>
      <param name="rect">The rectangle to include.</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Point)">
      <summary>Creates a rectangle that is exactly large enough to include the specified rectangle and the specified point. </summary>
      <returns>A rectangle that is exactly large enough to contain the specified rectangle and the specified point.</returns>
      <param name="rect">The rectangle to include.</param>
      <param name="point">The point to include.</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Rect)">
      <summary>Creates a rectangle that is exactly large enough to contain the two specified rectangles. </summary>
      <returns>The resulting rectangle.</returns>
      <param name="rect1">The first rectangle to include.</param>
      <param name="rect2">The second rectangle to include.</param>
    </member>
    <member name="P:System.Windows.Rect.Width">
      <summary>Gets or sets the width of the rectangle.  </summary>
      <returns>A positive number that represents the width of the rectangle. The default is 0.</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Rect.Width" /> is set to a negative value.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Width" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle. </exception>
    </member>
    <member name="P:System.Windows.Rect.X">
      <summary>Gets or sets the x-axis value of the left side of the rectangle. </summary>
      <returns>The x-axis value of the left side of the rectangle.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.X" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle. </exception>
    </member>
    <member name="P:System.Windows.Rect.Y">
      <summary>Gets or sets the y-axis value of the top side of the rectangle. </summary>
      <returns>The y-axis value of the top side of the rectangle.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Y" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle. </exception>
    </member>
    <member name="T:System.Windows.RectConverter">
      <summary>Converts instances of other types to and from instances of <see cref="T:System.Windows.Rect" />.</summary>
    </member>
    <member name="M:System.Windows.RectConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.RectConverter" /> class. </summary>
    </member>
    <member name="M:System.Windows.RectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object can be converted from a given type to an instance of <see cref="T:System.Windows.Rect" />.</summary>
      <returns>true if the type can be converted to a <see cref="T:System.Windows.Rect" />; otherwise, false.</returns>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="sourceType">The type of the source that is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.RectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether a <see cref="T:System.Windows.Rect" /> can be converted to the specified type. </summary>
      <returns>true if a <see cref="T:System.Windows.Rect" /> can be converted to <paramref name="destinationType" />; otherwise, false.</returns>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="destinationType">The desired type this <see cref="T:System.Windows.Rect" /> is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.RectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Rect" />. </summary>
      <returns>The <see cref="T:System.Windows.Rect" /> created from converting <paramref name="value" />.</returns>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="culture">Cultural information which is respected when converting.</param>
      <param name="value">The object being converted.</param>
      <exception cref="T:System.NotSupportedException">Thrown if the specified object is NULL or is a type that cannot be converted to a <see cref="T:System.Windows.Rect" />.</exception>
    </member>
    <member name="M:System.Windows.RectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary> Attempts to convert a <see cref="T:System.Windows.Rect" /> to the specified type. </summary>
      <returns>The object created from converting this <see cref="T:System.Windows.Rect" />.</returns>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="culture">Cultural information which is respected during conversion.</param>
      <param name="value">The <see cref="T:System.Windows.Rect" /> to convert.</param>
      <param name="destinationType">The type to convert this <see cref="T:System.Windows.Rect" /> to.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is null.- or - <paramref name="value" /> is not a <see cref="T:System.Windows.Rect" />.- or - The <paramref name="destinationType" /> is not one of the valid types for conversion.</exception>
    </member>
    <member name="T:System.Windows.Size">
      <summary>Implements a structure that is used to describe the <see cref="T:System.Windows.Size" /> of an object. </summary>
    </member>
    <member name="M:System.Windows.Size.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Size" /> structure and assigns it an initial <paramref name="width" /> and <paramref name="height" />.</summary>
      <param name="width">The initial width of the instance of <see cref="T:System.Windows.Size" />.</param>
      <param name="height">The initial height of the instance of <see cref="T:System.Windows.Size" />.</param>
    </member>
    <member name="P:System.Windows.Size.Empty">
      <summary>Gets a value that represents a static empty <see cref="T:System.Windows.Size" />. </summary>
      <returns>An empty instance of <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Object)">
      <summary>Compares an object to an instance of <see cref="T:System.Windows.Size" /> for equality. </summary>
      <returns>true if the sizes are equal; otherwise, false.</returns>
      <param name="o">The <see cref="T:System.Object" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Windows.Size)">
      <summary>Compares a value to an instance of <see cref="T:System.Windows.Size" /> for equality. </summary>
      <returns>true if the instances of <see cref="T:System.Windows.Size" /> are equal; otherwise, false.</returns>
      <param name="value">The size to compare to this current instance of <see cref="T:System.Windows.Size" />.</param>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Windows.Size,System.Windows.Size)">
      <summary>Compares two instances of <see cref="T:System.Windows.Size" /> for equality. </summary>
      <returns>true if the instances of <see cref="T:System.Windows.Size" /> are equal; otherwise, false.</returns>
      <param name="size1">The first instance of <see cref="T:System.Windows.Size" /> to compare.</param>
      <param name="size2">The second instance of <see cref="T:System.Windows.Size" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Size.GetHashCode">
      <summary>Gets the hash code for this instance of <see cref="T:System.Windows.Size" />. </summary>
      <returns>The hash code for this instance of <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="P:System.Windows.Size.Height">
      <summary>Gets or sets the <see cref="P:System.Windows.Size.Height" /> of this instance of <see cref="T:System.Windows.Size" />. </summary>
      <returns>The <see cref="P:System.Windows.Size.Height" /> of this instance of <see cref="T:System.Windows.Size" />. The default is 0. The value cannot be negative.</returns>
    </member>
    <member name="P:System.Windows.Size.IsEmpty">
      <summary>Gets a value that indicates whether this instance of <see cref="T:System.Windows.Size" /> is <see cref="P:System.Windows.Size.Empty" />. </summary>
      <returns>true if this instance of size is <see cref="P:System.Windows.Size.Empty" />; otherwise false.</returns>
    </member>
    <member name="M:System.Windows.Size.op_Equality(System.Windows.Size,System.Windows.Size)">
      <summary>Compares two instances of <see cref="T:System.Windows.Size" /> for equality. </summary>
      <returns>true if the two instances of <see cref="T:System.Windows.Size" /> are equal; otherwise false.</returns>
      <param name="size1">The first instance of <see cref="T:System.Windows.Size" /> to compare.</param>
      <param name="size2">The second instance of <see cref="T:System.Windows.Size" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Size.op_Explicit(System.Windows.Size)~System.Windows.Vector">
      <summary>Explicitly converts an instance of <see cref="T:System.Windows.Size" /> to an instance of <see cref="T:System.Windows.Vector" />. </summary>
      <returns>A <see cref="T:System.Windows.Vector" /> equal in value to this instance of <see cref="T:System.Windows.Size" />.</returns>
      <param name="size">The <see cref="T:System.Windows.Size" /> value to be converted.</param>
    </member>
    <member name="M:System.Windows.Size.op_Explicit(System.Windows.Size)~System.Windows.Point">
      <summary>Explicitly converts an instance of <see cref="T:System.Windows.Size" /> to an instance of <see cref="T:System.Windows.Point" />. </summary>
      <returns>A <see cref="T:System.Windows.Point" /> equal in value to this instance of <see cref="T:System.Windows.Size" />.</returns>
      <param name="size">The <see cref="T:System.Windows.Size" /> value to be converted.</param>
    </member>
    <member name="M:System.Windows.Size.op_Inequality(System.Windows.Size,System.Windows.Size)">
      <summary>Compares two instances of <see cref="T:System.Windows.Size" /> for inequality. </summary>
      <returns>true if the instances of <see cref="T:System.Windows.Size" /> are not equal; otherwise false.</returns>
      <param name="size1">The first instance of <see cref="T:System.Windows.Size" /> to compare.</param>
      <param name="size2">The second instance of <see cref="T:System.Windows.Size" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Size.Parse(System.String)">
      <summary>Returns an instance of <see cref="T:System.Windows.Size" /> from a converted <see cref="T:System.String" />. </summary>
      <returns>An instance of <see cref="T:System.Windows.Size" />.</returns>
      <param name="source">A <see cref="T:System.String" /> value to parse to a <see cref="T:System.Windows.Size" /> value.</param>
    </member>
    <member name="M:System.Windows.Size.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>This type or member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <returns> The value of the current instance in the specified format.</returns>
      <param name="format"> The format to use.</param>
      <param name="provider"> The provider to use to format the value.</param>
    </member>
    <member name="M:System.Windows.Size.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents this <see cref="T:System.Windows.Size" /> object. </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance of <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="M:System.Windows.Size.ToString(System.IFormatProvider)">
      <summary>Returns a <see cref="T:System.String" /> that represents this instance of <see cref="T:System.Windows.Size" />. </summary>
      <returns>A <see cref="T:System.String" /> that represents this <see cref="T:System.Windows.Size" /> object.</returns>
      <param name="provider">An object that provides a way to control formatting.</param>
    </member>
    <member name="P:System.Windows.Size.Width">
      <summary>Gets or sets the <see cref="P:System.Windows.Size.Width" /> of this instance of <see cref="T:System.Windows.Size" />. </summary>
      <returns>The <see cref="P:System.Windows.Size.Width" /> of this instance of <see cref="T:System.Windows.Size" />. The default value is 0. The value cannot be negative.</returns>
    </member>
    <member name="T:System.Windows.SizeConverter">
      <summary>Converts instances of other types to and from instances of the <see cref="T:System.Windows.Size" /> class. </summary>
    </member>
    <member name="M:System.Windows.SizeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.SizeConverter" /> class. </summary>
    </member>
    <member name="M:System.Windows.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether a class can be converted from a given type to an instance of <see cref="T:System.Windows.Size" />. </summary>
      <returns>true if the <paramref name="sourceType" /> can be converted to an instance of <see cref="T:System.Windows.Size" />; otherwise, false.</returns>
      <param name="context">Provides contextual information about a component.</param>
      <param name="sourceType">Identifies the data type to evaluate for conversion.</param>
    </member>
    <member name="M:System.Windows.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of <see cref="T:System.Windows.Size" /> can be converted to a different type. </summary>
      <returns>true if this instance of <see cref="T:System.Windows.Size" /> can be converted to the <paramref name="destinationType" />; otherwise, false.</returns>
      <param name="context">Provides contextual information about a component.</param>
      <param name="destinationType">Identifies the data type to evaluate for conversion.</param>
    </member>
    <member name="M:System.Windows.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert a specified object to an instance of <see cref="T:System.Windows.Size" />.</summary>
      <returns>The instance of <see cref="T:System.Windows.Size" /> that is created from the converted <paramref name="source" />.</returns>
      <param name="context">Provides contextual information about a component.</param>
      <param name="culture">Culture-specific information that should be respected during conversion.</param>
      <param name="value">The source object that is being converted.</param>
    </member>
    <member name="M:System.Windows.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert an instance of <see cref="T:System.Windows.Size" /> to a specified type. </summary>
      <returns>The object that is created from the converted instance of <see cref="T:System.Windows.Size" />.</returns>
      <param name="context">Provides contextual information about a component.</param>
      <param name="culture">Culture-specific information that should be respected during conversion.</param>
      <param name="value">The instance of <see cref="T:System.Windows.Size" /> to convert.</param>
      <param name="destinationType">The type that this instance of <see cref="T:System.Windows.Size" /> is converted to.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is null or is not an instance of <see cref="T:System.Windows.Size" />, or if the <paramref name="destinationType" /> is not one of the valid destination types.</exception>
    </member>
    <member name="T:System.Windows.SplashScreen">
      <summary>Provides a startup screen for a Windows Presentation Foundation (WPF) application. </summary>
    </member>
    <member name="M:System.Windows.SplashScreen.#ctor(System.Reflection.Assembly,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.SplashScreen" /> class with the specified resource assembly. </summary>
      <param name="resourceAssembly">The assembly that contains the embedded resource.</param>
      <param name="resourceName">The name of the embedded resource.</param>
    </member>
    <member name="M:System.Windows.SplashScreen.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.SplashScreen" /> class with the specified resource. </summary>
      <param name="resourceName">The name of the embedded resource.</param>
    </member>
    <member name="M:System.Windows.SplashScreen.Close(System.TimeSpan)">
      <summary>Closes the splash screen. </summary>
      <param name="fadeoutDuration">A <see cref="T:System.TimeSpan" /> that specifies how long it will take for the splash screen to fade after the close operation has been initiated. </param>
    </member>
    <member name="M:System.Windows.SplashScreen.Show(System.Boolean)">
      <summary>Displays the splash screen. </summary>
      <param name="autoClose">true to automatically close the splash screen; false to close the splash screen manually.</param>
      <exception cref="T:System.IO.IOException">The resource specified in the constructor could not be found. </exception>
    </member>
    <member name="M:System.Windows.SplashScreen.Show(System.Boolean,System.Boolean)">
      <summary>Displays the splash screen.</summary>
      <param name="autoClose">true to automatically close the splash screen; false to close the splash screen manually.</param>
      <param name="topMost">true if the splash screen window should use the WS_EX_TOPMOST style; otherwise false.</param>
    </member>
    <member name="T:System.Windows.ValidateValueCallback">
      <summary>Represents a method used as a callback that validates the effective value of a  dependency property.</summary>
      <returns>true if the value was validated; false if the submitted value was invalid.</returns>
      <param name="value">The value to be validated.</param>
    </member>
    <member name="T:System.Windows.Vector">
      <summary>Represents a displacement in 2-D space. </summary>
    </member>
    <member name="M:System.Windows.Vector.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Vector" /> structure. </summary>
      <param name="x">The <see cref="P:System.Windows.Vector.X" />-offset of the new <see cref="T:System.Windows.Vector" />.</param>
      <param name="y">The <see cref="P:System.Windows.Vector.Y" />-offset of the new <see cref="T:System.Windows.Vector" />.</param>
    </member>
    <member name="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)">
      <summary>Translates the specified point by the specified vector and returns the resulting point.</summary>
      <returns>The result of translating <paramref name="point" /> by <paramref name="vector" />.</returns>
      <param name="vector">The amount to translate the specified point.</param>
      <param name="point">The point to translate.</param>
    </member>
    <member name="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)">
      <summary>Adds two vectors and returns the result as a <see cref="T:System.Windows.Vector" /> structure. </summary>
      <returns>The sum of <paramref name="vector1" /> and <paramref name="vector2" />.</returns>
      <param name="vector1">The first vector to add.</param>
      <param name="vector2">The second vector to add.</param>
    </member>
    <member name="M:System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)">
      <summary>Retrieves the angle, expressed in degrees, between the two specified vectors. </summary>
      <returns>The angle, in degrees, between <paramref name="vector1" /> and <paramref name="vector2" />.</returns>
      <param name="vector1">The first vector to evaluate.</param>
      <param name="vector2">The second vector to evaluate.</param>
    </member>
    <member name="M:System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)">
      <summary>Calculates the cross product of two vectors. </summary>
      <returns>The cross product of <paramref name="vector1" /> and <paramref name="vector2" />. The following formula is used to calculate the cross product: (Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)</returns>
      <param name="vector1">The first vector to evaluate.</param>
      <param name="vector2">The second vector to evaluate.</param>
    </member>
    <member name="M:System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)">
      <summary>Calculates the determinant of two vectors.</summary>
      <returns>The determinant of <paramref name="vector1" /> and <paramref name="vector2" />.</returns>
      <param name="vector1">The first vector to evaluate.</param>
      <param name="vector2">The second vector to evaluate.</param>
    </member>
    <member name="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)">
      <summary>Divides the specified vector by the specified scalar and returns the result as a <see cref="T:System.Windows.Vector" />.</summary>
      <returns>The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</returns>
      <param name="vector">The vector structure to divide.</param>
      <param name="scalar">The amount by which <paramref name="vector" /> is divided.</param>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is a <see cref="T:System.Windows.Vector" /> structure and, if it is, whether it has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector.</summary>
      <returns>true if <paramref name="o" /> is a <see cref="T:System.Windows.Vector" /> and has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector; otherwise, false.</returns>
      <param name="o">The vector to compare.</param>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Windows.Vector)">
      <summary> Compares two vectors for equality.</summary>
      <returns>true if <paramref name="value" /> has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector; otherwise, false.</returns>
      <param name="value">The vector to compare with this vector.</param>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)">
      <summary>Compares the two specified vectors for equality.</summary>
      <returns>true if t he <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are equal; otherwise, false.</returns>
      <param name="vector1">The first vector to compare.</param>
      <param name="vector2">The second vector to compare.</param>
    </member>
    <member name="M:System.Windows.Vector.GetHashCode">
      <summary>Returns the hash code for this vector. </summary>
      <returns>The hash code for this instance.</returns>
    </member>
    <member name="P:System.Windows.Vector.Length">
      <summary>Gets the length of this vector. </summary>
      <returns>The length of this vector. </returns>
    </member>
    <member name="P:System.Windows.Vector.LengthSquared">
      <summary>Gets the square of the length of this vector. </summary>
      <returns>The square of the <see cref="P:System.Windows.Vector.Length" /> of this vector.</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)">
      <summary> Multiplies the specified scalar by the specified vector and returns the resulting <see cref="T:System.Windows.Vector" />. </summary>
      <returns>The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</returns>
      <param name="scalar">The scalar to multiply.</param>
      <param name="vector">The vector to multiply.</param>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)">
      <summary> Multiplies the specified vector by the specified scalar and returns the resulting <see cref="T:System.Windows.Vector" />. </summary>
      <returns>The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</returns>
      <param name="vector">The vector to multiply.</param>
      <param name="scalar">The scalar to multiply.</param>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)">
      <summary>Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>The result of transforming <paramref name="vector" /> by <paramref name="matrix" />.</returns>
      <param name="vector">The vector structure to transform.</param>
      <param name="matrix">The transformation to apply to <paramref name="vector" />.</param>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)">
      <summary>Calculates the dot product of the two specified vectors and returns the result as a <see cref="T:System.Double" />.</summary>
      <returns>A <see cref="T:System.Double" /> containing the scalar dot product of <paramref name="vector1" /> and <paramref name="vector2" />, which is calculated using the following formula: (vector1.X * vector2.X) + (vector1.Y * vector2.Y) </returns>
      <param name="vector1">The first vector to multiply.</param>
      <param name="vector2">The second vector structure to multiply.</param>
    </member>
    <member name="M:System.Windows.Vector.Negate">
      <summary>Negates this vector. The vector has the same magnitude as before, but its direction is now opposite. </summary>
    </member>
    <member name="M:System.Windows.Vector.Normalize">
      <summary> Normalizes this vector. </summary>
    </member>
    <member name="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)">
      <summary> Translates a point by the specified vector and returns the resulting point. </summary>
      <returns>The result of translating <paramref name="point" /> by <paramref name="vector" />.</returns>
      <param name="vector">The vector used to translate <paramref name="point" />.</param>
      <param name="point">The point to translate.</param>
    </member>
    <member name="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)">
      <summary>Adds two vectors and returns the result as a vector. </summary>
      <returns>The sum of <paramref name="vector1" /> and <paramref name="vector2" />. </returns>
      <param name="vector1">The first vector to add.</param>
      <param name="vector2">The second vector to add.</param>
    </member>
    <member name="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)">
      <summary> Divides the specified vector by the specified scalar and returns the resulting vector.</summary>
      <returns>The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</returns>
      <param name="vector">The vector to divide.</param>
      <param name="scalar">The scalar by which <paramref name="vector" /> will be divided.</param>
    </member>
    <member name="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)">
      <summary> Compares two vectors for equality.</summary>
      <returns>true if the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are equal; otherwise, false.</returns>
      <param name="vector1">The first vector to compare.</param>
      <param name="vector2">The second vector to compare.</param>
    </member>
    <member name="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Point">
      <summary>Creates a <see cref="T:System.Windows.Point" /> with the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this vector. </summary>
      <returns>A point with <see cref="P:System.Windows.Point.X" />- and <see cref="P:System.Windows.Point.Y" />-coordinate values equal to the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> offset values of <paramref name="vector" />.</returns>
      <param name="vector">The vector to convert.</param>
    </member>
    <member name="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Size">
      <summary>Creates a <see cref="T:System.Windows.Size" /> from the offsets of this vector.</summary>
      <returns>A <see cref="T:System.Windows.Size" /> with a <see cref="P:System.Windows.Size.Width" /> equal to the absolute value of this vector's <see cref="P:System.Windows.Vector.X" /> property and a <see cref="P:System.Windows.Size.Height" /> equal to the absolute value of this vector's <see cref="P:System.Windows.Vector.Y" /> property.</returns>
      <param name="vector">The vector to convert.</param>
    </member>
    <member name="M:System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)">
      <summary>Compares two vectors for inequality.</summary>
      <returns>true if the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are different; otherwise, false.</returns>
      <param name="vector1">The first vector to compare.</param>
      <param name="vector2">The second vector to compare.</param>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)">
      <summary> Multiplies the specified scalar by the specified vector and returns the resulting vector. </summary>
      <returns>The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</returns>
      <param name="scalar">The scalar to multiply.</param>
      <param name="vector">The vector to multiply.</param>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)">
      <summary>Multiplies the specified vector by the specified scalar and returns the resulting vector. </summary>
      <returns>The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</returns>
      <param name="vector">The vector to multiply.</param>
      <param name="scalar">The scalar to multiply.</param>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)">
      <summary> Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix" />. </summary>
      <returns>The result of transforming <paramref name="vector" /> by <paramref name="matrix" />.</returns>
      <param name="vector">The vector to transform.</param>
      <param name="matrix">The transformation to apply to <paramref name="vector" />.</param>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)">
      <summary> Calculates the dot product of the two specified vector structures and returns the result as a <see cref="T:System.Double" />.</summary>
      <returns>Returns a <see cref="T:System.Double" /> containing the scalar dot product of <paramref name="vector1" /> and <paramref name="vector2" />, which is calculated using the following formula:vector1.X * vector2.X + vector1.Y * vector2.Y</returns>
      <param name="vector1">The first vector to multiply.</param>
      <param name="vector2">The second vector to multiply.</param>
    </member>
    <member name="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)">
      <summary>Subtracts one specified vector from another. </summary>
      <returns>The difference between <paramref name="vector1" /> and <paramref name="vector2" />. </returns>
      <param name="vector1">The vector from which <paramref name="vector2" /> is subtracted. </param>
      <param name="vector2">The vector to subtract from <paramref name="vector1" />.</param>
    </member>
    <member name="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)">
      <summary>Negates the specified vector. </summary>
      <returns>A vector with <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values opposite of the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of <paramref name="vector" />.</returns>
      <param name="vector">The vector to negate.</param>
    </member>
    <member name="M:System.Windows.Vector.Parse(System.String)">
      <summary>Converts a string representation of a vector into the equivalent <see cref="T:System.Windows.Vector" /> structure. </summary>
      <returns>The equivalent <see cref="T:System.Windows.Vector" /> structure.</returns>
      <param name="source">The string representation of the vector.</param>
    </member>
    <member name="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)">
      <summary>Subtracts the specified vector from another specified vector. </summary>
      <returns>The difference between <paramref name="vector1" /> and <paramref name="vector2" />. </returns>
      <param name="vector1">The vector from which <paramref name="vector2" /> is subtracted.</param>
      <param name="vector2">The vector to subtract from <paramref name="vector1" />.</param>
    </member>
    <member name="M:System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <returns>A string containing the value of the current instance in the specified format. </returns>
      <param name="format">The string specifying the format to use. -or- null to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
      <param name="provider">The IFormatProvider to use to format the value. -or- null to obtain the numeric format information from the current locale setting of the operating system.</param>
    </member>
    <member name="M:System.Windows.Vector.ToString">
      <summary>Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure.</summary>
      <returns>A string that represents the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this <see cref="T:System.Windows.Vector" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.ToString(System.IFormatProvider)">
      <summary>Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure with the specified formatting information. </summary>
      <returns>A string that represents the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this <see cref="T:System.Windows.Vector" />.</returns>
      <param name="provider">The culture-specific formatting information.</param>
    </member>
    <member name="P:System.Windows.Vector.X">
      <summary>Gets or sets the <see cref="P:System.Windows.Vector.X" /> component of this vector. </summary>
      <returns>The <see cref="P:System.Windows.Vector.X" /> component of this vector. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Vector.Y">
      <summary>Gets or sets the <see cref="P:System.Windows.Vector.Y" /> component of this vector. </summary>
      <returns>The <see cref="P:System.Windows.Vector.Y" /> component of this vector. The default value is 0.</returns>
    </member>
    <member name="T:System.Windows.VectorConverter">
      <summary> Converts instances of other types to and from a <see cref="T:System.Windows.Vector" />. </summary>
    </member>
    <member name="M:System.Windows.VectorConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Vector" /> structure. </summary>
    </member>
    <member name="M:System.Windows.VectorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Indicates whether an object can be converted from a given type to an instance of a <see cref="T:System.Windows.Vector" />.</summary>
      <returns>true if objects of the specified type can be converted to a <see cref="T:System.Windows.Vector" />; otherwise, false.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="sourceType">The source <see cref="T:System.Type" /> that is being queried for conversion support.</param>
    </member>
    <member name="M:System.Windows.VectorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether instances of <see cref="T:System.Windows.Vector" /> can be converted to the specified type. </summary>
      <returns>true if instances of <see cref="T:System.Windows.Vector" /> can be converted to <paramref name="destinationType" />; otherwise, false.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="destinationType">The desired type this <see cref="T:System.Windows.Vector" /> is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.VectorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified object to a <see cref="T:System.Windows.Vector" />. </summary>
      <returns>The <see cref="T:System.Windows.Vector" /> created from converting <paramref name="value" />.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="culture">Describes the <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The object being converted.</param>
    </member>
    <member name="M:System.Windows.VectorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary> Converts the specified <see cref="T:System.Windows.Vector" /> to the specified type. </summary>
      <returns>The object created from converting this <see cref="T:System.Windows.Vector" />.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="culture">Describes the <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The <see cref="T:System.Windows.Vector" /> to convert.</param>
      <param name="destinationType">The type to convert this <see cref="T:System.Windows.Vector" /> to.</param>
    </member>
    <member name="T:System.Windows.WeakEventManager">
      <summary>Provides a base class for the event manager that is used in the WeakEvent pattern. The manager adds and removes listeners for events (or callbacks) that also use the pattern.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.#ctor">
      <summary>Provides initialization of the base class values when used as the initializer by the constructor of a derived class.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
      <summary>Delivers the event being managed to each listener.</summary>
      <param name="sender">The object on which the event is being handled.</param>
      <param name="args">Event data for the event to deliver.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
      <summary>Delivers the event being managed to each listener in the provided list.</summary>
      <param name="sender">The object on which the event is being handled.</param>
      <param name="args">Event data.</param>
      <param name="list">The provided <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
      <summary>Returns the <see cref="T:System.Windows.WeakEventManager" /> implementation that is used for the provided type.</summary>
      <returns>The matching <see cref="T:System.Windows.WeakEventManager" /> implementation.</returns>
      <param name="managerType">The type to obtain the <see cref="T:System.Windows.WeakEventManager" /> for.</param>
    </member>
    <member name="P:System.Windows.WeakEventManager.Item(System.Object)">
      <summary>Gets or sets the data being stored for the provided source.</summary>
      <returns>Data being stored by the manager for this source.</returns>
      <param name="source">The zero based index of the requested source.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
      <summary>Adds the provided listener to the provided source for the event being managed.</summary>
      <param name="source">The source to attach listeners to.</param>
      <param name="listener">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
      <summary>Removes a previously added listener from the provided source.</summary>
      <param name="source">The source to remove listeners from.</param>
      <param name="listener">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
      <summary>Removes inactive listener entries from the data list for the provided source. Returns true if some entries were actually removed from the list.</summary>
      <returns>true if some entries were actually removed; otherwise, false.</returns>
      <param name="source">Source for events being listened to.</param>
      <param name="data">The data to check. This object is expected to be a <see cref="T:System.Windows.WeakEventManager.ListenerList" /> implementation.</param>
      <param name="purgeAll">Set to true to stop listening to <paramref name="source" />, and completely remove all entries from <paramref name="data" />.</param>
    </member>
    <member name="P:System.Windows.WeakEventManager.ReadLock">
      <summary>Establishes a read-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</summary>
      <returns>An object that can be used to establish a lock on the data table members and then be appropriately disposed, via a using construct.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.Remove(System.Object)">
      <summary>Removes all listeners for the given source.</summary>
      <param name="source">The source to remove listener information for.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ScheduleCleanup">
      <summary>Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
      <summary>Sets the current manager for the given manager type.</summary>
      <param name="managerType">Type to set new event manager on</param>
      <param name="manager">The new event manager.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.StartListening(System.Object)">
      <summary>When overridden in a derived class, starts listening for the event being managed. After <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />  is first called, the manager should be in the state of calling <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> or <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> whenever the relevant event from the provided source is handled.</summary>
      <param name="source">The source to begin listening on.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.StopListening(System.Object)">
      <summary>When overridden in a derived class, stops listening on the provided source for the event being managed.</summary>
      <param name="source">The source to stop listening on.</param>
    </member>
    <member name="P:System.Windows.WeakEventManager.WriteLock">
      <summary>Establishes a write-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</summary>
      <returns>An object that can be used to establish a lock on the data table members and then be appropriately disposed, via a using construct.</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager.ListenerList">
      <summary>Provides a built-in collection list for storing listeners for a <see cref="T:System.Windows.WeakEventManager" />.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class with the specified initial capacity.</summary>
      <param name="capacity">The number of items that should be allocated in the initial list.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
      <summary>Adds a listener item to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <param name="listener">The listener element to add to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
      <summary>Declares the list to be in use. This prevents direct changes to the list during iterations of the list items.</summary>
      <returns>true if the list was already declared to be in use; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.WeakEventManager.ListenerList" />, making deep copies of the values. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Count">
      <summary>Gets the number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <returns>The number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Empty">
      <summary>Gets a value that represents an empty list for purposes of comparisons.</summary>
      <returns>The empty list representation.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.EndUse">
      <summary>Unlocks the locked state initiated by <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />.</summary>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.IsEmpty">
      <summary>Gets a value that declares whether this <see cref="T:System.Windows.WeakEventManager.ListenerList" />  is empty.</summary>
      <returns>true if the list is empty; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)">
      <summary>Gets or sets a specific listener item in the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> .</summary>
      <returns>The item at that index, or a null reference if no item was at that index.</returns>
      <param name="index">The zero-based index of the listener in the list.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
      <summary>Checks to see whether the provided list is in use, and if so, sets the list reference parameter to a copy of that list rather than the original.</summary>
      <returns>true if the provided list was in use at the time of call and therefore the <paramref name="list" /> parameter reference was reset to be a copy. false if the provided list was not in use, in which case the <paramref name="list" /> parameter reference remains unaltered.</returns>
      <param name="list">The list to check for use state and potentially copy.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Purge">
      <summary>Removes all entries from the list where the underlying reference target is a null reference.</summary>
      <returns>Returns true if any entries were purged; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
      <summary>Removes the first occurrence of a listener item from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />. </summary>
      <param name="listener">The item to remove.</param>
    </member>
    <member name="T:System.Windows.Converters.Int32RectValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Int32Rect" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Converters.Int32RectValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.String" /> can be converted to an instance of <see cref="T:System.Windows.Int32Rect" />.</summary>
      <returns>Always returns true.</returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Int32Rect" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">The object to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Int32Rect" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Int32Rect" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">The string to convert.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Int32Rect" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the specified <see cref="T:System.Windows.Int32Rect" />.</returns>
      <param name="value">The object to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Windows.Converters.PointValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Point" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Converters.PointValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.String" /> can be converted to an instance of <see cref="T:System.Windows.Point" />.</summary>
      <returns>Always returns true.</returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Point" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">The object to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Point" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Point" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">The string to convert.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Point" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the specified <see cref="T:System.Windows.Point" />.</returns>
      <param name="value">The object to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Windows.Converters.RectValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Rect" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Converters.RectValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.String" /> can be converted to an instance of <see cref="T:System.Windows.Rect" />.</summary>
      <returns>Always returns true.</returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Rect" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">The object to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Rect" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Rect" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">The string to convert.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Rect" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the specified <see cref="T:System.Windows.Rect" />.</returns>
      <param name="value">The object to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Windows.Converters.SizeValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Size" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Converters.SizeValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.String" /> can be converted to an instance of <see cref="T:System.Windows.Size" />.</summary>
      <returns>Always returns true.</returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Size" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">The object to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Size" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Size" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">The string to convert.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Size" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the specified <see cref="T:System.Windows.Size" />.</returns>
      <param name="value">The object to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Windows.Converters.VectorValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Vector" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Converters.VectorValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.String" /> can be converted to an instance of <see cref="T:System.Windows.Vector" />.</summary>
      <returns>Always returns true.</returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Vector" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">The object to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Vector" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Vector" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">The string to convert.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Vector" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the specified <see cref="T:System.Windows.Vector" />.</returns>
      <param name="value">The object to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Windows.Data.DataSourceProvider">
      <summary>Common base class and contract for <see cref="T:System.Windows.Data.DataSourceProvider" /> objects, which are factories that execute some queries to produce a single object or a list of objects that you can use as binding source objects.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Data.DataSourceProvider" /> class. This is a protected constructor.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.BeginInit">
      <summary>Indicates that initialization of this object is about to begin; no implicit <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> occurs until the matched <see cref="M:System.Windows.Data.DataSourceProvider.EndInit" /> method is called.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.BeginQuery">
      <summary>When overridden in a derived class, this base class calls this method when <see cref="M:System.Windows.Data.DataSourceProvider.InitialLoad" /> or <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> has been called. The base class delays the call if refresh is deferred or initial load is disabled.</summary>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Data">
      <summary>Gets the underlying data object.</summary>
      <returns>A value of type <see cref="T:System.Object" /> that is the underlying data object.</returns>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.DataChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> property has a new value.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.DeferRefresh">
      <summary>Enters a defer cycle that you can use to change properties of the provider and delay automatic refresh.</summary>
      <returns>An <see cref="T:System.IDisposable" /> object that you can use to dispose of the calling object.</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Dispatcher">
      <summary>Gets or sets the current <see cref="T:System.Windows.Threading.Dispatcher" /> object to the UI thread to use.</summary>
      <returns>The current <see cref="T:System.Windows.Threading.Dispatcher" /> object to the UI thread to use. By default, this is the <see cref="T:System.Windows.Threading.Dispatcher" /> object that is associated with the thread on which this instance was created.</returns>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.EndInit">
      <summary>Indicates that the initialization of this object has completed; this causes a <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> if no other <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> is outstanding.</summary>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Error">
      <summary>Gets the error of the last query operation.</summary>
      <returns>A value of type <see cref="T:System.Exception" /> that is the error of the last query operation, or null if there was no error.</returns>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.InitialLoad">
      <summary>Starts the initial query to the underlying data model. The result is returned on the <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> property.</summary>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.IsInitialLoadEnabled">
      <summary>Gets or sets a value that indicates whether to prevent or delay the automatic loading of data.</summary>
      <returns>false to prevent or delay the automatic loading of data; otherwise, true. The default value is true.</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.IsRefreshDeferred">
      <summary>Gets a value that indicates whether there is an outstanding <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> in use.</summary>
      <returns>true if there is an outstanding <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> in use; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Data.DataSourceProvider.PropertyChanged" /> event with the provided arguments.</summary>
      <param name="e">Arguments of the event being raised.</param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnQueryFinished(System.Object)">
      <summary>Derived classes call this method to indicate that a query has finished.</summary>
      <param name="newData">The data that is the result of the query.</param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnQueryFinished(System.Object,System.Exception,System.Windows.Threading.DispatcherOperationCallback,System.Object)">
      <summary>Derived classes call this method to indicate that a query has finished.</summary>
      <param name="newData">The data that is the result of the query.</param>
      <param name="error">The error that occurred while running the query. This value is null if there is no error.</param>
      <param name="completionWork">Optional delegate that is used to execute completion work on the UI thread, for example, to set additional properties.</param>
      <param name="callbackArguments">Optional arguments to send as a parameter with the <paramref name="completionWork" /> delegate.</param>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.Refresh">
      <summary>Initiates a refresh operation to the underlying data model. The result is returned on the <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> property.</summary>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.System#ComponentModel#ISupportInitialize#BeginInit">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.System#ComponentModel#ISupportInitialize#EndInit">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Windows.Input.FocusNavigationDirection">
      <summary>Specifies the direction within a user interface (UI) in which a desired focus change request is attempted. The direction is either based on tab order or by relative direction in layout.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Next">
      <summary>Move focus to the next focusable element in tab order. Not supported for <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Previous">
      <summary>Move focus to the previous focusable element in tab order. Not supported for <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.First">
      <summary>Move focus to the first focusable element in tab order. Not supported for <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Last">
      <summary>Move focus to the last focusable element in tab order. Not supported for <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Left">
      <summary>Move focus to another focusable element to the left of the currently focused element.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Right">
      <summary>Move focus to another focusable element to the right of the currently focused element.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Up">
      <summary>Move focus to another focusable element upwards from the currently focused element.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Down">
      <summary>Move focus to another focusable element downwards from the currently focused element.</summary>
    </member>
    <member name="T:System.Windows.Input.Key">
      <summary>Specifies the possible key values on a keyboard. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.None">
      <summary>No key pressed. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Cancel">
      <summary>The Cancel key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Back">
      <summary>The Backspace key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Tab">
      <summary>The Tab key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.LineFeed">
      <summary>The Linefeed key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Clear">
      <summary>The Clear key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Return">
      <summary>The Return key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Enter">
      <summary>The Enter key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Pause">
      <summary>The Pause key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Capital">
      <summary>The Caps Lock key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.CapsLock">
      <summary>The Caps Lock key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.KanaMode">
      <summary>The IME Kana mode key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.HangulMode">
      <summary>The IME Hangul mode key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.JunjaMode">
      <summary>The IME Junja mode key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.FinalMode">
      <summary>The IME Final mode key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.HanjaMode">
      <summary>The IME Hanja mode key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.KanjiMode">
      <summary>The IME Kanji mode key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Escape">
      <summary>The ESC key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeConvert">
      <summary>The IME Convert key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeNonConvert">
      <summary>The IME NonConvert key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeAccept">
      <summary>The IME Accept key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeModeChange">
      <summary>The IME Mode change request. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Space">
      <summary>The Spacebar key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Prior">
      <summary>The Page Up key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageUp">
      <summary>The Page Up key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Next">
      <summary>The Page Down key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageDown">
      <summary>The Page Down key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.End">
      <summary>The End key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Home">
      <summary>The Home key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Left">
      <summary>The Left Arrow key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Up">
      <summary>The Up Arrow key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Right">
      <summary>The Right Arrow key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Down">
      <summary>The Down Arrow key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Select">
      <summary>The Select key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Print">
      <summary>The Print key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Execute">
      <summary>The Execute key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Snapshot">
      <summary>The Print Screen key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.PrintScreen">
      <summary>The Print Screen key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Insert">
      <summary>The Insert key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Delete">
      <summary>The Delete key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Help">
      <summary>The Help key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D0">
      <summary>The 0 (zero) key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D1">
      <summary>The 1 (one) key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D2">
      <summary>The 2 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D3">
      <summary>The 3 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D4">
      <summary>The 4 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D5">
      <summary>The 5 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D6">
      <summary>The 6 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D7">
      <summary>The 7 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D8">
      <summary>The 8 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D9">
      <summary>The 9 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.A">
      <summary>The A key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.B">
      <summary>The B key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.C">
      <summary>The C key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D">
      <summary>The D key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.E">
      <summary>The E key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F">
      <summary>The F key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.G">
      <summary>The G key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.H">
      <summary>The H key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.I">
      <summary>The I key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.J">
      <summary>The J key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.K">
      <summary>The K key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.L">
      <summary>The L key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.M">
      <summary>The M key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.N">
      <summary>The N key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.O">
      <summary>The O key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.P">
      <summary>The P key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Q">
      <summary>The Q key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.R">
      <summary>The R key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.S">
      <summary>The S key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.T">
      <summary>The T key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.U">
      <summary>The U key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.V">
      <summary>The V key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.W">
      <summary>The W key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.X">
      <summary>The X key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Y">
      <summary>The Y key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Z">
      <summary>The Z key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.LWin">
      <summary>The left Windows logo key (Microsoft Natural Keyboard). </summary>
    </member>
    <member name="F:System.Windows.Input.Key.RWin">
      <summary>The right Windows logo key (Microsoft Natural Keyboard). </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Apps">
      <summary>The Application key (Microsoft Natural Keyboard). </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Sleep">
      <summary>The Computer Sleep key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad0">
      <summary>The 0 key on the numeric keypad. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad1">
      <summary>The 1 key on the numeric keypad. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad2">
      <summary>The 2 key on the numeric keypad. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad3">
      <summary>The 3 key on the numeric keypad. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad4">
      <summary>The 4 key on the numeric keypad. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad5">
      <summary>The 5 key on the numeric keypad. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad6">
      <summary>The 6 key on the numeric keypad. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad7">
      <summary>The 7 key on the numeric keypad. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad8">
      <summary>The 8 key on the numeric keypad. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad9">
      <summary>The 9 key on the numeric keypad. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Multiply">
      <summary>The Multiply key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Add">
      <summary>The Add key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Separator">
      <summary>The Separator key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Subtract">
      <summary>The Subtract key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Decimal">
      <summary>The Decimal key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Divide">
      <summary>The Divide key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F1">
      <summary>The F1 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F2">
      <summary>The F2 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F3">
      <summary>The F3 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F4">
      <summary>The F4 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F5">
      <summary>The F5 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F6">
      <summary>The F6 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F7">
      <summary>The F7 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F8">
      <summary>The F8 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F9">
      <summary>The F9 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F10">
      <summary>The F10 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F11">
      <summary>The F11 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F12">
      <summary>The F12 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F13">
      <summary>The F13 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F14">
      <summary>The F14 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F15">
      <summary>The F15 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F16">
      <summary>The F16 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F17">
      <summary>The F17 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F18">
      <summary>The F18 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F19">
      <summary>The F19 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F20">
      <summary>The F20 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F21">
      <summary>The F21 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F22">
      <summary>The F22 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F23">
      <summary>The F23 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F24">
      <summary>The F24 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumLock">
      <summary>The Num Lock key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Scroll">
      <summary>The Scroll Lock key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftShift">
      <summary>The left Shift key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightShift">
      <summary>The right Shift key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftCtrl">
      <summary>The left CTRL key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightCtrl">
      <summary>The right CTRL key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftAlt">
      <summary>The left ALT key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightAlt">
      <summary>The right ALT key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserBack">
      <summary>The Browser Back key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserForward">
      <summary>The Browser Forward key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserRefresh">
      <summary>The Browser Refresh key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserStop">
      <summary>The Browser Stop key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserSearch">
      <summary>The Browser Search key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserFavorites">
      <summary>The Browser Favorites key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserHome">
      <summary>The Browser Home key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeMute">
      <summary>The Volume Mute key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeDown">
      <summary>The Volume Down key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeUp">
      <summary>The Volume Up key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaNextTrack">
      <summary>The Media Next Track key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaPreviousTrack">
      <summary>The Media Previous Track key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaStop">
      <summary>The Media Stop key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaPlayPause">
      <summary>The Media Play Pause key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchMail">
      <summary>The Launch Mail key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.SelectMedia">
      <summary>The Select Media key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchApplication1">
      <summary>The Launch Application1 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchApplication2">
      <summary>The Launch Application2 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem1">
      <summary>The OEM 1 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemSemicolon">
      <summary>The OEM Semicolon key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPlus">
      <summary>The OEM Addition key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemComma">
      <summary>The OEM Comma key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemMinus">
      <summary>The OEM Minus key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPeriod">
      <summary>The OEM Period key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem2">
      <summary>The OEM 2 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemQuestion">
      <summary>The OEM Question key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem3">
      <summary>The OEM 3 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemTilde">
      <summary>The OEM Tilde key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.AbntC1">
      <summary>The ABNT_C1 (Brazilian) key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.AbntC2">
      <summary>The ABNT_C2 (Brazilian) key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem4">
      <summary>The OEM 4 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemOpenBrackets">
      <summary>The OEM Open Brackets key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem5">
      <summary>The OEM 5 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPipe">
      <summary>The OEM Pipe key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem6">
      <summary>The OEM 6 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemCloseBrackets">
      <summary>The OEM Close Brackets key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem7">
      <summary>The OEM 7 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemQuotes">
      <summary>The OEM Quotes key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem8">
      <summary>The OEM 8 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem102">
      <summary>The OEM 102 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemBackslash">
      <summary>The OEM Backslash key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeProcessed">
      <summary>A special key masking the real key being processed by an IME. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.System">
      <summary>A special key masking the real key being processed as a system key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemAttn">
      <summary>The OEM ATTN key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeAlphanumeric">
      <summary>The DBE_ALPHANUMERIC key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemFinish">
      <summary>The OEM FINISH key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeKatakana">
      <summary>The DBE_KATAKANA key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemCopy">
      <summary>The OEM COPY key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeHiragana">
      <summary>The DBE_HIRAGANA key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemAuto">
      <summary>The OEM AUTO key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeSbcsChar">
      <summary>The DBE_SBCSCHAR key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemEnlw">
      <summary>The OEM ENLW key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeDbcsChar">
      <summary>The DBE_DBCSCHAR key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemBackTab">
      <summary>The OEM BACKTAB key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeRoman">
      <summary>The DBE_ROMAN key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Attn">
      <summary>The ATTN key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeNoRoman">
      <summary>The DBE_NOROMAN key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.CrSel">
      <summary>The CRSEL key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterWordRegisterMode">
      <summary>The DBE_ENTERWORDREGISTERMODE key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.ExSel">
      <summary>The EXSEL key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterImeConfigureMode">
      <summary>The DBE_ENTERIMECONFIGMODE key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.EraseEof">
      <summary>The ERASE EOF key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeFlushString">
      <summary>The DBE_FLUSHSTRING key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Play">
      <summary>The PLAY key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeCodeInput">
      <summary>The DBE_CODEINPUT key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Zoom">
      <summary>The ZOOM key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeNoCodeInput">
      <summary>The DBE_NOCODEINPUT key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NoName">
      <summary>A constant reserved for future use. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeDetermineString">
      <summary>The DBE_DETERMINESTRING key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Pa1">
      <summary>The PA1 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterDialogConversionMode">
      <summary>The DBE_ENTERDLGCONVERSIONMODE key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemClear">
      <summary>The OEM Clear key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DeadCharProcessed">
      <summary>The key is used with another key to create a single combined character.</summary>
    </member>
    <member name="T:System.Windows.Input.KeyConverter">
      <summary>Converts a <see cref="T:System.Windows.Input.Key" /> object to and from other types.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.Key" /> class. </summary>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object of the specified type can be converted to an instance of <see cref="T:System.Windows.Input.Key" />, using the specified context. </summary>
      <returns>true if <paramref name="sourceType" /> is of type <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="sourceType">The type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of <see cref="T:System.Windows.Input.Key" /> can be converted to the specified type, using the specified context.</summary>
      <returns>true if <paramref name="destinationType" /> is of type <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="destinationType">The type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Input.Key" />, using the specified context.</summary>
      <returns>The converted object.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="culture">Culture specific information.</param>
      <param name="source">The object to convert.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="source" /> cannot be converted.</exception>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert a <see cref="T:System.Windows.Input.Key" /> to the specified type, using the specified context.</summary>
      <returns>The converted object.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="culture">Culture specific information.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> cannot be converted to <paramref name="destinationType" />.</exception>
    </member>
    <member name="T:System.Windows.Input.KeyInterop">
      <summary>Provides static methods to convert between Win32 Virtual-Keys and the WPF <see cref="T:System.Windows.Input.Key" /> enumeration. </summary>
    </member>
    <member name="M:System.Windows.Input.KeyInterop.KeyFromVirtualKey(System.Int32)">
      <summary>Converts a Win32 Virtual-Key into WPF <see cref="T:System.Windows.Input.Key" />.</summary>
      <returns>The WPF key.</returns>
      <param name="virtualKey">The virtual key to convert.</param>
    </member>
    <member name="M:System.Windows.Input.KeyInterop.VirtualKeyFromKey(System.Windows.Input.Key)">
      <summary>Converts a WPF <see cref="T:System.Windows.Input.Key" /> into a Win32 Virtual-Key.</summary>
      <returns>The Win32 Virtual-Key.</returns>
      <param name="key">The WPF to convert.</param>
    </member>
    <member name="T:System.Windows.Input.KeyValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Input.Key" />.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.KeyValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if the specified <see cref="T:System.String" /> can be convert to an instance of <see cref="T:System.Windows.Input.Key" />.</summary>
      <returns>Always returns true.</returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if the specified <see cref="T:System.Windows.Input.Key" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">The key to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Input.Key" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Input.Key" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">The string to convert into a <see cref="T:System.Windows.Input.Key" />.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Input.Key" /> to a <see cref="T:System.String" />.</summary>
      <returns>An invariant string representation of the specified <see cref="T:System.Windows.Input.Key" />.</returns>
      <param name="value">The key to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Windows.Input.ModifierKeys">
      <summary>Specifies the set of modifier keys. </summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.None">
      <summary>No modifiers are pressed. </summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Alt">
      <summary>The ALT key. </summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Control">
      <summary>The CTRL key. </summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Shift">
      <summary>The SHIFT key. </summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Windows">
      <summary>The Windows logo key.</summary>
    </member>
    <member name="T:System.Windows.Input.ModifierKeysConverter">
      <summary>Converts a <see cref="T:System.Windows.Input.ModifierKeys" /> object to and from other types.</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.ModifierKeysConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object of the specified type can be converted to an instance of <see cref="T:System.Windows.Input.ModifierKeys" />, using the specified context.</summary>
      <returns>true if <paramref name="sourceType" /> is type <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="sourceType">The type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of <see cref="T:System.Windows.Input.ModifierKeys" /> can be converted to the specified type, using the specified context.</summary>
      <returns>true if <paramref name="destinationType" /> is type <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="destinationType">The type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Input.ModifierKeys" />, using the specified context.</summary>
      <returns>The converted object.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="culture">Culture specific information.</param>
      <param name="source">The object to convert.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="source" /> cannot be converted.</exception>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert a <see cref="T:System.Windows.Input.ModifierKeys" /> to the specified type, using the specified context.</summary>
      <returns>The converted object.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="culture">Culture specific information.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is null.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="value" /> does not map to a valid <see cref="T:System.Windows.Input.ModifierKeys" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> cannot be converted.</exception>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.IsDefinedModifierKeys(System.Windows.Input.ModifierKeys)">
      <summary>Determines whether the specified value is a valid <see cref="T:System.Windows.Input.ModifierKeys" /> value. </summary>
      <returns>true if input is a valid <see cref="T:System.Windows.Input.ModifierKeys" /> value; otherwise, false.</returns>
      <param name="modifierKeys">The value to check for validity.</param>
    </member>
    <member name="T:System.Windows.Input.ModifierKeysValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Input.ModifierKeys" />.</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.ModifierKeysValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if the specified <see cref="T:System.String" /> can be convert to an instance of <see cref="T:System.Windows.Input.ModifierKeys" />.</summary>
      <returns>Always returns true.</returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if the specified <see cref="T:System.Windows.Input.ModifierKeys" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">The modifier keys to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Input.ModifierKeys" /> value.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Input.ModifierKeys" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">The string to convert into a <see cref="T:System.Windows.Input.ModifierKeys" />.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Input.ModifierKeys" /> to a <see cref="T:System.String" />.</summary>
      <returns>An invariant string representation of the specified <see cref="T:System.Windows.Input.ModifierKeys" /> value.</returns>
      <param name="value">The key to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Windows.Input.TraversalRequest">
      <summary>Represents a request to move focus to another control. </summary>
    </member>
    <member name="M:System.Windows.Input.TraversalRequest.#ctor(System.Windows.Input.FocusNavigationDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.TraversalRequest" /> class. </summary>
      <param name="focusNavigationDirection">The intended direction of the focus traversal, as a value of the enumeration.</param>
    </member>
    <member name="P:System.Windows.Input.TraversalRequest.FocusNavigationDirection">
      <summary>Gets the traversal direction. </summary>
      <returns>One of the traversal direction enumeration values.</returns>
    </member>
    <member name="P:System.Windows.Input.TraversalRequest.Wrapped">
      <summary> Gets or sets a value that indicates whether focus traversal has reached the end of child elements that can have focus. </summary>
      <returns>true if this traversal has reached the end of child elements that can have focus; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.Windows.Interop.ComponentDispatcher">
      <summary>Enables shared control of the message pump between Win32 and WPF in interoperation scenarios. </summary>
    </member>
    <member name="P:System.Windows.Interop.ComponentDispatcher.CurrentKeyboardMessage">
      <summary>Gets the last message that was raised. </summary>
      <returns>The last message.</returns>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.EnterThreadModal">
      <summary>Occurs when a thread becomes modal. </summary>
    </member>
    <member name="P:System.Windows.Interop.ComponentDispatcher.IsThreadModal">
      <summary>Gets a value that indicates whether the thread is modal. </summary>
      <returns>true if the thread is modal; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.LeaveThreadModal">
      <summary>Occurs when a modal thread becomes nonmodal. </summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.PopModal">
      <summary>Called to indicate that a modal thread is no longer modal.</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.PushModal">
      <summary>Called to indicate that the thread is modal. </summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.RaiseIdle">
      <summary>Called to indicate that a thread is idle. </summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage(System.Windows.Interop.MSG@)">
      <summary>Indicates that a new message is available for possible handling. </summary>
      <returns>true, if one of the modules listening to the message loop processed the message. The owner of the message loop should ignore the message. false, if the message was not processed. In this case, the owner of the message pump should call the Win32 function TranslateMessageDispatchMessage followed by DispatchMessage. </returns>
      <param name="msg">The message and its associated data.</param>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage">
      <summary>Occurs when the message pump receives a keyboard message.  </summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadIdle">
      <summary>Occurs when the thread is idle. </summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage">
      <summary>Occurs when the message pump receives a keyboard message.</summary>
    </member>
    <member name="T:System.Windows.Interop.IKeyboardInputSink">
      <summary>Provides a keyboard sink for components that manages tabbing, accelerators, and mnemonics across interop boundaries and between HWNDs. This interface implements keyboard message management in WPF-Win32 interoperation scenarios.</summary>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin">
      <summary>Gets a value that indicates whether the sink or one of its contained components has focus. </summary>
      <returns>true if the sink or one of its contained components has focus; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite">
      <summary>Gets or sets a reference to the component's container's <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> interface. </summary>
      <returns>A reference to the container's <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> interface.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>Called when one of the mnemonics (access keys) for this sink is invoked. </summary>
      <returns>true if the message was handled; otherwise, false.</returns>
      <param name="msg">The message for the mnemonic and associated data. Do not modify this message structure. It is passed by reference for performance reasons only.</param>
      <param name="modifiers">Modifier keys.</param>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
      <summary>Registers the <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> interface of a contained component. </summary>
      <returns>The <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> site of the contained component.</returns>
      <param name="sink">The <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> sink of the contained component.</param>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)">
      <summary>Sets focus on either the first tab stop or the last tab stop of the sink. </summary>
      <returns>true if the focus has been set as requested; false, if there are no tab stops.</returns>
      <param name="request">Specifies whether focus should be set to the first or the last tab stop.</param>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>Processes keyboard input at the keydown message level.</summary>
      <returns>true if the message was handled by the method implementation; otherwise, false.</returns>
      <param name="msg">The message and associated data. Do not modify this structure. It is passed by reference for performance reasons only.</param>
      <param name="modifiers">Modifier keys.</param>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>Processes WM_CHAR, WM_SYSCHAR, WM_DEADCHAR, and WM_SYSDEADCHAR input messages before <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /> is called. </summary>
      <returns>true if the message was processed and <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /> should not be called; otherwise, false.</returns>
      <param name="msg">The message and associated data. Do not modify this structure. It is passed by reference for performance reasons only.</param>
      <param name="modifiers">Modifier keys.</param>
    </member>
    <member name="T:System.Windows.Interop.IKeyboardInputSite">
      <summary>Manages keyboard focus within the container.  This interface implements keyboard message management in WPF-Win32 interoperation scenarios.</summary>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSite.OnNoMoreTabStops(System.Windows.Input.TraversalRequest)">
      <summary>Called by a contained component when it has reached its last tab stop and has no further items to tab to. </summary>
      <returns>If this method returns true, the site has shifted focus to another component. If this method returns false, focus is still within the calling component. The component should "wrap around" and set focus to its first contained tab stop.</returns>
      <param name="request">Specifies whether focus should be set to the first or the last tab stop.</param>
    </member>
    <member name="P:System.Windows.Interop.IKeyboardInputSite.Sink">
      <summary>Gets the keyboard sink associated with this site. </summary>
      <returns>The current site's <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> interface.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSite.Unregister">
      <summary>Unregisters a child keyboard input sink from this site. </summary>
    </member>
    <member name="T:System.Windows.Interop.MSG">
      <summary>Contains message information from a thread's message queue. </summary>
    </member>
    <member name="P:System.Windows.Interop.MSG.hwnd">
      <summary>Gets or sets the window handle (HWND) to the window whose window procedure receives the message. </summary>
      <returns>The window handle (HWND).</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.lParam">
      <summary>Gets or sets the <paramref name="lParam" /> value that specifies additional information about the message. The exact meaning depends on the value of the <see cref="P:System.Windows.Interop.MSG.message" /> member.</summary>
      <returns>The <paramref name="lParam" /> value for the message.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.message">
      <summary>Gets or sets the message identifier. </summary>
      <returns>The message identifier.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.pt_x">
      <summary>Gets or sets the x coordinate of the cursor position on the screen, when the message was posted. </summary>
      <returns>The x coordinate of the cursor position.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.pt_y">
      <summary>Gets or sets the y coordinate of the cursor position on the screen, when the message was posted. </summary>
      <returns>The y coordinate of the cursor position.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.time">
      <summary>Gets or sets the time at which the message was posted.</summary>
      <returns>The time that the message was posted.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.wParam">
      <summary>Gets or sets the <paramref name="wParam" /> value for the message, which specifies additional information about the message. The exact meaning depends on the value of the message. </summary>
      <returns>The <paramref name="wParam" /> value for the message.</returns>
    </member>
    <member name="T:System.Windows.Interop.ThreadMessageEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage" /> and <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage" /> events. </summary>
      <param name="msg">A structure with the message data.</param>
      <param name="handled">true if the message was handled; otherwise, false.</param>
    </member>
    <member name="T:System.Windows.Markup.DesignerSerializationOptions">
      <summary>Specifies how a property is to be serialized.</summary>
    </member>
    <member name="F:System.Windows.Markup.DesignerSerializationOptions.SerializeAsAttribute">
      <summary>The property should be serialized as an attribute.</summary>
    </member>
    <member name="T:System.Windows.Markup.DesignerSerializationOptionsAttribute">
      <summary>Specifies the serialization flags for a property.</summary>
    </member>
    <member name="M:System.Windows.Markup.DesignerSerializationOptionsAttribute.#ctor(System.Windows.Markup.DesignerSerializationOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.DesignerSerializationOptionsAttribute" /> class.</summary>
      <param name="designerSerializationOptions">Specifies how the property is to be serialized. </param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="designerSerializationOptions" /> is not a valid <see cref="T:System.Windows.Markup.DesignerSerializationOptions" /> value.</exception>
    </member>
    <member name="P:System.Windows.Markup.DesignerSerializationOptionsAttribute.DesignerSerializationOptions">
      <summary>Gets the <see cref="T:System.Windows.Markup.DesignerSerializationOptions" /> set on the attribute.</summary>
      <returns>The serialization option, as a value of the enumeration.</returns>
    </member>
    <member name="T:System.Windows.Markup.InternalTypeHelper">
      <summary>Abstract class used internally by the WPF XAML compiler to support the use of internal types.</summary>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.InternalTypeHelper" /> class.</summary>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
      <summary>When overridden in a derived (generated) class, attaches an event handler delegate to an internal event.</summary>
      <param name="eventInfo">The event information for the event (CLR reflection information). </param>
      <param name="target">The target where the handler is attached.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
      <summary>When overridden in a derived (generated) class, creates an event delegate referencing a non-public handler method.</summary>
      <returns>The delegate reference.</returns>
      <param name="delegateType">The <see cref="T:System.Type" /> of the delegate. </param>
      <param name="target">The target where the handler is attached.</param>
      <param name="handler">The name of the handler implementation.</param>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
      <summary>When overridden in a derived (generated) class, creates an instance of an internal type.</summary>
      <returns>The created instance. </returns>
      <param name="type">The <see cref="T:System.Type" /> to create.</param>
      <param name="culture">Culture specific information. </param>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
      <summary>When overridden in a derived (generated) class, gets the value of an internal property on the target object</summary>
      <returns>The value of the property.</returns>
      <param name="propertyInfo">Property information for the property to get. </param>
      <param name="target">The object that holds the desired property value.</param>
      <param name="culture">Culture specific information. </param>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
      <summary>When overridden in a derived (generated) class, sets the value on an internal property on the target object.</summary>
      <param name="propertyInfo">Property information for the property to set. </param>
      <param name="target">The object that holds the desired property value.</param>
      <param name="value">The value to set.</param>
      <param name="culture">Culture specific information. </param>
    </member>
    <member name="T:System.Windows.Markup.IReceiveMarkupExtension">
      <summary>Provides a mechanism whereby types can declare that they can receive an expression (or another class) from a markup extension, where the output is a different property type than the target property. Do not use for .NET Framework 4 implementations; see Remarks.</summary>
    </member>
    <member name="M:System.Windows.Markup.IReceiveMarkupExtension.ReceiveMarkupExtension(System.String,System.Windows.Markup.MarkupExtension,System.IServiceProvider)">
      <summary>Provides the handling for markup extensions that provide property values. Do not use for .NET Framework 4 implementations; see Remarks in <see cref="T:System.Windows.Markup.IReceiveMarkupExtension" />.</summary>
      <param name="property">The name of the target property.</param>
      <param name="markupExtension">The markup extension instance of the incoming data.</param>
      <param name="serviceProvider">Can provide additional services that should be performed when processing the markup extension data for a property value.</param>
    </member>
    <member name="T:System.Windows.Markup.ServiceProviders">
      <summary>Provides an implementation for the <see cref="T:System.IServiceProvider" /> interface with methods that enable adding services.</summary>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ServiceProviders" /> class. </summary>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.AddService(System.Type,System.Object)">
      <summary>Adds a service to the list. </summary>
      <param name="serviceType">Service type of the new service.</param>
      <param name="service">The service implementation class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> or <paramref name="service" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Attempted to add a service that already exists in the dictionary.</exception>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.GetService(System.Type)">
      <summary>Gets the service object of the specified type.</summary>
      <returns>A service implementation for the type <paramref name="serviceType" />. May be null if there is no service stored for type <paramref name="serviceType" />.</returns>
      <param name="serviceType">The type of service object to get.</param>
    </member>
    <member name="T:System.Windows.Markup.Primitives.MarkupObject">
      <summary>Abstract class that represents an object that can be used to navigate a tree of objects.</summary>
    </member>
    <member name="M:System.Windows.Markup.Primitives.MarkupObject.AssignRootContext(System.Windows.Markup.IValueSerializerContext)">
      <summary>When overridden in a derived class, assigns a root context for <see cref="T:System.Windows.Markup.ValueSerializer" /> classes.</summary>
      <param name="context">The <see cref="T:System.Windows.Markup.IValueSerializerContext" /> to assign a root context for.</param>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Attributes">
      <summary>When overridden in a derived class, gets the attributes associated with this <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />.  </summary>
      <returns>The collection of attributes. </returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Instance">
      <summary>When overridden in a derived class, gets the instance of the object represented by this <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />.</summary>
      <returns>The instance of the object</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.ObjectType">
      <summary>When overridden in a derived class, gets the type of the <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> instance.</summary>
      <returns>The type of the object. </returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Properties">
      <summary>When overridden in a derived class, gets the properties of this <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> instance that should be written to XAML.</summary>
      <returns>The properties.  </returns>
    </member>
    <member name="T:System.Windows.Markup.Primitives.MarkupProperty">
      <summary>Abstract class that provides a property description to be used while writing to markup which encapsulates access to properties and their values. </summary>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Attributes">
      <summary>When overridden in a derived class, gets the attributes associated with this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</summary>
      <returns>The collection of attributes.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Windows.DependencyProperty" /> identifier for the markup property if the property is implemented as a dependency property</summary>
      <returns>The dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsAttached">
      <summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> is an attached <see cref="T:System.Windows.DependencyProperty" />. </summary>
      <returns>true if the property is an attached <see cref="T:System.Windows.DependencyProperty" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsComposite">
      <summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> is a composite property. </summary>
      <returns>true is this property is a composite property; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument">
      <summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents a constructor argument.</summary>
      <returns>true if this property represents a constructor argument; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsContent">
      <summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents direct content of a collection.</summary>
      <returns>true if the property represents direct content; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsKey">
      <summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents the key used by the <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> to store the item in a dictionary.</summary>
      <returns>true if this property represents a key; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString">
      <summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents text which is passed to a type converter to create an instance of the property or if a constructor should be used.</summary>
      <returns>true, if this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents a string; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Items">
      <summary>When overridden in a derived class, gets the items that make up the value of this property. </summary>
      <returns>The items that make up the value of this property.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Name">
      <summary>When overridden in a derived class, gets a name that is used for diagnostics and error reporting. </summary>
      <returns>The identifier property name.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor">
      <summary>When overridden in a derived class, gets the <see cref="T:System.ComponentModel.PropertyDescriptor" /> for the markup property. </summary>
      <returns>The property descriptor. </returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyType">
      <summary>When overridden in a derived class, gets the CLR type of the property.</summary>
      <returns>The CLR type.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.StringValue">
      <summary>When overridden in a derived class, gets the string value of this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</summary>
      <returns>The string value.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.TypeReferences">
      <summary>When overridden in a derived class, gets the set of types that this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> will reference when it serializes its value as a string.</summary>
      <returns>The set of types.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Value">
      <summary>When overridden in a derived class, gets the current value of this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</summary>
      <returns>The current value.</returns>
    </member>
    <member name="T:System.Windows.Media.DisableDpiAwarenessAttribute">
      <summary>Allows WPF applications to disable dots per inch (dpi) awareness for all user interface elements.</summary>
    </member>
    <member name="M:System.Windows.Media.DisableDpiAwarenessAttribute.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Windows.Media.DisableDpiAwarenessAttribute" />.</summary>
    </member>
    <member name="T:System.Windows.Media.Matrix">
      <summary> Represents a 3x3 affine transformation matrix used for transformations in 2-D space. </summary>
    </member>
    <member name="M:System.Windows.Media.Matrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <param name="m11">The new <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.M11" /> coefficient.</param>
      <param name="m12">The new <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.M12" /> coefficient.</param>
      <param name="m21">The new <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.M21" /> coefficient.</param>
      <param name="m22">The new <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.M22" /> coefficient.</param>
      <param name="offsetX">The new <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.OffsetX" /> coefficient.</param>
      <param name="offsetY">The new <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.OffsetY" /> coefficient.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Append(System.Windows.Media.Matrix)">
      <summary> Appends the specified <see cref="T:System.Windows.Media.Matrix" /> structure to this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <param name="matrix">The <see cref="T:System.Windows.Media.Matrix" /> structure to append to this <see cref="T:System.Windows.Media.Matrix" /> structure.</param>
    </member>
    <member name="P:System.Windows.Media.Matrix.Determinant">
      <summary> Gets the determinant of this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <returns>The determinant of this <see cref="T:System.Windows.Media.Matrix" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Object)">
      <summary> Determines whether the specified <see cref="T:System.Object" /> is a <see cref="T:System.Windows.Media.Matrix" /> structure that is identical to this <see cref="T:System.Windows.Media.Matrix" />. </summary>
      <returns>true if <paramref name="o" /> is a <see cref="T:System.Windows.Media.Matrix" /> structure that is identical to this <see cref="T:System.Windows.Media.Matrix" /> structure; otherwise, false.</returns>
      <param name="o">The <see cref="T:System.Object" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix)">
      <summary> Determines whether the specified <see cref="T:System.Windows.Media.Matrix" /> structure is identical to this instance. </summary>
      <returns>true if instances are equal; otherwise, false. </returns>
      <param name="value">The instance of <see cref="T:System.Windows.Media.Matrix" /> to compare to this instance.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary> Determines whether the two specified <see cref="T:System.Windows.Media.Matrix" /> structures are identical.</summary>
      <returns>true if <paramref name="matrix1" /> and <paramref name="matrix2" /> are identical; otherwise, false.</returns>
      <param name="matrix1">The first <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
      <param name="matrix2">The second <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.GetHashCode">
      <summary> Returns the hash code for this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <returns>The hash code for this instance.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.HasInverse">
      <summary> Gets a value that indicates whether this <see cref="T:System.Windows.Media.Matrix" /> structure is invertible. </summary>
      <returns>true if the <see cref="T:System.Windows.Media.Matrix" /> has an inverse; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.Identity">
      <summary> Gets an identity <see cref="T:System.Windows.Media.Matrix" />. </summary>
      <returns>An identity matrix.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Invert">
      <summary> Inverts this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Media.Matrix" /> structure is not invertible.</exception>
    </member>
    <member name="P:System.Windows.Media.Matrix.IsIdentity">
      <summary> Gets a value that indicates whether this <see cref="T:System.Windows.Media.Matrix" /> structure is an identity matrix. </summary>
      <returns>true if the <see cref="T:System.Windows.Media.Matrix" /> structure is an identity matrix; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M11">
      <summary>Gets or sets the value of the first row and first column of this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <returns>The value of the first row and first column of this <see cref="T:System.Windows.Media.Matrix" />. The default value is 1.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M12">
      <summary> Gets or sets the value of the first row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <returns>The value of the first row and second column of this <see cref="T:System.Windows.Media.Matrix" />. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M21">
      <summary> Gets or sets the value of the second row and first column of this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <returns>The value of the second row and first column of this <see cref="T:System.Windows.Media.Matrix" />. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M22">
      <summary>Gets or sets the value of the second row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <returns>The value of the second row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. The default value is 1.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary> Multiplies a <see cref="T:System.Windows.Media.Matrix" /> structure by another <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <returns>The result of multiplying <paramref name="trans1" /> by <paramref name="trans2" />.</returns>
      <param name="trans1">The first <see cref="T:System.Windows.Media.Matrix" /> structure to multiply.</param>
      <param name="trans2">The second <see cref="T:System.Windows.Media.Matrix" /> structure to multiply.</param>
    </member>
    <member name="P:System.Windows.Media.Matrix.OffsetX">
      <summary>Gets or sets the value of the third row and first column of this <see cref="T:System.Windows.Media.Matrix" /> structure.  </summary>
      <returns>The value of the third row and first column of this <see cref="T:System.Windows.Media.Matrix" /> structure. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.OffsetY">
      <summary>Gets or sets the value of the third row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <returns>The value of the third row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. The default value is 0.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Equality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary> Determines whether the two specified <see cref="T:System.Windows.Media.Matrix" /> structures are identical.</summary>
      <returns>true if <paramref name="matrix1" /> and <paramref name="matrix2" /> are identical; otherwise, false.</returns>
      <param name="matrix1">The first <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
      <param name="matrix2">The second <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Inequality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary> Determines whether the two specified <see cref="T:System.Windows.Media.Matrix" /> structures are not identical.</summary>
      <returns>true if <paramref name="matrix1" /> and <paramref name="matrix2" /> are not identical; otherwise, false.</returns>
      <param name="matrix1">The first <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
      <param name="matrix2">The second <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary> Multiplies a <see cref="T:System.Windows.Media.Matrix" /> structure by another <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <returns>The result of multiplying <paramref name="trans1" /> by <paramref name="trans2" />.</returns>
      <param name="trans1">The first <see cref="T:System.Windows.Media.Matrix" /> structure to multiply.</param>
      <param name="trans2">The second <see cref="T:System.Windows.Media.Matrix" /> structure to multiply.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Parse(System.String)">
      <summary> Converts a <see cref="T:System.String" /> representation of a matrix into the equivalent <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <returns>The equivalent <see cref="T:System.Windows.Media.Matrix" /> structure.</returns>
      <param name="source">The <see cref="T:System.String" /> representation of the matrix.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Prepend(System.Windows.Media.Matrix)">
      <summary> Prepends the specified <see cref="T:System.Windows.Media.Matrix" /> structure onto this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <param name="matrix">The <see cref="T:System.Windows.Media.Matrix" /> structure to prepend to this <see cref="T:System.Windows.Media.Matrix" /> structure.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Rotate(System.Double)">
      <summary> Applies a rotation of the specified angle about the origin of this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <param name="angle">The angle of rotation.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotateAt(System.Double,System.Double,System.Double)">
      <summary>Rotates this matrix about the specified point.</summary>
      <param name="angle">The angle, in degrees, by which to rotate this matrix. </param>
      <param name="centerX">The x-coordinate of the point about which to rotate this matrix.</param>
      <param name="centerY">The y-coordinate of the point about which to rotate this matrix.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotateAtPrepend(System.Double,System.Double,System.Double)">
      <summary>Prepends a rotation of the specified angle at the specified point to this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <param name="angle">The rotation angle, in degrees.</param>
      <param name="centerX">The x-coordinate of the rotation center.</param>
      <param name="centerY">The y-coordinate of the rotation center.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotatePrepend(System.Double)">
      <summary> Prepends a rotation of the specified angle to this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <param name="angle">The angle of rotation to prepend.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Scale(System.Double,System.Double)">
      <summary> Appends the specified scale vector to this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <param name="scaleX">The value by which to scale this <see cref="T:System.Windows.Media.Matrix" /> along the x-axis.</param>
      <param name="scaleY">The value by which to scale this <see cref="T:System.Windows.Media.Matrix" /> along the y-axis.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScaleAt(System.Double,System.Double,System.Double,System.Double)">
      <summary>Scales this <see cref="T:System.Windows.Media.Matrix" /> by the specified amount about the specified point.</summary>
      <param name="scaleX">The amount by which to scale this <see cref="T:System.Windows.Media.Matrix" /> along the x-axis. </param>
      <param name="scaleY">The amount by which to scale this <see cref="T:System.Windows.Media.Matrix" /> along the y-axis.</param>
      <param name="centerX">The x-coordinate of the scale operation's center point.</param>
      <param name="centerY">The y-coordinate of the scale operation's center point.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScaleAtPrepend(System.Double,System.Double,System.Double,System.Double)">
      <summary>Prepends the specified scale about the specified point of this <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="scaleX">The x-axis scale factor.</param>
      <param name="scaleY">The y-axis scale factor.</param>
      <param name="centerX">The x-coordinate of the point about which the scale operation is performed.</param>
      <param name="centerY">The y-coordinate of the point about which the scale operation is performed.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScalePrepend(System.Double,System.Double)">
      <summary> Prepends the specified scale vector to this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <param name="scaleX">The value by which to scale this <see cref="T:System.Windows.Media.Matrix" /> structure along the x-axis.</param>
      <param name="scaleY">The value by which to scale this <see cref="T:System.Windows.Media.Matrix" /> structure along the y-axis.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.SetIdentity">
      <summary> Changes this <see cref="T:System.Windows.Media.Matrix" /> structure into an identity matrix. </summary>
    </member>
    <member name="M:System.Windows.Media.Matrix.Skew(System.Double,System.Double)">
      <summary> Appends a skew of the specified degrees in the x and y dimensions to this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <param name="skewX">The angle in the x dimension by which to skew this <see cref="T:System.Windows.Media.Matrix" />.</param>
      <param name="skewY">The angle in the y dimension by which to skew this <see cref="T:System.Windows.Media.Matrix" />.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.SkewPrepend(System.Double,System.Double)">
      <summary> Prepends a skew of the specified degrees in the x and y dimensions to this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <param name="skewX">The angle in the x dimension by which to skew this <see cref="T:System.Windows.Media.Matrix" />.</param>
      <param name="skewY">The angle in the y dimension by which to skew this <see cref="T:System.Windows.Media.Matrix" />.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. </summary>
      <param name="format"></param>
      <param name="provider"></param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ToString">
      <summary> Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <returns>A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Media.Matrix.M11" />, <see cref="P:System.Windows.Media.Matrix.M12" />, <see cref="P:System.Windows.Media.Matrix.M21" />, <see cref="P:System.Windows.Media.Matrix.M22" />, <see cref="P:System.Windows.Media.Matrix.OffsetX" />, and <see cref="P:System.Windows.Media.Matrix.OffsetY" /> values of this <see cref="T:System.Windows.Media.Matrix" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.ToString(System.IFormatProvider)">
      <summary> Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Media.Matrix" /> structure with culture-specific formatting information. </summary>
      <returns>A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Media.Matrix.M11" />, <see cref="P:System.Windows.Media.Matrix.M12" />, <see cref="P:System.Windows.Media.Matrix.M21" />, <see cref="P:System.Windows.Media.Matrix.M22" />, <see cref="P:System.Windows.Media.Matrix.OffsetX" />, and <see cref="P:System.Windows.Media.Matrix.OffsetY" /> values of this <see cref="T:System.Windows.Media.Matrix" />.</returns>
      <param name="provider">The culture-specific formatting information.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Point)">
      <summary>Transforms the specified point by the <see cref="T:System.Windows.Media.Matrix" /> and returns the result.</summary>
      <returns>The result of transforming <paramref name="point" /> by this <see cref="T:System.Windows.Media.Matrix" />.</returns>
      <param name="point">The point to transform.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Point[])">
      <summary>Transforms the specified points by this <see cref="T:System.Windows.Media.Matrix" />. </summary>
      <param name="points">The points to transform. The original points in the array are replaced by their transformed values.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector)">
      <summary>Transforms the specified vector by this <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>The result of transforming <paramref name="vector" /> by this <see cref="T:System.Windows.Media.Matrix" />.</returns>
      <param name="vector">The vector to transform.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector[])">
      <summary>Transforms the specified vectors by this <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="vectors">The vectors to transform. The original vectors in the array are replaced by their transformed values.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Translate(System.Double,System.Double)">
      <summary> Appends a translation of the specified offsets to this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <param name="offsetX">The amount to offset this <see cref="T:System.Windows.Media.Matrix" /> along the x-axis.</param>
      <param name="offsetY">The amount to offset this <see cref="T:System.Windows.Media.Matrix" /> along the y-axis.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.TranslatePrepend(System.Double,System.Double)">
      <summary> Prepends a translation of the specified offsets to this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <param name="offsetX">The amount to offset this <see cref="T:System.Windows.Media.Matrix" /> along the x-axis.</param>
      <param name="offsetY">The amount to offset this <see cref="T:System.Windows.Media.Matrix" /> along the y-axis.</param>
    </member>
    <member name="T:System.Windows.Media.MatrixConverter">
      <summary>Converts instances of other types to and from a <see cref="T:System.Windows.Media.Matrix" />. </summary>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Windows.Media.MatrixConverter" />.</summary>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object can be converted from a specific type to an instance of a <see cref="T:System.Windows.Media.Matrix" />.  </summary>
      <returns>true if the type can be converted to a <see cref="T:System.Windows.Media.Matrix" />; otherwise, false.</returns>
      <param name="context">The context information of a type.</param>
      <param name="sourceType">The type of the source that is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of a <see cref="T:System.Windows.Media.Matrix" /> can be converted to a different type. </summary>
      <returns>true if this <see cref="T:System.Windows.Media.Matrix" /> can be converted to <paramref name="destinationType" />; otherwise, false.</returns>
      <param name="context">The context information of a type.</param>
      <param name="destinationType">The desired type this <see cref="T:System.Windows.Media.Matrix" /> is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Media.Matrix" />. </summary>
      <returns>The <see cref="T:System.Windows.Media.Matrix" /> created from converting <paramref name="value" />.</returns>
      <param name="context">The context information of a type.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The object being converted.</param>
      <exception cref="T:System.NotSupportedException">The specified object is null or is a type that cannot be converted to a <see cref="T:System.Windows.Media.Matrix" />.</exception>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert a <see cref="T:System.Windows.Media.Matrix" /> to a specified type. </summary>
      <returns>The object created from converting this <see cref="T:System.Windows.Media.Matrix" />.</returns>
      <param name="context">The context information of a type.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The <see cref="T:System.Windows.Media.Matrix" /> to convert.</param>
      <param name="destinationType">The type to convert this <see cref="T:System.Windows.Media.Matrix" /> to.</param>
      <exception cref="T:System.NotSupportedException">The <paramref name="value" /> is null or is not a <see cref="T:System.Windows.Media.Matrix" />, or the <paramref name="destinationType" /> is not a valid conversion type.</exception>
    </member>
    <member name="T:System.Windows.Media.Converters.MatrixValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Media.Matrix" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Converters.MatrixValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if conversion from a given <see cref="T:System.String" /> to an instance of <see cref="T:System.Windows.Media.Matrix" /> is possible.</summary>
      <returns>true if the value can be converted; otherwise, false.</returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if an instance of <see cref="T:System.Windows.Media.Matrix" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Matrix" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
      <exception cref="T:System.ArgumentException">Occurs when <paramref name="value" /> is not a <see cref="T:System.Windows.Media.Int32Collection" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.Matrix" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">
        <see cref="T:System.String" /> value to convert into a <see cref="T:System.Windows.Media.Matrix" />.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Media.Matrix" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the supplied <see cref="T:System.Windows.Media.Matrix" /> object.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Matrix" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="T:System.Windows.Threading.Dispatcher">
      <summary>Provides services for managing the queue of work items for a thread.</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])">
      <summary>Executes the specified delegate asynchronously with the specified arguments on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</summary>
      <returns>An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
      <param name="method">The delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="args">An array of objects to pass as arguments to the given method. Can be null.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</summary>
      <returns>An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
      <param name="method">The delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="args">An array of objects to pass as arguments to the given method. Can be null.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)">
      <summary>Executes the specified delegate asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="method">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)">
      <summary>Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="method">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="arg">The object to pass as an argument to the specified method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
      <summary>Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</returns>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="method">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="arg">The object to pass as an argument to the specified method.</param>
      <param name="args">An array of objects to pass as arguments to the specified method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <see cref="T:System.Windows.Threading.DispatcherPriority" /> is not a valid priority.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)">
      <summary>Initiates shutdown of the <see cref="T:System.Windows.Threading.Dispatcher" /> asynchronously. </summary>
      <param name="priority">The priority at which to begin shutting down the dispatcher.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.CheckAccess">
      <summary>Determines whether the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />. </summary>
      <returns>true if the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.CurrentDispatcher">
      <summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the thread currently executing and creates a new <see cref="T:System.Windows.Threading.Dispatcher" /> if one is not already associated with the thread. </summary>
      <returns>The dispatcher associated with the current thread.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.DisableProcessing">
      <summary>Disables processing of the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</summary>
      <returns>A structure used to re-enable dispatcher processing.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.ExitAllFrames">
      <summary>Requests that all frames exit, including nested frames.</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)">
      <summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the specified thread. </summary>
      <returns>The dispatcher for <paramref name="thread" />.</returns>
      <param name="thread">The thread to obtain the <see cref="T:System.Windows.Threading.Dispatcher" /> from.</param>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.HasShutdownFinished">
      <summary>Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> has finished shutting down.</summary>
      <returns>true if the dispatcher has finished shutting down; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.HasShutdownStarted">
      <summary>Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> is shutting down. </summary>
      <returns>true if the <see cref="T:System.Windows.Threading.Dispatcher" /> has started shutting down; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.Hooks">
      <summary>Gets the collection of hooks that provide additional event information about the <see cref="T:System.Windows.Threading.Dispatcher" />. </summary>
      <returns>The hooks associated with this <see cref="T:System.Windows.Threading.Dispatcher" />. </returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])">
      <summary>Executes the specified delegate with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>The return value from the delegate being invoked or null if the delegate has no return value.</returns>
      <param name="method">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="args">An array of objects to pass as arguments to the given method. Can be null.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])">
      <summary>Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>The return value from the delegate being invoked or null if the delegate has no return value.</returns>
      <param name="method">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="timeout">The maximum amount of time to wait for the operation to complete.</param>
      <param name="args">An array of objects to pass as arguments to the given method. Can be null.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>The return value from the delegate being invoked or null if the delegate has no return value.</returns>
      <param name="method">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="timeout">The maximum amount of time to wait for the operation to complete.</param>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="args">An array of objects to pass as arguments to the given method. Can be null.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>The return value from the delegate being invoked or null if the delegate has no return value.</returns>
      <param name="method">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="args">An array of objects to pass as arguments to the given method. Can be null.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)">
      <summary>Executes the specified delegate synchronously at the specified priority on the thread on which the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with. </summary>
      <returns>The return value from the delegate being invoked or null if the delegate has no return value.</returns>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="method">A delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid priority.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null. </exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)">
      <summary>Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>The return value from the delegate being invoked or null if the delegate has no return value.</returns>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="method">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="arg">An object to pass as an argument to the given method.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid priority.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null. </exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
      <summary>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>The return value from the delegate being invoked or null if the delegate has no return value.</returns>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="method">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="arg">An object to pass as an argument to the given method.</param>
      <param name="args">An array of objects to pass as arguments to the given method.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid priority.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null. </exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)">
      <summary>Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> was created.</summary>
      <returns>The return value from the delegate being invoked or null if the delegate has no return value.</returns>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="timeout">The maximum time to wait for the operation to finish.</param>
      <param name="method">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)">
      <summary>Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>The return value from the delegate being invoked or null if the delegate has no return value.</returns>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="timeout">The maximum time to wait for the operation to finish.</param>
      <param name="method">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="arg">An object to pass as an argument to the given method. This can be null if no arguments are needed.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid priority.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null. </exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])">
      <summary>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>The return value from the delegate being invoked or null if the delegate has no return value.</returns>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="timeout">The maximum time to wait for the operation to finish.</param>
      <param name="method">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="arg">An object to pass as an argument to the specified method.</param>
      <param name="args">An array of objects to pass as arguments to the specified method. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null. </exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeShutdown">
      <summary>Initiates the shutdown process of the <see cref="T:System.Windows.Threading.Dispatcher" /> synchronously.</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)">
      <summary>Enters an execute loop.</summary>
      <param name="frame">The frame for the dispatcher to process.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frame" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> is true-or-<paramref name="frame" /> is running on a different <see cref="T:System.Windows.Threading.Dispatcher" />.-or-Dispatcher processing has been disabled.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Run">
      <summary>Pushes the main execution frame on the event queue of the <see cref="T:System.Windows.Threading.Dispatcher" />. </summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.ShutdownFinished">
      <summary>Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> finishes shutting down. </summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.ShutdownStarted">
      <summary>Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> begins to shut down. </summary>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.Thread">
      <summary>Gets the thread this <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>The thread.</returns>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.UnhandledException">
      <summary>Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter">
      <summary>Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> when in the filter stage. </summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Threading.DispatcherPriority" /> is a valid priority. </summary>
      <param name="priority">The priority to check.</param>
      <param name="parameterName">A string that will be returned by the exception that occurs if the priority is invalid.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.VerifyAccess">
      <summary>Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.Dispatcher" />. </summary>
      <exception cref="T:System.InvalidOperationException">The calling thread does not have access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</exception>
    </member>
    <member name="T:System.Windows.Threading.DispatcherEventArgs">
      <summary>Provides event data for <see cref="T:System.Windows.Threading.Dispatcher" /> related events. </summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherEventArgs.Dispatcher">
      <summary>The <see cref="T:System.Windows.Threading.Dispatcher" /> associated with this event. </summary>
      <returns>The dispatcher.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherFrame">
      <summary>Represents an execution loop in the <see cref="T:System.Windows.Threading.Dispatcher" />. </summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherFrame" /> class.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherFrame.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherFrame" /> class, by using the specified exit request flag.</summary>
      <param name="exitWhenRequested">Indicates whether this frame will exit when all frames are requested to exit.</param>
    </member>
    <member name="P:System.Windows.Threading.DispatcherFrame.Continue">
      <summary>Gets or sets a value that indicates whether this <see cref="T:System.Windows.Threading.DispatcherFrame" /> should continue.</summary>
      <returns>true if the frame should continue; otherwise, false.  The default value is true.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHookEventArgs">
      <summary>Provides event data for <see cref="T:System.Windows.Threading.DispatcherHooks" /> events.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherHookEventArgs.#ctor(System.Windows.Threading.DispatcherOperation)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherHookEventArgs" /> class. </summary>
      <param name="operation">The operation associated with the event.</param>
    </member>
    <member name="P:System.Windows.Threading.DispatcherHookEventArgs.Dispatcher">
      <summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> associated with this event. </summary>
      <returns>The <see cref="T:System.Windows.Threading.Dispatcher" />.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherHookEventArgs.Operation">
      <summary>Gets the <see cref="T:System.Windows.Threading.DispatcherOperation" /> associated with this event. </summary>
      <returns>The operation.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHookEventHandler">
      <summary>Represents the method that will handle <see cref="T:System.Windows.Threading.DispatcherHooks" /> related events. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHooks">
      <summary>Provides additional event information about <see cref="T:System.Windows.Threading.Dispatcher" /> processing.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.DispatcherInactive">
      <summary>Occurs when the dispatcher has no more operations to process. </summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationAborted">
      <summary>Occurs when an operation is aborted. </summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationCompleted">
      <summary>Occurs when an operation completes. </summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationPosted">
      <summary>Occurs when an operation is posted to the dispatcher. </summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationPriorityChanged">
      <summary>Occurs when the priority of an operation is changed. </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherObject">
      <summary>Represents an object that is associated with a <see cref="T:System.Windows.Threading.Dispatcher" />. </summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherObject" /> class. </summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.CheckAccess">
      <summary>Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
      <returns>true if the calling thread has access to this object; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherObject.Dispatcher">
      <summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> this <see cref="T:System.Windows.Threading.DispatcherObject" /> is associated with. </summary>
      <returns>The dispatcher.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.VerifyAccess">
      <summary>Enforces that the calling thread has access to this <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
      <exception cref="T:System.InvalidOperationException">the calling thread does not have access to this <see cref="T:System.Windows.Threading.DispatcherObject" />.</exception>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperation">
      <summary>Represents an object that is used to interact with an operation that has been posted to the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Abort">
      <summary>Aborts the operation. </summary>
      <returns>true if the operation was aborted; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.Threading.DispatcherOperation.Aborted">
      <summary>Occurs when the operation is aborted.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherOperation.Completed">
      <summary>Occurs when the operation has completed. </summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Dispatcher">
      <summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> that the operation was posted to. </summary>
      <returns>The dispatcher.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Priority">
      <summary>Gets or sets the priority of the operation in the <see cref="T:System.Windows.Threading.Dispatcher" /> queue. </summary>
      <returns>The priority of the delegate on the queue.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Result">
      <summary>Gets the result of the operation after it has completed. </summary>
      <returns>The result of the operation -or- null if the operation has not completed. </returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Status">
      <summary>Gets the current status of the operation..</summary>
      <returns>The status of the operation.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Wait">
      <summary>Waits for the operation to complete</summary>
      <returns>The status of the operation. </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Threading.DispatcherOperation.Status" /> is equal to <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" />.  This can occur when waiting for an operation that is already executing on the same thread.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Wait(System.TimeSpan)">
      <summary>Waits for the operation to complete in the specified period of time.</summary>
      <returns>The status of the operation. </returns>
      <param name="timeout">The maximum period of time to wait.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Threading.DispatcherOperation.Status" /> is equal to <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" />.  This can occur when waiting for an operation that is already executing on the same thread.</exception>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperationCallback">
      <summary>Represents a delegate to use for dispatcher operations.</summary>
      <returns>The object returned by the callback.</returns>
      <param name="arg">An argument passed to the callback.</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperationStatus">
      <summary>Describes the possible values for the status of a <see cref="T:System.Windows.Threading.DispatcherOperation" />. </summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Pending">
      <summary>The operation is pending and is still in the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Aborted">
      <summary>The operation has aborted. </summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Completed">
      <summary>The operation is completed. </summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Executing">
      <summary>The operation started executing, but has not completed. </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriority">
      <summary>Describes the priorities at which operations can be invoked by way of the <see cref="T:System.Windows.Threading.Dispatcher" />. </summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Invalid">
      <summary>The enumeration value is -1.  This is an invalid priority.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Inactive">
      <summary>The enumeration value is 0.  Operations are not processed.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.SystemIdle">
      <summary>The enumeration value is 1.  Operations are processed when the system is idle.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.ApplicationIdle">
      <summary>The enumeration value is 2.  Operations are processed when the application is idle. </summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.ContextIdle">
      <summary>The enumeration value is 3.  Operations are processed after background operations have completed.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Background">
      <summary>The enumeration value is 4.  Operations are processed after all other non-idle operations are completed.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Input">
      <summary>The enumeration value is 5.  Operations are processed at the same priority as input.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Loaded">
      <summary>The enumeration value is 6.  Operations are processed when layout and render has finished but just before items at input priority are serviced. Specifically this is used when raising the Loaded event.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Render">
      <summary>The enumeration value is 7.  Operations processed at the same priority as rendering.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.DataBind">
      <summary>The enumeration value is 8.  Operations are processed at the same priority as data binding.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Normal">
      <summary>The enumeration value is 9.  Operations are processed at normal priority.  This is the typical application priority.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Send">
      <summary>The enumeration value is 10.  Operations are processed before other asynchronous operations.  This is the highest priority. </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherProcessingDisabled">
      <summary>Represents the Dispatcher when it is in a disable state and provides a means to re-enable dispatcher processing. </summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.Dispose">
      <summary>Re-enables dispatcher processing.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> object is equal to this <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> object.</summary>
      <returns>true if the specified object is equal to this <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> object; otherwise, false.</returns>
      <param name="obj">The object to evaluate for equality.</param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.GetHashCode">
      <summary>Gets a hash code for this instance. </summary>
      <returns>A signed 32-bit integer hash code.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.op_Equality(System.Windows.Threading.DispatcherProcessingDisabled,System.Windows.Threading.DispatcherProcessingDisabled)">
      <summary>Determines whether two <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> objects are equal.</summary>
      <returns>true if the <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> objects are equal; otherwise, false.</returns>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.op_Inequality(System.Windows.Threading.DispatcherProcessingDisabled,System.Windows.Threading.DispatcherProcessingDisabled)">
      <summary>Determines whether two <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> objects are not equal.</summary>
      <returns>true if the <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> objects are not equal; otherwise, false.</returns>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherSynchronizationContext">
      <summary>Provides a synchronization context for Windows Presentation Foundation (WPF).</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> class by using the current <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor(System.Windows.Threading.Dispatcher)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> class by using the specified <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="dispatcher">The <see cref="T:System.Windows.Threading.Dispatcher" /> to associate this <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> with.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dispatcher" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.CreateCopy">
      <summary>Creates a copy of this <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />. </summary>
      <returns>The copy of this synchronization context.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Invokes the callback in the synchronization context asynchronously. </summary>
      <param name="d">The delegate to call.</param>
      <param name="state">The object passed to the delegate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Invokes the callback in the synchronization context synchronously.</summary>
      <param name="d">The delegate to call.</param>
      <param name="state">The object passed to the delegate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Wait(System.IntPtr[],System.Boolean,System.Int32)">
      <summary>Waits for any or all the elements in the specified array to receive a signal.</summary>
      <returns>The array index of the object that satisfied the wait.</returns>
      <param name="waitHandles">An array that contains the native operating system handles.</param>
      <param name="waitAll">true to wait for all handles; false to wait for any handle.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherTimer">
      <summary>A timer that is integrated into the <see cref="T:System.Windows.Threading.Dispatcher" /> queue which is processed at a specified interval of time and at a specified priority. </summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" /> class which uses the specified time interval, priority, event handler, and <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="interval">The period of time between ticks.</param>
      <param name="priority">The priority at which to invoke the timer.</param>
      <param name="callback">The event handler to call when the <see cref="E:System.Windows.Threading.DispatcherTimer.Tick" /> event occurs.</param>
      <param name="dispatcher">The dispatcher the timer is associated with.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dispatcher" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="interval" /> is less than 0 or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" /> class which processes timer events at the specified priority.</summary>
      <param name="priority">The priority at which to invoke the timer.</param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" /> class which runs on the specified <see cref="T:System.Windows.Threading.Dispatcher" /> at the specified priority.</summary>
      <param name="priority">The priority at which to invoke the timer.</param>
      <param name="dispatcher">The dispatcher the timer is associated with.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dispatcher" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Dispatcher">
      <summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> associated with this <see cref="T:System.Windows.Threading.DispatcherTimer" />. </summary>
      <returns>The dispatcher.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Interval">
      <summary>Gets or sets the period of time between timer ticks. </summary>
      <returns>The period of time between ticks. The default is 00:00:00.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="interval" /> is less than 0 or greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</exception>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.IsEnabled">
      <summary>Gets or sets a value that indicates whether the timer is running. </summary>
      <returns>true if the timer is enabled; otherwise, false.  The default is false.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.Start">
      <summary>Starts the <see cref="T:System.Windows.Threading.DispatcherTimer" />. </summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.Stop">
      <summary>Stops the <see cref="T:System.Windows.Threading.DispatcherTimer" />. </summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Tag">
      <summary>Gets or sets a user-defined data object that is passed to the <see cref="E:System.Windows.Threading.DispatcherTimer.Tick" /> event handler. </summary>
      <returns>The user-defined data.  The default is null.</returns>
    </member>
    <member name="E:System.Windows.Threading.DispatcherTimer.Tick">
      <summary>Occurs when the timer interval has elapsed. </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs">
      <summary>Provides data for the <see cref="T:System.Windows.Threading.Dispatcher" /> <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> event.</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception">
      <summary>Gets the exception that was raised when executing code by way of the dispatcher. </summary>
      <returns>The exception. </returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled">
      <summary>Gets or sets whether the exception event has been handled. </summary>
      <returns>true if the exception was handled; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> event.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs">
      <summary>Provides data for the <see cref="T:System.Windows.Threading.Dispatcher" /> <see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" /> event.</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.Exception">
      <summary>Gets the exception that was raised when executing code by way of the dispatcher.</summary>
      <returns>The exception.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch">
      <summary>Gets or sets whether the exception should be caught and the event handlers called. </summary>
      <returns>true if the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> should be raised; otherwise; false.  The default value is true.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" /> event.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\XamlBuildTask.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>XamlBuildTask</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Build.Tasks.Xaml.CompilationPass2Task">
      <summary>An MS Build task that verifies that all the types referenced in the original input XAML files are resolved.</summary>
    </member>
    <member name="M:Microsoft.Build.Tasks.Xaml.CompilationPass2Task.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Build.Tasks.Xaml.CompilationPass2Task" /> class.</summary>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.CompilationPass2Task.ApplicationMarkup">
      <summary>A list of XAML files to process, populated by MS Build.</summary>
      <returns>A list of the XAML files to process.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.CompilationPass2Task.AssemblyName">
      <summary>Gets or sets the name of the assembly to be generated.</summary>
      <returns>The name of the assembly.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.CompilationPass2Task.BuildTaskPath">
      <summary>Gets or sets the path to the assembly for this build task. </summary>
      <returns>The assembly path.</returns>
    </member>
    <member name="M:Microsoft.Build.Tasks.Xaml.CompilationPass2Task.Execute">
      <summary>Called by MS Build to execute the task.</summary>
      <returns>true if the task executes successfully; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.CompilationPass2Task.LocalAssemblyReference">
      <summary>Gets or sets the path to the generated temporary assembly.</summary>
      <returns>The path to the generated temporary assembly.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.CompilationPass2Task.References">
      <summary>Gets or sets a list of assemblies to reference during the compilation process. </summary>
      <returns>A list of the assemblies to reference during the compilation process.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.CompilationPass2Task.RootNamespace">
      <summary>Gets or sets the root namespace for the project.</summary>
      <returns>The root namespace.</returns>
    </member>
    <member name="T:Microsoft.Build.Tasks.Xaml.GenerateTemporaryAssemblyTask">
      <summary>An MS Build task that generates a temporary assembly by compiling the source files generated by the <see cref="T:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask" />. </summary>
    </member>
    <member name="M:Microsoft.Build.Tasks.Xaml.GenerateTemporaryAssemblyTask.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Build.Tasks.Xaml.GenerateTemporaryAssemblyTask" /> class.</summary>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.GenerateTemporaryAssemblyTask.ApplicationMarkupTypeName">
      <summary>Gets or sets the build action for the  application markup files which are excluded from the project used to generate the temporary assembly.</summary>
      <returns>The application markup type name.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.GenerateTemporaryAssemblyTask.AssemblyName">
      <summary>Gets or sets the generated assembly’s name.</summary>
      <returns>The assembly name.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.GenerateTemporaryAssemblyTask.CompileTargetName">
      <summary>Gets or sets the compilation target name to build in the generated project file used to build the generated temporary assembly.</summary>
      <returns>The compilation target name.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.GenerateTemporaryAssemblyTask.CurrentProject">
      <summary>Gets or sets the current project file name.</summary>
      <returns>The current project.</returns>
    </member>
    <member name="M:Microsoft.Build.Tasks.Xaml.GenerateTemporaryAssemblyTask.Execute">
      <summary>Called by MS Build to execute the task.</summary>
      <returns>true if the code is generated successfully; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.GenerateTemporaryAssemblyTask.OutputPath">
      <summary>Gets or sets the directory to place the generated files in.</summary>
      <returns>The directory that stores the generated files.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.GenerateTemporaryAssemblyTask.ReferencePaths">
      <summary>Gets or sets the paths to any referenced assemblies specified in the project.</summary>
      <returns>A list of <see cref="T:Microsoft.Build.Framework.ITaskItem" /> that represents the paths to referenced assemblies.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.GenerateTemporaryAssemblyTask.SourceCodeFiles">
      <summary>Gets or sets a list of source code files to compile into a temporary assembly.</summary>
      <returns>A list of <see cref="T:Microsoft.Build.Framework.ITaskItem" /> that represents the source code files.</returns>
    </member>
    <member name="T:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask">
      <summary>This task accesses XAML files that define types (with x:Class) and generates the corresponding source code that can be compiled into an assembly. </summary>
    </member>
    <member name="M:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask" /> class.</summary>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.ApplicationMarkup">
      <summary>A list of XAML files to process, populated by MS Build.</summary>
      <returns>A list of <see cref="T:Microsoft.Build.Framework.ITaskItem" /> that represents the XAML files to process.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.AssemblyName">
      <summary>Gets or sets the name of the assembly being compiled.</summary>
      <returns>The name of the assembly being compiled.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.BuildTaskPath">
      <summary>Gets or sets the path of the assembly that contains this build task. </summary>
      <returns>The build task path.</returns>
    </member>
    <member name="M:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.Execute">
      <summary>Called by MS Build to execute the code generation task.</summary>
      <returns>true if the code is generated successfully; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.GeneratedCodeFiles">
      <summary>Gets or sets a list of generated code files, one for each input file.</summary>
      <returns>A list of <see cref="T:Microsoft.Build.Framework.ITaskItem" /> that represents the source XAML files.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.GeneratedResources">
      <summary>Gets or sets a list of XAML files that contain the markup for instantiating the newly generated types, one for each input file.</summary>
      <returns>A list of <see cref="T:Microsoft.Build.Framework.ITaskItem" /> that represents the generated XAML files.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.GeneratedSourceExtension">
      <summary>Gets or sets the file extension to add to the generated source files.</summary>
      <returns>The file extension.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.KnownReferencePaths">
      <summary>Gets or sets the known reference paths.</summary>
      <returns>The known reference paths. </returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.Language">
      <summary>Gets or sets the language to generate source code in.</summary>
      <returns>The language to generate source code in.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.OutputPath">
      <summary>Gets or sets the directory to place the generated files.</summary>
      <returns>The directory that stores the generated files.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.References">
      <summary>Gets or sets a list of assemblies to reference.</summary>
      <returns>A list of <see cref="T:Microsoft.Build.Framework.ITaskItem" /> that represents referenced assemblies.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.RequiresCompilationPass2">
      <summary>Gets or sets a value that indicates whether this project requires executing the <see cref="T:Microsoft.Build.Tasks.Xaml.CompilationPass2Task" /> task.</summary>
      <returns>true if there are unresolved types; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.RootNamespace">
      <summary>Gets or sets the root namespace for the project.</summary>
      <returns>The root namespace.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.SourceCodeFiles">
      <summary>Gets or sets a list of source code files in the project.</summary>
      <returns>A list of <see cref="T:Microsoft.Build.Framework.ITaskItem" /> that represents the source code files in the project.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\PermissionSets\Internet.xml ===
﻿<PermissionSet
   version="1"
   class="System.Security.NamedPermissionSet"
   Name="Internet"
   Description="Default rights given to Internet applications">
   <IPermission
      version="1"
      class="System.Security.Permissions.FileDialogPermission, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      Access="Open" />
   <IPermission
      UserQuota="1024000"
      version="1"
      class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      Allowed="ApplicationIsolationByUser" />
   <IPermission
      version="1"
      class="System.Security.Permissions.SecurityPermission, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      Flags="Execution" />
   <IPermission
      version="1"
      class="System.Security.Permissions.UIPermission, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      Clipboard="OwnClipboard"
      Window="SafeTopLevelWindows" />
   <IPermission
      version="1"
      class="System.Drawing.Printing.PrintingPermission, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
      Level="SafePrinting" />
   <IPermission
      version="1"
      class="System.Security.Permissions.MediaPermission, WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
      Audio="SafeAudio"
      Image="SafeImage"
      Video="SafeVideo" />
   <IPermission
      version="1"
      class="System.Security.Permissions.WebBrowserPermission, WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
      Level="Safe" />
</PermissionSet>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Web.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Web</name>
  </assembly>
  <members>
    <member name="T:System.Web.ApplicationShutdownReason">
      <summary>Specifies why the <see cref="T:System.AppDomain" /> class shut down.</summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.None">
      <summary>No shutdown reason was provided. </summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.HostingEnvironment">
      <summary>The hosting environment shut down the application domain.</summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.ChangeInGlobalAsax">
      <summary>A change was made to the Global.asax file. </summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.ConfigurationChange">
      <summary>A change was made to the application-level configuration file.</summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.UnloadAppDomainCalled">
      <summary>A call was made to <see cref="M:System.Web.HttpRuntime.UnloadAppDomain" />. </summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.ChangeInSecurityPolicyFile">
      <summary>A change was made in the code access security policy file. </summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.BinDirChangeOrDirectoryRename">
      <summary>A change was made to the Bin folder or to files in it. </summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.BrowsersDirChangeOrDirectoryRename">
      <summary>A change was made to the App_Browsers folder or to files in it. </summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.CodeDirChangeOrDirectoryRename">
      <summary>A change was made to the App_Code folder or to files in it. </summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.ResourcesDirChangeOrDirectoryRename">
      <summary>A change was made to the App_GlobalResources folder or to files in it. </summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.IdleTimeout">
      <summary>The maximum idle time limit was reached. </summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.PhysicalApplicationPathChanged">
      <summary>A change was made to the physical path of the application. </summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.HttpRuntimeClose">
      <summary>A call was made to <see cref="M:System.Web.HttpRuntime.Close" />. </summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.InitializationError">
      <summary>An <see cref="T:System.AppDomain" /> initialization error occurred. </summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.MaxRecompilationsReached">
      <summary>The maximum number of dynamic recompiles of resources was reached.</summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.BuildManagerChange">
      <summary>The compilation system shut the application domain. The <see cref="F:System.Web.ApplicationShutdownReason.BuildManagerChange" /> member is introduced in the .NET Framework version 3.5.  For more information, see .NET Framework Architecture.</summary>
    </member>
    <member name="T:System.Web.BeginEventHandler">
      <summary>Represents the method that handles asynchronous events such as application events. This delegate is called at the start of an asynchronous operation.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that represents the result of the <see cref="T:System.Web.BeginEventHandler" /> operation.</returns>
      <param name="sender">The source of the event. </param>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      <param name="cb">The delegate to call when the asynchronous method call is complete. If <paramref name="cb" /> is null, the delegate is not called. </param>
      <param name="extraData">Any additional data needed to process the request. </param>
    </member>
    <member name="T:System.Web.DefaultHttpHandler">
      <summary>Represents the properties and methods of a default HTTP handler.</summary>
    </member>
    <member name="M:System.Web.DefaultHttpHandler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.DefaultHttpHandler" /> class.</summary>
    </member>
    <member name="M:System.Web.DefaultHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
      <summary>Initiates an asynchronous call to the HTTP handler.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that contains information about the status of the process.</returns>
      <param name="context">An object that provides references to intrinsic server objects that are used to service HTTP requests.</param>
      <param name="callback">The method to call when the asynchronous method call is complete. If <paramref name="callback" /> is null, the delegate is not called.</param>
      <param name="state">Any state data that is needed to process the request.</param>
      <exception cref="T:System.Web.HttpException">The preconditions for processing a request fail and either the requested file has the suffix .asp or the request was sent through POST.</exception>
    </member>
    <member name="P:System.Web.DefaultHttpHandler.Context">
      <summary>Gets the context that is associated with the current <see cref="T:System.Web.DefaultHttpHandler" /> object.</summary>
      <returns>An <see cref="T:System.Web.HttpContext" /> object that contains the current context.</returns>
    </member>
    <member name="M:System.Web.DefaultHttpHandler.EndProcessRequest(System.IAsyncResult)">
      <summary>Provides an end method for an asynchronous process.</summary>
      <param name="result">An object that contains information about the status of the process.</param>
    </member>
    <member name="P:System.Web.DefaultHttpHandler.ExecuteUrlHeaders">
      <summary>Gets a collection of request headers and request values to transfer along with the request.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.NameValueCollection" /> containing request headers and values.</returns>
    </member>
    <member name="P:System.Web.DefaultHttpHandler.IsReusable">
      <summary>Gets a Boolean value indicating that another request can use the current instance of the <see cref="T:System.Web.DefaultHttpHandler" /> class.</summary>
      <returns>true if the <see cref="T:System.Web.DefaultHttpHandler" /> is reusable; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure">
      <summary>Called when preconditions prevent the <see cref="T:System.Web.DefaultHttpHandler" /> object from processing a request.</summary>
    </member>
    <member name="M:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath">
      <summary>Overrides the target URL for the current request.</summary>
      <returns>The overridden URL to use in the request; or null if an overridden URL is not provided.</returns>
    </member>
    <member name="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)">
      <summary>Enables a <see cref="T:System.Web.DefaultHttpHandler" /> object to process of HTTP Web requests.</summary>
      <param name="context">An object that provides references to intrinsic server objects used to service HTTP requests.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" /> is called synchronously.</exception>
    </member>
    <member name="T:System.Web.EndEventHandler">
      <summary>Represents the method that handles asynchronous events such as application events. </summary>
      <param name="ar">The <see cref="T:System.IAsyncResult" /> that is the result of the <see cref="T:System.Web.BeginEventHandler" /> operation. </param>
    </member>
    <member name="T:System.Web.HtmlString">
      <summary>Represents an HTML-encoded string that should not be encoded again.</summary>
    </member>
    <member name="M:System.Web.HtmlString.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HtmlString" /> class.</summary>
      <param name="value">The value to HTML-encode.</param>
    </member>
    <member name="M:System.Web.HtmlString.ToHtmlString">
      <summary>Returns an HTML-encoded string.</summary>
      <returns>An HTML-encoded string.</returns>
    </member>
    <member name="M:System.Web.HtmlString.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:System.Web.HttpApplication">
      <summary>Defines the methods, properties, and events that are common to all application objects in an ASP.NET application. This class is the base class for applications that are defined by the user in the Global.asax file.</summary>
    </member>
    <member name="M:System.Web.HttpApplication.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpApplication" /> class.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.AcquireRequestState">
      <summary>Occurs when ASP.NET acquires the current state (for example, session state) that is associated with the current request.</summary>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.AcquireRequestState" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.AcquireRequestState" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.AcquireRequestState" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.AcquireRequestState" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.AcquireRequestState" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.AcquireRequestState" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.AcquireRequestState" />.</param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.AcquireRequestState" />.</param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.AcquireRequestState" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.AuthenticateRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.AuthenticateRequest" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.AuthenticateRequest" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.AuthenticateRequest" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.AuthenticateRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.AuthenticateRequest" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.AuthenticateRequest" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.AuthenticateRequest" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.AuthenticateRequest" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.AuthorizeRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.AuthorizeRequest" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.AuthorizeRequest" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.AuthorizeRequest" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.AuthorizeRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.AuthorizeRequest" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.AuthorizeRequest" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.AuthorizeRequest" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.AcquireRequestState" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.BeginRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.BeginRequest" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.BeginRequest" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.BeginRequest" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.BeginRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.BeginRequest" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.BeginRequest" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.BeginRequest" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.BeginRequest" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.EndRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.EndRequest" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.EndRequest" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.EndRequest" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.EndRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.EndRequest" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.EndRequest" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.EndRequest" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.EndRequest" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.LogRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.LogRequest" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.LogRequest" />.</param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.LogRequest" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.LogRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.LogRequest" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.LogRequest" />.</param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.LogRequest" />.</param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.LogRequest" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.MapRequestHandler" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.MapRequestHandler" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.MapRequestHandler" />.</param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.MapRequestHandler" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.MapRequestHandler" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.MapRequestHandler" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.MapRequestHandler" />.</param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.MapRequestHandler" />.</param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.MapRequestHandler" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostAcquireRequestState" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostAcquireRequestState" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostAcquireRequestState" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostAcquireRequestState" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostAcquireRequestState" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostAcquireRequestState" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostAcquireRequestState" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostAcquireRequestState" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.PostAcquireRequestState" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostAuthenticateRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostAuthenticateRequest" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostAuthenticateRequest" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostAuthenticateRequest" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" /> to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostLogRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostLogRequest" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostLogRequest" />.</param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostLogRequest" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostLogRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostLogRequest" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostLogRequest" />.</param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostLogRequest" />.</param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.PostLogRequest" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostMapRequestHandler" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostMapRequestHandler" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostMapRequestHandler" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostMapRequestHandler" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostMapRequestHandler" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostMapRequestHandler" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostMapRequestHandler" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostMapRequestHandler" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.PostMapRequestHandler" /> collection.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostReleaseRequestState" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostReleaseRequestState" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostReleaseRequestState" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostReleaseRequestState" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostReleaseRequestState" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostReleaseRequestState" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostReleaseRequestState" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostReleaseRequestState" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.PostReleaseRequestState" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostRequestHandlerExecute" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostRequestHandlerExecute" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostRequestHandlerExecute" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostRequestHandlerExecute" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostRequestHandlerExecute" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostRequestHandlerExecute" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostRequestHandlerExecute" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostRequestHandlerExecute" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.PostRequestHandlerExecute" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostResolveRequestCache" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostResolveRequestCache" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostResolveRequestCache" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostResolveRequestCache" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostResolveRequestCache" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostResolveRequestCache" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostResolveRequestCache" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostResolveRequestCache" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.PostResolveRequestCache" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostUpdateRequestCache" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostUpdateRequestCache" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostUpdateRequestCache" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostUpdateRequestCache" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostUpdateRequestCache" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostUpdateRequestCache" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the event. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostUpdateRequestCache" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.PostUpdateRequestCache" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PreRequestHandlerExecute" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PreRequestHandlerExecute" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PreRequestHandlerExecute" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PreRequestHandlerExecute" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PreRequestHandlerExecute" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PreRequestHandlerExecute" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PreRequestHandlerExecute" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PreRequestHandlerExecute" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.PreRequestHandlerExecute" /> collection.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.ReleaseRequestState" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.ReleaseRequestState" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.ReleaseRequestState" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.ReleaseRequestState" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.ReleaseRequestState" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.ReleaseRequestState" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.ReleaseRequestState" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.ReleaseRequestState" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.ReleaseRequestState" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.ResolveRequestCache" /> event handler to the collection of asynchronous <see cref="E:System.Web.HttpApplication.ResolveRequestCache" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.ResolveRequestCache" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.ResolveRequestCache" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.ResolveRequestCache" /> event handler to the collection of asynchronous <see cref="E:System.Web.HttpApplication.ResolveRequestCache" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.ResolveRequestCache" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.ResolveRequestCache" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.ResolveRequestCache" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.UpdateRequestCache" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.UpdateRequestCache" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.UpdateRequestCache" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.UpdateRequestCache" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.UpdateRequestCache" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.UpdateRequestCache" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.UpdateRequestCache" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.UpdateRequestCache" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.UpdateRequestCache" />.</param>
    </member>
    <member name="P:System.Web.HttpApplication.Application">
      <summary>Gets the current state of an application.</summary>
      <returns>The <see cref="T:System.Web.HttpApplicationState" /> for the current request.</returns>
    </member>
    <member name="E:System.Web.HttpApplication.AuthenticateRequest">
      <summary>Occurs when a security module has established the identity of the user.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.AuthorizeRequest">
      <summary>Occurs when a security module has verified user authorization.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.BeginRequest">
      <summary>Occurs as the first event in the HTTP pipeline chain of execution when ASP.NET responds to a request.</summary>
    </member>
    <member name="M:System.Web.HttpApplication.CompleteRequest">
      <summary>Causes ASP.NET to bypass all events and filtering in the HTTP pipeline chain of execution and directly execute the <see cref="E:System.Web.HttpApplication.EndRequest" /> event.</summary>
    </member>
    <member name="P:System.Web.HttpApplication.Context">
      <summary>Gets HTTP-specific information about the current request.</summary>
      <returns>The <see cref="T:System.Web.HttpContext" /> for the current request.</returns>
    </member>
    <member name="M:System.Web.HttpApplication.Dispose">
      <summary>Disposes the <see cref="T:System.Web.HttpApplication" /> instance.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.Disposed">
      <summary>Occurs when the application is disposed.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.EndRequest">
      <summary>Occurs as the last event in the HTTP pipeline chain of execution when ASP.NET responds to a request.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.Error">
      <summary>Occurs when an unhandled exception is thrown.</summary>
    </member>
    <member name="P:System.Web.HttpApplication.Events">
      <summary>Gets the list of event handler delegates that process all application events.</summary>
      <returns>An <see cref="T:System.ComponentModel.EventHandlerList" /> that contains the names of the event handler delegates.</returns>
    </member>
    <member name="M:System.Web.HttpApplication.GetOutputCacheProviderName(System.Web.HttpContext)">
      <summary>Gets the name of the default output-cache provider that is configured for a Web site. </summary>
      <returns>The name of the default provider.</returns>
      <param name="context">An <see cref="T:System.Web.HttpContext" /> that provides references to intrinsic server objects that are used to service HTTP requests.</param>
      <exception cref="T:System.Configuration.Provider.ProviderException">
        <paramref name="context" /> is null or is an empty string.</exception>
    </member>
    <member name="M:System.Web.HttpApplication.GetVaryByCustomString(System.Web.HttpContext,System.String)">
      <summary>Provides an application-wide implementation of the <see cref="P:System.Web.UI.PartialCachingAttribute.VaryByCustom" /> property.</summary>
      <returns>If the value of the <paramref name="custom" /> parameter is "browser", the browser's <see cref="P:System.Web.Configuration.HttpCapabilitiesBase.Type" />; otherwise, null.</returns>
      <param name="context">An <see cref="T:System.Web.HttpContext" /> object that contains information about the current Web request. </param>
      <param name="custom">The custom string that specifies which cached response is used to respond to the current request. </param>
    </member>
    <member name="M:System.Web.HttpApplication.Init">
      <summary>Executes custom initialization code after all event handler modules have been added.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.LogRequest">
      <summary>Occurs just before ASP.NET performs any logging for the current request.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.MapRequestHandler">
      <summary>Occurs when the handler is selected to respond to the request.</summary>
    </member>
    <member name="P:System.Web.HttpApplication.Modules">
      <summary>Gets the collection of modules for the current application.</summary>
      <returns>An <see cref="T:System.Web.HttpModuleCollection" /> that contains the names of the modules for the application.</returns>
    </member>
    <member name="E:System.Web.HttpApplication.PostAcquireRequestState">
      <summary>Occurs when the request state (for example, session state) that is associated with the current request has been obtained.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.PostAuthenticateRequest">
      <summary>Occurs when a security module has established the identity of the user.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.PostAuthorizeRequest">
      <summary>Occurs when the user for the current request has been authorized.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.PostLogRequest">
      <summary>Occurs when ASP.NET has completed processing all the event handlers for the <see cref="E:System.Web.HttpApplication.LogRequest" /> event.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.PostMapRequestHandler">
      <summary>Occurs when ASP.NET has mapped the current request to the appropriate event handler.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.PostReleaseRequestState">
      <summary>Occurs when ASP.NET has completed executing all request event handlers and the request state data has been stored.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.PostRequestHandlerExecute">
      <summary>Occurs when the ASP.NET event handler (for example, a page or an XML Web service) finishes execution.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.PostResolveRequestCache">
      <summary>Occurs when ASP.NET bypasses execution of the current event handler and allows a caching module to serve a request from the cache.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.PostUpdateRequestCache">
      <summary>Occurs when ASP.NET finishes updating caching modules and storing responses that are used to serve subsequent requests from the cache.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.PreRequestHandlerExecute">
      <summary>Occurs just before ASP.NET starts executing an event handler (for example, a page or an XML Web service).</summary>
    </member>
    <member name="E:System.Web.HttpApplication.PreSendRequestContent">
      <summary>Occurs just before ASP.NET sends content to the client.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.PreSendRequestHeaders">
      <summary>Occurs just before ASP.NET sends HTTP headers to the client.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.ReleaseRequestState">
      <summary>Occurs after ASP.NET finishes executing all request event handlers. This event causes state modules to save the current state data.</summary>
    </member>
    <member name="P:System.Web.HttpApplication.Request">
      <summary>Gets the intrinsic request object for the current request.</summary>
      <returns>The <see cref="T:System.Web.HttpRequest" /> object that the application is processing.</returns>
      <exception cref="T:System.Web.HttpException">The <see cref="T:System.Web.HttpRequest" /> object is null.</exception>
    </member>
    <member name="E:System.Web.HttpApplication.ResolveRequestCache">
      <summary>Occurs when ASP.NET finishes an authorization event to let the caching modules serve requests from the cache, bypassing execution of the event handler (for example, a page or an XML Web service).</summary>
    </member>
    <member name="P:System.Web.HttpApplication.Response">
      <summary>Gets the intrinsic response object for the current request.</summary>
      <returns>The <see cref="T:System.Web.HttpResponse" /> object that the application is processing.</returns>
      <exception cref="T:System.Web.HttpException">The <see cref="T:System.Web.HttpResponse" /> object is null. </exception>
    </member>
    <member name="P:System.Web.HttpApplication.Server">
      <summary>Gets the intrinsic server object for the current request.</summary>
      <returns>The <see cref="T:System.Web.HttpServerUtility" /> object that the application is processing.</returns>
    </member>
    <member name="P:System.Web.HttpApplication.Session">
      <summary>Gets the intrinsic session object that provides access to session data.</summary>
      <returns>The <see cref="T:System.Web.SessionState.HttpSessionState" /> object for the current session.</returns>
      <exception cref="T:System.Web.HttpException">The <see cref="T:System.Web.SessionState.HttpSessionState" /> object is null. </exception>
    </member>
    <member name="P:System.Web.HttpApplication.Site">
      <summary>Gets or sets a site interface for an <see cref="T:System.ComponentModel.IComponent" /> implementation.</summary>
      <returns>An <see cref="T:System.ComponentModel.ISite" /> object that allows a container to manage and communicate with its child components.</returns>
    </member>
    <member name="M:System.Web.HttpApplication.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
      <summary>Initiates an asynchronous call to the HTTP event handler.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that contains information about the status of the process.</returns>
      <param name="context">An <see cref="T:System.Web.HttpContext" /> that provides references to intrinsic server objects that are used to service HTTP requests.</param>
      <param name="cb">The <see cref="T:System.AsyncCallback" /> to call when the asynchronous method call is complete. If the <paramref name="cb" /> parameter is null, the delegate is not called.</param>
      <param name="extraData">Any extra data that is required to process the request.</param>
    </member>
    <member name="M:System.Web.HttpApplication.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)">
      <summary>Provides an asynchronous process End method when the process finishes.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that contains information about the status of the process. </param>
    </member>
    <member name="P:System.Web.HttpApplication.System#Web#IHttpHandler#IsReusable">
      <summary>Gets a Boolean value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> object.</summary>
      <returns>true if the <see cref="T:System.Web.IHttpHandler" /> object is reusable; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.HttpApplication.System#Web#IHttpHandler#ProcessRequest(System.Web.HttpContext)">
      <summary>Enables processing of HTTP Web requests by a custom HTTP handler that implements the <see cref="T:System.Web.IHttpHandler" /> interface.</summary>
      <param name="context">An <see cref="T:System.Web.HttpContext" /> that provides references to the intrinsic server objects that are used to service HTTP requests.</param>
      <exception cref="T:System.Web.HttpException">In all cases.</exception>
    </member>
    <member name="E:System.Web.HttpApplication.UpdateRequestCache">
      <summary>Occurs when ASP.NET finishes executing an event handler in order to let caching modules store responses that will be used to serve subsequent requests from the cache.</summary>
    </member>
    <member name="P:System.Web.HttpApplication.User">
      <summary>Gets the intrinsic user object for the current request.</summary>
      <returns>The <see cref="T:System.Security.Principal.IPrincipal" /> object that represents the current authenticated or anonymous user.</returns>
      <exception cref="T:System.Web.HttpException">The <see cref="T:System.Security.Principal.IPrincipal" /> object is null. </exception>
    </member>
    <member name="T:System.Web.HttpApplicationState">
      <summary>Enables sharing of global information across multiple sessions and requests within an ASP.NET application.</summary>
    </member>
    <member name="M:System.Web.HttpApplicationState.Add(System.String,System.Object)">
      <summary>Adds a new object to the <see cref="T:System.Web.HttpApplicationState" /> collection.</summary>
      <param name="name">The name of the object to be added to the collection. </param>
      <param name="value">The value of the object. </param>
    </member>
    <member name="P:System.Web.HttpApplicationState.AllKeys">
      <summary>Gets the access keys in the <see cref="T:System.Web.HttpApplicationState" /> collection.</summary>
      <returns>A string array of <see cref="T:System.Web.HttpApplicationState" /> object names.</returns>
    </member>
    <member name="M:System.Web.HttpApplicationState.Clear">
      <summary>Removes all objects from an <see cref="T:System.Web.HttpApplicationState" /> collection.</summary>
    </member>
    <member name="P:System.Web.HttpApplicationState.Contents">
      <summary>Gets a reference to the <see cref="T:System.Web.HttpApplicationState" /> object.</summary>
      <returns>A reference to the <see cref="T:System.Web.HttpApplicationState" /> object.</returns>
    </member>
    <member name="P:System.Web.HttpApplicationState.Count">
      <summary>Gets the number of objects in the <see cref="T:System.Web.HttpApplicationState" /> collection.</summary>
      <returns>The number of item objects in the collection. The default is 0.</returns>
    </member>
    <member name="M:System.Web.HttpApplicationState.Get(System.Int32)">
      <summary>Gets an <see cref="T:System.Web.HttpApplicationState" /> object by numerical index.</summary>
      <returns>The object referenced by <paramref name="index" />.</returns>
      <param name="index">The index of the application state object. </param>
    </member>
    <member name="M:System.Web.HttpApplicationState.Get(System.String)">
      <summary>Gets an <see cref="T:System.Web.HttpApplicationState" /> object by name.</summary>
      <returns>The object referenced by <paramref name="name" />.</returns>
      <param name="name">The name of the object. </param>
    </member>
    <member name="M:System.Web.HttpApplicationState.GetKey(System.Int32)">
      <summary>Gets an <see cref="T:System.Web.HttpApplicationState" /> object name by index.</summary>
      <returns>The name under which the application state object was saved.</returns>
      <param name="index">The index of the application state object. </param>
    </member>
    <member name="P:System.Web.HttpApplicationState.Item(System.Int32)">
      <summary>Gets a single <see cref="T:System.Web.HttpApplicationState" /> object by index.</summary>
      <returns>The object referenced by <paramref name="index" />.</returns>
      <param name="index">The numerical index of the object in the collection. </param>
    </member>
    <member name="P:System.Web.HttpApplicationState.Item(System.String)">
      <summary>Gets the value of a single <see cref="T:System.Web.HttpApplicationState" /> object by name.</summary>
      <returns>The object referenced by <paramref name="name" />.</returns>
      <param name="name">The name of the object in the collection. </param>
    </member>
    <member name="M:System.Web.HttpApplicationState.Lock">
      <summary>Locks access to an <see cref="T:System.Web.HttpApplicationState" /> variable to facilitate access synchronization.</summary>
    </member>
    <member name="M:System.Web.HttpApplicationState.Remove(System.String)">
      <summary>Removes the named object from an <see cref="T:System.Web.HttpApplicationState" /> collection.</summary>
      <param name="name">The name of the object to be removed from the collection. </param>
    </member>
    <member name="M:System.Web.HttpApplicationState.RemoveAll">
      <summary>Removes all objects from an <see cref="T:System.Web.HttpApplicationState" /> collection.</summary>
    </member>
    <member name="M:System.Web.HttpApplicationState.RemoveAt(System.Int32)">
      <summary>Removes an <see cref="T:System.Web.HttpApplicationState" /> object from a collection by index.</summary>
      <param name="index">The position in the collection of the item to remove. </param>
    </member>
    <member name="M:System.Web.HttpApplicationState.Set(System.String,System.Object)">
      <summary>Updates the value of an object in an <see cref="T:System.Web.HttpApplicationState" /> collection.</summary>
      <param name="name">The name of the object to be updated. </param>
      <param name="value">The updated value of the object. </param>
    </member>
    <member name="P:System.Web.HttpApplicationState.StaticObjects">
      <summary>Gets all objects declared by an &lt;object&gt; tag where the scope is set to "Application" within the ASP.NET application.</summary>
      <returns>A collection of objects on the page.</returns>
    </member>
    <member name="M:System.Web.HttpApplicationState.UnLock">
      <summary>Unlocks access to an <see cref="T:System.Web.HttpApplicationState" /> variable to facilitate access synchronization.</summary>
    </member>
    <member name="T:System.Web.HttpApplicationStateBase">
      <summary>Serves as the base class for classes that enable information to be shared across multiple sessions and requests within an ASP.NET application.</summary>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.#ctor">
      <summary>Initializes the class for use by an inherited class instance. This constructor can only be called by an inherited class.</summary>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.Add(System.String,System.Object)">
      <summary>When overridden in a derived class, adds a new object to the collection.</summary>
      <param name="name">The name of the object to add to the collection.</param>
      <param name="value">The value of the object.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpApplicationStateBase.AllKeys">
      <summary>When overridden in a derived class, gets the access keys for the objects in the collection.</summary>
      <returns>An array of state object keys.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.Clear">
      <summary>When overridden in a derived class, removes all objects from the collection.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpApplicationStateBase.Contents">
      <summary>When overridden in a derived class, gets a reference to the <see cref="T:System.Web.HttpApplicationStateBase" /> object.</summary>
      <returns>A reference to the <see cref="T:System.Web.HttpApplicationState" /> object.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.CopyTo(System.Array,System.Int32)">
      <summary>When overridden in a derived class, copies the elements of the collection to an array, starting at the specified index in the array.</summary>
      <param name="array">The one-dimensional array that is the destination for the elements that are copied from the collection. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which to begin copying. </param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpApplicationStateBase.Count">
      <summary>When overridden in a derived class, gets the number of objects in the collection.</summary>
      <returns>The number of objects in the collection.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.Get(System.Int32)">
      <summary>When overridden in a derived class, gets a state object by index.</summary>
      <returns>The object referenced by <paramref name="index" />.</returns>
      <param name="index">The index of the application state object to get.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.Get(System.String)">
      <summary>When overridden in a derived class, gets a state object by name.</summary>
      <returns>The object referenced by <paramref name="name" />.</returns>
      <param name="name">The name of the object to get.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.GetEnumerator">
      <summary>When overridden in a derived class, returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An object that can be used to iterate through the collection.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.GetKey(System.Int32)">
      <summary>When overridden in a derived class, gets the name of a state object by index.</summary>
      <returns>The name of the application state object.</returns>
      <param name="index">The index of the application state object to get.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpApplicationStateBase.IsSynchronized">
      <summary>When overridden in a derived class, gets a value that indicates whether access to the collection is thread-safe.</summary>
      <returns>true if access is synchronized (thread-safe); otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpApplicationStateBase.Item(System.Int32)">
      <summary>When overridden in a derived class, gets a state object by index.</summary>
      <returns>The object referenced by <paramref name="index" />.</returns>
      <param name="index">The index of the object in the collection.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpApplicationStateBase.Item(System.String)">
      <summary>When overridden in a derived class, gets a state object by name.</summary>
      <returns>The object referenced by <paramref name="name" />.</returns>
      <param name="name">The name of the object in the collection.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.Lock">
      <summary>When overridden in a derived class, locks access to objects in the collection in order to enable synchronized access.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.Remove(System.String)">
      <summary>When overridden in a derived class, removes the named object from the collection.</summary>
      <param name="name">The name of the object to remove from the collection.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.RemoveAll">
      <summary>When overridden in a derived class, removes all objects from the collection.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.RemoveAt(System.Int32)">
      <summary>When overridden in a derived class, removes a state object specified by index from the collection.</summary>
      <param name="index">The position in the collection of the item to remove.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.Set(System.String,System.Object)">
      <summary>When overridden in a derived class, updates the value of an object in the collection.</summary>
      <param name="name">The name of the object to update.</param>
      <param name="value">The updated value of the object.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpApplicationStateBase.StaticObjects">
      <summary>When overridden in a derived class, gets all objects that are declared by an object element where the scope is set to "Application" in the ASP.NET application.</summary>
      <returns>A collection of objects in the application.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpApplicationStateBase.SyncRoot">
      <summary>When overridden in a derived class, gets an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.UnLock">
      <summary>When overridden in a derived class, unlocks access to objects in the collection to enable synchronized access.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="T:System.Web.HttpApplicationStateWrapper">
      <summary>Encapsulates the HTTP intrinsic object that enables information to be shared across multiple requests and sessions within an ASP.NET application.</summary>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.#ctor(System.Web.HttpApplicationState)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpApplicationStateWrapper" /> class. </summary>
      <param name="httpApplicationState">The object that this wrapper class provides access to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="httpApplicationState" /> is null.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.Add(System.String,System.Object)">
      <summary>Adds an object to the collection.</summary>
      <param name="name">The name of the object to add to the collection.</param>
      <param name="value">The value of the object.</param>
    </member>
    <member name="P:System.Web.HttpApplicationStateWrapper.AllKeys">
      <summary>Gets the keys for the objects in the collection.</summary>
      <returns>An array of state object keys.</returns>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.Clear">
      <summary>Removes all objects from the collection.</summary>
    </member>
    <member name="P:System.Web.HttpApplicationStateWrapper.Contents">
      <summary>Gets a reference to the <see cref="T:System.Web.HttpApplicationStateBase" /> object.</summary>
      <returns>A reference to the <see cref="T:System.Web.HttpApplicationState" /> object.</returns>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the collection to an array, starting at the specified index in the array.</summary>
      <param name="array">The one-dimensional array that is the destination for the elements that are copied from the collection. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which to begin copying.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-The number of elements in the source <see cref="T:System.Web.HttpApplicationStateWrapper" /> object is greater than the available space from <paramref name="index" /> to the end of the destination array.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Web.HttpApplicationStateWrapper" /> object cannot be cast to the type of the destination array.</exception>
    </member>
    <member name="P:System.Web.HttpApplicationStateWrapper.Count">
      <summary>Gets the number of objects in the collection.</summary>
      <returns>The number of objects in the collection.</returns>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.Get(System.Int32)">
      <summary>Returns a state object by index.</summary>
      <returns>The object referenced by <paramref name="index" />.</returns>
      <param name="index">The index of the application state object to get.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.Get(System.String)">
      <summary>Returns a state object by name.</summary>
      <returns>The object referenced by <paramref name="name" />, if found; otherwise, null.</returns>
      <param name="name">The name of the object to get.</param>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through a collection.</summary>
      <returns>An object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.GetKey(System.Int32)">
      <summary>Returns the name of a state object by index.</summary>
      <returns>The name of the application state object.</returns>
      <param name="index">The index of the application state object to get.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Returns the data that is necessary to serialize the <see cref="T:System.Web.HttpApplicationStateWrapper" /> object.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the information that is required to serialize the <see cref="T:System.Web.HttpApplicationStateWrapper" /> object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the source and destination of the serialized stream that is associated with the <see cref="T:System.Web.HttpApplicationStateWrapper" /> object.</param>
    </member>
    <member name="P:System.Web.HttpApplicationStateWrapper.IsSynchronized">
      <summary>Gets a value that indicates whether access to the collection is thread-safe.</summary>
      <returns>true if access is synchronized (thread-safe); otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpApplicationStateWrapper.Item(System.Int32)">
      <summary>Gets a state object by index.</summary>
      <returns>The object referenced by <paramref name="index" />.</returns>
      <param name="index">The index of the object in the collection.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="P:System.Web.HttpApplicationStateWrapper.Item(System.String)">
      <summary>Gets a state object by name.</summary>
      <returns>The object referenced by <paramref name="name" />, if found; otherwise, null.</returns>
      <param name="name">The name of the object in the collection.</param>
    </member>
    <member name="P:System.Web.HttpApplicationStateWrapper.Keys">
      <summary>Gets a <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> instance that contains all the keys in the <see cref="T:System.Web.HttpApplicationStateWrapper" /> instance.</summary>
      <returns>A collection of all the keys in the collection.</returns>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.Lock">
      <summary>Locks access to objects in the collection in order to enable synchronized access.</summary>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.OnDeserialization(System.Object)">
      <summary>Raises the deserialization event when deserialization is finished.</summary>
      <param name="sender">The source of the deserialization event.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that is associated with the current <see cref="T:System.Web.HttpApplicationStateWrapper" /> instance is invalid.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.Remove(System.String)">
      <summary>Removes the object specified by name from the collection.</summary>
      <param name="name">The name of the object to remove from the collection.</param>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.RemoveAll">
      <summary>Removes all objects from the collection.</summary>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.RemoveAt(System.Int32)">
      <summary>Removes the object specified by index from the collection.</summary>
      <param name="index">The position in the collection of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.Set(System.String,System.Object)">
      <summary>Updates the value of an object in the collection.</summary>
      <param name="name">The name of the object to update.</param>
      <param name="value">The updated value of the object.</param>
    </member>
    <member name="P:System.Web.HttpApplicationStateWrapper.StaticObjects">
      <summary>Gets all objects that are declared by an object element where the scope is set to "Application" in the ASP.NET application.</summary>
      <returns>A collection of objects in the application.</returns>
    </member>
    <member name="P:System.Web.HttpApplicationStateWrapper.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.UnLock">
      <summary>Unlocks access to objects in the collection to enable synchronized access.</summary>
    </member>
    <member name="T:System.Web.HttpBrowserCapabilities">
      <summary>Enables the server to gather information on the capabilities of the browser that is running on the client.</summary>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilities.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Web.HttpBrowserCapabilities" /> class.</summary>
    </member>
    <member name="T:System.Web.HttpBrowserCapabilitiesBase">
      <summary>Serves as the base class for classes that enable the server to gather information about the capabilities of the browser that made the current request.</summary>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesBase.#ctor">
      <summary>Initializes the class for use by an inherited class instance. This constructor can only be called by an inherited class.</summary>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.ActiveXControls">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser is capable of supporting ActiveX controls.</summary>
      <returns>true if the browser can support ActiveX controls; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Adapters">
      <summary>When overridden in a derived class, gets the collection of available control adapters.</summary>
      <returns>The registered control adapters for the browser.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesBase.AddBrowser(System.String)">
      <summary>When overridden in a derived class, used internally to add an entry to the internal collection of browsers for which capabilities are recognized.</summary>
      <param name="browserName">The name of the browser to add.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.AOL">
      <summary>When overridden in a derived class, gets a value that indicates whether the client is an America Online (AOL) browser.</summary>
      <returns>true if the browser is an AOL browser; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.BackgroundSounds">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports playing background sounds by using the bgsounds HTML element.</summary>
      <returns>true if the browser supports playing background sounds; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Beta">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser is a beta version.</summary>
      <returns>true if the browser is a beta version; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Browser">
      <summary>When overridden in a derived class, gets the browser string (if any) that was sent by the browser in the User-Agent request header.</summary>
      <returns>The contents of the User-Agent request header that was sent by the browser.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Browsers">
      <summary>When overridden in a derived class, gets a collection of browsers for which capabilities are recognized.</summary>
      <returns>The browsers for which capabilities are recognized.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.CanCombineFormsInDeck">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports decks that contain multiple forms, such as separate cards.</summary>
      <returns>true if the browser supports decks that contain multiple forms; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.CanInitiateVoiceCall">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser device is capable of initiating a voice call.</summary>
      <returns>true if the browser device is capable of initiating a voice call; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.CanRenderAfterInputOrSelectElement">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports page content that follows WML select or input elements.</summary>
      <returns>true if the browser supports page content that follows HTML select or input elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.CanRenderEmptySelects">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports empty HTML select elements.</summary>
      <returns>true if the browser supports empty HTML select elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.CanRenderInputAndSelectElementsTogether">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports WML input and select elements together in the same card.</summary>
      <returns>true if the browser supports WML input and select elements together; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.CanRenderMixedSelects">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports WML option elements that specify both onpick and value attributes.</summary>
      <returns>true if the browser supports WML option elements that specify both onpick and value attributes; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.CanRenderOneventAndPrevElementsTogether">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports WML onevent and prev elements in the same card.</summary>
      <returns>true if the browser supports WML onevent and prev elements in the same WML card; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.CanRenderPostBackCards">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports WML cards for postback.</summary>
      <returns>true if the browser supports WML cards for postback; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.CanRenderSetvarZeroWithMultiSelectionList">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports WML setvar elements that have a value attribute of 0.</summary>
      <returns>true if the browser supports WML setvar elements that have a value attribute of 0; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.CanSendMail">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports sending e-mail messages by using the HTML mailto scheme.</summary>
      <returns>true if the browser supports sending e-mail message by using the HTML mailto scheme; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Capabilities">
      <summary>When overridden in a derived class, used internally to get the defined capabilities of the browser.</summary>
      <returns>The defined capabilities of the browser.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.CDF">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports Channel Definition Format (CDF) for webcasting.</summary>
      <returns>true if the browser supports CDF; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.ClrVersion">
      <summary>When overridden in a derived class, gets the version of the .NET Framework that is installed on the client.</summary>
      <returns>The common language runtime (CLR) version.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesBase.CompareFilters(System.String,System.String)">
      <summary>When overridden in a derived class, used internally to compare filters.</summary>
      <returns>1 if <paramref name="filter1" /> is a parent of <paramref name="filter2" />; -1 if <paramref name="filter2" /> is a parent of <paramref name="filter1" />; or 0 if there is no parent-child relationship between <paramref name="filter1" /> and <paramref name="filter2" />.</returns>
      <param name="filter1">The first filter to compare.</param>
      <param name="filter2">The second filter to compare.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Cookies">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser is capable of supporting cookies.</summary>
      <returns>true if the browser can support cookies; otherwise, false.NoteThis property does not indicate whether cookies are currently enabled in the browser, only whether the browser can support cookies.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Crawler">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser is a search-engine Web crawler.</summary>
      <returns>true if the browser is a search-engine crawler; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesBase.CreateHtmlTextWriter(System.IO.TextWriter)">
      <summary>When overridden in a derived class, creates a new instance of the <see cref="T:System.Web.UI.HtmlTextWriter" /> object to use to render markup to the browser.</summary>
      <returns>A new instance of the object.</returns>
      <param name="w">The object to be created.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.DefaultSubmitButtonLimit">
      <summary>When overridden in a derived class, gets the maximum number of submit buttons that are allowed for a form.</summary>
      <returns>The maximum number of submit buttons that are allowed for a form.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesBase.DisableOptimizedCacheKey">
      <summary>When overridden in a derived class, used internally to disable use of an optimized cache key.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.EcmaScriptVersion">
      <summary>When overridden in a derived class, gets the version number of ECMAScript (JavaScript) that the browser supports.</summary>
      <returns>The version number of ECMAScript (JavaScript) that the browser supports.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesBase.EvaluateFilter(System.String)">
      <summary>When overridden in a derived class, used internally to evaluate a filter.</summary>
      <returns>true if the filter was successfully evaluated; otherwise, false.</returns>
      <param name="filterName">The filter to evaluate.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Frames">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports HTML frames.</summary>
      <returns>true if the browser supports frames; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.GatewayMajorVersion">
      <summary>When overridden in a derived class, gets the major version number of the wireless gateway that is used to access the server, if known. </summary>
      <returns>The major version number of the wireless gateway that is used to access the server, if known.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.GatewayMinorVersion">
      <summary>When overridden in a derived class, gets the minor version number of the wireless gateway that is used to access the server, if known. </summary>
      <returns>The minor version number of the wireless gateway that is used to access the server, if known.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.GatewayVersion">
      <summary>When overridden in a derived class, gets the version of the wireless gateway that is used to access the server, if known.</summary>
      <returns>The version number of the wireless gateway that is used to access the server, if known.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesBase.GetClrVersions">
      <summary>When overridden in a derived class, gets all versions of the .NET Framework common language runtime (CLR) that are installed on the client.</summary>
      <returns>An array of <see cref="T:System.Version" /> objects.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.HasBackButton">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser has a dedicated Back button.</summary>
      <returns>true if the browser has a dedicated Back button; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.HidesRightAlignedMultiselectScrollbars">
      <summary>When overridden in a derived class, gets a value that indicates whether the scrollbar of an HTML select multiple element that has an align attribute value of right is obscured upon rendering.</summary>
      <returns>true if the scrollbar of an HTML select multiple element that has an align attribute value of right is obscured upon rendering; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.HtmlTextWriter">
      <summary>When overridden in a derived class, gets or sets the fully qualified class name of the <see cref="T:System.Web.UI.HtmlTextWriter" /> to use for writing markup characters and text.</summary>
      <returns>The fully qualified class name of the <see cref="T:System.Web.UI.HtmlTextWriter" /> to use for writing markup characters and text.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Id">
      <summary>When overridden in a derived class, gets the internal identifier of the browser as specified in the browser definition file.</summary>
      <returns>The internal identifier of the browser as specified in the browser definition file.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.InputType">
      <summary>When overridden in a derived class, gets the type of input that is supported by the browser.</summary>
      <returns>The type of input supported by the browser.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesBase.IsBrowser(System.String)">
      <summary>When overridden in a derived class, gets a value that indicates whether the client browser is the same as the specified browser.</summary>
      <returns>true if the client browser is the same as the specified browser; otherwise, false.</returns>
      <param name="browserName">The specified browser.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.IsColor">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser has a color display.</summary>
      <returns>true if the browser has a color display; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.IsMobileDevice">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser is a recognized mobile device.</summary>
      <returns>true if the browser is a recognized mobile device; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Item(System.String)">
      <summary>When overridden in a derived class, gets the value of the specified browser capability. In C#, this property is the indexer for the class.</summary>
      <returns>The browser capability with the specified key name.</returns>
      <param name="key">The name of the browser capability to retrieve.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.JavaApplets">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports Java.</summary>
      <returns>true if the browser supports Java; otherwise, false.NoteThis property does not indicate whether Java is currently enabled in the browser, only whether the browser can support Java.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.JScriptVersion">
      <summary>When overridden in a derived class, gets the JScript version that the browser supports.</summary>
      <returns>The version of JScript that the browser supports.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.MajorVersion">
      <summary>When overridden in a derived class, gets the major (integer) version number of the browser.</summary>
      <returns>The major version number of the browser.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.MaximumHrefLength">
      <summary>When overridden in a derived class, gets the maximum length in characters for the href attribute of an HTML a (anchor) element.</summary>
      <returns>The maximum length in characters for the href attribute of an HTML a (anchor) element.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.MaximumRenderedPageSize">
      <summary>When overridden in a derived class, gets the maximum length of the page, in bytes, that the browser can display. </summary>
      <returns>The maximum length of the page, in bytes, that the browser can display.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.MaximumSoftkeyLabelLength">
      <summary>When overridden in a derived class, gets the maximum length of the text that a soft-key label can display.</summary>
      <returns>The maximum length of the text that a soft-key label can display.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.MinorVersion">
      <summary>When overridden in a derived class, gets the minor (decimal) version number of the browser.</summary>
      <returns>The minor version number of the browser.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.MinorVersionString">
      <summary>When overridden in a derived class, gets the minor (decimal) version number of the browser as a string.</summary>
      <returns>A string that represents the minor version number of the browser.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.MobileDeviceManufacturer">
      <summary>When overridden in a derived class, gets the name of the manufacturer of a mobile device, if known.</summary>
      <returns>The name of the manufacturer of a mobile device, if known.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.MobileDeviceModel">
      <summary>When overridden in a derived class, gets the model name of a mobile device, if known.</summary>
      <returns>The model name of a mobile device, if known.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.MSDomVersion">
      <summary>When overridden in a derived class, gets the version of the Microsoft HTML (MSHTML) Document Object Model (DOM) that the browser supports.</summary>
      <returns>The MSHTML DOM version that the browser supports.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.NumberOfSoftkeys">
      <summary>When overridden in a derived class, gets the number of softkeys on a mobile device.</summary>
      <returns>The number of softkeys supported on a mobile device.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Platform">
      <summary>When overridden in a derived class, gets the name of the operating system that the client is using, if known.</summary>
      <returns>The operating system that the client is using, if known.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.PreferredImageMime">
      <summary>When overridden in a derived class, gets the MIME type of the type of image content that the browser typically prefers.</summary>
      <returns>The MIME type of the type of image content that the browser typically prefers.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.PreferredRenderingMime">
      <summary>When overridden in a derived class, gets the MIME type of the type of content that the browser typically prefers.</summary>
      <returns>The MIME type of the type of content that the browser typically prefers.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.PreferredRenderingType">
      <summary>When overridden in a derived class, gets the general name for the type of content that the browser prefers.</summary>
      <returns>The values "html32" or "chtml10".</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.PreferredRequestEncoding">
      <summary>When overridden in a derived class, gets the request encoding that the browser prefers.</summary>
      <returns>The request encoding that the browser prefers.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.PreferredResponseEncoding">
      <summary>When overridden in a derived class, gets the response encoding that the browser prefers.</summary>
      <returns>The response encoding that the browser prefers.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RendersBreakBeforeWmlSelectAndInput">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser renders a line break before WML select or input elements.</summary>
      <returns>true if the browser renders a line break before select or input elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RendersBreaksAfterHtmlLists">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser renders a line break after list-item elements.</summary>
      <returns>true if the browser renders a line break after list-item elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RendersBreaksAfterWmlAnchor">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser renders a line break after a standalone WML a (anchor) element.</summary>
      <returns>true if the browser renders a line break after a standalone WML a (anchor) element; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RendersBreaksAfterWmlInput">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser renders a line break after a WML input element.</summary>
      <returns>true if the browser renders a line break after a WML input element; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RendersWmlDoAcceptsInline">
      <summary>When overridden in a derived class, gets a value that indicates whether the mobile-device browser renders a WML do form accept construct as an inline button instead of as a softkey.</summary>
      <returns>true if the mobile-device browser renders a WML do form-accept construct as an inline button; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RendersWmlSelectsAsMenuCards">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser renders WML select elements as menu cards, instead of as a combo box.</summary>
      <returns>true if the browser renders WML select elements as menu cards; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiredMetaTagNameValue">
      <summary>When overridden in a derived class, used internally to produce a meta-tag that is required by some browsers.</summary>
      <returns>A meta-tag that is required by some browsers.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresAttributeColonSubstitution">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser requires colons in element attribute values to be replaced with a different character.</summary>
      <returns>true if the browser requires colons in element attribute values to be replaced with a different character; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresContentTypeMetaTag">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser requires an HTML meta element for which the content-type attribute is specified.</summary>
      <returns>true if the browser requires an HTML meta element for which the content-type attribute is specified; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresControlStateInSession">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser requires control state to be maintained in sessions.</summary>
      <returns>true if the browser requires control state to be maintained in sessions; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresDBCSCharacter">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser requires a double-byte character set.</summary>
      <returns>true if the browser requires a double-byte character set; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresHtmlAdaptiveErrorReporting">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser requires nonstandard error messages.</summary>
      <returns>true if the browser requires nonstandard error messages; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresLeadingPageBreak">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser requires the first element in the body of a Web page to be an HTML br element.</summary>
      <returns>true if the browser requires the first element in the body of a Web page to be an HTML br element; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresNoBreakInFormatting">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser does not support HTML br elements to format line breaks.</summary>
      <returns>true if the browser does not support HTML br elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresOutputOptimization">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser requires pages to contain a size-optimized form of markup language tags.</summary>
      <returns>true if the browser requires pages to contain a size-optimized form of markup language tags; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresPhoneNumbersAsPlainText">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports telephone dialing based on plain text, or whether it requires special markup.</summary>
      <returns>true if the browser supports telephone dialing based on plain text; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresSpecialViewStateEncoding">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser requires view-state values to be specially encoded.</summary>
      <returns>true if the browser requires view-state values to be specially encoded; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresUniqueFilePathSuffix">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser requires unique form-action URLs.</summary>
      <returns>true if the browser requires unique form-action URLs; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresUniqueHtmlCheckboxNames">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser requires unique name attribute values for multiple HTML input type="checkbox" elements.</summary>
      <returns>true if the browser requires unique name attribute values for multiple HTML input type="checkbox" elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresUniqueHtmlInputNames">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser requires unique name attribute values for multiple HTML input elements.</summary>
      <returns>true if the browser requires unique name attribute values for multiple HTML input elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresUrlEncodedPostfieldValues">
      <summary>When overridden in a derived class, gets a value that indicates whether postback data that is sent by the browser will be URL-encoded.</summary>
      <returns>true if postback data that is sent by the browser will be URL-encoded; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.ScreenBitDepth">
      <summary>When overridden in a derived class, gets the depth of the display, in bits per pixel.</summary>
      <returns>The depth of the display, in bits per pixel.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.ScreenCharactersHeight">
      <summary>When overridden in a derived class, gets the approximate height of the display, in character lines.</summary>
      <returns>The approximate height of the display, in character lines.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.ScreenCharactersWidth">
      <summary>When overridden in a derived class, gets the approximate width of the display, in characters.</summary>
      <returns>The approximate width of the display, in characters.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.ScreenPixelsHeight">
      <summary>When overridden in a derived class, gets the approximate height of the display, in pixels.</summary>
      <returns>The approximate height of the display, in pixels.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.ScreenPixelsWidth">
      <summary>When overridden in a derived class, gets the approximate width of the display, in pixels.</summary>
      <returns>The approximate width of the display, in pixels.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsAccesskeyAttribute">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports the accesskey attribute of HTML a (anchor) and input elements.</summary>
      <returns>true if the browser supports the accesskey attribute of HTML a (anchor) and input elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsBodyColor">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports the bgcolor attribute of the HTML body element.</summary>
      <returns>true if the browser supports the bgcolor attribute of the HTML body element; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsBold">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports HTML b elements to format bold text.</summary>
      <returns>true if the browser supports HTML b elements to format bold text; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsCacheControlMetaTag">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports the cache-control value for the http-equiv attribute of HTML meta elements.</summary>
      <returns>true if the browser supports the cache-control value for the http-equiv attribute of HTML meta elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsCallback">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports callback scripts.</summary>
      <returns>true if the browser supports callback scripts; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsCss">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports cascading style sheets (CSS).</summary>
      <returns>true if the browser supports CSS; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsDivAlign">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports the align attribute of HTML div elements.</summary>
      <returns>true if the browser supports the align attribute of HTML div elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsDivNoWrap">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports the nowrap attribute of HTML div elements.</summary>
      <returns>true if the browser supports the nowrap HTML div elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsEmptyStringInCookieValue">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports empty strings in cookie values.</summary>
      <returns>true if the browser supports empty strings in cookie values; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsFontColor">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports the color attribute of HTML font elements.</summary>
      <returns>true if the browser supports the color attribute of HTML font elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsFontName">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports the name attribute of HTML font elements.</summary>
      <returns>true if the browser supports the name attribute of HTML font elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsFontSize">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports the size attribute of HTML font elements.</summary>
      <returns>true if the browser supports the size attribute of HTML font elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsImageSubmit">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports the use of a custom image in place of a standard form submit button.</summary>
      <returns>true if the browser supports the use of a custom image in place of a standard form submit button; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsIModeSymbols">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports i-mode symbols.</summary>
      <returns>true if the browser supports i-mode symbols; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsInputIStyle">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports the istyle attribute of HTML input elements.</summary>
      <returns>true if the browser supports the istyle attribute of HTML input elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsInputMode">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports the mode attribute of HTML input elements.</summary>
      <returns>true if the browser supports the mode attribute of HTML input elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsItalic">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports HTML i elements to format italic text.</summary>
      <returns>true if the browser supports HTML i elements to format italic text; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsJPhoneMultiMediaAttributes">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports J-Phone multimedia attributes.</summary>
      <returns>true if the browser supports J-Phone multimedia attributes; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsJPhoneSymbols">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports J-Phone–specific picture symbols.</summary>
      <returns>true if the browser supports J-Phone–specific picture symbols; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsQueryStringInFormAction">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports a query string in the action attribute value of HTML form elements.</summary>
      <returns>true if the browser supports a query string in the action attribute value of HTML form elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsRedirectWithCookie">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports cookies on redirection.</summary>
      <returns>true if the browser supports cookies on redirection; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsSelectMultiple">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports the multiple attribute of HTML select elements.</summary>
      <returns>true if the browser supports the multiple attribute of HTML select elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsUncheck">
      <summary>When overridden in a derived class, gets a value that indicates whether clearing a checked HTML input type="checkbox" element is reflected in postback data.</summary>
      <returns>true if clearing a checked HTML input type="checkbox" element is reflected in postback data; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsXmlHttp">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports receiving XML over HTTP.</summary>
      <returns>true if the browser supports receiving XML over HTTP; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Tables">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports HTML table elements.</summary>
      <returns>true if the browser supports HTML table elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.TagWriter">
      <summary>When overridden in a derived class, used internally to get the type of the object that is used to write tags for the browser.</summary>
      <returns>The type of the object that is used to write tags for the browser.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Type">
      <summary>When overridden in a derived class, gets the name and major (integer) version number of the browser.</summary>
      <returns>The name and major version number of the browser.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.UseOptimizedCacheKey">
      <summary>When overridden in a derived class, used internally to get a value that indicates whether to use an optimized cache key.</summary>
      <returns>true to use an optimized cache key; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.VBScript">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports Visual Basic Scripting edition (VBScript).</summary>
      <returns>true if the browser supports VBScript; otherwise, false.NoteThis property does not indicate whether VBScript is currently enabled in the browser, only whether the browser can support VBScript.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Version">
      <summary>When overridden in a derived class, gets the full version number (integer and decimal) of the browser as a string.</summary>
      <returns>The full version number of the browser as a string.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.W3CDomVersion">
      <summary>When overridden in a derived class, gets the version of the World Wide Web Consortium (W3C) XML Document Object Model (DOM) that the browser supports.</summary>
      <returns>The number of the W3C XML DOM version number that the browser supports.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Win16">
      <summary>When overridden in a derived class, gets a value that indicates whether the client is a Win16-based computer.</summary>
      <returns>true if the browser is running on a Win16-based computer; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Win32">
      <summary>When overridden in a derived class, gets a value that indicates whether the client is a Win32-based computer.</summary>
      <returns>true if the client is a Win32-based computer; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="T:System.Web.HttpBrowserCapabilitiesWrapper">
      <summary>Encapsulates the HTTP intrinsic object that enables the server to gather information about the capabilities of the browser that has made the current request.</summary>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesWrapper.#ctor(System.Web.HttpBrowserCapabilities)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpBrowserCapabilitiesWrapper" /> class. </summary>
      <param name="httpBrowserCapabilities">The object that this wrapper class provides access to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="httpBrowserCapabilities" /> is null.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.ActiveXControls">
      <summary>Gets a value that indicates whether the browser is capable of supporting ActiveX controls.</summary>
      <returns>true if the browser can support ActiveX controls; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Adapters">
      <summary>Gets the collection of available control adapters.</summary>
      <returns>The collection of registered control adapters for the browser.</returns>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesWrapper.AddBrowser(System.String)">
      <summary>Used internally to add an entry to the internal collection of browsers for which capabilities are recognized.</summary>
      <param name="browserName">The name of the browser to add.</param>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.AOL">
      <summary>Gets a value that indicates whether the client is an America Online (AOL) browser.</summary>
      <returns>true if the browser is an AOL browser; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.BackgroundSounds">
      <summary>Gets a value that indicates whether the browser supports playing background sounds by using the bgsounds HTML element.</summary>
      <returns>true if the browser supports playing background sounds; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Beta">
      <summary>Gets a value that indicates whether the browser is a beta version.</summary>
      <returns>true if the browser is a beta version; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Browser">
      <summary>Gets the browser string (if any) that was sent by the browser in the User-Agent request header.</summary>
      <returns>The contents of the User-Agent request header sent by the browser.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Browsers">
      <summary>Gets a collection of browsers for which capabilities are recognized.</summary>
      <returns>The browsers for which capabilities are recognized.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.CanCombineFormsInDeck">
      <summary>Gets a value that indicates whether the browser supports decks that contain multiple forms, such as separate cards.</summary>
      <returns>true if the browser supports decks that contain multiple forms; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.CanInitiateVoiceCall">
      <summary>Gets a value that indicates whether the browser device is capable of initiating a voice call.</summary>
      <returns>true if the browser device is capable of initiating a voice call; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.CanRenderAfterInputOrSelectElement">
      <summary>Gets a value that indicates whether the browser supports page content that follows WML select or input elements.</summary>
      <returns>true if the browser supports page content that follows HTML select or input elements; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.CanRenderEmptySelects">
      <summary>Gets a value that indicates whether the browser supports empty HTML select elements.</summary>
      <returns>true if the browser supports empty HTML select elements; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.CanRenderInputAndSelectElementsTogether">
      <summary>Gets a value that indicates whether the browser supports WML input and select elements together in the same card.</summary>
      <returns>true if the browser supports WML input and select elements together; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.CanRenderMixedSelects">
      <summary>Gets a value that indicates whether the browser supports WML option elements that specify both onpick and value attributes.</summary>
      <returns>true if the browser supports WML option elements that specify both onpick and value attributes; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.CanRenderOneventAndPrevElementsTogether">
      <summary>Gets a value that indicates whether the browser supports WML onevent and prev elements in the same card.</summary>
      <returns>true if the browser supports WML onevent and prev elements in the same card; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.CanRenderPostBackCards">
      <summary>Gets a value that indicates whether the browser supports WML cards for postback.</summary>
      <returns>true if the browser supports WML cards for postback; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.CanRenderSetvarZeroWithMultiSelectionList">
      <summary>Gets a value that indicates whether the browser supports WML setvar elements that have a value attribute of 0.</summary>
      <returns>true if the browser supports WML setvar elements that have a value attribute of 0; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.CanSendMail">
      <summary>Gets a value that indicates whether the browser supports sending e-mail messages by using the HTML mailto scheme.</summary>
      <returns>true if the browser supports sending e-mail message by using the HTML mailto scheme; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Capabilities">
      <summary>Used internally to get the defined capabilities of the browser.</summary>
      <returns>The defined capabilities of the browser.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.CDF">
      <summary>Gets a value that indicates whether the browser supports Channel Definition Format (CDF) for webcasting.</summary>
      <returns>true if the browser supports CDF; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.ClrVersion">
      <summary>Gets the version of the .NET Framework that is installed on the client.</summary>
      <returns>The common language runtime (CLRS) version.</returns>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesWrapper.CompareFilters(System.String,System.String)">
      <summary>Used internally to compare filters.</summary>
      <returns>1 if <paramref name="filter1" /> is a parent of <paramref name="filter2" />; -1 if <paramref name="filter2" /> is a parent of <paramref name="filter1" />; or 0 if there is no parent-child relationship between <paramref name="filter1" /> and <paramref name="filter2" />.</returns>
      <param name="filter1">The first filter to compare.</param>
      <param name="filter2">The second filter to compare.</param>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Cookies">
      <summary>Gets a value that indicates whether the browser is capable of supporting cookies.</summary>
      <returns>true if the browser can support cookies; otherwise, false. The default is false.NoteThis property does not indicate whether cookies are currently enabled in the browser, only whether the browser can support cookies.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Crawler">
      <summary>Gets a value that indicates whether the browser is a search-engine Web crawler.</summary>
      <returns>true if the browser is a search-engine crawler; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesWrapper.CreateHtmlTextWriter(System.IO.TextWriter)">
      <summary>Creates a new instance of the <see cref="T:System.Web.UI.HtmlTextWriter" /> object to use to render markup to the browser.</summary>
      <returns>A new instance of the object.</returns>
      <param name="w">The object to be created.</param>
      <exception cref="T:System.Exception">An error occurred when creating the <see cref="T:System.Web.UI.HtmlTextWriter" /> object.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.DefaultSubmitButtonLimit">
      <summary>Gets the maximum number of submit buttons that are allowed for a form.</summary>
      <returns>The maximum number of submit buttons that are allowed for a form.</returns>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesWrapper.DisableOptimizedCacheKey">
      <summary>Used internally to disable use of an optimized cache key.</summary>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.EcmaScriptVersion">
      <summary>Gets the version number of ECMAScript (JavaScript) that the browser supports.</summary>
      <returns>The version number of ECMAScript (JavaScript) that the browser supports.</returns>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesWrapper.EvaluateFilter(System.String)">
      <summary>Used internally to evaluate a filter.</summary>
      <returns>true if the filter was successfully evaluated; otherwise, false.</returns>
      <param name="filterName">The filter to evaluate.</param>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Frames">
      <summary>Gets a value that indicates whether the browser supports HTML frames.</summary>
      <returns>true if the browser supports frames; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.GatewayMajorVersion">
      <summary>Gets the major version number of the wireless gateway that is used to access the server, if known. </summary>
      <returns>The major version number of the wireless gateway that is used to access the server, if known. The default is 0.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.GatewayMinorVersion">
      <summary>Gets the minor version number of the wireless gateway that is used to access the server, if known. </summary>
      <returns>The minor version number of the wireless gateway that is used to access the server, if known. The default is 0.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.GatewayVersion">
      <summary>Gets the version of the wireless gateway that is used to access the server, if known.</summary>
      <returns>The version number of the wireless gateway that is used to access the server, if known. The default is "None".</returns>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesWrapper.GetClrVersions">
      <summary>Gets all versions of the .NET Framework common language runtime (CLR) that are installed on the client.</summary>
      <returns>An array of <see cref="T:System.Version" /> objects.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.HasBackButton">
      <summary>Gets a value that indicates whether the browser has a dedicated Back button.</summary>
      <returns>true if the browser has a dedicated Back button; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.HidesRightAlignedMultiselectScrollbars">
      <summary>Gets a value that indicates whether the scrollbar of an HTML select multiple element that has an align attribute value of right is obscured upon rendering.</summary>
      <returns>true if the scrollbar of an HTML select multiple element that has an align attribute value of right is obscured upon rendering; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.HtmlTextWriter">
      <summary>Gets or sets the fully qualified class name of the <see cref="T:System.Web.UI.HtmlTextWriter" /> to use for writing markup characters and text.</summary>
      <returns>The fully qualified class name of the <see cref="T:System.Web.UI.HtmlTextWriter" /> to use for writing markup characters and text.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Id">
      <summary>Gets the internal identifier of the browser as specified in the browser definition file.</summary>
      <returns>The internal identifier of the browser as specified in the browser definition file.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.InputType">
      <summary>Gets the type of input that is supported by the browser.</summary>
      <returns>The type of input supported by the browser. The default is "telephoneKeypad".</returns>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesWrapper.IsBrowser(System.String)">
      <summary>Gets a value that indicates whether the client browser is the same as the specified browser.</summary>
      <returns>true if the client browser is the same as the specified browser; otherwise, false. The default is false.</returns>
      <param name="browserName">The specified browser.</param>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.IsColor">
      <summary>Gets a value that indicates whether the browser has a color display.</summary>
      <returns>true if the browser has a color display; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.IsMobileDevice">
      <summary>Gets a value that indicates whether the browser is a recognized mobile device.</summary>
      <returns>true if the browser is a recognized mobile device; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Item(System.String)">
      <summary>Gets the value of the specified browser capability. In C#, this property is the indexer for the class.</summary>
      <returns>The browser capability with the specified key name.</returns>
      <param name="key">The name of the browser capability to retrieve.</param>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.JavaApplets">
      <summary>Gets a value that indicates whether the browser supports Java.</summary>
      <returns>true if the browser supports Java; otherwise, false. The default is false.NoteThis property does not indicate whether Java is currently enabled in the browser, only whether the browser can support Java.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.JScriptVersion">
      <summary>Gets the JScript version that the browser supports.</summary>
      <returns>The version of JScript that the browser supports.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.MajorVersion">
      <summary>Gets the major (integer) version number of the browser.</summary>
      <returns>The major version number of the browser.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.MaximumHrefLength">
      <summary>Gets the maximum length in characters for the href attribute of an HTML a (anchor) element.</summary>
      <returns>The maximum length in characters for the href attribute of an HTML a (anchor) element. The default value is the value in the <see cref="P:System.Web.HttpBrowserCapabilitiesWrapper.Item(System.String)" /> property with the key name of "maximumHrefLength".</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.MaximumRenderedPageSize">
      <summary>Gets the maximum length of the page, in bytes, that the browser can display. </summary>
      <returns>The maximum length of the page, in bytes, that the browser can display. The default is 2000.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.MaximumSoftkeyLabelLength">
      <summary>Gets the maximum length of the text that a soft-key label can display.</summary>
      <returns>The maximum length of the text that a soft-key label can display. The default is 5.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.MinorVersion">
      <summary>Gets the minor (decimal) version number of the browser.</summary>
      <returns>The minor version number of the browser.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.MinorVersionString">
      <summary>Gets the minor (decimal) version number of the browser as a string.</summary>
      <returns>A string that represents the minor version number of the browser.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.MobileDeviceManufacturer">
      <summary>Gets the name of the manufacturer of a mobile device, if known.</summary>
      <returns>The name of the manufacturer of a mobile device, if known. The default is "Unknown".</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.MobileDeviceModel">
      <summary>Gets the model name of a mobile device, if known.</summary>
      <returns>The model name of a mobile device, if known. The default is "Unknown".</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.MSDomVersion">
      <summary>Gets the version of the Microsoft HTML (MSHTML) Document Object Model (DOM) that the browser supports.</summary>
      <returns>The MSHTML DOM version that the browser supports. The default is 0.0.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.NumberOfSoftkeys">
      <summary>Gets the number of softkeys on a mobile device.</summary>
      <returns>The number of softkeys supported on a mobile device. The default is 0.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Platform">
      <summary>Gets the name of the operating system that the client is using, if known.</summary>
      <returns>The operating system that the client is using, if known, otherwise the value is set to "Unknown".</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.PreferredImageMime">
      <summary>Gets the MIME type of the type of image content that the browser typically prefers.</summary>
      <returns>The MIME type of the type of image content that the browser typically prefers. The default is "image/gif".</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.PreferredRenderingMime">
      <summary>Gets the MIME type of the type of content that the browser typically prefers.</summary>
      <returns>The MIME type of the type of content that the browser typically prefers. The default is "text/html".</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.PreferredRenderingType">
      <summary>Gets the general name for the type of content that the browser prefers.</summary>
      <returns>The values "html32" or "chtml10". The default is "html32".</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.PreferredRequestEncoding">
      <summary>Gets the request encoding that the browser prefers.</summary>
      <returns>The request encoding preferred by the browser.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.PreferredResponseEncoding">
      <summary>Gets the response encoding that the browser prefers.</summary>
      <returns>The response encoding preferred by the browser.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RendersBreakBeforeWmlSelectAndInput">
      <summary>Gets a value that indicates whether the browser renders a line break before select or input elements.</summary>
      <returns>true if the browser renders a line break before select or input elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RendersBreaksAfterHtmlLists">
      <summary>Gets a value that indicates whether the browser renders a line break after list-item elements.</summary>
      <returns>true if the browser renders a line break after list-item elements; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RendersBreaksAfterWmlAnchor">
      <summary>Gets a value that indicates whether the browser renders a line break after a standalone WML a (anchor) element.</summary>
      <returns>true if the browser renders a line break after a standalone WML a (anchor) element; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RendersBreaksAfterWmlInput">
      <summary>Gets a value that indicates whether the browser renders a line break after a WML input element.</summary>
      <returns>true if the browser renders a line break after a WML input element; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RendersWmlDoAcceptsInline">
      <summary>Gets a value that indicates whether the mobile-device browser renders a WML do form accept construct as an inline button instead of as a softkey.</summary>
      <returns>true if the mobile-device browser renders a WML do form-accept construct as an inline button; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RendersWmlSelectsAsMenuCards">
      <summary>Gets a value that indicates whether the browser renders WML select elements as menu cards, instead of as a combo box.</summary>
      <returns>true if the browser renders WML select elements as menu cards; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiredMetaTagNameValue">
      <summary>Used internally to produce a meta-tag that is required by some browsers.</summary>
      <returns>A meta-tag that is required by some browsers.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresAttributeColonSubstitution">
      <summary>Gets a value that indicates whether the browser requires colons in element attribute values to be replaced with a different character.</summary>
      <returns>true if the browser requires colons in element attribute values to be replaced with a different character; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresContentTypeMetaTag">
      <summary>Gets a value that indicates whether the browser requires an HTML meta element for which the content-type attribute is specified.</summary>
      <returns>true if the browser requires an HTML meta element for which the content-type attribute is specified; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresControlStateInSession">
      <summary>Gets a value that indicates whether the browser requires control state to be maintained in sessions.</summary>
      <returns>true if the browser requires control state to be maintained in sessions; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresDBCSCharacter">
      <summary>Gets a value that indicates whether the browser requires a double-byte character set.</summary>
      <returns>true if the browser requires a double-byte character set; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresHtmlAdaptiveErrorReporting">
      <summary>Gets a value that indicates whether the browser requires nonstandard error messages.</summary>
      <returns>true if the browser requires nonstandard error messages; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresLeadingPageBreak">
      <summary>Gets a value that indicates whether the browser requires the first element in the body of a Web page to be an HTML br element.</summary>
      <returns>true if the browser requires the first element in the body of a Web page to be an HTML br element; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresNoBreakInFormatting">
      <summary>Gets a value that indicates whether the browser does not support HTML br elements to format line breaks.</summary>
      <returns>true if the browser does not support HTML br elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresOutputOptimization">
      <summary>Gets a value that indicates whether the browser requires pages to contain a size-optimized form of markup language tags.</summary>
      <returns>true if the browser requires pages to contain a size-optimized form of markup language tags; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresPhoneNumbersAsPlainText">
      <summary>Gets a value that indicates whether the browser supports telephone dialing based on plain text, or whether it requires special markup.</summary>
      <returns>true if the browser supports telephone dialing based on plain text; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresSpecialViewStateEncoding">
      <summary>Gets a value that indicates whether the browser requires view-state values to be specially encoded.</summary>
      <returns>true if the browser requires view-state values to be specially encoded; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresUniqueFilePathSuffix">
      <summary>Gets a value that indicates whether the browser requires unique form-action URLs.</summary>
      <returns>true if the browser requires unique form-action URLs; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresUniqueHtmlCheckboxNames">
      <summary>Gets a value that indicates whether the browser requires unique name attribute values for multiple HTML input type="checkbox" elements.</summary>
      <returns>true if the browser requires unique name attribute values for multiple HTML input type="checkbox" elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresUniqueHtmlInputNames">
      <summary>Gets a value that indicates whether the browser requires unique name attribute values for multiple HTML input elements.</summary>
      <returns>true if the browser requires unique name attribute values for multiple HTML input elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresUrlEncodedPostfieldValues">
      <summary>Gets a value that indicates whether postback data that is sent by the browser will be URL-encoded.</summary>
      <returns>true if postback data that is sent by the browser will be URL-encoded; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.ScreenBitDepth">
      <summary>Gets the depth of the display, in bits per pixel.</summary>
      <returns>The depth of the display, in bits per pixel. The default is 1.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.ScreenCharactersHeight">
      <summary>Gets the approximate height of the display, in character lines.</summary>
      <returns>The approximate height of the display, in character lines. The default is 6.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.ScreenCharactersWidth">
      <summary>Gets the approximate width of the display, in characters.</summary>
      <returns>The approximate width of the display, in characters. The default is 12.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.ScreenPixelsHeight">
      <summary>Gets the approximate height of the display, in pixels.</summary>
      <returns>The approximate height of the display, in pixels. The default is 72.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.ScreenPixelsWidth">
      <summary>Gets the approximate width of the display, in pixels.</summary>
      <returns>The approximate width of the display, in pixels. The default is 96.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsAccesskeyAttribute">
      <summary>Gets a value that indicates whether the browser supports the accesskey attribute of HTML a (anchor) and input elements.</summary>
      <returns>true if the browser supports the accesskey attribute of HTML a (anchor) and input elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsBodyColor">
      <summary>Gets a value that indicates whether the browser supports the bgcolor attribute of the HTML body element.</summary>
      <returns>true if the browser supports the bgcolor attribute of the HTML body element; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsBold">
      <summary>Gets a value that indicates whether the browser supports HTML b elements to format bold text.</summary>
      <returns>true if the browser supports HTML b elements to format bold text; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsCacheControlMetaTag">
      <summary>Gets a value that indicates whether the browser supports the cache-control value for the http-equiv attribute of HTML meta elements.</summary>
      <returns>true if the browser supports the cache-control value for the http-equiv attribute of HTML meta elements; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsCallback">
      <summary>Gets a value that indicates whether the browser supports callback scripts.</summary>
      <returns>true if the browser supports callback scripts; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsCss">
      <summary>Gets a value that indicates whether the browser supports cascading style sheets (CSS).</summary>
      <returns>true if the browser supports CSS; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsDivAlign">
      <summary>Gets a value that indicates whether the browser supports the align attribute of HTML div elements.</summary>
      <returns>true if the browser supports the align attribute of HTML div elements; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsDivNoWrap">
      <summary>Gets a value that indicates whether the browser supports the nowrap attribute of HTML div elements.</summary>
      <returns>true if the browser supports the nowrap HTML div elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsEmptyStringInCookieValue">
      <summary>Gets a value that indicates whether the browser supports empty strings in cookie values.</summary>
      <returns>true if the browser supports empty strings in cookie values; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsFontColor">
      <summary>Gets a value that indicates whether the browser supports the color attribute of HTML font elements.</summary>
      <returns>true if the browser supports the color attribute of HTML font elements; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsFontName">
      <summary>Gets a value that indicates whether the browser supports the name attribute of HTML font elements.</summary>
      <returns>true if the browser supports the name attribute of HTML font elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsFontSize">
      <summary>Gets a value that indicates whether the browser supports the size attribute of HTML font elements.</summary>
      <returns>true if the browser supports the size attribute of HTML font elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsImageSubmit">
      <summary>Gets a value that indicates whether the browser supports the use of a custom image in place of a standard form submit button.</summary>
      <returns>true if the browser supports the use of a custom image in place of a standard form submit button; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsIModeSymbols">
      <summary>Gets a value that indicates whether the browser supports i-mode symbols.</summary>
      <returns>true if the browser supports i-mode symbols; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsInputIStyle">
      <summary>Gets a value that indicates whether the browser supports the istyle attribute of HTML input elements.</summary>
      <returns>true if the browser supports the istyle attribute of HTML input elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsInputMode">
      <summary>Gets a value that indicates whether the browser supports the mode attribute of HTML input elements.</summary>
      <returns>true if the browser supports the mode attribute of HTML input elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsItalic">
      <summary>Gets a value that indicates whether the browser supports HTML i elements to format italic text.</summary>
      <returns>true if the browser supports HTML i elements to format italic text; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsJPhoneMultiMediaAttributes">
      <summary>Gets a value that indicates whether the browser supports J-Phone multimedia attributes.</summary>
      <returns>true if the browser supports J-Phone multimedia attributes; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsJPhoneSymbols">
      <summary>Gets a value that indicates whether the browser supports J-Phone–specific picture symbols.</summary>
      <returns>true if the browser supports J-Phone–specific picture symbols; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsQueryStringInFormAction">
      <summary>Gets a value that indicates whether the browser supports a query string in the action attribute value of HTML form elements.</summary>
      <returns>true if the browser supports a query string in the action attribute value of HTML form elements; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsRedirectWithCookie">
      <summary>Gets a value that indicates whether the browser supports cookies on redirection.</summary>
      <returns>true if the browser supports cookies on redirection; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsSelectMultiple">
      <summary>Gets a value that indicates whether the browser supports the multiple attribute of HTML select elements.</summary>
      <returns>true if the browser supports the multiple attribute of HTML select elements; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsUncheck">
      <summary>Gets a value that indicates whether clearing a checked HTML input type="checkbox" element is reflected in postback data.</summary>
      <returns>true if clearing a checked HTML input type="checkbox" element is reflected in postback data; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsXmlHttp">
      <summary>Gets a value that indicates whether the browser supports receiving XML over HTTP.</summary>
      <returns>true if the browser supports receiving XML over HTTP; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Tables">
      <summary>Gets a value that indicates whether the browser supports HTML table elements.</summary>
      <returns>true if the browser supports HTML table elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.TagWriter">
      <summary>Used internally to get the type of the object that is used to write tags for the browser.</summary>
      <returns>The type of the object that is used to write tags for the browser.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Type">
      <summary>Gets the name and major (integer) version number of the browser.</summary>
      <returns>The name and major version number of the browser.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.UseOptimizedCacheKey">
      <summary>Used internally to get a value that indicates whether to use an optimized cache key.</summary>
      <returns>true to use an optimized cache key; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.VBScript">
      <summary>Gets a value that indicates whether the browser supports Visual Basic Scripting edition (VBScript).</summary>
      <returns>true if the browser supports VBScript; otherwise, false. The default is false.NoteThis property does not indicate whether VBScript is currently enabled in the browser, only whether the browser can support VBScript.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Version">
      <summary>Gets the full version number (integer and decimal) of the browser as a string.</summary>
      <returns>The full version number of the browser as a string.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.W3CDomVersion">
      <summary>Gets the version of the World Wide Web Consortium (W3C) XML Document Object Model (DOM) that the browser supports.</summary>
      <returns>The number of the W3C XML DOM version number that the browser supports.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Win16">
      <summary>Gets a value that indicates whether the client is a Win16-based computer.</summary>
      <returns>true if the browser is running on a Win16-based computer; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Win32">
      <summary>Gets a value that indicates whether the client is a Win32-based computer.</summary>
      <returns>true if the client is a Win32-based computer; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.Web.HttpCacheability">
      <summary>Provides enumerated values that are used to set the Cache-Control HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpCacheability.NoCache">
      <summary>Sets the Cache-Control: no-cache header. Without a field name, the directive applies to the entire request and a shared (proxy server) cache must force a successful revalidation with the origin Web server before satisfying the request. With a field name, the directive applies only to the named field; the rest of the response may be supplied from a shared cache. </summary>
    </member>
    <member name="F:System.Web.HttpCacheability.Private">
      <summary>Default value. Sets Cache-Control: private to specify that the response is cacheable only on the client and not by shared (proxy server) caches. </summary>
    </member>
    <member name="F:System.Web.HttpCacheability.Server">
      <summary>Specifies that the response is cached only at the origin server. Similar to the <see cref="F:System.Web.HttpCacheability.NoCache" /> option. Clients receive a Cache-Control: no-cache directive but the document is cached on the origin server. Equivalent to <see cref="F:System.Web.HttpCacheability.ServerAndNoCache" />.</summary>
    </member>
    <member name="F:System.Web.HttpCacheability.ServerAndNoCache">
      <summary>Applies the settings of both <see cref="F:System.Web.HttpCacheability.Server" /> and <see cref="F:System.Web.HttpCacheability.NoCache" /> to indicate that the content is cached at the server but all others are explicitly denied the ability to cache the response. </summary>
    </member>
    <member name="F:System.Web.HttpCacheability.Public">
      <summary>Sets Cache-Control: public to specify that the response is cacheable by clients and shared (proxy) caches. </summary>
    </member>
    <member name="F:System.Web.HttpCacheability.ServerAndPrivate">
      <summary>Indicates that the response is cached at the server and at the client but nowhere else. Proxy servers are not allowed to cache the response. </summary>
    </member>
    <member name="T:System.Web.HttpCachePolicy">
      <summary>Contains methods for setting cache-specific HTTP headers and for controlling the ASP.NET page output cache.</summary>
    </member>
    <member name="M:System.Web.HttpCachePolicy.AddValidationCallback(System.Web.HttpCacheValidateHandler,System.Object)">
      <summary>Registers a validation callback for the current response.</summary>
      <param name="handler">The <see cref="T:System.Web.HttpCacheValidateHandler" /> value. </param>
      <param name="data">The arbitrary user-supplied data that is passed back to the <see cref="M:System.Web.HttpCachePolicy.AddValidationCallback(System.Web.HttpCacheValidateHandler,System.Object)" /> delegate. </param>
      <exception cref="T:System.ArgumentNullException">The specified <paramref name="handler" /> is null. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicy.AppendCacheExtension(System.String)">
      <summary>Appends the specified text to the Cache-Control HTTP header.</summary>
      <param name="extension">The text to append to the Cache-Control header. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="extension" /> is null. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetAllowResponseInBrowserHistory(System.Boolean)">
      <summary>Makes the response is available in the client browser History cache, regardless of the <see cref="T:System.Web.HttpCacheability" /> setting made on the server, when the <paramref name="allow" /> parameter is true.</summary>
      <param name="allow">true to direct the client browser to store responses in the History folder; otherwise false. The default is false. </param>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetCacheability(System.Web.HttpCacheability)">
      <summary>Sets the Cache-Control header to one of the values of <see cref="T:System.Web.HttpCacheability" />.</summary>
      <param name="cacheability">An <see cref="T:System.Web.HttpCacheability" /> enumeration value. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cacheability" /> is not one of the enumeration values. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetCacheability(System.Web.HttpCacheability,System.String)">
      <summary>Sets the Cache-Control header to one of the values of <see cref="T:System.Web.HttpCacheability" /> and appends an extension to the directive.</summary>
      <param name="cacheability">The <see cref="T:System.Web.HttpCacheability" /> enumeration value to set the header to. </param>
      <param name="field">The cache control extension to add to the header. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="field" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="cacheability" /> is not <see cref="F:System.Web.HttpCacheability.Private" /> or <see cref="F:System.Web.HttpCacheability.NoCache" />. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetETag(System.String)">
      <summary>Sets the ETag HTTP header to the specified string.</summary>
      <param name="etag">The text to use for the ETag header. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="etag" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The ETag header has already been set. - or -The <see cref="M:System.Web.HttpCachePolicy.SetETagFromFileDependencies" /> has already been called.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetETagFromFileDependencies">
      <summary>Sets the ETag HTTP header based on the time stamps of the handler's file dependencies.</summary>
      <exception cref="T:System.InvalidOperationException">The ETag header has already been set. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetExpires(System.DateTime)">
      <summary>Sets the Expires HTTP header to an absolute date and time.</summary>
      <param name="date">The absolute <see cref="T:System.DateTime" /> value to set the Expires header to. </param>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetLastModified(System.DateTime)">
      <summary>Sets the Last-Modified HTTP header to the <see cref="T:System.DateTime" /> value supplied.</summary>
      <param name="date">The new <see cref="T:System.DateTime" /> value for the Last-Modified header. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="date" /> is later than the current DateTime. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetLastModifiedFromFileDependencies">
      <summary>Sets the Last-Modified HTTP header based on the time stamps of the handler's file dependencies.</summary>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetMaxAge(System.TimeSpan)">
      <summary>Sets the Cache-Control: max-age HTTP header based on the specified time span.</summary>
      <param name="delta">The time span used to set the Cache - Control: max-age header. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delta" /> is less than 0 or greater than one year. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetNoServerCaching">
      <summary>Stops all origin-server caching for the current response.</summary>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetNoStore">
      <summary>Sets the Cache-Control: no-store HTTP header.</summary>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetNoTransforms">
      <summary>Sets the Cache-Control: no-transform HTTP header.</summary>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetOmitVaryStar(System.Boolean)">
      <summary>Specifies whether the response should contain the vary:* header when varying by parameters.</summary>
      <param name="omit">true to direct the <see cref="T:System.Web.HttpCachePolicy" /> to not use the * value for its <see cref="P:System.Web.HttpCachePolicy.VaryByHeaders" /> property; otherwise, false.</param>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetProxyMaxAge(System.TimeSpan)">
      <summary>Sets the Cache-Control: s-maxage HTTP header based on the specified time span.</summary>
      <param name="delta">The time span used to set the Cache-Control: s-maxage header. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delta" /> is less than 0. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetRevalidation(System.Web.HttpCacheRevalidation)">
      <summary>Sets the Cache-Control HTTP header to either the must-revalidate or the proxy-revalidate directives based on the supplied enumeration value.</summary>
      <param name="revalidation">The <see cref="T:System.Web.HttpCacheRevalidation" /> enumeration value to set the Cache-Control header to. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="revalidation" /> is not one of the enumeration values. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetSlidingExpiration(System.Boolean)">
      <summary>Sets cache expiration to from absolute to sliding.</summary>
      <param name="slide">true or false. </param>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetValidUntilExpires(System.Boolean)">
      <summary>Specifies whether the ASP.NET cache should ignore HTTP Cache-Control headers sent by the client that invalidate the cache.</summary>
      <param name="validUntilExpires">true if the cache ignores Cache-Control invalidation headers; otherwise, false. </param>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetVaryByCustom(System.String)">
      <summary>Specifies a custom text string to vary cached output responses by.</summary>
      <param name="custom">The text string to vary cached output by. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="custom" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Web.HttpCachePolicy.SetVaryByCustom(System.String)" /> method has already been called. </exception>
    </member>
    <member name="P:System.Web.HttpCachePolicy.VaryByContentEncodings">
      <summary>Gets the list of Content-Encoding headers that will be used to vary the output cache.</summary>
      <returns>An object that specifies which Content-Encoding headers are used to select the cached response.</returns>
    </member>
    <member name="P:System.Web.HttpCachePolicy.VaryByHeaders">
      <summary>Gets the list of all HTTP headers that will be used to vary cache output.</summary>
      <returns>An <see cref="T:System.Web.HttpCacheVaryByHeaders" /> that specifies which HTTP headers are used to select the cached response.</returns>
    </member>
    <member name="P:System.Web.HttpCachePolicy.VaryByParams">
      <summary>Gets the list of parameters received by an HTTP GET or HTTP POST that affect caching.</summary>
      <returns>An <see cref="T:System.Web.HttpCacheVaryByParams" /> that specifies which cache-control headers are used to select the cached response.</returns>
    </member>
    <member name="T:System.Web.HttpCachePolicyBase">
      <summary>Serves as the base class for classes that contain methods for setting cache-specific HTTP headers and for controlling the ASP.NET page output cache.</summary>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.#ctor">
      <summary>Initializes the class for use by an inherited class instance. This constructor can only be called by an inherited class.</summary>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.AddValidationCallback(System.Web.HttpCacheValidateHandler,System.Object)">
      <summary>When overridden in a derived class, registers a validation callback for the current response.</summary>
      <param name="handler">The object that will handle the request.</param>
      <param name="data">The user-supplied data that is passed to the <see cref="M:System.Web.HttpCachePolicyWrapper.AddValidationCallback(System.Web.HttpCacheValidateHandler,System.Object)" /> delegate.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.AppendCacheExtension(System.String)">
      <summary>When overridden in a derived class, appends the specified text to the Cache-Control HTTP header.</summary>
      <param name="extension">The text to append to the Cache-Control header.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetAllowResponseInBrowserHistory(System.Boolean)">
      <summary>When overridden in a derived class, makes the response available in the browser history cache, regardless of the <see cref="T:System.Web.HttpCacheability" /> setting made on the server.</summary>
      <param name="allow">true to direct the client browser to store responses in the browser history cache; otherwise false.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetCacheability(System.Web.HttpCacheability)">
      <summary>When overridden in a derived class, sets the Cache-Control header to the specified <see cref="T:System.Web.HttpCacheability" /> value.</summary>
      <param name="cacheability">The <see cref="T:System.Web.HttpCacheability" /> enumeration value to set the header to.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetCacheability(System.Web.HttpCacheability,System.String)">
      <summary>When overridden in a derived class, sets the Cache-Control header to the specified <see cref="T:System.Web.HttpCacheability" /> value and appends an extension to the directive.</summary>
      <param name="cacheability">The <see cref="T:System.Web.HttpCacheability" /> enumeration value to set the header to.</param>
      <param name="field">The cache-control extension to add to the header.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetETag(System.String)">
      <summary>When overridden in a derived class, sets the ETag HTTP header to the specified string.</summary>
      <param name="etag">The text to use for the ETag header.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetETagFromFileDependencies">
      <summary>When overridden in a derived class, sets the ETag HTTP header based on the time stamps of the handler's file dependencies.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetExpires(System.DateTime)">
      <summary>When overridden in a derived class, sets the Expires HTTP header to an absolute date and time.</summary>
      <param name="date">The absolute expiration time.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetLastModified(System.DateTime)">
      <summary>When overridden in a derived class, sets the Last-Modified HTTP header to the specified date and time.</summary>
      <param name="date">The date-time value to set the Last-Modified header to.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetLastModifiedFromFileDependencies">
      <summary>When overridden in a derived class, sets the Last-Modified HTTP header based on the time stamps of the handler's file dependencies.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetMaxAge(System.TimeSpan)">
      <summary>When overridden in a derived class, sets the Cache-Control: max-age HTTP header to the specified time span.</summary>
      <param name="delta">The time span to set the Cache-Control: max-age header to.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetNoServerCaching">
      <summary>When overridden in a derived class, stops all origin-server caching for the current response.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetNoStore">
      <summary>When overridden in a derived class, sets the Cache-Control: no-store HTTP header.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetNoTransforms">
      <summary>When overridden in a derived class, sets the Cache-Control: no-transform HTTP header.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetOmitVaryStar(System.Boolean)">
      <summary>When overridden in a derived class, specifies whether the response contains the vary:* header when caching varies by parameters.</summary>
      <param name="omit">true to direct the <see cref="T:System.Web.HttpCachePolicy" /> object not to use the * value for its <see cref="P:System.Web.HttpCachePolicy.VaryByHeaders" /> property; otherwise, false.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetProxyMaxAge(System.TimeSpan)">
      <summary>When overridden in a derived class, sets the Cache-Control: s-maxage HTTP header to the specified time span.</summary>
      <param name="delta">The time span to set the Cache-Control: s-maxage header to.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetRevalidation(System.Web.HttpCacheRevalidation)">
      <summary>When overridden in a derived class, sets the Cache-Control HTTP header to either the must-revalidate or the proxy-revalidate directives, based on the specified enumeration value.</summary>
      <param name="revalidation">The <see cref="T:System.Web.HttpCacheRevalidation" /> enumeration value to set the Cache-Control header to.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetSlidingExpiration(System.Boolean)">
      <summary>When overridden in a derived class, sets cache expiration to absolute or sliding.</summary>
      <param name="slide">true to set a sliding cache expiration, or false to set an absolute cache expiration.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetValidUntilExpires(System.Boolean)">
      <summary>When overridden in a derived class, specifies whether the ASP.NET cache should ignore HTTP Cache-Control headers that are sent by the client that invalidate the cache.</summary>
      <param name="validUntilExpires">true to specify that ASP.NET should ignore Cache-Control invalidation headers; otherwise, false.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetVaryByCustom(System.String)">
      <summary>When overridden in a derived class, specifies a text string to vary cached output responses by.</summary>
      <param name="custom">The text string to vary cached output by.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpCachePolicyBase.VaryByContentEncodings">
      <summary>When overridden in a derived class, gets the list of Content-Encoding headers that are used to vary the output cache.</summary>
      <returns>The Content-Encoding headers that are used to select the cached response.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpCachePolicyBase.VaryByHeaders">
      <summary>When overridden in a derived class, gets the list of all HTTP headers that are used to vary cache output.</summary>
      <returns>The HTTP headers that are used to select the cached response.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpCachePolicyBase.VaryByParams">
      <summary>When overridden in a derived class, gets the list of parameters that are received by an HTTP GET or POST verb that affect caching.</summary>
      <returns>The cache-control parameters that are used to select the cached response.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="T:System.Web.HttpCachePolicyWrapper">
      <summary>Encapsulates the HTTP intrinsic object that contains methods for setting cache-specific HTTP headers and for controlling the ASP.NET page output cache.</summary>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.#ctor(System.Web.HttpCachePolicy)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpCachePolicyWrapper" /> class. </summary>
      <param name="httpCachePolicy">The object that this wrapper class provides access to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="httpCachePolicy" /> is null.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.AddValidationCallback(System.Web.HttpCacheValidateHandler,System.Object)">
      <summary>Registers a validation callback for the current response.</summary>
      <param name="handler">The object that will handle the request.</param>
      <param name="data">The user-supplied data that is passed to the <see cref="M:System.Web.HttpCachePolicyWrapper.AddValidationCallback(System.Web.HttpCacheValidateHandler,System.Object)" /> delegate.</param>
      <exception cref="T:System.ArgumentNullException">The specified <paramref name="handler" /> is null. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.AppendCacheExtension(System.String)">
      <summary>Appends the specified text to the Cache-Control HTTP header.</summary>
      <param name="extension">The text to append to the Cache-Control header.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="extension" /> is null. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetAllowResponseInBrowserHistory(System.Boolean)">
      <summary>Makes the response available in the browser history cache, regardless of the <see cref="T:System.Web.HttpCacheability" /> setting made on the server.</summary>
      <param name="allow">true to direct the client browser to store responses in the browser history cache; otherwise false. The default is false.</param>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetCacheability(System.Web.HttpCacheability)">
      <summary>Sets the Cache-Control header to the specified <see cref="T:System.Web.HttpCacheability" /> value.</summary>
      <param name="cacheability">The <see cref="T:System.Web.HttpCacheability" /> enumeration value to set the header to.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cacheability" /> is not one of the enumeration values. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetCacheability(System.Web.HttpCacheability,System.String)">
      <summary>Sets the Cache-Control header to the specified <see cref="T:System.Web.HttpCacheability" /> value and appends an extension to the directive.</summary>
      <param name="cacheability">The <see cref="T:System.Web.HttpCacheability" /> enumeration value to set the header to.</param>
      <param name="field">The cache-control extension to add to the header.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="field" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="cacheability" /> is not <see cref="F:System.Web.HttpCacheability.Private" /> or <see cref="F:System.Web.HttpCacheability.NoCache" />. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetETag(System.String)">
      <summary>Sets the ETag HTTP header to the specified string.</summary>
      <param name="etag">The text to use for the ETag header.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="etag" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The ETag header has already been set. - or -The <see cref="M:System.Web.HttpCachePolicy.SetETagFromFileDependencies" /> method has already been called.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetETagFromFileDependencies">
      <summary>Sets the ETag HTTP header based on the time stamps of the handler's file dependencies.</summary>
      <exception cref="T:System.InvalidOperationException">The ETag header has already been set. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetExpires(System.DateTime)">
      <summary>Sets the Expires HTTP header to an absolute date and time.</summary>
      <param name="date">The absolute expiration time.</param>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetLastModified(System.DateTime)">
      <summary>Sets the Last-Modified HTTP header to the specified date and time.</summary>
      <param name="date">The date-time value to set the Last-Modified header to.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="date" /> is later than the current DateTime. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetLastModifiedFromFileDependencies">
      <summary>Sets the Last-Modified HTTP header based on the time stamps of the handler's file dependencies.</summary>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetMaxAge(System.TimeSpan)">
      <summary>Sets the Cache-Control: max-age HTTP header to the specified time span.</summary>
      <param name="delta">The time span to set the Cache-Control: max-age header to.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delta" /> is less than 0 or greater than one year. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetNoServerCaching">
      <summary>Stops all origin-server caching for the current response.</summary>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetNoStore">
      <summary>Sets the Cache-Control: no-store HTTP header.</summary>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetNoTransforms">
      <summary>Sets the Cache-Control: no-transform HTTP header.</summary>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetOmitVaryStar(System.Boolean)">
      <summary>Specifies whether the response contains the vary:* header when varying by parameters.</summary>
      <param name="omit">true to direct the <see cref="T:System.Web.HttpCachePolicy" /> object to not use the * value for its <see cref="P:System.Web.HttpCachePolicy.VaryByHeaders" /> property; otherwise, false.</param>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetProxyMaxAge(System.TimeSpan)">
      <summary>Sets the Cache-Control: s-maxage HTTP header to the specified time span.</summary>
      <param name="delta">The time span to set the Cache-Control: s-maxage header to.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delta" /> is less than 0. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetRevalidation(System.Web.HttpCacheRevalidation)">
      <summary>Sets the Cache-Control HTTP header to either the must-revalidate or the proxy-revalidate directives, based on the specified enumeration value.</summary>
      <param name="revalidation">The <see cref="T:System.Web.HttpCacheRevalidation" /> enumeration value to set the Cache-Control header to.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="revalidation" /> is not one of the enumeration values. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetSlidingExpiration(System.Boolean)">
      <summary>Sets cache expiration to absolute or sliding.</summary>
      <param name="slide">true to set a sliding cache expiration, and false to set an absolute cache expiration.</param>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetValidUntilExpires(System.Boolean)">
      <summary>Specifies whether the ASP.NET cache should ignore HTTP Cache-Control headers sent by the client that invalidate the cache.</summary>
      <param name="validUntilExpires">true to specify that ASP.NET should ignore Cache-Control invalidation headers; otherwise, false.</param>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetVaryByCustom(System.String)">
      <summary>Specifies a text string to vary cached output responses by.</summary>
      <param name="custom">The text string to vary cached output by.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="custom" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Web.HttpCachePolicy.SetVaryByCustom(System.String)" /> method has already been called. </exception>
    </member>
    <member name="P:System.Web.HttpCachePolicyWrapper.VaryByContentEncodings">
      <summary>Gets the list of Content-Encoding headers that will be used to vary the output cache.</summary>
      <returns>An object that specifies which Content-Encoding headers are used to select the cached response.</returns>
    </member>
    <member name="P:System.Web.HttpCachePolicyWrapper.VaryByHeaders">
      <summary>Gets the list of all HTTP headers that will be used to vary cache output.</summary>
      <returns>An object that specifies which HTTP headers are used to select the cached response.</returns>
    </member>
    <member name="P:System.Web.HttpCachePolicyWrapper.VaryByParams">
      <summary>Gets the list of parameters received by an HTTP GET or HTTP POST that affect caching.</summary>
      <returns>An object that specifies which cache-control parameters are used to select the cached response.</returns>
    </member>
    <member name="T:System.Web.HttpCacheRevalidation">
      <summary>Provides enumerated values that are used to set revalidation-specific Cache-Control HTTP headers.</summary>
    </member>
    <member name="F:System.Web.HttpCacheRevalidation.AllCaches">
      <summary>Sets the HTTP header to Cache-Control: must-revalidate.</summary>
    </member>
    <member name="F:System.Web.HttpCacheRevalidation.ProxyCaches">
      <summary>Sets the HTTP header to Cache-Control: proxy-revalidate.</summary>
    </member>
    <member name="F:System.Web.HttpCacheRevalidation.None">
      <summary>If this value is set, no cache-revalidation directive is sent. The default value. </summary>
    </member>
    <member name="T:System.Web.HttpCacheValidateHandler">
      <summary>Represents a method that is called to validate a cached item before the item is served from the cache. </summary>
      <param name="context">The <see cref="T:System.Web.HttpContext" /> object containing information about the current request. </param>
      <param name="data">User-supplied data used to validate the cached item. </param>
      <param name="validationStatus">An <see cref="T:System.Web.HttpValidationStatus" /> enumeration value. Your delegate should set this value to indicate the result of the validation. </param>
    </member>
    <member name="T:System.Web.HttpCacheVaryByContentEncodings">
      <summary>Provides a type-safe way to set the <see cref="P:System.Web.HttpCachePolicy.VaryByContentEncodings" /> property of the <see cref="T:System.Web.HttpCachePolicy" /> class.</summary>
    </member>
    <member name="M:System.Web.HttpCacheVaryByContentEncodings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpCacheVaryByContentEncodings" /> class.</summary>
    </member>
    <member name="P:System.Web.HttpCacheVaryByContentEncodings.Item(System.String)">
      <summary>Gets or sets a value that indicates whether the cache varies according to the specified content encoding.</summary>
      <returns>true if the cache should vary by the specified content encoding; otherwise, false.</returns>
      <param name="contentEncoding">The name of the content encoding.</param>
      <exception cref="T:System.ArgumentNullException">The content encoding is null.</exception>
    </member>
    <member name="T:System.Web.HttpCacheVaryByHeaders">
      <summary>Provides a type-safe way to set the <see cref="P:System.Web.HttpCachePolicy.VaryByHeaders" /> property.</summary>
    </member>
    <member name="M:System.Web.HttpCacheVaryByHeaders.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpCacheVaryByHeaders" /> class.</summary>
    </member>
    <member name="P:System.Web.HttpCacheVaryByHeaders.AcceptTypes">
      <summary>Gets or sets a value indicating whether the ASP.NET output cache varies the cached responses by the Accept HTTP header, and appends it to the out-going Vary HTTP header.</summary>
      <returns>true when the ASP.NET output cache varies by the Accept header; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Web.HttpCacheVaryByHeaders.Item(System.String)">
      <summary>Gets or sets a custom header field that the ASP.NET output cache varies the cached responses by, and appends it to the out-going Vary HTTP header.</summary>
      <returns>true when the ASP.NET output cache varies by the specified custom field; otherwise, false. The default value is false. </returns>
      <param name="header">The name of the custom header. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="header" /> is null. </exception>
    </member>
    <member name="P:System.Web.HttpCacheVaryByHeaders.UserAgent">
      <summary>Gets or sets a value indicating whether the ASP.NET output cache varies the cached responses by the User-Agent header, and appends it to the out-going Vary HTTP header.</summary>
      <returns>true when the ASP.NET output cache varies by the User-Agent header, and adds it to the Vary HTTP header sent to the client; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Web.HttpCacheVaryByHeaders.UserCharSet">
      <summary>Gets or sets a value indicating whether the ASP.NET output cache varies the cached responses by the Accept-Charset header, and appends it to the out-going Vary HTTP header.</summary>
      <returns>true when the ASP.NET output cache varies by the Accept-Charset header and adds it to the Vary HTTP header sent to the client; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Web.HttpCacheVaryByHeaders.UserLanguage">
      <summary>Gets or sets a value indicating whether the ASP.NET output cache varies the cached responses by the Accept-Language header, and appends it to the out-going Vary HTTP header.</summary>
      <returns>true when ASP.NET output cache varies by the Accept-Language header and adds it to the Vary HTTP header sent to the client; otherwise, false. The default value is false.</returns>
    </member>
    <member name="M:System.Web.HttpCacheVaryByHeaders.VaryByUnspecifiedParameters">
      <summary>Causes ASP.NET to vary by all header values and sets the Vary HTTP header to the value * (an asterisk). All other Vary header information to be dropped.</summary>
    </member>
    <member name="T:System.Web.HttpCacheVaryByParams">
      <summary>Provides a type-safe way to set the <see cref="P:System.Web.HttpCachePolicy.VaryByParams" /> property.</summary>
    </member>
    <member name="M:System.Web.HttpCacheVaryByParams.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpCacheVaryByParams" /> class.</summary>
    </member>
    <member name="P:System.Web.HttpCacheVaryByParams.IgnoreParams">
      <summary>Gets or sets a value indicating whether an HTTP response varies by Get or Post parameters. </summary>
      <returns>true if HTTP request parameters are ignored; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpCacheVaryByParams.Item(System.String)">
      <summary>Gets or sets a value indicating whether the cache varies according to the specified HTTP request parameter.</summary>
      <returns>true if the cache should vary by the specified parameter value.</returns>
      <param name="header">The name of the custom parameter. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="header" /> is null. </exception>
    </member>
    <member name="T:System.Web.HttpClientCertificate">
      <summary>Provides the client certificate fields issued by the client in response to the server's request for the client's identity.</summary>
    </member>
    <member name="P:System.Web.HttpClientCertificate.BinaryIssuer">
      <summary>Gets or sets the certificate issuer, in binary format.</summary>
      <returns>The certificate issuer, expressed in binary format.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.CertEncoding">
      <summary>Gets the encoding of the certificate.</summary>
      <returns>One of the CERT_CONTEXT.dwCertEncodingType values.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.Certificate">
      <summary>Gets a string containing the binary stream of the entire certificate content, in ASN.1 format.</summary>
      <returns>The client certificate.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.Cookie">
      <summary>Gets the unique ID for the client certificate, if provided.</summary>
      <returns>The client certificate ID.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.Flags">
      <summary>A set of flags that provide additional client certificate information.</summary>
      <returns>A set of Boolean flags.</returns>
    </member>
    <member name="M:System.Web.HttpClientCertificate.Get(System.String)">
      <summary>Returns individual client certificate fields by name.</summary>
      <returns>The value of the item specified by <paramref name="field" />.</returns>
      <param name="field">The item in the collection to retrieve. </param>
    </member>
    <member name="P:System.Web.HttpClientCertificate.IsPresent">
      <summary>Gets a value that indicates whether the client certificate is present.</summary>
      <returns>true if the client certificate is present; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.Issuer">
      <summary>A string that contains a list of subfield values containing information about the certificate issuer.</summary>
      <returns>The certificate issuer's information.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.IsValid">
      <summary>Gets a value that indicates whether the client certificate is valid.</summary>
      <returns>true if the client certificate is valid; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.KeySize">
      <summary>Gets the number of bits in the digital certificate key size. For example, 128.</summary>
      <returns>The number of bits in the key size.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.PublicKey">
      <summary>Gets the public key binary value from the certificate.</summary>
      <returns>A byte array that contains the public key value.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.SecretKeySize">
      <summary>Gets the number of bits in the server certificate private key. For example, 1024.</summary>
      <returns>The number of bits in the server certificate private key.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.SerialNumber">
      <summary>Provides the certificate serial number as an ASCII representation of hexadecimal bytes separated by hyphens. For example, 04-67-F3-02.</summary>
      <returns>The certificate serial number.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.ServerIssuer">
      <summary>Gets the issuer field of the server certificate.</summary>
      <returns>The issuer field of the server certificate.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.ServerSubject">
      <summary>Gets the subject field of the server certificate.</summary>
      <returns>The subject field of the server certificate.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.Subject">
      <summary>Gets the subject field of the client certificate.</summary>
      <returns>The subject field of the client certificate.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.ValidFrom">
      <summary>Gets the date when the certificate becomes valid. The date varies with international settings.</summary>
      <returns>The date when the certificate becomes valid.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.ValidUntil">
      <summary>Gets the certificate expiration date.</summary>
      <returns>The certificate expiration date.</returns>
    </member>
    <member name="T:System.Web.HttpCompileException">
      <summary>The exception that is thrown when a compiler error occurs.</summary>
    </member>
    <member name="M:System.Web.HttpCompileException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpCompileException" /> class.</summary>
    </member>
    <member name="M:System.Web.HttpCompileException.#ctor(System.CodeDom.Compiler.CompilerResults,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpCompileException" /> class.</summary>
      <param name="results">A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> containing compiler output and error information. </param>
      <param name="sourceCode">The path to the file that contains the source code being compiled when the error occurs.</param>
    </member>
    <member name="M:System.Web.HttpCompileException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpCompileException" /> class.</summary>
      <param name="message">The exception message to specify when the error occurs.</param>
    </member>
    <member name="M:System.Web.HttpCompileException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpCompileException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If <paramref name="innerException" /> is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:System.Web.HttpCompileException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="P:System.Web.HttpCompileException.Message">
      <summary>Gets a message that describes the reason for the current exception.</summary>
      <returns>A string that describes the first compilation error listed in the compiler results. If no compiler results were provided, the property returns the error message provided for this exception, or an empty string (""), if no error message was provided.</returns>
    </member>
    <member name="P:System.Web.HttpCompileException.Results">
      <summary>Gets compiler output and error information for the exception.</summary>
      <returns>A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> containing compiler output and error information.</returns>
    </member>
    <member name="P:System.Web.HttpCompileException.SourceCode">
      <summary>Gets a string containing the path to the file that contains the source code being compiled when the error occurs.</summary>
      <returns>The path of the source file being compiled when the error occurs. The default is null.</returns>
    </member>
    <member name="T:System.Web.HttpContext">
      <summary>Encapsulates all HTTP-specific information about an individual HTTP request.</summary>
    </member>
    <member name="M:System.Web.HttpContext.#ctor(System.Web.HttpRequest,System.Web.HttpResponse)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpContext" /> class by using the specified request and response objects.</summary>
      <param name="request">The <see cref="T:System.Web.HttpRequest" /> object for the current HTTP request.</param>
      <param name="response">The <see cref="T:System.Web.HttpResponse" /> object for the current HTTP request.</param>
    </member>
    <member name="M:System.Web.HttpContext.#ctor(System.Web.HttpWorkerRequest)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpContext" /> class that uses the specified worker-request object.</summary>
      <param name="wr">The <see cref="T:System.Web.HttpWorkerRequest" /> object for the current HTTP request.</param>
    </member>
    <member name="M:System.Web.HttpContext.AddError(System.Exception)">
      <summary>Adds an exception to the exception collection for the current HTTP request.</summary>
      <param name="errorInfo">The <see cref="T:System.Exception" /> to add to the exception collection.</param>
    </member>
    <member name="P:System.Web.HttpContext.AllErrors">
      <summary>Gets an array of errors accumulated while processing an HTTP request.</summary>
      <returns>An array of <see cref="T:System.Exception" /> objects for the current HTTP request.</returns>
    </member>
    <member name="P:System.Web.HttpContext.Application">
      <summary>Gets the <see cref="T:System.Web.HttpApplicationState" /> object for the current HTTP request.</summary>
      <returns>The <see cref="T:System.Web.HttpApplicationState" /> for the current HTTP request.To get the <see cref="T:System.Web.HttpApplication" /> object for the current HTTP request, use <see cref="P:System.Web.HttpContext.ApplicationInstance" />. (ASP.NET uses ApplicationInstance instead of Application as a property name to refer to the current <see cref="T:System.Web.HttpApplication" /> instance in order to avoid confusion between ASP.NET and classic ASP. In classic ASP, Application refers to the global application state dictionary.) </returns>
    </member>
    <member name="P:System.Web.HttpContext.ApplicationInstance">
      <summary>Gets or sets the <see cref="T:System.Web.HttpApplication" /> object for the current HTTP request.</summary>
      <returns>The <see cref="T:System.Web.HttpApplication" /> for the current HTTP request.ASP.NET uses ApplicationInstance instead of Application as a property name to refer to the current <see cref="T:System.Web.HttpApplication" /> instance in order to avoid confusion between ASP.NET and classic ASP. In classic ASP, Application refers to the global application state dictionary.</returns>
      <exception cref="T:System.InvalidOperationException">The Web application is running under IIS 7.0 in Integrated mode, and an attempt was made to change the property value from a non-null value to null.</exception>
    </member>
    <member name="P:System.Web.HttpContext.Cache">
      <summary>Gets the <see cref="T:System.Web.Caching.Cache" /> object for the current application domain.</summary>
      <returns>The <see cref="T:System.Web.Caching.Cache" /> for the current application domain.</returns>
    </member>
    <member name="M:System.Web.HttpContext.ClearError">
      <summary>Clears all errors for the current HTTP request.</summary>
    </member>
    <member name="P:System.Web.HttpContext.Current">
      <summary>Gets or sets the <see cref="T:System.Web.HttpContext" /> object for the current HTTP request.</summary>
      <returns>The <see cref="T:System.Web.HttpContext" /> for the current HTTP request.</returns>
    </member>
    <member name="P:System.Web.HttpContext.CurrentHandler">
      <summary>Gets the <see cref="T:System.Web.IHttpHandler" /> object that represents the currently executing handler.</summary>
      <returns>An <see cref="T:System.Web.IHttpHandler" /> that represents the currently executing handler. </returns>
    </member>
    <member name="P:System.Web.HttpContext.CurrentNotification">
      <summary>Gets a <see cref="T:System.Web.RequestNotification" /> value that indicates the current <see cref="T:System.Web.HttpApplication" /> event that is processing. </summary>
      <returns>One of the <see cref="T:System.Web.RequestNotification" /> values.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The operation requires integrated pipeline mode in IIS 7.0 and at least the .NET Framework version 3.0.</exception>
    </member>
    <member name="P:System.Web.HttpContext.Error">
      <summary>Gets the first error (if any) accumulated during HTTP request processing.</summary>
      <returns>The first <see cref="T:System.Exception" /> for the current HTTP request/response process; otherwise, null if no errors were accumulated during the HTTP request processing. The default is null.</returns>
    </member>
    <member name="M:System.Web.HttpContext.GetAppConfig(System.String)">
      <summary>Returns requested configuration information for the current application.</summary>
      <returns>An object containing configuration information. (Cast the returned configuration section to the appropriate configuration type before use.)</returns>
      <param name="name">The application configuration tag for which information is requested.</param>
    </member>
    <member name="M:System.Web.HttpContext.GetConfig(System.String)">
      <summary>Returns requested configuration information for the current HTTP request.</summary>
      <returns>The specified <see cref="T:System.Configuration.ConfigurationSection" />, null if the section does not exist, or an internal object if the section is not accessible at run time. (Cast the returned object to the appropriate configuration type before use.) </returns>
      <param name="name">The configuration tag for which information is requested.</param>
    </member>
    <member name="M:System.Web.HttpContext.GetGlobalResourceObject(System.String,System.String)">
      <summary>Gets an application-level resource object based on the specified <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the requested application-level resource object; otherwise, null if a resource object is not found or if a resource object is found but it does not have the requested property.</returns>
      <param name="classKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> property of the requested resource object.</param>
      <param name="resourceKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object.</param>
      <exception cref="T:System.Resources.MissingManifestResourceException">A resource object with the specified <paramref name="classKey" /> parameter was not found.- or -The main assembly does not contain the resources for the neutral culture, and these resources are required because the appropriate satellite assembly is missing.</exception>
    </member>
    <member name="M:System.Web.HttpContext.GetGlobalResourceObject(System.String,System.String,System.Globalization.CultureInfo)">
      <summary>Gets an application-level resource object based on the specified <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties, and on the <see cref="T:System.Globalization.CultureInfo" /> object.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the requested application-level resource object, which is localized for the specified culture; otherwise, null if a resource object is not found or if a resource object is found but it does not have the requested property.</returns>
      <param name="classKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> property of the requested resource object.</param>
      <param name="resourceKey">A string that represents a <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object.</param>
      <param name="culture">A string that represents the <see cref="T:System.Globalization.CultureInfo" /> object of the requested resource.</param>
      <exception cref="T:System.Resources.MissingManifestResourceException">A resource object for which the specified <paramref name="classKey" /> parameter was not found.- or -The main assembly does not contain the resources for the neutral culture, and these resources are required because the appropriate satellite assembly is missing.</exception>
    </member>
    <member name="M:System.Web.HttpContext.GetLocalResourceObject(System.String,System.String)">
      <summary>Gets a page-level resource object based on the specified <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the requested page-level resource object; otherwise, null if a matching resource object is found but not a <paramref name="resourceKey" /> parameter.</returns>
      <param name="virtualPath">The <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> property for the local resource object.</param>
      <param name="resourceKey">A string that represents a <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object</param>
      <exception cref="T:System.Resources.MissingManifestResourceException">A resource object was not found for the specified <paramref name="virtualPath" /> parameter.</exception>
      <exception cref="T:System.ArgumentException">The specified <paramref name="virtualPath" /> parameter is not in the current application's root directory.</exception>
      <exception cref="T:System.InvalidOperationException">The resource class for the page was not found.</exception>
    </member>
    <member name="M:System.Web.HttpContext.GetLocalResourceObject(System.String,System.String,System.Globalization.CultureInfo)">
      <summary>Gets a page-level resource object based on the specified <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties, and on the <see cref="T:System.Globalization.CultureInfo" /> object.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the requested local resource object, which is localized for the specified culture; otherwise null if a matching resource object is found but not a <paramref name="resourceKey" /> parameter.</returns>
      <param name="virtualPath">The <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> property for the local resource object.</param>
      <param name="resourceKey">A string that represents a <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object.</param>
      <param name="culture">A string that represents the <see cref="T:System.Globalization.CultureInfo" /> object of the requested resource object.</param>
      <exception cref="T:System.Resources.MissingManifestResourceException">A resource object was not found for the specified <paramref name="virtualPath" /> Parameter.</exception>
      <exception cref="T:System.ArgumentException">The specified <paramref name="virtualPath" /> parameter is not in the current application's root directory.</exception>
      <exception cref="T:System.InvalidOperationException">The resource class for the page was not found.</exception>
    </member>
    <member name="M:System.Web.HttpContext.GetSection(System.String)">
      <summary>Gets a specified configuration section for the current application's default configuration. </summary>
      <returns>The specified <see cref="T:System.Configuration.ConfigurationSection" />, null if the section does not exist, or an internal object if the section is not accessible at run time.</returns>
      <param name="sectionName">The configuration section path (in XPath format) and the configuration element name.</param>
    </member>
    <member name="P:System.Web.HttpContext.Handler">
      <summary>Gets or sets the <see cref="T:System.Web.IHttpHandler" /> object responsible for processing the HTTP request.</summary>
      <returns>An <see cref="T:System.Web.IHttpHandler" /> responsible for processing the HTTP request.</returns>
    </member>
    <member name="P:System.Web.HttpContext.IsCustomErrorEnabled">
      <summary>Gets a value indicating whether custom errors are enabled for the current HTTP request.</summary>
      <returns>true if custom errors are enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpContext.IsDebuggingEnabled">
      <summary>Gets a value indicating whether the current HTTP request is in debug mode.</summary>
      <returns>true if the request is in debug mode; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpContext.IsPostNotification">
      <summary>Gets a value that is the current processing point in the ASP.NET pipeline just after an <see cref="T:System.Web.HttpApplication" /> event has finished processing. </summary>
      <returns>true if custom errors are enabled; otherwise, false.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The operation requires the integrated pipeline mode in IIS 7.0 and at least the .NET Framework 3.0.</exception>
    </member>
    <member name="P:System.Web.HttpContext.Items">
      <summary>Gets a key/value collection that can be used to organize and share data between an <see cref="T:System.Web.IHttpModule" /> interface and an <see cref="T:System.Web.IHttpHandler" /> interface during an HTTP request.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> key/value collection that provides access to an individual value in the collection by a specified key.</returns>
    </member>
    <member name="P:System.Web.HttpContext.PreviousHandler">
      <summary>Gets the <see cref="T:System.Web.IHttpHandler" /> object for the parent handler.</summary>
      <returns>An <see cref="T:System.Web.IHttpHandler" /> instance, or null if no previous handler was found.</returns>
    </member>
    <member name="P:System.Web.HttpContext.Profile">
      <summary>Gets the <see cref="T:System.Web.Profile.ProfileBase" /> object for the current user profile.</summary>
      <returns>A <see cref="T:System.Web.Profile.ProfileBase" /> if the application configuration file contains a definition for the profile's properties; otherwise, null.</returns>
    </member>
    <member name="M:System.Web.HttpContext.RemapHandler(System.Web.IHttpHandler)">
      <summary>Enables you to specify a handler for the request.</summary>
      <param name="handler">The object that should process the request.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Web.HttpContext.RemapHandler(System.Web.IHttpHandler)" /> method was called after the <see cref="E:System.Web.HttpApplication.MapRequestHandler" /> event occurred.</exception>
    </member>
    <member name="P:System.Web.HttpContext.Request">
      <summary>Gets the <see cref="T:System.Web.HttpRequest" /> object for the current HTTP request.</summary>
      <returns>The <see cref="T:System.Web.HttpRequest" /> for the current HTTP request.</returns>
      <exception cref="T:System.Web.HttpException">The Web application is running under IIS 7 in Integrated mode.</exception>
    </member>
    <member name="P:System.Web.HttpContext.Response">
      <summary>Gets the <see cref="T:System.Web.HttpResponse" /> object for the current HTTP response.</summary>
      <returns>The <see cref="T:System.Web.HttpResponse" /> for the current HTTP response.</returns>
      <exception cref="T:System.Web.HttpException">The Web application is running under IIS 7 in Integrated mode.</exception>
    </member>
    <member name="M:System.Web.HttpContext.RewritePath(System.String)">
      <summary>Rewrites the URL using the given path.</summary>
      <param name="path">The internal rewrite path.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is null.</exception>
      <exception cref="T:System.Web.HttpException">The <paramref name="path" /> parameter is not in the current application's root directory.</exception>
    </member>
    <member name="M:System.Web.HttpContext.RewritePath(System.String,System.Boolean)">
      <summary>Rewrites the URL using the given path and a Boolean value that specifies whether the virtual path for server resources is modified.</summary>
      <param name="path">The internal rewrite path.</param>
      <param name="rebaseClientPath">true to reset the virtual path; false to keep the virtual path unchanged.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is null.</exception>
      <exception cref="T:System.Web.HttpException">The <paramref name="path" /> parameter is not in the current application's root directory.</exception>
    </member>
    <member name="M:System.Web.HttpContext.RewritePath(System.String,System.String,System.String)">
      <summary>Rewrites the URL by using the given path, path information, and query string information.</summary>
      <param name="filePath">The internal rewrite path.</param>
      <param name="pathInfo">Additional path information for a resource.</param>
      <param name="queryString">The request query string.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is not in the current application's root directory.</exception>
      <exception cref="T:System.Web.HttpException">The <paramref name="filePath" /> parameter is not in the current application's root directory.</exception>
    </member>
    <member name="M:System.Web.HttpContext.RewritePath(System.String,System.String,System.String,System.Boolean)">
      <summary>Rewrites the URL using the given virtual path, path information, query string information, and a Boolean value that specifies whether the client file path is set to the rewrite path. </summary>
      <param name="filePath">The virtual path to the resource that services the request.</param>
      <param name="pathInfo">Additional path information to use for the URL redirect.</param>
      <param name="queryString">The request query string to use for the URL redirect.</param>
      <param name="setClientFilePath">true to set the file path used for client resources to the value of the <paramref name="filePath" /> parameter; otherwise false.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is not in the current application's root directory.</exception>
      <exception cref="T:System.Web.HttpException">The <paramref name="filePath" /> parameter is not in the current application's root directory.</exception>
    </member>
    <member name="P:System.Web.HttpContext.Server">
      <summary>Gets the <see cref="T:System.Web.HttpServerUtility" /> object that provides methods used in processing Web requests.</summary>
      <returns>The <see cref="T:System.Web.HttpServerUtility" /> for the current HTTP request.</returns>
    </member>
    <member name="P:System.Web.HttpContext.Session">
      <summary>Gets the <see cref="T:System.Web.SessionState.HttpSessionState" /> object for the current HTTP request.</summary>
      <returns>The <see cref="T:System.Web.SessionState.HttpSessionState" /> object for the current HTTP request.</returns>
    </member>
    <member name="M:System.Web.HttpContext.SetSessionStateBehavior(System.Web.SessionState.SessionStateBehavior)">
      <summary>Sets the type of session state behavior that is required in order to support an HTTP request.</summary>
      <param name="sessionStateBehavior">One of the enumeration values that specifies what type of session state behavior is required.</param>
      <exception cref="T:System.InvalidOperationException">The method was called after the <see cref="E:System.Web.HttpApplication.AcquireRequestState" /> event was raised. </exception>
    </member>
    <member name="P:System.Web.HttpContext.SkipAuthorization">
      <summary>Gets or sets a value that specifies whether the <see cref="T:System.Web.Security.UrlAuthorizationModule" /> object should skip the authorization check for the current request.</summary>
      <returns>true if <see cref="T:System.Web.Security.UrlAuthorizationModule" /> should skip the authorization check; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.Web.HttpContext.System#IServiceProvider#GetService(System.Type)">
      <summary>Returns an object for the current service type.</summary>
      <returns>A <see cref="T:System.Web.HttpContext" />; otherwise, null if no service is found.</returns>
      <param name="service">A type of <see cref="T:System.Web.HttpContext" /> service to set the service provider to.</param>
    </member>
    <member name="P:System.Web.HttpContext.Timestamp">
      <summary>Gets the initial timestamp of the current HTTP request.</summary>
      <returns>The timestamp of the current HTTP request.</returns>
    </member>
    <member name="P:System.Web.HttpContext.Trace">
      <summary>Gets the <see cref="T:System.Web.TraceContext" /> object for the current HTTP response.</summary>
      <returns>The <see cref="T:System.Web.TraceContext" /> for the current HTTP response.</returns>
    </member>
    <member name="P:System.Web.HttpContext.User">
      <summary>Gets or sets security information for the current HTTP request.</summary>
      <returns>Security information for the current HTTP request.</returns>
    </member>
    <member name="T:System.Web.HttpContextBase">
      <summary>Serves as the base class for classes that contain HTTP-specific information about an individual HTTP request.</summary>
    </member>
    <member name="M:System.Web.HttpContextBase.#ctor">
      <summary>Initializes the class for use by an inherited class instance. This constructor can only be called by an inherited class.</summary>
    </member>
    <member name="M:System.Web.HttpContextBase.AddError(System.Exception)">
      <summary>When overridden in a derived class, adds an exception to the exception collection for the current HTTP request.</summary>
      <param name="errorInfo">The exception to add to the exception collection.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.AllErrors">
      <summary>When overridden in a derived class, gets an array of errors (if any) that accumulated when an HTTP request was being processed.</summary>
      <returns>An array of <see cref="T:System.Exception" /> objects for the current HTTP request, or null if no errors accumulated during the HTTP request processing.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.Application">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Web.HttpApplicationState" /> object for the current HTTP request.</summary>
      <returns>The application state object for the current HTTP request.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.ApplicationInstance">
      <summary>When overridden in a derived class, gets or sets the <see cref="T:System.Web.HttpApplication" /> object for the current HTTP request.</summary>
      <returns>The object for the current HTTP request.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.Cache">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Web.Caching.Cache" /> object for the current application domain.</summary>
      <returns>The cache for the current application domain.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpContextBase.ClearError">
      <summary>When overridden in a derived class, clears all errors for the current HTTP request.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.CurrentHandler">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Web.IHttpHandler" /> object that represents the handler that is currently executing.</summary>
      <returns>An object that represents the currently executing handler. </returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.CurrentNotification">
      <summary>When overridden in a derived class, gets a <see cref="T:System.Web.RequestNotification" /> value that indicates the <see cref="T:System.Web.HttpApplication" /> event that is currently processing. </summary>
      <returns>One of the <see cref="T:System.Web.RequestNotification" /> values.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.Error">
      <summary>When overridden in a derived class, gets the first error (if any) that accumulated when an HTTP request was being processed.</summary>
      <returns>The first exception for the current HTTP request/response process, or null if no errors accumulated during the HTTP request processing.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpContextBase.GetGlobalResourceObject(System.String,System.String)">
      <summary>When overridden in a derived class, gets an application-level resource object based on the specified <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties.</summary>
      <returns>The requested application-level resource object, or null if no matching resource object is found.</returns>
      <param name="classKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> property of the requested resource object.</param>
      <param name="resourceKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpContextBase.GetGlobalResourceObject(System.String,System.String,System.Globalization.CultureInfo)">
      <summary>When overridden in a derived class, gets an application-level resource object based on the specified <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties, and on the <see cref="T:System.Globalization.CultureInfo" /> object.</summary>
      <returns>The requested application-level resource object, which is localized for the specified culture, or null if no matching resource object is found.</returns>
      <param name="classKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> property of the requested resource object.</param>
      <param name="resourceKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object.</param>
      <param name="culture">A string that represents the <see cref="T:System.Globalization.CultureInfo" /> object of the requested resource.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpContextBase.GetLocalResourceObject(System.String,System.String)">
      <summary>When overridden in a derived class, gets a page-level resource object based on the specified <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties.</summary>
      <returns>The requested page-level resource object, or null if no matching resource object is found.</returns>
      <param name="virtualPath">A string that represents the <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> property of the local resource object.</param>
      <param name="resourceKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpContextBase.GetLocalResourceObject(System.String,System.String,System.Globalization.CultureInfo)">
      <summary>When overridden in a derived class, gets a page-level resource object based on the specified <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties, and on the <see cref="T:System.Globalization.CultureInfo" /> object.</summary>
      <returns>The requested local resource object, which is localized for the specified culture, or null if no matching resource object is found.</returns>
      <param name="virtualPath">A string that represents the <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> property of the local resource object.</param>
      <param name="resourceKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object.</param>
      <param name="culture">A string that represents the <see cref="T:System.Globalization.CultureInfo" /> object of the requested resource object.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpContextBase.GetSection(System.String)">
      <summary>When overridden in a derived class, gets the specified configuration section of the current application's default configuration. </summary>
      <returns>The specified section, or null if the section does not exist.</returns>
      <param name="sectionName">The configuration section path (in XPath format) and the configuration element name.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpContextBase.GetService(System.Type)">
      <summary>When overridden in a derived class, returns an object for the current service type.</summary>
      <returns>The current service type, or null if no service is found.</returns>
      <param name="serviceType">The type of service object to get.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.Handler">
      <summary>When overridden in a derived class, gets or sets the <see cref="T:System.Web.IHttpHandler" /> object that is responsible for processing the HTTP request.</summary>
      <returns>The object that is responsible for processing the HTTP request.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.IsCustomErrorEnabled">
      <summary>When overridden in a derived class, gets a value that indicates whether custom errors are enabled for the current HTTP request.</summary>
      <returns>true if custom errors are enabled; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.IsDebuggingEnabled">
      <summary>When overridden in a derived class, gets a value that indicates whether the current HTTP request is in debug mode.</summary>
      <returns>true if the request is in debug mode; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.IsPostNotification">
      <summary>When overridden in a derived class, gets a value that indicates whether an <see cref="T:System.Web.HttpApplication" /> event has finished processing. </summary>
      <returns>true if the event has finished processing; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.Items">
      <summary>When overridden in a derived class, gets a key/value collection that can be used to organize and share data between a module and a handler during an HTTP request.</summary>
      <returns>A key/value collection that provides access to an individual value in the collection by using a specified key.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.PreviousHandler">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Web.IHttpHandler" /> object for the parent handler.</summary>
      <returns>An <see cref="T:System.Web.IHttpHandler" /> object that represents the parent handler, or null if no parent handler was found.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.Profile">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Web.Profile.ProfileBase" /> object for the current user profile.</summary>
      <returns>If the profile properties are defined in the application configuration file and profiles are enabled for the application, an object that represents the current user profile; otherwise, null.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpContextBase.RemapHandler(System.Web.IHttpHandler)">
      <summary>When overridden in a derived class, specifies a handler for the request.</summary>
      <param name="handler">The object that should process the request.</param>
      <exception cref="T:System.NotImplementedException">A derived type fails to implement this method.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.Request">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Web.HttpRequest" /> object for the current HTTP request.</summary>
      <returns>The current HTTP request.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.Response">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Web.HttpResponse" /> object for the current HTTP response.</summary>
      <returns>The current HTTP response.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpContextBase.RewritePath(System.String)">
      <summary>When overridden in a derived class, rewrites the URL by using the specified path.</summary>
      <param name="path">The replacement path.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpContextBase.RewritePath(System.String,System.Boolean)">
      <summary>When overridden in a derived class, rewrites the URL by using the specified path and a value that specifies whether the virtual path for server resources is modified.</summary>
      <param name="path">The replacement path.</param>
      <param name="rebaseClientPath">true to reset the virtual path; false to keep the virtual path unchanged.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpContextBase.RewritePath(System.String,System.String,System.String)">
      <summary>When overridden in a derived class, rewrites the URL by using the specified path, path information, and query string information.</summary>
      <param name="filePath">The replacement path.</param>
      <param name="pathInfo">Additional path information for a resource.</param>
      <param name="queryString">The request query string.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpContextBase.RewritePath(System.String,System.String,System.String,System.Boolean)">
      <summary>When overridden in a derived class, rewrites the URL by using the specified path, path information, query string information, and a value that specifies whether the client file path is set to the rewrite path. </summary>
      <param name="filePath">The replacement path.</param>
      <param name="pathInfo">Additional path information for a resource.</param>
      <param name="queryString">The request query string.</param>
      <param name="setClientFilePath">true to set the file path used for client resources to the value of the <paramref name="filePath" /> parameter; otherwise, false.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.Server">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Web.HttpServerUtility" /> object that provides methods that are used when Web requests are being processed.</summary>
      <returns>The server utility object for the current HTTP request.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.Session">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Web.SessionState.HttpSessionState" /> object for the current HTTP request.</summary>
      <returns>The session-state object for the current HTTP request.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpContextBase.SetSessionStateBehavior(System.Web.SessionState.SessionStateBehavior)">
      <summary>When overridden in a derived class, sets the type of session state behavior that is required to support an HTTP request.</summary>
      <param name="sessionStateBehavior">One of the enumeration values that specifies what type of session state behavior is required.</param>
      <exception cref="T:System.NotImplementedException">A derived type fails to implement this method.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.SkipAuthorization">
      <summary>When overridden in a derived class, gets or sets a value that specifies whether the <see cref="T:System.Web.Security.UrlAuthorizationModule" /> object should skip the authorization check for the current request.</summary>
      <returns>true if <see cref="T:System.Web.Security.UrlAuthorizationModule" /> should skip the authorization check; otherwise, false. </returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.Timestamp">
      <summary>When overridden in a derived class, gets the initial timestamp of the current HTTP request.</summary>
      <returns>The timestamp of the current HTTP request.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.Trace">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Web.TraceContext" /> object for the current HTTP response.</summary>
      <returns>The trace object for the current HTTP response.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.User">
      <summary>When overridden in a derived class, gets or sets security information for the current HTTP request.</summary>
      <returns>An object that contains security information for the current HTTP request.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="T:System.Web.HttpContextWrapper">
      <summary>Encapsulates the HTTP intrinsic object that contains HTTP-specific information about an individual HTTP request.</summary>
    </member>
    <member name="M:System.Web.HttpContextWrapper.#ctor(System.Web.HttpContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpContextWrapper" /> class by using the specified context object.</summary>
      <param name="httpContext">The object that this wrapper class provides access to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="httpContext" /> is null.</exception>
    </member>
    <member name="M:System.Web.HttpContextWrapper.AddError(System.Exception)">
      <summary>Adds an exception to the exception collection for the current HTTP request.</summary>
      <param name="errorInfo">The exception to add to the exception collection.</param>
    </member>
    <member name="P:System.Web.HttpContextWrapper.AllErrors">
      <summary>Gets an array of errors (if any) that accumulated when an HTTP request was being processed.</summary>
      <returns>An array of <see cref="T:System.Exception" /> objects for the current HTTP request, or null if no errors accumulated during the HTTP request processing.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.Application">
      <summary>Gets the <see cref="T:System.Web.HttpApplicationState" /> object for the current HTTP request.</summary>
      <returns>The state object for the current HTTP request.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.ApplicationInstance">
      <summary>Gets or sets the <see cref="T:System.Web.HttpApplication" /> object for the current HTTP request.</summary>
      <returns>The object for the current HTTP request.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.Cache">
      <summary>Gets the <see cref="T:System.Web.Caching.Cache" /> object for the current application domain.</summary>
      <returns>The cache object for the current application domain.</returns>
    </member>
    <member name="M:System.Web.HttpContextWrapper.ClearError">
      <summary>Clears all errors for the current HTTP request.</summary>
    </member>
    <member name="P:System.Web.HttpContextWrapper.CurrentHandler">
      <summary>Gets the <see cref="T:System.Web.IHttpHandler" /> object that represents the handler that is currently executing.</summary>
      <returns>An object that represents the handler that is currently executing.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.CurrentNotification">
      <summary>Gets a <see cref="T:System.Web.RequestNotification" /> value that indicates the current <see cref="T:System.Web.HttpApplication" /> event that is processing.</summary>
      <returns>One of the <see cref="T:System.Web.RequestNotification" /> values.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.Error">
      <summary>Gets the first error (if any) that accumulated when an HTTP request was being processed.</summary>
      <returns>The first exception for the current HTTP request, or null if no errors accumulated when the HTTP request was being processed. The default is null.</returns>
    </member>
    <member name="M:System.Web.HttpContextWrapper.GetGlobalResourceObject(System.String,System.String)">
      <summary>Gets an application-level resource object based on the specified <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties.</summary>
      <returns>The requested application-level resource object, or null if no matching resource object is found.</returns>
      <param name="classKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> property of the requested resource object.</param>
      <param name="resourceKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object.</param>
    </member>
    <member name="M:System.Web.HttpContextWrapper.GetGlobalResourceObject(System.String,System.String,System.Globalization.CultureInfo)">
      <summary>Gets an application-level resource object based on the specified <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties, and on the <see cref="T:System.Globalization.CultureInfo" /> object.</summary>
      <returns>The requested application-level resource object, which is localized for the specified culture, or null if no matching resource object is found.</returns>
      <param name="classKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> property of the requested resource object.</param>
      <param name="resourceKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object.</param>
      <param name="culture">A string that represents the <see cref="T:System.Globalization.CultureInfo" /> object of the requested resource.</param>
    </member>
    <member name="M:System.Web.HttpContextWrapper.GetLocalResourceObject(System.String,System.String)">
      <summary>Gets a page-level resource object based on the specified <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties.</summary>
      <returns>The requested page-level resource object, or null if no matching resource object is found.</returns>
      <param name="virtualPath">A string that represents the <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> property of the local resource object.</param>
      <param name="resourceKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object.</param>
    </member>
    <member name="M:System.Web.HttpContextWrapper.GetLocalResourceObject(System.String,System.String,System.Globalization.CultureInfo)">
      <summary>Gets a page-level resource object based on the specified <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties, and on the <see cref="T:System.Globalization.CultureInfo" /> object.</summary>
      <returns>The requested local resource object, which is localized for the specified culture, or null if no matching resource object is found.</returns>
      <param name="virtualPath">A string that represents the <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> property of the local resource object.</param>
      <param name="resourceKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object.</param>
      <param name="culture">A string that represents the <see cref="T:System.Globalization.CultureInfo" /> object of the requested resource object.</param>
    </member>
    <member name="M:System.Web.HttpContextWrapper.GetSection(System.String)">
      <summary>Gets the specified configuration section of the current application's default configuration.</summary>
      <returns>The specified section, or null if the section does not exist.</returns>
      <param name="sectionName">The configuration section path (in XPath format) and the configuration element name.</param>
    </member>
    <member name="M:System.Web.HttpContextWrapper.GetService(System.Type)">
      <summary>Returns an object for the current service type.</summary>
      <returns>The current service type, or null if no service is found.</returns>
      <param name="serviceType">The type of service to get.</param>
    </member>
    <member name="P:System.Web.HttpContextWrapper.Handler">
      <summary>Gets or sets the <see cref="T:System.Web.IHttpHandler" /> object that is responsible for processing the HTTP request.</summary>
      <returns>The object that is responsible for processing the HTTP request.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.IsCustomErrorEnabled">
      <summary>Gets a value that indicates whether custom errors are enabled for the current HTTP request.</summary>
      <returns>true if custom errors are enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.IsDebuggingEnabled">
      <summary>Gets a value that indicates whether the current HTTP request is in debug mode.</summary>
      <returns>true if the request is in debug mode; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.IsPostNotification">
      <summary>Gets a value that indicates whether an <see cref="T:System.Web.HttpApplication" /> event has finished processing.</summary>
      <returns>true if the event has finished processing; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.Items">
      <summary>Gets a key/value collection that can be used to organize and share data between a module and a handler during an HTTP request.</summary>
      <returns>A key/value collection that provides access to an individual value in the collection by using a specified key.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.PreviousHandler">
      <summary>Gets the <see cref="T:System.Web.IHttpHandler" /> object for the parent handler.</summary>
      <returns>An <see cref="T:System.Web.IHttpHandler" /> object that represents the parent handler, or null if no parent handler was found.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.Profile">
      <summary>Gets the <see cref="T:System.Web.Profile.ProfileBase" /> object for the current user profile.</summary>
      <returns>If profile properties are